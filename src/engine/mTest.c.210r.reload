
;; Function _print_bound (_print_bound, funcdef_no=2, decl_uid=3970, cgraph_uid=2)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 39
changing reg in insn 41
changing reg in insn 14
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 30
changing reg in insn 22
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 31
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 29
changing reg in insn 33
changing reg in insn 44
changing reg in insn 45
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 46.


_print_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={16d,13u} r1={11d,7u} r2={5d,1u} r3={1d,1u} r4={6d,2u} r5={8d,4u} r6={1d,17u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={10d,1u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 243{184d,59u,0e} in 37{34 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:21 87 {*movdi_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f14bd7fb720 *.LC1>)) mTest.c:21 87 {*movdi_internal_rex64}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:21 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 8 7 9 2 (set (reg:DI 0 ax [73])
        (reg:DI 0 ax)) mTest.c:21 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [73])) mTest.c:21 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(insn 10 9 52 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:23 89 {*movsi_internal}
     (nil))
(jump_insn 52 10 53 2 (set (pc)
        (label_ref 37)) mTest.c:23 650 {jump}
     (nil)
 -> 37)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 40)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76
(code_label 40 53 13 3 3 "" [1 uses])
(note 13 40 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:60 D.4298 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mTest.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:23 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 1 dx [orig:61 D.4299 ] [61])
        (sign_extend:DI (reg:SI 1 dx [74]))) mTest.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [74])
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4299 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4299 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4299 ] [61])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4298 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4298 ] [60])
                    (reg:DI 1 dx [orig:62 D.4299 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4299 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4298 ] [60])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:64 D.4300 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4298 ] [63]) [0 *_8+0 S8 A64])) mTest.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4298 ] [63])
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4300 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4300 ] [64])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4300 ] [64])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 3 (set (reg:XF 2 cx [orig:66 D.4301 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4300 ] [65]) [0 *_10+0 S16 A128])) mTest.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4300 ] [65])
        (nil)))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:67 D.4298 ] [67])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mTest.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (set (reg:SI 1 dx [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:23 89 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx [orig:68 D.4299 ] [68])
        (sign_extend:DI (reg:SI 1 dx [75]))) mTest.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [75])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4299 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4299 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4299 ] [68])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4298 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4298 ] [67])
                    (reg:DI 1 dx [orig:69 D.4299 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4299 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4298 ] [67])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [orig:71 D.4300 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.4298 ] [70]) [0 *_15+0 S8 A64])) mTest.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4298 ] [70])
        (nil)))
(insn 28 27 29 3 (set (reg:XF 0 ax [orig:72 D.4301 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.4300 ] [71]) [0 *_16+0 S16 A128])) mTest.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4300 ] [71])
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:66 D.4301 ] [66])) mTest.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:66 D.4301 ] [66])
        (nil)))
(insn 31 30 32 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.4301 ] [72])) mTest.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.4301 ] [72])
        (nil)))
(insn 32 31 33 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (reg:DI 5 di [76])) mTest.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [76])
        (nil)))
(insn 34 33 35 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:23 91 {*movqi_internal}
     (nil))
(call_insn 35 34 36 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:23 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 36 35 37 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:23 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 37 36 38 4 2 "" [1 uses])
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 41 4 (set (reg:SI 0 ax [orig:59 D.4297 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mTest.c:23 89 {*movsi_internal}
     (nil))
(insn 41 39 42 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4297 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mTest.c:23 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4297 ] [59])
        (nil)))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) mTest.c:23 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 40)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 77
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [77])) mTest.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn 46 45 51 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:24 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 51 46 0 5 (const_int 0 [0]) mTest.c:25 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot (plot, funcdef_no=3, decl_uid=1938, cgraph_uid=3)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 38:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 52:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=82 from oldreg=79, assigning class DIREG to r82
      Creating newreg=83 from oldreg=81, assigning class CREG to r83
   52: {r83:DI=0;r82:DI=r83:DI<<0x3+r82:DI;r80:DI=r83:DI<<0x3+r80:DI;[r82:DI]=[r80:DI];use r83:DI;}
      REG_UNUSED r81:DI
      REG_UNUSED r80:DI
      REG_UNUSED r79:DI
    Inserting insn reload before:
   61: r82:DI=r79:DI
   62: r83:DI=r81:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 58: point = 0
   Insn 53: point = 0
   Insn 52: point = 0
   Insn 62: point = 1
	Hard reg 0 is preferable by r83 with profit 1
   Insn 61: point = 3
	Hard reg 1 is preferable by r82 with profit 1
   Insn 51: point = 5
   Insn 50: point = 6
   Insn 49: point = 7
   Insn 48: point = 8
   Insn 47: point = 8
   Insn 46: point = 9
  BB 4
   Insn 44: point = 10
   Insn 43: point = 10
   Insn 41: point = 11
  BB 2
   Insn 59: point = 12
   Insn 12: point = 12
   Insn 11: point = 12
   Insn 10: point = 13
   Insn 9: point = 14
   Insn 8: point = 14
   Insn 7: point = 15
   Insn 6: point = 15
   Insn 2: point = 16
  BB 3
   Insn 38: point = 16
   Insn 37: point = 16
   Insn 36: point = 16
   Insn 35: point = 16
   Insn 34: point = 17
   Insn 33: point = 17
   Insn 32: point = 18
   Insn 31: point = 19
   Insn 30: point = 20
   Insn 29: point = 22
   Insn 28: point = 24
   Insn 27: point = 26
   Insn 26: point = 28
   Insn 25: point = 30
   Insn 24: point = 31
   Insn 23: point = 32
   Insn 22: point = 34
   Insn 21: point = 36
   Insn 20: point = 38
   Insn 19: point = 40
   Insn 18: point = 42
   Insn 17: point = 44
   Insn 16: point = 45
 r59: [10..11]
 r60: [39..45]
 r61: [41..42]
 r62: [39..40]
 r63: [37..38]
 r64: [35..36]
 r65: [33..34]
 r66: [18..32]
 r67: [25..31]
 r68: [27..28]
 r69: [25..26]
 r70: [23..24]
 r71: [21..22]
 r72: [17..20]
 r73: [14..15]
 r74: [12..13]
 r75: [43..44]
 r76: [29..30]
 r77: [16..19]
 r78: [8..9]
 r79: [4..7]
 r80: [0..6]
 r81: [2..5]
 r82: [0..3]
 r83: [0..1]
Compressing live ranges: from 46 to 38 - 82%
Ranges after the compression:
 r59: [8..9]
 r60: [32..37]
 r61: [34..35]
 r62: [32..33]
 r63: [30..31]
 r64: [28..29]
 r65: [26..27]
 r66: [14..25]
 r67: [20..25]
 r68: [22..23]
 r69: [20..21]
 r70: [18..19]
 r71: [16..17]
 r72: [14..15]
 r73: [12..13]
 r74: [10..11]
 r75: [36..37]
 r76: [24..25]
 r77: [14..15]
 r78: [6..7]
 r79: [4..5]
 r80: [0..5]
 r81: [2..5]
 r82: [0..3]
 r83: [0..1]
	 Assigning to 82 (cl=DIREG, orig=79, freq=2, tfirst=82, tfreq=2)...
	   Assign 5 to reload r82 (freq=2)
	 Assigning to 83 (cl=CREG, orig=81, freq=2, tfirst=83, tfreq=2)...
	   Assign 2 to reload r83 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 41
changing reg in insn 43
changing reg in insn 16
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 32
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 6
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 35
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 51
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 53.


plot

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={19d,15u} r1={13d,8u} r2={8d,4u} r3={1d,1u} r4={9d,4u} r5={11d,7u} r6={1d,20u} r7={1d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 314{238d,76u,0e} in 46{42 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fr+0 S8 A64])
        (reg:DI 5 di [ fr ])) mTest.c:29 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ fr ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fr+0 S8 A64])) mTest.c:30 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:30 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [73])) mTest.c:30 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:30 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 0 ax [74])
        (reg:DI 0 ax)) mTest.c:30 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [74])) mTest.c:30 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(insn 12 11 59 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:32 89 {*movsi_internal}
     (nil))
(jump_insn 59 12 60 2 (set (pc)
        (label_ref 39)) mTest.c:32 650 {jump}
     (nil)
 -> 39)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 60 59 42)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 75 76 77
(code_label 42 60 15 3 7 "" [1 uses])
(note 15 42 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:60 D.4306 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mTest.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:32 89 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 1 dx [orig:61 D.4307 ] [61])
        (sign_extend:DI (reg:SI 1 dx [75]))) mTest.c:32 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [75])
        (nil)))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4307 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4307 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4307 ] [61])
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4306 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4306 ] [60])
                    (reg:DI 1 dx [orig:62 D.4307 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4307 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4306 ] [60])
            (nil))))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [orig:64 D.4308 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4306 ] [63]) [0 *_9+0 S8 A64])) mTest.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4306 ] [63])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4308 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4308 ] [64])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4308 ] [64])
        (nil)))
(insn 23 22 24 3 (set (reg:XF 2 cx [orig:66 D.4309 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4308 ] [65]) [0 *_11+0 S16 A128])) mTest.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4308 ] [65])
        (nil)))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:67 D.4306 ] [67])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mTest.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 3 (set (reg:SI 1 dx [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:32 89 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx [orig:68 D.4307 ] [68])
        (sign_extend:DI (reg:SI 1 dx [76]))) mTest.c:32 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [76])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4307 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4307 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4307 ] [68])
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4306 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4306 ] [67])
                    (reg:DI 1 dx [orig:69 D.4307 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4307 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4306 ] [67])
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [orig:71 D.4308 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.4306 ] [70]) [0 *_16+0 S8 A64])) mTest.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4306 ] [70])
        (nil)))
(insn 30 29 31 3 (set (reg:XF 0 ax [orig:72 D.4309 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.4308 ] [71]) [0 *_17+0 S16 A128])) mTest.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4308 ] [71])
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:66 D.4309 ] [66])) mTest.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:66 D.4309 ] [66])
        (nil)))
(insn 33 32 34 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.4309 ] [72])) mTest.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.4309 ] [72])
        (nil)))
(insn 34 33 35 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (reg:DI 5 di [77])) mTest.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [77])
        (nil)))
(insn 36 35 37 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:32 91 {*movqi_internal}
     (nil))
(call_insn 37 36 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:32 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 38 37 39 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:32 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 39 38 40 4 6 "" [1 uses])
(note 40 39 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 43 4 (set (reg:SI 0 ax [orig:59 D.4305 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 20 [0x14])) [0 f.n_nvp+0 S4 A32])) mTest.c:32 89 {*movsi_internal}
     (nil))
(insn 43 41 44 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4305 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mTest.c:32 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4305 ] [59])
        (nil)))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) mTest.c:32 612 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 80 81
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:33 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [78])) mTest.c:33 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(call_insn 48 47 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:33 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 5 (set (reg:DI 1 dx [79])
        (reg/f:DI 7 sp)) mTest.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 4 si [80])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 176 [0xb0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:35 274 {*adddi_1}
     (nil))
(insn 51 50 61 5 (set (reg:DI 0 ax [81])
        (const_int 38 [0x26])) mTest.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 61 51 62 5 (set (reg:DI 5 di [79])
        (reg:DI 1 dx [79])) mTest.c:35 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [79])
        (nil)))
(insn 62 61 52 5 (set (reg:DI 2 cx [81])
        (reg:DI 0 ax [81])) mTest.c:35 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [81])
        (nil)))
(insn 52 62 53 5 (parallel [
            (set (reg:DI 2 cx [81])
                (const_int 0 [0]))
            (set (reg:DI 5 di [79])
                (plus:DI (ashift:DI (reg:DI 2 cx [81])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [79])))
            (set (reg:DI 4 si [80])
                (plus:DI (ashift:DI (reg:DI 2 cx [81])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [80])))
            (set (mem:BLK (reg:DI 5 di [79]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [80]) [0 c+0 S304 A128]))
            (use (reg:DI 2 cx [81]))
        ]) mTest.c:35 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [81])
        (expr_list:REG_UNUSED (reg:DI 5 di [79])
            (expr_list:REG_UNUSED (reg:DI 4 si [80])
                (nil)))))
(call_insn 53 52 58 5 (call (mem:QI (symbol_ref:DI ("_print_bound") [flags 0x3]  <function_decl 0x7f14bd7bbf00 _print_bound>) [0 _print_bound S1 A8])
        (const_int 304 [0x130])) mTest.c:35 656 {*call}
     (nil)
    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
        (nil)))
(insn 58 53 0 5 (const_int 0 [0]) mTest.c:38 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot_where (plot_where, funcdef_no=4, decl_uid=1964, cgraph_uid=4)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 38:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 52:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=82 from oldreg=79, assigning class DIREG to r82
      Creating newreg=83 from oldreg=81, assigning class CREG to r83
   52: {r83:DI=0;r82:DI=r83:DI<<0x3+r82:DI;r80:DI=r83:DI<<0x3+r80:DI;[r82:DI]=[r80:DI];use r83:DI;}
      REG_UNUSED r81:DI
      REG_UNUSED r80:DI
      REG_UNUSED r79:DI
    Inserting insn reload before:
   61: r82:DI=r79:DI
   62: r83:DI=r81:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 58: point = 0
   Insn 53: point = 0
   Insn 52: point = 0
   Insn 62: point = 1
	Hard reg 0 is preferable by r83 with profit 1
   Insn 61: point = 3
	Hard reg 1 is preferable by r82 with profit 1
   Insn 51: point = 5
   Insn 50: point = 6
   Insn 49: point = 7
   Insn 48: point = 8
   Insn 47: point = 8
   Insn 46: point = 9
  BB 4
   Insn 44: point = 10
   Insn 43: point = 10
   Insn 41: point = 11
  BB 2
   Insn 59: point = 12
   Insn 12: point = 12
   Insn 11: point = 12
   Insn 10: point = 13
   Insn 9: point = 14
   Insn 8: point = 14
   Insn 7: point = 15
   Insn 6: point = 15
   Insn 2: point = 16
  BB 3
   Insn 38: point = 16
   Insn 37: point = 16
   Insn 36: point = 16
   Insn 35: point = 16
   Insn 34: point = 17
   Insn 33: point = 17
   Insn 32: point = 18
   Insn 31: point = 19
   Insn 30: point = 20
   Insn 29: point = 22
   Insn 28: point = 24
   Insn 27: point = 26
   Insn 26: point = 28
   Insn 25: point = 30
   Insn 24: point = 31
   Insn 23: point = 32
   Insn 22: point = 34
   Insn 21: point = 36
   Insn 20: point = 38
   Insn 19: point = 40
   Insn 18: point = 42
   Insn 17: point = 44
   Insn 16: point = 45
 r59: [10..11]
 r60: [39..45]
 r61: [41..42]
 r62: [39..40]
 r63: [37..38]
 r64: [35..36]
 r65: [33..34]
 r66: [18..32]
 r67: [25..31]
 r68: [27..28]
 r69: [25..26]
 r70: [23..24]
 r71: [21..22]
 r72: [17..20]
 r73: [14..15]
 r74: [12..13]
 r75: [43..44]
 r76: [29..30]
 r77: [16..19]
 r78: [8..9]
 r79: [4..7]
 r80: [0..6]
 r81: [2..5]
 r82: [0..3]
 r83: [0..1]
Compressing live ranges: from 46 to 38 - 82%
Ranges after the compression:
 r59: [8..9]
 r60: [32..37]
 r61: [34..35]
 r62: [32..33]
 r63: [30..31]
 r64: [28..29]
 r65: [26..27]
 r66: [14..25]
 r67: [20..25]
 r68: [22..23]
 r69: [20..21]
 r70: [18..19]
 r71: [16..17]
 r72: [14..15]
 r73: [12..13]
 r74: [10..11]
 r75: [36..37]
 r76: [24..25]
 r77: [14..15]
 r78: [6..7]
 r79: [4..5]
 r80: [0..5]
 r81: [2..5]
 r82: [0..3]
 r83: [0..1]
	 Assigning to 82 (cl=DIREG, orig=79, freq=2, tfirst=82, tfreq=2)...
	   Assign 5 to reload r82 (freq=2)
	 Assigning to 83 (cl=CREG, orig=81, freq=2, tfirst=83, tfreq=2)...
	   Assign 2 to reload r83 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 41
changing reg in insn 43
changing reg in insn 16
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 32
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 6
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 35
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 51
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 53.


plot_where

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={19d,15u} r1={13d,8u} r2={8d,4u} r3={1d,1u} r4={9d,4u} r5={11d,7u} r6={1d,20u} r7={1d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 314{238d,76u,0e} in 46{42 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 file_w+0 S8 A64])
        (reg:DI 5 di [ file_w ])) mTest.c:40 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ file_w ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 file_w+0 S8 A64])) mTest.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [73])) mTest.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:41 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 0 ax [74])
        (reg:DI 0 ax)) mTest.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [74])) mTest.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(insn 12 11 59 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:43 89 {*movsi_internal}
     (nil))
(jump_insn 59 12 60 2 (set (pc)
        (label_ref 39)) mTest.c:43 650 {jump}
     (nil)
 -> 39)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 60 59 42)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 75 76 77
(code_label 42 60 15 3 11 "" [1 uses])
(note 15 42 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:60 D.4312 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mTest.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:43 89 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 1 dx [orig:61 D.4313 ] [61])
        (sign_extend:DI (reg:SI 1 dx [75]))) mTest.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [75])
        (nil)))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4313 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4313 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4313 ] [61])
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4312 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4312 ] [60])
                    (reg:DI 1 dx [orig:62 D.4313 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4313 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4312 ] [60])
            (nil))))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [orig:64 D.4314 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4312 ] [63]) [0 *_9+0 S8 A64])) mTest.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4312 ] [63])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4314 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4314 ] [64])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4314 ] [64])
        (nil)))
(insn 23 22 24 3 (set (reg:XF 2 cx [orig:66 D.4315 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4314 ] [65]) [0 *_11+0 S16 A128])) mTest.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4314 ] [65])
        (nil)))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:67 D.4312 ] [67])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mTest.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 3 (set (reg:SI 1 dx [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:43 89 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx [orig:68 D.4313 ] [68])
        (sign_extend:DI (reg:SI 1 dx [76]))) mTest.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [76])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4313 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4313 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4313 ] [68])
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4312 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4312 ] [67])
                    (reg:DI 1 dx [orig:69 D.4313 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4313 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4312 ] [67])
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [orig:71 D.4314 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.4312 ] [70]) [0 *_16+0 S8 A64])) mTest.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4312 ] [70])
        (nil)))
(insn 30 29 31 3 (set (reg:XF 0 ax [orig:72 D.4315 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.4314 ] [71]) [0 *_17+0 S16 A128])) mTest.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4314 ] [71])
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:66 D.4315 ] [66])) mTest.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:66 D.4315 ] [66])
        (nil)))
(insn 33 32 34 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.4315 ] [72])) mTest.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.4315 ] [72])
        (nil)))
(insn 34 33 35 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (reg:DI 5 di [77])) mTest.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [77])
        (nil)))
(insn 36 35 37 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:43 91 {*movqi_internal}
     (nil))
(call_insn 37 36 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:43 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 38 37 39 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:43 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 39 38 40 4 10 "" [1 uses])
(note 40 39 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 43 4 (set (reg:SI 0 ax [orig:59 D.4311 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 20 [0x14])) [0 f.n_nvp+0 S4 A32])) mTest.c:43 89 {*movsi_internal}
     (nil))
(insn 43 41 44 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4311 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mTest.c:43 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4311 ] [59])
        (nil)))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) mTest.c:43 612 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 80 81
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [78])) mTest.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(call_insn 48 47 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 5 (set (reg:DI 1 dx [79])
        (reg/f:DI 7 sp)) mTest.c:46 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 4 si [80])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 176 [0xb0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:46 274 {*adddi_1}
     (nil))
(insn 51 50 61 5 (set (reg:DI 0 ax [81])
        (const_int 38 [0x26])) mTest.c:46 87 {*movdi_internal_rex64}
     (nil))
(insn 61 51 62 5 (set (reg:DI 5 di [79])
        (reg:DI 1 dx [79])) mTest.c:46 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [79])
        (nil)))
(insn 62 61 52 5 (set (reg:DI 2 cx [81])
        (reg:DI 0 ax [81])) mTest.c:46 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [81])
        (nil)))
(insn 52 62 53 5 (parallel [
            (set (reg:DI 2 cx [81])
                (const_int 0 [0]))
            (set (reg:DI 5 di [79])
                (plus:DI (ashift:DI (reg:DI 2 cx [81])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [79])))
            (set (reg:DI 4 si [80])
                (plus:DI (ashift:DI (reg:DI 2 cx [81])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [80])))
            (set (mem:BLK (reg:DI 5 di [79]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [80]) [0 c+0 S304 A128]))
            (use (reg:DI 2 cx [81]))
        ]) mTest.c:46 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [81])
        (expr_list:REG_UNUSED (reg:DI 5 di [79])
            (expr_list:REG_UNUSED (reg:DI 4 si [80])
                (nil)))))
(call_insn 53 52 58 5 (call (mem:QI (symbol_ref:DI ("_print_bound") [flags 0x3]  <function_decl 0x7f14bd7bbf00 _print_bound>) [0 _print_bound S1 A8])
        (const_int 304 [0x130])) mTest.c:46 656 {*call}
     (nil)
    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
        (nil)))
(insn 58 53 0 5 (const_int 0 [0]) mTest.c:49 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function print_tmp_point (print_tmp_point, funcdef_no=5, decl_uid=1940, cgraph_uid=5)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=352, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=320, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 50:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=81 from oldreg=78, assigning class DIREG to r81
      Creating newreg=82 from oldreg=80, assigning class CREG to r82
   50: {r82:DI=0;r81:DI=r82:DI<<0x3+r81:DI;r79:DI=r82:DI<<0x3+r79:DI;[r81:DI]=[r79:DI];use r82:DI;}
      REG_UNUSED r80:DI
      REG_UNUSED r79:DI
      REG_UNUSED r78:DI
    Inserting insn reload before:
   59: r81:DI=r78:DI
   60: r82:DI=r80:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 56: point = 0
   Insn 51: point = 0
   Insn 50: point = 0
   Insn 60: point = 1
	Hard reg 0 is preferable by r82 with profit 1
   Insn 59: point = 3
	Hard reg 1 is preferable by r81 with profit 1
   Insn 49: point = 5
   Insn 48: point = 6
   Insn 47: point = 7
   Insn 46: point = 8
   Insn 45: point = 8
   Insn 44: point = 9
  BB 4
   Insn 42: point = 10
   Insn 41: point = 10
   Insn 39: point = 11
  BB 2
   Insn 57: point = 12
   Insn 10: point = 12
   Insn 9: point = 12
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 6: point = 14
   Insn 5: point = 14
  BB 3
   Insn 36: point = 14
   Insn 35: point = 14
   Insn 34: point = 14
   Insn 33: point = 14
   Insn 32: point = 15
   Insn 31: point = 15
   Insn 30: point = 16
   Insn 29: point = 17
   Insn 28: point = 18
   Insn 27: point = 20
   Insn 26: point = 22
   Insn 25: point = 24
   Insn 24: point = 26
   Insn 23: point = 28
   Insn 22: point = 29
   Insn 21: point = 30
   Insn 20: point = 32
   Insn 19: point = 34
   Insn 18: point = 36
   Insn 17: point = 38
   Insn 16: point = 40
   Insn 15: point = 42
   Insn 14: point = 43
 r59: [10..11]
 r60: [37..43]
 r61: [39..40]
 r62: [37..38]
 r63: [35..36]
 r64: [33..34]
 r65: [31..32]
 r66: [16..30]
 r67: [23..29]
 r68: [25..26]
 r69: [23..24]
 r70: [21..22]
 r71: [19..20]
 r72: [15..18]
 r73: [12..13]
 r74: [41..42]
 r75: [27..28]
 r76: [14..17]
 r77: [8..9]
 r78: [4..7]
 r79: [0..6]
 r80: [2..5]
 r81: [0..3]
 r82: [0..1]
Compressing live ranges: from 44 to 36 - 81%
Ranges after the compression:
 r59: [8..9]
 r60: [30..35]
 r61: [32..33]
 r62: [30..31]
 r63: [28..29]
 r64: [26..27]
 r65: [24..25]
 r66: [12..23]
 r67: [18..23]
 r68: [20..21]
 r69: [18..19]
 r70: [16..17]
 r71: [14..15]
 r72: [12..13]
 r73: [10..11]
 r74: [34..35]
 r75: [22..23]
 r76: [12..13]
 r77: [6..7]
 r78: [4..5]
 r79: [0..5]
 r80: [2..5]
 r81: [0..3]
 r82: [0..1]
	 Assigning to 81 (cl=DIREG, orig=78, freq=2, tfirst=81, tfreq=2)...
	   Assign 5 to reload r81 (freq=2)
	 Assigning to 82 (cl=CREG, orig=80, freq=2, tfirst=82, tfreq=2)...
	   Assign 2 to reload r82 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=352, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=320, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 39
changing reg in insn 41
changing reg in insn 14
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 30
changing reg in insn 22
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 31
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 29
changing reg in insn 33
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 49
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 51.


print_tmp_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={18d,14u} r1={13d,8u} r2={8d,4u} r3={1d,1u} r4={9d,4u} r5={11d,6u} r6={1d,18u} r7={1d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 308{236d,72u,0e} in 44{40 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:53 87 {*movdi_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f14bd8182f8 *.LC3>)) mTest.c:53 87 {*movdi_internal_rex64}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:53 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 8 7 9 2 (set (reg:DI 0 ax [73])
        (reg:DI 0 ax)) mTest.c:53 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [73])) mTest.c:53 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(insn 10 9 57 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:55 89 {*movsi_internal}
     (nil))
(jump_insn 57 10 58 2 (set (pc)
        (label_ref 37)) mTest.c:55 650 {jump}
     (nil)
 -> 37)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 58 57 40)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76
(code_label 40 58 13 3 15 "" [1 uses])
(note 13 40 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:60 D.4317 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 c.tmp_nvp+0 S8 A64])) mTest.c:55 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:55 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 1 dx [orig:61 D.4318 ] [61])
        (sign_extend:DI (reg:SI 1 dx [74]))) mTest.c:55 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [74])
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4318 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4318 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4318 ] [61])
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4317 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4317 ] [60])
                    (reg:DI 1 dx [orig:62 D.4318 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4318 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4317 ] [60])
            (nil))))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:64 D.4319 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4317 ] [63]) [0 *_8+0 S8 A64])) mTest.c:55 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4317 ] [63])
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4319 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4319 ] [64])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4319 ] [64])
        (nil)))
(insn 21 20 22 3 (set (reg:XF 2 cx [orig:66 D.4320 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4319 ] [65]) [0 *_10+0 S16 A128])) mTest.c:55 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4319 ] [65])
        (nil)))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:67 D.4317 ] [67])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 c.tmp_nvp+0 S8 A64])) mTest.c:55 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (set (reg:SI 1 dx [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:55 89 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx [orig:68 D.4318 ] [68])
        (sign_extend:DI (reg:SI 1 dx [75]))) mTest.c:55 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [75])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4318 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4318 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4318 ] [68])
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4317 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4317 ] [67])
                    (reg:DI 1 dx [orig:69 D.4318 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4318 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4317 ] [67])
            (nil))))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [orig:71 D.4319 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.4317 ] [70]) [0 *_15+0 S8 A64])) mTest.c:55 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4317 ] [70])
        (nil)))
(insn 28 27 29 3 (set (reg:XF 0 ax [orig:72 D.4320 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.4319 ] [71]) [0 *_16+0 S16 A128])) mTest.c:55 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4319 ] [71])
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:55 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:66 D.4320 ] [66])) mTest.c:55 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:66 D.4320 ] [66])
        (nil)))
(insn 31 30 32 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.4320 ] [72])) mTest.c:55 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.4320 ] [72])
        (nil)))
(insn 32 31 33 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:55 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (reg:DI 5 di [76])) mTest.c:55 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [76])
        (nil)))
(insn 34 33 35 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:55 91 {*movqi_internal}
     (nil))
(call_insn 35 34 36 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:55 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 36 35 37 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:55 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 37 36 38 4 14 "" [1 uses])
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 41 4 (set (reg:SI 0 ax [orig:59 D.4316 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 c.n_tmp_nvp+0 S4 A128])) mTest.c:55 89 {*movsi_internal}
     (nil))
(insn 41 39 42 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4316 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mTest.c:55 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4316 ] [59])
        (nil)))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) mTest.c:55 612 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 77 78 79 80
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:56 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [77])) mTest.c:56 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn 46 45 47 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:56 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 5 (set (reg:DI 1 dx [78])
        (reg/f:DI 7 sp)) mTest.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 5 (set (reg:DI 4 si [79])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mTest.c:58 267 {*leadi}
     (nil))
(insn 49 48 59 5 (set (reg:DI 0 ax [80])
        (const_int 38 [0x26])) mTest.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 59 49 60 5 (set (reg:DI 5 di [78])
        (reg:DI 1 dx [78])) mTest.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [78])
        (nil)))
(insn 60 59 50 5 (set (reg:DI 2 cx [80])
        (reg:DI 0 ax [80])) mTest.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [80])
        (nil)))
(insn 50 60 51 5 (parallel [
            (set (reg:DI 2 cx [80])
                (const_int 0 [0]))
            (set (reg:DI 5 di [78])
                (plus:DI (ashift:DI (reg:DI 2 cx [80])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [78])))
            (set (reg:DI 4 si [79])
                (plus:DI (ashift:DI (reg:DI 2 cx [80])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [79])))
            (set (mem:BLK (reg:DI 5 di [78]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [79]) [0 c+0 S304 A128]))
            (use (reg:DI 2 cx [80]))
        ]) mTest.c:58 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [80])
        (expr_list:REG_UNUSED (reg:DI 5 di [78])
            (expr_list:REG_UNUSED (reg:DI 4 si [79])
                (nil)))))
(call_insn 51 50 56 5 (call (mem:QI (symbol_ref:DI ("_print_bound") [flags 0x3]  <function_decl 0x7f14bd7bbf00 _print_bound>) [0 _print_bound S1 A8])
        (const_int 304 [0x130])) mTest.c:58 656 {*call}
     (nil)
    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
        (nil)))
(insn 56 51 0 5 (const_int 0 [0]) mTest.c:59 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot_ID (plot_ID, funcdef_no=6, decl_uid=1945, cgraph_uid=6)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 30:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 49:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 52:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=81 from oldreg=75, assigning class DIREG to r81
      Creating newreg=82 from oldreg=77, assigning class CREG to r82
   52: {r82:DI=0;r81:DI=r82:DI<<0x3+r81:DI;r76:DI=r82:DI<<0x3+r76:DI;[r81:DI]=[r76:DI];use r82:DI;}
      REG_UNUSED r77:DI
      REG_UNUSED r76:DI
      REG_UNUSED r75:DI
    Inserting insn reload before:
   68: r81:DI=r75:DI
   69: r82:DI=r77:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 56:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=83 from oldreg=78, assigning class DIREG to r83
      Creating newreg=84 from oldreg=80, assigning class CREG to r84
   56: {r84:DI=0;r83:DI=r84:DI<<0x3+r83:DI;r79:DI=r84:DI<<0x3+r79:DI;[r83:DI]=[r79:DI];use r84:DI;}
      REG_UNUSED r80:DI
      REG_UNUSED r79:DI
      REG_UNUSED r78:DI
    Inserting insn reload before:
   70: r83:DI=r78:DI
   71: r84:DI=r80:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 63: point = 0
   Insn 58: point = 0
   Insn 57: point = 0
   Insn 56: point = 0
   Insn 71: point = 1
	Hard reg 0 is preferable by r84 with profit 1
   Insn 70: point = 3
	Hard reg 1 is preferable by r83 with profit 1
   Insn 55: point = 5
   Insn 54: point = 6
   Insn 53: point = 8
   Insn 52: point = 9
   Insn 69: point = 10
	Hard reg 0 is preferable by r82 with profit 1
   Insn 68: point = 12
	Hard reg 1 is preferable by r81 with profit 1
   Insn 51: point = 14
   Insn 50: point = 15
   Insn 49: point = 16
   Insn 48: point = 17
   Insn 47: point = 19
   Insn 46: point = 20
   Insn 45: point = 22
   Insn 44: point = 24
   Insn 43: point = 26
   Insn 42: point = 27
   Insn 41: point = 27
   Insn 40: point = 28
   Insn 39: point = 30
  BB 4
   Insn 66: point = 31
  BB 6
   Insn 36: point = 31
   Insn 35: point = 31
   Insn 34: point = 32
  BB 2
   Insn 64: point = 33
   Insn 8: point = 33
   Insn 4: point = 33
   Insn 3: point = 33
   Insn 2: point = 33
  BB 5
   Insn 30: point = 33
  BB 3
   Insn 24: point = 33
   Insn 23: point = 33
   Insn 22: point = 34
   Insn 21: point = 36
   Insn 20: point = 38
   Insn 19: point = 39
   Insn 18: point = 41
   Insn 17: point = 43
   Insn 16: point = 45
   Insn 15: point = 46
   Insn 14: point = 46
   Insn 13: point = 47
   Insn 12: point = 49
 r59: [45..47]
 r60: [37..39]
 r61: [35..36]
 r62: [33..34]
 r63: [26..28]
 r64: [18..20]
 r65: [7..17]
 r66: [48..49]
 r67: [44..46] [40..41]
 r68: [42..43]
 r69: [37..38]
 r70: [31..32]
 r71: [29..30]
 r72: [25..27] [21..22]
 r73: [23..24]
 r74: [18..19]
 r75: [13..16]
 r76: [9..15]
 r77: [11..14]
 r78: [4..8]
 r79: [0..6]
 r80: [2..5]
 r81: [9..12]
 r82: [9..10]
 r83: [0..3]
 r84: [0..1]
Compressing live ranges: from 50 to 40 - 80%
Ranges after the compression:
 r59: [36..37]
 r60: [30..31]
 r61: [28..29]
 r62: [26..27]
 r63: [20..21]
 r64: [14..15]
 r65: [6..13]
 r66: [38..39]
 r67: [36..37] [32..33]
 r68: [34..35]
 r69: [30..31]
 r70: [24..25]
 r71: [22..23]
 r72: [20..21] [16..17]
 r73: [18..19]
 r74: [14..15]
 r75: [12..13]
 r76: [8..13]
 r77: [10..13]
 r78: [4..7]
 r79: [0..5]
 r80: [2..5]
 r81: [8..11]
 r82: [8..9]
 r83: [0..3]
 r84: [0..1]
	 Assigning to 81 (cl=DIREG, orig=75, freq=2, tfirst=81, tfreq=2)...
	   Assign 5 to reload r81 (freq=2)
	 Assigning to 82 (cl=CREG, orig=77, freq=2, tfirst=82, tfreq=2)...
	   Assign 2 to reload r82 (freq=2)
	 Assigning to 83 (cl=DIREG, orig=78, freq=2, tfirst=83, tfreq=2)...
	   Assign 5 to reload r83 (freq=2)
	 Assigning to 84 (cl=CREG, orig=80, freq=2, tfirst=84, tfreq=2)...
	   Assign 2 to reload r84 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 54
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 16
changing reg in insn 15
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 55
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 58.


plot_ID

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={21d,19u} r1={8d,9u,4e} r2={6d,6u} r4={6d,5u} r5={7d,6u} r6={1d,21u} r7={1d,12u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={13d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 201{113d,82u,6e} in 48{47 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mTest.c:63 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mTest.c:63 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 ID+0 S4 A32])
        (reg:SI 1 dx [ ID ])) mTest.c:63 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ ID ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 64 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:65 89 {*movsi_internal}
     (nil))
(jump_insn 64 8 65 2 (set (pc)
        (label_ref 31)) mTest.c:65 650 {jump}
     (nil)
 -> 31)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 33)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 66 67 68 69
(code_label 33 65 11 3 21 "" [1 uses])
(note 11 33 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 ax [66])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mTest.c:65 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 1 dx [orig:59 D.4322 ] [59])
        (sign_extend:DI (reg:SI 0 ax [66]))) mTest.c:65 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [66])
        (nil)))
(insn 14 13 15 3 (set (reg:DI 0 ax [67])
        (reg:DI 1 dx [orig:59 D.4322 ] [59])) mTest.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 0 ax [67])
                (ashift:DI (reg:DI 0 ax [67])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:65 513 {*ashldi3_1}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [67])
                (plus:DI (reg:DI 0 ax [67])
                    (reg:DI 1 dx [orig:59 D.4322 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:65 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.4322 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.4322 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [68])
                (ashift:DI (reg:DI 0 ax [67])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:65 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(insn 18 17 19 3 (set (reg:DI 0 ax [67])
        (reg:DI 0 ax [68])) mTest.c:65 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [68])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 1 dx [orig:60 D.4322 ] [60])
        (reg:DI 0 ax [67])) mTest.c:65 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mTest.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.4323 ] [61])
                (plus:DI (reg/f:DI 0 ax [69])
                    (reg:DI 1 dx [orig:60 D.4322 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:65 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.4322 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.4322 ] [60]))
                (nil)))))
(insn 22 21 23 3 (set (reg:SI 0 ax [orig:62 D.4324 ] [62])
        (mem/j:SI (reg/f:DI 0 ax [orig:61 D.4323 ] [61]) [0 _7->ID+0 S4 A128])) mTest.c:65 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.4323 ] [61])
        (nil)))
(insn 23 22 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:62 D.4324 ] [62])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 ID+0 S4 A32]))) mTest.c:65 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.4324 ] [62])
        (nil)))
(jump_insn 24 23 25 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) mTest.c:65 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 25 24 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 66 25 67 4 (set (pc)
        (label_ref 37)) mTest.c:65 650 {jump}
     (nil)
 -> 37)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 28)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 28 67 29 5 19 "" [1 uses])
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:65 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70
(code_label 31 30 32 6 18 "" [1 uses])
(note 32 31 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 32 35 6 (set (reg:SI 0 ax [70])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mTest.c:65 89 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [70])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32]))) mTest.c:65 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [70])
        (nil)))
(jump_insn 36 35 37 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mTest.c:65 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 71 72 73 74 75 76 77 78 79 80
(code_label 37 36 38 7 20 "" [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mTest.c:66 89 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:DI 1 dx [orig:63 D.4322 ] [63])
        (sign_extend:DI (reg:SI 0 ax [71]))) mTest.c:66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(insn 41 40 42 7 (set (reg:DI 0 ax [72])
        (reg:DI 1 dx [orig:63 D.4322 ] [63])) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 7 (parallel [
            (set (reg:DI 0 ax [72])
                (ashift:DI (reg:DI 0 ax [72])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:66 513 {*ashldi3_1}
     (nil))
(insn 43 42 44 7 (parallel [
            (set (reg:DI 0 ax [72])
                (plus:DI (reg:DI 0 ax [72])
                    (reg:DI 1 dx [orig:63 D.4322 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:66 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.4322 ] [63])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:63 D.4322 ] [63])
                (const_int 5 [0x5]))
            (nil))))
(insn 44 43 45 7 (parallel [
            (set (reg:DI 0 ax [73])
                (ashift:DI (reg:DI 0 ax [72])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:66 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(insn 45 44 46 7 (set (reg:DI 0 ax [72])
        (reg:DI 0 ax [73])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(insn 46 45 47 7 (set (reg:DI 1 dx [orig:64 D.4322 ] [64])
        (reg:DI 0 ax [72])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(insn 47 46 48 7 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 7 (parallel [
            (set (reg/f:DI 37 r8 [orig:65 D.4323 ] [65])
                (plus:DI (reg:DI 1 dx [orig:64 D.4322 ] [64])
                    (reg/f:DI 0 ax [74])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:66 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.4322 ] [64])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:64 D.4322 ] [64]))
                (nil)))))
(insn 49 48 50 7 (parallel [
            (set (reg:DI 1 dx [75])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:66 274 {*adddi_1}
     (nil))
(insn 50 49 51 7 (set (reg:DI 4 si [76])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mTest.c:66 267 {*leadi}
     (nil))
(insn 51 50 68 7 (set (reg:DI 0 ax [77])
        (const_int 38 [0x26])) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 68 51 69 7 (set (reg:DI 5 di [75])
        (reg:DI 1 dx [75])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [75])
        (nil)))
(insn 69 68 52 7 (set (reg:DI 2 cx [77])
        (reg:DI 0 ax [77])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(insn 52 69 53 7 (parallel [
            (set (reg:DI 2 cx [77])
                (const_int 0 [0]))
            (set (reg:DI 5 di [75])
                (plus:DI (ashift:DI (reg:DI 2 cx [77])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [75])))
            (set (reg:DI 4 si [76])
                (plus:DI (ashift:DI (reg:DI 2 cx [77])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [76])))
            (set (mem:BLK (reg:DI 5 di [75]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [76]) [0 config+0 S304 A128]))
            (use (reg:DI 2 cx [77]))
        ]) mTest.c:66 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [77])
        (expr_list:REG_UNUSED (reg:DI 5 di [75])
            (expr_list:REG_UNUSED (reg:DI 4 si [76])
                (nil)))))
(insn 53 52 54 7 (set (reg:DI 1 dx [78])
        (reg/f:DI 7 sp)) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 7 (set (reg:DI 4 si [79])
        (reg/f:DI 37 r8 [orig:65 D.4323 ] [65])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:65 D.4323 ] [65])
        (nil)))
(insn 55 54 70 7 (set (reg:DI 0 ax [80])
        (const_int 20 [0x14])) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 70 55 71 7 (set (reg:DI 5 di [78])
        (reg:DI 1 dx [78])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [78])
        (nil)))
(insn 71 70 56 7 (set (reg:DI 2 cx [80])
        (reg:DI 0 ax [80])) mTest.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [80])
        (nil)))
(insn 56 71 57 7 (parallel [
            (set (reg:DI 2 cx [80])
                (const_int 0 [0]))
            (set (reg:DI 5 di [78])
                (plus:DI (ashift:DI (reg:DI 2 cx [80])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [78])))
            (set (reg:DI 4 si [79])
                (plus:DI (ashift:DI (reg:DI 2 cx [80])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [79])))
            (set (mem:BLK (reg:DI 5 di [78]) [0  S160 A128])
                (mem:BLK (reg:DI 4 si [79]) [0 *_13+0 S160 A128]))
            (use (reg:DI 2 cx [80]))
        ]) mTest.c:66 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [80])
        (expr_list:REG_UNUSED (reg:DI 5 di [78])
            (expr_list:REG_UNUSED (reg:DI 4 si [79])
                (nil)))))
(insn 57 56 58 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f14bd818ab0 *.LC4>)) mTest.c:66 87 {*movdi_internal_rex64}
     (nil))
(call_insn 58 57 63 7 (call (mem:QI (symbol_ref:DI ("plot") [flags 0x3]  <function_decl 0x7f14bda46d00 plot>) [0 plot S1 A8])
        (const_int 464 [0x1d0])) mTest.c:66 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S160 A128]))
            (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                            (const_int 160 [0xa0])) [0  S304 A128]))
                (nil)))))
(insn 63 58 0 7 (const_int 0 [0]) mTest.c:67 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot_pos (plot_pos, funcdef_no=7, decl_uid=1948, cgraph_uid=7)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=480, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 5:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 8:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=84 from oldreg=73, assigning class DIREG to r84
      Creating newreg=85 from oldreg=75, assigning class CREG to r85
    8: {r85:DI=0;r84:DI=r85:DI<<0x3+r84:DI;r74:DI=r85:DI<<0x3+r74:DI;[r84:DI]=[r74:DI];use r85:DI;}
      REG_UNUSED r75:DI
      REG_UNUSED r74:DI
      REG_UNUSED r73:DI
    Inserting insn reload before:
   61: r84:DI=r73:DI
   62: r85:DI=r75:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 12:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=86 from oldreg=76, assigning class DIREG to r86
      Creating newreg=87 from oldreg=78, assigning class CREG to r87
   12: {r87:DI=0;r86:DI=r87:DI<<0x3+r86:DI;r77:DI=r87:DI<<0x3+r77:DI;[r86:DI]=[r77:DI];use r87:DI;}
      REG_UNUSED r78:DI
      REG_UNUSED r77:DI
      REG_UNUSED r76:DI
    Inserting insn reload before:
   63: r86:DI=r76:DI
   64: r87:DI=r78:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 56: point = 0
   Insn 55: point = 0
   Insn 54: point = 1
  BB 4
   Insn 52: point = 2
   Insn 51: point = 2
   Insn 49: point = 3
  BB 2
   Insn 59: point = 4
   Insn 20: point = 4
   Insn 19: point = 4
   Insn 18: point = 5
   Insn 17: point = 6
   Insn 16: point = 6
   Insn 15: point = 6
   Insn 14: point = 6
   Insn 13: point = 6
   Insn 12: point = 6
   Insn 64: point = 7
	Hard reg 0 is preferable by r87 with profit 1
   Insn 63: point = 9
	Hard reg 1 is preferable by r86 with profit 1
   Insn 11: point = 11
   Insn 10: point = 12
   Insn 9: point = 13
   Insn 8: point = 14
   Insn 62: point = 15
	Hard reg 0 is preferable by r85 with profit 1
   Insn 61: point = 17
	Hard reg 1 is preferable by r84 with profit 1
   Insn 7: point = 19
   Insn 6: point = 20
   Insn 5: point = 21
  BB 3
   Insn 46: point = 22
   Insn 45: point = 22
   Insn 44: point = 22
   Insn 43: point = 22
   Insn 42: point = 23
   Insn 41: point = 23
   Insn 40: point = 24
   Insn 39: point = 25
   Insn 38: point = 26
   Insn 37: point = 28
   Insn 36: point = 30
   Insn 35: point = 32
   Insn 34: point = 34
   Insn 33: point = 36
   Insn 32: point = 37
   Insn 31: point = 38
   Insn 30: point = 40
   Insn 29: point = 42
   Insn 28: point = 44
   Insn 27: point = 46
   Insn 26: point = 48
   Insn 25: point = 50
   Insn 24: point = 51
 r59: [2..3]
 r60: [45..51]
 r61: [47..48]
 r62: [45..46]
 r63: [43..44]
 r64: [41..42]
 r65: [39..40]
 r66: [24..38]
 r67: [31..37]
 r68: [33..34]
 r69: [31..32]
 r70: [29..30]
 r71: [27..28]
 r72: [23..26]
 r73: [18..21]
 r74: [14..20]
 r75: [16..19]
 r76: [10..13]
 r77: [6..12]
 r78: [8..11]
 r79: [4..5]
 r80: [49..50]
 r81: [35..36]
 r82: [22..25]
 r83: [0..1]
 r84: [14..17]
 r85: [14..15]
 r86: [6..9]
 r87: [6..7]
Compressing live ranges: from 52 to 42 - 80%
Ranges after the compression:
 r59: [2..3]
 r60: [36..41]
 r61: [38..39]
 r62: [36..37]
 r63: [34..35]
 r64: [32..33]
 r65: [30..31]
 r66: [18..29]
 r67: [24..29]
 r68: [26..27]
 r69: [24..25]
 r70: [22..23]
 r71: [20..21]
 r72: [18..19]
 r73: [16..17]
 r74: [12..17]
 r75: [14..17]
 r76: [10..11]
 r77: [6..11]
 r78: [8..11]
 r79: [4..5]
 r80: [40..41]
 r81: [28..29]
 r82: [18..19]
 r83: [0..1]
 r84: [12..15]
 r85: [12..13]
 r86: [6..9]
 r87: [6..7]
	 Assigning to 84 (cl=DIREG, orig=73, freq=2, tfirst=84, tfreq=2)...
	   Assign 5 to reload r84 (freq=2)
	 Assigning to 85 (cl=CREG, orig=75, freq=2, tfirst=85, tfreq=2)...
	   Assign 2 to reload r85 (freq=2)
	 Assigning to 86 (cl=DIREG, orig=76, freq=2, tfirst=86, tfreq=2)...
	   Assign 5 to reload r86 (freq=2)
	 Assigning to 87 (cl=CREG, orig=78, freq=2, tfirst=87, tfreq=2)...
	   Assign 2 to reload r87 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=480, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 49
changing reg in insn 51
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 40
changing reg in insn 32
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 41
changing reg in insn 5
changing reg in insn 8
changing reg in insn 6
changing reg in insn 8
changing reg in insn 8
changing reg in insn 7
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 12
changing reg in insn 12
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 43
changing reg in insn 54
changing reg in insn 55
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 56.


plot_pos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={19d,15u} r1={14d,9u} r2={10d,7u} r3={1d,1u} r4={11d,6u} r5={14d,9u} r6={1d,19u} r7={1d,17u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={13d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 332{247d,85u,0e} in 50{46 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74 75 76 77 78 79
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg:DI 1 dx [73])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:71 274 {*adddi_1}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:DI 4 si [74])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 176 [0xb0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:71 274 {*adddi_1}
     (nil))
(insn 7 6 61 2 (set (reg:DI 0 ax [75])
        (const_int 38 [0x26])) mTest.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 61 7 62 2 (set (reg:DI 5 di [73])
        (reg:DI 1 dx [73])) mTest.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [73])
        (nil)))
(insn 62 61 8 2 (set (reg:DI 2 cx [75])
        (reg:DI 0 ax [75])) mTest.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (nil)))
(insn 8 62 9 2 (parallel [
            (set (reg:DI 2 cx [75])
                (const_int 0 [0]))
            (set (reg:DI 5 di [73])
                (plus:DI (ashift:DI (reg:DI 2 cx [75])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [73])))
            (set (reg:DI 4 si [74])
                (plus:DI (ashift:DI (reg:DI 2 cx [75])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [74])))
            (set (mem:BLK (reg:DI 5 di [73]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [74]) [0 c+0 S304 A128]))
            (use (reg:DI 2 cx [75]))
        ]) mTest.c:71 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [75])
        (expr_list:REG_UNUSED (reg:DI 5 di [73])
            (expr_list:REG_UNUSED (reg:DI 4 si [74])
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 1 dx [76])
        (reg/f:DI 7 sp)) mTest.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si [77])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mTest.c:71 267 {*leadi}
     (nil))
(insn 11 10 63 2 (set (reg:DI 0 ax [78])
        (const_int 20 [0x14])) mTest.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 63 11 64 2 (set (reg:DI 5 di [76])
        (reg:DI 1 dx [76])) mTest.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [76])
        (nil)))
(insn 64 63 12 2 (set (reg:DI 2 cx [78])
        (reg:DI 0 ax [78])) mTest.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(insn 12 64 13 2 (parallel [
            (set (reg:DI 2 cx [78])
                (const_int 0 [0]))
            (set (reg:DI 5 di [76])
                (plus:DI (ashift:DI (reg:DI 2 cx [78])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [76])))
            (set (reg:DI 4 si [77])
                (plus:DI (ashift:DI (reg:DI 2 cx [78])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [77])))
            (set (mem:BLK (reg:DI 5 di [76]) [0  S160 A128])
                (mem/c:BLK (reg:DI 4 si [77]) [0 f+0 S160 A128]))
            (use (reg:DI 2 cx [78]))
        ]) mTest.c:71 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [78])
        (expr_list:REG_UNUSED (reg:DI 5 di [76])
            (expr_list:REG_UNUSED (reg:DI 4 si [77])
                (nil)))))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f14bd8182f8 *.LC3>)) mTest.c:71 87 {*movdi_internal_rex64}
     (nil))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("plot") [flags 0x3]  <function_decl 0x7f14bda46d00 plot>) [0 plot S1 A8])
        (const_int 464 [0x1d0])) mTest.c:71 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S160 A128]))
            (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                            (const_int 160 [0xa0])) [0  S304 A128]))
                (nil)))))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f14bd8182f8 *.LC3>)) mTest.c:72 87 {*movdi_internal_rex64}
     (nil))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:72 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:DI 0 ax [79])
        (reg:DI 0 ax)) mTest.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [79])) mTest.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [79])
        (nil)))
(insn 20 19 59 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:74 89 {*movsi_internal}
     (nil))
(jump_insn 59 20 60 2 (set (pc)
        (label_ref 47)) mTest.c:74 650 {jump}
     (nil)
 -> 47)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 60 59 50)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 80 81 82
(code_label 50 60 23 3 25 "" [1 uses])
(note 23 50 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:60 D.4327 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 f.pos+0 S8 A128])) mTest.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 3 (set (reg:SI 1 dx [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:74 89 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx [orig:61 D.4328 ] [61])
        (sign_extend:DI (reg:SI 1 dx [80]))) mTest.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [80])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4328 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4328 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4328 ] [61])
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4327 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4327 ] [60])
                    (reg:DI 1 dx [orig:62 D.4328 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4328 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4327 ] [60])
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [orig:64 D.4329 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4327 ] [63]) [0 *_8+0 S8 A64])) mTest.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4327 ] [63])
        (nil)))
(insn 30 29 31 3 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4329 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4329 ] [64])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4329 ] [64])
        (nil)))
(insn 31 30 32 3 (set (reg:XF 2 cx [orig:66 D.4330 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4329 ] [65]) [0 *_10+0 S16 A128])) mTest.c:74 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4329 ] [65])
        (nil)))
(insn 32 31 33 3 (set (reg/f:DI 0 ax [orig:67 D.4327 ] [67])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 f.pos+0 S8 A128])) mTest.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:SI 1 dx [81])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mTest.c:74 89 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 1 dx [orig:68 D.4328 ] [68])
        (sign_extend:DI (reg:SI 1 dx [81]))) mTest.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [81])
        (nil)))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4328 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4328 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4328 ] [68])
        (nil)))
(insn 36 35 37 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4327 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4327 ] [67])
                    (reg:DI 1 dx [orig:69 D.4328 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4328 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4327 ] [67])
            (nil))))
(insn 37 36 38 3 (set (reg/f:DI 0 ax [orig:71 D.4329 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.4327 ] [70]) [0 *_15+0 S8 A64])) mTest.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4327 ] [70])
        (nil)))
(insn 38 37 39 3 (set (reg:XF 0 ax [orig:72 D.4330 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.4329 ] [71]) [0 *_16+0 S16 A128])) mTest.c:74 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4329 ] [71])
        (nil)))
(insn 39 38 40 3 (set (reg:DI 5 di [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:66 D.4330 ] [66])) mTest.c:74 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:66 D.4330 ] [66])
        (nil)))
(insn 41 40 42 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.4330 ] [72])) mTest.c:74 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.4330 ] [72])
        (nil)))
(insn 42 41 43 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 3 (set (reg:DI 5 di)
        (reg:DI 5 di [82])) mTest.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [82])
        (nil)))
(insn 44 43 45 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:74 91 {*movqi_internal}
     (nil))
(call_insn 45 44 46 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 46 45 47 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:74 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 47 46 48 4 24 "" [1 uses])
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 51 4 (set (reg:SI 0 ax [orig:59 D.4326 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 368 [0x170])) [0 c.t_w+0 S4 A128])) mTest.c:74 89 {*movsi_internal}
     (nil))
(insn 51 49 52 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4326 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mTest.c:74 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4326 ] [59])
        (nil)))
(jump_insn 52 51 53 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) mTest.c:74 612 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83
(note 53 52 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 5 (set (reg:DI 0 ax [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wstream+0 S8 A64])) mTest.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [83])) mTest.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(call_insn 56 55 0 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:75 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _gall_peter (_gall_peter, funcdef_no=8, decl_uid=4026, cgraph_uid=8)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 11:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=619,losers=2 -- reject
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) ?x  (1) f  (2) m {*truncxfdf2_mixed}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rzw {*call_value}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 27:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 28:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=77 from oldreg=68, assigning class SSE_REGS to r77
   28: r77:DF=r77:DF*r76:DF
      REG_DEAD r76:DF
      REG_DEAD r67:DF
    Inserting insn reload before:
   36: r77:DF=r67:DF
    Inserting insn reload after:
   37: r68:DF=r77:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 37:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) f {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 68 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

********** Pseudo live ranges #1: **********

  BB 2
   Insn 35: point = 0
   Insn 30: point = 0
   Insn 29: point = 1
   Insn 37: point = 3
   Insn 28: point = 5
   Insn 36: point = 6
	Hard reg 21 is preferable by r77 with profit 1
   Insn 27: point = 8
   Insn 26: point = 9
   Insn 25: point = 10
   Insn 24: point = 10
   Insn 23: point = 11
   Insn 22: point = 13
   Insn 21: point = 14
   Insn 20: point = 14
   Insn 19: point = 15
   Insn 18: point = 17
   Insn 17: point = 18
   Insn 16: point = 20
   Insn 15: point = 21
   Insn 14: point = 22
   Insn 13: point = 23
   Insn 12: point = 25
   Insn 11: point = 26
   Insn 10: point = 28
   Insn 9: point = 29
   Insn 8: point = 31
   Insn 7: point = 33
   Insn 3: point = 34
   Insn 2: point = 34
 r59: [30..31]
 r60: [27..29]
 r61: [24..26]
 r62: [21..23]
 r63: [0..18]
 r64: [14..15]
 r65: [12..13]
 r66: [10..11]
 r67: [7..9]
 r68: [2..3]
 r69: [0..1]
 r70: [32..33]
 r71: [27..28]
 r72: [24..25]
 r73: [21..22]
 r74: [19..20]
 r75: [16..17]
 r76: [5..8]
 r77: [4..6]
Compressing live ranges: from 34 to 28 - 82%
Ranges after the compression:
 r59: [24..25]
 r60: [22..23]
 r61: [20..21]
 r62: [18..19]
 r63: [0..15]
 r64: [12..13]
 r65: [10..11]
 r66: [8..9]
 r67: [6..7]
 r68: [2..3]
 r69: [0..1]
 r70: [26..27]
 r71: [22..23]
 r72: [20..21]
 r73: [18..19]
 r74: [16..17]
 r75: [14..15]
 r76: [4..7]
 r77: [4..5]
	 Assigning to 77 (cl=SSE_REGS, orig=68, freq=3, tfirst=77, tfreq=3)...
	   Assign 21 to reload r77 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 68
Changing spilled pseudos to memory in insn #37
Changing spilled pseudos to memory in insn #29

********** Local #3: **********

Reusing alternative 0 for insn #29
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #37
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 37:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 30
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 27
changing reg in insn 28
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 25.


_gall_peter

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={9d,6u} r1={4d,1u} r2={3d} r3={1d,1u} r4={3d,1u} r5={3d,1u} r6={1d,11u} r7={1d,6u} r8={7d,6u} r9={4d,2u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r20={1d,1u,2e} r21={8d,6u} r22={4d,1u} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 174{129d,43u,2e} in 29{27 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mTest.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])
        (reg:DI 4 si [ A ])) mTest.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ A ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mTest.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.4331 ] [59])
                (plus:DI (reg/f:DI 0 ax [70])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [70])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 9 8 10 2 (set (reg:XF 9 st(1) [orig:60 D.4332 ] [60])
        (mem:XF (reg/f:DI 0 ax [orig:59 D.4331 ] [59]) [0 *_2+0 S16 A128])) mTest.c:78 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.4331 ] [59])
        (nil)))
(insn 10 9 11 2 (set (reg:XF 8 st [71])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mTest.c:78 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.00150867960205711424350738525390625e+7 [0x0.98b3f765e40088p+25])
        (nil)))
(insn 11 10 12 2 (set (reg:XF 9 st(1) [orig:61 D.4332 ] [61])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.4332 ] [60])
            (reg:XF 8 st [71]))) mTest.c:78 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [71])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.4332 ] [60])
            (nil))))
(insn 12 11 13 2 (set (reg:XF 8 st [72])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mTest.c:78 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.54558441227157118191826157271862030029296875e+2 [0x0.fe8ef6011760cp+8])
        (nil)))
(insn 13 12 14 2 (set (reg:XF 8 st [orig:62 D.4332 ] [62])
        (div:XF (reg:XF 9 st(1) [orig:61 D.4332 ] [61])
            (reg:XF 8 st [72]))) mTest.c:78 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.4332 ] [61])
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) mTest.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (mem:XF (reg/f:DI 0 ax [73]) [0 *A_6(D)+0 S16 A128])
        (reg:XF 8 st [orig:62 D.4332 ] [62])) mTest.c:78 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [73])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.4332 ] [62])
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) mTest.c:79 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 3 bx [orig:63 D.4331 ] [63])
                (plus:DI (reg/f:DI 0 ax [74])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:79 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mTest.c:79 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (reg:XF 0 ax [orig:64 D.4332 ] [64])
        (mem:XF (reg/f:DI 0 ax [75]) [0 *a_1(D)+0 S16 A128])) mTest.c:79 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (nil)))
(insn 20 19 21 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:64 D.4332 ] [64])) mTest.c:79 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:64 D.4332 ] [64])
        (nil)))
(call_insn 21 20 22 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x41]  <function_decl 0x7f14bda42400 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mTest.c:79 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 22 21 23 2 (set (reg:XF 8 st [orig:65 D.4332 ] [65])
        (reg:XF 8 st)) mTest.c:79 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 23 22 24 2 (parallel [
            (set (reg:DF 21 xmm0 [orig:66 D.4333 ] [66])
                (float_truncate:DF (reg:XF 8 st [orig:65 D.4332 ] [65])))
            (clobber (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0  S8 A64]))
        ]) mTest.c:79 170 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.4332 ] [65])
        (nil)))
(insn 24 23 25 2 (set (reg:DF 21 xmm0)
        (reg:DF 21 xmm0 [orig:66 D.4333 ] [66])) mTest.c:79 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:66 D.4333 ] [66])
        (nil)))
(call_insn/u 25 24 26 2 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f14bd96ee00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) mTest.c:79 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 26 25 27 2 (set (reg:DF 21 xmm0 [orig:67 D.4333 ] [67])
        (reg:DF 21 xmm0)) mTest.c:79 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 27 26 36 2 (set (reg:DF 22 xmm1 [76])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) mTest.c:79 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 9.00995460587898828089237213134765625e+6 [0x0.897b229b1ae2a8p+24])
        (nil)))
(insn 36 27 28 2 (set (reg:DF 21 xmm0 [orig:68 D.4333 ] [68])
        (reg:DF 21 xmm0 [orig:67 D.4333 ] [67])) mTest.c:79 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:67 D.4333 ] [67])
        (nil)))
(insn 28 36 37 2 (set (reg:DF 21 xmm0 [orig:68 D.4333 ] [68])
        (mult:DF (reg:DF 21 xmm0 [orig:68 D.4333 ] [68])
            (reg:DF 22 xmm1 [76]))) mTest.c:79 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [76])
        (nil)))
(insn 37 28 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A64])
        (reg:DF 21 xmm0 [orig:68 D.4333 ] [68])) mTest.c:79 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:68 D.4333 ] [68])
        (nil)))
(insn 29 37 30 2 (set (reg:XF 8 st [orig:69 D.4332 ] [69])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A64]))) mTest.c:79 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 68 [ D.4333 ])
        (nil)))
(insn 30 29 35 2 (set (mem:XF (reg/f:DI 3 bx [orig:63 D.4331 ] [63]) [0 *_7+0 S16 A128])
        (reg:XF 8 st [orig:69 D.4332 ] [69])) mTest.c:79 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.4332 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:63 D.4331 ] [63])
            (nil))))
(insn 35 30 0 2 (const_int 0 [0]) mTest.c:80 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot_bound (plot_bound, funcdef_no=9, decl_uid=1954, cgraph_uid=9)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rzw {*call}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 33:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 36
changing reg in insn 38
changing reg in insn 14
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 28
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 30
changing reg in insn 41
changing reg in insn 42
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 43.


plot_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={13d,9u} r1={10d,5u} r2={6d,1u} r3={1d,1u} r4={8d,3u} r5={10d,5u} r6={1d,18u} r7={1d,13u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={9d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 279{222d,57u,0e} in 34{30 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f14bd7fb688 *.LC0>)) mTest.c:86 87 {*movdi_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f14bd8314c0 *.LC9>)) mTest.c:86 87 {*movdi_internal_rex64}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:86 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 8 7 9 2 (set (reg:DI 0 ax [67])
        (reg:DI 0 ax)) mTest.c:86 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [67])) mTest.c:86 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(insn 10 9 50 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:87 89 {*movsi_internal}
     (nil))
(jump_insn 50 10 51 2 (set (pc)
        (label_ref 34)) mTest.c:87 650 {jump}
     (nil)
 -> 34)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 51 50 37)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 68 69 70
(code_label 37 51 13 3 30 "" [1 uses])
(note 13 37 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:60 D.4336 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 conf.bound+0 S8 A64])) mTest.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [68])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 i+0 S4 A32])) mTest.c:88 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 1 dx [orig:61 D.4337 ] [61])
        (sign_extend:DI (reg:SI 1 dx [68]))) mTest.c:88 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [68])
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4337 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4337 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:88 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4337 ] [61])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4336 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4336 ] [60])
                    (reg:DI 1 dx [orig:62 D.4337 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:88 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4337 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4336 ] [60])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:64 D.4338 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4336 ] [63]) [0 *_8+0 S8 A64])) mTest.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4336 ] [63])
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg:DI 1 dx [69])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:88 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 21 20 22 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [69])) mTest.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [69])
        (nil)))
(insn 22 21 23 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:64 D.4338 ] [64])) mTest.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4338 ] [64])
        (nil)))
(call_insn 23 22 24 3 (call (mem:QI (symbol_ref:DI ("_gall_peter") [flags 0x3]  <function_decl 0x7f14bd7c5500 _gall_peter>) [0 _gall_peter S1 A8])
        (const_int 0 [0])) mTest.c:88 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 24 23 25 3 (set (reg:XF 2 cx [orig:65 D.4339 ] [65])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 P+16 S16 A128])) mTest.c:89 131 {*movxf_internal_rex64}
     (nil))
(insn 25 24 26 3 (set (reg:XF 0 ax [orig:66 D.4339 ] [66])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 P+0 S16 A128])) mTest.c:89 131 {*movxf_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg:DI 5 di [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 wstream+0 S8 A64])) mTest.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:65 D.4339 ] [65])) mTest.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:65 D.4339 ] [65])
        (nil)))
(insn 28 27 29 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:66 D.4339 ] [66])) mTest.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:66 D.4339 ] [66])
        (nil)))
(insn 29 28 30 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f14bd7fb7b8 *.LC2>)) mTest.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 3 (set (reg:DI 5 di)
        (reg:DI 5 di [70])) mTest.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [70])
        (nil)))
(insn 31 30 32 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:89 91 {*movqi_internal}
     (nil))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 32 [0x20]))) mTest.c:89 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 33 32 34 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -60 [0xffffffffffffffc4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -60 [0xffffffffffffffc4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:87 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 34 33 35 4 29 "" [1 uses])
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 38 4 (set (reg:SI 0 ax [orig:59 D.4335 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 conf.Nbound+0 S4 A128])) mTest.c:87 89 {*movsi_internal}
     (nil))
(insn 38 36 39 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4335 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 i+0 S4 A32]))) mTest.c:87 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4335 ] [59])
        (nil)))
(jump_insn 39 38 40 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) mTest.c:87 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 37)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71
(note 40 39 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 5 (set (reg:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 wstream+0 S8 A64])) mTest.c:91 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [71])) mTest.c:91 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(call_insn 43 42 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:91 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 49 43 0 5 (const_int 0 [0]) mTest.c:92 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function plot_movie (plot_movie, funcdef_no=10, decl_uid=1952, cgraph_uid=10)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 120:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 147:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 159:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 166:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (1) rzw {*call_value}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 189: point = 0
   Insn 175: point = 0
   Insn 174: point = 0
   Insn 173: point = 1
  BB 12
   Insn 171: point = 2
   Insn 170: point = 2
   Insn 168: point = 3
   Insn 167: point = 5
   Insn 166: point = 6
   Insn 194: point = 8
   Insn 164: point = 10
   Insn 163: point = 11
   Insn 162: point = 12
  BB 2
   Insn 190: point = 13
   Insn 12: point = 13
   Insn 11: point = 13
   Insn 10: point = 14
   Insn 9: point = 15
   Insn 8: point = 15
   Insn 7: point = 15
   Insn 3: point = 15
   Insn 2: point = 15
  BB 11
   Insn 159: point = 15
   Insn 158: point = 15
   Insn 157: point = 15
   Insn 156: point = 15
   Insn 155: point = 16
  BB 10
   Insn 153: point = 17
   Insn 152: point = 17
   Insn 151: point = 18
  BB 3
   Insn 192: point = 19
   Insn 16: point = 19
  BB 9
   Insn 147: point = 19
  BB 8
   Insn 144: point = 19
   Insn 143: point = 19
   Insn 142: point = 19
   Insn 141: point = 20
   Insn 140: point = 20
   Insn 139: point = 21
   Insn 138: point = 22
   Insn 137: point = 24
   Insn 136: point = 26
   Insn 135: point = 28
   Insn 134: point = 30
   Insn 133: point = 32
   Insn 132: point = 33
   Insn 131: point = 33
   Insn 130: point = 34
   Insn 129: point = 36
   Insn 128: point = 37
   Insn 127: point = 39
   Insn 126: point = 40
   Insn 125: point = 40
   Insn 124: point = 40
   Insn 123: point = 41
   Insn 122: point = 41
   Insn 121: point = 42
   Insn 120: point = 43
   Insn 119: point = 44
   Insn 118: point = 45
   Insn 117: point = 46
   Insn 116: point = 47
   Insn 115: point = 49
   Insn 114: point = 51
   Insn 113: point = 53
   Insn 112: point = 55
   Insn 111: point = 57
   Insn 110: point = 59
   Insn 109: point = 60
   Insn 108: point = 62
   Insn 107: point = 64
   Insn 106: point = 66
   Insn 105: point = 68
   Insn 104: point = 70
   Insn 103: point = 71
   Insn 102: point = 71
   Insn 101: point = 72
   Insn 100: point = 74
   Insn 99: point = 75
   Insn 98: point = 77
   Insn 97: point = 78
   Insn 96: point = 78
   Insn 95: point = 79
   Insn 94: point = 80
   Insn 93: point = 81
   Insn 92: point = 83
   Insn 91: point = 85
   Insn 90: point = 87
   Insn 89: point = 89
   Insn 88: point = 90
   Insn 87: point = 92
   Insn 86: point = 94
   Insn 85: point = 96
   Insn 84: point = 98
   Insn 83: point = 100
   Insn 82: point = 101
   Insn 81: point = 101
   Insn 80: point = 102
   Insn 79: point = 104
   Insn 78: point = 105
   Insn 77: point = 107
  BB 7
   Insn 72: point = 108
   Insn 71: point = 108
   Insn 70: point = 109
  BB 6
   Insn 69: point = 111
   Insn 68: point = 111
   Insn 67: point = 112
   Insn 66: point = 113
   Insn 65: point = 115
   Insn 64: point = 117
   Insn 63: point = 119
   Insn 62: point = 121
   Insn 61: point = 123
   Insn 60: point = 124
   Insn 59: point = 126
   Insn 58: point = 128
   Insn 57: point = 130
   Insn 56: point = 132
   Insn 55: point = 134
   Insn 54: point = 135
   Insn 53: point = 135
   Insn 52: point = 136
   Insn 51: point = 138
   Insn 50: point = 139
   Insn 49: point = 141
  BB 5
   Insn 44: point = 142
   Insn 43: point = 142
   Insn 42: point = 143
  BB 4
   Insn 41: point = 145
   Insn 40: point = 145
   Insn 39: point = 146
   Insn 38: point = 147
   Insn 37: point = 149
   Insn 36: point = 151
   Insn 35: point = 153
   Insn 34: point = 155
   Insn 33: point = 157
   Insn 32: point = 159
   Insn 31: point = 160
   Insn 30: point = 162
   Insn 29: point = 164
   Insn 28: point = 166
   Insn 27: point = 168
   Insn 26: point = 170
   Insn 25: point = 171
   Insn 24: point = 171
   Insn 23: point = 172
   Insn 22: point = 174
   Insn 21: point = 175
   Insn 20: point = 177
 r59: [2..12]
 r60: [7..11]
 r61: [9..10]
 r62: [7..8]
 r63: [4..6]
 r64: [2..3]
 r65: [163..175]
 r66: [170..172]
 r67: [163..164]
 r68: [161..162]
 r69: [154..160]
 r70: [156..157]
 r71: [154..155]
 r72: [152..153]
 r73: [150..151]
 r74: [148..149]
 r75: [142..147]
 r76: [127..139]
 r77: [134..136]
 r78: [127..128]
 r79: [125..126]
 r80: [118..124]
 r81: [120..121]
 r82: [118..119]
 r83: [116..117]
 r84: [114..115]
 r85: [108..113]
 r86: [93..105]
 r87: [100..102]
 r88: [93..94]
 r89: [91..92]
 r90: [84..90]
 r91: [86..87]
 r92: [84..85]
 r93: [82..83]
 r94: [78..81]
 r95: [63..75]
 r96: [70..72]
 r97: [63..64]
 r98: [61..62]
 r99: [54..60]
 r100: [56..57]
 r101: [54..55]
 r102: [52..53]
 r103: [50..51]
 r104: [48..49]
 r105: [43..47]
 r106: [42..46]
 r107: [41..45]
 r108: [25..37]
 r109: [32..34]
 r110: [25..26]
 r111: [23..24]
 r112: [20..22]
 r113: [13..14]
 r114: [176..177]
 r115: [173..174]
 r116: [169..171] [165..166]
 r117: [167..168]
 r118: [158..159]
 r119: [145..146]
 r120: [142..143]
 r121: [140..141]
 r122: [137..138]
 r123: [133..135] [129..130]
 r124: [131..132]
 r125: [122..123]
 r126: [111..112]
 r127: [108..109]
 r128: [106..107]
 r129: [103..104]
 r130: [99..101] [95..96]
 r131: [97..98]
 r132: [88..89]
 r133: [79..80]
 r134: [76..77]
 r135: [73..74]
 r136: [69..71] [65..66]
 r137: [67..68]
 r138: [58..59]
 r139: [40..44]
 r140: [38..39]
 r141: [35..36]
 r142: [31..33] [27..28]
 r143: [29..30]
 r144: [19..21]
 r145: [17..18]
 r146: [15..16]
 r147: [4..5]
 r148: [0..1]
Compressing live ranges: from 178 to 142 - 79%
Ranges after the compression:
 r59: [2..9]
 r60: [6..9]
 r61: [8..9]
 r62: [6..7]
 r63: [4..5]
 r64: [2..3]
 r65: [130..139]
 r66: [136..137]
 r67: [130..131]
 r68: [128..129]
 r69: [122..127]
 r70: [124..125]
 r71: [122..123]
 r72: [120..121]
 r73: [118..119]
 r74: [116..117]
 r75: [112..115]
 r76: [100..109]
 r77: [106..107]
 r78: [100..101]
 r79: [98..99]
 r80: [92..97]
 r81: [94..95]
 r82: [92..93]
 r83: [90..91]
 r84: [88..89]
 r85: [84..87]
 r86: [72..81]
 r87: [78..79]
 r88: [72..73]
 r89: [70..71]
 r90: [64..69]
 r91: [66..67]
 r92: [64..65]
 r93: [62..63]
 r94: [60..61]
 r95: [48..57]
 r96: [54..55]
 r97: [48..49]
 r98: [46..47]
 r99: [40..45]
 r100: [42..43]
 r101: [40..41]
 r102: [38..39]
 r103: [36..37]
 r104: [34..35]
 r105: [32..33]
 r106: [32..33]
 r107: [32..33]
 r108: [20..29]
 r109: [26..27]
 r110: [20..21]
 r111: [18..19]
 r112: [16..17]
 r113: [10..11]
 r114: [140..141]
 r115: [138..139]
 r116: [136..137] [132..133]
 r117: [134..135]
 r118: [126..127]
 r119: [114..115]
 r120: [112..113]
 r121: [110..111]
 r122: [108..109]
 r123: [106..107] [102..103]
 r124: [104..105]
 r125: [96..97]
 r126: [86..87]
 r127: [84..85]
 r128: [82..83]
 r129: [80..81]
 r130: [78..79] [74..75]
 r131: [76..77]
 r132: [68..69]
 r133: [60..61]
 r134: [58..59]
 r135: [56..57]
 r136: [54..55] [50..51]
 r137: [52..53]
 r138: [44..45]
 r139: [32..33]
 r140: [30..31]
 r141: [28..29]
 r142: [26..27] [22..23]
 r143: [24..25]
 r144: [16..17]
 r145: [14..15]
 r146: [12..13]
 r147: [4..5]
 r148: [0..1]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 162
changing reg in insn 170
changing reg in insn 163
changing reg in insn 166
changing reg in insn 164
changing reg in insn 194
changing reg in insn 194
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 43
changing reg in insn 40
changing reg in insn 50
changing reg in insn 52
changing reg in insn 55
changing reg in insn 53
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 71
changing reg in insn 68
changing reg in insn 78
changing reg in insn 80
changing reg in insn 83
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 92
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 96
changing reg in insn 99
changing reg in insn 101
changing reg in insn 104
changing reg in insn 102
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 120
changing reg in insn 117
changing reg in insn 121
changing reg in insn 118
changing reg in insn 122
changing reg in insn 128
changing reg in insn 130
changing reg in insn 133
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 10
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 85
changing reg in insn 83
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 84
changing reg in insn 83
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 104
changing reg in insn 103
changing reg in insn 102
changing reg in insn 107
changing reg in insn 105
changing reg in insn 104
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 119
changing reg in insn 124
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 135
changing reg in insn 133
changing reg in insn 132
changing reg in insn 131
changing reg in insn 136
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 142
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 167
changing reg in insn 168
changing reg in insn 173
changing reg in insn 174
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 175.


plot_movie

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 37[r8]
;;  ref usage 	r0={75d,69u} r1={28d,26u,5e} r2={13d,6u} r3={1d,1u} r4={13d,7u} r5={14d,8u} r6={1d,49u} r7={1d,25u} r8={9d,5u} r9={13d,7u} r10={8d,2u} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={45d,6u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 661{443d,213u,5e} in 150{144 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 113
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mTest.c:95 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mTest.c:95 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f14bd831e40 *.LC10>)) mTest.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f14bd831ed8 *.LC11>)) mTest.c:96 87 {*movdi_internal_rex64}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f14bd752000 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mTest.c:96 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 0 ax [113])
        (reg:DI 0 ax)) mTest.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 postream+0 S8 A64])
        (reg:DI 0 ax [113])) mTest.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 12 11 190 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])
        (const_int 0 [0])) mTest.c:100 89 {*movsi_internal}
     (nil))
(jump_insn 190 12 191 2 (set (pc)
        (label_ref 160)) mTest.c:100 650 {jump}
     (nil)
 -> 160)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 191 190 169)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 169 191 15 3 39 "" [1 uses])
(note 15 169 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 192 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:101 89 {*movsi_internal}
     (nil))
(jump_insn 192 16 193 3 (set (pc)
        (label_ref 148)) mTest.c:101 650 {jump}
     (nil)
 -> 148)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 150)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 69 70 71 72 73 74 75 114 115 116 117 118 119
(code_label 150 193 19 4 38 "" [1 uses])
(note 19 150 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 2 cx [orig:65 D.4343 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [114]) [0 *f_13(D)+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (nil)))
(insn 22 21 23 4 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:101 89 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 1 dx [orig:66 D.4344 ] [66])
        (sign_extend:DI (reg:SI 0 ax [115]))) mTest.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [115])
        (nil)))
(insn 24 23 25 4 (set (reg:DI 0 ax [116])
        (reg:DI 1 dx [orig:66 D.4344 ] [66])) mTest.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 0 ax [116])
                (ashift:DI (reg:DI 0 ax [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 0 ax [116])
                (plus:DI (reg:DI 0 ax [116])
                    (reg:DI 1 dx [orig:66 D.4344 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.4344 ] [66])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:66 D.4344 ] [66])
                (const_int 5 [0x5]))
            (nil))))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [117])
                (ashift:DI (reg:DI 0 ax [116])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 28 27 29 4 (set (reg:DI 0 ax [116])
        (reg:DI 0 ax [117])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [117])
        (nil)))
(insn 29 28 30 4 (set (reg:DI 0 ax [orig:67 D.4344 ] [67])
        (reg:DI 0 ax [116])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.4343 ] [68])
                (plus:DI (reg:DI 0 ax [orig:67 D.4344 ] [67])
                    (reg/f:DI 2 cx [orig:65 D.4343 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.4344 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:65 D.4343 ] [65])
            (nil))))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [orig:69 D.4345 ] [69])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:68 D.4343 ] [68])
                (const_int 32 [0x20])) [0 _17->pos+0 S8 A128])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.4343 ] [68])
        (nil)))
(insn 32 31 33 4 (set (reg:SI 1 dx [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])) mTest.c:101 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 1 dx [orig:70 D.4344 ] [70])
        (sign_extend:DI (reg:SI 1 dx [118]))) mTest.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [118])
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 1 dx [orig:71 D.4344 ] [71])
                (ashift:DI (reg:DI 1 dx [orig:70 D.4344 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.4344 ] [70])
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.4345 ] [72])
                (plus:DI (reg/f:DI 0 ax [orig:69 D.4345 ] [69])
                    (reg:DI 1 dx [orig:71 D.4344 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.4344 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.4345 ] [69])
            (nil))))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [orig:73 D.4346 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [orig:72 D.4345 ] [72]) [0 *_21+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.4345 ] [72])
        (nil)))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.4346 ] [74])
                (plus:DI (reg/f:DI 0 ax [orig:73 D.4346 ] [73])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.4346 ] [73])
        (nil)))
(insn 38 37 39 4 (set (reg:XF 8 st [orig:75 D.4341 ] [75])
        (mem:XF (reg/f:DI 0 ax [orig:74 D.4346 ] [74]) [0 *_23+0 S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.4346 ] [74])
        (nil)))
(insn 39 38 40 4 (set (reg:XF 9 st(1) [119])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 40 39 41 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:75 D.4341 ] [75])
            (reg:XF 9 st(1) [119]))) mTest.c:101 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [119])
        (nil)))
(jump_insn 41 40 181 4 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) mTest.c:101 612 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       9
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 75

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 75
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 75
;; lr  def 	 17 [flags] 120
(note 181 41 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 181 43 5 (set (reg:XF 9 st(1) [120])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 43 42 44 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:75 D.4341 ] [75])
            (reg:XF 9 st(1) [120]))) mTest.c:101 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [120])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.4341 ] [75])
            (nil))))
(jump_insn 44 43 48 5 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) mTest.c:101 612 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 76 77 78 79 80 81 82 83 84 85 121 122 123 124 125 126
(note 48 44 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 6 (set (reg/f:DI 2 cx [orig:76 D.4343 ] [76])
        (mem/f:DI (reg/f:DI 0 ax [121]) [0 *f_13(D)+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (nil)))
(insn 51 50 52 6 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:101 89 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DI 1 dx [orig:77 D.4344 ] [77])
        (sign_extend:DI (reg:SI 0 ax [122]))) mTest.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [122])
        (nil)))
(insn 53 52 54 6 (set (reg:DI 0 ax [123])
        (reg:DI 1 dx [orig:77 D.4344 ] [77])) mTest.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 0 ax [123])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg:DI 0 ax [123])
                    (reg:DI 1 dx [orig:77 D.4344 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.4344 ] [77])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:77 D.4344 ] [77])
                (const_int 5 [0x5]))
            (nil))))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 0 ax [124])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 57 56 58 6 (set (reg:DI 0 ax [123])
        (reg:DI 0 ax [124])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [124])
        (nil)))
(insn 58 57 59 6 (set (reg:DI 0 ax [orig:78 D.4344 ] [78])
        (reg:DI 0 ax [123])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 59 58 60 6 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.4343 ] [79])
                (plus:DI (reg:DI 0 ax [orig:78 D.4344 ] [78])
                    (reg/f:DI 2 cx [orig:76 D.4343 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:78 D.4344 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:76 D.4343 ] [76])
            (nil))))
(insn 60 59 61 6 (set (reg/f:DI 0 ax [orig:80 D.4345 ] [80])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:79 D.4343 ] [79])
                (const_int 32 [0x20])) [0 _28->pos+0 S8 A128])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4343 ] [79])
        (nil)))
(insn 61 60 62 6 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])) mTest.c:101 89 {*movsi_internal}
     (nil))
(insn 62 61 63 6 (set (reg:DI 1 dx [orig:81 D.4344 ] [81])
        (sign_extend:DI (reg:SI 1 dx [125]))) mTest.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [125])
        (nil)))
(insn 63 62 64 6 (parallel [
            (set (reg:DI 1 dx [orig:82 D.4344 ] [82])
                (ashift:DI (reg:DI 1 dx [orig:81 D.4344 ] [81])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.4344 ] [81])
        (nil)))
(insn 64 63 65 6 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.4345 ] [83])
                (plus:DI (reg/f:DI 0 ax [orig:80 D.4345 ] [80])
                    (reg:DI 1 dx [orig:82 D.4344 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.4344 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.4345 ] [80])
            (nil))))
(insn 65 64 66 6 (set (reg/f:DI 0 ax [orig:84 D.4346 ] [84])
        (mem/f:DI (reg/f:DI 0 ax [orig:83 D.4345 ] [83]) [0 *_32+0 S8 A64])) mTest.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.4345 ] [83])
        (nil)))
(insn 66 65 67 6 (set (reg:XF 8 st [orig:85 D.4341 ] [85])
        (mem:XF (reg/f:DI 0 ax [orig:84 D.4346 ] [84]) [0 *_33+0 S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.4346 ] [84])
        (nil)))
(insn 67 66 68 6 (set (reg:XF 9 st(1) [126])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 68 67 69 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:85 D.4341 ] [85])
            (reg:XF 9 st(1) [126]))) mTest.c:101 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [126])
        (nil)))
(jump_insn 69 68 184 6 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 188)
            (pc))) mTest.c:101 612 {*jcc_1}
     (nil)
 -> 188)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  def 	 17 [flags] 127
(note 184 69 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 70 184 71 7 (set (reg:XF 9 st(1) [127])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mTest.c:101 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 71 70 72 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:85 D.4341 ] [85])
            (reg:XF 9 st(1) [127]))) mTest.c:101 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [127])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.4341 ] [85])
            (nil))))
(jump_insn 72 71 188 7 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) mTest.c:101 612 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
(code_label 188 72 76 8 42 "" [1 uses])
(note 76 188 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 8 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])) mTest.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 8 (set (reg/f:DI 2 cx [orig:86 D.4343 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [128]) [0 *f_13(D)+0 S8 A64])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [128])
        (nil)))
(insn 79 78 80 8 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:103 89 {*movsi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 1 dx [orig:87 D.4344 ] [87])
        (sign_extend:DI (reg:SI 0 ax [129]))) mTest.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [129])
        (nil)))
(insn 81 80 82 8 (set (reg:DI 0 ax [130])
        (reg:DI 1 dx [orig:87 D.4344 ] [87])) mTest.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 8 (parallel [
            (set (reg:DI 0 ax [130])
                (ashift:DI (reg:DI 0 ax [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 513 {*ashldi3_1}
     (nil))
(insn 83 82 84 8 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg:DI 0 ax [130])
                    (reg:DI 1 dx [orig:87 D.4344 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.4344 ] [87])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:87 D.4344 ] [87])
                (const_int 5 [0x5]))
            (nil))))
(insn 84 83 85 8 (parallel [
            (set (reg:DI 0 ax [131])
                (ashift:DI (reg:DI 0 ax [130])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(insn 85 84 86 8 (set (reg:DI 0 ax [130])
        (reg:DI 0 ax [131])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [131])
        (nil)))
(insn 86 85 87 8 (set (reg:DI 0 ax [orig:88 D.4344 ] [88])
        (reg:DI 0 ax [130])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(insn 87 86 88 8 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.4343 ] [89])
                (plus:DI (reg:DI 0 ax [orig:88 D.4344 ] [88])
                    (reg/f:DI 2 cx [orig:86 D.4343 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.4344 ] [88])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:86 D.4343 ] [86])
            (nil))))
(insn 88 87 89 8 (set (reg/f:DI 0 ax [orig:90 D.4345 ] [90])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:89 D.4343 ] [89])
                (const_int 32 [0x20])) [0 _38->pos+0 S8 A128])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.4343 ] [89])
        (nil)))
(insn 89 88 90 8 (set (reg:SI 1 dx [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])) mTest.c:103 89 {*movsi_internal}
     (nil))
(insn 90 89 91 8 (set (reg:DI 1 dx [orig:91 D.4344 ] [91])
        (sign_extend:DI (reg:SI 1 dx [132]))) mTest.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [132])
        (nil)))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 1 dx [orig:92 D.4344 ] [92])
                (ashift:DI (reg:DI 1 dx [orig:91 D.4344 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:91 D.4344 ] [91])
        (nil)))
(insn 92 91 93 8 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.4345 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:90 D.4345 ] [90])
                    (reg:DI 1 dx [orig:92 D.4344 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.4344 ] [92])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.4345 ] [90])
            (nil))))
(insn 93 92 94 8 (set (reg/f:DI 0 ax [orig:94 D.4346 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.4345 ] [93]) [0 *_42+0 S8 A64])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.4345 ] [93])
        (nil)))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 1 dx [133])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:103 274 {*adddi_1}
     (nil))
(insn 95 94 96 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [133])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [133])
        (nil)))
(insn 96 95 97 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.4346 ] [94])) mTest.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.4346 ] [94])
        (nil)))
(call_insn 97 96 98 8 (call (mem:QI (symbol_ref:DI ("_gall_peter") [flags 0x3]  <function_decl 0x7f14bd7c5500 _gall_peter>) [0 _gall_peter S1 A8])
        (const_int 0 [0])) mTest.c:103 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 98 97 99 8 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])) mTest.c:104 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 8 (set (reg/f:DI 2 cx [orig:95 D.4343 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [134]) [0 *f_13(D)+0 S8 A64])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [134])
        (nil)))
(insn 100 99 101 8 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:104 89 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 1 dx [orig:96 D.4344 ] [96])
        (sign_extend:DI (reg:SI 0 ax [135]))) mTest.c:104 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [135])
        (nil)))
(insn 102 101 103 8 (set (reg:DI 0 ax [136])
        (reg:DI 1 dx [orig:96 D.4344 ] [96])) mTest.c:104 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 0 ax [136])
                (ashift:DI (reg:DI 0 ax [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 513 {*ashldi3_1}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 0 ax [136])
                (plus:DI (reg:DI 0 ax [136])
                    (reg:DI 1 dx [orig:96 D.4344 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.4344 ] [96])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.4344 ] [96])
                (const_int 5 [0x5]))
            (nil))))
(insn 105 104 106 8 (parallel [
            (set (reg:DI 0 ax [137])
                (ashift:DI (reg:DI 0 ax [136])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [136])
        (nil)))
(insn 106 105 107 8 (set (reg:DI 0 ax [136])
        (reg:DI 0 ax [137])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [137])
        (nil)))
(insn 107 106 108 8 (set (reg:DI 0 ax [orig:97 D.4344 ] [97])
        (reg:DI 0 ax [136])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [136])
        (nil)))
(insn 108 107 109 8 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.4343 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 D.4344 ] [97])
                    (reg/f:DI 2 cx [orig:95 D.4343 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.4344 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:95 D.4343 ] [95])
            (nil))))
(insn 109 108 110 8 (set (reg/f:DI 0 ax [orig:99 D.4345 ] [99])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:98 D.4343 ] [98])
                (const_int 32 [0x20])) [0 _47->pos+0 S8 A128])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.4343 ] [98])
        (nil)))
(insn 110 109 111 8 (set (reg:SI 1 dx [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])) mTest.c:104 89 {*movsi_internal}
     (nil))
(insn 111 110 112 8 (set (reg:DI 1 dx [orig:100 D.4344 ] [100])
        (sign_extend:DI (reg:SI 1 dx [138]))) mTest.c:104 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [138])
        (nil)))
(insn 112 111 113 8 (parallel [
            (set (reg:DI 1 dx [orig:101 D.4344 ] [101])
                (ashift:DI (reg:DI 1 dx [orig:100 D.4344 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.4344 ] [100])
        (nil)))
(insn 113 112 114 8 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.4345 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:99 D.4345 ] [99])
                    (reg:DI 1 dx [orig:101 D.4344 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:101 D.4344 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.4345 ] [99])
            (nil))))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [orig:103 D.4346 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [orig:102 D.4345 ] [102]) [0 *_51+0 S8 A64])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.4345 ] [102])
        (nil)))
(insn 115 114 116 8 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.4346 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:103 D.4346 ] [103])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:104 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.4346 ] [103])
        (nil)))
(insn 116 115 117 8 (set (reg:XF 4 si [orig:105 D.4341 ] [105])
        (mem:XF (reg/f:DI 0 ax [orig:104 D.4346 ] [104]) [0 *_53+0 S16 A128])) mTest.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.4346 ] [104])
        (nil)))
(insn 117 116 118 8 (set (reg:XF 2 cx [orig:106 D.4341 ] [106])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 P+16 S16 A128])) mTest.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 118 117 119 8 (set (reg:XF 0 ax [orig:107 D.4341 ] [107])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 P+0 S16 A128])) mTest.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 119 118 120 8 (set (reg:DI 37 r8 [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 postream+0 S8 A64])) mTest.c:104 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 8 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [orig:105 D.4341 ] [105])) mTest.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [orig:105 D.4341 ] [105])
        (nil)))
(insn 121 120 122 8 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:106 D.4341 ] [106])) mTest.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:106 D.4341 ] [106])
        (nil)))
(insn 122 121 123 8 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:107 D.4341 ] [107])) mTest.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:107 D.4341 ] [107])
        (nil)))
(insn 123 122 124 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f14bd83e000 *.LC14>)) mTest.c:104 87 {*movdi_internal_rex64}
     (nil))
(insn 124 123 125 8 (set (reg:DI 5 di)
        (reg:DI 37 r8 [139])) mTest.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [139])
        (nil)))
(insn 125 124 126 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:104 91 {*movqi_internal}
     (nil))
(call_insn 126 125 127 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 48 [0x30]))) mTest.c:104 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 127 126 128 8 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 f+0 S8 A64])) mTest.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 8 (set (reg/f:DI 2 cx [orig:108 D.4343 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [140]) [0 *f_13(D)+0 S8 A64])) mTest.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [140])
        (nil)))
(insn 129 128 130 8 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:105 89 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:DI 1 dx [orig:109 D.4344 ] [109])
        (sign_extend:DI (reg:SI 0 ax [141]))) mTest.c:105 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [141])
        (nil)))
(insn 131 130 132 8 (set (reg:DI 0 ax [142])
        (reg:DI 1 dx [orig:109 D.4344 ] [109])) mTest.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 0 ax [142])
                (ashift:DI (reg:DI 0 ax [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:105 513 {*ashldi3_1}
     (nil))
(insn 133 132 134 8 (parallel [
            (set (reg:DI 0 ax [142])
                (plus:DI (reg:DI 0 ax [142])
                    (reg:DI 1 dx [orig:109 D.4344 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:109 D.4344 ] [109])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:109 D.4344 ] [109])
                (const_int 5 [0x5]))
            (nil))))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 0 ax [143])
                (ashift:DI (reg:DI 0 ax [142])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:105 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [142])
        (nil)))
(insn 135 134 136 8 (set (reg:DI 0 ax [142])
        (reg:DI 0 ax [143])) mTest.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [143])
        (nil)))
(insn 136 135 137 8 (set (reg:DI 0 ax [orig:110 D.4344 ] [110])
        (reg:DI 0 ax [142])) mTest.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [142])
        (nil)))
(insn 137 136 138 8 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.4343 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 D.4344 ] [110])
                    (reg/f:DI 2 cx [orig:108 D.4343 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:110 D.4344 ] [110])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:108 D.4343 ] [108])
            (nil))))
(insn 138 137 139 8 (set (reg:SI 1 dx [orig:112 D.4342 ] [112])
        (mem/j:SI (reg/f:DI 0 ax [orig:111 D.4343 ] [111]) [0 _60->ID+0 S4 A128])) mTest.c:105 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:111 D.4343 ] [111])
        (nil)))
(insn 139 138 140 8 (set (reg:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 postream+0 S8 A64])) mTest.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 140 139 141 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:112 D.4342 ] [112])) mTest.c:105 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:112 D.4342 ] [112])
        (nil)))
(insn 141 140 142 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f14bd83e098 *.LC15>)) mTest.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 142 141 143 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [144])) mTest.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [144])
        (nil)))
(insn 143 142 144 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:105 91 {*movqi_internal}
     (nil))
(call_insn 144 143 145 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f14bd990900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) mTest.c:105 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              4
;;              5
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 145 144 146 9 35 "" [3 uses])
(note 146 145 147 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:101 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145
(code_label 148 147 149 10 34 "" [1 uses])
(note 149 148 151 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 151 149 152 10 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 i+0 S4 A32])) mTest.c:101 89 {*movsi_internal}
     (nil))
(insn 152 151 153 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [145])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 N_f+0 S4 A32]))) mTest.c:101 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [145])
        (nil)))
(jump_insn 153 152 154 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) mTest.c:101 612 {*jcc_1}
     (nil)
 -> 150)
;;  succ:       4
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 146
(note 154 153 155 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 11 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 postream+0 S8 A64])) mTest.c:107 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 11 (set (reg:DI 4 si)
        (reg:DI 0 ax [146])) mTest.c:107 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [146])
        (nil)))
(insn 157 156 158 11 (set (reg:SI 5 di)
        (const_int 10 [0xa])) mTest.c:107 89 {*movsi_internal}
     (nil))
(call_insn 158 157 159 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fputc") [flags 0x41]  <function_decl 0x7f14bd994000 __builtin_fputc>) [0 __builtin_fputc S1 A8])
            (const_int 0 [0]))) mTest.c:107 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 159 158 160 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:100 273 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 147
(code_label 160 159 161 12 33 "" [1 uses])
(note 161 160 162 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 12 (set (reg:XF 8 st [orig:59 D.4341 ] [59])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 j+0 S4 A32]))) mTest.c:100 256 {*floatsixf2_i387}
     (nil))
(insn 163 162 164 12 (set (reg:XF 10 st(2) [orig:60 D.4341 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mTest.c:100 131 {*movxf_internal_rex64}
     (nil))
(insn 164 163 194 12 (set (reg:SI 0 ax [orig:61 D.4342 ] [61])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mTest.c:100 89 {*movsi_internal}
     (nil))
(insn 194 164 166 12 (parallel [
            (set (reg:XF 9 st(1) [orig:62 D.4341 ] [62])
                (float:XF (reg:SI 0 ax [orig:61 D.4342 ] [61])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mTest.c:100 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.4342 ] [61])
        (nil)))
(insn 166 194 167 12 (set (reg:XF 10 st(2) [orig:63 D.4341 ] [63])
        (mult:XF (reg:XF 10 st(2) [orig:60 D.4341 ] [60])
            (reg:XF 9 st(1) [orig:62 D.4341 ] [62]))) mTest.c:100 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.4341 ] [62])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:60 D.4341 ] [60])
            (nil))))
(insn 167 166 168 12 (set (reg:XF 9 st(1) [147])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) mTest.c:100 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 168 167 170 12 (set (reg:XF 9 st(1) [orig:64 D.4341 ] [64])
        (minus:XF (reg:XF 10 st(2) [orig:63 D.4341 ] [63])
            (reg:XF 9 st(1) [147]))) mTest.c:100 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [147])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.4341 ] [63])
            (nil))))
(insn 170 168 171 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:64 D.4341 ] [64])
            (reg:XF 8 st [orig:59 D.4341 ] [59]))) mTest.c:100 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:64 D.4341 ] [64])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.4341 ] [59])
            (nil))))
(jump_insn 171 170 172 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) mTest.c:100 612 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       3
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 148
(note 172 171 173 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 13 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 postream+0 S8 A64])) mTest.c:109 87 {*movdi_internal_rex64}
     (nil))
(insn 174 173 175 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) mTest.c:109 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(call_insn 175 174 189 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f14bd74ad00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mTest.c:109 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 189 175 0 13 (const_int 0 [0]) mTest.c:110 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function print_nvp (print_nvp, funcdef_no=11, decl_uid=1956, cgraph_uid=11)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 33:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 55:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rm {*cmpsi_1}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 58
changing reg in insn 60
changing reg in insn 18
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 9
changing reg in insn 10
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 54.


print_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={16d,11u} r1={12d,7u} r2={5d} r4={6d,1u} r5={9d,4u} r6={1d,28u} r7={1d,17u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={14d,4u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 300{227d,73u,0e} in 42{38 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 68 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:114 89 {*movsi_internal}
     (nil))
(jump_insn 68 5 69 2 (set (pc)
        (label_ref 56)) mTest.c:114 650 {jump}
     (nil)
 -> 56)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 59)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71
(code_label 59 69 8 3 51 "" [1 uses])
(note 8 59 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mTest.c:115 89 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:SI 4 si)
        (reg:SI 0 ax [71])) mTest.c:115 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f14bd84a130 *.LC17>)) mTest.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:115 91 {*movqi_internal}
     (nil))
(call_insn 13 12 14 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f14bd994f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mTest.c:115 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
(insn 14 13 70 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 h+0 S4 A32])
        (const_int 0 [0])) mTest.c:116 89 {*movsi_internal}
     (nil))
(jump_insn 70 14 71 3 (set (pc)
        (label_ref 34)) mTest.c:116 650 {jump}
     (nil)
 -> 34)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 36)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 72 73
(code_label 36 71 17 4 48 "" [1 uses])
(note 17 36 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:DI 0 ax [orig:60 D.4352 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mTest.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 4 (set (reg:SI 1 dx [72])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mTest.c:116 89 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 1 dx [orig:61 D.4353 ] [61])
        (sign_extend:DI (reg:SI 1 dx [72]))) mTest.c:116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [72])
        (nil)))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4353 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4353 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:116 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4353 ] [61])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4352 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4352 ] [60])
                    (reg:DI 1 dx [orig:62 D.4353 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4353 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4352 ] [60])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [orig:64 D.4354 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.4352 ] [63]) [0 *_9+0 S8 A64])) mTest.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4352 ] [63])
        (nil)))
(insn 24 23 25 4 (set (reg:SI 1 dx [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 h+0 S4 A32])) mTest.c:116 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 1 dx [orig:65 D.4353 ] [65])
        (sign_extend:DI (reg:SI 1 dx [73]))) mTest.c:116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [73])
        (nil)))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 1 dx [orig:66 D.4353 ] [66])
                (ashift:DI (reg:DI 1 dx [orig:65 D.4353 ] [65])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:116 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.4353 ] [65])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.4354 ] [67])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.4354 ] [64])
                    (reg:DI 1 dx [orig:66 D.4353 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.4353 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.4354 ] [64])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 28 27 29 4 (set (reg:XF 0 ax [orig:68 D.4355 ] [68])
        (mem:XF (reg/f:DI 0 ax [orig:67 D.4354 ] [67]) [0 *_13+0 S16 A128])) mTest.c:116 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4354 ] [67])
        (nil)))
(insn 29 28 30 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:68 D.4355 ] [68])) mTest.c:116 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:68 D.4355 ] [68])
        (nil)))
(insn 30 29 31 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f14bd84a1c8 *.LC18>)) mTest.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) mTest.c:116 91 {*movqi_internal}
     (nil))
(call_insn 32 31 33 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f14bd994f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) mTest.c:116 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                (nil)))))
(insn 33 32 34 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:116 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 34 33 35 5 47 "" [1 uses])
(note 35 34 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 35 38 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 h+0 S4 A32])
            (const_int 3 [0x3]))) mTest.c:116 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) mTest.c:116 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 36)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg:SI 0 ax [orig:69 D.4351 ] [69])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 128 [0x80])) [0 f.bound+0 S4 A128])) mTest.c:117 89 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:69 D.4351 ] [69])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mTest.c:117 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.4351 ] [69])
        (nil)))
(jump_insn 42 41 43 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) mTest.c:117 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 47)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 0 ax [orig:70 D.4351 ] [70])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 132 [0x84])) [0 f.bound+4 S4 A32])) mTest.c:117 89 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 D.4351 ] [70])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mTest.c:117 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.4351 ] [70])
        (nil)))
(jump_insn 46 45 47 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) mTest.c:117 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 51)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 47 46 48 8 49 "" [1 uses])
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg:SI 5 di)
        (const_int 49 [0x31])) mTest.c:117 89 {*movsi_internal}
     (nil))
(call_insn 50 49 51 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7f14bd996200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) mTest.c:117 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 51 50 52 9 50 "" [1 uses])
(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 9 (set (reg:SI 5 di)
        (const_int 10 [0xa])) mTest.c:118 89 {*movsi_internal}
     (nil))
(call_insn 54 53 55 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7f14bd996200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) mTest.c:118 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 55 54 56 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:114 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 56 55 57 10 46 "" [1 uses])
(note 57 56 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 60 10 (set (reg:SI 0 ax [orig:59 D.4351 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 20 [0x14])) [0 f.n_nvp+0 S4 A32])) mTest.c:114 89 {*movsi_internal}
     (nil))
(insn 60 58 61 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4351 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mTest.c:114 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4351 ] [59])
        (nil)))
(jump_insn 61 60 62 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) mTest.c:114 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 59)
;;  succ:       3
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 62 61 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 67 62 0 11 (const_int 0 [0]) mTest.c:120 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function cheak_inside_pos (cheak_inside_pos, funcdef_no=12, decl_uid=1960, cgraph_uid=12)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 73:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 81:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*cmpsi_1}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 97: point = 0
  BB 11
   Insn 87: point = 0
   Insn 86: point = 0
   Insn 85: point = 1
  BB 2
   Insn 98: point = 2
   Insn 7: point = 2
   Insn 3: point = 2
   Insn 2: point = 2
  BB 10
   Insn 81: point = 2
  BB 9
   Insn 79: point = 2
   Insn 78: point = 2
   Insn 76: point = 3
  BB 3
   Insn 100: point = 4
   Insn 11: point = 4
  BB 8
   Insn 73: point = 4
  BB 7
   Insn 70: point = 4
   Insn 69: point = 4
  BB 6
   Insn 67: point = 4
   Insn 66: point = 4
   Insn 65: point = 5
   Insn 64: point = 6
   Insn 63: point = 6
   Insn 62: point = 7
   Insn 61: point = 8
   Insn 60: point = 9
   Insn 59: point = 11
   Insn 58: point = 13
   Insn 57: point = 15
   Insn 56: point = 17
   Insn 55: point = 18
   Insn 54: point = 20
   Insn 53: point = 22
   Insn 52: point = 23
   Insn 51: point = 25
   Insn 50: point = 27
   Insn 49: point = 29
   Insn 48: point = 30
   Insn 47: point = 30
   Insn 46: point = 31
   Insn 45: point = 33
   Insn 44: point = 34
   Insn 43: point = 35
  BB 5
   Insn 38: point = 36
   Insn 37: point = 36
   Insn 36: point = 37
  BB 4
   Insn 35: point = 39
   Insn 34: point = 39
   Insn 33: point = 40
   Insn 32: point = 41
   Insn 31: point = 43
   Insn 30: point = 45
   Insn 29: point = 47
   Insn 28: point = 49
   Insn 27: point = 51
   Insn 26: point = 53
   Insn 25: point = 54
   Insn 24: point = 56
   Insn 23: point = 58
   Insn 22: point = 59
   Insn 21: point = 61
   Insn 20: point = 63
   Insn 19: point = 65
   Insn 18: point = 66
   Insn 17: point = 66
   Insn 16: point = 67
   Insn 15: point = 69
 r59: [2..3]
 r60: [65..67]
 r61: [57..59]
 r62: [55..56]
 r63: [48..54]
 r64: [50..51]
 r65: [48..49]
 r66: [46..47]
 r67: [44..45]
 r68: [42..43]
 r69: [36..41]
 r70: [8..35]
 r71: [7..34]
 r72: [29..31]
 r73: [21..23]
 r74: [19..20]
 r75: [12..18]
 r76: [14..15]
 r77: [12..13]
 r78: [10..11]
 r79: [6..9]
 r80: [4..5]
 r81: [68..69]
 r82: [64..66] [60..61]
 r83: [62..63]
 r84: [57..58]
 r85: [52..53]
 r86: [39..40]
 r87: [36..37]
 r88: [32..33]
 r89: [28..30] [24..25]
 r90: [26..27]
 r91: [21..22]
 r92: [16..17]
 r93: [0..1]
Compressing live ranges: from 70 to 56 - 80%
Ranges after the compression:
 r59: [2..3]
 r60: [52..53]
 r61: [46..47]
 r62: [44..45]
 r63: [38..43]
 r64: [40..41]
 r65: [38..39]
 r66: [36..37]
 r67: [34..35]
 r68: [32..33]
 r69: [28..31]
 r70: [6..27]
 r71: [6..27]
 r72: [24..25]
 r73: [18..19]
 r74: [16..17]
 r75: [10..15]
 r76: [12..13]
 r77: [10..11]
 r78: [8..9]
 r79: [6..7]
 r80: [4..5]
 r81: [54..55]
 r82: [52..53] [48..49]
 r83: [50..51]
 r84: [46..47]
 r85: [42..43]
 r86: [30..31]
 r87: [28..29]
 r88: [26..27]
 r89: [24..25] [20..21]
 r90: [22..23]
 r91: [18..19]
 r92: [14..15]
 r93: [0..1]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 76
changing reg in insn 78
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 37
changing reg in insn 34
changing reg in insn 43
changing reg in insn 61
changing reg in insn 44
changing reg in insn 62
changing reg in insn 46
changing reg in insn 49
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 59
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 22
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 51
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 52
changing reg in insn 50
changing reg in insn 49
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 85
changing reg in insn 86
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 70.


cheak_inside_pos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={29d,27u} r1={14d,13u,4e} r2={4d,1u} r4={5d,3u} r5={5d,3u} r6={1d,32u} r7={1d,14u} r8={3d,2u} r9={4d,2u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={22d,5u} r18={2d} r19={2d} r20={1d,1u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 280{171d,103u,6e} in 66{64 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mTest.c:123 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32])
        (reg:SI 4 si [ n_f ])) mTest.c:123 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ n_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 98 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mTest.c:125 89 {*movsi_internal}
     (nil))
(jump_insn 98 7 99 2 (set (pc)
        (label_ref 82)) mTest.c:125 650 {jump}
     (nil)
 -> 82)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 84)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 84 99 10 3 59 "" [1 uses])
(note 10 84 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 100 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mTest.c:125 89 {*movsi_internal}
     (nil))
(jump_insn 100 11 101 3 (set (pc)
        (label_ref 74)) mTest.c:125 650 {jump}
     (nil)
 -> 74)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 101 100 77)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 67 68 69 81 82 83 84 85 86
(code_label 77 101 14 4 58 "" [1 uses])
(note 14 77 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 0 ax [81])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 1 dx [orig:60 D.4359 ] [60])
        (sign_extend:DI (reg:SI 0 ax [81]))) mTest.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [81])
        (nil)))
(insn 17 16 18 4 (set (reg:DI 0 ax [82])
        (reg:DI 1 dx [orig:60 D.4359 ] [60])) mTest.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 0 ax [82])
                (ashift:DI (reg:DI 0 ax [82])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 0 ax [82])
                (plus:DI (reg:DI 0 ax [82])
                    (reg:DI 1 dx [orig:60 D.4359 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.4359 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.4359 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 0 ax [83])
                (ashift:DI (reg:DI 0 ax [82])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [82])
        (nil)))
(insn 21 20 22 4 (set (reg:DI 0 ax [82])
        (reg:DI 0 ax [83])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 22 21 23 4 (set (reg:DI 1 dx [orig:61 D.4359 ] [61])
        (reg:DI 0 ax [82])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [82])
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mTest.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.4360 ] [62])
                (plus:DI (reg/f:DI 0 ax [84])
                    (reg:DI 1 dx [orig:61 D.4359 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [84])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4359 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.4359 ] [61]))
                (nil)))))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [orig:63 D.4361 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:62 D.4360 ] [62])
                (const_int 32 [0x20])) [0 _10->pos+0 S8 A128])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.4360 ] [62])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 1 dx [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [orig:64 D.4359 ] [64])
        (sign_extend:DI (reg:SI 1 dx [85]))) mTest.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [85])
        (nil)))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 1 dx [orig:65 D.4359 ] [65])
                (ashift:DI (reg:DI 1 dx [orig:64 D.4359 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.4359 ] [64])
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.4361 ] [66])
                (plus:DI (reg/f:DI 0 ax [orig:63 D.4361 ] [63])
                    (reg:DI 1 dx [orig:65 D.4359 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.4359 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4361 ] [63])
            (nil))))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [orig:67 D.4362 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [orig:66 D.4361 ] [66]) [0 *_14+0 S8 A64])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.4361 ] [66])
        (nil)))
(insn 31 30 32 4 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.4362 ] [68])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4362 ] [67])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4362 ] [67])
        (nil)))
(insn 32 31 33 4 (set (reg:XF 8 st [orig:69 D.4363 ] [69])
        (mem:XF (reg/f:DI 0 ax [orig:68 D.4362 ] [68]) [0 *_16+0 S16 A128])) mTest.c:125 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.4362 ] [68])
        (nil)))
(insn 33 32 34 4 (set (reg:XF 9 st(1) [86])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S16 A128])) mTest.c:125 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 34 33 35 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:69 D.4363 ] [69])
            (reg:XF 9 st(1) [86]))) mTest.c:125 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [86])
        (nil)))
(jump_insn 35 34 93 4 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) mTest.c:125 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       8
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 17 [flags] 87
(note 93 35 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 93 37 5 (set (reg:XF 9 st(1) [87])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S16 A128])) mTest.c:125 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 37 36 38 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:69 D.4363 ] [69])
            (reg:XF 9 st(1) [87]))) mTest.c:125 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [87])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.4363 ] [69])
            (nil))))
(jump_insn 38 37 42 5 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 71)
            (pc))) mTest.c:125 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 78 79 80 88 89 90 91 92
(note 42 38 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:SI 4 si [orig:70 D.4358 ] [70])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 conf.Nbound+0 S4 A128])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 44 43 45 6 (set (reg/f:DI 2 cx [orig:71 D.4361 ] [71])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 conf.bound+0 S8 A64])) mTest.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 6 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:DI 1 dx [orig:72 D.4359 ] [72])
        (sign_extend:DI (reg:SI 0 ax [88]))) mTest.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(insn 47 46 48 6 (set (reg:DI 0 ax [89])
        (reg:DI 1 dx [orig:72 D.4359 ] [72])) mTest.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 0 ax [89])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg:DI 0 ax [89])
                (plus:DI (reg:DI 0 ax [89])
                    (reg:DI 1 dx [orig:72 D.4359 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.4359 ] [72])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:72 D.4359 ] [72])
                (const_int 5 [0x5]))
            (nil))))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 0 ax [90])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 51 50 52 6 (set (reg:DI 0 ax [89])
        (reg:DI 0 ax [90])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(insn 52 51 53 6 (set (reg:DI 1 dx [orig:73 D.4359 ] [73])
        (reg:DI 0 ax [89])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 53 52 54 6 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mTest.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.4360 ] [74])
                (plus:DI (reg/f:DI 0 ax [91])
                    (reg:DI 1 dx [orig:73 D.4359 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [91])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.4359 ] [73])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                    (reg:DI 1 dx [orig:73 D.4359 ] [73]))
                (nil)))))
(insn 55 54 56 6 (set (reg/f:DI 0 ax [orig:75 D.4361 ] [75])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:74 D.4360 ] [74])
                (const_int 32 [0x20])) [0 _22->pos+0 S8 A128])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.4360 ] [74])
        (nil)))
(insn 56 55 57 6 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:DI 1 dx [orig:76 D.4359 ] [76])
        (sign_extend:DI (reg:SI 1 dx [92]))) mTest.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [92])
        (nil)))
(insn 58 57 59 6 (parallel [
            (set (reg:DI 1 dx [orig:77 D.4359 ] [77])
                (ashift:DI (reg:DI 1 dx [orig:76 D.4359 ] [76])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.4359 ] [76])
        (nil)))
(insn 59 58 60 6 (parallel [
            (set (reg/f:DI 0 ax [orig:78 D.4361 ] [78])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.4361 ] [75])
                    (reg:DI 1 dx [orig:77 D.4359 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.4359 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.4361 ] [75])
            (nil))))
(insn 60 59 61 6 (set (reg/f:DI 0 ax [orig:79 D.4362 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [orig:78 D.4361 ] [78]) [0 *_26+0 S8 A64])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.4361 ] [78])
        (nil)))
(insn 61 60 62 6 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:70 D.4358 ] [70])) mTest.c:125 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:70 D.4358 ] [70])
        (nil)))
(insn 62 61 63 6 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:71 D.4361 ] [71])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:71 D.4361 ] [71])
        (nil)))
(insn 63 62 64 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:79 D.4362 ] [79])) mTest.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4362 ] [79])
        (nil)))
(call_insn 64 63 65 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f14bda42700 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mTest.c:125 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 65 64 66 6 (set (reg:SI 0 ax [orig:80 D.4358 ] [80])
        (reg:SI 0 ax)) mTest.c:125 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 66 65 67 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:80 D.4358 ] [80])
            (const_int 1 [0x1]))) mTest.c:125 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.4358 ] [80])
        (nil)))
(jump_insn 67 66 68 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) mTest.c:125 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f14bd851098 *.LC20>)) mTest.c:126 87 {*movdi_internal_rex64}
     (nil))
(call_insn 70 69 71 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f14bd996600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mTest.c:126 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;;              4
;;              5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 71 70 72 8 56 "" [3 uses])
(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 74 73 75 9 55 "" [1 uses])
(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 78 9 (set (reg:SI 0 ax [orig:59 D.4358 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 78 76 79 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.4358 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) mTest.c:125 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4358 ] [59])
        (nil)))
(jump_insn 79 78 80 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) mTest.c:125 612 {*jcc_1}
     (nil)
 -> 77)
;;  succ:       4
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 80 79 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mTest.c:125 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93
(code_label 82 81 83 11 54 "" [1 uses])
(note 83 82 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 83 86 11 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mTest.c:125 89 {*movsi_internal}
     (nil))
(insn 86 85 87 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [93])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32]))) mTest.c:125 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [93])
        (nil)))
(jump_insn 87 86 88 11 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) mTest.c:125 612 {*jcc_1}
     (nil)
 -> 84)
;;  succ:       3
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 88 87 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 88 0 12 (const_int 0 [0]) mTest.c:128 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

