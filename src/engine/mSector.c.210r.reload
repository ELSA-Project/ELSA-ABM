
;; Function _find_extrem (_find_extrem, funcdef_no=2, decl_uid=3943, cgraph_uid=2)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 56:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=124, assigning class NO_REGS to secondary r124
  124: r124:XF=r59:XF
      REG_DEAD r59:XF
    Inserting the sec. move after:
  146: r98:XF=r124:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 131: point = 0
   Insn 128: point = 0
   Insn 146: point = 1
	Hard reg 8 is preferable by r124 with profit 1
   Insn 124: point = 3
	Hard reg 8 is preferable by r124 with profit 1
	Hard reg 0 is preferable by r124 with profit 1
  BB 8
   Insn 142: point = 6
   Insn 64: point = 6
  BB 7
   Insn 62: point = 7
   Insn 61: point = 7
   Insn 60: point = 8
  BB 3
   Insn 140: point = 9
   Insn 20: point = 9
   Insn 19: point = 10
   Insn 18: point = 12
   Insn 17: point = 14
   Insn 16: point = 16
   Insn 15: point = 18
   Insn 14: point = 19
   Insn 13: point = 21
   Insn 12: point = 22
  BB 6
   Insn 56: point = 22
  BB 5
   Insn 53: point = 22
   Insn 52: point = 23
   Insn 51: point = 25
   Insn 50: point = 27
   Insn 49: point = 29
   Insn 48: point = 31
   Insn 47: point = 32
   Insn 46: point = 34
   Insn 45: point = 36
   Insn 44: point = 37
   Insn 43: point = 39
   Insn 42: point = 41
  BB 4
   Insn 37: point = 42
   Insn 36: point = 42
   Insn 35: point = 43
   Insn 34: point = 44
   Insn 33: point = 46
   Insn 32: point = 48
   Insn 31: point = 50
   Insn 30: point = 52
   Insn 29: point = 53
   Insn 28: point = 55
   Insn 27: point = 57
   Insn 26: point = 58
   Insn 25: point = 60
   Insn 24: point = 62
  BB 14
   Insn 121: point = 63
  BB 13
   Insn 119: point = 64
   Insn 118: point = 64
   Insn 117: point = 65
  BB 9
   Insn 144: point = 66
   Insn 77: point = 66
   Insn 76: point = 67
   Insn 75: point = 69
   Insn 74: point = 71
   Insn 73: point = 73
   Insn 72: point = 75
   Insn 71: point = 76
   Insn 70: point = 78
   Insn 69: point = 79
  BB 2
   Insn 10: point = 79
   Insn 9: point = 79
   Insn 5: point = 79
   Insn 4: point = 79
   Insn 3: point = 79
   Insn 2: point = 79
  BB 12
   Insn 113: point = 79
  BB 11
   Insn 110: point = 79
   Insn 109: point = 80
   Insn 108: point = 82
   Insn 107: point = 84
   Insn 106: point = 86
   Insn 105: point = 88
   Insn 104: point = 89
   Insn 103: point = 91
   Insn 102: point = 93
   Insn 101: point = 94
   Insn 100: point = 96
   Insn 99: point = 98
  BB 10
   Insn 94: point = 99
   Insn 93: point = 99
   Insn 92: point = 100
   Insn 91: point = 101
   Insn 90: point = 103
   Insn 89: point = 105
   Insn 88: point = 107
   Insn 87: point = 109
   Insn 86: point = 110
   Insn 85: point = 112
   Insn 84: point = 114
   Insn 83: point = 115
   Insn 82: point = 117
   Insn 81: point = 119
 r59: [63..63] [4..6]
 r60: [13..19]
 r61: [15..16]
 r62: [13..14]
 r63: [11..12]
 r64: [59..60]
 r65: [56..58]
 r66: [54..55]
 r67: [47..53]
 r68: [49..50]
 r69: [47..48]
 r70: [45..46]
 r71: [42..44]
 r72: [38..39]
 r73: [35..37]
 r74: [33..34]
 r75: [26..32]
 r76: [28..29]
 r77: [26..27]
 r78: [24..25]
 r79: [70..76]
 r80: [72..73]
 r81: [70..71]
 r82: [68..69]
 r83: [116..117]
 r84: [113..115]
 r85: [111..112]
 r86: [104..110]
 r87: [106..107]
 r88: [104..105]
 r89: [102..103]
 r90: [99..101]
 r91: [95..96]
 r92: [92..94]
 r93: [90..91]
 r94: [83..89]
 r95: [85..86]
 r96: [83..84]
 r97: [81..82]
 r98: [0..1]
 r99: [20..21]
 r100: [17..18]
 r101: [9..10]
 r102: [61..62]
 r103: [56..57]
 r104: [51..52]
 r105: [42..43]
 r106: [40..41]
 r107: [35..36]
 r108: [30..31]
 r109: [22..23]
 r110: [7..8]
 r111: [77..78]
 r112: [74..75]
 r113: [66..67]
 r114: [118..119]
 r115: [113..114]
 r116: [108..109]
 r117: [99..100]
 r118: [97..98]
 r119: [92..93]
 r120: [87..88]
 r121: [79..80]
 r122: [64..65]
 r124: [2..3]
Compressing live ranges: from 120 to 107 - 89%
Ranges after the compression:
 r59: [56..56] [4..5]
 r60: [12..17]
 r61: [14..15]
 r62: [12..13]
 r63: [10..11]
 r64: [52..53]
 r65: [50..51]
 r66: [48..49]
 r67: [42..47]
 r68: [44..45]
 r69: [42..43]
 r70: [40..41]
 r71: [38..39]
 r72: [34..35]
 r73: [32..33]
 r74: [30..31]
 r75: [24..29]
 r76: [26..27]
 r77: [24..25]
 r78: [22..23]
 r79: [63..68]
 r80: [65..66]
 r81: [63..64]
 r82: [61..62]
 r83: [103..104]
 r84: [101..102]
 r85: [99..100]
 r86: [93..98]
 r87: [95..96]
 r88: [93..94]
 r89: [91..92]
 r90: [89..90]
 r91: [85..86]
 r92: [83..84]
 r93: [81..82]
 r94: [75..80]
 r95: [77..78]
 r96: [75..76]
 r97: [73..74]
 r98: [0..1]
 r99: [18..19]
 r100: [16..17]
 r101: [8..9]
 r102: [54..55]
 r103: [50..51]
 r104: [46..47]
 r105: [38..39]
 r106: [36..37]
 r107: [32..33]
 r108: [28..29]
 r109: [20..21]
 r110: [6..7]
 r111: [69..70]
 r112: [67..68]
 r113: [59..60]
 r114: [105..106]
 r115: [101..102]
 r116: [97..98]
 r117: [89..90]
 r118: [87..88]
 r119: [83..84]
 r120: [79..80]
 r121: [71..72]
 r122: [57..58]
 r124: [2..3]

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 16):	 124
Changing spilled pseudos to memory in insn #124
Changing spilled pseudos to memory in insn #146

********** Local #3: **********

Reusing alternative 0 for insn #146
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 121
changing reg in insn 64
changing reg in insn 124
changing reg in insn 14
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 33
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 51
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 71
changing reg in insn 75
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 90
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 108
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 128
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 92
changing reg in insn 93
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 117
changing reg in insn 118
starting the processing of deferred insns
ending the processing of deferred insns


_find_extrem

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={39d,37u} r1={29d,28u,4e} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,56u} r7={1d,15u} r8={4d,5u} r9={2d,2u} r17={27d,5u} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 277{117d,152u,8e} in 93{93 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:19 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32])
        (reg:SI 4 si [ np ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ np ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])
        (reg:SI 1 dx [ c ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ c ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 Max+0 S4 A32])
        (reg:SI 2 cx [ Max ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ Max ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 Max+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:22 7 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:22 612 {*jcc_1}
     (nil)
 -> 67)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 99 100 101
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:60 D.4955 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [99]) [0 *p_10(D)+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 15 14 16 3 (set (reg:SI 1 dx [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 1 dx [orig:61 D.4956 ] [61])
        (sign_extend:DI (reg:SI 1 dx [100]))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [100])
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.4956 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.4956 ] [61])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4956 ] [61])
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.4955 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.4955 ] [60])
                    (reg:DI 1 dx [orig:62 D.4956 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.4956 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4955 ] [60])
            (nil))))
(insn 19 18 20 3 (set (reg:XF 0 ax [101])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.4955 ] [63]) [0 *_15+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.4955 ] [63])
        (nil)))
(insn 20 19 140 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 0 ax [101])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [101])
        (nil)))
(jump_insn 140 20 141 3 (set (pc)
        (label_ref 57)) mSector.c:23 650 {jump}
     (nil)
 -> 57)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 141 140 59)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 102 103 104 105
(code_label 59 141 23 4 6 "" [1 uses])
(note 23 59 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 0 ax [orig:64 D.4956 ] [64])
        (sign_extend:DI (reg:SI 0 ax [102]))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [102])
        (nil)))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 1 dx [orig:65 D.4956 ] [65])
                (ashift:DI (reg:DI 0 ax [orig:64 D.4956 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.4956 ] [64])
        (nil)))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.4957 ] [66])
                (plus:DI (reg/f:DI 0 ax [103])
                    (reg:DI 1 dx [orig:65 D.4956 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.4956 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.4956 ] [65]))
                (nil)))))
(insn 29 28 30 4 (set (reg/f:DI 0 ax [orig:67 D.4955 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [orig:66 D.4957 ] [66]) [0 *_20+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.4957 ] [66])
        (nil)))
(insn 30 29 31 4 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 1 dx [orig:68 D.4956 ] [68])
        (sign_extend:DI (reg:SI 1 dx [104]))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [104])
        (nil)))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 1 dx [orig:69 D.4956 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.4956 ] [68])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4956 ] [68])
        (nil)))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.4955 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.4955 ] [67])
                    (reg:DI 1 dx [orig:69 D.4956 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4956 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4955 ] [67])
            (nil))))
(insn 34 33 35 4 (set (reg:XF 9 st(1) [orig:71 D.4954 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.4955 ] [70]) [0 *_24+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4955 ] [70])
        (nil)))
(insn 35 34 36 4 (set (reg:XF 8 st [105])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (nil))
(insn 36 35 37 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:71 D.4954 ] [71])
            (reg:XF 8 st [105]))) mSector.c:23 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [105])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:71 D.4954 ] [71])
            (nil))))
(jump_insn 37 36 41 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 54)
            (pc))) mSector.c:23 612 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72 73 74 75 76 77 78 106 107 108 109
(note 41 37 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 0 ax [orig:72 D.4956 ] [72])
        (sign_extend:DI (reg:SI 0 ax [106]))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [106])
        (nil)))
(insn 44 43 45 5 (parallel [
            (set (reg:DI 1 dx [orig:73 D.4956 ] [73])
                (ashift:DI (reg:DI 0 ax [orig:72 D.4956 ] [72])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:72 D.4956 ] [72])
        (nil)))
(insn 45 44 46 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.4957 ] [74])
                (plus:DI (reg/f:DI 0 ax [107])
                    (reg:DI 1 dx [orig:73 D.4956 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.4956 ] [73])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                    (reg:DI 1 dx [orig:73 D.4956 ] [73]))
                (nil)))))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [orig:75 D.4955 ] [75])
        (mem/f:DI (reg/f:DI 0 ax [orig:74 D.4957 ] [74]) [0 *_28+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.4957 ] [74])
        (nil)))
(insn 48 47 49 5 (set (reg:SI 1 dx [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 1 dx [orig:76 D.4956 ] [76])
        (sign_extend:DI (reg:SI 1 dx [108]))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [108])
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 1 dx [orig:77 D.4956 ] [77])
                (ashift:DI (reg:DI 1 dx [orig:76 D.4956 ] [76])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.4956 ] [76])
        (nil)))
(insn 51 50 52 5 (parallel [
            (set (reg/f:DI 0 ax [orig:78 D.4955 ] [78])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.4955 ] [75])
                    (reg:DI 1 dx [orig:77 D.4956 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.4956 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.4955 ] [75])
            (nil))))
(insn 52 51 53 5 (set (reg:XF 0 ax [109])
        (mem:XF (reg/f:DI 0 ax [orig:78 D.4955 ] [78]) [0 *_32+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.4955 ] [78])
        (nil)))
(insn 53 52 54 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 0 ax [109])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [109])
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 6 4 "" [1 uses])
(note 55 54 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110
(code_label 57 56 58 7 3 "" [1 uses])
(note 58 57 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 58 61 7 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [110])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32]))) mSector.c:23 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [110])
        (nil)))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) mSector.c:23 612 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 142 8 (set (reg:XF 0 ax [orig:59 D.4954 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:24 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 142 64 143 8 (set (pc)
        (label_ref 122)) mSector.c:24 650 {jump}
     (nil)
 -> 122)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 143 142 67)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 81 82 111 112 113
(code_label 67 143 68 9 2 "" [1 uses])
(note 68 67 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 70 69 71 9 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 9 (set (reg/f:DI 0 ax [orig:79 D.4955 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [111]) [0 *p_10(D)+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (nil)))
(insn 72 71 73 9 (set (reg:SI 1 dx [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:DI 1 dx [orig:80 D.4956 ] [80])
        (sign_extend:DI (reg:SI 1 dx [112]))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [112])
        (nil)))
(insn 74 73 75 9 (parallel [
            (set (reg:DI 1 dx [orig:81 D.4956 ] [81])
                (ashift:DI (reg:DI 1 dx [orig:80 D.4956 ] [80])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.4956 ] [80])
        (nil)))
(insn 75 74 76 9 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.4955 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:79 D.4955 ] [79])
                    (reg:DI 1 dx [orig:81 D.4956 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.4956 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4955 ] [79])
            (nil))))
(insn 76 75 77 9 (set (reg:XF 0 ax [113])
        (mem:XF (reg/f:DI 0 ax [orig:82 D.4955 ] [82]) [0 *_40+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.4955 ] [82])
        (nil)))
(insn 77 76 144 9 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 0 ax [113])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [113])
        (nil)))
(jump_insn 144 77 145 9 (set (pc)
        (label_ref 114)) mSector.c:27 650 {jump}
     (nil)
 -> 114)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 145 144 116)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 114 115 116 117
(code_label 116 145 80 10 11 "" [1 uses])
(note 80 116 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 82 81 83 10 (set (reg:DI 0 ax [orig:83 D.4956 ] [83])
        (sign_extend:DI (reg:SI 0 ax [114]))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [114])
        (nil)))
(insn 83 82 84 10 (parallel [
            (set (reg:DI 1 dx [orig:84 D.4956 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.4956 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:83 D.4956 ] [83])
        (nil)))
(insn 84 83 85 10 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 10 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.4957 ] [85])
                (plus:DI (reg/f:DI 0 ax [115])
                    (reg:DI 1 dx [orig:84 D.4956 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.4956 ] [84])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                    (reg:DI 1 dx [orig:84 D.4956 ] [84]))
                (nil)))))
(insn 86 85 87 10 (set (reg/f:DI 0 ax [orig:86 D.4955 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.4957 ] [85]) [0 *_44+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.4957 ] [85])
        (nil)))
(insn 87 86 88 10 (set (reg:SI 1 dx [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 1 dx [orig:87 D.4956 ] [87])
        (sign_extend:DI (reg:SI 1 dx [116]))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [116])
        (nil)))
(insn 89 88 90 10 (parallel [
            (set (reg:DI 1 dx [orig:88 D.4956 ] [88])
                (ashift:DI (reg:DI 1 dx [orig:87 D.4956 ] [87])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.4956 ] [87])
        (nil)))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.4955 ] [89])
                (plus:DI (reg/f:DI 0 ax [orig:86 D.4955 ] [86])
                    (reg:DI 1 dx [orig:88 D.4956 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.4956 ] [88])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.4955 ] [86])
            (nil))))
(insn 91 90 92 10 (set (reg:XF 8 st [orig:90 D.4954 ] [90])
        (mem:XF (reg/f:DI 0 ax [orig:89 D.4955 ] [89]) [0 *_48+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.4955 ] [89])
        (nil)))
(insn 92 91 93 10 (set (reg:XF 9 st(1) [117])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (nil))
(insn 93 92 94 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [117])
            (reg:XF 8 st [orig:90 D.4954 ] [90]))) mSector.c:27 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [117])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.4954 ] [90])
            (nil))))
(jump_insn 94 93 98 10 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) mSector.c:27 612 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 118 119 120 121
(note 98 94 99 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 11 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 100 99 101 11 (set (reg:DI 0 ax [orig:91 D.4956 ] [91])
        (sign_extend:DI (reg:SI 0 ax [118]))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (nil)))
(insn 101 100 102 11 (parallel [
            (set (reg:DI 1 dx [orig:92 D.4956 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.4956 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:91 D.4956 ] [91])
        (nil)))
(insn 102 101 103 11 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 11 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.4957 ] [93])
                (plus:DI (reg/f:DI 0 ax [119])
                    (reg:DI 1 dx [orig:92 D.4956 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.4956 ] [92])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                    (reg:DI 1 dx [orig:92 D.4956 ] [92]))
                (nil)))))
(insn 104 103 105 11 (set (reg/f:DI 0 ax [orig:94 D.4955 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.4957 ] [93]) [0 *_52+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.4957 ] [93])
        (nil)))
(insn 105 104 106 11 (set (reg:SI 1 dx [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 106 105 107 11 (set (reg:DI 1 dx [orig:95 D.4956 ] [95])
        (sign_extend:DI (reg:SI 1 dx [120]))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [120])
        (nil)))
(insn 107 106 108 11 (parallel [
            (set (reg:DI 1 dx [orig:96 D.4956 ] [96])
                (ashift:DI (reg:DI 1 dx [orig:95 D.4956 ] [95])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.4956 ] [95])
        (nil)))
(insn 108 107 109 11 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.4955 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:94 D.4955 ] [94])
                    (reg:DI 1 dx [orig:96 D.4956 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.4956 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.4955 ] [94])
            (nil))))
(insn 109 108 110 11 (set (reg:XF 0 ax [121])
        (mem:XF (reg/f:DI 0 ax [orig:97 D.4955 ] [97]) [0 *_56+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.4955 ] [97])
        (nil)))
(insn 110 109 111 11 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 0 ax [121])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [121])
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 111 110 112 12 9 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122
(code_label 114 113 115 13 8 "" [1 uses])
(note 115 114 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 115 118 13 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [122])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32]))) mSector.c:27 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [122])
        (nil)))
(jump_insn 119 118 120 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) mSector.c:27 612 {*jcc_1}
     (nil)
 -> 116)
;;  succ:       10
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 120 119 121 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 14 (set (reg:XF 0 ax [orig:59 D.4954 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:28 131 {*movxf_internal_rex64}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              8 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 98
(code_label 122 121 123 15 7 "" [1 uses])
(note 123 122 124 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 146 15 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])
        (reg:XF 0 ax [orig:59 D.4954 ] [59])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.4954 ] [59])
        (nil)))
(insn 146 124 128 15 (set (reg:XF 8 st [orig:98 <retval> ] [98])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 124)
        (nil)))
(insn 128 146 131 15 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:98 <retval> ] [98])) mSector.c:30 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:98 <retval> ] [98])
        (nil)))
(insn 131 128 0 15 (use (reg/i:XF 8 st)) mSector.c:30 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _point_proj (_point_proj, funcdef_no=3, decl_uid=3957, cgraph_uid=3)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 65:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 85:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 95:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 109: point = 0
   Insn 106: point = 0
   Insn 102: point = 1
  BB 4
   Insn 116: point = 4
   Insn 30: point = 4
   Insn 29: point = 5
   Insn 28: point = 6
   Insn 27: point = 8
   Insn 26: point = 9
   Insn 25: point = 11
   Insn 24: point = 12
   Insn 23: point = 13
   Insn 22: point = 14
   Insn 21: point = 16
  BB 5
   Insn 99: point = 17
   Insn 98: point = 18
   Insn 97: point = 19
   Insn 96: point = 21
   Insn 95: point = 22
   Insn 94: point = 24
   Insn 93: point = 25
   Insn 92: point = 27
   Insn 91: point = 29
   Insn 90: point = 30
   Insn 89: point = 32
   Insn 88: point = 33
   Insn 87: point = 34
   Insn 86: point = 36
   Insn 85: point = 37
   Insn 84: point = 39
   Insn 83: point = 41
   Insn 82: point = 43
   Insn 81: point = 44
   Insn 80: point = 46
   Insn 79: point = 47
   Insn 78: point = 49
   Insn 77: point = 50
   Insn 76: point = 52
   Insn 75: point = 53
   Insn 74: point = 54
   Insn 73: point = 55
   Insn 72: point = 57
   Insn 71: point = 59
   Insn 70: point = 60
   Insn 69: point = 62
   Insn 68: point = 63
   Insn 67: point = 64
   Insn 66: point = 66
   Insn 65: point = 67
   Insn 64: point = 69
   Insn 63: point = 71
   Insn 62: point = 73
   Insn 61: point = 74
   Insn 60: point = 76
   Insn 59: point = 77
   Insn 58: point = 79
   Insn 57: point = 80
   Insn 56: point = 81
   Insn 55: point = 83
   Insn 54: point = 85
   Insn 53: point = 86
   Insn 52: point = 88
   Insn 51: point = 89
   Insn 50: point = 91
   Insn 49: point = 93
   Insn 48: point = 94
   Insn 47: point = 95
   Insn 46: point = 97
   Insn 45: point = 99
   Insn 44: point = 101
   Insn 43: point = 102
   Insn 42: point = 104
   Insn 41: point = 105
   Insn 40: point = 107
   Insn 39: point = 109
   Insn 38: point = 111
   Insn 37: point = 112
   Insn 36: point = 114
   Insn 35: point = 116
  BB 3
   Insn 16: point = 117
   Insn 15: point = 117
  BB 2
   Insn 14: point = 119
   Insn 13: point = 119
   Insn 12: point = 119
   Insn 11: point = 121
   Insn 10: point = 122
   Insn 9: point = 124
   Insn 5: point = 125
   Insn 4: point = 125
   Insn 3: point = 125
   Insn 2: point = 125
 r59: [17..17] [2..4]
 r60: [117..122]
 r61: [117..119]
 r62: [12..14]
 r63: [5..9]
 r64: [5..6]
 r65: [113..114]
 r66: [106..112]
 r67: [108..109]
 r68: [106..107]
 r69: [96..105]
 r70: [98..102]
 r71: [98..99]
 r72: [96..97]
 r73: [90..91]
 r74: [82..89]
 r75: [84..86]
 r76: [82..83]
 r77: [75..77]
 r78: [68..74]
 r79: [70..71]
 r80: [68..69]
 r81: [65..67]
 r82: [56..64]
 r83: [58..60]
 r84: [56..57]
 r85: [53..55]
 r86: [18..50]
 r87: [45..47]
 r88: [38..44]
 r89: [40..41]
 r90: [38..39]
 r91: [35..37]
 r92: [26..34]
 r93: [28..30]
 r94: [26..27]
 r95: [23..25]
 r96: [20..22]
 r97: [18..19]
 r98: [0..1]
 r99: [123..124]
 r100: [120..121]
 r101: [15..16]
 r102: [12..13]
 r103: [10..11]
 r104: [7..8]
 r105: [115..116]
 r106: [110..111]
 r107: [103..104]
 r108: [100..101]
 r109: [94..95]
 r110: [92..93]
 r111: [87..88]
 r112: [84..85]
 r113: [80..81]
 r114: [78..79]
 r115: [75..76]
 r116: [72..73]
 r117: [65..66]
 r118: [61..63]
 r119: [61..62]
 r120: [58..59]
 r121: [53..54]
 r122: [51..52]
 r123: [48..49]
 r124: [45..46]
 r125: [42..43]
 r126: [35..36]
 r127: [31..33]
 r128: [31..32]
 r129: [28..29]
 r130: [23..24]
 r131: [20..21]
Compressing live ranges: from 125 to 99 - 79%
Ranges after the compression:
 r59: [14..14] [2..3]
 r60: [93..96]
 r61: [93..94]
 r62: [10..11]
 r63: [4..7]
 r64: [4..5]
 r65: [89..90]
 r66: [83..88]
 r67: [85..86]
 r68: [83..84]
 r69: [75..82]
 r70: [77..80]
 r71: [77..78]
 r72: [75..76]
 r73: [69..70]
 r74: [63..68]
 r75: [65..66]
 r76: [63..64]
 r77: [57..58]
 r78: [51..56]
 r79: [53..54]
 r80: [51..52]
 r81: [49..50]
 r82: [43..48]
 r83: [45..46]
 r84: [43..44]
 r85: [41..42]
 r86: [15..38]
 r87: [35..36]
 r88: [29..34]
 r89: [31..32]
 r90: [29..30]
 r91: [27..28]
 r92: [21..26]
 r93: [23..24]
 r94: [21..22]
 r95: [19..20]
 r96: [17..18]
 r97: [15..16]
 r98: [0..1]
 r99: [97..98]
 r100: [95..96]
 r101: [12..13]
 r102: [10..11]
 r103: [8..9]
 r104: [6..7]
 r105: [91..92]
 r106: [87..88]
 r107: [81..82]
 r108: [79..80]
 r109: [73..74]
 r110: [71..72]
 r111: [67..68]
 r112: [65..66]
 r113: [61..62]
 r114: [59..60]
 r115: [57..58]
 r116: [55..56]
 r117: [49..50]
 r118: [47..48]
 r119: [47..48]
 r120: [45..46]
 r121: [41..42]
 r122: [39..40]
 r123: [37..38]
 r124: [35..36]
 r125: [33..34]
 r126: [27..28]
 r127: [25..26]
 r128: [25..26]
 r129: [23..24]
 r130: [19..20]
 r131: [17..18]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 99
changing reg in insn 30
changing reg in insn 102
changing reg in insn 10
changing reg in insn 15
changing reg in insn 13
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 41
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 47
changing reg in insn 43
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 56
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 61
changing reg in insn 61
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 73
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 77
changing reg in insn 98
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 85
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 93
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 106
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
starting the processing of deferred insns
ending the processing of deferred insns


_point_proj

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={29d,28u} r1={4d,4u} r2={3d,3u} r4={1d,1u} r5={1d,1u} r6={1d,41u} r7={1d,6u} r8={24d,25u} r9={14d,15u} r10={6d,6u} r17={9d,2u} r20={1d,1u,7e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 244{104d,133u,7e} in 91{91 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 99 100
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
        (reg:DI 5 di [ P ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ P ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
        (reg:DI 4 si [ A ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ A ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])
        (reg:DI 1 dx [ B ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ B ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
        (reg:DI 2 cx [ H ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ H ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:34 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 9 st(1) [orig:60 D.4960 ] [60])
        (mem:XF (reg/f:DI 0 ax [99]) [0 *B_2(D)+0 S16 A128])) mSector.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:34 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:XF 8 st [orig:61 D.4960 ] [61])
        (mem:XF (reg/f:DI 0 ax [100]) [0 *A_4(D)+0 S16 A128])) mSector.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 13 12 14 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:60 D.4960 ] [60])
            (reg:XF 8 st [orig:61 D.4960 ] [61]))) mSector.c:34 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 14 13 111 2 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mSector.c:34 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61
;; lr  def 	 17 [flags]
(note 111 14 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 111 16 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:60 D.4960 ] [60])
            (reg:XF 8 st [orig:61 D.4960 ] [61]))) mSector.c:34 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.4960 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.4960 ] [60])
            (nil))))
(jump_insn 16 15 20 3 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 33)
            (pc))) mSector.c:34 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 62 63 64 101 102 103 104
(note 20 16 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 4 (set (reg:XF 0 ax [orig:62 D.4960 ] [62])
        (mem:XF (reg/f:DI 0 ax [101]) [0 *B_2(D)+0 S16 A128])) mSector.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 2 cx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (set (mem:XF (reg/f:DI 2 cx [102]) [0 *H_7(D)+0 S16 A128])
        (reg:XF 0 ax [orig:62 D.4960 ] [62])) mSector.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [102])
        (expr_list:REG_DEAD (reg:XF 0 ax [orig:62 D.4960 ] [62])
            (nil))))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:DI 2 cx [orig:63 D.4961 ] [63])
                (plus:DI (reg/f:DI 0 ax [103])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:36 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (reg:XF 0 ax [orig:64 D.4960 ] [64])
        (mem:XF (plus:DI (reg/f:DI 0 ax [104])
                (const_int 16 [0x10])) [0 MEM[(long double *)P_9(D) + 16B]+0 S16 A128])) mSector.c:36 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 29 28 30 4 (set (mem:XF (reg/f:DI 2 cx [orig:63 D.4961 ] [63]) [0 *_8+0 S16 A128])
        (reg:XF 0 ax [orig:64 D.4960 ] [64])) mSector.c:36 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:64 D.4960 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:63 D.4961 ] [63])
            (nil))))
(insn 30 29 116 4 (set (reg:SI 0 ax [orig:59 D.4959 ] [59])
        (const_int 1 [0x1])) mSector.c:37 89 {*movsi_internal}
     (nil))
(jump_insn 116 30 117 4 (set (pc)
        (label_ref 100)) mSector.c:37 650 {jump}
     (nil)
 -> 100)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 117 116 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
(code_label 33 117 34 5 15 "" [2 uses])
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4961 ] [65])
                (plus:DI (reg/f:DI 0 ax [105])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:40 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 37 36 38 5 (set (reg:XF 9 st(1) [orig:66 D.4960 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.4961 ] [65]) [0 *_12+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4961 ] [65])
        (nil)))
(insn 38 37 39 5 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 5 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.4961 ] [67])
                (plus:DI (reg/f:DI 0 ax [106])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:40 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 40 39 41 5 (set (reg:XF 8 st [orig:68 D.4960 ] [68])
        (mem:XF (reg/f:DI 0 ax [orig:67 D.4961 ] [67]) [0 *_14+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4961 ] [67])
        (nil)))
(insn 41 40 42 5 (set (reg:XF 9 st(1) [orig:69 D.4960 ] [69])
        (minus:XF (reg:XF 9 st(1) [orig:66 D.4960 ] [66])
            (reg:XF 8 st [orig:68 D.4960 ] [68]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.4960 ] [68])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:66 D.4960 ] [66])
            (nil))))
(insn 42 41 43 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 5 (set (reg:XF 10 st(2) [orig:70 D.4960 ] [70])
        (mem:XF (reg/f:DI 0 ax [107]) [0 *B_2(D)+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (nil)))
(insn 44 43 45 5 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:XF 8 st [orig:71 D.4960 ] [71])
        (mem:XF (reg/f:DI 0 ax [108]) [0 *A_4(D)+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 46 45 47 5 (set (reg:XF 8 st [orig:72 D.4960 ] [72])
        (minus:XF (reg:XF 10 st(2) [orig:70 D.4960 ] [70])
            (reg:XF 8 st [orig:71 D.4960 ] [71]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.4960 ] [71])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:70 D.4960 ] [70])
            (nil))))
(insn 47 46 48 5 (set (reg:XF 8 st [109])
        (div:XF (reg:XF 9 st(1) [orig:69 D.4960 ] [69])
            (reg:XF 8 st [orig:72 D.4960 ] [72]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.4960 ] [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:69 D.4960 ] [69])
            (nil))))
(insn 48 47 49 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])
        (reg:XF 8 st [109])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [109])
        (nil)))
(insn 49 48 50 5 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.4961 ] [73])
                (plus:DI (reg/f:DI 0 ax [110])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 51 50 52 5 (set (reg:XF 9 st(1) [orig:74 D.4960 ] [74])
        (mem:XF (reg/f:DI 0 ax [orig:73 D.4961 ] [73]) [0 *_21+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.4961 ] [73])
        (nil)))
(insn 52 51 53 5 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 5 (set (reg:XF 10 st(2) [orig:75 D.4960 ] [75])
        (mem:XF (reg/f:DI 0 ax [111]) [0 *A_4(D)+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (nil)))
(insn 54 53 55 5 (set (reg:XF 8 st [112])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (reg:XF 8 st [orig:76 D.4960 ] [76])
        (mult:XF (reg:XF 8 st [112])
            (reg:XF 10 st(2) [orig:75 D.4960 ] [75]))) mSector.c:41 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [112])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:75 D.4960 ] [75])
            (nil))))
(insn 56 55 57 5 (set (reg:XF 8 st [113])
        (minus:XF (reg:XF 9 st(1) [orig:74 D.4960 ] [74])
            (reg:XF 8 st [orig:76 D.4960 ] [76]))) mSector.c:41 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.4960 ] [76])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.4960 ] [74])
            (nil))))
(insn 57 56 58 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])
        (reg:XF 8 st [113])) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [113])
        (nil)))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (set (reg:XF 9 st(1) [orig:77 D.4960 ] [77])
        (mem:XF (reg/f:DI 0 ax [114]) [0 *P_9(D)+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (nil)))
(insn 60 59 61 5 (set (reg:XF 8 st [115])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 61 60 62 5 (set (reg:XF 9 st(1) [orig:78 D.4960 ] [78])
        (div:XF (reg:XF 9 st(1) [orig:77 D.4960 ] [77])
            (reg:XF 8 st [115]))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [115])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:77 D.4960 ] [77])
            (nil))))
(insn 62 61 63 5 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.4961 ] [79])
                (plus:DI (reg/f:DI 0 ax [116])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 64 63 65 5 (set (reg:XF 8 st [orig:80 D.4960 ] [80])
        (mem:XF (reg/f:DI 0 ax [orig:79 D.4961 ] [79]) [0 *_28+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4961 ] [79])
        (nil)))
(insn 65 64 66 5 (set (reg:XF 9 st(1) [orig:81 D.4960 ] [81])
        (plus:XF (reg:XF 9 st(1) [orig:78 D.4960 ] [78])
            (reg:XF 8 st [orig:80 D.4960 ] [80]))) mSector.c:43 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.4960 ] [80])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:78 D.4960 ] [78])
            (nil))))
(insn 66 65 67 5 (set (reg:XF 8 st [117])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 5 (set (reg:XF 9 st(1) [orig:82 D.4960 ] [82])
        (minus:XF (reg:XF 9 st(1) [orig:81 D.4960 ] [81])
            (reg:XF 8 st [117]))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [117])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 D.4960 ] [81])
            (nil))))
(insn 68 67 69 5 (set (reg:XF 10 st(2) [118])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 69 68 70 5 (set (reg:XF 8 st [119])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 70 69 71 5 (set (reg:XF 10 st(2) [orig:83 D.4960 ] [83])
        (div:XF (reg:XF 10 st(2) [118])
            (reg:XF 8 st [119]))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [119])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [118])
            (nil))))
(insn 71 70 72 5 (set (reg:XF 8 st [120])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 72 71 73 5 (set (reg:XF 8 st [orig:84 D.4960 ] [84])
        (plus:XF (reg:XF 8 st [120])
            (reg:XF 10 st(2) [orig:83 D.4960 ] [83]))) mSector.c:43 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [120])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:83 D.4960 ] [83])
            (nil))))
(insn 73 72 74 5 (set (reg:XF 8 st [orig:85 D.4960 ] [85])
        (div:XF (reg:XF 9 st(1) [orig:82 D.4960 ] [82])
            (reg:XF 8 st [orig:84 D.4960 ] [84]))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.4960 ] [84])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:82 D.4960 ] [82])
            (nil))))
(insn 74 73 75 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 5 (set (mem:XF (reg/f:DI 0 ax [121]) [0 *H_7(D)+0 S16 A128])
        (reg:XF 8 st [orig:85 D.4960 ] [85])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.4960 ] [85])
            (nil))))
(insn 76 75 77 5 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg/f:DI 1 dx [orig:86 D.4961 ] [86])
                (plus:DI (reg/f:DI 0 ax [122])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [122])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 78 77 79 5 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 5 (set (reg:XF 9 st(1) [orig:87 D.4960 ] [87])
        (mem:XF (reg/f:DI 0 ax [123]) [0 *P_9(D)+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [123])
        (nil)))
(insn 80 79 81 5 (set (reg:XF 8 st [124])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 81 80 82 5 (set (reg:XF 9 st(1) [orig:88 D.4960 ] [88])
        (div:XF (reg:XF 9 st(1) [orig:87 D.4960 ] [87])
            (reg:XF 8 st [124]))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [124])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:87 D.4960 ] [87])
            (nil))))
(insn 82 81 83 5 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.4961 ] [89])
                (plus:DI (reg/f:DI 0 ax [125])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [125])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 84 83 85 5 (set (reg:XF 8 st [orig:90 D.4960 ] [90])
        (mem:XF (reg/f:DI 0 ax [orig:89 D.4961 ] [89]) [0 *_38+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.4961 ] [89])
        (nil)))
(insn 85 84 86 5 (set (reg:XF 9 st(1) [orig:91 D.4960 ] [91])
        (plus:XF (reg:XF 9 st(1) [orig:88 D.4960 ] [88])
            (reg:XF 8 st [orig:90 D.4960 ] [90]))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.4960 ] [90])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:88 D.4960 ] [88])
            (nil))))
(insn 86 85 87 5 (set (reg:XF 8 st [126])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 87 86 88 5 (set (reg:XF 9 st(1) [orig:92 D.4960 ] [92])
        (minus:XF (reg:XF 9 st(1) [orig:91 D.4960 ] [91])
            (reg:XF 8 st [126]))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [126])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:91 D.4960 ] [91])
            (nil))))
(insn 88 87 89 5 (set (reg:XF 10 st(2) [127])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 89 88 90 5 (set (reg:XF 8 st [128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 5 (set (reg:XF 10 st(2) [orig:93 D.4960 ] [93])
        (div:XF (reg:XF 10 st(2) [127])
            (reg:XF 8 st [128]))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [128])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [127])
            (nil))))
(insn 91 90 92 5 (set (reg:XF 8 st [129])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 92 91 93 5 (set (reg:XF 8 st [orig:94 D.4960 ] [94])
        (plus:XF (reg:XF 8 st [129])
            (reg:XF 10 st(2) [orig:93 D.4960 ] [93]))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [129])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:93 D.4960 ] [93])
            (nil))))
(insn 93 92 94 5 (set (reg:XF 9 st(1) [orig:95 D.4960 ] [95])
        (div:XF (reg:XF 9 st(1) [orig:92 D.4960 ] [92])
            (reg:XF 8 st [orig:94 D.4960 ] [94]))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:94 D.4960 ] [94])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:92 D.4960 ] [92])
            (nil))))
(insn 94 93 95 5 (set (reg:XF 8 st [130])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 95 94 96 5 (set (reg:XF 9 st(1) [orig:96 D.4960 ] [96])
        (mult:XF (reg:XF 9 st(1) [orig:95 D.4960 ] [95])
            (reg:XF 8 st [130]))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [130])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:95 D.4960 ] [95])
            (nil))))
(insn 96 95 97 5 (set (reg:XF 8 st [131])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 97 96 98 5 (set (reg:XF 8 st [orig:97 D.4960 ] [97])
        (plus:XF (reg:XF 8 st [131])
            (reg:XF 9 st(1) [orig:96 D.4960 ] [96]))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [131])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:96 D.4960 ] [96])
            (nil))))
(insn 98 97 99 5 (set (mem:XF (reg/f:DI 1 dx [orig:86 D.4961 ] [86]) [0 *_35+0 S16 A128])
        (reg:XF 8 st [orig:97 D.4960 ] [97])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:97 D.4960 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:86 D.4961 ] [86])
            (nil))))
(insn 99 98 100 5 (set (reg:SI 0 ax [orig:59 D.4959 ] [59])
        (const_int 1 [0x1])) mSector.c:46 89 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 98
(code_label 100 99 101 6 17 "" [1 uses])
(note 101 100 102 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 106 6 (set (reg:SI 0 ax [orig:98 <retval> ] [98])
        (reg:SI 0 ax [orig:59 D.4959 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4959 ] [59])
        (nil)))
(insn 106 102 109 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:98 <retval> ] [98])) mSector.c:47 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:98 <retval> ] [98])
        (nil)))
(insn 109 106 0 6 (use (reg/i:SI 0 ax)) mSector.c:47 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _check_tmp_point (_check_tmp_point, funcdef_no=4, decl_uid=3963, cgraph_uid=4)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 66
changing reg in insn 52
changing reg in insn 17
changing reg in insn 69
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 26
changing reg in insn 31
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 41
changing reg in insn 33
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 42
changing reg in insn 44
changing reg in insn 46
changing reg in insn 69
changing reg in insn 73
changing reg in insn 8
changing reg in insn 11
changing reg in insn 27
changing reg in insn 28
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 43.


_check_tmp_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={17d,14u} r1={14d,11u} r2={5d,2u} r4={5d,2u} r5={5d,3u} r6={1d,24u} r7={1d,12u} r8={3d,2u} r9={3d,1u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={12d,3u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 224{149d,75u,0e} in 48{46 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 78
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:49 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 1 dx [orig:60 D.4962 ] [60])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 conf.Nbound+0 S4 A128])) mSector.c:51 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 2 cx [orig:61 D.4963 ] [61])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 conf.bound+0 S8 A64])) mSector.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:60 D.4962 ] [60])) mSector.c:51 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:60 D.4962 ] [60])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:61 D.4963 ] [61])) mSector.c:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:61 D.4963 ] [61])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [78])) mSector.c:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:51 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:62 D.4962 ] [62])
        (reg:SI 0 ax)) mSector.c:51 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:62 D.4962 ] [62])
            (const_int 0 [0]))) mSector.c:51 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.4962 ] [62])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) mSector.c:51 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 82 3 (set (reg:SI 0 ax [orig:59 D.4962 ] [59])
        (const_int 1 [0x1])) mSector.c:51 89 {*movsi_internal}
     (nil))
(jump_insn 82 17 83 3 (set (pc)
        (label_ref 67)) mSector.c:51 650 {jump}
     (nil)
 -> 67)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 83 82 20)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 83 21 4 21 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 84 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:52 89 {*movsi_internal}
     (nil))
(jump_insn 84 22 85 4 (set (pc)
        (label_ref 58)) mSector.c:52 650 {jump}
     (nil)
 -> 58)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 85 84 62)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 75 76 79 80 81 82
(code_label 62 85 25 5 26 "" [1 uses])
(note 25 62 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:DI 0 ax [orig:65 D.4963 ] [65])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 conf.bound+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 5 (set (reg:SI 1 dx [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 1 dx [orig:66 D.4964 ] [66])
        (sign_extend:DI (reg:SI 1 dx [79]))) mSector.c:52 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [79])
        (nil)))
(insn 29 28 30 5 (parallel [
            (set (reg:DI 1 dx [orig:67 D.4964 ] [67])
                (plus:DI (reg:DI 1 dx [orig:66 D.4964 ] [66])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.4964 ] [66])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 1 dx [orig:68 D.4964 ] [68])
                (ashift:DI (reg:DI 1 dx [orig:67 D.4964 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.4964 ] [67])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.4963 ] [69])
                (plus:DI (reg/f:DI 0 ax [orig:65 D.4963 ] [65])
                    (reg:DI 1 dx [orig:68 D.4964 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.4964 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4963 ] [65])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 32 31 33 5 (set (reg/f:DI 2 cx [orig:70 D.4965 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [orig:69 D.4963 ] [69]) [0 *_15+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.4963 ] [69])
        (nil)))
(insn 33 32 34 5 (set (reg/f:DI 0 ax [orig:71 D.4963 ] [71])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 conf.bound+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 5 (set (reg:SI 1 dx [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 1 dx [orig:72 D.4966 ] [72])
        (sign_extend:DI (reg:SI 1 dx [80]))) mSector.c:52 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [80])
        (nil)))
(insn 36 35 37 5 (parallel [
            (set (reg:DI 1 dx [orig:73 D.4966 ] [73])
                (ashift:DI (reg:DI 1 dx [orig:72 D.4966 ] [72])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.4966 ] [72])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 5 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.4963 ] [74])
                (plus:DI (reg/f:DI 0 ax [orig:71 D.4963 ] [71])
                    (reg:DI 1 dx [orig:73 D.4966 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.4966 ] [73])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4963 ] [71])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 5 (set (reg/f:DI 0 ax [orig:75 D.4965 ] [75])
        (mem/f:DI (reg/f:DI 0 ax [orig:74 D.4963 ] [74]) [0 *_20+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.4963 ] [74])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 1 dx [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 5 (set (reg:DI 1 dx)
        (reg:DI 1 dx [81])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [81])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:70 D.4965 ] [70])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:70 D.4965 ] [70])
        (nil)))
(insn 42 41 43 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:75 D.4965 ] [75])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.4965 ] [75])
        (nil)))
(call_insn 43 42 44 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("distance_point_segment") [flags 0x41]  <function_decl 0x7f44d29fca00 distance_point_segment>) [0 distance_point_segment S1 A8])
            (const_int 0 [0]))) mSector.c:52 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 44 43 45 5 (set (reg:XF 8 st [orig:76 D.4967 ] [76])
        (reg:XF 8 st)) mSector.c:52 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 45 44 46 5 (set (reg:XF 9 st(1) [82])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mSector.c:52 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 46 45 47 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [82])
            (reg:XF 8 st [orig:76 D.4967 ] [76]))) mSector.c:52 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [82])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.4967 ] [76])
            (nil))))
(jump_insn 47 46 51 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mSector.c:52 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 86)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 51 47 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 87 6 (set (reg:SI 0 ax [orig:59 D.4962 ] [59])
        (const_int 1 [0x1])) mSector.c:52 89 {*movsi_internal}
     (nil))
(jump_insn 87 52 88 6 (set (pc)
        (label_ref 67)) mSector.c:52 650 {jump}
     (nil)
 -> 67)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 88 87 86)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 86 88 56 7 28 "" [1 uses])
(note 56 86 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64
(code_label 58 57 59 8 23 "" [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg:SI 0 ax [orig:63 D.4962 ] [63])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 conf.Nbound+0 S4 A128])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 61 60 63 8 (parallel [
            (set (reg:SI 0 ax [orig:64 D.4962 ] [64])
                (plus:SI (reg:SI 0 ax [orig:63 D.4962 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.4962 ] [63])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 63 61 64 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:64 D.4962 ] [64])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mSector.c:52 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.4962 ] [64])
        (nil)))
(jump_insn 64 63 65 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mSector.c:52 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 62)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg:SI 0 ax [orig:59 D.4962 ] [59])
        (const_int 0 [0])) mSector.c:54 89 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [100.0%] 
;;              6 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 77
(code_label 67 66 68 10 22 "" [2 uses])
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 73 10 (set (reg:SI 0 ax [orig:77 <retval> ] [77])
        (reg:SI 0 ax [orig:59 D.4962 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4962 ] [59])
        (nil)))
(insn 73 69 76 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:77 <retval> ] [77])) mSector.c:55 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 <retval> ] [77])
        (nil)))
(insn 76 73 0 10 (use (reg/i:SI 0 ax)) mSector.c:55 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function generate_temporary_point (generate_temporary_point, funcdef_no=5, decl_uid=1870, cgraph_uid=5)

      Creating newreg=99
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
deleting insn with uid = 4.
      Creating newreg=100
Removing SCRATCH in insn #107 (nop 3)
rescanning insn with uid = 107.
deleting insn with uid = 107.

********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=576, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=544, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r99
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 42:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 45:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 52:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) qm  (1) qn {*cmpqi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 70:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 77:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 80:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r100
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 67 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 77 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 11
   Insn 109: point = 0
  BB 12
   Insn 112: point = 0
  BB 10
   Insn 108: point = 0
   Insn 107: point = 0
   Insn 104: point = 1
   Insn 100: point = 2
   Insn 97: point = 4
   Insn 96: point = 5
   Insn 95: point = 5
   Insn 94: point = 6
  BB 9
   Insn 92: point = 7
   Insn 91: point = 7
   Insn 89: point = 8
   Insn 88: point = 9
   Insn 87: point = 9
   Insn 86: point = 10
   Insn 85: point = 10
   Insn 84: point = 11
   Insn 83: point = 12
  BB 4
   Insn 117: point = 13
   Insn 31: point = 13
  BB 3
   Insn 28: point = 13
   Insn 27: point = 13
  BB 2
   Insn 25: point = 13
   Insn 24: point = 13
   Insn 23: point = 13
   Insn 22: point = 14
   Insn 21: point = 15
   Insn 20: point = 15
   Insn 19: point = 15
   Insn 18: point = 15
   Insn 17: point = 15
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 14: point = 17
   Insn 13: point = 18
   Insn 12: point = 18
   Insn 11: point = 19
   Insn 10: point = 19
   Insn 9: point = 21
   Insn 8: point = 22
   Insn 7: point = 23
   Insn 4: point = 24
   Insn 2: point = 26
  BB 8
   Insn 80: point = 26
   Insn 79: point = 26
   Insn 78: point = 27
   Insn 77: point = 29
   Insn 76: point = 30
   Insn 75: point = 30
   Insn 74: point = 31
   Insn 73: point = 33
   Insn 72: point = 35
   Insn 71: point = 36
   Insn 70: point = 37
   Insn 69: point = 37
   Insn 68: point = 39
   Insn 67: point = 41
   Insn 66: point = 43
   Insn 65: point = 45
   Insn 64: point = 47
   Insn 63: point = 48
   Insn 62: point = 50
  BB 7
   Insn 60: point = 51
   Insn 59: point = 51
   Insn 57: point = 52
   Insn 56: point = 54
   Insn 55: point = 56
  BB 5
   Insn 119: point = 57
   Insn 48: point = 57
   Insn 47: point = 57
   Insn 46: point = 58
   Insn 45: point = 60
   Insn 44: point = 61
   Insn 43: point = 61
   Insn 42: point = 62
   Insn 41: point = 63
   Insn 40: point = 65
   Insn 39: point = 67
   Insn 38: point = 69
   Insn 37: point = 71
   Insn 36: point = 72
   Insn 35: point = 74
  BB 6
   Insn 52: point = 75
 r59: [18..19]
 r60: [15..17]
 r61: [7..8]
 r62: [66..72]
 r63: [68..69]
 r64: [66..67]
 r65: [64..65]
 r66: [57..63]
 r67: [59..60]
 r68: [57..58]
 r69: [51..52]
 r70: [42..48]
 r71: [44..45]
 r72: [42..43]
 r73: [40..41]
 r74: [38..39]
 r75: [26..37]
 r76: [30..31]
 r77: [28..29]
 r78: [26..27]
 r79: [3..4]
 r80: [1..2]
 r81: [22..23]
 r82: [20..21]
 r83: [15..16]
 r84: [13..14]
 r85: [73..74]
 r86: [70..71]
 r87: [61..62]
 r88: [53..54]
 r89: [55..56]
 r90: [49..50]
 r91: [46..47]
 r92: [32..36]
 r93: [32..33]
 r94: [34..35]
 r95: [10..12]
 r96: [9..11]
 r97: [5..6]
 r99: [24..25]
 r100: [0..0]
Compressing live ranges: from 75 to 67 - 89%
Ranges after the compression:
 r59: [15..16]
 r60: [13..14]
 r61: [7..8]
 r62: [59..64]
 r63: [61..62]
 r64: [59..60]
 r65: [57..58]
 r66: [51..56]
 r67: [53..54]
 r68: [51..52]
 r69: [45..46]
 r70: [37..42]
 r71: [39..40]
 r72: [37..38]
 r73: [35..36]
 r74: [33..34]
 r75: [23..32]
 r76: [27..28]
 r77: [25..26]
 r78: [23..24]
 r79: [3..4]
 r80: [1..2]
 r81: [19..20]
 r82: [17..18]
 r83: [13..14]
 r84: [11..12]
 r85: [65..66]
 r86: [63..64]
 r87: [55..56]
 r88: [47..48]
 r89: [49..50]
 r90: [43..44]
 r91: [41..42]
 r92: [29..32]
 r93: [29..30]
 r94: [31..32]
 r95: [9..10]
 r96: [9..10]
 r97: [5..6]
 r99: [21..22]
 r100: [0..0]
	 Assigning to 99 (cl=INDEX_REGS, orig=99, freq=1, tfirst=99, tfreq=1)...
	   Assign 0 to reload r99 (freq=1)
	 Assigning to 100 (cl=INDEX_REGS, orig=100, freq=1, tfirst=100, tfreq=1)...
	   Assign 2 to reload r100 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 67	 77
Changing spilled pseudos to memory in insn #45
Changing spilled pseudos to memory in insn #46
Changing spilled pseudos to memory in insn #77
Changing spilled pseudos to memory in insn #78

********** Local #3: **********

Reusing alternative 0 for insn #78
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #77
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 77:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #46
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #45
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 45:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=576, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=544, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 14
changing reg in insn 16
changing reg in insn 89
changing reg in insn 91
changing reg in insn 36
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 57
changing reg in insn 59
changing reg in insn 63
changing reg in insn 67
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 79
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 97
changing reg in insn 100
changing reg in insn 100
changing reg in insn 104
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 22
changing reg in insn 23
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 56
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 4
changing reg in insn 107
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 109.


generate_temporary_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={36d,29u} r1={20d,10u} r2={11d} r3={2d,2u} r4={13d,3u} r5={18d,9u} r6={1d,44u} r7={1d,21u} r8={11d,2u} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={26d,4u} r18={9d} r19={9d} r20={1d,1u} r21={10d,2u} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 610{483d,127u,0e} in 84{75 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 81 82 83 84
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])
        (reg:DI 5 di [ config ])) mSector.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config ])
        (nil)))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.4976+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [99])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:57 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [99])
        (nil)))
(insn 7 4 8 2 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])) mSector.c:59 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [81])
                (const_int 48 [0x30])) [0 config_3(D)->n_tmp_nvp+0 S4 A128])
        (const_int 50000 [0xc350])) mSector.c:59 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])) mSector.c:61 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:59 D.4968 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 48 [0x30])) [0 config_3(D)->n_tmp_nvp+0 S4 A128])) mSector.c:61 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mSector.c:61 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:59 D.4968 ] [59])) mSector.c:61 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4968 ] [59])
        (nil)))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:61 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:60 D.4969 ] [60])
        (reg:DI 0 ax)) mSector.c:61 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])) mSector.c:61 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [83])
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])
        (reg/f:DI 0 ax [orig:60 D.4969 ] [60])) mSector.c:61 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [83])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.4969 ] [60])
            (nil))))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f44d2849980 *.LC3>)) mSector.c:64 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:64 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f44d2849a18 *.LC4>)) mSector.c:67 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f44d2849ab0 *.LC5>)) mSector.c:67 87 {*movdi_internal_rex64}
     (nil))
(call_insn 21 20 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f44d2a89200 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mSector.c:67 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 22 21 23 2 (set (reg:DI 0 ax [84])
        (reg:DI 0 ax)) mSector.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 23 22 24 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [84])) mSector.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mSector.c:68 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) mSector.c:68 612 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 26 25 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f44d2849b48 *.LC6>)) mSector.c:68 87 {*movdi_internal_rex64}
     (nil))
(call_insn 28 27 29 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:68 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 29 28 30 4 30 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 117 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 n+0 S4 A32])
        (const_int 0 [0])) mSector.c:69 89 {*movsi_internal}
     (nil))
(jump_insn 117 31 118 4 (set (pc)
        (label_ref 81)) mSector.c:69 650 {jump}
     (nil)
 -> 81)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 118 117 90)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 85 86 87
(code_label 90 118 34 5 34 "" [1 uses])
(note 34 90 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (set (reg/f:DI 0 ax [orig:62 D.4969 ] [62])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [85])
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 37 36 38 5 (set (reg:SI 1 dx [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 n+0 S4 A32])) mSector.c:70 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 1 dx [orig:63 D.4971 ] [63])
        (sign_extend:DI (reg:SI 1 dx [86]))) mSector.c:70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [86])
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 1 dx [orig:64 D.4971 ] [64])
                (ashift:DI (reg:DI 1 dx [orig:63 D.4971 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.4971 ] [63])
        (nil)))
(insn 40 39 41 5 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.4969 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:62 D.4969 ] [62])
                    (reg:DI 1 dx [orig:64 D.4971 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.4971 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.4969 ] [62])
            (nil))))
(insn 41 40 42 5 (set (reg/f:DI 3 bx [orig:66 D.4972 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.4969 ] [65]) [0 *_12+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.4969 ] [65])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 0 ax [87])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 274 {*adddi_1}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(call_insn/i 44 43 45 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f44d2a12d00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mSector.c:70 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [0 %sfp+-560 S8 A64])
        (reg:DF 21 xmm0)) mSector.c:70 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 46 45 47 5 (set (reg:XF 8 st [orig:68 D.4974 ] [68])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])) [0 %sfp+-560 S8 A64]))) mSector.c:70 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.4973 ])
        (nil)))
(insn 47 46 48 5 (set (mem:XF (reg/f:DI 3 bx [orig:66 D.4972 ] [66]) [0 *_13+0 S16 A128])
        (reg:XF 8 st [orig:68 D.4974 ] [68])) mSector.c:70 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.4974 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:66 D.4972 ] [66])
            (nil))))
(insn 48 47 119 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:71 89 {*movsi_internal}
     (nil))
(jump_insn 119 48 120 5 (set (pc)
        (label_ref 53)) mSector.c:71 650 {jump}
     (nil)
 -> 53)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 58)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 58 120 51 6 33 "" [1 uses])
(note 51 58 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:71 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 88 89
(code_label 53 52 54 7 32 "" [1 uses])
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])) mSector.c:71 89 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg:DI 0 ax [88])
        (sign_extend:DI (reg:SI 0 ax [89]))) mSector.c:71 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [89])
        (nil)))
(insn 57 56 59 7 (set (reg:QI 0 ax [orig:69 D.4975 ] [69])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [88]))
                (const_int -528 [0xfffffffffffffdf0])) [0 c S1 A8])) mSector.c:71 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 59 57 60 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:69 D.4975 ] [69])
            (const_int 9 [0x9]))) mSector.c:71 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:69 D.4975 ] [69])
        (nil)))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) mSector.c:71 612 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 78 90 91 92 93 94
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [0 config+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 0 ax [orig:70 D.4969 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (nil)))
(insn 64 63 65 8 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 n+0 S4 A32])) mSector.c:72 89 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 1 dx [orig:71 D.4971 ] [71])
        (sign_extend:DI (reg:SI 1 dx [91]))) mSector.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [91])
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 1 dx [orig:72 D.4971 ] [72])
                (ashift:DI (reg:DI 1 dx [orig:71 D.4971 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.4971 ] [71])
        (nil)))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.4969 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.4969 ] [70])
                    (reg:DI 1 dx [orig:72 D.4971 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.4971 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4969 ] [70])
            (nil))))
(insn 68 67 69 8 (set (reg/f:DI 0 ax [orig:74 D.4972 ] [74])
        (mem/f:DI (reg/f:DI 0 ax [orig:73 D.4969 ] [73]) [0 *_22+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.4969 ] [73])
        (nil)))
(insn 69 68 70 8 (parallel [
            (set (reg/f:DI 3 bx [orig:75 D.4972 ] [75])
                (plus:DI (reg/f:DI 0 ax [orig:74 D.4972 ] [74])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.4972 ] [74])
        (nil)))
(insn 70 69 71 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 273 {*addsi_1}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg:DI 1 dx [92])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (nil))
(insn 72 71 73 8 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 i+0 S4 A32])) mSector.c:72 89 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:DI 0 ax [93])
        (sign_extend:DI (reg:SI 0 ax [94]))) mSector.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [94])
        (nil)))
(insn 74 73 75 8 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.4970 ] [76])
                (plus:DI (reg:DI 0 ax [93])
                    (reg:DI 1 dx [92])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (expr_list:REG_DEAD (reg:DI 1 dx [92])
            (nil))))
(insn 75 74 76 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:76 D.4970 ] [76])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.4970 ] [76])
        (nil)))
(call_insn/i 76 75 77 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f44d2a12d00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mSector.c:72 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [0 %sfp+-560 S8 A64])
        (reg:DF 21 xmm0)) mSector.c:72 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 78 77 79 8 (set (reg:XF 8 st [orig:78 D.4974 ] [78])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])) [0 %sfp+-560 S8 A64]))) mSector.c:72 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 77 [ D.4973 ])
        (nil)))
(insn 79 78 80 8 (set (mem:XF (reg/f:DI 3 bx [orig:75 D.4972 ] [75]) [0 *_24+0 S16 A128])
        (reg:XF 8 st [orig:78 D.4974 ] [78])) mSector.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.4974 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:75 D.4972 ] [75])
            (nil))))
(insn 80 79 81 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -544 [0xfffffffffffffde0])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -544 [0xfffffffffffffde0])) [0 n+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:69 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 95 96
(code_label 81 80 82 9 31 "" [1 uses])
(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 9 (set (reg:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mSector.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 9 (parallel [
            (set (reg:DI 0 ax [96])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:69 274 {*adddi_1}
     (nil))
(insn 85 84 86 9 (set (reg:DI 1 dx)
        (reg:DI 1 dx [95])) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [95])
        (nil)))
(insn 86 85 87 9 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mSector.c:69 89 {*movsi_internal}
     (nil))
(insn 87 86 88 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(call_insn 88 87 89 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f44d2aa0300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mSector.c:69 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 89 88 91 9 (set (reg/f:DI 0 ax [orig:61 D.4970 ] [61])
        (reg:DI 0 ax)) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 91 89 92 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 D.4970 ] [61])
            (const_int 0 [0]))) mSector.c:69 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.4970 ] [61])
        (nil)))
(jump_insn 92 91 93 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) mSector.c:69 612 {*jcc_1}
     (nil)
 -> 90)
;;  succ:       5
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 97
(note 93 92 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 10 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mSector.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) mSector.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(call_insn 96 95 97 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f44d2a83f00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mSector.c:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 97 96 100 10 (set (reg:SI 0 ax [orig:79 D.4968 ] [79])
        (const_int 1 [0x1])) mSector.c:75 89 {*movsi_internal}
     (nil))
(insn 100 97 104 10 (set (reg:SI 0 ax [orig:80 <retval> ] [80])
        (reg:SI 0 ax [orig:79 D.4968 ] [79])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:79 D.4968 ] [79])
        (nil)))
(insn 104 100 107 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:80 <retval> ] [80])) mSector.c:94 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 <retval> ] [80])
        (nil)))
(insn 107 104 108 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.4976+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [100]))
        ]) mSector.c:94 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 2 cx [100])
        (nil)))
(jump_insn 108 107 115 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) mSector.c:94 612 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 115 108 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 109 115 110 11 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f44d2852000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mSector.c:94 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 110 109 111)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 111 110 116 12 36 "" [1 uses])
(note 116 111 112 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 112 116 0 12 (use (reg/i:SI 0 ax)) mSector.c:94 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function cheak_traj_intersect_bound (cheak_traj_intersect_bound, funcdef_no=6, decl_uid=1874, cgraph_uid=6)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 62:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 72:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
   Insn 122: point = 0
   Insn 119: point = 0
   Insn 115: point = 1
   Insn 112: point = 3
  BB 16
   Insn 110: point = 4
   Insn 109: point = 4
   Insn 108: point = 5
  BB 2
   Insn 125: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 15
   Insn 104: point = 6
  BB 14
   Insn 101: point = 6
   Insn 100: point = 6
  BB 13
   Insn 98: point = 6
   Insn 97: point = 6
  BB 12
   Insn 94: point = 6
   Insn 93: point = 6
  BB 11
   Insn 91: point = 6
   Insn 90: point = 6
  BB 10
   Insn 88: point = 6
   Insn 87: point = 6
   Insn 85: point = 7
   Insn 84: point = 9
   Insn 83: point = 11
   Insn 82: point = 12
   Insn 81: point = 14
   Insn 80: point = 16
   Insn 79: point = 18
   Insn 78: point = 19
   Insn 77: point = 19
   Insn 76: point = 20
   Insn 75: point = 22
  BB 3
   Insn 127: point = 23
   Insn 12: point = 23
   Insn 11: point = 23
  BB 9
   Insn 72: point = 23
  BB 6
   Insn 131: point = 23
   Insn 57: point = 23
  BB 8
   Insn 69: point = 23
   Insn 68: point = 23
   Insn 66: point = 24
   Insn 65: point = 26
  BB 4
   Insn 129: point = 27
   Insn 16: point = 27
  BB 7
   Insn 62: point = 27
  BB 5
   Insn 55: point = 27
   Insn 54: point = 27
   Insn 53: point = 28
   Insn 52: point = 29
   Insn 51: point = 29
   Insn 50: point = 30
   Insn 49: point = 31
   Insn 48: point = 32
   Insn 47: point = 34
   Insn 46: point = 36
   Insn 45: point = 38
   Insn 44: point = 40
   Insn 43: point = 41
   Insn 42: point = 42
   Insn 41: point = 44
   Insn 40: point = 46
   Insn 39: point = 48
   Insn 38: point = 50
   Insn 37: point = 52
   Insn 36: point = 53
   Insn 35: point = 54
   Insn 34: point = 56
   Insn 33: point = 58
   Insn 32: point = 60
   Insn 31: point = 62
   Insn 30: point = 63
   Insn 29: point = 65
   Insn 28: point = 67
   Insn 27: point = 68
   Insn 26: point = 70
   Insn 25: point = 72
   Insn 24: point = 74
   Insn 23: point = 75
   Insn 22: point = 75
   Insn 21: point = 76
   Insn 20: point = 78
 r59: [18..20]
 r60: [10..12]
 r61: [8..9]
 r62: [6..7]
 r63: [25..26]
 r64: [23..24]
 r65: [74..76]
 r66: [66..68]
 r67: [64..65]
 r68: [57..63]
 r69: [59..60]
 r70: [57..58]
 r71: [55..56]
 r72: [31..54]
 r73: [45..53]
 r74: [49..50]
 r75: [47..48]
 r76: [45..46]
 r77: [43..44]
 r78: [30..42]
 r79: [35..41]
 r80: [37..38]
 r81: [35..36]
 r82: [33..34]
 r83: [29..32]
 r84: [27..28]
 r85: [2..3]
 r86: [0..1]
 r87: [77..78]
 r88: [73..75] [69..70]
 r89: [71..72]
 r90: [66..67]
 r91: [61..62]
 r92: [51..52]
 r93: [39..40]
 r94: [21..22]
 r95: [17..19] [13..14]
 r96: [15..16]
 r97: [10..11]
 r98: [4..5]
Compressing live ranges: from 79 to 66 - 83%
Ranges after the compression:
 r59: [16..17]
 r60: [10..11]
 r61: [8..9]
 r62: [6..7]
 r63: [22..23]
 r64: [20..21]
 r65: [62..63]
 r66: [56..57]
 r67: [54..55]
 r68: [48..53]
 r69: [50..51]
 r70: [48..49]
 r71: [46..47]
 r72: [26..45]
 r73: [38..45]
 r74: [42..43]
 r75: [40..41]
 r76: [38..39]
 r77: [36..37]
 r78: [26..35]
 r79: [30..35]
 r80: [32..33]
 r81: [30..31]
 r82: [28..29]
 r83: [26..27]
 r84: [24..25]
 r85: [2..3]
 r86: [0..1]
 r87: [64..65]
 r88: [62..63] [58..59]
 r89: [60..61]
 r90: [56..57]
 r91: [52..53]
 r92: [44..45]
 r93: [34..35]
 r94: [18..19]
 r95: [16..17] [12..13]
 r96: [14..15]
 r97: [10..11]
 r98: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 76
changing reg in insn 79
changing reg in insn 77
changing reg in insn 79
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 21
changing reg in insn 24
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 49
changing reg in insn 36
changing reg in insn 41
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 50
changing reg in insn 43
changing reg in insn 47
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 112
changing reg in insn 115
changing reg in insn 115
changing reg in insn 119
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 24
changing reg in insn 23
changing reg in insn 22
changing reg in insn 27
changing reg in insn 25
changing reg in insn 24
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 37
changing reg in insn 38
changing reg in insn 44
changing reg in insn 45
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 79
changing reg in insn 78
changing reg in insn 77
changing reg in insn 82
changing reg in insn 80
changing reg in insn 79
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 108
changing reg in insn 109
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 101.


cheak_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={35d,33u} r1={13d,11u,4e} r2={9d,5u} r4={8d,5u} r5={7d,4u} r6={1d,47u} r7={1d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={29d,6u} r18={3d} r19={3d} r20={1d,1u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 366{228d,132u,6e} in 82{79 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mSector.c:96 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 125 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:98 89 {*movsi_internal}
     (nil))
(jump_insn 125 7 126 2 (set (pc)
        (label_ref 105)) mSector.c:98 650 {jump}
     (nil)
 -> 105)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 126 125 107)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 107 126 10 3 47 "" [1 uses])
(note 10 107 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:99 89 {*movsi_internal}
     (nil))
(insn 12 11 127 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
        (const_int 0 [0])) mSector.c:99 89 {*movsi_internal}
     (nil))
(jump_insn 127 12 128 3 (set (pc)
        (label_ref 73)) mSector.c:99 650 {jump}
     (nil)
 -> 73)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 128 127 86)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 86 128 15 4 44 "" [1 uses])
(note 15 86 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 129 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (const_int 0 [0])) mSector.c:100 89 {*movsi_internal}
     (nil))
(jump_insn 129 16 130 4 (set (pc)
        (label_ref 63)) mSector.c:100 650 {jump}
     (nil)
 -> 63)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 67)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 87 88 89 90 91 92 93
(code_label 67 130 19 5 43 "" [1 uses])
(note 19 67 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 ax [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:DI 1 dx [orig:65 D.4983 ] [65])
        (sign_extend:DI (reg:SI 0 ax [87]))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [87])
        (nil)))
(insn 22 21 23 5 (set (reg:DI 0 ax [88])
        (reg:DI 1 dx [orig:65 D.4983 ] [65])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg:DI 0 ax [88])
                (ashift:DI (reg:DI 0 ax [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:DI 0 ax [88])
                (plus:DI (reg:DI 0 ax [88])
                    (reg:DI 1 dx [orig:65 D.4983 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.4983 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.4983 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 25 24 26 5 (parallel [
            (set (reg:DI 0 ax [89])
                (ashift:DI (reg:DI 0 ax [88])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 26 25 27 5 (set (reg:DI 0 ax [88])
        (reg:DI 0 ax [89])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 27 26 28 5 (set (reg:DI 1 dx [orig:66 D.4983 ] [66])
        (reg:DI 0 ax [88])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.4984 ] [67])
                (plus:DI (reg/f:DI 0 ax [90])
                    (reg:DI 1 dx [orig:66 D.4983 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.4983 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.4983 ] [66]))
                (nil)))))
(insn 30 29 31 5 (set (reg/f:DI 0 ax [orig:68 D.4986 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:67 D.4984 ] [67])
                (const_int 8 [0x8])) [0 _20->nvp+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.4984 ] [67])
        (nil)))
(insn 31 30 32 5 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:DI 1 dx [orig:69 D.4983 ] [69])
        (sign_extend:DI (reg:SI 1 dx [91]))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [91])
        (nil)))
(insn 33 32 34 5 (parallel [
            (set (reg:DI 1 dx [orig:70 D.4983 ] [70])
                (ashift:DI (reg:DI 1 dx [orig:69 D.4983 ] [69])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4983 ] [69])
        (nil)))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.4986 ] [71])
                (plus:DI (reg/f:DI 0 ax [orig:68 D.4986 ] [68])
                    (reg:DI 1 dx [orig:70 D.4983 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.4983 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.4986 ] [68])
            (nil))))
(insn 35 34 36 5 (set (reg/f:DI 1 dx [orig:72 D.4987 ] [72])
        (mem/f:DI (reg/f:DI 0 ax [orig:71 D.4986 ] [71]) [0 *_24+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4986 ] [71])
        (nil)))
(insn 36 35 37 5 (set (reg/f:DI 0 ax [orig:73 D.4986 ] [73])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 config.bound+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 5 (set (reg:SI 2 cx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 2 cx [orig:74 D.4988 ] [74])
        (sign_extend:DI (reg:SI 2 cx [92]))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [92])
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 2 cx [orig:75 D.4988 ] [75])
                (plus:DI (reg:DI 2 cx [orig:74 D.4988 ] [74])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:74 D.4988 ] [74])
        (nil)))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 2 cx [orig:76 D.4988 ] [76])
                (ashift:DI (reg:DI 2 cx [orig:75 D.4988 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:75 D.4988 ] [75])
        (nil)))
(insn 41 40 42 5 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.4986 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:73 D.4986 ] [73])
                    (reg:DI 2 cx [orig:76 D.4988 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:76 D.4988 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.4986 ] [73])
            (nil))))
(insn 42 41 43 5 (set (reg/f:DI 2 cx [orig:78 D.4987 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.4986 ] [77]) [0 *_30+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.4986 ] [77])
        (nil)))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [orig:79 D.4986 ] [79])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 config.bound+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 5 (set (reg:SI 4 si [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 4 si [orig:80 D.4983 ] [80])
        (sign_extend:DI (reg:SI 4 si [93]))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [93])
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 4 si [orig:81 D.4983 ] [81])
                (ashift:DI (reg:DI 4 si [orig:80 D.4983 ] [80])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:80 D.4983 ] [80])
        (nil)))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.4986 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:79 D.4986 ] [79])
                    (reg:DI 4 si [orig:81 D.4983 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:81 D.4983 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4986 ] [79])
            (nil))))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [orig:83 D.4987 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 D.4986 ] [82]) [0 *_35+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.4986 ] [82])
        (nil)))
(insn 49 48 50 5 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:72 D.4987 ] [72])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:72 D.4987 ] [72])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:78 D.4987 ] [78])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:78 D.4987 ] [78])
        (nil)))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 D.4987 ] [83])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.4987 ] [83])
        (nil)))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:101 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 53 52 54 5 (set (reg:SI 0 ax [orig:84 D.4985 ] [84])
        (reg:SI 0 ax)) mSector.c:101 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 54 53 55 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:84 D.4985 ] [84])
            (const_int 0 [0]))) mSector.c:101 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.4985 ] [84])
        (nil)))
(jump_insn 55 54 56 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) mSector.c:101 612 {*jcc_1}
     (nil)
 -> 60)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 131 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:102 273 {*addsi_1}
     (nil))
(jump_insn 131 57 132 6 (set (pc)
        (label_ref 70)) mSector.c:103 650 {jump}
     (nil)
 -> 70)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 132 131 60)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 60 132 61 7 41 "" [1 uses])
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:100 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64
(code_label 63 62 64 8 40 "" [1 uses])
(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 8 (set (reg:SI 0 ax [orig:63 D.4985 ] [63])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 config.Nbound+0 S4 A128])) mSector.c:100 89 {*movsi_internal}
     (nil))
(insn 66 65 68 8 (parallel [
            (set (reg:SI 0 ax [orig:64 D.4985 ] [64])
                (plus:SI (reg:SI 0 ax [orig:63 D.4985 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:100 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.4985 ] [63])
        (nil)))
(insn 68 66 69 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:64 D.4985 ] [64])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32]))) mSector.c:100 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.4985 ] [64])
        (nil)))
(jump_insn 69 68 70 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:100 612 {*jcc_1}
     (nil)
 -> 67)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 70 69 71 9 42 "" [1 uses])
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 94 95 96 97
(code_label 73 72 74 10 39 "" [1 uses])
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 10 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:99 89 {*movsi_internal}
     (nil))
(insn 76 75 77 10 (set (reg:DI 1 dx [orig:59 D.4983 ] [59])
        (sign_extend:DI (reg:SI 0 ax [94]))) mSector.c:99 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [94])
        (nil)))
(insn 77 76 78 10 (set (reg:DI 0 ax [95])
        (reg:DI 1 dx [orig:59 D.4983 ] [59])) mSector.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 10 (parallel [
            (set (reg:DI 0 ax [95])
                (ashift:DI (reg:DI 0 ax [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 513 {*ashldi3_1}
     (nil))
(insn 79 78 80 10 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg:DI 0 ax [95])
                    (reg:DI 1 dx [orig:59 D.4983 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.4983 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.4983 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 80 79 81 10 (parallel [
            (set (reg:DI 0 ax [96])
                (ashift:DI (reg:DI 0 ax [95])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(insn 81 80 82 10 (set (reg:DI 0 ax [95])
        (reg:DI 0 ax [96])) mSector.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 82 81 83 10 (set (reg:DI 1 dx [orig:60 D.4983 ] [60])
        (reg:DI 0 ax [95])) mSector.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(insn 83 82 84 10 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 10 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.4984 ] [61])
                (plus:DI (reg/f:DI 0 ax [97])
                    (reg:DI 1 dx [orig:60 D.4983 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.4983 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.4983 ] [60]))
                (nil)))))
(insn 85 84 87 10 (set (reg:SI 0 ax [orig:62 D.4985 ] [62])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:61 D.4984 ] [61])
                (const_int 4 [0x4])) [0 _13->n_nvp+0 S4 A32])) mSector.c:99 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.4984 ] [61])
        (nil)))
(insn 87 85 88 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:62 D.4985 ] [62])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32]))) mSector.c:99 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.4985 ] [62])
        (nil)))
(jump_insn 88 87 89 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) mSector.c:99 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       4
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 89 88 90 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:105 7 {*cmpsi_1}
     (nil))
(jump_insn 91 90 92 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) mSector.c:105 612 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f44d2858ab0 *.LC7>)) mSector.c:105 87 {*movdi_internal_rex64}
     (nil))
(call_insn 94 93 95 12 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:105 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 95 94 96 13 45 "" [1 uses])
(note 96 95 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
            (const_int 2 [0x2]))) mSector.c:107 7 {*cmpsi_1}
     (nil))
(jump_insn 98 97 99 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) mSector.c:107 612 {*jcc_1}
     (nil)
 -> 102)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f44d2858b48 *.LC8>)) mSector.c:107 87 {*movdi_internal_rex64}
     (nil))
(call_insn 101 100 102 14 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:107 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 102 101 103 15 46 "" [1 uses])
(note 103 102 104 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:98 273 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98
(code_label 105 104 106 16 38 "" [1 uses])
(note 106 105 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 108 106 109 16 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:98 89 {*movsi_internal}
     (nil))
(insn 109 108 110 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [98])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32]))) mSector.c:98 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [98])
        (nil)))
(jump_insn 110 109 111 16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) mSector.c:98 612 {*jcc_1}
     (nil)
 -> 107)
;;  succ:       3
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 85 86
(note 111 110 112 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 115 17 (set (reg:SI 0 ax [orig:85 D.4985 ] [85])
        (const_int 1 [0x1])) mSector.c:109 89 {*movsi_internal}
     (nil))
(insn 115 112 119 17 (set (reg:SI 0 ax [orig:86 <retval> ] [86])
        (reg:SI 0 ax [orig:85 D.4985 ] [85])) mSector.c:109 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.4985 ] [85])
        (nil)))
(insn 119 115 122 17 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:86 <retval> ] [86])) mSector.c:110 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:86 <retval> ] [86])
        (nil)))
(insn 122 119 0 17 (use (reg/i:SI 0 ax)) mSector.c:110 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function init_traj_intersect_bound (init_traj_intersect_bound, funcdef_no=7, decl_uid=1878, cgraph_uid=7)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 70:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 80:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 90:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 131: point = 0
   Insn 128: point = 0
   Insn 124: point = 1
   Insn 121: point = 3
  BB 13
   Insn 119: point = 4
   Insn 118: point = 4
   Insn 117: point = 5
  BB 2
   Insn 134: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 12
   Insn 113: point = 6
  BB 10
   Insn 106: point = 6
   Insn 105: point = 6
   Insn 104: point = 7
   Insn 103: point = 9
   Insn 102: point = 11
   Insn 101: point = 13
   Insn 100: point = 15
   Insn 99: point = 17
   Insn 98: point = 18
   Insn 97: point = 18
   Insn 96: point = 19
   Insn 95: point = 21
   Insn 94: point = 22
   Insn 93: point = 24
  BB 3
   Insn 136: point = 25
   Insn 12: point = 25
   Insn 11: point = 25
  BB 9
   Insn 90: point = 25
  BB 6
   Insn 140: point = 25
   Insn 75: point = 25
   Insn 74: point = 26
   Insn 73: point = 27
   Insn 72: point = 29
   Insn 71: point = 31
   Insn 70: point = 32
   Insn 69: point = 33
   Insn 68: point = 34
   Insn 67: point = 36
   Insn 66: point = 38
   Insn 65: point = 40
   Insn 64: point = 42
   Insn 63: point = 43
   Insn 62: point = 43
   Insn 61: point = 44
   Insn 60: point = 46
   Insn 59: point = 47
   Insn 58: point = 49
  BB 8
   Insn 87: point = 50
   Insn 86: point = 50
   Insn 84: point = 51
   Insn 83: point = 53
  BB 4
   Insn 138: point = 54
   Insn 16: point = 54
  BB 11
   Insn 110: point = 54
   Insn 109: point = 54
  BB 7
   Insn 80: point = 54
  BB 5
   Insn 56: point = 54
   Insn 55: point = 54
   Insn 54: point = 55
   Insn 53: point = 56
   Insn 52: point = 56
   Insn 51: point = 57
   Insn 50: point = 58
   Insn 49: point = 59
   Insn 48: point = 61
   Insn 47: point = 63
   Insn 46: point = 65
   Insn 45: point = 67
   Insn 44: point = 68
   Insn 43: point = 69
   Insn 42: point = 71
   Insn 41: point = 73
   Insn 40: point = 75
   Insn 39: point = 77
   Insn 38: point = 79
   Insn 37: point = 80
   Insn 36: point = 81
   Insn 35: point = 83
   Insn 34: point = 85
   Insn 33: point = 87
   Insn 32: point = 89
   Insn 31: point = 90
   Insn 30: point = 92
   Insn 29: point = 94
   Insn 28: point = 96
   Insn 27: point = 98
   Insn 26: point = 100
   Insn 25: point = 101
   Insn 24: point = 101
   Insn 23: point = 102
   Insn 22: point = 104
   Insn 21: point = 105
   Insn 20: point = 107
 r59: [10..22]
 r60: [17..19]
 r61: [10..11]
 r62: [8..9]
 r63: [6..7]
 r64: [52..53]
 r65: [50..51]
 r66: [93..105]
 r67: [100..102]
 r68: [93..94]
 r69: [91..92]
 r70: [84..90]
 r71: [86..87]
 r72: [84..85]
 r73: [82..83]
 r74: [58..81]
 r75: [72..80]
 r76: [76..77]
 r77: [74..75]
 r78: [72..73]
 r79: [70..71]
 r80: [57..69]
 r81: [62..68]
 r82: [64..65]
 r83: [62..63]
 r84: [60..61]
 r85: [56..59]
 r86: [54..55]
 r87: [35..47]
 r88: [42..44]
 r89: [35..36]
 r90: [25..34]
 r91: [30..33]
 r92: [2..3]
 r93: [0..1]
 r94: [106..107]
 r95: [103..104]
 r96: [99..101] [95..96]
 r97: [97..98]
 r98: [88..89]
 r99: [78..79]
 r100: [66..67]
 r101: [48..49]
 r102: [45..46]
 r103: [41..43] [37..38]
 r104: [39..40]
 r105: [31..32]
 r106: [28..29]
 r107: [25..27]
 r108: [25..26]
 r109: [23..24]
 r110: [20..21]
 r111: [16..18] [12..13]
 r112: [14..15]
 r113: [4..5]
Compressing live ranges: from 108 to 88 - 81%
Ranges after the compression:
 r59: [10..19]
 r60: [16..17]
 r61: [10..11]
 r62: [8..9]
 r63: [6..7]
 r64: [42..43]
 r65: [40..41]
 r66: [76..85]
 r67: [82..83]
 r68: [76..77]
 r69: [74..75]
 r70: [68..73]
 r71: [70..71]
 r72: [68..69]
 r73: [66..67]
 r74: [46..65]
 r75: [58..65]
 r76: [62..63]
 r77: [60..61]
 r78: [58..59]
 r79: [56..57]
 r80: [46..55]
 r81: [50..55]
 r82: [52..53]
 r83: [50..51]
 r84: [48..49]
 r85: [46..47]
 r86: [44..45]
 r87: [28..37]
 r88: [34..35]
 r89: [28..29]
 r90: [22..27]
 r91: [26..27]
 r92: [2..3]
 r93: [0..1]
 r94: [86..87]
 r95: [84..85]
 r96: [82..83] [78..79]
 r97: [80..81]
 r98: [72..73]
 r99: [64..65]
 r100: [54..55]
 r101: [38..39]
 r102: [36..37]
 r103: [34..35] [30..31]
 r104: [32..33]
 r105: [26..27]
 r106: [24..25]
 r107: [22..23]
 r108: [22..23]
 r109: [20..21]
 r110: [18..19]
 r111: [16..17] [12..13]
 r112: [14..15]
 r113: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 94
changing reg in insn 96
changing reg in insn 99
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 86
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 50
changing reg in insn 37
changing reg in insn 42
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 51
changing reg in insn 44
changing reg in insn 48
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 68
changing reg in insn 61
changing reg in insn 64
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 69
changing reg in insn 72
changing reg in insn 70
changing reg in insn 71
changing reg in insn 121
changing reg in insn 124
changing reg in insn 124
changing reg in insn 128
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 64
changing reg in insn 63
changing reg in insn 62
changing reg in insn 67
changing reg in insn 65
changing reg in insn 64
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 117
changing reg in insn 118
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 53.


init_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={46d,47u,1e} r1={12d,13u,3e} r2={11d,9u} r4={6d,5u} r5={3d,2u} r6={1d,46u} r7={1d,15u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={31d,5u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 307{160d,143u,4e} in 95{94 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 Nfligth+0 S4 A32])
        (reg:SI 4 si [ Nfligth ])) mSector.c:112 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nfligth ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 134 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:115 89 {*movsi_internal}
     (nil))
(jump_insn 134 7 135 2 (set (pc)
        (label_ref 114)) mSector.c:115 650 {jump}
     (nil)
 -> 114)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 135 134 116)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 116 135 10 3 58 "" [1 uses])
(note 10 116 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:116 89 {*movsi_internal}
     (nil))
(insn 12 11 136 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
        (const_int 0 [0])) mSector.c:116 89 {*movsi_internal}
     (nil))
(jump_insn 136 12 137 3 (set (pc)
        (label_ref 91)) mSector.c:116 650 {jump}
     (nil)
 -> 91)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 108)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 108 137 15 4 57 "" [1 uses])
(note 15 108 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 138 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (const_int 0 [0])) mSector.c:117 89 {*movsi_internal}
     (nil))
(jump_insn 138 16 139 4 (set (pc)
        (label_ref 81)) mSector.c:117 650 {jump}
     (nil)
 -> 81)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 139 138 85)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 94 95 96 97 98 99 100
(code_label 85 139 19 5 55 "" [1 uses])
(note 19 85 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 5 (set (reg/f:DI 2 cx [orig:66 D.4991 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [94]) [0 *flight_10(D)+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 22 21 23 5 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 1 dx [orig:67 D.4992 ] [67])
        (sign_extend:DI (reg:SI 0 ax [95]))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 24 23 25 5 (set (reg:DI 0 ax [96])
        (reg:DI 1 dx [orig:67 D.4992 ] [67])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:DI 0 ax [96])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (nil))
(insn 26 25 27 5 (parallel [
            (set (reg:DI 0 ax [96])
                (plus:DI (reg:DI 0 ax [96])
                    (reg:DI 1 dx [orig:67 D.4992 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.4992 ] [67])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:67 D.4992 ] [67])
                (const_int 5 [0x5]))
            (nil))))
(insn 27 26 28 5 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 28 27 29 5 (set (reg:DI 0 ax [96])
        (reg:DI 0 ax [97])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 29 28 30 5 (set (reg:DI 0 ax [orig:68 D.4992 ] [68])
        (reg:DI 0 ax [96])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 30 29 31 5 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.4991 ] [69])
                (plus:DI (reg:DI 0 ax [orig:68 D.4992 ] [68])
                    (reg/f:DI 2 cx [orig:66 D.4991 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:68 D.4992 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:66 D.4991 ] [66])
            (nil))))
(insn 31 30 32 5 (set (reg/f:DI 0 ax [orig:70 D.4994 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:69 D.4991 ] [69])
                (const_int 8 [0x8])) [0 _22->nvp+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.4991 ] [69])
        (nil)))
(insn 32 31 33 5 (set (reg:SI 1 dx [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 1 dx [orig:71 D.4992 ] [71])
        (sign_extend:DI (reg:SI 1 dx [98]))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [98])
        (nil)))
(insn 34 33 35 5 (parallel [
            (set (reg:DI 1 dx [orig:72 D.4992 ] [72])
                (ashift:DI (reg:DI 1 dx [orig:71 D.4992 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.4992 ] [71])
        (nil)))
(insn 35 34 36 5 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.4994 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.4994 ] [70])
                    (reg:DI 1 dx [orig:72 D.4992 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.4992 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.4994 ] [70])
            (nil))))
(insn 36 35 37 5 (set (reg/f:DI 1 dx [orig:74 D.4995 ] [74])
        (mem/f:DI (reg/f:DI 0 ax [orig:73 D.4994 ] [73]) [0 *_26+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.4994 ] [73])
        (nil)))
(insn 37 36 38 5 (set (reg/f:DI 0 ax [orig:75 D.4994 ] [75])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 config.bound+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 5 (set (reg:SI 2 cx [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 2 cx [orig:76 D.4996 ] [76])
        (sign_extend:DI (reg:SI 2 cx [99]))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [99])
        (nil)))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 2 cx [orig:77 D.4996 ] [77])
                (plus:DI (reg:DI 2 cx [orig:76 D.4996 ] [76])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:76 D.4996 ] [76])
        (nil)))
(insn 41 40 42 5 (parallel [
            (set (reg:DI 2 cx [orig:78 D.4996 ] [78])
                (ashift:DI (reg:DI 2 cx [orig:77 D.4996 ] [77])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:77 D.4996 ] [77])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.4994 ] [79])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.4994 ] [75])
                    (reg:DI 2 cx [orig:78 D.4996 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:78 D.4996 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.4994 ] [75])
            (nil))))
(insn 43 42 44 5 (set (reg/f:DI 2 cx [orig:80 D.4995 ] [80])
        (mem/f:DI (reg/f:DI 0 ax [orig:79 D.4994 ] [79]) [0 *_32+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.4994 ] [79])
        (nil)))
(insn 44 43 45 5 (set (reg/f:DI 0 ax [orig:81 D.4994 ] [81])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 config.bound+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:SI 4 si [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 4 si [orig:82 D.4992 ] [82])
        (sign_extend:DI (reg:SI 4 si [100]))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [100])
        (nil)))
(insn 47 46 48 5 (parallel [
            (set (reg:DI 4 si [orig:83 D.4992 ] [83])
                (ashift:DI (reg:DI 4 si [orig:82 D.4992 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:82 D.4992 ] [82])
        (nil)))
(insn 48 47 49 5 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.4994 ] [84])
                (plus:DI (reg/f:DI 0 ax [orig:81 D.4994 ] [81])
                    (reg:DI 4 si [orig:83 D.4992 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:83 D.4992 ] [83])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.4994 ] [81])
            (nil))))
(insn 49 48 50 5 (set (reg/f:DI 0 ax [orig:85 D.4995 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 D.4994 ] [84]) [0 *_37+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.4994 ] [84])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:74 D.4995 ] [74])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:74 D.4995 ] [74])
        (nil)))
(insn 51 50 52 5 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:80 D.4995 ] [80])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:80 D.4995 ] [80])
        (nil)))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 D.4995 ] [85])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.4995 ] [85])
        (nil)))
(call_insn 53 52 54 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:118 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 54 53 55 5 (set (reg:SI 0 ax [orig:86 D.4993 ] [86])
        (reg:SI 0 ax)) mSector.c:118 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 55 54 56 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 D.4993 ] [86])
            (const_int 0 [0]))) mSector.c:118 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:86 D.4993 ] [86])
        (nil)))
(jump_insn 56 55 57 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) mSector.c:118 612 {*jcc_1}
     (nil)
 -> 78)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 101 102 103 104 105 106 107 108
(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:119 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 6 (set (reg/f:DI 2 cx [orig:87 D.4991 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [101]) [0 *flight_10(D)+0 S8 A64])) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (nil)))
(insn 60 59 61 6 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 61 60 62 6 (set (reg:DI 1 dx [orig:88 D.4992 ] [88])
        (sign_extend:DI (reg:SI 0 ax [102]))) mSector.c:119 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [102])
        (nil)))
(insn 62 61 63 6 (set (reg:DI 0 ax [103])
        (reg:DI 1 dx [orig:88 D.4992 ] [88])) mSector.c:119 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 6 (parallel [
            (set (reg:DI 0 ax [103])
                (ashift:DI (reg:DI 0 ax [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 513 {*ashldi3_1}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 0 ax [103])
                (plus:DI (reg:DI 0 ax [103])
                    (reg:DI 1 dx [orig:88 D.4992 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.4992 ] [88])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.4992 ] [88])
                (const_int 5 [0x5]))
            (nil))))
(insn 65 64 66 6 (parallel [
            (set (reg:DI 0 ax [104])
                (ashift:DI (reg:DI 0 ax [103])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 66 65 67 6 (set (reg:DI 0 ax [103])
        (reg:DI 0 ax [104])) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 67 66 68 6 (set (reg:DI 0 ax [orig:89 D.4992 ] [89])
        (reg:DI 0 ax [103])) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 68 67 69 6 (parallel [
            (set (reg/f:DI 2 cx [orig:90 D.4991 ] [90])
                (plus:DI (reg/f:DI 2 cx [orig:87 D.4991 ] [87])
                    (reg:DI 0 ax [orig:89 D.4992 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.4992 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:87 D.4991 ] [87])
            (nil))))
(insn 69 68 70 6 (set (reg:SI 0 ax [orig:91 c.0 ] [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 70 69 71 6 (parallel [
            (set (reg:SI 1 dx [105])
                (plus:SI (reg:SI 0 ax [orig:91 c.0 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 273 {*addsi_1}
     (nil))
(insn 71 70 72 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
        (reg:SI 1 dx [105])) mSector.c:119 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [105])
        (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:91 c.0 ] [91])
                (const_int 1 [0x1]))
            (nil))))
(insn 72 71 73 6 (set (reg:DI 0 ax [106])
        (sign_extend:DI (reg:SI 0 ax [orig:91 c.0 ] [91]))) mSector.c:119 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:91 c.0 ] [91])
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 1 dx [107])
                (plus:DI (reg:DI 0 ax [106])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 74 73 75 6 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 75 74 140 6 (set (mem/j:SI (plus:DI (mult:DI (reg:DI 1 dx [107])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [orig:90 D.4991 ] [90])) [0 _43->bound S4 A32])
        (reg:SI 0 ax [108])) mSector.c:119 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [108])
        (expr_list:REG_DEAD (reg:DI 1 dx [107])
            (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:90 D.4991 ] [90])
                (nil)))))
(jump_insn 140 75 141 6 (set (pc)
        (label_ref 88)) mSector.c:120 650 {jump}
     (nil)
 -> 88)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 141 140 78)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 78 141 79 7 53 "" [1 uses])
(note 79 78 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:117 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65
(code_label 81 80 82 8 52 "" [1 uses])
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 8 (set (reg:SI 0 ax [orig:64 D.4993 ] [64])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 config.Nbound+0 S4 A128])) mSector.c:117 89 {*movsi_internal}
     (nil))
(insn 84 83 86 8 (parallel [
            (set (reg:SI 0 ax [orig:65 D.4993 ] [65])
                (plus:SI (reg:SI 0 ax [orig:64 D.4993 ] [64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:117 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.4993 ] [64])
        (nil)))
(insn 86 84 87 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:65 D.4993 ] [65])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32]))) mSector.c:117 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.4993 ] [65])
        (nil)))
(jump_insn 87 86 88 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) mSector.c:117 612 {*jcc_1}
     (nil)
 -> 85)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 88 87 89 9 54 "" [1 uses])
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 109 110 111 112
(code_label 91 90 92 10 51 "" [1 uses])
(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 10 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 94 93 95 10 (set (reg/f:DI 2 cx [orig:59 D.4991 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [109]) [0 *flight_10(D)+0 S8 A64])) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 95 94 96 10 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:116 89 {*movsi_internal}
     (nil))
(insn 96 95 97 10 (set (reg:DI 1 dx [orig:60 D.4992 ] [60])
        (sign_extend:DI (reg:SI 0 ax [110]))) mSector.c:116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [110])
        (nil)))
(insn 97 96 98 10 (set (reg:DI 0 ax [111])
        (reg:DI 1 dx [orig:60 D.4992 ] [60])) mSector.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 10 (parallel [
            (set (reg:DI 0 ax [111])
                (ashift:DI (reg:DI 0 ax [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 513 {*ashldi3_1}
     (nil))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 0 ax [111])
                (plus:DI (reg:DI 0 ax [111])
                    (reg:DI 1 dx [orig:60 D.4992 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.4992 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.4992 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 100 99 101 10 (parallel [
            (set (reg:DI 0 ax [112])
                (ashift:DI (reg:DI 0 ax [111])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 101 100 102 10 (set (reg:DI 0 ax [111])
        (reg:DI 0 ax [112])) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 102 101 103 10 (set (reg:DI 0 ax [orig:61 D.4992 ] [61])
        (reg:DI 0 ax [111])) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 103 102 104 10 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.4991 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.4992 ] [61])
                    (reg/f:DI 2 cx [orig:59 D.4991 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.4992 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.4991 ] [59])
            (nil))))
(insn 104 103 105 10 (set (reg:SI 0 ax [orig:63 D.4993 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:62 D.4991 ] [62])
                (const_int 4 [0x4])) [0 _14->n_nvp+0 S4 A32])) mSector.c:116 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.4991 ] [62])
        (nil)))
(insn 105 104 106 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:63 D.4993 ] [63])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32]))) mSector.c:116 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.4993 ] [63])
        (nil)))
(jump_insn 106 105 107 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) mSector.c:116 612 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 107 106 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 109 107 110 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:116 7 {*cmpsi_1}
     (nil))
(jump_insn 110 109 111 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) mSector.c:116 612 {*jcc_1}
     (nil)
 -> 108)
;;  succ:       4
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 111 110 112 12 56 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:115 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113
(code_label 114 113 115 13 50 "" [1 uses])
(note 115 114 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 115 118 13 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:115 89 {*movsi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 Nfligth+0 S4 A32]))) mSector.c:115 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [113])
        (nil)))
(jump_insn 119 118 120 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) mSector.c:115 612 {*jcc_1}
     (nil)
 -> 116)
;;  succ:       3
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(note 120 119 121 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 124 14 (set (reg:SI 0 ax [orig:92 D.4993 ] [92])
        (const_int 1 [0x1])) mSector.c:122 89 {*movsi_internal}
     (nil))
(insn 124 121 128 14 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:92 D.4993 ] [92])) mSector.c:122 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:92 D.4993 ] [92])
        (nil)))
(insn 128 124 131 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) mSector.c:123 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 <retval> ] [93])
        (nil)))
(insn 131 128 0 14 (use (reg/i:SI 0 ax)) mSector.c:123 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function remove_aircraft (remove_aircraft, funcdef_no=8, decl_uid=1904, cgraph_uid=8)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 39:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 64:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=100 from oldreg=90, assigning class DIREG to r100
      Creating newreg=101 from oldreg=92, assigning class CREG to r101
   64: {r101:DI=0;r100:DI=r101:DI<<0x3+r100:DI;r91:DI=r101:DI<<0x3+r91:DI;[r100:DI]=[r91:DI];use r101:DI;}
      REG_UNUSED r92:DI
      REG_UNUSED r91:DI
      REG_UNUSED r90:DI
    Inserting insn reload before:
  103: r100:DI=r90:DI
  104: r101:DI=r92:DI

          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 67:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 98: point = 0
   Insn 95: point = 0
   Insn 91: point = 1
   Insn 88: point = 3
   Insn 87: point = 4
   Insn 86: point = 5
   Insn 85: point = 6
   Insn 84: point = 8
   Insn 83: point = 10
   Insn 82: point = 11
   Insn 81: point = 12
   Insn 80: point = 13
   Insn 79: point = 14
   Insn 78: point = 14
   Insn 77: point = 15
   Insn 76: point = 17
  BB 8
   Insn 74: point = 18
   Insn 73: point = 18
   Insn 71: point = 19
   Insn 70: point = 21
  BB 4
   Insn 101: point = 22
   Insn 30: point = 22
   Insn 29: point = 22
  BB 3
   Insn 26: point = 22
   Insn 25: point = 22
  BB 2
   Insn 23: point = 22
   Insn 22: point = 22
   Insn 21: point = 22
   Insn 20: point = 23
   Insn 19: point = 24
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 27
   Insn 15: point = 29
   Insn 14: point = 31
   Insn 13: point = 32
   Insn 12: point = 32
   Insn 11: point = 33
   Insn 10: point = 35
   Insn 9: point = 37
   Insn 8: point = 39
   Insn 4: point = 40
   Insn 3: point = 40
   Insn 2: point = 40
  BB 7
   Insn 67: point = 40
  BB 6
   Insn 64: point = 40
   Insn 104: point = 41
	Hard reg 0 is preferable by r101 with profit 1
   Insn 103: point = 43
	Hard reg 1 is preferable by r100 with profit 1
   Insn 63: point = 45
   Insn 62: point = 46
   Insn 61: point = 48
   Insn 60: point = 50
   Insn 59: point = 52
   Insn 58: point = 54
   Insn 57: point = 56
   Insn 56: point = 58
   Insn 55: point = 59
   Insn 54: point = 59
   Insn 53: point = 60
   Insn 52: point = 62
   Insn 51: point = 63
   Insn 50: point = 65
   Insn 49: point = 66
   Insn 48: point = 68
   Insn 47: point = 69
   Insn 46: point = 71
   Insn 45: point = 73
   Insn 44: point = 75
   Insn 43: point = 76
   Insn 42: point = 76
   Insn 41: point = 77
   Insn 40: point = 79
   Insn 39: point = 80
   Insn 38: point = 81
  BB 5
   Insn 36: point = 82
   Insn 35: point = 82
   Insn 34: point = 83
 r59: [36..37]
 r60: [34..35]
 r61: [31..33]
 r62: [24..25]
 r63: [18..19]
 r64: [78..81]
 r65: [75..77]
 r66: [67..69]
 r67: [49..66]
 r68: [51..63]
 r69: [58..60]
 r70: [51..52]
 r71: [47..50]
 r72: [14..15]
 r73: [7..8]
 r74: [4..6]
 r75: [2..3]
 r76: [0..1]
 r77: [38..39]
 r78: [30..32] [26..27]
 r79: [28..29]
 r80: [22..23]
 r81: [82..83]
 r82: [79..80]
 r83: [74..76] [70..71]
 r84: [72..73]
 r85: [67..68]
 r86: [64..65]
 r87: [61..62]
 r88: [57..59] [53..54]
 r89: [55..56]
 r90: [44..48]
 r91: [40..46]
 r92: [42..45]
 r93: [20..21]
 r94: [16..17]
 r95: [11..13]
 r96: [11..12]
 r97: [9..10]
 r98: [4..5]
 r100: [40..43]
 r101: [40..41]
Compressing live ranges: from 84 to 70 - 83%
Ranges after the compression:
 r59: [32..33]
 r60: [30..31]
 r61: [28..29]
 r62: [22..23]
 r63: [16..17]
 r64: [66..67]
 r65: [64..65]
 r66: [58..59]
 r67: [44..57]
 r68: [46..55]
 r69: [52..53]
 r70: [46..47]
 r71: [42..45]
 r72: [12..13]
 r73: [6..7]
 r74: [4..5]
 r75: [2..3]
 r76: [0..1]
 r77: [34..35]
 r78: [28..29] [24..25]
 r79: [26..27]
 r80: [20..21]
 r81: [68..69]
 r82: [66..67]
 r83: [64..65] [60..61]
 r84: [62..63]
 r85: [58..59]
 r86: [56..57]
 r87: [54..55]
 r88: [52..53] [48..49]
 r89: [50..51]
 r90: [40..43]
 r91: [36..41]
 r92: [38..41]
 r93: [18..19]
 r94: [14..15]
 r95: [10..11]
 r96: [10..11]
 r97: [8..9]
 r98: [4..5]
 r100: [36..39]
 r101: [36..37]
	 Assigning to 100 (cl=DIREG, orig=90, freq=2, tfirst=100, tfreq=2)...
	   Assign 5 to reload r100 (freq=2)
	 Assigning to 101 (cl=CREG, orig=92, freq=2, tfirst=101, tfreq=2)...
	   Assign 2 to reload r101 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 71
changing reg in insn 73
changing reg in insn 38
changing reg in insn 41
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 49
changing reg in insn 61
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 77
changing reg in insn 78
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 14
changing reg in insn 13
changing reg in insn 12
changing reg in insn 17
changing reg in insn 15
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 59
changing reg in insn 57
changing reg in insn 56
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 61
changing reg in insn 64
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 63
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 79.


remove_aircraft

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={43d,42u,1e} r1={12d,12u,4e} r2={7d,4u} r4={7d,4u} r5={9d,6u} r6={1d,33u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={21d,3u} r18={3d} r19={3d} r20={1d,1u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 349{226d,117u,6e} in 77{74 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 77 78 79 80
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])
        (reg:DI 5 di [ fligth ])) mSector.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ fligth ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])
        (reg:DI 4 si [ Nfligth ])) mSector.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nfligth ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 sel+0 S4 A32])
        (reg:SI 1 dx [ sel ])) mSector.c:125 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ sel ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:59 D.4997 ] [59])
        (mem:SI (reg/f:DI 0 ax [77]) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:126 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [orig:60 D.4997 ] [60])
                (plus:SI (reg:SI 0 ax [orig:59 D.4997 ] [59])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.4997 ] [59])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 1 dx [orig:61 D.4998 ] [61])
        (sign_extend:DI (reg:SI 0 ax [orig:60 D.4997 ] [60]))) mSector.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.4997 ] [60])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 0 ax [78])
        (reg:DI 1 dx [orig:61 D.4998 ] [61])) mSector.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [78])
                (ashift:DI (reg:DI 0 ax [78])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 513 {*ashldi3_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 0 ax [78])
                (plus:DI (reg:DI 0 ax [78])
                    (reg:DI 1 dx [orig:61 D.4998 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.4998 ] [61])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:61 D.4998 ] [61])
                (const_int 5 [0x5]))
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 0 ax [79])
                (ashift:DI (reg:DI 0 ax [78])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 0 ax [78])
        (reg:DI 0 ax [79])) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [79])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 0 ax [orig:62 D.4998 ] [62])
        (reg:DI 0 ax [78])) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:62 D.4998 ] [62])) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.4998 ] [62])
        (nil)))
(call_insn 19 18 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f44d2970b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mSector.c:126 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [80])
        (reg:DI 0 ax)) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [80])
            (nil))))
(insn 21 20 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
        (reg/f:DI 0 ax [80])) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
            (const_int 0 [0]))) mSector.c:127 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) mSector.c:127 612 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f44d286ced8 *.LC9>)) mSector.c:127 87 {*movdi_internal_rex64}
     (nil))
(call_insn 26 25 27 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:127 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 27 26 28 4 61 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 30 29 101 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (const_int 0 [0])) mSector.c:129 89 {*movsi_internal}
     (nil))
(jump_insn 101 30 102 4 (set (pc)
        (label_ref 68)) mSector.c:129 650 {jump}
     (nil)
 -> 68)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 72)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81
(code_label 72 102 33 5 64 "" [1 uses])
(note 33 72 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg:SI 0 ax [81])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [81])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 sel+0 S4 A32]))) mSector.c:129 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [81])
        (nil)))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) mSector.c:129 612 {*jcc_1}
     (nil)
 -> 65)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 82 83 84 85 86 87 88 89 90 91 92
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:SI 0 ax [orig:64 h.1 ] [64])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg:SI 1 dx [82])
                (plus:SI (reg:SI 0 ax [orig:64 h.1 ] [64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 273 {*addsi_1}
     (nil))
(insn 40 39 41 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (reg:SI 1 dx [82])) mSector.c:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [82])
        (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:64 h.1 ] [64])
                (const_int 1 [0x1]))
            (nil))))
(insn 41 40 42 6 (set (reg:DI 1 dx [orig:65 D.4998 ] [65])
        (sign_extend:DI (reg:SI 0 ax [orig:64 h.1 ] [64]))) mSector.c:129 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 h.1 ] [64])
        (nil)))
(insn 42 41 43 6 (set (reg:DI 0 ax [83])
        (reg:DI 1 dx [orig:65 D.4998 ] [65])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 0 ax [83])
                (ashift:DI (reg:DI 0 ax [83])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 0 ax [83])
                (plus:DI (reg:DI 0 ax [83])
                    (reg:DI 1 dx [orig:65 D.4998 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.4998 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.4998 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 0 ax [84])
                (ashift:DI (reg:DI 0 ax [83])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 46 45 47 6 (set (reg:DI 0 ax [83])
        (reg:DI 0 ax [84])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(insn 47 46 48 6 (set (reg:DI 1 dx [orig:66 D.4998 ] [66])
        (reg:DI 0 ax [83])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 48 47 49 6 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg/f:DI 4 si [orig:67 D.4999 ] [67])
                (plus:DI (reg:DI 1 dx [orig:66 D.4998 ] [66])
                    (reg/f:DI 0 ax [85])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.4998 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.4998 ] [66]))
                (nil)))))
(insn 50 49 51 6 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 6 (set (reg/f:DI 2 cx [orig:68 D.4999 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [86]) [0 *fligth_19(D)+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [86])
        (nil)))
(insn 52 51 53 6 (set (reg:SI 0 ax [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 1 dx [orig:69 D.4998 ] [69])
        (sign_extend:DI (reg:SI 0 ax [87]))) mSector.c:129 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [87])
        (nil)))
(insn 54 53 55 6 (set (reg:DI 0 ax [88])
        (reg:DI 1 dx [orig:69 D.4998 ] [69])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 0 ax [88])
                (ashift:DI (reg:DI 0 ax [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 0 ax [88])
                (plus:DI (reg:DI 0 ax [88])
                    (reg:DI 1 dx [orig:69 D.4998 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.4998 ] [69])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:69 D.4998 ] [69])
                (const_int 5 [0x5]))
            (nil))))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 0 ax [89])
                (ashift:DI (reg:DI 0 ax [88])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 58 57 59 6 (set (reg:DI 0 ax [88])
        (reg:DI 0 ax [89])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 59 58 60 6 (set (reg:DI 0 ax [orig:70 D.4998 ] [70])
        (reg:DI 0 ax [88])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 60 59 61 6 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.4999 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.4998 ] [70])
                    (reg/f:DI 2 cx [orig:68 D.4999 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.4998 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:68 D.4999 ] [68])
            (nil))))
(insn 61 60 62 6 (set (reg:DI 1 dx [90])
        (reg/f:DI 4 si [orig:67 D.4999 ] [67])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:67 D.4999 ] [67])
        (nil)))
(insn 62 61 63 6 (set (reg:DI 4 si [91])
        (reg/f:DI 0 ax [orig:71 D.4999 ] [71])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.4999 ] [71])
        (nil)))
(insn 63 62 103 6 (set (reg:DI 0 ax [92])
        (const_int 20 [0x14])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 103 63 104 6 (set (reg:DI 5 di [90])
        (reg:DI 1 dx [90])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [90])
        (nil)))
(insn 104 103 64 6 (set (reg:DI 2 cx [92])
        (reg:DI 0 ax [92])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 64 104 65 6 (parallel [
            (set (reg:DI 2 cx [92])
                (const_int 0 [0]))
            (set (reg:DI 5 di [90])
                (plus:DI (ashift:DI (reg:DI 2 cx [92])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [90])))
            (set (reg:DI 4 si [91])
                (plus:DI (ashift:DI (reg:DI 2 cx [92])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [91])))
            (set (mem:BLK (reg:DI 5 di [90]) [0 *_18+0 S160 A128])
                (mem:BLK (reg:DI 4 si [91]) [0 *_23+0 S160 A128]))
            (use (reg:DI 2 cx [92]))
        ]) mSector.c:129 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [92])
        (expr_list:REG_UNUSED (reg:DI 5 di [90])
            (expr_list:REG_UNUSED (reg:DI 4 si [91])
                (nil)))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 65 64 66 7 63 "" [1 uses])
(note 66 65 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 93
(code_label 68 67 69 8 62 "" [1 uses])
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 8 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 73 8 (set (reg:SI 0 ax [orig:63 D.4997 ] [63])
        (mem:SI (reg/f:DI 0 ax [93]) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (nil)))
(insn 73 71 74 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:63 D.4997 ] [63])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) mSector.c:129 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.4997 ] [63])
        (nil)))
(jump_insn 74 73 75 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) mSector.c:129 612 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 75 76 94 95 96 97 98
(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 9 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:130 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 9 (set (reg/f:DI 0 ax [orig:72 D.4999 ] [72])
        (mem/f:DI (reg/f:DI 0 ax [94]) [0 *fligth_19(D)+0 S8 A64])) mSector.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 78 77 79 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:72 D.4999 ] [72])) mSector.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.4999 ] [72])
        (nil)))
(call_insn 79 78 80 9 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:130 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 80 79 81 9 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 9 (set (reg/f:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])) mSector.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 9 (set (mem/f:DI (reg/f:DI 0 ax [95]) [0 *fligth_19(D)+0 S8 A64])
        (reg/f:DI 1 dx [96])) mSector.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [96])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
            (nil))))
(insn 83 82 84 9 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 9 (set (reg:SI 0 ax [orig:73 D.4997 ] [73])
        (mem:SI (reg/f:DI 0 ax [97]) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:133 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (nil)))
(insn 85 84 86 9 (parallel [
            (set (reg:SI 1 dx [orig:74 D.4997 ] [74])
                (plus:SI (reg:SI 0 ax [orig:73 D.4997 ] [73])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:133 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 D.4997 ] [73])
        (nil)))
(insn 86 85 87 9 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 9 (set (mem:SI (reg/f:DI 0 ax [98]) [0 *Nfligth_4(D)+0 S4 A32])
        (reg:SI 1 dx [orig:74 D.4997 ] [74])) mSector.c:133 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:74 D.4997 ] [74])
            (nil))))
(insn 88 87 91 9 (set (reg:SI 0 ax [orig:75 D.4997 ] [75])
        (const_int 1 [0x1])) mSector.c:135 89 {*movsi_internal}
     (nil))
(insn 91 88 95 9 (set (reg:SI 0 ax [orig:76 <retval> ] [76])
        (reg:SI 0 ax [orig:75 D.4997 ] [75])) mSector.c:135 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:75 D.4997 ] [75])
        (nil)))
(insn 95 91 98 9 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:76 <retval> ] [76])) mSector.c:136 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:76 <retval> ] [76])
        (nil)))
(insn 98 95 0 9 (use (reg/i:SI 0 ax)) mSector.c:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function add_nvp (add_nvp, funcdef_no=9, decl_uid=1886, cgraph_uid=9)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=218 from oldreg=76, assigning class GENERAL_REGS to r218
   52: {r218:DI=r218:DI<<0x4;clobber flags:CC;}
      REG_DEAD r75:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  253: r218:DI=r75:DI
    Inserting insn reload after:
  254: r76:DI=r218:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 63:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=219 from oldreg=112, assigning class GENERAL_REGS to r219
  125: {r219:DI=r219:DI<<0x4;clobber flags:CC;}
      REG_DEAD r111:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  255: r219:DI=r111:DI
    Inserting insn reload after:
  256: r112:DI=r219:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=220 from oldreg=135, assigning class GENERAL_REGS to r220
  167: {r220:DI=r220:DI<<0x4;clobber flags:CC;}
      REG_DEAD r134:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  257: r220:DI=r134:DI
    Inserting insn reload after:
  258: r135:DI=r220:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 178:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 226:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 228:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 246: point = 0
   Insn 243: point = 0
   Insn 239: point = 1
   Insn 236: point = 3
   Insn 235: point = 4
   Insn 234: point = 5
   Insn 233: point = 6
   Insn 232: point = 8
   Insn 231: point = 10
   Insn 230: point = 11
   Insn 229: point = 12
   Insn 228: point = 13
   Insn 227: point = 15
   Insn 226: point = 17
   Insn 225: point = 18
   Insn 224: point = 19
   Insn 223: point = 20
   Insn 222: point = 21
   Insn 221: point = 22
   Insn 220: point = 23
   Insn 219: point = 24
   Insn 218: point = 24
   Insn 217: point = 25
   Insn 216: point = 27
   Insn 215: point = 28
   Insn 214: point = 28
   Insn 213: point = 29
   Insn 212: point = 31
   Insn 211: point = 32
   Insn 210: point = 33
   Insn 209: point = 35
   Insn 208: point = 37
   Insn 207: point = 39
   Insn 206: point = 41
   Insn 205: point = 42
   Insn 204: point = 44
   Insn 203: point = 45
   Insn 202: point = 47
   Insn 201: point = 48
   Insn 200: point = 50
   Insn 199: point = 52
   Insn 198: point = 54
  BB 15
   Insn 195: point = 55
   Insn 194: point = 55
  BB 14
   Insn 192: point = 55
   Insn 191: point = 55
   Insn 190: point = 56
   Insn 189: point = 58
   Insn 188: point = 60
  BB 13
   Insn 186: point = 61
   Insn 185: point = 61
   Insn 183: point = 62
   Insn 182: point = 64
   Insn 181: point = 66
  BB 9
   Insn 251: point = 67
   Insn 136: point = 67
   Insn 135: point = 68
   Insn 134: point = 70
   Insn 133: point = 72
   Insn 132: point = 74
   Insn 131: point = 76
   Insn 130: point = 78
   Insn 129: point = 79
   Insn 128: point = 81
   Insn 127: point = 82
   Insn 126: point = 84
   Insn 256: point = 85
	Hard reg 1 is preferable by r219 with profit 1
   Insn 125: point = 87
   Insn 255: point = 87
	Hard reg 1 is preferable by r219 with profit 1
	Hard reg 0 is preferable by r219 with profit 1
   Insn 124: point = 89
   Insn 123: point = 91
   Insn 122: point = 92
   Insn 121: point = 93
   Insn 120: point = 95
   Insn 119: point = 97
   Insn 118: point = 99
   Insn 117: point = 100
   Insn 116: point = 102
   Insn 115: point = 104
   Insn 114: point = 106
   Insn 113: point = 107
   Insn 112: point = 109
   Insn 111: point = 111
   Insn 110: point = 113
   Insn 109: point = 114
   Insn 108: point = 116
   Insn 107: point = 118
   Insn 106: point = 119
   Insn 105: point = 120
   Insn 104: point = 122
   Insn 103: point = 124
   Insn 102: point = 126
   Insn 101: point = 127
   Insn 100: point = 129
   Insn 99: point = 131
   Insn 98: point = 133
   Insn 97: point = 134
   Insn 96: point = 136
   Insn 95: point = 138
   Insn 94: point = 140
   Insn 93: point = 141
   Insn 92: point = 143
   Insn 91: point = 145
   Insn 90: point = 146
   Insn 89: point = 147
   Insn 88: point = 148
   Insn 87: point = 150
   Insn 86: point = 151
   Insn 85: point = 153
   Insn 84: point = 155
  BB 8
   Insn 81: point = 156
   Insn 80: point = 156
  BB 7
   Insn 78: point = 156
   Insn 77: point = 156
   Insn 76: point = 157
   Insn 75: point = 159
   Insn 74: point = 161
   Insn 73: point = 162
   Insn 72: point = 164
  BB 6
   Insn 70: point = 165
   Insn 69: point = 165
   Insn 67: point = 166
   Insn 66: point = 168
  BB 2
   Insn 249: point = 169
   Insn 23: point = 169
   Insn 22: point = 169
   Insn 21: point = 170
   Insn 20: point = 171
   Insn 19: point = 171
   Insn 18: point = 172
   Insn 17: point = 174
   Insn 16: point = 175
   Insn 15: point = 176
   Insn 14: point = 177
   Insn 13: point = 177
   Insn 12: point = 178
   Insn 11: point = 180
   Insn 10: point = 182
   Insn 9: point = 184
   Insn 8: point = 186
   Insn 4: point = 187
   Insn 3: point = 187
   Insn 2: point = 187
  BB 5
   Insn 63: point = 187
   Insn 62: point = 187
   Insn 61: point = 188
   Insn 60: point = 190
   Insn 59: point = 192
   Insn 58: point = 194
   Insn 57: point = 196
   Insn 56: point = 197
   Insn 55: point = 199
   Insn 54: point = 200
   Insn 53: point = 202
   Insn 254: point = 203
	Hard reg 1 is preferable by r218 with profit 1
   Insn 52: point = 205
   Insn 253: point = 205
	Hard reg 1 is preferable by r218 with profit 1
	Hard reg 0 is preferable by r218 with profit 1
   Insn 51: point = 207
   Insn 50: point = 209
   Insn 49: point = 210
   Insn 48: point = 211
   Insn 47: point = 213
   Insn 46: point = 215
   Insn 45: point = 217
   Insn 44: point = 219
   Insn 43: point = 220
   Insn 42: point = 222
   Insn 41: point = 223
   Insn 40: point = 225
   Insn 39: point = 226
   Insn 38: point = 228
   Insn 37: point = 230
  BB 4
   Insn 34: point = 231
   Insn 33: point = 231
  BB 3
   Insn 31: point = 231
   Insn 30: point = 231
   Insn 29: point = 232
   Insn 28: point = 234
   Insn 27: point = 236
  BB 12
   Insn 178: point = 237
   Insn 177: point = 237
   Insn 176: point = 238
   Insn 175: point = 240
   Insn 174: point = 242
   Insn 173: point = 244
   Insn 172: point = 246
   Insn 171: point = 247
   Insn 170: point = 249
   Insn 169: point = 250
   Insn 168: point = 252
   Insn 258: point = 253
	Hard reg 1 is preferable by r220 with profit 1
   Insn 167: point = 255
   Insn 257: point = 255
	Hard reg 1 is preferable by r220 with profit 1
	Hard reg 0 is preferable by r220 with profit 1
   Insn 166: point = 257
   Insn 165: point = 259
   Insn 164: point = 261
   Insn 163: point = 262
   Insn 162: point = 263
   Insn 161: point = 265
   Insn 160: point = 267
   Insn 159: point = 269
   Insn 158: point = 271
   Insn 157: point = 272
   Insn 156: point = 274
   Insn 155: point = 275
   Insn 154: point = 277
   Insn 153: point = 278
   Insn 152: point = 280
   Insn 151: point = 282
   Insn 150: point = 284
  BB 11
   Insn 147: point = 285
   Insn 146: point = 285
  BB 10
   Insn 144: point = 285
   Insn 143: point = 285
   Insn 142: point = 286
   Insn 141: point = 288
   Insn 140: point = 290
 r59: [183..184]
 r60: [181..182]
 r61: [179..180]
 r62: [177..178]
 r63: [171..172]
 r64: [165..166]
 r65: [233..234]
 r66: [231..232]
 r67: [227..228]
 r68: [224..226]
 r69: [210..223]
 r70: [214..220]
 r71: [216..217]
 r72: [214..215]
 r73: [212..213]
 r74: [210..211]
 r75: [206..207]
 r76: [201..203]
 r77: [187..200]
 r78: [191..197]
 r79: [193..194]
 r80: [191..192]
 r81: [189..190]
 r82: [187..188]
 r83: [156..162]
 r84: [158..159]
 r85: [156..157]
 r86: [152..153]
 r87: [149..151]
 r88: [146..148]
 r89: [142..143]
 r90: [139..141]
 r91: [137..138]
 r92: [135..136]
 r93: [119..134]
 r94: [130..131]
 r95: [128..129]
 r96: [125..127]
 r97: [123..124]
 r98: [121..122]
 r99: [119..120]
 r100: [115..116]
 r101: [112..114]
 r102: [110..111]
 r103: [108..109]
 r104: [92..107]
 r105: [103..104]
 r106: [101..102]
 r107: [98..100]
 r108: [96..97]
 r109: [94..95]
 r110: [92..93]
 r111: [88..89]
 r112: [83..85]
 r113: [67..82]
 r114: [71..79]
 r115: [75..76]
 r116: [73..74]
 r117: [71..72]
 r118: [69..70]
 r119: [67..68]
 r120: [63..64]
 r121: [61..62]
 r122: [287..288]
 r123: [285..286]
 r124: [281..282]
 r125: [279..280]
 r126: [276..278]
 r127: [262..275]
 r128: [266..272]
 r129: [268..269]
 r130: [266..267]
 r131: [264..265]
 r132: [262..263]
 r133: [258..259]
 r134: [256..257]
 r135: [251..253]
 r136: [237..250]
 r137: [241..247]
 r138: [243..244]
 r139: [241..242]
 r140: [239..240]
 r141: [237..238]
 r142: [57..58]
 r143: [55..56]
 r144: [51..52]
 r145: [49..50]
 r146: [46..48]
 r147: [32..45]
 r148: [36..42]
 r149: [38..39]
 r150: [36..37]
 r151: [34..35]
 r152: [32..33]
 r153: [28..29]
 r154: [24..25]
 r155: [14..15]
 r156: [11..13]
 r157: [7..8]
 r158: [4..6]
 r159: [2..3]
 r160: [0..1]
 r161: [185..186]
 r162: [175..176]
 r163: [173..174]
 r164: [169..170]
 r165: [235..236]
 r166: [229..230]
 r167: [224..225]
 r168: [221..222]
 r169: [218..219]
 r170: [208..209]
 r171: [201..202]
 r172: [198..199]
 r173: [195..196]
 r174: [167..168]
 r175: [163..164]
 r176: [160..161]
 r177: [154..155]
 r178: [149..150]
 r179: [146..147]
 r180: [144..145]
 r181: [139..140]
 r182: [132..133]
 r183: [125..126]
 r184: [117..118]
 r185: [112..113]
 r186: [105..106]
 r187: [98..99]
 r188: [90..91]
 r189: [83..84]
 r190: [80..81]
 r191: [77..78]
 r192: [289..290]
 r193: [283..284]
 r194: [276..277]
 r195: [273..274]
 r196: [270..271]
 r197: [260..261]
 r198: [251..252]
 r199: [248..249]
 r200: [245..246]
 r201: [65..66]
 r202: [59..60]
 r203: [53..54]
 r204: [46..47]
 r205: [43..44]
 r206: [40..41]
 r207: [30..31]
 r208: [26..27]
 r209: [21..23]
 r210: [21..22]
 r211: [18..20]
 r212: [18..19]
 r213: [16..17]
 r214: [11..12]
 r215: [9..10]
 r216: [4..5]
 r218: [204..205]
 r219: [86..87]
 r220: [254..255]
Compressing live ranges: from 291 to 260 - 89%
Ranges after the compression:
 r59: [164..165]
 r60: [162..163]
 r61: [160..161]
 r62: [158..159]
 r63: [152..153]
 r64: [146..147]
 r65: [208..209]
 r66: [206..207]
 r67: [202..203]
 r68: [200..201]
 r69: [188..199]
 r70: [192..197]
 r71: [194..195]
 r72: [192..193]
 r73: [190..191]
 r74: [188..189]
 r75: [184..185]
 r76: [180..181]
 r77: [168..179]
 r78: [172..177]
 r79: [174..175]
 r80: [172..173]
 r81: [170..171]
 r82: [168..169]
 r83: [138..143]
 r84: [140..141]
 r85: [138..139]
 r86: [134..135]
 r87: [132..133]
 r88: [130..131]
 r89: [126..127]
 r90: [124..125]
 r91: [122..123]
 r92: [120..121]
 r93: [106..119]
 r94: [116..117]
 r95: [114..115]
 r96: [112..113]
 r97: [110..111]
 r98: [108..109]
 r99: [106..107]
 r100: [102..103]
 r101: [100..101]
 r102: [98..99]
 r103: [96..97]
 r104: [82..95]
 r105: [92..93]
 r106: [90..91]
 r107: [88..89]
 r108: [86..87]
 r109: [84..85]
 r110: [82..83]
 r111: [78..79]
 r112: [74..75]
 r113: [60..73]
 r114: [64..71]
 r115: [68..69]
 r116: [66..67]
 r117: [64..65]
 r118: [62..63]
 r119: [60..61]
 r120: [56..57]
 r121: [54..55]
 r122: [256..257]
 r123: [254..255]
 r124: [250..251]
 r125: [248..249]
 r126: [246..247]
 r127: [234..245]
 r128: [238..243]
 r129: [240..241]
 r130: [238..239]
 r131: [236..237]
 r132: [234..235]
 r133: [230..231]
 r134: [228..229]
 r135: [224..225]
 r136: [212..223]
 r137: [216..221]
 r138: [218..219]
 r139: [216..217]
 r140: [214..215]
 r141: [212..213]
 r142: [50..51]
 r143: [48..49]
 r144: [44..45]
 r145: [42..43]
 r146: [40..41]
 r147: [28..39]
 r148: [32..37]
 r149: [34..35]
 r150: [32..33]
 r151: [30..31]
 r152: [28..29]
 r153: [24..25]
 r154: [20..21]
 r155: [12..13]
 r156: [10..11]
 r157: [6..7]
 r158: [4..5]
 r159: [2..3]
 r160: [0..1]
 r161: [166..167]
 r162: [156..157]
 r163: [154..155]
 r164: [150..151]
 r165: [210..211]
 r166: [204..205]
 r167: [200..201]
 r168: [198..199]
 r169: [196..197]
 r170: [186..187]
 r171: [180..181]
 r172: [178..179]
 r173: [176..177]
 r174: [148..149]
 r175: [144..145]
 r176: [142..143]
 r177: [136..137]
 r178: [132..133]
 r179: [130..131]
 r180: [128..129]
 r181: [124..125]
 r182: [118..119]
 r183: [112..113]
 r184: [104..105]
 r185: [100..101]
 r186: [94..95]
 r187: [88..89]
 r188: [80..81]
 r189: [74..75]
 r190: [72..73]
 r191: [70..71]
 r192: [258..259]
 r193: [252..253]
 r194: [246..247]
 r195: [244..245]
 r196: [242..243]
 r197: [232..233]
 r198: [224..225]
 r199: [222..223]
 r200: [220..221]
 r201: [58..59]
 r202: [52..53]
 r203: [46..47]
 r204: [40..41]
 r205: [38..39]
 r206: [36..37]
 r207: [26..27]
 r208: [22..23]
 r209: [18..19]
 r210: [18..19]
 r211: [16..17]
 r212: [16..17]
 r213: [14..15]
 r214: [10..11]
 r215: [8..9]
 r216: [4..5]
 r218: [182..183]
 r219: [76..77]
 r220: [226..227]
	 Assigning to 218 (cl=GENERAL_REGS, orig=76, freq=3, tfirst=218, tfreq=3)...
	   Assign 0 to reload r218 (freq=3)
	 Assigning to 219 (cl=GENERAL_REGS, orig=112, freq=3, tfirst=219, tfreq=3)...
	   Assign 0 to reload r219 (freq=3)
	 Assigning to 220 (cl=GENERAL_REGS, orig=135, freq=3, tfirst=220, tfreq=3)...
	   Assign 0 to reload r220 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 67
changing reg in insn 69
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 41
changing reg in insn 49
changing reg in insn 43
changing reg in insn 47
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 54
changing reg in insn 54
changing reg in insn 54
changing reg in insn 62
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 73
changing reg in insn 77
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 106
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 122
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 127
changing reg in insn 127
changing reg in insn 127
changing reg in insn 136
changing reg in insn 129
changing reg in insn 134
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 155
changing reg in insn 155
changing reg in insn 155
changing reg in insn 163
changing reg in insn 157
changing reg in insn 161
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 169
changing reg in insn 169
changing reg in insn 169
changing reg in insn 177
changing reg in insn 171
changing reg in insn 175
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 203
changing reg in insn 203
changing reg in insn 211
changing reg in insn 205
changing reg in insn 209
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 217
changing reg in insn 218
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 239
changing reg in insn 243
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 140
changing reg in insn 141
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 164
changing reg in insn 165
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 181
changing reg in insn 182
changing reg in insn 188
changing reg in insn 189
changing reg in insn 198
changing reg in insn 199
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 212
changing reg in insn 213
changing reg in insn 216
changing reg in insn 217
changing reg in insn 220
changing reg in insn 222
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 234
changing reg in insn 235
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 215.
verify found no changes in insn with uid = 219.


add_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={130d,124u} r1={44d,36u,11e} r2={23d,14u} r4={9d,1u} r5={17d,9u} r6={1d,85u} r7={1d,24u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={68d,6u} r18={8d} r19={8d} r20={1d,1u,12e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} 
;;    total ref usage 931{608d,300u,23e} in 217{209 regular + 8 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 161 162 163 164
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])
        (reg:DI 4 si [ st_indx ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ st_indx ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])
        (reg:DI 1 dx [ p ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ p ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:59 D.5001 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:140 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [161])
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [orig:60 D.5001 ] [60])
                (plus:SI (reg:SI 0 ax [orig:59 D.5001 ] [59])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:140 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5001 ] [59])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 0 ax [orig:61 D.5002 ] [61])
        (sign_extend:DI (reg:SI 0 ax [orig:60 D.5001 ] [60]))) mSector.c:140 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.5001 ] [60])
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 0 ax [orig:62 D.5002 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:61 D.5002 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:140 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5002 ] [61])
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:62 D.5002 ] [62])) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.5002 ] [62])
        (nil)))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f44d2970b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mSector.c:140 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [162])
        (reg:DI 0 ax)) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [162])
            (nil))))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
        (reg/f:DI 0 ax [162])) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [162])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:63 D.5001 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [163])
        (nil)))
(insn 19 18 20 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:63 D.5001 ] [63])) mSector.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.5001 ] [63])
        (nil)))
(call_insn 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f44d29f7700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mSector.c:141 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 21 20 22 2 (set (reg:DI 0 ax [164])
        (reg:DI 0 ax)) mSector.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
        (reg:DI 0 ax [164])) mSector.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 23 22 249 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:145 89 {*movsi_internal}
     (nil))
(jump_insn 249 23 250 2 (set (pc)
        (label_ref 64)) mSector.c:145 650 {jump}
     (nil)
 -> 64)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 250 249 68)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 165
(code_label 68 250 26 3 69 "" [1 uses])
(note 26 68 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (set (reg:SI 0 ax [orig:65 D.5001 ] [65])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:146 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [165])
        (nil)))
(insn 29 28 30 3 (parallel [
            (set (reg:SI 0 ax [orig:66 D.5001 ] [66])
                (plus:SI (reg:SI 0 ax [orig:65 D.5001 ] [65])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:146 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.5001 ] [65])
        (nil)))
(insn 30 29 31 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:66 D.5001 ] [66])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:146 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.5001 ] [66])
        (nil)))
(jump_insn 31 30 32 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) mSector.c:146 612 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:146 87 {*movdi_internal_rex64}
     (nil))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:146 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 166 167 168 169 170 171 172 173
(code_label 35 34 36 5 68 "" [1 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:147 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [orig:67 D.5002 ] [67])
        (sign_extend:DI (reg:SI 0 ax [166]))) mSector.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [166])
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 1 dx [orig:68 D.5002 ] [68])
                (ashift:DI (reg:DI 0 ax [orig:67 D.5002 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.5002 ] [67])
        (nil)))
(insn 40 39 41 5 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg/f:DI 1 dx [orig:69 D.5003 ] [69])
                (plus:DI (reg:DI 1 dx [orig:68 D.5002 ] [68])
                    (reg/f:DI 0 ax [167])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [167])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.5002 ] [68])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:68 D.5002 ] [68]))
                (nil)))))
(insn 42 41 43 5 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [orig:70 D.5003 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [168])
        (nil)))
(insn 44 43 45 5 (set (reg:SI 2 cx [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:147 89 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 2 cx [orig:71 D.5002 ] [71])
        (sign_extend:DI (reg:SI 2 cx [169]))) mSector.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [169])
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 2 cx [orig:72 D.5002 ] [72])
                (ashift:DI (reg:DI 2 cx [orig:71 D.5002 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:71 D.5002 ] [71])
        (nil)))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.5003 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.5003 ] [70])
                    (reg:DI 2 cx [orig:72 D.5002 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:72 D.5002 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5003 ] [70])
            (nil))))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [orig:74 D.5004 ] [74])
        (mem/f:DI (reg/f:DI 0 ax [orig:73 D.5003 ] [73]) [0 *_22+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.5003 ] [73])
        (nil)))
(insn 49 48 50 5 (set (mem/f:DI (reg/f:DI 1 dx [orig:69 D.5003 ] [69]) [0 *_18+0 S8 A64])
        (reg/f:DI 0 ax [orig:74 D.5004 ] [74])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.5004 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:69 D.5003 ] [69])
            (nil))))
(insn 50 49 51 5 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:148 89 {*movsi_internal}
     (nil))
(insn 51 50 253 5 (set (reg:DI 0 ax [orig:75 D.5002 ] [75])
        (sign_extend:DI (reg:SI 0 ax [170]))) mSector.c:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [170])
        (nil)))
(insn 253 51 52 5 (set (reg:DI 0 ax [orig:76 D.5002 ] [76])
        (reg:DI 0 ax [orig:75 D.5002 ] [75])) mSector.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.5002 ] [75])
        (nil)))
(insn 52 253 254 5 (parallel [
            (set (reg:DI 0 ax [orig:76 D.5002 ] [76])
                (ashift:DI (reg:DI 0 ax [orig:76 D.5002 ] [76])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 513 {*ashldi3_1}
     (nil))
(insn 254 52 53 5 (set (reg:DI 1 dx [orig:76 D.5002 ] [76])
        (reg:DI 0 ax [orig:76 D.5002 ] [76])) mSector.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:76 D.5002 ] [76])
        (nil)))
(insn 53 254 54 5 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 5 (parallel [
            (set (reg/f:DI 2 cx [orig:77 D.5004 ] [77])
                (plus:DI (reg:DI 1 dx [orig:76 D.5002 ] [76])
                    (reg/f:DI 0 ax [171])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [171])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.5002 ] [76])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:76 D.5002 ] [76]))
                (nil)))))
(insn 55 54 56 5 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 5 (set (reg/f:DI 0 ax [orig:78 D.5004 ] [78])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [172])
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [172])
        (nil)))
(insn 57 56 58 5 (set (reg:SI 1 dx [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:148 89 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:DI 1 dx [orig:79 D.5002 ] [79])
        (sign_extend:DI (reg:SI 1 dx [173]))) mSector.c:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [173])
        (nil)))
(insn 59 58 60 5 (parallel [
            (set (reg:DI 1 dx [orig:80 D.5002 ] [80])
                (ashift:DI (reg:DI 1 dx [orig:79 D.5002 ] [79])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.5002 ] [79])
        (nil)))
(insn 60 59 61 5 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.5004 ] [81])
                (plus:DI (reg/f:DI 0 ax [orig:78 D.5004 ] [78])
                    (reg:DI 1 dx [orig:80 D.5002 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.5002 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.5004 ] [78])
            (nil))))
(insn 61 60 62 5 (set (reg:XF 0 ax [orig:82 D.5005 ] [82])
        (mem:XF (reg/f:DI 0 ax [orig:81 D.5004 ] [81]) [0 *_30+0 S16 A128])) mSector.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.5004 ] [81])
        (nil)))
(insn 62 61 63 5 (set (mem:XF (reg/f:DI 2 cx [orig:77 D.5004 ] [77]) [0 *_26+0 S16 A128])
        (reg:XF 0 ax [orig:82 D.5005 ] [82])) mSector.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:82 D.5005 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:77 D.5004 ] [77])
            (nil))))
(insn 63 62 64 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:145 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 174
(code_label 64 63 65 6 67 "" [1 uses])
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 6 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 69 6 (set (reg:SI 0 ax [orig:64 D.5001 ] [64])
        (mem:SI (reg/f:DI 0 ax [174]) [0 *st_indx_12(D)+0 S4 A32])) mSector.c:145 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [174])
        (nil)))
(insn 69 67 70 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:64 D.5001 ] [64])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:145 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.5001 ] [64])
        (nil)))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) mSector.c:145 612 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 175 176
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:152 89 {*movsi_internal}
     (nil))
(insn 73 72 74 7 (parallel [
            (set (reg:SI 1 dx [orig:83 D.5001 ] [83])
                (plus:SI (reg:SI 0 ax [175])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:152 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [175])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 74 73 75 7 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 7 (set (reg:SI 0 ax [orig:84 D.5001 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [176])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:152 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [176])
        (nil)))
(insn 76 75 77 7 (parallel [
            (set (reg:SI 0 ax [orig:85 D.5001 ] [85])
                (plus:SI (reg:SI 0 ax [orig:84 D.5001 ] [84])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:152 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.5001 ] [84])
        (nil)))
(insn 77 76 78 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:83 D.5001 ] [83])
            (reg:SI 0 ax [orig:85 D.5001 ] [85]))) mSector.c:152 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.5001 ] [85])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:83 D.5001 ] [83])
            (nil))))
(jump_insn 78 77 79 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) mSector.c:152 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:152 87 {*movdi_internal_rex64}
     (nil))
(call_insn 81 80 82 8 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:152 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
(code_label 82 81 83 9 70 "" [1 uses])
(note 83 82 84 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 9 (set (reg:SI 0 ax [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:153 89 {*movsi_internal}
     (nil))
(insn 85 84 86 9 (set (reg:DI 0 ax [orig:86 D.5002 ] [86])
        (sign_extend:DI (reg:SI 0 ax [177]))) mSector.c:153 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [177])
        (nil)))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 1 dx [orig:87 D.5002 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 D.5002 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:153 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:86 D.5002 ] [86])
        (nil)))
(insn 87 86 88 9 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 9 (parallel [
            (set (reg/f:DI 1 dx [orig:88 D.5003 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 D.5002 ] [87])
                    (reg/f:DI 0 ax [178])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:153 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [178])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.5002 ] [87])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:87 D.5002 ] [87]))
                (nil)))))
(insn 89 88 90 9 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])) mSector.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 9 (set (mem/f:DI (reg/f:DI 1 dx [orig:88 D.5003 ] [88]) [0 *_38+0 S8 A64])
        (reg/f:DI 0 ax [179])) mSector.c:153 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [179])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:88 D.5003 ] [88])
            (nil))))
(insn 91 90 92 9 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:154 89 {*movsi_internal}
     (nil))
(insn 92 91 93 9 (set (reg:DI 0 ax [orig:89 D.5002 ] [89])
        (sign_extend:DI (reg:SI 0 ax [180]))) mSector.c:154 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [180])
        (nil)))
(insn 93 92 94 9 (parallel [
            (set (reg:DI 1 dx [orig:90 D.5002 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.5002 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.5002 ] [89])
        (nil)))
(insn 94 93 95 9 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 9 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.5003 ] [91])
                (plus:DI (reg/f:DI 0 ax [181])
                    (reg:DI 1 dx [orig:90 D.5002 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [181])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.5002 ] [90])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:90 D.5002 ] [90]))
                (nil)))))
(insn 96 95 97 9 (set (reg/f:DI 0 ax [orig:92 D.5004 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.5003 ] [91]) [0 *_42+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.5003 ] [91])
        (nil)))
(insn 97 96 98 9 (parallel [
            (set (reg/f:DI 2 cx [orig:93 D.5004 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 D.5004 ] [92])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.5004 ] [92])
        (nil)))
(insn 98 97 99 9 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:154 89 {*movsi_internal}
     (nil))
(insn 99 98 100 9 (set (reg:DI 0 ax [orig:94 D.5002 ] [94])
        (sign_extend:DI (reg:SI 0 ax [182]))) mSector.c:154 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [182])
        (nil)))
(insn 100 99 101 9 (parallel [
            (set (reg:DI 0 ax [orig:95 D.5002 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.5002 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:94 D.5002 ] [94])
        (nil)))
(insn 101 100 102 9 (parallel [
            (set (reg:DI 1 dx [orig:96 D.5006 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.5002 ] [95])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:95 D.5002 ] [95])
        (nil)))
(insn 102 101 103 9 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 9 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.5003 ] [97])
                (plus:DI (reg/f:DI 0 ax [183])
                    (reg:DI 1 dx [orig:96 D.5006 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [183])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.5006 ] [96])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:96 D.5006 ] [96]))
                (nil)))))
(insn 104 103 105 9 (set (reg/f:DI 0 ax [orig:98 D.5004 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 D.5003 ] [97]) [0 *_48+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.5003 ] [97])
        (nil)))
(insn 105 104 106 9 (set (reg:XF 0 ax [orig:99 D.5005 ] [99])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:98 D.5004 ] [98])
                (const_int 32 [0x20])) [0 MEM[(long double *)_49 + 32B]+0 S16 A128])) mSector.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.5004 ] [98])
        (nil)))
(insn 106 105 107 9 (set (mem:XF (reg/f:DI 2 cx [orig:93 D.5004 ] [93]) [0 *_44+0 S16 A128])
        (reg:XF 0 ax [orig:99 D.5005 ] [99])) mSector.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:99 D.5005 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:93 D.5004 ] [93])
            (nil))))
(insn 107 106 108 9 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:155 89 {*movsi_internal}
     (nil))
(insn 108 107 109 9 (set (reg:DI 0 ax [orig:100 D.5002 ] [100])
        (sign_extend:DI (reg:SI 0 ax [184]))) mSector.c:155 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [184])
        (nil)))
(insn 109 108 110 9 (parallel [
            (set (reg:DI 1 dx [orig:101 D.5002 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.5002 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:100 D.5002 ] [100])
        (nil)))
(insn 110 109 111 9 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.5003 ] [102])
                (plus:DI (reg/f:DI 0 ax [185])
                    (reg:DI 1 dx [orig:101 D.5002 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [185])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:101 D.5002 ] [101])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:101 D.5002 ] [101]))
                (nil)))))
(insn 112 111 113 9 (set (reg/f:DI 0 ax [orig:103 D.5004 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [orig:102 D.5003 ] [102]) [0 *_53+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.5003 ] [102])
        (nil)))
(insn 113 112 114 9 (parallel [
            (set (reg/f:DI 2 cx [orig:104 D.5004 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:103 D.5004 ] [103])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.5004 ] [103])
        (nil)))
(insn 114 113 115 9 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:155 89 {*movsi_internal}
     (nil))
(insn 115 114 116 9 (set (reg:DI 0 ax [orig:105 D.5002 ] [105])
        (sign_extend:DI (reg:SI 0 ax [186]))) mSector.c:155 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [186])
        (nil)))
(insn 116 115 117 9 (parallel [
            (set (reg:DI 0 ax [orig:106 D.5002 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.5002 ] [105])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:105 D.5002 ] [105])
        (nil)))
(insn 117 116 118 9 (parallel [
            (set (reg:DI 1 dx [orig:107 D.5006 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 D.5002 ] [106])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:106 D.5002 ] [106])
        (nil)))
(insn 118 117 119 9 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 9 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.5003 ] [108])
                (plus:DI (reg/f:DI 0 ax [187])
                    (reg:DI 1 dx [orig:107 D.5006 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [187])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.5006 ] [107])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:107 D.5006 ] [107]))
                (nil)))))
(insn 120 119 121 9 (set (reg/f:DI 0 ax [orig:109 D.5004 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:108 D.5003 ] [108]) [0 *_59+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:108 D.5003 ] [108])
        (nil)))
(insn 121 120 122 9 (set (reg:XF 0 ax [orig:110 D.5005 ] [110])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:109 D.5004 ] [109])
                (const_int 48 [0x30])) [0 MEM[(long double *)_60 + 48B]+0 S16 A128])) mSector.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.5004 ] [109])
        (nil)))
(insn 122 121 123 9 (set (mem:XF (reg/f:DI 2 cx [orig:104 D.5004 ] [104]) [0 *_55+0 S16 A128])
        (reg:XF 0 ax [orig:110 D.5005 ] [110])) mSector.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:110 D.5005 ] [110])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:104 D.5004 ] [104])
            (nil))))
(insn 123 122 124 9 (set (reg:SI 0 ax [188])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:157 89 {*movsi_internal}
     (nil))
(insn 124 123 255 9 (set (reg:DI 0 ax [orig:111 D.5002 ] [111])
        (sign_extend:DI (reg:SI 0 ax [188]))) mSector.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [188])
        (nil)))
(insn 255 124 125 9 (set (reg:DI 0 ax [orig:112 D.5002 ] [112])
        (reg:DI 0 ax [orig:111 D.5002 ] [111])) mSector.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:111 D.5002 ] [111])
        (nil)))
(insn 125 255 256 9 (parallel [
            (set (reg:DI 0 ax [orig:112 D.5002 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:112 D.5002 ] [112])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 513 {*ashldi3_1}
     (nil))
(insn 256 125 126 9 (set (reg:DI 1 dx [orig:112 D.5002 ] [112])
        (reg:DI 0 ax [orig:112 D.5002 ] [112])) mSector.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:112 D.5002 ] [112])
        (nil)))
(insn 126 256 127 9 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 9 (parallel [
            (set (reg/f:DI 2 cx [orig:113 D.5004 ] [113])
                (plus:DI (reg:DI 1 dx [orig:112 D.5002 ] [112])
                    (reg/f:DI 0 ax [189])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [189])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:112 D.5002 ] [112])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:112 D.5002 ] [112]))
                (nil)))))
(insn 128 127 129 9 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 129 128 130 9 (set (reg/f:DI 0 ax [orig:114 D.5004 ] [114])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [190])
        (nil)))
(insn 130 129 131 9 (set (reg:SI 1 dx [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:157 89 {*movsi_internal}
     (nil))
(insn 131 130 132 9 (set (reg:DI 1 dx [orig:115 D.5002 ] [115])
        (sign_extend:DI (reg:SI 1 dx [191]))) mSector.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [191])
        (nil)))
(insn 132 131 133 9 (parallel [
            (set (reg:DI 1 dx [orig:116 D.5002 ] [116])
                (ashift:DI (reg:DI 1 dx [orig:115 D.5002 ] [115])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 D.5002 ] [115])
        (nil)))
(insn 133 132 134 9 (parallel [
            (set (reg:DI 1 dx [orig:117 D.5006 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 D.5002 ] [116])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:116 D.5002 ] [116])
        (nil)))
(insn 134 133 135 9 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.5004 ] [118])
                (plus:DI (reg/f:DI 0 ax [orig:114 D.5004 ] [114])
                    (reg:DI 1 dx [orig:117 D.5006 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:117 D.5006 ] [117])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:114 D.5004 ] [114])
            (nil))))
(insn 135 134 136 9 (set (reg:XF 0 ax [orig:119 D.5005 ] [119])
        (mem:XF (reg/f:DI 0 ax [orig:118 D.5004 ] [118]) [0 *_69+0 S16 A128])) mSector.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:118 D.5004 ] [118])
        (nil)))
(insn 136 135 251 9 (set (mem:XF (reg/f:DI 2 cx [orig:113 D.5004 ] [113]) [0 *_64+0 S16 A128])
        (reg:XF 0 ax [orig:119 D.5005 ] [119])) mSector.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:119 D.5005 ] [119])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:113 D.5004 ] [113])
            (nil))))
(jump_insn 251 136 252 9 (set (pc)
        (label_ref 179)) mSector.c:161 650 {jump}
     (nil)
 -> 179)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 252 251 184)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 192
(code_label 184 252 139 10 73 "" [1 uses])
(note 139 184 140 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 10 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:162 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 10 (set (reg:SI 0 ax [orig:122 D.5001 ] [122])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [192])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:162 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [192])
        (nil)))
(insn 142 141 143 10 (parallel [
            (set (reg:SI 0 ax [orig:123 D.5001 ] [123])
                (plus:SI (reg:SI 0 ax [orig:122 D.5001 ] [122])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:162 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:122 D.5001 ] [122])
        (nil)))
(insn 143 142 144 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:123 D.5001 ] [123])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:162 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:123 D.5001 ] [123])
        (nil)))
(jump_insn 144 143 145 10 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) mSector.c:162 612 {*jcc_1}
     (nil)
 -> 148)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 145 144 146 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:162 87 {*movdi_internal_rex64}
     (nil))
(call_insn 147 146 148 11 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:162 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 193 194 195 196 197 198 199 200
(code_label 148 147 149 12 72 "" [1 uses])
(note 149 148 150 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 12 (set (reg:SI 0 ax [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:163 89 {*movsi_internal}
     (nil))
(insn 151 150 152 12 (set (reg:DI 0 ax [orig:124 D.5006 ] [124])
        (sign_extend:DI (reg:SI 0 ax [193]))) mSector.c:163 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [193])
        (nil)))
(insn 152 151 153 12 (parallel [
            (set (reg:DI 0 ax [orig:125 D.5006 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 D.5006 ] [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:124 D.5006 ] [124])
        (nil)))
(insn 153 152 154 12 (parallel [
            (set (reg:DI 1 dx [orig:126 D.5006 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.5006 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 D.5006 ] [125])
        (nil)))
(insn 154 153 155 12 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (nil))
(insn 155 154 156 12 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.5003 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.5006 ] [126])
                    (reg/f:DI 0 ax [194])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [194])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:126 D.5006 ] [126])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:126 D.5006 ] [126]))
                (nil)))))
(insn 156 155 157 12 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (nil))
(insn 157 156 158 12 (set (reg/f:DI 0 ax [orig:128 D.5003 ] [128])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [195])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [195])
        (nil)))
(insn 158 157 159 12 (set (reg:SI 2 cx [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:163 89 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 2 cx [orig:129 D.5002 ] [129])
        (sign_extend:DI (reg:SI 2 cx [196]))) mSector.c:163 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [196])
        (nil)))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 2 cx [orig:130 D.5002 ] [130])
                (ashift:DI (reg:DI 2 cx [orig:129 D.5002 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:129 D.5002 ] [129])
        (nil)))
(insn 161 160 162 12 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.5003 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:128 D.5003 ] [128])
                    (reg:DI 2 cx [orig:130 D.5002 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:130 D.5002 ] [130])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:128 D.5003 ] [128])
            (nil))))
(insn 162 161 163 12 (set (reg/f:DI 0 ax [orig:132 D.5004 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [orig:131 D.5003 ] [131]) [0 *_82+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:131 D.5003 ] [131])
        (nil)))
(insn 163 162 164 12 (set (mem/f:DI (reg/f:DI 1 dx [orig:127 D.5003 ] [127]) [0 *_78+0 S8 A64])
        (reg/f:DI 0 ax [orig:132 D.5004 ] [132])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:132 D.5004 ] [132])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:127 D.5003 ] [127])
            (nil))))
(insn 164 163 165 12 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:164 89 {*movsi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 0 ax [orig:133 D.5006 ] [133])
        (sign_extend:DI (reg:SI 0 ax [197]))) mSector.c:164 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [197])
        (nil)))
(insn 166 165 257 12 (parallel [
            (set (reg:DI 0 ax [orig:134 D.5006 ] [134])
                (plus:DI (reg:DI 0 ax [orig:133 D.5006 ] [133])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:133 D.5006 ] [133])
        (nil)))
(insn 257 166 167 12 (set (reg:DI 0 ax [orig:135 D.5006 ] [135])
        (reg:DI 0 ax [orig:134 D.5006 ] [134])) mSector.c:164 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:134 D.5006 ] [134])
        (nil)))
(insn 167 257 258 12 (parallel [
            (set (reg:DI 0 ax [orig:135 D.5006 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:135 D.5006 ] [135])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 513 {*ashldi3_1}
     (nil))
(insn 258 167 168 12 (set (reg:DI 1 dx [orig:135 D.5006 ] [135])
        (reg:DI 0 ax [orig:135 D.5006 ] [135])) mSector.c:164 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:135 D.5006 ] [135])
        (nil)))
(insn 168 258 169 12 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (nil))
(insn 169 168 170 12 (parallel [
            (set (reg/f:DI 2 cx [orig:136 D.5004 ] [136])
                (plus:DI (reg:DI 1 dx [orig:135 D.5006 ] [135])
                    (reg/f:DI 0 ax [198])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [198])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:135 D.5006 ] [135])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:135 D.5006 ] [135]))
                (nil)))))
(insn 170 169 171 12 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (nil))
(insn 171 170 172 12 (set (reg/f:DI 0 ax [orig:137 D.5004 ] [137])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [199])
        (nil)))
(insn 172 171 173 12 (set (reg:SI 1 dx [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:164 89 {*movsi_internal}
     (nil))
(insn 173 172 174 12 (set (reg:DI 1 dx [orig:138 D.5002 ] [138])
        (sign_extend:DI (reg:SI 1 dx [200]))) mSector.c:164 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [200])
        (nil)))
(insn 174 173 175 12 (parallel [
            (set (reg:DI 1 dx [orig:139 D.5002 ] [139])
                (ashift:DI (reg:DI 1 dx [orig:138 D.5002 ] [138])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:138 D.5002 ] [138])
        (nil)))
(insn 175 174 176 12 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.5004 ] [140])
                (plus:DI (reg/f:DI 0 ax [orig:137 D.5004 ] [137])
                    (reg:DI 1 dx [orig:139 D.5002 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.5002 ] [139])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:137 D.5004 ] [137])
            (nil))))
(insn 176 175 177 12 (set (reg:XF 0 ax [orig:141 D.5005 ] [141])
        (mem:XF (reg/f:DI 0 ax [orig:140 D.5004 ] [140]) [0 *_91+0 S16 A128])) mSector.c:164 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:140 D.5004 ] [140])
        (nil)))
(insn 177 176 178 12 (set (mem:XF (reg/f:DI 2 cx [orig:136 D.5004 ] [136]) [0 *_87+0 S16 A128])
        (reg:XF 0 ax [orig:141 D.5005 ] [141])) mSector.c:164 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:141 D.5005 ] [141])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:136 D.5004 ] [136])
            (nil))))
(insn 178 177 179 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:161 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 201
(code_label 179 178 180 13 71 "" [1 uses])
(note 180 179 181 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 13 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:161 87 {*movdi_internal_rex64}
     (nil))
(insn 182 181 183 13 (set (reg:SI 0 ax [orig:120 D.5001 ] [120])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [201])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:161 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [201])
        (nil)))
(insn 183 182 185 13 (parallel [
            (set (reg:SI 0 ax [orig:121 D.5001 ] [121])
                (plus:SI (reg:SI 0 ax [orig:120 D.5001 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:161 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:120 D.5001 ] [120])
        (nil)))
(insn 185 183 186 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:121 D.5001 ] [121])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:161 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:121 D.5001 ] [121])
        (nil)))
(jump_insn 186 185 187 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) mSector.c:161 612 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       10
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202
(note 187 186 188 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 14 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:167 87 {*movdi_internal_rex64}
     (nil))
(insn 189 188 190 14 (set (reg:SI 0 ax [orig:142 D.5001 ] [142])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [202])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:167 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [202])
        (nil)))
(insn 190 189 191 14 (parallel [
            (set (reg:SI 0 ax [orig:143 D.5001 ] [143])
                (plus:SI (reg:SI 0 ax [orig:142 D.5001 ] [142])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:167 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:142 D.5001 ] [142])
        (nil)))
(insn 191 190 192 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:143 D.5001 ] [143])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:167 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:143 D.5001 ] [143])
        (nil)))
(jump_insn 192 191 193 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) mSector.c:167 612 {*jcc_1}
     (nil)
 -> 196)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 193 192 194 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:167 87 {*movdi_internal_rex64}
     (nil))
(call_insn 195 194 196 15 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:167 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 203 204 205 206 207 208 209 210 211 212 213 214 215 216
(code_label 196 195 197 16 74 "" [1 uses])
(note 197 196 198 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 16 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:168 89 {*movsi_internal}
     (nil))
(insn 199 198 200 16 (set (reg:DI 0 ax [orig:144 D.5006 ] [144])
        (sign_extend:DI (reg:SI 0 ax [203]))) mSector.c:168 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [203])
        (nil)))
(insn 200 199 201 16 (parallel [
            (set (reg:DI 0 ax [orig:145 D.5006 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 D.5006 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:144 D.5006 ] [144])
        (nil)))
(insn 201 200 202 16 (parallel [
            (set (reg:DI 1 dx [orig:146 D.5006 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.5006 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:145 D.5006 ] [145])
        (nil)))
(insn 202 201 203 16 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 203 202 204 16 (parallel [
            (set (reg/f:DI 1 dx [orig:147 D.5003 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.5006 ] [146])
                    (reg/f:DI 0 ax [204])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [204])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:146 D.5006 ] [146])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:146 D.5006 ] [146]))
                (nil)))))
(insn 204 203 205 16 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 205 204 206 16 (set (reg/f:DI 0 ax [orig:148 D.5003 ] [148])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [205])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [205])
        (nil)))
(insn 206 205 207 16 (set (reg:SI 2 cx [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:168 89 {*movsi_internal}
     (nil))
(insn 207 206 208 16 (set (reg:DI 2 cx [orig:149 D.5002 ] [149])
        (sign_extend:DI (reg:SI 2 cx [206]))) mSector.c:168 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [206])
        (nil)))
(insn 208 207 209 16 (parallel [
            (set (reg:DI 2 cx [orig:150 D.5002 ] [150])
                (ashift:DI (reg:DI 2 cx [orig:149 D.5002 ] [149])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:149 D.5002 ] [149])
        (nil)))
(insn 209 208 210 16 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.5003 ] [151])
                (plus:DI (reg/f:DI 0 ax [orig:148 D.5003 ] [148])
                    (reg:DI 2 cx [orig:150 D.5002 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:150 D.5002 ] [150])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:148 D.5003 ] [148])
            (nil))))
(insn 210 209 211 16 (set (reg/f:DI 0 ax [orig:152 D.5004 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [orig:151 D.5003 ] [151]) [0 *_103+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:151 D.5003 ] [151])
        (nil)))
(insn 211 210 212 16 (set (mem/f:DI (reg/f:DI 1 dx [orig:147 D.5003 ] [147]) [0 *_99+0 S8 A64])
        (reg/f:DI 0 ax [orig:152 D.5004 ] [152])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:152 D.5004 ] [152])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:147 D.5003 ] [147])
            (nil))))
(insn 212 211 213 16 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:171 87 {*movdi_internal_rex64}
     (nil))
(insn 213 212 214 16 (set (reg/f:DI 0 ax [orig:153 D.5003 ] [153])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [207])
        (nil)))
(insn 214 213 215 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:153 D.5003 ] [153])) mSector.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.5003 ] [153])
        (nil)))
(call_insn 215 214 216 16 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:171 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 216 215 217 16 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:172 87 {*movdi_internal_rex64}
     (nil))
(insn 217 216 218 16 (set (reg/f:DI 0 ax [orig:154 D.5004 ] [154])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [208])
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [208])
        (nil)))
(insn 218 217 219 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 D.5004 ] [154])) mSector.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:154 D.5004 ] [154])
        (nil)))
(call_insn 219 218 220 16 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:172 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 220 219 221 16 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 221 220 222 16 (set (reg/f:DI 1 dx [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 16 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [209])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])
        (reg/f:DI 1 dx [210])) mSector.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [210])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [209])
            (nil))))
(insn 223 222 224 16 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 224 223 225 16 (set (reg/f:DI 1 dx [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 16 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [211])
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])
        (reg/f:DI 1 dx [212])) mSector.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [212])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [211])
            (nil))))
(insn 226 225 227 16 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 227 226 228 16 (set (reg:SI 0 ax [orig:155 D.5001 ] [155])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [213])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:179 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [213])
        (nil)))
(insn 228 227 229 16 (parallel [
            (set (reg:SI 1 dx [orig:156 D.5001 ] [156])
                (plus:SI (reg:SI 0 ax [orig:155 D.5001 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:179 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:155 D.5001 ] [155])
        (nil)))
(insn 229 228 230 16 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 230 229 231 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [214])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])
        (reg:SI 1 dx [orig:156 D.5001 ] [156])) mSector.c:179 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [214])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:156 D.5001 ] [156])
            (nil))))
(insn 231 230 232 16 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:180 87 {*movdi_internal_rex64}
     (nil))
(insn 232 231 233 16 (set (reg:SI 0 ax [orig:157 D.5001 ] [157])
        (mem:SI (reg/f:DI 0 ax [215]) [0 *st_indx_12(D)+0 S4 A32])) mSector.c:180 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [215])
        (nil)))
(insn 233 232 234 16 (parallel [
            (set (reg:SI 1 dx [orig:158 D.5001 ] [158])
                (plus:SI (reg:SI 0 ax [orig:157 D.5001 ] [157])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:180 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:157 D.5001 ] [157])
        (nil)))
(insn 234 233 235 16 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:180 87 {*movdi_internal_rex64}
     (nil))
(insn 235 234 236 16 (set (mem:SI (reg/f:DI 0 ax [216]) [0 *st_indx_12(D)+0 S4 A32])
        (reg:SI 1 dx [orig:158 D.5001 ] [158])) mSector.c:180 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [216])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:158 D.5001 ] [158])
            (nil))))
(insn 236 235 239 16 (set (reg:SI 0 ax [orig:159 D.5001 ] [159])
        (const_int 1 [0x1])) mSector.c:182 89 {*movsi_internal}
     (nil))
(insn 239 236 243 16 (set (reg:SI 0 ax [orig:160 <retval> ] [160])
        (reg:SI 0 ax [orig:159 D.5001 ] [159])) mSector.c:182 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:159 D.5001 ] [159])
        (nil)))
(insn 243 239 246 16 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:160 <retval> ] [160])) mSector.c:183 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:160 <retval> ] [160])
        (nil)))
(insn 246 243 0 16 (use (reg/i:SI 0 ax)) mSector.c:183 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _add_nvp_bound (_add_nvp_bound, funcdef_no=10, decl_uid=4061, cgraph_uid=10)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 99: point = 0
   Insn 96: point = 0
   Insn 92: point = 1
   Insn 89: point = 3
   Insn 88: point = 4
   Insn 87: point = 4
   Insn 86: point = 5
   Insn 85: point = 6
   Insn 84: point = 7
   Insn 83: point = 8
   Insn 82: point = 9
   Insn 81: point = 11
   Insn 80: point = 13
   Insn 79: point = 15
   Insn 78: point = 17
   Insn 77: point = 18
   Insn 76: point = 18
   Insn 75: point = 19
   Insn 74: point = 21
   Insn 73: point = 22
   Insn 72: point = 24
   Insn 71: point = 25
   Insn 70: point = 25
   Insn 69: point = 26
   Insn 68: point = 27
   Insn 67: point = 28
   Insn 66: point = 29
   Insn 65: point = 30
   Insn 64: point = 31
   Insn 63: point = 33
   Insn 62: point = 35
   Insn 61: point = 37
   Insn 60: point = 39
   Insn 59: point = 40
   Insn 58: point = 42
   Insn 57: point = 44
   Insn 56: point = 46
   Insn 55: point = 48
   Insn 54: point = 50
   Insn 53: point = 51
   Insn 52: point = 51
   Insn 51: point = 52
   Insn 50: point = 54
   Insn 49: point = 55
   Insn 48: point = 57
   Insn 47: point = 58
   Insn 46: point = 60
   Insn 45: point = 62
   Insn 44: point = 64
   Insn 43: point = 66
   Insn 42: point = 68
   Insn 41: point = 69
   Insn 40: point = 71
   Insn 39: point = 73
   Insn 38: point = 75
   Insn 37: point = 77
   Insn 36: point = 79
   Insn 35: point = 80
   Insn 34: point = 80
   Insn 33: point = 81
   Insn 32: point = 83
   Insn 31: point = 84
   Insn 30: point = 86
   Insn 29: point = 87
   Insn 28: point = 89
   Insn 27: point = 91
   Insn 26: point = 92
   Insn 25: point = 94
   Insn 24: point = 96
   Insn 23: point = 97
   Insn 22: point = 99
   Insn 21: point = 101
   Insn 20: point = 102
   Insn 19: point = 104
   Insn 18: point = 106
   Insn 17: point = 108
   Insn 16: point = 109
   Insn 15: point = 110
   Insn 14: point = 111
   Insn 13: point = 111
   Insn 12: point = 111
   Insn 11: point = 112
   Insn 10: point = 114
   Insn 6: point = 115
   Insn 5: point = 115
   Insn 4: point = 115
   Insn 3: point = 115
   Insn 2: point = 115
 r59: [111..112]
 r60: [105..106]
 r61: [103..104]
 r62: [100..102]
 r63: [98..99]
 r64: [28..97]
 r65: [93..94]
 r66: [90..92]
 r67: [88..89]
 r68: [27..87]
 r69: [72..84]
 r70: [79..81]
 r71: [72..73]
 r72: [70..71]
 r73: [61..69]
 r74: [65..66]
 r75: [63..64]
 r76: [61..62]
 r77: [59..60]
 r78: [26..58]
 r79: [43..55]
 r80: [50..52]
 r81: [43..44]
 r82: [41..42]
 r83: [34..40]
 r84: [36..37]
 r85: [34..35]
 r86: [32..33]
 r87: [25..31]
 r88: [10..22]
 r89: [17..19]
 r90: [10..11]
 r91: [4..9]
 r92: [2..3]
 r93: [0..1]
 r94: [113..114]
 r95: [109..110]
 r96: [107..108]
 r97: [100..101]
 r98: [95..96]
 r99: [90..91]
 r100: [85..86]
 r101: [82..83]
 r102: [78..80] [74..75]
 r103: [76..77]
 r104: [67..68]
 r105: [56..57]
 r106: [53..54]
 r107: [49..51] [45..46]
 r108: [47..48]
 r109: [38..39]
 r110: [29..30]
 r111: [23..24]
 r112: [20..21]
 r113: [16..18] [12..13]
 r114: [14..15]
 r115: [6..8]
 r116: [5..7]
Compressing live ranges: from 115 to 90 - 78%
Ranges after the compression:
 r59: [86..87]
 r60: [80..81]
 r61: [78..79]
 r62: [76..77]
 r63: [74..75]
 r64: [18..73]
 r65: [70..71]
 r66: [68..69]
 r67: [66..67]
 r68: [18..65]
 r69: [54..63]
 r70: [60..61]
 r71: [54..55]
 r72: [52..53]
 r73: [44..51]
 r74: [48..49]
 r75: [46..47]
 r76: [44..45]
 r77: [42..43]
 r78: [18..41]
 r79: [30..39]
 r80: [36..37]
 r81: [30..31]
 r82: [28..29]
 r83: [22..27]
 r84: [24..25]
 r85: [22..23]
 r86: [20..21]
 r87: [18..19]
 r88: [6..15]
 r89: [12..13]
 r90: [6..7]
 r91: [4..5]
 r92: [2..3]
 r93: [0..1]
 r94: [88..89]
 r95: [84..85]
 r96: [82..83]
 r97: [76..77]
 r98: [72..73]
 r99: [68..69]
 r100: [64..65]
 r101: [62..63]
 r102: [60..61] [56..57]
 r103: [58..59]
 r104: [50..51]
 r105: [40..41]
 r106: [38..39]
 r107: [36..37] [32..33]
 r108: [34..35]
 r109: [26..27]
 r110: [18..19]
 r111: [16..17]
 r112: [14..15]
 r113: [12..13] [8..9]
 r114: [10..11]
 r115: [4..5]
 r116: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 67
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 68
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 46
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 69
changing reg in insn 49
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 63
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 70
changing reg in insn 73
changing reg in insn 82
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 92
changing reg in insn 96
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 56
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 81
changing reg in insn 79
changing reg in insn 78
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 86
starting the processing of deferred insns
ending the processing of deferred insns


_add_nvp_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={51d,49u} r1={20d,20u,5e} r2={8d,5u} r4={8d,5u} r5={8d,5u} r6={1d,25u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={27d} r18={3d} r19={3d} r20={1d,1u,3e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={6d,3u} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 377{251d,118u,8e} in 88{85 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:185 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (reg:SI 4 si [ i ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ i ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])
        (reg:SI 1 dx [ j ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ j ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
        (reg:DI 2 cx [ bound ])) mSector.c:185 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ bound ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])
        (reg:SI 37 r8 [ k ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ k ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:186 89 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 0 ax [orig:59 st_indx.2 ] [59])
                (plus:SI (reg:SI 0 ax [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:186 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [94])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 st_indx+0 S4 A32])
        (reg:SI 0 ax [orig:59 st_indx.2 ] [59])) mSector.c:186 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 st_indx.2 ] [59])
        (nil)))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 4 [0x4])) mSector.c:187 89 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f44d29f7700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mSector.c:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 0 ax [95])
        (reg:DI 0 ax)) mSector.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])
        (reg:DI 0 ax [95])) mSector.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [orig:60 D.5008 ] [60])
        (sign_extend:DI (reg:SI 0 ax [96]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [96])
        (nil)))
(insn 19 18 20 2 (parallel [
            (set (reg:DI 0 ax [orig:61 D.5008 ] [61])
                (plus:DI (reg:DI 0 ax [orig:60 D.5008 ] [60])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5008 ] [60])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg:DI 1 dx [orig:62 D.5008 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:61 D.5008 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5008 ] [61])
        (nil)))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5009 ] [63])
                (plus:DI (reg/f:DI 0 ax [97])
                    (reg:DI 1 dx [orig:62 D.5008 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.5008 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.5008 ] [62]))
                (nil)))))
(insn 23 22 24 2 (set (reg/f:DI 2 cx [orig:64 D.5010 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.5009 ] [63]) [0 *_9+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5009 ] [63])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 0 ax [orig:65 D.5011 ] [65])
        (sign_extend:DI (reg:SI 0 ax [98]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [98])
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg:DI 1 dx [orig:66 D.5011 ] [66])
                (ashift:DI (reg:DI 0 ax [orig:65 D.5011 ] [65])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5011 ] [65])
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.5009 ] [67])
                (plus:DI (reg/f:DI 0 ax [99])
                    (reg:DI 1 dx [orig:66 D.5011 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.5011 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.5011 ] [66]))
                (nil)))))
(insn 29 28 30 2 (set (reg/f:DI 5 di [orig:68 D.5010 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [orig:67 D.5009 ] [67]) [0 *_13+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.5009 ] [67])
        (nil)))
(insn 30 29 31 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 4 si [orig:69 D.5012 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [100]) [0 *f_15(D)+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 32 31 33 2 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 1 dx [orig:70 D.5011 ] [70])
        (sign_extend:DI (reg:SI 0 ax [101]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [101])
        (nil)))
(insn 34 33 35 2 (set (reg:DI 0 ax [102])
        (reg:DI 1 dx [orig:70 D.5011 ] [70])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:DI 0 ax [102])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (nil))
(insn 36 35 37 2 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg:DI 0 ax [102])
                    (reg:DI 1 dx [orig:70 D.5011 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.5011 ] [70])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:70 D.5011 ] [70])
                (const_int 5 [0x5]))
            (nil))))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 0 ax [103])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 38 37 39 2 (set (reg:DI 0 ax [102])
        (reg:DI 0 ax [103])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 39 38 40 2 (set (reg:DI 0 ax [orig:71 D.5011 ] [71])
        (reg:DI 0 ax [102])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 40 39 41 2 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.5012 ] [72])
                (plus:DI (reg:DI 0 ax [orig:71 D.5011 ] [71])
                    (reg/f:DI 4 si [orig:69 D.5012 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.5011 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:69 D.5012 ] [69])
            (nil))))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [orig:73 D.5009 ] [73])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:72 D.5012 ] [72])
                (const_int 8 [0x8])) [0 _20->nvp+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.5012 ] [72])
        (nil)))
(insn 42 41 43 2 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 1 dx [orig:74 D.5008 ] [74])
        (sign_extend:DI (reg:SI 1 dx [104]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [104])
        (nil)))
(insn 44 43 45 2 (parallel [
            (set (reg:DI 1 dx [orig:75 D.5008 ] [75])
                (plus:DI (reg:DI 1 dx [orig:74 D.5008 ] [74])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.5008 ] [74])
        (nil)))
(insn 45 44 46 2 (parallel [
            (set (reg:DI 1 dx [orig:76 D.5008 ] [76])
                (ashift:DI (reg:DI 1 dx [orig:75 D.5008 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.5008 ] [75])
        (nil)))
(insn 46 45 47 2 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.5009 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:73 D.5009 ] [73])
                    (reg:DI 1 dx [orig:76 D.5008 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.5008 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.5009 ] [73])
            (nil))))
(insn 47 46 48 2 (set (reg/f:DI 4 si [orig:78 D.5010 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.5009 ] [77]) [0 *_25+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.5009 ] [77])
        (nil)))
(insn 48 47 49 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg/f:DI 37 r8 [orig:79 D.5012 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [105]) [0 *f_15(D)+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (nil)))
(insn 50 49 51 2 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 1 dx [orig:80 D.5011 ] [80])
        (sign_extend:DI (reg:SI 0 ax [106]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [106])
        (nil)))
(insn 52 51 53 2 (set (reg:DI 0 ax [107])
        (reg:DI 1 dx [orig:80 D.5011 ] [80])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 0 ax [107])
                (ashift:DI (reg:DI 0 ax [107])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg:DI 0 ax [107])
                (plus:DI (reg:DI 0 ax [107])
                    (reg:DI 1 dx [orig:80 D.5011 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.5011 ] [80])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:80 D.5011 ] [80])
                (const_int 5 [0x5]))
            (nil))))
(insn 55 54 56 2 (parallel [
            (set (reg:DI 0 ax [108])
                (ashift:DI (reg:DI 0 ax [107])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(insn 56 55 57 2 (set (reg:DI 0 ax [107])
        (reg:DI 0 ax [108])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 57 56 58 2 (set (reg:DI 0 ax [orig:81 D.5011 ] [81])
        (reg:DI 0 ax [107])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(insn 58 57 59 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.5012 ] [82])
                (plus:DI (reg:DI 0 ax [orig:81 D.5011 ] [81])
                    (reg/f:DI 37 r8 [orig:79 D.5012 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:81 D.5011 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:79 D.5012 ] [79])
            (nil))))
(insn 59 58 60 2 (set (reg/f:DI 0 ax [orig:83 D.5009 ] [83])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:82 D.5012 ] [82])
                (const_int 8 [0x8])) [0 _30->nvp+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.5012 ] [82])
        (nil)))
(insn 60 59 61 2 (set (reg:SI 1 dx [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:DI 1 dx [orig:84 D.5011 ] [84])
        (sign_extend:DI (reg:SI 1 dx [109]))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [109])
        (nil)))
(insn 62 61 63 2 (parallel [
            (set (reg:DI 1 dx [orig:85 D.5011 ] [85])
                (ashift:DI (reg:DI 1 dx [orig:84 D.5011 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.5011 ] [84])
        (nil)))
(insn 63 62 64 2 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.5009 ] [86])
                (plus:DI (reg/f:DI 0 ax [orig:83 D.5009 ] [83])
                    (reg:DI 1 dx [orig:85 D.5011 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:85 D.5011 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.5009 ] [83])
            (nil))))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [orig:87 D.5010 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 D.5009 ] [86]) [0 *_34+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.5009 ] [86])
        (nil)))
(insn 65 64 66 2 (set (reg:DI 1 dx [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 2 (set (reg:DI 37 r8)
        (reg:DI 1 dx [110])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [110])
        (nil)))
(insn 67 66 68 2 (set (reg:DI 2 cx)
        (reg/f:DI 2 cx [orig:64 D.5010 ] [64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:64 D.5010 ] [64])
        (nil)))
(insn 68 67 69 2 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:68 D.5010 ] [68])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:68 D.5010 ] [68])
        (nil)))
(insn 69 68 70 2 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:78 D.5010 ] [78])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:78 D.5010 ] [78])
        (nil)))
(insn 70 69 71 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.5010 ] [87])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.5010 ] [87])
        (nil)))
(call_insn 71 70 72 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_intersection") [flags 0x41]  <function_decl 0x7f44d29fc200 find_intersection>) [0 find_intersection S1 A8])
            (const_int 0 [0]))) mSector.c:189 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 72 71 73 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (reg/f:DI 2 cx [orig:88 D.5012 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [111]) [0 *f_15(D)+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (nil)))
(insn 74 73 75 2 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:190 89 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:DI 1 dx [orig:89 D.5011 ] [89])
        (sign_extend:DI (reg:SI 0 ax [112]))) mSector.c:190 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [112])
        (nil)))
(insn 76 75 77 2 (set (reg:DI 0 ax [113])
        (reg:DI 1 dx [orig:89 D.5011 ] [89])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 0 ax [113])
                (ashift:DI (reg:DI 0 ax [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 513 {*ashldi3_1}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg:DI 0 ax [113])
                (plus:DI (reg:DI 0 ax [113])
                    (reg:DI 1 dx [orig:89 D.5011 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.5011 ] [89])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.5011 ] [89])
                (const_int 5 [0x5]))
            (nil))))
(insn 79 78 80 2 (parallel [
            (set (reg:DI 0 ax [114])
                (ashift:DI (reg:DI 0 ax [113])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 80 79 81 2 (set (reg:DI 0 ax [113])
        (reg:DI 0 ax [114])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(insn 81 80 82 2 (set (reg:DI 0 ax [orig:90 D.5011 ] [90])
        (reg:DI 0 ax [113])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 82 81 83 2 (parallel [
            (set (reg/f:DI 2 cx [orig:91 D.5012 ] [91])
                (plus:DI (reg/f:DI 2 cx [orig:88 D.5012 ] [88])
                    (reg:DI 0 ax [orig:90 D.5011 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:90 D.5011 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:88 D.5012 ] [88])
            (nil))))
(insn 83 82 84 2 (set (reg:DI 1 dx [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg:DI 0 ax [116])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (nil))
(insn 85 84 86 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [115])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [115])
        (nil)))
(insn 86 85 87 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [116])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 87 86 88 2 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:91 D.5012 ] [91])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:91 D.5012 ] [91])
        (nil)))
(call_insn 88 87 89 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add_nvp") [flags 0x3]  <function_decl 0x7f44d2a01300 add_nvp>) [0 add_nvp S1 A8])
            (const_int 0 [0]))) mSector.c:190 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 89 88 92 2 (set (reg:SI 0 ax [orig:92 D.5013 ] [92])
        (const_int 1 [0x1])) mSector.c:191 89 {*movsi_internal}
     (nil))
(insn 92 89 96 2 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:92 D.5013 ] [92])) mSector.c:191 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:92 D.5013 ] [92])
        (nil)))
(insn 96 92 99 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) mSector.c:192 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 <retval> ] [93])
        (nil)))
(insn 99 96 0 2 (use (reg/i:SI 0 ax)) mSector.c:192 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _is_to_add (_is_to_add, funcdef_no=11, decl_uid=4069, cgraph_uid=11)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 113: point = 0
   Insn 110: point = 0
   Insn 106: point = 1
  BB 5
   Insn 116: point = 4
   Insn 98: point = 4
  BB 6
   Insn 103: point = 5
  BB 4
   Insn 96: point = 6
   Insn 95: point = 6
   Insn 94: point = 7
   Insn 93: point = 8
   Insn 92: point = 8
   Insn 91: point = 9
   Insn 90: point = 10
   Insn 89: point = 11
   Insn 88: point = 13
   Insn 87: point = 15
   Insn 86: point = 16
   Insn 85: point = 18
   Insn 84: point = 20
   Insn 83: point = 21
   Insn 82: point = 23
   Insn 81: point = 25
   Insn 80: point = 26
   Insn 79: point = 28
   Insn 78: point = 30
   Insn 77: point = 32
   Insn 76: point = 33
   Insn 75: point = 35
   Insn 74: point = 37
   Insn 73: point = 39
   Insn 72: point = 41
   Insn 71: point = 42
  BB 3
   Insn 69: point = 43
   Insn 68: point = 43
   Insn 67: point = 44
   Insn 66: point = 45
   Insn 65: point = 45
   Insn 64: point = 46
   Insn 63: point = 47
   Insn 62: point = 48
   Insn 61: point = 50
   Insn 60: point = 52
   Insn 59: point = 53
   Insn 58: point = 55
   Insn 57: point = 57
   Insn 56: point = 58
   Insn 55: point = 60
   Insn 54: point = 62
   Insn 53: point = 63
   Insn 52: point = 65
   Insn 51: point = 67
   Insn 50: point = 69
   Insn 49: point = 70
   Insn 48: point = 72
   Insn 47: point = 74
   Insn 46: point = 76
   Insn 45: point = 78
   Insn 44: point = 80
   Insn 43: point = 81
  BB 2
   Insn 41: point = 82
   Insn 40: point = 82
   Insn 39: point = 83
   Insn 38: point = 84
   Insn 37: point = 84
   Insn 36: point = 85
   Insn 35: point = 86
   Insn 34: point = 87
   Insn 33: point = 88
   Insn 32: point = 90
   Insn 31: point = 92
   Insn 30: point = 94
   Insn 29: point = 96
   Insn 28: point = 97
   Insn 27: point = 98
   Insn 26: point = 100
   Insn 25: point = 102
   Insn 24: point = 104
   Insn 23: point = 106
   Insn 22: point = 108
   Insn 21: point = 109
   Insn 20: point = 110
   Insn 19: point = 112
   Insn 18: point = 114
   Insn 17: point = 115
   Insn 16: point = 117
   Insn 15: point = 119
   Insn 14: point = 120
   Insn 13: point = 122
   Insn 12: point = 124
   Insn 11: point = 125
   Insn 10: point = 127
   Insn 9: point = 129
   Insn 8: point = 131
   Insn 4: point = 132
   Insn 3: point = 132
   Insn 2: point = 132
 r59: [2..5]
 r60: [128..129]
 r61: [126..127]
 r62: [123..125]
 r63: [121..122]
 r64: [87..120]
 r65: [116..117]
 r66: [113..115]
 r67: [111..112]
 r68: [86..110]
 r69: [101..109]
 r70: [105..106]
 r71: [103..104]
 r72: [101..102]
 r73: [99..100]
 r74: [85..98]
 r75: [91..97]
 r76: [93..94]
 r77: [91..92]
 r78: [89..90]
 r79: [84..88]
 r80: [82..83]
 r81: [73..81]
 r82: [77..78]
 r83: [75..76]
 r84: [73..74]
 r85: [71..72]
 r86: [47..70]
 r87: [66..67]
 r88: [64..65]
 r89: [61..63]
 r90: [59..60]
 r91: [46..58]
 r92: [54..55]
 r93: [51..53]
 r94: [49..50]
 r95: [45..48]
 r96: [43..44]
 r97: [36..42]
 r98: [38..39]
 r99: [36..37]
 r100: [34..35]
 r101: [10..33]
 r102: [29..30]
 r103: [27..28]
 r104: [24..26]
 r105: [22..23]
 r106: [9..21]
 r107: [17..18]
 r108: [14..16]
 r109: [12..13]
 r110: [8..11]
 r111: [6..7]
 r112: [0..1]
 r113: [130..131]
 r114: [123..124]
 r115: [118..119]
 r116: [113..114]
 r117: [107..108]
 r118: [95..96]
 r119: [79..80]
 r120: [68..69]
 r121: [61..62]
 r122: [56..57]
 r123: [51..52]
 r124: [40..41]
 r125: [31..32]
 r126: [24..25]
 r127: [19..20]
 r128: [14..15]
Compressing live ranges: from 132 to 106 - 80%
Ranges after the compression:
 r59: [2..3]
 r60: [102..103]
 r61: [100..101]
 r62: [98..99]
 r63: [96..97]
 r64: [68..95]
 r65: [92..93]
 r66: [90..91]
 r67: [88..89]
 r68: [68..87]
 r69: [80..87]
 r70: [84..85]
 r71: [82..83]
 r72: [80..81]
 r73: [78..79]
 r74: [68..77]
 r75: [72..77]
 r76: [74..75]
 r77: [72..73]
 r78: [70..71]
 r79: [68..69]
 r80: [66..67]
 r81: [58..65]
 r82: [62..63]
 r83: [60..61]
 r84: [58..59]
 r85: [56..57]
 r86: [36..55]
 r87: [52..53]
 r88: [50..51]
 r89: [48..49]
 r90: [46..47]
 r91: [36..45]
 r92: [42..43]
 r93: [40..41]
 r94: [38..39]
 r95: [36..37]
 r96: [34..35]
 r97: [28..33]
 r98: [30..31]
 r99: [28..29]
 r100: [26..27]
 r101: [6..25]
 r102: [22..23]
 r103: [20..21]
 r104: [18..19]
 r105: [16..17]
 r106: [6..15]
 r107: [12..13]
 r108: [10..11]
 r109: [8..9]
 r110: [6..7]
 r111: [4..5]
 r112: [0..1]
 r113: [104..105]
 r114: [98..99]
 r115: [94..95]
 r116: [90..91]
 r117: [86..87]
 r118: [76..77]
 r119: [64..65]
 r120: [54..55]
 r121: [48..49]
 r122: [44..45]
 r123: [40..41]
 r124: [32..33]
 r125: [24..25]
 r126: [18..19]
 r127: [14..15]
 r128: [10..11]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 103
changing reg in insn 98
changing reg in insn 106
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 34
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 35
changing reg in insn 21
changing reg in insn 26
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 36
changing reg in insn 28
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 48
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 63
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 64
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 75
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 90
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 91
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 106
changing reg in insn 110
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
starting the processing of deferred insns
ending the processing of deferred insns


_is_to_add

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={49d,48u} r1={19d,16u,2e} r2={10d,6u,2e} r4={14d,11u,2e} r5={10d,7u} r6={1d,30u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={31d,3u} r18={3d} r19={3d} r20={1d,1u,6e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 404{260d,132u,12e} in 96{93 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 113 114 115 116 117 118
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])
        (reg:SI 5 di [ xp ])) mSector.c:194 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ xp ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
        (reg:DI 4 si [ bound ])) mSector.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bound ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (reg:SI 1 dx [ k ])) mSector.c:194 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ k ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [orig:60 D.5015 ] [60])
        (sign_extend:DI (reg:SI 0 ax [113]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [113])
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:DI 0 ax [orig:61 D.5015 ] [61])
                (plus:DI (reg:DI 0 ax [orig:60 D.5015 ] [60])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5015 ] [60])
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 1 dx [orig:62 D.5015 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:61 D.5015 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5015 ] [61])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5016 ] [63])
                (plus:DI (reg/f:DI 0 ax [114])
                    (reg:DI 1 dx [orig:62 D.5015 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.5015 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.5015 ] [62]))
                (nil)))))
(insn 14 13 15 2 (set (reg/f:DI 2 cx [orig:64 D.5017 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.5016 ] [63]) [0 *_7+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5016 ] [63])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [orig:65 D.5018 ] [65])
        (sign_extend:DI (reg:SI 0 ax [115]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [115])
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 1 dx [orig:66 D.5018 ] [66])
                (ashift:DI (reg:DI 0 ax [orig:65 D.5018 ] [65])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5018 ] [65])
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.5016 ] [67])
                (plus:DI (reg/f:DI 0 ax [116])
                    (reg:DI 1 dx [orig:66 D.5018 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.5018 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.5018 ] [66]))
                (nil)))))
(insn 20 19 21 2 (set (reg/f:DI 1 dx [orig:68 D.5017 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [orig:67 D.5016 ] [67]) [0 *_11+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.5016 ] [67])
        (nil)))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [orig:69 D.5016 ] [69])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 4 si [orig:70 D.5015 ] [70])
        (sign_extend:DI (reg:SI 4 si [117]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [117])
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 4 si [orig:71 D.5015 ] [71])
                (plus:DI (reg:DI 4 si [orig:70 D.5015 ] [70])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:70 D.5015 ] [70])
        (nil)))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 4 si [orig:72 D.5015 ] [72])
                (ashift:DI (reg:DI 4 si [orig:71 D.5015 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:71 D.5015 ] [71])
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.5016 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:69 D.5016 ] [69])
                    (reg:DI 4 si [orig:72 D.5015 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:72 D.5015 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5016 ] [69])
            (nil))))
(insn 27 26 28 2 (set (reg/f:DI 4 si [orig:74 D.5017 ] [74])
        (mem/f:DI (reg/f:DI 0 ax [orig:73 D.5016 ] [73]) [0 *_18+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.5016 ] [73])
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 0 ax [orig:75 D.5016 ] [75])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 2 (set (reg:SI 5 di [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 5 di [orig:76 D.5018 ] [76])
        (sign_extend:DI (reg:SI 5 di [118]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 5 di [118])
        (nil)))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 5 di [orig:77 D.5018 ] [77])
                (ashift:DI (reg:DI 5 di [orig:76 D.5018 ] [76])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:76 D.5018 ] [76])
        (nil)))
(insn 32 31 33 2 (parallel [
            (set (reg/f:DI 0 ax [orig:78 D.5016 ] [78])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.5016 ] [75])
                    (reg:DI 5 di [orig:77 D.5018 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:77 D.5018 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.5016 ] [75])
            (nil))))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [orig:79 D.5017 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [orig:78 D.5016 ] [78]) [0 *_23+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.5016 ] [78])
        (nil)))
(insn 34 33 35 2 (set (reg:DI 2 cx)
        (reg/f:DI 2 cx [orig:64 D.5017 ] [64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:64 D.5017 ] [64])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:68 D.5017 ] [68])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.5017 ] [68])
        (nil)))
(insn 36 35 37 2 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:74 D.5017 ] [74])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:74 D.5017 ] [74])
        (nil)))
(insn 37 36 38 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:79 D.5017 ] [79])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.5017 ] [79])
        (nil)))
(call_insn 38 37 39 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("segments_intersect") [flags 0x41]  <function_decl 0x7f44d29f7d00 segments_intersect>) [0 segments_intersect S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 39 38 40 2 (set (reg:SI 0 ax [orig:80 D.5014 ] [80])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 40 39 41 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:80 D.5014 ] [80])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.5014 ] [80])
        (nil)))
(jump_insn 41 40 42 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (nil)
 -> 101)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 119 120 121 122 123
(note 42 41 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 3 (set (reg/f:DI 0 ax [orig:81 D.5016 ] [81])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 3 (set (reg:SI 1 dx [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DI 1 dx [orig:82 D.5015 ] [82])
        (sign_extend:DI (reg:SI 1 dx [119]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [119])
        (nil)))
(insn 46 45 47 3 (parallel [
            (set (reg:DI 1 dx [orig:83 D.5015 ] [83])
                (plus:DI (reg:DI 1 dx [orig:82 D.5015 ] [82])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.5015 ] [82])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.5015 ] [84])
                (ashift:DI (reg:DI 1 dx [orig:83 D.5015 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.5015 ] [83])
        (nil)))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.5016 ] [85])
                (plus:DI (reg/f:DI 0 ax [orig:81 D.5016 ] [81])
                    (reg:DI 1 dx [orig:84 D.5015 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.5015 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.5016 ] [81])
            (nil))))
(insn 49 48 50 3 (set (reg/f:DI 1 dx [orig:86 D.5017 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.5016 ] [85]) [0 *_30+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.5016 ] [85])
        (nil)))
(insn 50 49 51 3 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 0 ax [orig:87 D.5015 ] [87])
        (sign_extend:DI (reg:SI 0 ax [120]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [120])
        (nil)))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 0 ax [orig:88 D.5015 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 D.5015 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:87 D.5015 ] [87])
        (nil)))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 2 cx [orig:89 D.5015 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.5015 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.5015 ] [88])
        (nil)))
(insn 54 53 55 3 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.5016 ] [90])
                (plus:DI (reg/f:DI 0 ax [121])
                    (reg:DI 2 cx [orig:89 D.5015 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:89 D.5015 ] [89])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 2 cx [orig:89 D.5015 ] [89]))
                (nil)))))
(insn 56 55 57 3 (set (reg/f:DI 2 cx [orig:91 D.5017 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.5016 ] [90]) [0 *_35+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.5016 ] [90])
        (nil)))
(insn 57 56 58 3 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 58 57 59 3 (set (reg:DI 0 ax [orig:92 D.5018 ] [92])
        (sign_extend:DI (reg:SI 0 ax [122]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [122])
        (nil)))
(insn 59 58 60 3 (parallel [
            (set (reg:DI 4 si [orig:93 D.5018 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.5018 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:92 D.5018 ] [92])
        (nil)))
(insn 60 59 61 3 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.5016 ] [94])
                (plus:DI (reg/f:DI 0 ax [123])
                    (reg:DI 4 si [orig:93 D.5018 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [123])
        (expr_list:REG_DEAD (reg:DI 4 si [orig:93 D.5018 ] [93])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 4 si [orig:93 D.5018 ] [93]))
                (nil)))))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [orig:95 D.5017 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.5016 ] [94]) [0 *_39+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.5016 ] [94])
        (nil)))
(insn 63 62 64 3 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:86 D.5017 ] [86])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:86 D.5017 ] [86])
        (nil)))
(insn 64 63 65 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:91 D.5017 ] [91])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:91 D.5017 ] [91])
        (nil)))
(insn 65 64 66 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 D.5017 ] [95])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.5017 ] [95])
        (nil)))
(call_insn 66 65 67 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 67 66 68 3 (set (reg:SI 0 ax [orig:96 D.5014 ] [96])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 68 67 69 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 D.5014 ] [96])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:96 D.5014 ] [96])
        (nil)))
(jump_insn 69 68 70 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (nil)
 -> 101)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 124 125 126 127 128
(note 70 69 71 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 4 (set (reg/f:DI 0 ax [orig:97 D.5016 ] [97])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 4 (set (reg:SI 1 dx [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 1 dx [orig:98 D.5018 ] [98])
        (sign_extend:DI (reg:SI 1 dx [124]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [124])
        (nil)))
(insn 74 73 75 4 (parallel [
            (set (reg:DI 1 dx [orig:99 D.5018 ] [99])
                (ashift:DI (reg:DI 1 dx [orig:98 D.5018 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:98 D.5018 ] [98])
        (nil)))
(insn 75 74 76 4 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.5016 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:97 D.5016 ] [97])
                    (reg:DI 1 dx [orig:99 D.5018 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:99 D.5018 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.5016 ] [97])
            (nil))))
(insn 76 75 77 4 (set (reg/f:DI 1 dx [orig:101 D.5017 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 D.5016 ] [100]) [0 *_45+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.5016 ] [100])
        (nil)))
(insn 77 76 78 4 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 0 ax [orig:102 D.5015 ] [102])
        (sign_extend:DI (reg:SI 0 ax [125]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [125])
        (nil)))
(insn 79 78 80 4 (parallel [
            (set (reg:DI 0 ax [orig:103 D.5015 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 D.5015 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:102 D.5015 ] [102])
        (nil)))
(insn 80 79 81 4 (parallel [
            (set (reg:DI 2 cx [orig:104 D.5015 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.5015 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:103 D.5015 ] [103])
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.5016 ] [105])
                (plus:DI (reg/f:DI 0 ax [126])
                    (reg:DI 2 cx [orig:104 D.5015 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [126])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:104 D.5015 ] [104])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 2 cx [orig:104 D.5015 ] [104]))
                (nil)))))
(insn 83 82 84 4 (set (reg/f:DI 2 cx [orig:106 D.5017 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [orig:105 D.5016 ] [105]) [0 *_50+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:105 D.5016 ] [105])
        (nil)))
(insn 84 83 85 4 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DI 0 ax [orig:107 D.5018 ] [107])
        (sign_extend:DI (reg:SI 0 ax [127]))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [127])
        (nil)))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 4 si [orig:108 D.5018 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.5018 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:107 D.5018 ] [107])
        (nil)))
(insn 87 86 88 4 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.5016 ] [109])
                (plus:DI (reg/f:DI 0 ax [128])
                    (reg:DI 4 si [orig:108 D.5018 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [128])
        (expr_list:REG_DEAD (reg:DI 4 si [orig:108 D.5018 ] [108])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                    (reg:DI 4 si [orig:108 D.5018 ] [108]))
                (nil)))))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [orig:110 D.5017 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [orig:109 D.5016 ] [109]) [0 *_54+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.5016 ] [109])
        (nil)))
(insn 90 89 91 4 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:101 D.5017 ] [101])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:101 D.5017 ] [101])
        (nil)))
(insn 91 90 92 4 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:106 D.5017 ] [106])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:106 D.5017 ] [106])
        (nil)))
(insn 92 91 93 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:110 D.5017 ] [110])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.5017 ] [110])
        (nil)))
(call_insn 93 92 94 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 94 93 95 4 (set (reg:SI 0 ax [orig:111 D.5014 ] [111])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 95 94 96 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:111 D.5014 ] [111])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:111 D.5014 ] [111])
        (nil)))
(jump_insn 96 95 97 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (nil)
 -> 101)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 97 96 98 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 116 5 (set (reg:SI 0 ax [orig:59 D.5014 ] [59])
        (const_int 1 [0x1])) mSector.c:197 89 {*movsi_internal}
     (nil))
(jump_insn 116 98 117 5 (set (pc)
        (label_ref 104)) mSector.c:197 650 {jump}
     (nil)
 -> 104)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 117 116 101)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 101 117 102 6 79 "" [3 uses])
(note 102 101 103 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 6 (set (reg:SI 0 ax [orig:59 D.5014 ] [59])
        (const_int 0 [0])) mSector.c:199 89 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 112
(code_label 104 103 105 7 80 "" [1 uses])
(note 105 104 106 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 110 7 (set (reg:SI 0 ax [orig:112 <retval> ] [112])
        (reg:SI 0 ax [orig:59 D.5014 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5014 ] [59])
        (nil)))
(insn 110 106 113 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:112 <retval> ] [112])) mSector.c:200 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:112 <retval> ] [112])
        (nil)))
(insn 113 110 0 7 (use (reg/i:SI 0 ax)) mSector.c:200 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function modify_traj_intersect_bound (modify_traj_intersect_bound, funcdef_no=12, decl_uid=1882, cgraph_uid=12)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 51:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 91:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 110: point = 0
   Insn 107: point = 0
   Insn 103: point = 1
   Insn 100: point = 3
  BB 7
   Insn 98: point = 4
   Insn 97: point = 4
   Insn 95: point = 5
   Insn 94: point = 7
  BB 2
   Insn 113: point = 8
   Insn 7: point = 8
   Insn 3: point = 8
   Insn 2: point = 8
  BB 6
   Insn 91: point = 8
   Insn 90: point = 8
   Insn 89: point = 9
   Insn 88: point = 10
   Insn 87: point = 12
   Insn 86: point = 14
   Insn 85: point = 16
   Insn 84: point = 18
   Insn 83: point = 20
   Insn 82: point = 21
   Insn 81: point = 23
   Insn 80: point = 25
   Insn 79: point = 27
   Insn 78: point = 29
   Insn 77: point = 31
   Insn 76: point = 32
   Insn 75: point = 32
   Insn 74: point = 33
   Insn 73: point = 35
   Insn 72: point = 36
   Insn 71: point = 38
  BB 5
   Insn 69: point = 39
   Insn 68: point = 39
   Insn 66: point = 40
   Insn 65: point = 42
   Insn 64: point = 44
   Insn 63: point = 46
   Insn 62: point = 48
   Insn 61: point = 50
   Insn 60: point = 52
   Insn 59: point = 53
   Insn 58: point = 53
   Insn 57: point = 54
   Insn 56: point = 56
   Insn 55: point = 57
   Insn 54: point = 59
  BB 3
   Insn 115: point = 60
   Insn 27: point = 60
   Insn 26: point = 60
   Insn 25: point = 61
   Insn 24: point = 62
   Insn 23: point = 64
   Insn 22: point = 66
   Insn 21: point = 68
   Insn 20: point = 70
   Insn 19: point = 72
   Insn 18: point = 74
   Insn 17: point = 76
   Insn 16: point = 77
   Insn 15: point = 77
   Insn 14: point = 78
   Insn 13: point = 80
   Insn 12: point = 81
   Insn 11: point = 83
  BB 4
   Insn 51: point = 84
   Insn 50: point = 84
   Insn 49: point = 85
   Insn 48: point = 86
   Insn 47: point = 88
   Insn 46: point = 90
   Insn 45: point = 92
   Insn 44: point = 94
   Insn 43: point = 96
   Insn 42: point = 97
   Insn 41: point = 99
   Insn 40: point = 101
   Insn 39: point = 103
   Insn 38: point = 105
   Insn 37: point = 107
   Insn 36: point = 108
   Insn 35: point = 108
   Insn 34: point = 109
   Insn 33: point = 111
   Insn 32: point = 112
   Insn 31: point = 114
 r59: [4..5]
 r60: [69..81]
 r61: [76..78]
 r62: [69..70]
 r63: [67..68]
 r64: [65..66]
 r65: [63..64]
 r66: [60..62]
 r67: [45..57]
 r68: [52..54]
 r69: [45..46]
 r70: [43..44]
 r71: [41..42]
 r72: [39..40]
 r73: [100..112]
 r74: [107..109]
 r75: [100..101]
 r76: [98..99]
 r77: [91..97]
 r78: [93..94]
 r79: [91..92]
 r80: [89..90]
 r81: [87..88]
 r82: [84..86]
 r83: [24..36]
 r84: [31..33]
 r85: [24..25]
 r86: [22..23]
 r87: [15..21]
 r88: [17..18]
 r89: [15..16]
 r90: [13..14]
 r91: [11..12]
 r92: [8..10]
 r93: [2..3]
 r94: [0..1]
 r95: [82..83]
 r96: [79..80]
 r97: [75..77] [71..72]
 r98: [73..74]
 r99: [60..61]
 r100: [113..114]
 r101: [110..111]
 r102: [106..108] [102..103]
 r103: [104..105]
 r104: [95..96]
 r105: [84..85]
 r106: [58..59]
 r107: [55..56]
 r108: [51..53] [47..48]
 r109: [49..50]
 r110: [37..38]
 r111: [34..35]
 r112: [30..32] [26..27]
 r113: [28..29]
 r114: [19..20]
 r115: [8..9]
 r116: [6..7]
Compressing live ranges: from 115 to 98 - 85%
Ranges after the compression:
 r59: [4..5]
 r60: [60..69]
 r61: [66..67]
 r62: [60..61]
 r63: [58..59]
 r64: [56..57]
 r65: [54..55]
 r66: [52..53]
 r67: [40..49]
 r68: [46..47]
 r69: [40..41]
 r70: [38..39]
 r71: [36..37]
 r72: [34..35]
 r73: [86..95]
 r74: [92..93]
 r75: [86..87]
 r76: [84..85]
 r77: [78..83]
 r78: [80..81]
 r79: [78..79]
 r80: [76..77]
 r81: [74..75]
 r82: [72..73]
 r83: [22..31]
 r84: [28..29]
 r85: [22..23]
 r86: [20..21]
 r87: [14..19]
 r88: [16..17]
 r89: [14..15]
 r90: [12..13]
 r91: [10..11]
 r92: [8..9]
 r93: [2..3]
 r94: [0..1]
 r95: [70..71]
 r96: [68..69]
 r97: [66..67] [62..63]
 r98: [64..65]
 r99: [52..53]
 r100: [96..97]
 r101: [94..95]
 r102: [92..93] [88..89]
 r103: [90..91]
 r104: [82..83]
 r105: [72..73]
 r106: [50..51]
 r107: [48..49]
 r108: [46..47] [42..43]
 r109: [44..45]
 r110: [32..33]
 r111: [30..31]
 r112: [28..29] [24..25]
 r113: [26..27]
 r114: [18..19]
 r115: [8..9]
 r116: [6..7]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 95
changing reg in insn 97
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 55
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 72
changing reg in insn 74
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 100
changing reg in insn 103
changing reg in insn 103
changing reg in insn 107
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 63
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
starting the processing of deferred insns
ending the processing of deferred insns


modify_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={55d,55u} r1={14d,17u,4e} r2={8d,7u} r4={1d,1u} r5={1d,1u} r6={1d,29u} r7={1d,8u} r17={28d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 245{120d,121u,4e} in 87{87 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 113 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:214 89 {*movsi_internal}
     (nil))
(jump_insn 113 7 114 2 (set (pc)
        (label_ref 92)) mSector.c:214 650 {jump}
     (nil)
 -> 92)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 114 113 96)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 95 96 97 98 99
(code_label 96 114 10 3 85 "" [1 uses])
(note 10 96 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 2 cx [orig:60 D.5020 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [95]) [0 *flight_6(D)+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:215 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:61 D.5021 ] [61])
        (sign_extend:DI (reg:SI 0 ax [96]))) mSector.c:215 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [96])
        (nil)))
(insn 15 14 16 3 (set (reg:DI 0 ax [97])
        (reg:DI 1 dx [orig:61 D.5021 ] [61])) mSector.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 513 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg:DI 0 ax [97])
                    (reg:DI 1 dx [orig:61 D.5021 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5021 ] [61])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:61 D.5021 ] [61])
                (const_int 5 [0x5]))
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [98])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [97])
        (reg:DI 0 ax [98])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:62 D.5021 ] [62])
        (reg:DI 0 ax [97])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5020 ] [63])
                (plus:DI (reg:DI 0 ax [orig:62 D.5021 ] [62])
                    (reg/f:DI 2 cx [orig:60 D.5020 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.5021 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:60 D.5020 ] [60])
            (nil))))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:64 D.5022 ] [64])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:63 D.5020 ] [63])
                (const_int 8 [0x8])) [0 _10->nvp+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5020 ] [63])
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [orig:65 D.5023 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.5022 ] [64]) [0 *_11+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5022 ] [64])
        (nil)))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 2 cx [orig:66 D.5023 ] [66])
                (plus:DI (reg/f:DI 0 ax [orig:65 D.5023 ] [65])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5023 ] [65])
        (nil)))
(insn 25 24 26 3 (set (reg:XF 0 ax [99])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:215 131 {*movxf_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (mem:XF (reg/f:DI 2 cx [orig:66 D.5023 ] [66]) [0 *_13+0 S16 A128])
        (reg:XF 0 ax [99])) mSector.c:215 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [99])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:66 D.5023 ] [66])
            (nil))))
(insn 27 26 115 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:216 89 {*movsi_internal}
     (nil))
(jump_insn 115 27 116 3 (set (pc)
        (label_ref 52)) mSector.c:216 650 {jump}
     (nil)
 -> 52)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 116 115 67)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74 75 76 77 78 79 80 81 82 100 101 102 103 104 105
(code_label 67 116 30 4 84 "" [1 uses])
(note 30 67 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 2 cx [orig:73 D.5020 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [100]) [0 *flight_6(D)+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 33 32 34 4 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 1 dx [orig:74 D.5021 ] [74])
        (sign_extend:DI (reg:SI 0 ax [101]))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [101])
        (nil)))
(insn 35 34 36 4 (set (reg:DI 0 ax [102])
        (reg:DI 1 dx [orig:74 D.5021 ] [74])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 0 ax [102])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg:DI 0 ax [102])
                    (reg:DI 1 dx [orig:74 D.5021 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.5021 ] [74])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:74 D.5021 ] [74])
                (const_int 5 [0x5]))
            (nil))))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 0 ax [103])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 39 38 40 4 (set (reg:DI 0 ax [102])
        (reg:DI 0 ax [103])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:75 D.5021 ] [75])
        (reg:DI 0 ax [102])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.5020 ] [76])
                (plus:DI (reg:DI 0 ax [orig:75 D.5021 ] [75])
                    (reg/f:DI 2 cx [orig:73 D.5020 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.5021 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:73 D.5020 ] [73])
            (nil))))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [orig:77 D.5022 ] [77])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:76 D.5020 ] [76])
                (const_int 8 [0x8])) [0 _24->nvp+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.5020 ] [76])
        (nil)))
(insn 43 42 44 4 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 1 dx [orig:78 D.5021 ] [78])
        (sign_extend:DI (reg:SI 1 dx [104]))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [104])
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:79 D.5021 ] [79])
                (ashift:DI (reg:DI 1 dx [orig:78 D.5021 ] [78])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.5021 ] [78])
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.5022 ] [80])
                (plus:DI (reg/f:DI 0 ax [orig:77 D.5022 ] [77])
                    (reg:DI 1 dx [orig:79 D.5021 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.5021 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.5022 ] [77])
            (nil))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [orig:81 D.5023 ] [81])
        (mem/f:DI (reg/f:DI 0 ax [orig:80 D.5022 ] [80]) [0 *_28+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.5022 ] [80])
        (nil)))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 2 cx [orig:82 D.5023 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:81 D.5023 ] [81])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.5023 ] [81])
        (nil)))
(insn 49 48 50 4 (set (reg:XF 0 ax [105])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:216 131 {*movxf_internal_rex64}
     (nil))
(insn 50 49 51 4 (set (mem:XF (reg/f:DI 2 cx [orig:82 D.5023 ] [82]) [0 *_30+0 S16 A128])
        (reg:XF 0 ax [105])) mSector.c:216 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [105])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:82 D.5023 ] [82])
            (nil))))
(insn 51 50 52 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 273 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69 70 71 72 106 107 108 109
(code_label 52 51 53 5 83 "" [1 uses])
(note 53 52 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 5 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (reg/f:DI 2 cx [orig:67 D.5020 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [106]) [0 *flight_6(D)+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 56 55 57 5 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:DI 1 dx [orig:68 D.5021 ] [68])
        (sign_extend:DI (reg:SI 0 ax [107]))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 58 57 59 5 (set (reg:DI 0 ax [108])
        (reg:DI 1 dx [orig:68 D.5021 ] [68])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (parallel [
            (set (reg:DI 0 ax [108])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (nil))
(insn 60 59 61 5 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg:DI 0 ax [108])
                    (reg:DI 1 dx [orig:68 D.5021 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.5021 ] [68])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:68 D.5021 ] [68])
                (const_int 5 [0x5]))
            (nil))))
(insn 61 60 62 5 (parallel [
            (set (reg:DI 0 ax [109])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 62 61 63 5 (set (reg:DI 0 ax [108])
        (reg:DI 0 ax [109])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(insn 63 62 64 5 (set (reg:DI 0 ax [orig:69 D.5021 ] [69])
        (reg:DI 0 ax [108])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 64 63 65 5 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.5020 ] [70])
                (plus:DI (reg:DI 0 ax [orig:69 D.5021 ] [69])
                    (reg/f:DI 2 cx [orig:67 D.5020 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.5021 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:67 D.5020 ] [67])
            (nil))))
(insn 65 64 66 5 (set (reg:SI 0 ax [orig:71 D.5019 ] [71])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:70 D.5020 ] [70])
                (const_int 4 [0x4])) [0 _18->n_nvp+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5020 ] [70])
        (nil)))
(insn 66 65 68 5 (parallel [
            (set (reg:SI 0 ax [orig:72 D.5019 ] [72])
                (plus:SI (reg:SI 0 ax [orig:71 D.5019 ] [71])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 D.5019 ] [71])
        (nil)))
(insn 68 66 69 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:72 D.5019 ] [72])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) mSector.c:216 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5019 ] [72])
        (nil)))
(jump_insn 69 68 70 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:216 612 {*jcc_1}
     (nil)
 -> 67)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 110 111 112 113 114 115
(note 70 69 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 6 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 6 (set (reg/f:DI 2 cx [orig:83 D.5020 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [110]) [0 *flight_6(D)+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 73 72 74 6 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:217 89 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 1 dx [orig:84 D.5021 ] [84])
        (sign_extend:DI (reg:SI 0 ax [111]))) mSector.c:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [111])
        (nil)))
(insn 75 74 76 6 (set (reg:DI 0 ax [112])
        (reg:DI 1 dx [orig:84 D.5021 ] [84])) mSector.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 6 (parallel [
            (set (reg:DI 0 ax [112])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (nil))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg:DI 0 ax [112])
                    (reg:DI 1 dx [orig:84 D.5021 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.5021 ] [84])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.5021 ] [84])
                (const_int 5 [0x5]))
            (nil))))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 0 ax [113])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 79 78 80 6 (set (reg:DI 0 ax [112])
        (reg:DI 0 ax [113])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 80 79 81 6 (set (reg:DI 0 ax [orig:85 D.5021 ] [85])
        (reg:DI 0 ax [112])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 81 80 82 6 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.5020 ] [86])
                (plus:DI (reg:DI 0 ax [orig:85 D.5021 ] [85])
                    (reg/f:DI 2 cx [orig:83 D.5020 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.5021 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:83 D.5020 ] [83])
            (nil))))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [orig:87 D.5022 ] [87])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:86 D.5020 ] [86])
                (const_int 8 [0x8])) [0 _35->nvp+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.5020 ] [86])
        (nil)))
(insn 83 82 84 6 (set (reg:SI 1 dx [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mSector.c:217 89 {*movsi_internal}
     (nil))
(insn 84 83 85 6 (set (reg:DI 1 dx [orig:88 D.5021 ] [88])
        (sign_extend:DI (reg:SI 1 dx [114]))) mSector.c:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [114])
        (nil)))
(insn 85 84 86 6 (parallel [
            (set (reg:DI 1 dx [orig:89 D.5021 ] [89])
                (ashift:DI (reg:DI 1 dx [orig:88 D.5021 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.5021 ] [88])
        (nil)))
(insn 86 85 87 6 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.5022 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:87 D.5022 ] [87])
                    (reg:DI 1 dx [orig:89 D.5021 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.5021 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.5022 ] [87])
            (nil))))
(insn 87 86 88 6 (set (reg/f:DI 0 ax [orig:91 D.5023 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.5022 ] [90]) [0 *_39+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.5022 ] [90])
        (nil)))
(insn 88 87 89 6 (parallel [
            (set (reg/f:DI 2 cx [orig:92 D.5023 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:91 D.5023 ] [91])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.5023 ] [91])
        (nil)))
(insn 89 88 90 6 (set (reg:XF 0 ax [115])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:217 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 6 (set (mem:XF (reg/f:DI 2 cx [orig:92 D.5023 ] [92]) [0 *_41+0 S16 A128])
        (reg:XF 0 ax [115])) mSector.c:217 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [115])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:92 D.5023 ] [92])
            (nil))))
(insn 91 90 92 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:214 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 116
(code_label 92 91 93 7 82 "" [1 uses])
(note 93 92 94 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 7 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:214 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 97 7 (set (reg:SI 0 ax [orig:59 D.5019 ] [59])
        (mem:SI (reg/f:DI 0 ax [116]) [0 *Nflight_4(D)+0 S4 A32])) mSector.c:214 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (nil)))
(insn 97 95 98 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.5019 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mSector.c:214 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5019 ] [59])
        (nil)))
(jump_insn 98 97 99 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) mSector.c:214 612 {*jcc_1}
     (nil)
 -> 96)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 93 94
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 103 8 (set (reg:SI 0 ax [orig:93 D.5019 ] [93])
        (const_int 1 [0x1])) mSector.c:220 89 {*movsi_internal}
     (nil))
(insn 103 100 107 8 (set (reg:SI 0 ax [orig:94 <retval> ] [94])
        (reg:SI 0 ax [orig:93 D.5019 ] [93])) mSector.c:220 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.5019 ] [93])
        (nil)))
(insn 107 103 110 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:94 <retval> ] [94])) mSector.c:221 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 <retval> ] [94])
        (nil)))
(insn 110 107 0 8 (use (reg/i:SI 0 ax)) mSector.c:221 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function set_boundary_flag_onFlight (set_boundary_flag_onFlight, funcdef_no=13, decl_uid=1890, cgraph_uid=13)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 139:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 165:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 168:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 251:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 265:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 268:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 278
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 296
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 303:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 325:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 331:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 338:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 340:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 374
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 391:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 407:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 410:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 420
	 Choosing alt 0 in insn 420:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 437
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 439:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 445:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 452
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 454:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 455:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 468
	 Choosing alt 0 in insn 468:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 471:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 480
	 Choosing alt 0 in insn 480:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 487:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 498:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 508
	 Choosing alt 0 in insn 508:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 510:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 514:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 520:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31

********** Pseudo live ranges #1: **********

  BB 31
   Insn 533: point = 0
   Insn 530: point = 0
   Insn 526: point = 1
   Insn 523: point = 3
  BB 30
   Insn 521: point = 4
   Insn 520: point = 4
   Insn 518: point = 5
   Insn 517: point = 7
  BB 2
   Insn 539: point = 8
   Insn 7: point = 8
   Insn 3: point = 8
   Insn 2: point = 8
  BB 29
   Insn 514: point = 8
  BB 18
   Insn 549: point = 8
   Insn 326: point = 8
   Insn 325: point = 8
   Insn 324: point = 8
   Insn 323: point = 8
   Insn 322: point = 9
   Insn 321: point = 11
   Insn 320: point = 13
   Insn 319: point = 15
   Insn 318: point = 17
   Insn 317: point = 19
   Insn 316: point = 20
   Insn 315: point = 20
   Insn 314: point = 21
   Insn 313: point = 23
   Insn 312: point = 24
   Insn 311: point = 26
   Insn 310: point = 27
   Insn 309: point = 27
   Insn 308: point = 28
   Insn 307: point = 29
   Insn 306: point = 30
   Insn 305: point = 31
   Insn 304: point = 32
   Insn 303: point = 33
   Insn 302: point = 34
  BB 28
   Insn 511: point = 35
   Insn 510: point = 36
   Insn 509: point = 38
   Insn 508: point = 40
   Insn 507: point = 42
   Insn 506: point = 44
   Insn 505: point = 46
   Insn 504: point = 48
   Insn 503: point = 49
   Insn 502: point = 49
   Insn 501: point = 50
   Insn 500: point = 52
   Insn 499: point = 53
   Insn 498: point = 55
   Insn 497: point = 56
   Insn 496: point = 58
   Insn 495: point = 60
   Insn 494: point = 62
   Insn 493: point = 64
   Insn 492: point = 65
   Insn 491: point = 65
   Insn 490: point = 66
   Insn 489: point = 68
   Insn 488: point = 69
   Insn 487: point = 71
   Insn 486: point = 72
   Insn 485: point = 72
  BB 27
   Insn 483: point = 72
   Insn 482: point = 72
   Insn 481: point = 73
   Insn 480: point = 75
   Insn 479: point = 77
   Insn 478: point = 79
   Insn 477: point = 81
   Insn 476: point = 83
   Insn 475: point = 84
   Insn 474: point = 84
   Insn 473: point = 85
   Insn 472: point = 87
   Insn 471: point = 88
   Insn 470: point = 90
   Insn 469: point = 91
   Insn 468: point = 93
   Insn 467: point = 95
   Insn 466: point = 97
   Insn 465: point = 99
   Insn 464: point = 101
   Insn 463: point = 102
   Insn 462: point = 102
   Insn 461: point = 103
   Insn 460: point = 105
   Insn 459: point = 106
   Insn 458: point = 108
  BB 26
   Insn 455: point = 109
   Insn 454: point = 110
   Insn 453: point = 112
   Insn 452: point = 113
   Insn 451: point = 115
   Insn 450: point = 117
   Insn 449: point = 119
   Insn 448: point = 121
   Insn 447: point = 122
   Insn 446: point = 122
   Insn 445: point = 123
   Insn 444: point = 125
   Insn 443: point = 126
   Insn 442: point = 128
  BB 25
   Insn 440: point = 129
   Insn 439: point = 129
   Insn 438: point = 130
   Insn 437: point = 132
   Insn 436: point = 134
   Insn 435: point = 136
   Insn 434: point = 138
   Insn 433: point = 140
   Insn 432: point = 141
   Insn 431: point = 141
   Insn 430: point = 142
   Insn 429: point = 144
   Insn 428: point = 145
   Insn 427: point = 147
  BB 22
   Insn 553: point = 148
   Insn 402: point = 148
   Insn 401: point = 149
   Insn 400: point = 150
   Insn 399: point = 152
   Insn 398: point = 154
   Insn 397: point = 156
   Insn 396: point = 158
   Insn 395: point = 159
   Insn 394: point = 159
   Insn 393: point = 160
   Insn 392: point = 162
   Insn 391: point = 163
   Insn 390: point = 165
  BB 24
   Insn 424: point = 166
   Insn 423: point = 166
   Insn 421: point = 167
   Insn 420: point = 169
   Insn 419: point = 171
   Insn 418: point = 173
   Insn 417: point = 175
   Insn 416: point = 177
   Insn 415: point = 178
   Insn 414: point = 178
   Insn 413: point = 179
   Insn 412: point = 181
   Insn 411: point = 182
   Insn 410: point = 184
  BB 19
   Insn 551: point = 185
   Insn 331: point = 185
  BB 17
   Insn 300: point = 185
   Insn 299: point = 185
   Insn 298: point = 186
   Insn 297: point = 188
   Insn 296: point = 190
   Insn 295: point = 192
   Insn 294: point = 194
   Insn 293: point = 196
   Insn 292: point = 198
   Insn 291: point = 199
   Insn 290: point = 199
   Insn 289: point = 200
   Insn 288: point = 202
   Insn 287: point = 203
   Insn 286: point = 205
  BB 14
   Insn 547: point = 206
   Insn 260: point = 206
   Insn 259: point = 207
   Insn 258: point = 208
   Insn 257: point = 210
   Insn 256: point = 212
   Insn 255: point = 214
   Insn 254: point = 216
   Insn 253: point = 217
   Insn 252: point = 217
   Insn 251: point = 218
   Insn 250: point = 220
   Insn 249: point = 221
   Insn 248: point = 223
  BB 16
   Insn 283: point = 224
   Insn 282: point = 224
   Insn 280: point = 225
   Insn 279: point = 227
   Insn 278: point = 229
   Insn 277: point = 231
   Insn 276: point = 233
   Insn 275: point = 235
   Insn 274: point = 237
   Insn 273: point = 238
   Insn 272: point = 238
   Insn 271: point = 239
   Insn 270: point = 241
   Insn 269: point = 242
   Insn 268: point = 244
  BB 11
   Insn 545: point = 245
   Insn 188: point = 245
  BB 10
   Insn 186: point = 245
   Insn 185: point = 245
   Insn 183: point = 246
   Insn 182: point = 248
   Insn 181: point = 250
   Insn 180: point = 252
   Insn 179: point = 254
   Insn 178: point = 256
   Insn 177: point = 258
   Insn 176: point = 259
   Insn 175: point = 259
   Insn 174: point = 260
   Insn 173: point = 262
   Insn 172: point = 263
   Insn 171: point = 265
  BB 3
   Insn 541: point = 266
   Insn 36: point = 266
   Insn 35: point = 266
   Insn 34: point = 266
   Insn 33: point = 267
   Insn 32: point = 269
   Insn 31: point = 271
   Insn 30: point = 273
   Insn 29: point = 275
   Insn 28: point = 276
   Insn 27: point = 276
   Insn 26: point = 277
   Insn 25: point = 279
   Insn 24: point = 280
   Insn 23: point = 282
   Insn 22: point = 283
   Insn 21: point = 284
   Insn 20: point = 286
   Insn 19: point = 288
   Insn 18: point = 290
   Insn 17: point = 292
   Insn 16: point = 293
   Insn 15: point = 293
   Insn 14: point = 294
   Insn 13: point = 296
   Insn 12: point = 297
   Insn 11: point = 299
  BB 9
   Insn 168: point = 300
  BB 7
   Insn 543: point = 300
   Insn 141: point = 300
   Insn 140: point = 301
   Insn 139: point = 302
   Insn 138: point = 304
   Insn 137: point = 306
   Insn 136: point = 308
   Insn 135: point = 310
   Insn 134: point = 312
   Insn 133: point = 313
   Insn 132: point = 315
   Insn 131: point = 317
   Insn 130: point = 319
   Insn 129: point = 321
   Insn 128: point = 323
   Insn 127: point = 324
   Insn 126: point = 324
   Insn 125: point = 325
   Insn 124: point = 327
   Insn 123: point = 328
   Insn 122: point = 330
  BB 8
   Insn 165: point = 331
   Insn 164: point = 332
   Insn 163: point = 333
   Insn 162: point = 335
   Insn 161: point = 337
   Insn 160: point = 339
   Insn 159: point = 341
   Insn 158: point = 343
   Insn 157: point = 344
   Insn 156: point = 346
   Insn 155: point = 348
   Insn 154: point = 350
   Insn 153: point = 352
   Insn 152: point = 354
   Insn 151: point = 355
   Insn 150: point = 355
   Insn 149: point = 356
   Insn 148: point = 358
   Insn 147: point = 359
   Insn 146: point = 361
  BB 6
   Insn 117: point = 362
   Insn 116: point = 362
   Insn 115: point = 363
   Insn 114: point = 364
   Insn 113: point = 366
   Insn 112: point = 368
   Insn 111: point = 370
   Insn 110: point = 372
   Insn 109: point = 374
   Insn 108: point = 376
   Insn 107: point = 377
   Insn 106: point = 379
   Insn 105: point = 381
   Insn 104: point = 383
   Insn 103: point = 385
   Insn 102: point = 387
   Insn 101: point = 388
   Insn 100: point = 388
   Insn 99: point = 389
   Insn 98: point = 391
   Insn 97: point = 392
   Insn 96: point = 394
  BB 5
   Insn 93: point = 395
   Insn 92: point = 395
   Insn 91: point = 396
   Insn 90: point = 397
   Insn 89: point = 397
   Insn 88: point = 398
   Insn 87: point = 399
   Insn 86: point = 400
   Insn 85: point = 402
   Insn 84: point = 404
   Insn 83: point = 406
   Insn 82: point = 408
   Insn 81: point = 410
   Insn 80: point = 411
   Insn 79: point = 413
   Insn 78: point = 415
   Insn 77: point = 417
   Insn 76: point = 419
   Insn 75: point = 421
   Insn 74: point = 422
   Insn 73: point = 422
   Insn 72: point = 423
   Insn 71: point = 425
   Insn 70: point = 426
   Insn 69: point = 428
   Insn 68: point = 429
   Insn 67: point = 430
  BB 4
   Insn 65: point = 431
   Insn 64: point = 431
   Insn 63: point = 432
   Insn 62: point = 433
   Insn 61: point = 433
   Insn 60: point = 434
   Insn 59: point = 435
   Insn 58: point = 436
   Insn 57: point = 438
   Insn 56: point = 440
   Insn 55: point = 442
   Insn 54: point = 444
   Insn 53: point = 445
   Insn 52: point = 447
   Insn 51: point = 449
   Insn 50: point = 451
   Insn 49: point = 453
   Insn 48: point = 455
   Insn 47: point = 456
   Insn 46: point = 456
   Insn 45: point = 457
   Insn 44: point = 459
   Insn 43: point = 460
   Insn 42: point = 462
   Insn 41: point = 463
   Insn 40: point = 464
  BB 15
   Insn 265: point = 465
  BB 13
   Insn 245: point = 465
   Insn 244: point = 465
   Insn 243: point = 466
   Insn 242: point = 467
   Insn 241: point = 467
   Insn 240: point = 468
   Insn 239: point = 469
   Insn 238: point = 470
   Insn 237: point = 472
   Insn 236: point = 474
   Insn 235: point = 476
   Insn 234: point = 478
   Insn 233: point = 480
   Insn 232: point = 481
   Insn 231: point = 483
   Insn 230: point = 485
   Insn 229: point = 487
   Insn 228: point = 489
   Insn 227: point = 491
   Insn 226: point = 492
   Insn 225: point = 492
   Insn 224: point = 493
   Insn 223: point = 495
   Insn 222: point = 496
   Insn 221: point = 498
   Insn 220: point = 499
   Insn 219: point = 500
  BB 12
   Insn 217: point = 501
   Insn 216: point = 501
   Insn 215: point = 502
   Insn 214: point = 503
   Insn 213: point = 503
   Insn 212: point = 504
   Insn 211: point = 505
   Insn 210: point = 506
   Insn 209: point = 508
   Insn 208: point = 510
   Insn 207: point = 512
   Insn 206: point = 514
   Insn 205: point = 515
   Insn 204: point = 517
   Insn 203: point = 519
   Insn 202: point = 521
   Insn 201: point = 523
   Insn 200: point = 525
   Insn 199: point = 526
   Insn 198: point = 526
   Insn 197: point = 527
   Insn 196: point = 529
   Insn 195: point = 530
   Insn 194: point = 532
   Insn 193: point = 533
   Insn 192: point = 534
  BB 23
   Insn 407: point = 535
  BB 21
   Insn 388: point = 535
   Insn 387: point = 535
   Insn 386: point = 536
   Insn 385: point = 537
   Insn 384: point = 537
   Insn 383: point = 538
   Insn 382: point = 539
   Insn 381: point = 540
   Insn 380: point = 542
   Insn 379: point = 544
   Insn 378: point = 546
   Insn 377: point = 548
   Insn 376: point = 550
   Insn 375: point = 551
   Insn 374: point = 553
   Insn 373: point = 555
   Insn 372: point = 557
   Insn 371: point = 559
   Insn 370: point = 561
   Insn 369: point = 562
   Insn 368: point = 562
   Insn 367: point = 563
   Insn 366: point = 565
   Insn 365: point = 566
   Insn 364: point = 568
   Insn 363: point = 569
   Insn 362: point = 570
  BB 20
   Insn 360: point = 571
   Insn 359: point = 571
   Insn 358: point = 572
   Insn 357: point = 573
   Insn 356: point = 573
   Insn 355: point = 574
   Insn 354: point = 575
   Insn 353: point = 576
   Insn 352: point = 578
   Insn 351: point = 580
   Insn 350: point = 582
   Insn 349: point = 584
   Insn 348: point = 585
   Insn 347: point = 587
   Insn 346: point = 589
   Insn 345: point = 591
   Insn 344: point = 593
   Insn 343: point = 595
   Insn 342: point = 596
   Insn 341: point = 596
   Insn 340: point = 597
   Insn 339: point = 599
   Insn 338: point = 600
   Insn 337: point = 602
   Insn 336: point = 603
   Insn 335: point = 604
 r59: [4..5]
 r60: [285..297]
 r61: [292..294]
 r62: [285..286]
 r63: [283..284]
 r64: [268..280]
 r65: [275..277]
 r66: [268..269]
 r67: [266..267]
 r68: [251..263]
 r69: [258..260]
 r70: [251..252]
 r71: [249..250]
 r72: [247..248]
 r73: [245..246]
 r74: [435..464]
 r75: [434..463]
 r76: [448..460]
 r77: [455..457]
 r78: [448..449]
 r79: [446..447]
 r80: [439..445]
 r81: [441..442]
 r82: [439..440]
 r83: [437..438]
 r84: [433..436]
 r85: [431..432]
 r86: [399..430]
 r87: [398..429]
 r88: [414..426]
 r89: [421..423]
 r90: [414..415]
 r91: [412..413]
 r92: [403..411]
 r93: [407..408]
 r94: [405..406]
 r95: [403..404]
 r96: [401..402]
 r97: [397..400]
 r98: [395..396]
 r99: [380..392]
 r100: [387..389]
 r101: [380..381]
 r102: [378..379]
 r103: [371..377]
 r104: [373..374]
 r105: [371..372]
 r106: [369..370]
 r107: [367..368]
 r108: [365..366]
 r109: [362..364]
 r110: [316..328]
 r111: [323..325]
 r112: [316..317]
 r113: [314..315]
 r114: [307..313]
 r115: [309..310]
 r116: [307..308]
 r117: [305..306]
 r118: [303..304]
 r119: [300..302]
 r120: [347..359]
 r121: [354..356]
 r122: [347..348]
 r123: [345..346]
 r124: [338..344]
 r125: [340..341]
 r126: [338..339]
 r127: [336..337]
 r128: [334..335]
 r129: [331..333]
 r130: [230..242]
 r131: [237..239]
 r132: [230..231]
 r133: [228..229]
 r134: [226..227]
 r135: [224..225]
 r136: [505..534]
 r137: [504..533]
 r138: [518..530]
 r139: [525..527]
 r140: [518..519]
 r141: [516..517]
 r142: [509..515]
 r143: [511..512]
 r144: [509..510]
 r145: [507..508]
 r146: [503..506]
 r147: [501..502]
 r148: [469..500]
 r149: [468..499]
 r150: [484..496]
 r151: [491..493]
 r152: [484..485]
 r153: [482..483]
 r154: [473..481]
 r155: [477..478]
 r156: [475..476]
 r157: [473..474]
 r158: [471..472]
 r159: [467..470]
 r160: [465..466]
 r161: [209..221]
 r162: [216..218]
 r163: [209..210]
 r164: [206..208]
 r165: [191..203]
 r166: [198..200]
 r167: [191..192]
 r168: [189..190]
 r169: [187..188]
 r170: [185..186]
 r171: [29..34]
 r172: [12..24]
 r173: [19..21]
 r174: [12..13]
 r175: [10..11]
 r176: [8..9]
 r177: [170..182]
 r178: [177..179]
 r179: [170..171]
 r180: [168..169]
 r181: [166..167]
 r182: [575..604]
 r183: [574..603]
 r184: [588..600]
 r185: [595..597]
 r186: [588..589]
 r187: [586..587]
 r188: [579..585]
 r189: [581..582]
 r190: [579..580]
 r191: [577..578]
 r192: [573..576]
 r193: [571..572]
 r194: [539..570]
 r195: [538..569]
 r196: [554..566]
 r197: [561..563]
 r198: [554..555]
 r199: [552..553]
 r200: [543..551]
 r201: [547..548]
 r202: [545..546]
 r203: [543..544]
 r204: [541..542]
 r205: [537..540]
 r206: [535..536]
 r207: [151..163]
 r208: [158..160]
 r209: [151..152]
 r210: [148..150]
 r211: [133..145]
 r212: [140..142]
 r213: [133..134]
 r214: [131..132]
 r215: [129..130]
 r216: [114..126]
 r217: [121..123]
 r218: [114..115]
 r219: [109..113]
 r220: [109..110]
 r221: [94..106]
 r222: [101..103]
 r223: [94..95]
 r224: [92..93]
 r225: [72..91]
 r226: [76..88]
 r227: [83..85]
 r228: [76..77]
 r229: [74..75]
 r230: [72..73]
 r231: [57..69]
 r232: [64..66]
 r233: [57..58]
 r234: [35..56]
 r235: [41..53]
 r236: [48..50]
 r237: [41..42]
 r238: [39..40]
 r239: [37..38]
 r240: [35..36]
 r241: [2..3]
 r242: [0..1]
 r243: [298..299]
 r244: [295..296]
 r245: [291..293] [287..288]
 r246: [289..290]
 r247: [281..282]
 r248: [278..279]
 r249: [274..276] [270..271]
 r250: [272..273]
 r251: [461..462]
 r252: [458..459]
 r253: [454..456] [450..451]
 r254: [452..453]
 r255: [443..444]
 r256: [427..428]
 r257: [424..425]
 r258: [420..422] [416..417]
 r259: [418..419]
 r260: [409..410]
 r261: [393..394]
 r262: [390..391]
 r263: [386..388] [382..383]
 r264: [384..385]
 r265: [375..376]
 r266: [362..363]
 r267: [329..330]
 r268: [326..327]
 r269: [322..324] [318..319]
 r270: [320..321]
 r271: [311..312]
 r272: [300..301]
 r273: [360..361]
 r274: [357..358]
 r275: [353..355] [349..350]
 r276: [351..352]
 r277: [342..343]
 r278: [331..332]
 r279: [264..265]
 r280: [261..262]
 r281: [257..259] [253..254]
 r282: [255..256]
 r283: [531..532]
 r284: [528..529]
 r285: [524..526] [520..521]
 r286: [522..523]
 r287: [513..514]
 r288: [497..498]
 r289: [494..495]
 r290: [490..492] [486..487]
 r291: [488..489]
 r292: [479..480]
 r293: [222..223]
 r294: [219..220]
 r295: [215..217] [211..212]
 r296: [213..214]
 r297: [206..207]
 r298: [243..244]
 r299: [240..241]
 r300: [236..238] [232..233]
 r301: [234..235]
 r302: [204..205]
 r303: [201..202]
 r304: [197..199] [193..194]
 r305: [195..196]
 r306: [32..33]
 r307: [28..31]
 r308: [27..30]
 r309: [25..26]
 r310: [22..23]
 r311: [18..20] [14..15]
 r312: [16..17]
 r313: [601..602]
 r314: [598..599]
 r315: [594..596] [590..591]
 r316: [592..593]
 r317: [583..584]
 r318: [567..568]
 r319: [564..565]
 r320: [560..562] [556..557]
 r321: [558..559]
 r322: [549..550]
 r323: [164..165]
 r324: [161..162]
 r325: [157..159] [153..154]
 r326: [155..156]
 r327: [148..149]
 r328: [183..184]
 r329: [180..181]
 r330: [176..178] [172..173]
 r331: [174..175]
 r332: [146..147]
 r333: [143..144]
 r334: [139..141] [135..136]
 r335: [137..138]
 r336: [127..128]
 r337: [124..125]
 r338: [120..122] [116..117]
 r339: [118..119]
 r340: [111..112]
 r341: [107..108]
 r342: [104..105]
 r343: [100..102] [96..97]
 r344: [98..99]
 r345: [89..90]
 r346: [86..87]
 r347: [82..84] [78..79]
 r348: [80..81]
 r349: [70..71]
 r350: [67..68]
 r351: [63..65] [59..60]
 r352: [61..62]
 r353: [54..55]
 r354: [51..52]
 r355: [47..49] [43..44]
 r356: [45..46]
 r357: [6..7]
Compressing live ranges: from 605 to 488 - 80%
Ranges after the compression:
 r59: [4..5]
 r60: [234..243]
 r61: [240..241]
 r62: [234..235]
 r63: [232..233]
 r64: [220..229]
 r65: [226..227]
 r66: [220..221]
 r67: [218..219]
 r68: [206..215]
 r69: [212..213]
 r70: [206..207]
 r71: [204..205]
 r72: [202..203]
 r73: [200..201]
 r74: [356..379]
 r75: [356..379]
 r76: [368..377]
 r77: [374..375]
 r78: [368..369]
 r79: [366..367]
 r80: [360..365]
 r81: [362..363]
 r82: [360..361]
 r83: [358..359]
 r84: [356..357]
 r85: [354..355]
 r86: [328..353]
 r87: [328..353]
 r88: [342..351]
 r89: [348..349]
 r90: [342..343]
 r91: [340..341]
 r92: [332..339]
 r93: [336..337]
 r94: [334..335]
 r95: [332..333]
 r96: [330..331]
 r97: [328..329]
 r98: [326..327]
 r99: [314..323]
 r100: [320..321]
 r101: [314..315]
 r102: [312..313]
 r103: [306..311]
 r104: [308..309]
 r105: [306..307]
 r106: [304..305]
 r107: [302..303]
 r108: [300..301]
 r109: [298..299]
 r110: [260..269]
 r111: [266..267]
 r112: [260..261]
 r113: [258..259]
 r114: [252..257]
 r115: [254..255]
 r116: [252..253]
 r117: [250..251]
 r118: [248..249]
 r119: [246..247]
 r120: [286..295]
 r121: [292..293]
 r122: [286..287]
 r123: [284..285]
 r124: [278..283]
 r125: [280..281]
 r126: [278..279]
 r127: [276..277]
 r128: [274..275]
 r129: [272..273]
 r130: [188..197]
 r131: [194..195]
 r132: [188..189]
 r133: [186..187]
 r134: [184..185]
 r135: [182..183]
 r136: [410..433]
 r137: [410..433]
 r138: [422..431]
 r139: [428..429]
 r140: [422..423]
 r141: [420..421]
 r142: [414..419]
 r143: [416..417]
 r144: [414..415]
 r145: [412..413]
 r146: [410..411]
 r147: [408..409]
 r148: [382..407]
 r149: [382..407]
 r150: [396..405]
 r151: [402..403]
 r152: [396..397]
 r153: [394..395]
 r154: [386..393]
 r155: [390..391]
 r156: [388..389]
 r157: [386..387]
 r158: [384..385]
 r159: [382..383]
 r160: [380..381]
 r161: [170..179]
 r162: [176..177]
 r163: [170..171]
 r164: [168..169]
 r165: [156..165]
 r166: [162..163]
 r167: [156..157]
 r168: [154..155]
 r169: [152..153]
 r170: [150..151]
 r171: [24..27]
 r172: [12..21]
 r173: [18..19]
 r174: [12..13]
 r175: [10..11]
 r176: [8..9]
 r177: [138..147]
 r178: [144..145]
 r179: [138..139]
 r180: [136..137]
 r181: [134..135]
 r182: [464..487]
 r183: [464..487]
 r184: [476..485]
 r185: [482..483]
 r186: [476..477]
 r187: [474..475]
 r188: [468..473]
 r189: [470..471]
 r190: [468..469]
 r191: [466..467]
 r192: [464..465]
 r193: [462..463]
 r194: [436..461]
 r195: [436..461]
 r196: [450..459]
 r197: [456..457]
 r198: [450..451]
 r199: [448..449]
 r200: [440..447]
 r201: [444..445]
 r202: [442..443]
 r203: [440..441]
 r204: [438..439]
 r205: [436..437]
 r206: [434..435]
 r207: [122..131]
 r208: [128..129]
 r209: [122..123]
 r210: [120..121]
 r211: [108..117]
 r212: [114..115]
 r213: [108..109]
 r214: [106..107]
 r215: [104..105]
 r216: [92..101]
 r217: [98..99]
 r218: [92..93]
 r219: [88..91]
 r220: [88..89]
 r221: [76..85]
 r222: [82..83]
 r223: [76..77]
 r224: [74..75]
 r225: [58..73]
 r226: [62..71]
 r227: [68..69]
 r228: [62..63]
 r229: [60..61]
 r230: [58..59]
 r231: [46..55]
 r232: [52..53]
 r233: [46..47]
 r234: [28..45]
 r235: [34..43]
 r236: [40..41]
 r237: [34..35]
 r238: [32..33]
 r239: [30..31]
 r240: [28..29]
 r241: [2..3]
 r242: [0..1]
 r243: [244..245]
 r244: [242..243]
 r245: [240..241] [236..237]
 r246: [238..239]
 r247: [230..231]
 r248: [228..229]
 r249: [226..227] [222..223]
 r250: [224..225]
 r251: [378..379]
 r252: [376..377]
 r253: [374..375] [370..371]
 r254: [372..373]
 r255: [364..365]
 r256: [352..353]
 r257: [350..351]
 r258: [348..349] [344..345]
 r259: [346..347]
 r260: [338..339]
 r261: [324..325]
 r262: [322..323]
 r263: [320..321] [316..317]
 r264: [318..319]
 r265: [310..311]
 r266: [298..299]
 r267: [270..271]
 r268: [268..269]
 r269: [266..267] [262..263]
 r270: [264..265]
 r271: [256..257]
 r272: [246..247]
 r273: [296..297]
 r274: [294..295]
 r275: [292..293] [288..289]
 r276: [290..291]
 r277: [282..283]
 r278: [272..273]
 r279: [216..217]
 r280: [214..215]
 r281: [212..213] [208..209]
 r282: [210..211]
 r283: [432..433]
 r284: [430..431]
 r285: [428..429] [424..425]
 r286: [426..427]
 r287: [418..419]
 r288: [406..407]
 r289: [404..405]
 r290: [402..403] [398..399]
 r291: [400..401]
 r292: [392..393]
 r293: [180..181]
 r294: [178..179]
 r295: [176..177] [172..173]
 r296: [174..175]
 r297: [168..169]
 r298: [198..199]
 r299: [196..197]
 r300: [194..195] [190..191]
 r301: [192..193]
 r302: [166..167]
 r303: [164..165]
 r304: [162..163] [158..159]
 r305: [160..161]
 r306: [26..27]
 r307: [24..25]
 r308: [24..25]
 r309: [22..23]
 r310: [20..21]
 r311: [18..19] [14..15]
 r312: [16..17]
 r313: [486..487]
 r314: [484..485]
 r315: [482..483] [478..479]
 r316: [480..481]
 r317: [472..473]
 r318: [460..461]
 r319: [458..459]
 r320: [456..457] [452..453]
 r321: [454..455]
 r322: [446..447]
 r323: [132..133]
 r324: [130..131]
 r325: [128..129] [124..125]
 r326: [126..127]
 r327: [120..121]
 r328: [148..149]
 r329: [146..147]
 r330: [144..145] [140..141]
 r331: [142..143]
 r332: [118..119]
 r333: [116..117]
 r334: [114..115] [110..111]
 r335: [112..113]
 r336: [102..103]
 r337: [100..101]
 r338: [98..99] [94..95]
 r339: [96..97]
 r340: [90..91]
 r341: [86..87]
 r342: [84..85]
 r343: [82..83] [78..79]
 r344: [80..81]
 r345: [72..73]
 r346: [70..71]
 r347: [68..69] [64..65]
 r348: [66..67]
 r349: [56..57]
 r350: [54..55]
 r351: [52..53] [48..49]
 r352: [50..51]
 r353: [44..45]
 r354: [42..43]
 r355: [40..41] [36..37]
 r356: [38..39]
 r357: [6..7]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 518
changing reg in insn 520
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 27
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 172
changing reg in insn 174
changing reg in insn 177
changing reg in insn 175
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 40
changing reg in insn 59
changing reg in insn 41
changing reg in insn 60
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 87
changing reg in insn 68
changing reg in insn 88
changing reg in insn 70
changing reg in insn 72
changing reg in insn 75
changing reg in insn 73
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 85
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 100
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 111
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 123
changing reg in insn 125
changing reg in insn 128
changing reg in insn 126
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 137
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 147
changing reg in insn 149
changing reg in insn 152
changing reg in insn 150
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 161
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 269
changing reg in insn 271
changing reg in insn 274
changing reg in insn 272
changing reg in insn 274
changing reg in insn 277
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 192
changing reg in insn 211
changing reg in insn 193
changing reg in insn 212
changing reg in insn 195
changing reg in insn 197
changing reg in insn 200
changing reg in insn 198
changing reg in insn 200
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 209
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 239
changing reg in insn 220
changing reg in insn 240
changing reg in insn 222
changing reg in insn 224
changing reg in insn 227
changing reg in insn 225
changing reg in insn 227
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 237
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 249
changing reg in insn 258
changing reg in insn 251
changing reg in insn 254
changing reg in insn 252
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 287
changing reg in insn 289
changing reg in insn 292
changing reg in insn 290
changing reg in insn 292
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 302
changing reg in insn 307
changing reg in insn 303
changing reg in insn 304
changing reg in insn 312
changing reg in insn 314
changing reg in insn 317
changing reg in insn 315
changing reg in insn 317
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 411
changing reg in insn 413
changing reg in insn 416
changing reg in insn 414
changing reg in insn 416
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 423
changing reg in insn 335
changing reg in insn 354
changing reg in insn 336
changing reg in insn 355
changing reg in insn 338
changing reg in insn 340
changing reg in insn 343
changing reg in insn 341
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 352
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 356
changing reg in insn 358
changing reg in insn 359
changing reg in insn 362
changing reg in insn 382
changing reg in insn 363
changing reg in insn 383
changing reg in insn 365
changing reg in insn 367
changing reg in insn 370
changing reg in insn 368
changing reg in insn 370
changing reg in insn 373
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 380
changing reg in insn 377
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 391
changing reg in insn 400
changing reg in insn 393
changing reg in insn 396
changing reg in insn 394
changing reg in insn 396
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 402
changing reg in insn 428
changing reg in insn 430
changing reg in insn 433
changing reg in insn 431
changing reg in insn 433
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 443
changing reg in insn 445
changing reg in insn 448
changing reg in insn 446
changing reg in insn 448
changing reg in insn 451
changing reg in insn 452
changing reg in insn 455
changing reg in insn 454
changing reg in insn 455
changing reg in insn 459
changing reg in insn 461
changing reg in insn 464
changing reg in insn 462
changing reg in insn 464
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 482
changing reg in insn 471
changing reg in insn 473
changing reg in insn 476
changing reg in insn 474
changing reg in insn 476
changing reg in insn 479
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 482
changing reg in insn 488
changing reg in insn 497
changing reg in insn 490
changing reg in insn 493
changing reg in insn 491
changing reg in insn 493
changing reg in insn 496
changing reg in insn 497
changing reg in insn 497
changing reg in insn 511
changing reg in insn 499
changing reg in insn 501
changing reg in insn 504
changing reg in insn 502
changing reg in insn 504
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 523
changing reg in insn 526
changing reg in insn 526
changing reg in insn 530
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 32
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 48
changing reg in insn 47
changing reg in insn 46
changing reg in insn 51
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 78
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 104
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 105
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 108
changing reg in insn 109
changing reg in insn 115
changing reg in insn 116
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 128
changing reg in insn 127
changing reg in insn 126
changing reg in insn 131
changing reg in insn 129
changing reg in insn 128
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 154
changing reg in insn 152
changing reg in insn 151
changing reg in insn 150
changing reg in insn 155
changing reg in insn 153
changing reg in insn 152
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 158
changing reg in insn 159
changing reg in insn 164
changing reg in insn 165
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 179
changing reg in insn 177
changing reg in insn 176
changing reg in insn 175
changing reg in insn 180
changing reg in insn 178
changing reg in insn 177
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 202
changing reg in insn 200
changing reg in insn 199
changing reg in insn 198
changing reg in insn 203
changing reg in insn 201
changing reg in insn 200
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 229
changing reg in insn 227
changing reg in insn 226
changing reg in insn 225
changing reg in insn 230
changing reg in insn 228
changing reg in insn 227
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 233
changing reg in insn 234
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 256
changing reg in insn 254
changing reg in insn 253
changing reg in insn 252
changing reg in insn 257
changing reg in insn 255
changing reg in insn 254
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 259
changing reg in insn 260
changing reg in insn 268
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 276
changing reg in insn 274
changing reg in insn 273
changing reg in insn 272
changing reg in insn 277
changing reg in insn 275
changing reg in insn 274
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 294
changing reg in insn 292
changing reg in insn 291
changing reg in insn 290
changing reg in insn 295
changing reg in insn 293
changing reg in insn 292
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 308
changing reg in insn 306
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 319
changing reg in insn 317
changing reg in insn 316
changing reg in insn 315
changing reg in insn 320
changing reg in insn 318
changing reg in insn 317
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 340
changing reg in insn 345
changing reg in insn 343
changing reg in insn 342
changing reg in insn 341
changing reg in insn 346
changing reg in insn 344
changing reg in insn 343
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 349
changing reg in insn 350
changing reg in insn 364
changing reg in insn 365
changing reg in insn 366
changing reg in insn 367
changing reg in insn 372
changing reg in insn 370
changing reg in insn 369
changing reg in insn 368
changing reg in insn 373
changing reg in insn 371
changing reg in insn 370
changing reg in insn 369
changing reg in insn 371
changing reg in insn 372
changing reg in insn 376
changing reg in insn 377
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 393
changing reg in insn 398
changing reg in insn 396
changing reg in insn 395
changing reg in insn 394
changing reg in insn 399
changing reg in insn 397
changing reg in insn 396
changing reg in insn 395
changing reg in insn 397
changing reg in insn 398
changing reg in insn 401
changing reg in insn 402
changing reg in insn 410
changing reg in insn 411
changing reg in insn 412
changing reg in insn 413
changing reg in insn 418
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 419
changing reg in insn 417
changing reg in insn 416
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 435
changing reg in insn 433
changing reg in insn 432
changing reg in insn 431
changing reg in insn 436
changing reg in insn 434
changing reg in insn 433
changing reg in insn 432
changing reg in insn 434
changing reg in insn 435
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 450
changing reg in insn 448
changing reg in insn 447
changing reg in insn 446
changing reg in insn 451
changing reg in insn 449
changing reg in insn 448
changing reg in insn 447
changing reg in insn 449
changing reg in insn 450
changing reg in insn 453
changing reg in insn 454
changing reg in insn 458
changing reg in insn 459
changing reg in insn 460
changing reg in insn 461
changing reg in insn 466
changing reg in insn 464
changing reg in insn 463
changing reg in insn 462
changing reg in insn 467
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 473
changing reg in insn 478
changing reg in insn 476
changing reg in insn 475
changing reg in insn 474
changing reg in insn 479
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 477
changing reg in insn 478
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 495
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 494
changing reg in insn 495
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 506
changing reg in insn 504
changing reg in insn 503
changing reg in insn 502
changing reg in insn 507
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 505
changing reg in insn 506
changing reg in insn 517
changing reg in insn 518
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 326.
verify found no changes in insn with uid = 357.
verify found no changes in insn with uid = 385.
verify found no changes in insn with uid = 486.


set_boundary_flag_onFlight

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={280d,278u,1e} r1={78d,92u,24e} r2={37d,27u} r4={27d,18u} r5={25d,16u} r6={1d,130u} r7={1d,40u} r8={10d,1u} r9={10d,1u} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={154d,14u} r18={9d} r19={9d} r20={1d,1u,1e} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 1602{958d,618u,26e} in 463{454 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 539 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:225 89 {*movsi_internal}
     (nil))
(jump_insn 539 7 540 2 (set (pc)
        (label_ref 515)) mSector.c:225 650 {jump}
     (nil)
 -> 515)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 540 539 519)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 67 243 244 245 246 247 248 249 250
(code_label 519 540 10 3 107 "" [1 uses])
(note 10 519 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:226 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 2 cx [orig:60 D.5025 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [243]) [0 *f_9(D)+0 S8 A64])) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [243])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:226 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:61 D.5026 ] [61])
        (sign_extend:DI (reg:SI 0 ax [244]))) mSector.c:226 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [244])
        (nil)))
(insn 15 14 16 3 (set (reg:DI 0 ax [245])
        (reg:DI 1 dx [orig:61 D.5026 ] [61])) mSector.c:226 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [245])
                (ashift:DI (reg:DI 0 ax [245])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 513 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [245])
                (plus:DI (reg:DI 0 ax [245])
                    (reg:DI 1 dx [orig:61 D.5026 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5026 ] [61])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:61 D.5026 ] [61])
                (const_int 5 [0x5]))
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [246])
                (ashift:DI (reg:DI 0 ax [245])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [245])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [245])
        (reg:DI 0 ax [246])) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [246])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:62 D.5026 ] [62])
        (reg:DI 0 ax [245])) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [245])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5025 ] [63])
                (plus:DI (reg:DI 0 ax [orig:62 D.5026 ] [62])
                    (reg/f:DI 2 cx [orig:60 D.5025 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.5026 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:60 D.5025 ] [60])
            (nil))))
(insn 22 21 23 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:63 D.5025 ] [63])
                (const_int 44 [0x2c])) [0 _13->st_indx+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:226 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5025 ] [63])
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:227 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 2 cx [orig:64 D.5025 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [247]) [0 *f_9(D)+0 S8 A64])) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [247])
        (nil)))
(insn 25 24 26 3 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:227 89 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx [orig:65 D.5026 ] [65])
        (sign_extend:DI (reg:SI 0 ax [248]))) mSector.c:227 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [248])
        (nil)))
(insn 27 26 28 3 (set (reg:DI 0 ax [249])
        (reg:DI 1 dx [orig:65 D.5026 ] [65])) mSector.c:227 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 0 ax [249])
                (ashift:DI (reg:DI 0 ax [249])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 513 {*ashldi3_1}
     (nil))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [249])
                (plus:DI (reg:DI 0 ax [249])
                    (reg:DI 1 dx [orig:65 D.5026 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.5026 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.5026 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 0 ax [250])
                (ashift:DI (reg:DI 0 ax [249])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [249])
        (nil)))
(insn 31 30 32 3 (set (reg:DI 0 ax [249])
        (reg:DI 0 ax [250])) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [250])
        (nil)))
(insn 32 31 33 3 (set (reg:DI 0 ax [orig:66 D.5026 ] [66])
        (reg:DI 0 ax [249])) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [249])
        (nil)))
(insn 33 32 34 3 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.5025 ] [67])
                (plus:DI (reg:DI 0 ax [orig:66 D.5026 ] [66])
                    (reg/f:DI 2 cx [orig:64 D.5025 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.5026 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:64 D.5025 ] [64])
            (nil))))
(insn 34 33 35 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:67 D.5025 ] [67])
                (const_int 40 [0x28])) [0 _17->ready+0 S4 A64])
        (const_int 0 [0])) mSector.c:227 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.5025 ] [67])
        (nil)))
(insn 35 34 36 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:228 89 {*movsi_internal}
     (nil))
(insn 36 35 541 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 N+0 S4 A32])
        (const_int 0 [0])) mSector.c:228 89 {*movsi_internal}
     (nil))
(jump_insn 541 36 542 3 (set (pc)
        (label_ref 169)) mSector.c:228 650 {jump}
     (nil)
 -> 169)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 542 541 184)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 78 79 80 81 82 83 84 85 251 252 253 254 255
(code_label 184 542 39 4 94 "" [1 uses])
(note 39 184 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:SI 4 si [orig:74 D.5024 ] [74])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 2 cx [orig:75 D.5027 ] [75])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 5 di [orig:76 D.5025 ] [76])
        (mem/f:DI (reg/f:DI 0 ax [251]) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [251])
        (nil)))
(insn 44 43 45 4 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 1 dx [orig:77 D.5026 ] [77])
        (sign_extend:DI (reg:SI 0 ax [252]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [252])
        (nil)))
(insn 46 45 47 4 (set (reg:DI 0 ax [253])
        (reg:DI 1 dx [orig:77 D.5026 ] [77])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 0 ax [253])
                (ashift:DI (reg:DI 0 ax [253])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 0 ax [253])
                (plus:DI (reg:DI 0 ax [253])
                    (reg:DI 1 dx [orig:77 D.5026 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.5026 ] [77])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:77 D.5026 ] [77])
                (const_int 5 [0x5]))
            (nil))))
(insn 49 48 50 4 (parallel [
            (set (reg:DI 0 ax [254])
                (ashift:DI (reg:DI 0 ax [253])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [253])
        (nil)))
(insn 50 49 51 4 (set (reg:DI 0 ax [253])
        (reg:DI 0 ax [254])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [254])
        (nil)))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:78 D.5026 ] [78])
        (reg:DI 0 ax [253])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [253])
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.5025 ] [79])
                (plus:DI (reg:DI 0 ax [orig:78 D.5026 ] [78])
                    (reg/f:DI 5 di [orig:76 D.5025 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:78 D.5026 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:76 D.5025 ] [76])
            (nil))))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [orig:80 D.5027 ] [80])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:79 D.5025 ] [79])
                (const_int 8 [0x8])) [0 _31->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.5025 ] [79])
        (nil)))
(insn 54 53 55 4 (set (reg:SI 1 dx [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 1 dx [orig:81 D.5026 ] [81])
        (sign_extend:DI (reg:SI 1 dx [255]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [255])
        (nil)))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 1 dx [orig:82 D.5026 ] [82])
                (ashift:DI (reg:DI 1 dx [orig:81 D.5026 ] [81])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.5026 ] [81])
        (nil)))
(insn 57 56 58 4 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.5027 ] [83])
                (plus:DI (reg/f:DI 0 ax [orig:80 D.5027 ] [80])
                    (reg:DI 1 dx [orig:82 D.5026 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.5026 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.5027 ] [80])
            (nil))))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [orig:84 D.5028 ] [84])
        (mem/f:DI (reg/f:DI 0 ax [orig:83 D.5027 ] [83]) [0 *_35+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.5027 ] [83])
        (nil)))
(insn 59 58 60 4 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:74 D.5024 ] [74])) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:74 D.5024 ] [74])
        (nil)))
(insn 60 59 61 4 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:75 D.5027 ] [75])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:75 D.5027 ] [75])
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 D.5028 ] [84])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.5028 ] [84])
        (nil)))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:229 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 63 62 64 4 (set (reg:SI 0 ax [orig:85 D.5024 ] [85])
        (reg:SI 0 ax)) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 64 63 65 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 D.5024 ] [85])
            (const_int 0 [0]))) mSector.c:229 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.5024 ] [85])
        (nil)))
(jump_insn 65 64 66 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mSector.c:229 612 {*jcc_1}
     (nil)
 -> 94)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 86 87 88 89 90 91 92 93 94 95 96 97 98 256 257 258 259 260
(note 66 65 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 5 (set (reg:SI 4 si [orig:86 D.5024 ] [86])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg/f:DI 2 cx [orig:87 D.5027 ] [87])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 5 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 5 (set (reg/f:DI 5 di [orig:88 D.5025 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [256]) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [256])
        (nil)))
(insn 71 70 72 5 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:DI 1 dx [orig:89 D.5026 ] [89])
        (sign_extend:DI (reg:SI 0 ax [257]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [257])
        (nil)))
(insn 73 72 74 5 (set (reg:DI 0 ax [258])
        (reg:DI 1 dx [orig:89 D.5026 ] [89])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 5 (parallel [
            (set (reg:DI 0 ax [258])
                (ashift:DI (reg:DI 0 ax [258])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (nil))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 0 ax [258])
                (plus:DI (reg:DI 0 ax [258])
                    (reg:DI 1 dx [orig:89 D.5026 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.5026 ] [89])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.5026 ] [89])
                (const_int 5 [0x5]))
            (nil))))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 0 ax [259])
                (ashift:DI (reg:DI 0 ax [258])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [258])
        (nil)))
(insn 77 76 78 5 (set (reg:DI 0 ax [258])
        (reg:DI 0 ax [259])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [259])
        (nil)))
(insn 78 77 79 5 (set (reg:DI 0 ax [orig:90 D.5026 ] [90])
        (reg:DI 0 ax [258])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [258])
        (nil)))
(insn 79 78 80 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.5025 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 D.5026 ] [90])
                    (reg/f:DI 5 di [orig:88 D.5025 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:90 D.5026 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:88 D.5025 ] [88])
            (nil))))
(insn 80 79 81 5 (set (reg/f:DI 0 ax [orig:92 D.5027 ] [92])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:91 D.5025 ] [91])
                (const_int 8 [0x8])) [0 _43->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.5025 ] [91])
        (nil)))
(insn 81 80 82 5 (set (reg:SI 1 dx [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:DI 1 dx [orig:93 D.5029 ] [93])
        (sign_extend:DI (reg:SI 1 dx [260]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [260])
        (nil)))
(insn 83 82 84 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.5029 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 D.5029 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.5029 ] [93])
        (nil)))
(insn 84 83 85 5 (parallel [
            (set (reg:DI 1 dx [orig:95 D.5029 ] [95])
                (ashift:DI (reg:DI 1 dx [orig:94 D.5029 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:94 D.5029 ] [94])
        (nil)))
(insn 85 84 86 5 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.5027 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:92 D.5027 ] [92])
                    (reg:DI 1 dx [orig:95 D.5029 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.5029 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.5027 ] [92])
            (nil))))
(insn 86 85 87 5 (set (reg/f:DI 0 ax [orig:97 D.5028 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.5027 ] [96]) [0 *_48+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.5027 ] [96])
        (nil)))
(insn 87 86 88 5 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:86 D.5024 ] [86])) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:86 D.5024 ] [86])
        (nil)))
(insn 88 87 89 5 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:87 D.5027 ] [87])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:87 D.5027 ] [87])
        (nil)))
(insn 89 88 90 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:97 D.5028 ] [97])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.5028 ] [97])
        (nil)))
(call_insn 90 89 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:229 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 91 90 92 5 (set (reg:SI 0 ax [orig:98 D.5024 ] [98])
        (reg:SI 0 ax)) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 92 91 93 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.5024 ] [98])
            (const_int 0 [0]))) mSector.c:229 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:98 D.5024 ] [98])
        (nil)))
(jump_insn 93 92 94 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) mSector.c:229 612 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 105 106 107 108 109 261 262 263 264 265 266
(code_label 94 93 95 6 90 "" [1 uses])
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 6 (set (reg/f:DI 2 cx [orig:99 D.5025 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [261]) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [261])
        (nil)))
(insn 98 97 99 6 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 99 98 100 6 (set (reg:DI 1 dx [orig:100 D.5026 ] [100])
        (sign_extend:DI (reg:SI 0 ax [262]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [262])
        (nil)))
(insn 100 99 101 6 (set (reg:DI 0 ax [263])
        (reg:DI 1 dx [orig:100 D.5026 ] [100])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 0 ax [263])
                (ashift:DI (reg:DI 0 ax [263])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (nil))
(insn 102 101 103 6 (parallel [
            (set (reg:DI 0 ax [263])
                (plus:DI (reg:DI 0 ax [263])
                    (reg:DI 1 dx [orig:100 D.5026 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.5026 ] [100])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.5026 ] [100])
                (const_int 5 [0x5]))
            (nil))))
(insn 103 102 104 6 (parallel [
            (set (reg:DI 0 ax [264])
                (ashift:DI (reg:DI 0 ax [263])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [263])
        (nil)))
(insn 104 103 105 6 (set (reg:DI 0 ax [263])
        (reg:DI 0 ax [264])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [264])
        (nil)))
(insn 105 104 106 6 (set (reg:DI 0 ax [orig:101 D.5026 ] [101])
        (reg:DI 0 ax [263])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [263])
        (nil)))
(insn 106 105 107 6 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.5025 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.5026 ] [101])
                    (reg/f:DI 2 cx [orig:99 D.5025 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.5026 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:99 D.5025 ] [99])
            (nil))))
(insn 107 106 108 6 (set (reg/f:DI 0 ax [orig:103 D.5027 ] [103])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:102 D.5025 ] [102])
                (const_int 8 [0x8])) [0 _54->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.5025 ] [102])
        (nil)))
(insn 108 107 109 6 (set (reg:SI 1 dx [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 109 108 110 6 (set (reg:DI 1 dx [orig:104 D.5026 ] [104])
        (sign_extend:DI (reg:SI 1 dx [265]))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [265])
        (nil)))
(insn 110 109 111 6 (parallel [
            (set (reg:DI 1 dx [orig:105 D.5026 ] [105])
                (ashift:DI (reg:DI 1 dx [orig:104 D.5026 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:104 D.5026 ] [104])
        (nil)))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.5027 ] [106])
                (plus:DI (reg/f:DI 0 ax [orig:103 D.5027 ] [103])
                    (reg:DI 1 dx [orig:105 D.5026 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:105 D.5026 ] [105])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.5027 ] [103])
            (nil))))
(insn 112 111 113 6 (set (reg/f:DI 0 ax [orig:107 D.5028 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 D.5027 ] [106]) [0 *_58+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:106 D.5027 ] [106])
        (nil)))
(insn 113 112 114 6 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.5028 ] [108])
                (plus:DI (reg/f:DI 0 ax [orig:107 D.5028 ] [107])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:107 D.5028 ] [107])
        (nil)))
(insn 114 113 115 6 (set (reg:XF 9 st(1) [orig:109 D.5030 ] [109])
        (mem:XF (reg/f:DI 0 ax [orig:108 D.5028 ] [108]) [0 *_60+0 S16 A128])) mSector.c:229 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:108 D.5028 ] [108])
        (nil)))
(insn 115 114 116 6 (set (reg:XF 8 st [266])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) mSector.c:229 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.4e+2 [0x0.fp+8])
        (nil)))
(insn 116 115 117 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:109 D.5030 ] [109])
            (reg:XF 8 st [266]))) mSector.c:229 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [266])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:109 D.5030 ] [109])
            (nil))))
(jump_insn 117 116 121 6 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) mSector.c:229 612 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 267 268 269 270 271 272
(note 121 117 122 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 7 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (nil))
(insn 123 122 124 7 (set (reg/f:DI 2 cx [orig:110 D.5025 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [267]) [0 *f_9(D)+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [267])
        (nil)))
(insn 124 123 125 7 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:230 89 {*movsi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:DI 1 dx [orig:111 D.5026 ] [111])
        (sign_extend:DI (reg:SI 0 ax [268]))) mSector.c:230 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [268])
        (nil)))
(insn 126 125 127 7 (set (reg:DI 0 ax [269])
        (reg:DI 1 dx [orig:111 D.5026 ] [111])) mSector.c:230 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 7 (parallel [
            (set (reg:DI 0 ax [269])
                (ashift:DI (reg:DI 0 ax [269])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (nil))
(insn 128 127 129 7 (parallel [
            (set (reg:DI 0 ax [269])
                (plus:DI (reg:DI 0 ax [269])
                    (reg:DI 1 dx [orig:111 D.5026 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:111 D.5026 ] [111])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.5026 ] [111])
                (const_int 5 [0x5]))
            (nil))))
(insn 129 128 130 7 (parallel [
            (set (reg:DI 0 ax [270])
                (ashift:DI (reg:DI 0 ax [269])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [269])
        (nil)))
(insn 130 129 131 7 (set (reg:DI 0 ax [269])
        (reg:DI 0 ax [270])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [270])
        (nil)))
(insn 131 130 132 7 (set (reg:DI 0 ax [orig:112 D.5026 ] [112])
        (reg:DI 0 ax [269])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [269])
        (nil)))
(insn 132 131 133 7 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.5025 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 D.5026 ] [112])
                    (reg/f:DI 2 cx [orig:110 D.5025 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:112 D.5026 ] [112])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:110 D.5025 ] [110])
            (nil))))
(insn 133 132 134 7 (set (reg/f:DI 0 ax [orig:114 D.5027 ] [114])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:113 D.5025 ] [113])
                (const_int 8 [0x8])) [0 _65->nvp+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:113 D.5025 ] [113])
        (nil)))
(insn 134 133 135 7 (set (reg:SI 1 dx [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:230 89 {*movsi_internal}
     (nil))
(insn 135 134 136 7 (set (reg:DI 1 dx [orig:115 D.5026 ] [115])
        (sign_extend:DI (reg:SI 1 dx [271]))) mSector.c:230 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [271])
        (nil)))
(insn 136 135 137 7 (parallel [
            (set (reg:DI 1 dx [orig:116 D.5026 ] [116])
                (ashift:DI (reg:DI 1 dx [orig:115 D.5026 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 D.5026 ] [115])
        (nil)))
(insn 137 136 138 7 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.5027 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:114 D.5027 ] [114])
                    (reg:DI 1 dx [orig:116 D.5026 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:116 D.5026 ] [116])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:114 D.5027 ] [114])
            (nil))))
(insn 138 137 139 7 (set (reg/f:DI 0 ax [orig:118 D.5028 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 D.5027 ] [117]) [0 *_69+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:117 D.5027 ] [117])
        (nil)))
(insn 139 138 140 7 (parallel [
            (set (reg/f:DI 2 cx [orig:119 D.5028 ] [119])
                (plus:DI (reg/f:DI 0 ax [orig:118 D.5028 ] [118])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:118 D.5028 ] [118])
        (nil)))
(insn 140 139 141 7 (set (reg:XF 0 ax [272])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:230 131 {*movxf_internal_rex64}
     (nil))
(insn 141 140 543 7 (set (mem:XF (reg/f:DI 2 cx [orig:119 D.5028 ] [119]) [0 *_71+0 S16 A128])
        (reg:XF 0 ax [272])) mSector.c:230 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [272])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:119 D.5028 ] [119])
            (nil))))
(jump_insn 543 141 544 7 (set (pc)
        (label_ref 166)) mSector.c:230 650 {jump}
     (nil)
 -> 166)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 544 543 144)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 273 274 275 276 277 278
(code_label 144 544 145 8 91 "" [2 uses])
(note 145 144 146 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 8 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 8 (set (reg/f:DI 2 cx [orig:120 D.5025 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [273]) [0 *f_9(D)+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [273])
        (nil)))
(insn 148 147 149 8 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:232 89 {*movsi_internal}
     (nil))
(insn 149 148 150 8 (set (reg:DI 1 dx [orig:121 D.5026 ] [121])
        (sign_extend:DI (reg:SI 0 ax [274]))) mSector.c:232 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [274])
        (nil)))
(insn 150 149 151 8 (set (reg:DI 0 ax [275])
        (reg:DI 1 dx [orig:121 D.5026 ] [121])) mSector.c:232 87 {*movdi_internal_rex64}
     (nil))
(insn 151 150 152 8 (parallel [
            (set (reg:DI 0 ax [275])
                (ashift:DI (reg:DI 0 ax [275])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (nil))
(insn 152 151 153 8 (parallel [
            (set (reg:DI 0 ax [275])
                (plus:DI (reg:DI 0 ax [275])
                    (reg:DI 1 dx [orig:121 D.5026 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:121 D.5026 ] [121])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:121 D.5026 ] [121])
                (const_int 5 [0x5]))
            (nil))))
(insn 153 152 154 8 (parallel [
            (set (reg:DI 0 ax [276])
                (ashift:DI (reg:DI 0 ax [275])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [275])
        (nil)))
(insn 154 153 155 8 (set (reg:DI 0 ax [275])
        (reg:DI 0 ax [276])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 155 154 156 8 (set (reg:DI 0 ax [orig:122 D.5026 ] [122])
        (reg:DI 0 ax [275])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [275])
        (nil)))
(insn 156 155 157 8 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.5025 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 D.5026 ] [122])
                    (reg/f:DI 2 cx [orig:120 D.5025 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:122 D.5026 ] [122])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:120 D.5025 ] [120])
            (nil))))
(insn 157 156 158 8 (set (reg/f:DI 0 ax [orig:124 D.5027 ] [124])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:123 D.5025 ] [123])
                (const_int 8 [0x8])) [0 _75->nvp+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:123 D.5025 ] [123])
        (nil)))
(insn 158 157 159 8 (set (reg:SI 1 dx [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:232 89 {*movsi_internal}
     (nil))
(insn 159 158 160 8 (set (reg:DI 1 dx [orig:125 D.5026 ] [125])
        (sign_extend:DI (reg:SI 1 dx [277]))) mSector.c:232 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [277])
        (nil)))
(insn 160 159 161 8 (parallel [
            (set (reg:DI 1 dx [orig:126 D.5026 ] [126])
                (ashift:DI (reg:DI 1 dx [orig:125 D.5026 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:125 D.5026 ] [125])
        (nil)))
(insn 161 160 162 8 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.5027 ] [127])
                (plus:DI (reg/f:DI 0 ax [orig:124 D.5027 ] [124])
                    (reg:DI 1 dx [orig:126 D.5026 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:126 D.5026 ] [126])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:124 D.5027 ] [124])
            (nil))))
(insn 162 161 163 8 (set (reg/f:DI 0 ax [orig:128 D.5028 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 D.5027 ] [127]) [0 *_79+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:127 D.5027 ] [127])
        (nil)))
(insn 163 162 164 8 (parallel [
            (set (reg/f:DI 2 cx [orig:129 D.5028 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:128 D.5028 ] [128])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:128 D.5028 ] [128])
        (nil)))
(insn 164 163 165 8 (set (reg:XF 0 ax [278])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:232 131 {*movxf_internal_rex64}
     (nil))
(insn 165 164 166 8 (set (mem:XF (reg/f:DI 2 cx [orig:129 D.5028 ] [129]) [0 *_81+0 S16 A128])
        (reg:XF 0 ax [278])) mSector.c:232 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [278])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:129 D.5028 ] [129])
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 166 165 167 9 93 "" [1 uses])
(note 167 166 168 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 69 70 71 72 73 279 280 281 282
(code_label 169 168 170 10 89 "" [1 uses])
(note 170 169 171 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 10 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:228 87 {*movdi_internal_rex64}
     (nil))
(insn 172 171 173 10 (set (reg/f:DI 2 cx [orig:68 D.5025 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [279]) [0 *f_9(D)+0 S8 A64])) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [279])
        (nil)))
(insn 173 172 174 10 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:228 89 {*movsi_internal}
     (nil))
(insn 174 173 175 10 (set (reg:DI 1 dx [orig:69 D.5026 ] [69])
        (sign_extend:DI (reg:SI 0 ax [280]))) mSector.c:228 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [280])
        (nil)))
(insn 175 174 176 10 (set (reg:DI 0 ax [281])
        (reg:DI 1 dx [orig:69 D.5026 ] [69])) mSector.c:228 87 {*movdi_internal_rex64}
     (nil))
(insn 176 175 177 10 (parallel [
            (set (reg:DI 0 ax [281])
                (ashift:DI (reg:DI 0 ax [281])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 513 {*ashldi3_1}
     (nil))
(insn 177 176 178 10 (parallel [
            (set (reg:DI 0 ax [281])
                (plus:DI (reg:DI 0 ax [281])
                    (reg:DI 1 dx [orig:69 D.5026 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.5026 ] [69])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:69 D.5026 ] [69])
                (const_int 5 [0x5]))
            (nil))))
(insn 178 177 179 10 (parallel [
            (set (reg:DI 0 ax [282])
                (ashift:DI (reg:DI 0 ax [281])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [281])
        (nil)))
(insn 179 178 180 10 (set (reg:DI 0 ax [281])
        (reg:DI 0 ax [282])) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [282])
        (nil)))
(insn 180 179 181 10 (set (reg:DI 0 ax [orig:70 D.5026 ] [70])
        (reg:DI 0 ax [281])) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [281])
        (nil)))
(insn 181 180 182 10 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5025 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.5026 ] [70])
                    (reg/f:DI 2 cx [orig:68 D.5025 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.5026 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:68 D.5025 ] [68])
            (nil))))
(insn 182 181 183 10 (set (reg:SI 0 ax [orig:72 D.5024 ] [72])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:71 D.5025 ] [71])
                (const_int 4 [0x4])) [0 _23->n_nvp+0 S4 A32])) mSector.c:228 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5025 ] [71])
        (nil)))
(insn 183 182 185 10 (parallel [
            (set (reg:SI 0 ax [orig:73 D.5024 ] [73])
                (plus:SI (reg:SI 0 ax [orig:72 D.5024 ] [72])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5024 ] [72])
        (nil)))
(insn 185 183 186 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:73 D.5024 ] [73])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:228 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 D.5024 ] [73])
        (nil)))
(jump_insn 186 185 187 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) mSector.c:228 612 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       4
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 187 186 188 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 545 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:238 89 {*movsi_internal}
     (nil))
(jump_insn 545 188 546 11 (set (pc)
        (label_ref 266)) mSector.c:238 650 {jump}
     (nil)
 -> 266)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 546 545 281)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 136 137 138 139 140 141 142 143 144 145 146 147 283 284 285 286 287
(code_label 281 546 191 12 99 "" [1 uses])
(note 191 281 192 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 12 (set (reg:SI 4 si [orig:136 D.5024 ] [136])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 193 192 194 12 (set (reg/f:DI 2 cx [orig:137 D.5027 ] [137])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 194 193 195 12 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 195 194 196 12 (set (reg/f:DI 5 di [orig:138 D.5025 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [283]) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [283])
        (nil)))
(insn 196 195 197 12 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 197 196 198 12 (set (reg:DI 1 dx [orig:139 D.5026 ] [139])
        (sign_extend:DI (reg:SI 0 ax [284]))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [284])
        (nil)))
(insn 198 197 199 12 (set (reg:DI 0 ax [285])
        (reg:DI 1 dx [orig:139 D.5026 ] [139])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 199 198 200 12 (parallel [
            (set (reg:DI 0 ax [285])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (nil))
(insn 200 199 201 12 (parallel [
            (set (reg:DI 0 ax [285])
                (plus:DI (reg:DI 0 ax [285])
                    (reg:DI 1 dx [orig:139 D.5026 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.5026 ] [139])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:139 D.5026 ] [139])
                (const_int 5 [0x5]))
            (nil))))
(insn 201 200 202 12 (parallel [
            (set (reg:DI 0 ax [286])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 202 201 203 12 (set (reg:DI 0 ax [285])
        (reg:DI 0 ax [286])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [286])
        (nil)))
(insn 203 202 204 12 (set (reg:DI 0 ax [orig:140 D.5026 ] [140])
        (reg:DI 0 ax [285])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 204 203 205 12 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.5025 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 D.5026 ] [140])
                    (reg/f:DI 5 di [orig:138 D.5025 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:140 D.5026 ] [140])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:138 D.5025 ] [138])
            (nil))))
(insn 205 204 206 12 (set (reg/f:DI 0 ax [orig:142 D.5027 ] [142])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:141 D.5025 ] [141])
                (const_int 8 [0x8])) [0 _95->nvp+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:141 D.5025 ] [141])
        (nil)))
(insn 206 205 207 12 (set (reg:SI 1 dx [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 207 206 208 12 (set (reg:DI 1 dx [orig:143 D.5026 ] [143])
        (sign_extend:DI (reg:SI 1 dx [287]))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [287])
        (nil)))
(insn 208 207 209 12 (parallel [
            (set (reg:DI 1 dx [orig:144 D.5026 ] [144])
                (ashift:DI (reg:DI 1 dx [orig:143 D.5026 ] [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:143 D.5026 ] [143])
        (nil)))
(insn 209 208 210 12 (parallel [
            (set (reg/f:DI 0 ax [orig:145 D.5027 ] [145])
                (plus:DI (reg/f:DI 0 ax [orig:142 D.5027 ] [142])
                    (reg:DI 1 dx [orig:144 D.5026 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:144 D.5026 ] [144])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:142 D.5027 ] [142])
            (nil))))
(insn 210 209 211 12 (set (reg/f:DI 0 ax [orig:146 D.5028 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [orig:145 D.5027 ] [145]) [0 *_99+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:145 D.5027 ] [145])
        (nil)))
(insn 211 210 212 12 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:136 D.5024 ] [136])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:136 D.5024 ] [136])
        (nil)))
(insn 212 211 213 12 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:137 D.5027 ] [137])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:137 D.5027 ] [137])
        (nil)))
(insn 213 212 214 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:146 D.5028 ] [146])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:146 D.5028 ] [146])
        (nil)))
(call_insn 214 213 215 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:238 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 215 214 216 12 (set (reg:SI 0 ax [orig:147 D.5024 ] [147])
        (reg:SI 0 ax)) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 216 215 217 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:147 D.5024 ] [147])
            (const_int 0 [0]))) mSector.c:238 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:147 D.5024 ] [147])
        (nil)))
(jump_insn 217 216 218 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) mSector.c:238 612 {*jcc_1}
     (nil)
 -> 246)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 148 149 150 151 152 153 154 155 156 157 158 159 160 288 289 290 291 292
(note 218 217 219 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 13 (set (reg:SI 4 si [orig:148 D.5024 ] [148])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 220 219 221 13 (set (reg/f:DI 2 cx [orig:149 D.5027 ] [149])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 221 220 222 13 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 13 (set (reg/f:DI 5 di [orig:150 D.5025 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [288]) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [288])
        (nil)))
(insn 223 222 224 13 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 224 223 225 13 (set (reg:DI 1 dx [orig:151 D.5026 ] [151])
        (sign_extend:DI (reg:SI 0 ax [289]))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [289])
        (nil)))
(insn 225 224 226 13 (set (reg:DI 0 ax [290])
        (reg:DI 1 dx [orig:151 D.5026 ] [151])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 226 225 227 13 (parallel [
            (set (reg:DI 0 ax [290])
                (ashift:DI (reg:DI 0 ax [290])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (nil))
(insn 227 226 228 13 (parallel [
            (set (reg:DI 0 ax [290])
                (plus:DI (reg:DI 0 ax [290])
                    (reg:DI 1 dx [orig:151 D.5026 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:151 D.5026 ] [151])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:151 D.5026 ] [151])
                (const_int 5 [0x5]))
            (nil))))
(insn 228 227 229 13 (parallel [
            (set (reg:DI 0 ax [291])
                (ashift:DI (reg:DI 0 ax [290])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [290])
        (nil)))
(insn 229 228 230 13 (set (reg:DI 0 ax [290])
        (reg:DI 0 ax [291])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [291])
        (nil)))
(insn 230 229 231 13 (set (reg:DI 0 ax [orig:152 D.5026 ] [152])
        (reg:DI 0 ax [290])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [290])
        (nil)))
(insn 231 230 232 13 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.5025 ] [153])
                (plus:DI (reg:DI 0 ax [orig:152 D.5026 ] [152])
                    (reg/f:DI 5 di [orig:150 D.5025 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:152 D.5026 ] [152])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:150 D.5025 ] [150])
            (nil))))
(insn 232 231 233 13 (set (reg/f:DI 0 ax [orig:154 D.5027 ] [154])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:153 D.5025 ] [153])
                (const_int 8 [0x8])) [0 _107->nvp+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.5025 ] [153])
        (nil)))
(insn 233 232 234 13 (set (reg:SI 1 dx [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 234 233 235 13 (set (reg:DI 1 dx [orig:155 D.5029 ] [155])
        (sign_extend:DI (reg:SI 1 dx [292]))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [292])
        (nil)))
(insn 235 234 236 13 (parallel [
            (set (reg:DI 1 dx [orig:156 D.5029 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 D.5029 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:155 D.5029 ] [155])
        (nil)))
(insn 236 235 237 13 (parallel [
            (set (reg:DI 1 dx [orig:157 D.5029 ] [157])
                (ashift:DI (reg:DI 1 dx [orig:156 D.5029 ] [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:156 D.5029 ] [156])
        (nil)))
(insn 237 236 238 13 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.5027 ] [158])
                (plus:DI (reg/f:DI 0 ax [orig:154 D.5027 ] [154])
                    (reg:DI 1 dx [orig:157 D.5029 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:157 D.5029 ] [157])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:154 D.5027 ] [154])
            (nil))))
(insn 238 237 239 13 (set (reg/f:DI 0 ax [orig:159 D.5028 ] [159])
        (mem/f:DI (reg/f:DI 0 ax [orig:158 D.5027 ] [158]) [0 *_112+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:158 D.5027 ] [158])
        (nil)))
(insn 239 238 240 13 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:148 D.5024 ] [148])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:148 D.5024 ] [148])
        (nil)))
(insn 240 239 241 13 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:149 D.5027 ] [149])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:149 D.5027 ] [149])
        (nil)))
(insn 241 240 242 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:159 D.5028 ] [159])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.5028 ] [159])
        (nil)))
(call_insn 242 241 243 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:238 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 243 242 244 13 (set (reg:SI 0 ax [orig:160 D.5024 ] [160])
        (reg:SI 0 ax)) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 244 243 245 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:160 D.5024 ] [160])
            (const_int 0 [0]))) mSector.c:238 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:160 D.5024 ] [160])
        (nil)))
(jump_insn 245 244 246 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) mSector.c:238 612 {*jcc_1}
     (nil)
 -> 263)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 164 293 294 295 296 297
(code_label 246 245 247 14 96 "" [1 uses])
(note 247 246 248 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 14 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 249 248 250 14 (set (reg/f:DI 2 cx [orig:161 D.5025 ] [161])
        (mem/f:DI (reg/f:DI 0 ax [293]) [0 *f_9(D)+0 S8 A64])) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [293])
        (nil)))
(insn 250 249 251 14 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:239 89 {*movsi_internal}
     (nil))
(insn 251 250 252 14 (set (reg:DI 1 dx [orig:162 D.5026 ] [162])
        (sign_extend:DI (reg:SI 0 ax [294]))) mSector.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [294])
        (nil)))
(insn 252 251 253 14 (set (reg:DI 0 ax [295])
        (reg:DI 1 dx [orig:162 D.5026 ] [162])) mSector.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 253 252 254 14 (parallel [
            (set (reg:DI 0 ax [295])
                (ashift:DI (reg:DI 0 ax [295])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 513 {*ashldi3_1}
     (nil))
(insn 254 253 255 14 (parallel [
            (set (reg:DI 0 ax [295])
                (plus:DI (reg:DI 0 ax [295])
                    (reg:DI 1 dx [orig:162 D.5026 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:162 D.5026 ] [162])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:162 D.5026 ] [162])
                (const_int 5 [0x5]))
            (nil))))
(insn 255 254 256 14 (parallel [
            (set (reg:DI 0 ax [296])
                (ashift:DI (reg:DI 0 ax [295])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [295])
        (nil)))
(insn 256 255 257 14 (set (reg:DI 0 ax [295])
        (reg:DI 0 ax [296])) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [296])
        (nil)))
(insn 257 256 258 14 (set (reg:DI 0 ax [orig:163 D.5026 ] [163])
        (reg:DI 0 ax [295])) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [295])
        (nil)))
(insn 258 257 259 14 (parallel [
            (set (reg/f:DI 1 dx [orig:164 D.5025 ] [164])
                (plus:DI (reg/f:DI 2 cx [orig:161 D.5025 ] [161])
                    (reg:DI 0 ax [orig:163 D.5026 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:163 D.5026 ] [163])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:161 D.5025 ] [161])
            (nil))))
(insn 259 258 260 14 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:239 89 {*movsi_internal}
     (nil))
(insn 260 259 547 14 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:164 D.5025 ] [164])
                (const_int 112 [0x70])) [0 _119->bound+0 S4 A128])
        (reg:SI 0 ax [297])) mSector.c:239 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [297])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:164 D.5025 ] [164])
            (nil))))
(jump_insn 547 260 548 14 (set (pc)
        (label_ref 284)) mSector.c:240 650 {jump}
     (nil)
 -> 284)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 548 547 263)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 263 548 264 15 97 "" [1 uses])
(note 264 263 265 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 273 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 134 135 298 299 300 301
(code_label 266 265 267 16 95 "" [1 uses])
(note 267 266 268 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 16 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 269 268 270 16 (set (reg/f:DI 2 cx [orig:130 D.5025 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [298]) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [298])
        (nil)))
(insn 270 269 271 16 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 271 270 272 16 (set (reg:DI 1 dx [orig:131 D.5026 ] [131])
        (sign_extend:DI (reg:SI 0 ax [299]))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [299])
        (nil)))
(insn 272 271 273 16 (set (reg:DI 0 ax [300])
        (reg:DI 1 dx [orig:131 D.5026 ] [131])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 273 272 274 16 (parallel [
            (set (reg:DI 0 ax [300])
                (ashift:DI (reg:DI 0 ax [300])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (nil))
(insn 274 273 275 16 (parallel [
            (set (reg:DI 0 ax [300])
                (plus:DI (reg:DI 0 ax [300])
                    (reg:DI 1 dx [orig:131 D.5026 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:131 D.5026 ] [131])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:131 D.5026 ] [131])
                (const_int 5 [0x5]))
            (nil))))
(insn 275 274 276 16 (parallel [
            (set (reg:DI 0 ax [301])
                (ashift:DI (reg:DI 0 ax [300])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (nil)))
(insn 276 275 277 16 (set (reg:DI 0 ax [300])
        (reg:DI 0 ax [301])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [301])
        (nil)))
(insn 277 276 278 16 (set (reg:DI 0 ax [orig:132 D.5026 ] [132])
        (reg:DI 0 ax [300])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (nil)))
(insn 278 277 279 16 (parallel [
            (set (reg/f:DI 0 ax [orig:133 D.5025 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 D.5026 ] [132])
                    (reg/f:DI 2 cx [orig:130 D.5025 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:132 D.5026 ] [132])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:130 D.5025 ] [130])
            (nil))))
(insn 279 278 280 16 (set (reg:SI 0 ax [orig:134 D.5024 ] [134])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:133 D.5025 ] [133])
                (const_int 4 [0x4])) [0 _87->n_nvp+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:133 D.5025 ] [133])
        (nil)))
(insn 280 279 282 16 (parallel [
            (set (reg:SI 0 ax [orig:135 D.5024 ] [135])
                (plus:SI (reg:SI 0 ax [orig:134 D.5024 ] [134])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 D.5024 ] [134])
        (nil)))
(insn 282 280 283 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:135 D.5024 ] [135])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:238 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:135 D.5024 ] [135])
        (nil)))
(jump_insn 283 282 284 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) mSector.c:238 612 {*jcc_1}
     (nil)
 -> 281)
;;  succ:       12
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 166 167 168 169 170 302 303 304 305
(code_label 284 283 285 17 98 "" [1 uses])
(note 285 284 286 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 17 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:242 87 {*movdi_internal_rex64}
     (nil))
(insn 287 286 288 17 (set (reg/f:DI 2 cx [orig:165 D.5025 ] [165])
        (mem/f:DI (reg/f:DI 0 ax [302]) [0 *f_9(D)+0 S8 A64])) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [302])
        (nil)))
(insn 288 287 289 17 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:242 89 {*movsi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:DI 1 dx [orig:166 D.5026 ] [166])
        (sign_extend:DI (reg:SI 0 ax [303]))) mSector.c:242 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [303])
        (nil)))
(insn 290 289 291 17 (set (reg:DI 0 ax [304])
        (reg:DI 1 dx [orig:166 D.5026 ] [166])) mSector.c:242 87 {*movdi_internal_rex64}
     (nil))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 0 ax [304])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 513 {*ashldi3_1}
     (nil))
(insn 292 291 293 17 (parallel [
            (set (reg:DI 0 ax [304])
                (plus:DI (reg:DI 0 ax [304])
                    (reg:DI 1 dx [orig:166 D.5026 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:166 D.5026 ] [166])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.5026 ] [166])
                (const_int 5 [0x5]))
            (nil))))
(insn 293 292 294 17 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 294 293 295 17 (set (reg:DI 0 ax [304])
        (reg:DI 0 ax [305])) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [305])
        (nil)))
(insn 295 294 296 17 (set (reg:DI 0 ax [orig:167 D.5026 ] [167])
        (reg:DI 0 ax [304])) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 296 295 297 17 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.5025 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 D.5026 ] [167])
                    (reg/f:DI 2 cx [orig:165 D.5025 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:167 D.5026 ] [167])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:165 D.5025 ] [165])
            (nil))))
(insn 297 296 298 17 (set (reg:SI 0 ax [orig:169 D.5024 ] [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:168 D.5025 ] [168])
                (const_int 4 [0x4])) [0 _123->n_nvp+0 S4 A32])) mSector.c:242 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:168 D.5025 ] [168])
        (nil)))
(insn 298 297 299 17 (parallel [
            (set (reg:SI 0 ax [orig:170 D.5024 ] [170])
                (plus:SI (reg:SI 0 ax [orig:169 D.5024 ] [169])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:169 D.5024 ] [169])
        (nil)))
(insn 299 298 300 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:170 D.5024 ] [170])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:242 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:170 D.5024 ] [170])
        (nil)))
(jump_insn 300 299 301 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 329)
            (pc))) mSector.c:242 612 {*jcc_1}
     (nil)
 -> 329)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 171 172 173 174 175 176 306 307 308 309 310 311 312
(note 301 300 302 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 18 (set (reg:SI 0 ax [orig:171 i.3 ] [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:243 89 {*movsi_internal}
     (nil))
(insn 303 302 304 18 (parallel [
            (set (reg:SI 1 dx [306])
                (plus:SI (reg:SI 0 ax [orig:171 i.3 ] [171])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:243 273 {*addsi_1}
     (nil))
(insn 304 303 305 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 1 dx [306])) mSector.c:243 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [306])
        (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:171 i.3 ] [171])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 305 304 306 18 (set (reg:DI 4 si [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:243 87 {*movdi_internal_rex64}
     (nil))
(insn 306 305 307 18 (set (reg:DI 2 cx [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:243 87 {*movdi_internal_rex64}
     (nil))
(insn 307 306 308 18 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:171 i.3 ] [171])) mSector.c:243 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:171 i.3 ] [171])
        (nil)))
(insn 308 307 309 18 (set (reg:DI 4 si)
        (reg:DI 4 si [307])) mSector.c:243 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [307])
        (nil)))
(insn 309 308 310 18 (set (reg:DI 5 di)
        (reg:DI 2 cx [308])) mSector.c:243 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [308])
        (nil)))
(call_insn 310 309 311 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("remove_aircraft") [flags 0x3]  <function_decl 0x7f44d2a01700 remove_aircraft>) [0 remove_aircraft S1 A8])
            (const_int 0 [0]))) mSector.c:243 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 311 310 312 18 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 312 311 313 18 (set (reg/f:DI 2 cx [orig:172 D.5025 ] [172])
        (mem/f:DI (reg/f:DI 0 ax [309]) [0 *f_9(D)+0 S8 A64])) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [309])
        (nil)))
(insn 313 312 314 18 (set (reg:SI 0 ax [310])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:244 89 {*movsi_internal}
     (nil))
(insn 314 313 315 18 (set (reg:DI 1 dx [orig:173 D.5026 ] [173])
        (sign_extend:DI (reg:SI 0 ax [310]))) mSector.c:244 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [310])
        (nil)))
(insn 315 314 316 18 (set (reg:DI 0 ax [311])
        (reg:DI 1 dx [orig:173 D.5026 ] [173])) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 316 315 317 18 (parallel [
            (set (reg:DI 0 ax [311])
                (ashift:DI (reg:DI 0 ax [311])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 513 {*ashldi3_1}
     (nil))
(insn 317 316 318 18 (parallel [
            (set (reg:DI 0 ax [311])
                (plus:DI (reg:DI 0 ax [311])
                    (reg:DI 1 dx [orig:173 D.5026 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:173 D.5026 ] [173])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:173 D.5026 ] [173])
                (const_int 5 [0x5]))
            (nil))))
(insn 318 317 319 18 (parallel [
            (set (reg:DI 0 ax [312])
                (ashift:DI (reg:DI 0 ax [311])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [311])
        (nil)))
(insn 319 318 320 18 (set (reg:DI 0 ax [311])
        (reg:DI 0 ax [312])) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [312])
        (nil)))
(insn 320 319 321 18 (set (reg:DI 0 ax [orig:174 D.5026 ] [174])
        (reg:DI 0 ax [311])) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [311])
        (nil)))
(insn 321 320 322 18 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.5025 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 D.5026 ] [174])
                    (reg/f:DI 2 cx [orig:172 D.5025 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:174 D.5026 ] [174])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:172 D.5025 ] [172])
            (nil))))
(insn 322 321 323 18 (set (reg:SI 0 ax [orig:176 D.5024 ] [176])
        (mem/j:SI (reg/f:DI 0 ax [orig:175 D.5025 ] [175]) [0 _131->ID+0 S4 A128])) mSector.c:244 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:175 D.5025 ] [175])
        (nil)))
(insn 323 322 324 18 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:176 D.5024 ] [176])) mSector.c:244 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:176 D.5024 ] [176])
        (nil)))
(insn 324 323 325 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f44d28a47b8 *.LC13>)) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 325 324 326 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) mSector.c:244 91 {*movqi_internal}
     (nil))
(call_insn 326 325 549 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f44d2950f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mSector.c:244 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
(jump_insn 549 326 550 18 (set (pc)
        (label_ref 512)) mSector.c:245 650 {jump}
     (nil)
 -> 512)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 550 549 329)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 329 550 330 19 100 "" [1 uses])
(note 330 329 331 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 551 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 273 {*addsi_1}
     (nil))
(jump_insn 551 331 552 19 (set (pc)
        (label_ref 408)) mSector.c:248 650 {jump}
     (nil)
 -> 408)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 552 551 422)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 182 183 184 185 186 187 188 189 190 191 192 193 313 314 315 316 317
(code_label 422 552 334 20 105 "" [1 uses])
(note 334 422 335 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 336 20 (set (reg:SI 4 si [orig:182 D.5024 ] [182])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 336 335 337 20 (set (reg/f:DI 2 cx [orig:183 D.5027 ] [183])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 337 336 338 20 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 338 337 339 20 (set (reg/f:DI 5 di [orig:184 D.5025 ] [184])
        (mem/f:DI (reg/f:DI 0 ax [313]) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [313])
        (nil)))
(insn 339 338 340 20 (set (reg:SI 0 ax [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 340 339 341 20 (set (reg:DI 1 dx [orig:185 D.5026 ] [185])
        (sign_extend:DI (reg:SI 0 ax [314]))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [314])
        (nil)))
(insn 341 340 342 20 (set (reg:DI 0 ax [315])
        (reg:DI 1 dx [orig:185 D.5026 ] [185])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 342 341 343 20 (parallel [
            (set (reg:DI 0 ax [315])
                (ashift:DI (reg:DI 0 ax [315])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (nil))
(insn 343 342 344 20 (parallel [
            (set (reg:DI 0 ax [315])
                (plus:DI (reg:DI 0 ax [315])
                    (reg:DI 1 dx [orig:185 D.5026 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:185 D.5026 ] [185])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:185 D.5026 ] [185])
                (const_int 5 [0x5]))
            (nil))))
(insn 344 343 345 20 (parallel [
            (set (reg:DI 0 ax [316])
                (ashift:DI (reg:DI 0 ax [315])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [315])
        (nil)))
(insn 345 344 346 20 (set (reg:DI 0 ax [315])
        (reg:DI 0 ax [316])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [316])
        (nil)))
(insn 346 345 347 20 (set (reg:DI 0 ax [orig:186 D.5026 ] [186])
        (reg:DI 0 ax [315])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [315])
        (nil)))
(insn 347 346 348 20 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.5025 ] [187])
                (plus:DI (reg:DI 0 ax [orig:186 D.5026 ] [186])
                    (reg/f:DI 5 di [orig:184 D.5025 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:186 D.5026 ] [186])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:184 D.5025 ] [184])
            (nil))))
(insn 348 347 349 20 (set (reg/f:DI 0 ax [orig:188 D.5027 ] [188])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:187 D.5025 ] [187])
                (const_int 8 [0x8])) [0 _144->nvp+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:187 D.5025 ] [187])
        (nil)))
(insn 349 348 350 20 (set (reg:SI 1 dx [317])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 350 349 351 20 (set (reg:DI 1 dx [orig:189 D.5026 ] [189])
        (sign_extend:DI (reg:SI 1 dx [317]))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [317])
        (nil)))
(insn 351 350 352 20 (parallel [
            (set (reg:DI 1 dx [orig:190 D.5026 ] [190])
                (ashift:DI (reg:DI 1 dx [orig:189 D.5026 ] [189])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:189 D.5026 ] [189])
        (nil)))
(insn 352 351 353 20 (parallel [
            (set (reg/f:DI 0 ax [orig:191 D.5027 ] [191])
                (plus:DI (reg/f:DI 0 ax [orig:188 D.5027 ] [188])
                    (reg:DI 1 dx [orig:190 D.5026 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:190 D.5026 ] [190])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:188 D.5027 ] [188])
            (nil))))
(insn 353 352 354 20 (set (reg/f:DI 0 ax [orig:192 D.5028 ] [192])
        (mem/f:DI (reg/f:DI 0 ax [orig:191 D.5027 ] [191]) [0 *_148+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:191 D.5027 ] [191])
        (nil)))
(insn 354 353 355 20 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:182 D.5024 ] [182])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:182 D.5024 ] [182])
        (nil)))
(insn 355 354 356 20 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:183 D.5027 ] [183])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:183 D.5027 ] [183])
        (nil)))
(insn 356 355 357 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:192 D.5028 ] [192])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:192 D.5028 ] [192])
        (nil)))
(call_insn 357 356 358 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:248 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 358 357 359 20 (set (reg:SI 0 ax [orig:193 D.5024 ] [193])
        (reg:SI 0 ax)) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 359 358 360 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:193 D.5024 ] [193])
            (const_int 0 [0]))) mSector.c:248 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:193 D.5024 ] [193])
        (nil)))
(jump_insn 360 359 361 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) mSector.c:248 612 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 194 195 196 197 198 199 200 201 202 203 204 205 206 318 319 320 321 322
(note 361 360 362 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 21 (set (reg:SI 4 si [orig:194 D.5024 ] [194])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 c.Nbound+0 S4 A128])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 363 362 364 21 (set (reg/f:DI 2 cx [orig:195 D.5027 ] [195])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 c.bound+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 364 363 365 21 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 365 364 366 21 (set (reg/f:DI 5 di [orig:196 D.5025 ] [196])
        (mem/f:DI (reg/f:DI 0 ax [318]) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [318])
        (nil)))
(insn 366 365 367 21 (set (reg:SI 0 ax [319])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 367 366 368 21 (set (reg:DI 1 dx [orig:197 D.5026 ] [197])
        (sign_extend:DI (reg:SI 0 ax [319]))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [319])
        (nil)))
(insn 368 367 369 21 (set (reg:DI 0 ax [320])
        (reg:DI 1 dx [orig:197 D.5026 ] [197])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 369 368 370 21 (parallel [
            (set (reg:DI 0 ax [320])
                (ashift:DI (reg:DI 0 ax [320])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (nil))
(insn 370 369 371 21 (parallel [
            (set (reg:DI 0 ax [320])
                (plus:DI (reg:DI 0 ax [320])
                    (reg:DI 1 dx [orig:197 D.5026 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:197 D.5026 ] [197])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:197 D.5026 ] [197])
                (const_int 5 [0x5]))
            (nil))))
(insn 371 370 372 21 (parallel [
            (set (reg:DI 0 ax [321])
                (ashift:DI (reg:DI 0 ax [320])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [320])
        (nil)))
(insn 372 371 373 21 (set (reg:DI 0 ax [320])
        (reg:DI 0 ax [321])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [321])
        (nil)))
(insn 373 372 374 21 (set (reg:DI 0 ax [orig:198 D.5026 ] [198])
        (reg:DI 0 ax [320])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [320])
        (nil)))
(insn 374 373 375 21 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.5025 ] [199])
                (plus:DI (reg:DI 0 ax [orig:198 D.5026 ] [198])
                    (reg/f:DI 5 di [orig:196 D.5025 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:198 D.5026 ] [198])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:196 D.5025 ] [196])
            (nil))))
(insn 375 374 376 21 (set (reg/f:DI 0 ax [orig:200 D.5027 ] [200])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:199 D.5025 ] [199])
                (const_int 8 [0x8])) [0 _156->nvp+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:199 D.5025 ] [199])
        (nil)))
(insn 376 375 377 21 (set (reg:SI 1 dx [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 377 376 378 21 (set (reg:DI 1 dx [orig:201 D.5026 ] [201])
        (sign_extend:DI (reg:SI 1 dx [322]))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [322])
        (nil)))
(insn 378 377 379 21 (parallel [
            (set (reg:DI 1 dx [orig:202 D.5026 ] [202])
                (ashift:DI (reg:DI 1 dx [orig:201 D.5026 ] [201])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:201 D.5026 ] [201])
        (nil)))
(insn 379 378 380 21 (parallel [
            (set (reg:DI 1 dx [orig:203 D.5029 ] [203])
                (plus:DI (reg:DI 1 dx [orig:202 D.5026 ] [202])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:202 D.5026 ] [202])
        (nil)))
(insn 380 379 381 21 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.5027 ] [204])
                (plus:DI (reg/f:DI 0 ax [orig:200 D.5027 ] [200])
                    (reg:DI 1 dx [orig:203 D.5029 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:203 D.5029 ] [203])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:200 D.5027 ] [200])
            (nil))))
(insn 381 380 382 21 (set (reg/f:DI 0 ax [orig:205 D.5028 ] [205])
        (mem/f:DI (reg/f:DI 0 ax [orig:204 D.5027 ] [204]) [0 *_161+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:204 D.5027 ] [204])
        (nil)))
(insn 382 381 383 21 (set (reg:SI 1 dx)
        (reg:SI 4 si [orig:194 D.5024 ] [194])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:194 D.5024 ] [194])
        (nil)))
(insn 383 382 384 21 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:195 D.5027 ] [195])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:195 D.5027 ] [195])
        (nil)))
(insn 384 383 385 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:205 D.5028 ] [205])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:205 D.5028 ] [205])
        (nil)))
(call_insn 385 384 386 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:248 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 386 385 387 21 (set (reg:SI 0 ax [orig:206 D.5024 ] [206])
        (reg:SI 0 ax)) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 387 386 388 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:206 D.5024 ] [206])
            (const_int 0 [0]))) mSector.c:248 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:206 D.5024 ] [206])
        (nil)))
(jump_insn 388 387 389 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) mSector.c:248 612 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 323 324 325 326 327
(note 389 388 390 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 22 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 391 390 392 22 (set (reg/f:DI 2 cx [orig:207 D.5025 ] [207])
        (mem/f:DI (reg/f:DI 0 ax [323]) [0 *f_9(D)+0 S8 A64])) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [323])
        (nil)))
(insn 392 391 393 22 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:249 89 {*movsi_internal}
     (nil))
(insn 393 392 394 22 (set (reg:DI 1 dx [orig:208 D.5026 ] [208])
        (sign_extend:DI (reg:SI 0 ax [324]))) mSector.c:249 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [324])
        (nil)))
(insn 394 393 395 22 (set (reg:DI 0 ax [325])
        (reg:DI 1 dx [orig:208 D.5026 ] [208])) mSector.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 395 394 396 22 (parallel [
            (set (reg:DI 0 ax [325])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 513 {*ashldi3_1}
     (nil))
(insn 396 395 397 22 (parallel [
            (set (reg:DI 0 ax [325])
                (plus:DI (reg:DI 0 ax [325])
                    (reg:DI 1 dx [orig:208 D.5026 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:208 D.5026 ] [208])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.5026 ] [208])
                (const_int 5 [0x5]))
            (nil))))
(insn 397 396 398 22 (parallel [
            (set (reg:DI 0 ax [326])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [325])
        (nil)))
(insn 398 397 399 22 (set (reg:DI 0 ax [325])
        (reg:DI 0 ax [326])) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [326])
        (nil)))
(insn 399 398 400 22 (set (reg:DI 0 ax [orig:209 D.5026 ] [209])
        (reg:DI 0 ax [325])) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [325])
        (nil)))
(insn 400 399 401 22 (parallel [
            (set (reg/f:DI 1 dx [orig:210 D.5025 ] [210])
                (plus:DI (reg/f:DI 2 cx [orig:207 D.5025 ] [207])
                    (reg:DI 0 ax [orig:209 D.5026 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:209 D.5026 ] [209])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:207 D.5025 ] [207])
            (nil))))
(insn 401 400 402 22 (set (reg:SI 0 ax [327])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:249 89 {*movsi_internal}
     (nil))
(insn 402 401 553 22 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:210 D.5025 ] [210])
                (const_int 116 [0x74])) [0 _167->bound+4 S4 A32])
        (reg:SI 0 ax [327])) mSector.c:249 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [327])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:210 D.5025 ] [210])
            (nil))))
(jump_insn 553 402 554 22 (set (pc)
        (label_ref 425)) mSector.c:250 650 {jump}
     (nil)
 -> 425)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 405)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 405 554 406 23 103 "" [2 uses])
(note 406 405 407 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 273 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177 178 179 180 181 328 329 330 331
(code_label 408 407 409 24 102 "" [1 uses])
(note 409 408 410 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 410 409 411 24 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 411 410 412 24 (set (reg/f:DI 2 cx [orig:177 D.5025 ] [177])
        (mem/f:DI (reg/f:DI 0 ax [328]) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [328])
        (nil)))
(insn 412 411 413 24 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 413 412 414 24 (set (reg:DI 1 dx [orig:178 D.5026 ] [178])
        (sign_extend:DI (reg:SI 0 ax [329]))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [329])
        (nil)))
(insn 414 413 415 24 (set (reg:DI 0 ax [330])
        (reg:DI 1 dx [orig:178 D.5026 ] [178])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 415 414 416 24 (parallel [
            (set (reg:DI 0 ax [330])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (nil))
(insn 416 415 417 24 (parallel [
            (set (reg:DI 0 ax [330])
                (plus:DI (reg:DI 0 ax [330])
                    (reg:DI 1 dx [orig:178 D.5026 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:178 D.5026 ] [178])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:178 D.5026 ] [178])
                (const_int 5 [0x5]))
            (nil))))
(insn 417 416 418 24 (parallel [
            (set (reg:DI 0 ax [331])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [330])
        (nil)))
(insn 418 417 419 24 (set (reg:DI 0 ax [330])
        (reg:DI 0 ax [331])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [331])
        (nil)))
(insn 419 418 420 24 (set (reg:DI 0 ax [orig:179 D.5026 ] [179])
        (reg:DI 0 ax [330])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [330])
        (nil)))
(insn 420 419 421 24 (parallel [
            (set (reg/f:DI 0 ax [orig:180 D.5025 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 D.5026 ] [179])
                    (reg/f:DI 2 cx [orig:177 D.5025 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:179 D.5026 ] [179])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:177 D.5025 ] [177])
            (nil))))
(insn 421 420 423 24 (set (reg:SI 0 ax [orig:181 D.5024 ] [181])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:180 D.5025 ] [180])
                (const_int 4 [0x4])) [0 _137->n_nvp+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:180 D.5025 ] [180])
        (nil)))
(insn 423 421 424 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:181 D.5024 ] [181])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:248 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:181 D.5024 ] [181])
        (nil)))
(jump_insn 424 423 425 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 422)
            (pc))) mSector.c:248 612 {*jcc_1}
     (nil)
 -> 422)
;;  succ:       20
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              22 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211 212 213 214 215 332 333 334 335
(code_label 425 424 426 25 104 "" [1 uses])
(note 426 425 427 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 427 426 428 25 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 428 427 429 25 (set (reg/f:DI 2 cx [orig:211 D.5025 ] [211])
        (mem/f:DI (reg/f:DI 0 ax [332]) [0 *f_9(D)+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [332])
        (nil)))
(insn 429 428 430 25 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 430 429 431 25 (set (reg:DI 1 dx [orig:212 D.5026 ] [212])
        (sign_extend:DI (reg:SI 0 ax [333]))) mSector.c:252 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [333])
        (nil)))
(insn 431 430 432 25 (set (reg:DI 0 ax [334])
        (reg:DI 1 dx [orig:212 D.5026 ] [212])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 432 431 433 25 (parallel [
            (set (reg:DI 0 ax [334])
                (ashift:DI (reg:DI 0 ax [334])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (nil))
(insn 433 432 434 25 (parallel [
            (set (reg:DI 0 ax [334])
                (plus:DI (reg:DI 0 ax [334])
                    (reg:DI 1 dx [orig:212 D.5026 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:212 D.5026 ] [212])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:212 D.5026 ] [212])
                (const_int 5 [0x5]))
            (nil))))
(insn 434 433 435 25 (parallel [
            (set (reg:DI 0 ax [335])
                (ashift:DI (reg:DI 0 ax [334])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [334])
        (nil)))
(insn 435 434 436 25 (set (reg:DI 0 ax [334])
        (reg:DI 0 ax [335])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [335])
        (nil)))
(insn 436 435 437 25 (set (reg:DI 0 ax [orig:213 D.5026 ] [213])
        (reg:DI 0 ax [334])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [334])
        (nil)))
(insn 437 436 438 25 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.5025 ] [214])
                (plus:DI (reg:DI 0 ax [orig:213 D.5026 ] [213])
                    (reg/f:DI 2 cx [orig:211 D.5025 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:213 D.5026 ] [213])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:211 D.5025 ] [211])
            (nil))))
(insn 438 437 439 25 (set (reg:SI 0 ax [orig:215 D.5024 ] [215])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:214 D.5025 ] [214])
                (const_int 4 [0x4])) [0 _172->n_nvp+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:214 D.5025 ] [214])
        (nil)))
(insn 439 438 440 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:215 D.5024 ] [215])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:252 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:215 D.5024 ] [215])
        (nil)))
(jump_insn 440 439 441 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 456)
            (pc))) mSector.c:252 612 {*jcc_1}
     (nil)
 -> 456)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 218 219 220 336 337 338 339 340
(note 441 440 442 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 442 441 443 26 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 443 442 444 26 (set (reg/f:DI 2 cx [orig:216 D.5025 ] [216])
        (mem/f:DI (reg/f:DI 0 ax [336]) [0 *f_9(D)+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [336])
        (nil)))
(insn 444 443 445 26 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 445 444 446 26 (set (reg:DI 1 dx [orig:217 D.5026 ] [217])
        (sign_extend:DI (reg:SI 0 ax [337]))) mSector.c:252 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [337])
        (nil)))
(insn 446 445 447 26 (set (reg:DI 0 ax [338])
        (reg:DI 1 dx [orig:217 D.5026 ] [217])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 447 446 448 26 (parallel [
            (set (reg:DI 0 ax [338])
                (ashift:DI (reg:DI 0 ax [338])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (nil))
(insn 448 447 449 26 (parallel [
            (set (reg:DI 0 ax [338])
                (plus:DI (reg:DI 0 ax [338])
                    (reg:DI 1 dx [orig:217 D.5026 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:217 D.5026 ] [217])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:217 D.5026 ] [217])
                (const_int 5 [0x5]))
            (nil))))
(insn 449 448 450 26 (parallel [
            (set (reg:DI 0 ax [339])
                (ashift:DI (reg:DI 0 ax [338])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [338])
        (nil)))
(insn 450 449 451 26 (set (reg:DI 0 ax [338])
        (reg:DI 0 ax [339])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [339])
        (nil)))
(insn 451 450 452 26 (set (reg:DI 0 ax [orig:218 D.5026 ] [218])
        (reg:DI 0 ax [338])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [338])
        (nil)))
(insn 452 451 453 26 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.5025 ] [219])
                (plus:DI (reg:DI 0 ax [orig:218 D.5026 ] [218])
                    (reg/f:DI 2 cx [orig:216 D.5025 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:218 D.5026 ] [218])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:216 D.5025 ] [216])
            (nil))))
(insn 453 452 454 26 (set (reg:SI 1 dx [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 454 453 455 26 (parallel [
            (set (reg:SI 1 dx [orig:220 D.5024 ] [220])
                (plus:SI (reg:SI 1 dx [340])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [340])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 455 454 456 26 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:219 D.5025 ] [219])
                (const_int 116 [0x74])) [0 _177->bound+4 S4 A32])
        (reg:SI 1 dx [orig:220 D.5024 ] [220])) mSector.c:252 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:220 D.5024 ] [220])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:219 D.5025 ] [219])
            (nil))))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 223 224 225 226 227 228 229 230 341 342 343 344 345 346 347 348
(code_label 456 455 457 27 106 "" [1 uses])
(note 457 456 458 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 458 457 459 27 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 459 458 460 27 (set (reg/f:DI 2 cx [orig:221 D.5025 ] [221])
        (mem/f:DI (reg/f:DI 0 ax [341]) [0 *f_9(D)+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [341])
        (nil)))
(insn 460 459 461 27 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (nil))
(insn 461 460 462 27 (set (reg:DI 1 dx [orig:222 D.5026 ] [222])
        (sign_extend:DI (reg:SI 0 ax [342]))) mSector.c:255 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [342])
        (nil)))
(insn 462 461 463 27 (set (reg:DI 0 ax [343])
        (reg:DI 1 dx [orig:222 D.5026 ] [222])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 463 462 464 27 (parallel [
            (set (reg:DI 0 ax [343])
                (ashift:DI (reg:DI 0 ax [343])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (nil))
(insn 464 463 465 27 (parallel [
            (set (reg:DI 0 ax [343])
                (plus:DI (reg:DI 0 ax [343])
                    (reg:DI 1 dx [orig:222 D.5026 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:222 D.5026 ] [222])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:222 D.5026 ] [222])
                (const_int 5 [0x5]))
            (nil))))
(insn 465 464 466 27 (parallel [
            (set (reg:DI 0 ax [344])
                (ashift:DI (reg:DI 0 ax [343])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [343])
        (nil)))
(insn 466 465 467 27 (set (reg:DI 0 ax [343])
        (reg:DI 0 ax [344])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [344])
        (nil)))
(insn 467 466 468 27 (set (reg:DI 0 ax [orig:223 D.5026 ] [223])
        (reg:DI 0 ax [343])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [343])
        (nil)))
(insn 468 467 469 27 (parallel [
            (set (reg/f:DI 0 ax [orig:224 D.5025 ] [224])
                (plus:DI (reg:DI 0 ax [orig:223 D.5026 ] [223])
                    (reg/f:DI 2 cx [orig:221 D.5025 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:223 D.5026 ] [223])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:221 D.5025 ] [221])
            (nil))))
(insn 469 468 470 27 (set (reg:SI 2 cx [orig:225 D.5024 ] [225])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:224 D.5025 ] [224])
                (const_int 112 [0x70])) [0 _182->bound+0 S4 A128])) mSector.c:255 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:224 D.5025 ] [224])
        (nil)))
(insn 470 469 471 27 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 471 470 472 27 (set (reg/f:DI 4 si [orig:226 D.5025 ] [226])
        (mem/f:DI (reg/f:DI 0 ax [345]) [0 *f_9(D)+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [345])
        (nil)))
(insn 472 471 473 27 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (nil))
(insn 473 472 474 27 (set (reg:DI 1 dx [orig:227 D.5026 ] [227])
        (sign_extend:DI (reg:SI 0 ax [346]))) mSector.c:255 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [346])
        (nil)))
(insn 474 473 475 27 (set (reg:DI 0 ax [347])
        (reg:DI 1 dx [orig:227 D.5026 ] [227])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 475 474 476 27 (parallel [
            (set (reg:DI 0 ax [347])
                (ashift:DI (reg:DI 0 ax [347])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (nil))
(insn 476 475 477 27 (parallel [
            (set (reg:DI 0 ax [347])
                (plus:DI (reg:DI 0 ax [347])
                    (reg:DI 1 dx [orig:227 D.5026 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:227 D.5026 ] [227])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:227 D.5026 ] [227])
                (const_int 5 [0x5]))
            (nil))))
(insn 477 476 478 27 (parallel [
            (set (reg:DI 0 ax [348])
                (ashift:DI (reg:DI 0 ax [347])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [347])
        (nil)))
(insn 478 477 479 27 (set (reg:DI 0 ax [347])
        (reg:DI 0 ax [348])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [348])
        (nil)))
(insn 479 478 480 27 (set (reg:DI 0 ax [orig:228 D.5026 ] [228])
        (reg:DI 0 ax [347])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [347])
        (nil)))
(insn 480 479 481 27 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.5025 ] [229])
                (plus:DI (reg:DI 0 ax [orig:228 D.5026 ] [228])
                    (reg/f:DI 4 si [orig:226 D.5025 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:228 D.5026 ] [228])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:226 D.5025 ] [226])
            (nil))))
(insn 481 480 482 27 (set (reg:SI 0 ax [orig:230 D.5024 ] [230])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:229 D.5025 ] [229])
                (const_int 116 [0x74])) [0 _187->bound+4 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:229 D.5025 ] [229])
        (nil)))
(insn 482 481 483 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:225 D.5024 ] [225])
            (reg:SI 0 ax [orig:230 D.5024 ] [230]))) mSector.c:255 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:230 D.5024 ] [230])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:225 D.5024 ] [225])
            (nil))))
(jump_insn 483 482 484 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 512)
            (pc))) mSector.c:255 612 {*jcc_1}
     (nil)
 -> 512)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 231 232 233 234 235 236 237 238 239 240 349 350 351 352 353 354 355 356
(note 484 483 485 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 485 484 486 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f44d28a4850 *.LC14>)) mSector.c:256 87 {*movdi_internal_rex64}
     (nil))
(call_insn 486 485 487 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:256 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 487 486 488 28 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 488 487 489 28 (set (reg/f:DI 2 cx [orig:231 D.5025 ] [231])
        (mem/f:DI (reg/f:DI 0 ax [349]) [0 *f_9(D)+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [349])
        (nil)))
(insn 489 488 490 28 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (nil))
(insn 490 489 491 28 (set (reg:DI 1 dx [orig:232 D.5026 ] [232])
        (sign_extend:DI (reg:SI 0 ax [350]))) mSector.c:257 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [350])
        (nil)))
(insn 491 490 492 28 (set (reg:DI 0 ax [351])
        (reg:DI 1 dx [orig:232 D.5026 ] [232])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 492 491 493 28 (parallel [
            (set (reg:DI 0 ax [351])
                (ashift:DI (reg:DI 0 ax [351])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (nil))
(insn 493 492 494 28 (parallel [
            (set (reg:DI 0 ax [351])
                (plus:DI (reg:DI 0 ax [351])
                    (reg:DI 1 dx [orig:232 D.5026 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:232 D.5026 ] [232])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.5026 ] [232])
                (const_int 5 [0x5]))
            (nil))))
(insn 494 493 495 28 (parallel [
            (set (reg:DI 0 ax [352])
                (ashift:DI (reg:DI 0 ax [351])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [351])
        (nil)))
(insn 495 494 496 28 (set (reg:DI 0 ax [351])
        (reg:DI 0 ax [352])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [352])
        (nil)))
(insn 496 495 497 28 (set (reg:DI 0 ax [orig:233 D.5026 ] [233])
        (reg:DI 0 ax [351])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [351])
        (nil)))
(insn 497 496 498 28 (parallel [
            (set (reg/f:DI 2 cx [orig:234 D.5025 ] [234])
                (plus:DI (reg/f:DI 2 cx [orig:231 D.5025 ] [231])
                    (reg:DI 0 ax [orig:233 D.5026 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:233 D.5026 ] [233])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:231 D.5025 ] [231])
            (nil))))
(insn 498 497 499 28 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 499 498 500 28 (set (reg/f:DI 4 si [orig:235 D.5025 ] [235])
        (mem/f:DI (reg/f:DI 0 ax [353]) [0 *f_9(D)+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [353])
        (nil)))
(insn 500 499 501 28 (set (reg:SI 0 ax [354])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (nil))
(insn 501 500 502 28 (set (reg:DI 1 dx [orig:236 D.5026 ] [236])
        (sign_extend:DI (reg:SI 0 ax [354]))) mSector.c:257 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [354])
        (nil)))
(insn 502 501 503 28 (set (reg:DI 0 ax [355])
        (reg:DI 1 dx [orig:236 D.5026 ] [236])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 503 502 504 28 (parallel [
            (set (reg:DI 0 ax [355])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (nil))
(insn 504 503 505 28 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg:DI 0 ax [355])
                    (reg:DI 1 dx [orig:236 D.5026 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:236 D.5026 ] [236])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:236 D.5026 ] [236])
                (const_int 5 [0x5]))
            (nil))))
(insn 505 504 506 28 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [355])
        (nil)))
(insn 506 505 507 28 (set (reg:DI 0 ax [355])
        (reg:DI 0 ax [356])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [356])
        (nil)))
(insn 507 506 508 28 (set (reg:DI 0 ax [orig:237 D.5026 ] [237])
        (reg:DI 0 ax [355])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [355])
        (nil)))
(insn 508 507 509 28 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.5025 ] [238])
                (plus:DI (reg:DI 0 ax [orig:237 D.5026 ] [237])
                    (reg/f:DI 4 si [orig:235 D.5025 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:237 D.5026 ] [237])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:235 D.5025 ] [235])
            (nil))))
(insn 509 508 510 28 (set (reg:SI 0 ax [orig:239 D.5024 ] [239])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.5025 ] [238])
                (const_int 116 [0x74])) [0 _196->bound+4 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:238 D.5025 ] [238])
        (nil)))
(insn 510 509 511 28 (parallel [
            (set (reg:SI 0 ax [orig:240 D.5024 ] [240])
                (plus:SI (reg:SI 0 ax [orig:239 D.5024 ] [239])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:239 D.5024 ] [239])
        (nil)))
(insn 511 510 512 28 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:234 D.5025 ] [234])
                (const_int 116 [0x74])) [0 _192->bound+4 S4 A32])
        (reg:SI 0 ax [orig:240 D.5024 ] [240])) mSector.c:257 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:240 D.5024 ] [240])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:234 D.5025 ] [234])
            (nil))))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;;              27
;;              18 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 512 511 513 29 101 "" [2 uses])
(note 513 512 514 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 514 513 515 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:225 273 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 357
(code_label 515 514 516 30 88 "" [1 uses])
(note 516 515 517 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 30 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 518 517 520 30 (set (reg:SI 0 ax [orig:59 D.5024 ] [59])
        (mem:SI (reg/f:DI 0 ax [357]) [0 *Nflight_7(D)+0 S4 A32])) mSector.c:225 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [357])
        (nil)))
(insn 520 518 521 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.5024 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) mSector.c:225 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5024 ] [59])
        (nil)))
(jump_insn 521 520 522 30 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 519)
            (pc))) mSector.c:225 612 {*jcc_1}
     (nil)
 -> 519)
;;  succ:       3
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 241 242
(note 522 521 523 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 523 522 526 31 (set (reg:SI 0 ax [orig:241 D.5024 ] [241])
        (const_int 1 [0x1])) mSector.c:262 89 {*movsi_internal}
     (nil))
(insn 526 523 530 31 (set (reg:SI 0 ax [orig:242 <retval> ] [242])
        (reg:SI 0 ax [orig:241 D.5024 ] [241])) mSector.c:262 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:241 D.5024 ] [241])
        (nil)))
(insn 530 526 533 31 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:242 <retval> ] [242])) mSector.c:263 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:242 <retval> ] [242])
        (nil)))
(insn 533 530 0 31 (use (reg/i:SI 0 ax)) mSector.c:263 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function is_on_bound (is_on_bound, funcdef_no=14, decl_uid=1900, cgraph_uid=14)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 58: point = 0
   Insn 55: point = 0
   Insn 51: point = 1
  BB 4
   Insn 63: point = 4
   Insn 34: point = 4
  BB 7
   Insn 48: point = 5
  BB 6
   Insn 46: point = 6
   Insn 45: point = 6
   Insn 43: point = 7
   Insn 42: point = 9
  BB 2
   Insn 61: point = 10
   Insn 8: point = 10
   Insn 4: point = 10
   Insn 3: point = 10
   Insn 2: point = 10
  BB 5
   Insn 39: point = 10
  BB 3
   Insn 32: point = 10
   Insn 31: point = 10
   Insn 30: point = 11
   Insn 29: point = 12
   Insn 28: point = 12
   Insn 27: point = 13
   Insn 26: point = 14
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 18
   Insn 22: point = 20
   Insn 21: point = 21
   Insn 20: point = 23
   Insn 19: point = 25
   Insn 18: point = 26
   Insn 17: point = 28
   Insn 16: point = 30
   Insn 15: point = 31
   Insn 14: point = 33
   Insn 13: point = 35
   Insn 12: point = 37
 r59: [2..5]
 r60: [6..7]
 r61: [34..35]
 r62: [32..33]
 r63: [29..31]
 r64: [27..28]
 r65: [13..26]
 r66: [22..23]
 r67: [19..21]
 r68: [17..18]
 r69: [12..16]
 r70: [10..11]
 r71: [0..1]
 r72: [36..37]
 r73: [29..30]
 r74: [24..25]
 r75: [19..20]
 r76: [14..15]
 r77: [8..9]
Compressing live ranges: from 38 to 30 - 78%
Ranges after the compression:
 r59: [2..3]
 r60: [4..5]
 r61: [26..27]
 r62: [24..25]
 r63: [22..23]
 r64: [20..21]
 r65: [10..19]
 r66: [16..17]
 r67: [14..15]
 r68: [12..13]
 r69: [10..11]
 r70: [8..9]
 r71: [0..1]
 r72: [28..29]
 r73: [22..23]
 r74: [18..19]
 r75: [14..15]
 r76: [10..11]
 r77: [6..7]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 48
changing reg in insn 34
changing reg in insn 51
changing reg in insn 43
changing reg in insn 45
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 27
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 51
changing reg in insn 55
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 42
changing reg in insn 43
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.


is_on_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={19d,18u} r1={6d,5u,2e} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,21u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={10d,2u} r18={1d} r19={1d} r20={1d,1u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 161{95d,61u,5e} in 37{36 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
        (reg:DI 4 si [ bound ])) mSector.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bound ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])
        (reg:SI 1 dx [ N ])) mSector.c:265 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 61 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:267 89 {*movsi_internal}
     (nil))
(jump_insn 61 8 62 2 (set (pc)
        (label_ref 40)) mSector.c:267 650 {jump}
     (nil)
 -> 40)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 62 61 44)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76
(code_label 44 62 11 3 114 "" [1 uses])
(note 11 44 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 ax [72])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 0 ax [orig:61 D.5034 ] [61])
        (sign_extend:DI (reg:SI 0 ax [72]))) mSector.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [72])
        (nil)))
(insn 14 13 15 3 (parallel [
            (set (reg:DI 0 ax [orig:62 D.5034 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.5034 ] [61])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5034 ] [61])
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 1 dx [orig:63 D.5034 ] [63])
                (ashift:DI (reg:DI 0 ax [orig:62 D.5034 ] [62])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.5034 ] [62])
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5035 ] [64])
                (plus:DI (reg/f:DI 0 ax [73])
                    (reg:DI 1 dx [orig:63 D.5034 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [73])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.5034 ] [63])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:63 D.5034 ] [63]))
                (nil)))))
(insn 18 17 19 3 (set (reg/f:DI 2 cx [orig:65 D.5036 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.5035 ] [64]) [0 *_10+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5035 ] [64])
        (nil)))
(insn 19 18 20 3 (set (reg:SI 0 ax [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:66 D.5037 ] [66])
        (sign_extend:DI (reg:SI 0 ax [74]))) mSector.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [74])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [orig:67 D.5037 ] [67])
                (ashift:DI (reg:DI 0 ax [orig:66 D.5037 ] [66])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.5037 ] [66])
        (nil)))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.5035 ] [68])
                (plus:DI (reg/f:DI 0 ax [75])
                    (reg:DI 1 dx [orig:67 D.5037 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.5037 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
                    (reg:DI 1 dx [orig:67 D.5037 ] [67]))
                (nil)))))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:69 D.5036 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [orig:68 D.5035 ] [68]) [0 *_14+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.5035 ] [68])
        (nil)))
(insn 25 24 26 3 (set (reg:DI 1 dx [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx)
        (reg:DI 1 dx [76])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [76])
        (nil)))
(insn 27 26 28 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:65 D.5036 ] [65])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:65 D.5036 ] [65])
        (nil)))
(insn 28 27 29 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:69 D.5036 ] [69])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5036 ] [69])
        (nil)))
(call_insn 29 28 30 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:267 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 30 29 31 3 (set (reg:SI 0 ax [orig:70 D.5033 ] [70])
        (reg:SI 0 ax)) mSector.c:267 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 D.5033 ] [70])
            (const_int 0 [0]))) mSector.c:267 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.5033 ] [70])
        (nil)))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) mSector.c:267 612 {*jcc_1}
     (nil)
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 63 4 (set (reg:SI 0 ax [orig:59 D.5033 ] [59])
        (const_int 1 [0x1])) mSector.c:267 89 {*movsi_internal}
     (nil))
(jump_insn 63 34 64 4 (set (pc)
        (label_ref 49)) mSector.c:267 650 {jump}
     (nil)
 -> 49)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 64 63 37)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 37 64 38 5 112 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 77
(code_label 40 39 41 6 111 "" [1 uses])
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 6 (set (reg:SI 0 ax [77])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 43 42 45 6 (parallel [
            (set (reg:SI 0 ax [orig:60 D.5033 ] [60])
                (plus:SI (reg:SI 0 ax [77])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [77])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 45 43 46 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:60 D.5033 ] [60])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mSector.c:267 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.5033 ] [60])
        (nil)))
(jump_insn 46 45 47 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) mSector.c:267 612 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg:SI 0 ax [orig:59 D.5033 ] [59])
        (const_int 0 [0])) mSector.c:268 89 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 71
(code_label 49 48 50 8 113 "" [1 uses])
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 55 8 (set (reg:SI 0 ax [orig:71 <retval> ] [71])
        (reg:SI 0 ax [orig:59 D.5033 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5033 ] [59])
        (nil)))
(insn 55 51 58 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:71 <retval> ] [71])) mSector.c:269 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 <retval> ] [71])
        (nil)))
(insn 58 55 0 8 (use (reg/i:SI 0 ax)) mSector.c:269 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _alloc_shock (_alloc_shock, funcdef_no=15, decl_uid=4116, cgraph_uid=15)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 13:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 38: point = 0
   Insn 35: point = 0
   Insn 31: point = 1
   Insn 28: point = 3
   Insn 27: point = 4
   Insn 26: point = 5
   Insn 25: point = 6
   Insn 24: point = 7
   Insn 23: point = 7
   Insn 22: point = 8
   Insn 21: point = 8
   Insn 20: point = 10
   Insn 19: point = 11
   Insn 18: point = 12
   Insn 43: point = 13
   Insn 51: point = 15
   Insn 50: point = 16
   Insn 49: point = 16
   Insn 48: point = 17
   Insn 16: point = 17
   Insn 42: point = 19
   Insn 14: point = 21
   Insn 13: point = 22
   Insn 12: point = 24
   Insn 11: point = 26
   Insn 10: point = 27
   Insn 9: point = 29
   Insn 8: point = 30
   Insn 41: point = 31
   Insn 6: point = 33
   Insn 2: point = 34
 r59: [32..33]
 r60: [23..31]
 r61: [28..30]
 r62: [28..29]
 r63: [25..27]
 r64: [23..24]
 r65: [18..22]
 r66: [20..21]
 r67: [18..19]
 r68: [14..17]
 r69: [11..13]
 r70: [7..8]
 r71: [4..6]
 r72: [2..3]
 r73: [0..1]
 r74: [25..26]
 r75: [11..12]
 r76: [9..10]
 r77: [4..5]
 r79: [15..16]
Compressing live ranges: from 34 to 26 - 76%
Ranges after the compression:
 r59: [24..25]
 r60: [18..23]
 r61: [22..23]
 r62: [22..23]
 r63: [20..21]
 r64: [18..19]
 r65: [14..17]
 r66: [16..17]
 r67: [14..15]
 r68: [12..13]
 r69: [10..11]
 r70: [6..7]
 r71: [4..5]
 r72: [2..3]
 r73: [0..1]
 r74: [20..21]
 r75: [10..11]
 r76: [8..9]
 r77: [4..5]
 r79: [12..13]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 41
changing reg in insn 41
changing reg in insn 13
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 42
changing reg in insn 42
changing reg in insn 16
changing reg in insn 43
changing reg in insn 43
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 50
changing reg in insn 49
changing reg in insn 51
changing reg in insn 50
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.


_alloc_shock

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 19[fpcr]
;;  ref usage 	r0={13d,13u} r1={4d,2u} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,18u} r7={1d,3u} r8={6d,5u} r9={3d,2u} r10={3d,2u} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d,1u} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 137{87d,50u,0e} in 31{30 regular + 1 call} insns.
(note 1 0 44 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 79
(note 44 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 44 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])
        (reg:DI 5 di [ shock ])) mSector.c:271 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ shock ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 41 2 (set (reg:SI 0 ax [orig:59 D.5038 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 conf.nsim+0 S4 A128])) mSector.c:272 89 {*movsi_internal}
     (nil))
(insn 41 6 8 2 (parallel [
            (set (reg:XF 9 st(1) [orig:60 D.5039 ] [60])
                (float:XF (reg:SI 0 ax [orig:59 D.5038 ] [59])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5038 ] [59])
        (nil)))
(insn 8 41 9 2 (set (reg:XF 10 st(2) [orig:61 D.5039 ] [61])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 192 [0xc0])) [0 conf.f_lvl+16 S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 8 st [orig:62 D.5039 ] [62])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 176 [0xb0])) [0 conf.f_lvl+0 S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 10 st(2) [orig:63 D.5039 ] [63])
        (minus:XF (reg:XF 10 st(2) [orig:61 D.5039 ] [61])
            (reg:XF 8 st [orig:62 D.5039 ] [62]))) mSector.c:272 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5039 ] [62])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:61 D.5039 ] [61])
            (nil))))
(insn 11 10 12 2 (set (reg:XF 8 st [74])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 12 11 13 2 (set (reg:XF 8 st [orig:64 D.5039 ] [64])
        (div:XF (reg:XF 10 st(2) [orig:63 D.5039 ] [63])
            (reg:XF 8 st [74]))) mSector.c:272 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [74])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.5039 ] [63])
            (nil))))
(insn 13 12 14 2 (set (reg:XF 9 st(1) [orig:65 D.5039 ] [65])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.5039 ] [60])
            (reg:XF 8 st [orig:64 D.5039 ] [64]))) mSector.c:272 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5039 ] [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5039 ] [60])
            (nil))))
(insn 14 13 42 2 (set (reg:SI 0 ax [orig:66 D.5038 ] [66])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 132 [0x84])) [0 conf.Nm_shock+0 S4 A32])) mSector.c:272 89 {*movsi_internal}
     (nil))
(insn 42 14 16 2 (parallel [
            (set (reg:XF 8 st [orig:67 D.5039 ] [67])
                (float:XF (reg:SI 0 ax [orig:66 D.5038 ] [66])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.5038 ] [66])
        (nil)))
(insn 16 42 48 2 (set (reg:XF 8 st [orig:68 D.5039 ] [68])
        (mult:XF (reg:XF 8 st [orig:67 D.5039 ] [67])
            (reg:XF 9 st(1) [orig:65 D.5039 ] [65]))) mSector.c:272 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5039 ] [67])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.5039 ] [65])
            (nil))))
(insn 48 16 49 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mSector.c:272 199 {x86_fnstcw_1}
     (nil))
(insn 49 48 50 2 (set (reg:HI 0 ax [79])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0  S2 A16])) mSector.c:272 90 {*movhi_internal}
     (nil))
(insn 50 49 51 2 (parallel [
            (set (reg:HI 0 ax [79])
                (ior:HI (reg:HI 0 ax [79])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:272 410 {*iorhi_1}
     (nil))
(insn 51 50 43 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0  S2 A16])
        (reg:HI 0 ax [79])) mSector.c:272 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [79])
        (nil)))
(insn 43 51 18 2 (parallel [
            (set (reg:SI 1 dx [orig:69 D.5038 ] [69])
                (fix:SI (reg:XF 8 st [orig:68 D.5039 ] [68])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -14 [0xfffffffffffffff2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5039 ] [68])
        (nil)))
(insn 18 43 19 2 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:272 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (mem/j:SI (reg/f:DI 0 ax [75]) [0 shock_12(D)->Nshock+0 S4 A64])
        (reg:SI 1 dx [orig:69 D.5038 ] [69])) mSector.c:272 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:69 D.5038 ] [69])
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:273 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:70 D.5038 ] [70])
        (mem/j:SI (reg/f:DI 0 ax [76]) [0 shock_12(D)->Nshock+0 S4 A64])) mSector.c:273 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (const_int 6 [0x6])) mSector.c:273 89 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:70 D.5038 ] [70])) mSector.c:273 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.5038 ] [70])
        (nil)))
(call_insn 24 23 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:273 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [orig:71 D.5040 ] [71])
        (reg:DI 0 ax)) mSector.c:273 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 26 25 27 2 (set (reg/f:DI 1 dx [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:273 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [77])
                (const_int 8 [0x8])) [0 shock_12(D)->shock+0 S8 A64])
        (reg/f:DI 0 ax [orig:71 D.5040 ] [71])) mSector.c:273 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5040 ] [71])
            (nil))))
(insn 28 27 31 2 (set (reg:SI 0 ax [orig:72 D.5038 ] [72])
        (const_int 1 [0x1])) mSector.c:274 89 {*movsi_internal}
     (nil))
(insn 31 28 45 2 (set (reg:SI 0 ax [orig:73 <retval> ] [73])
        (reg:SI 0 ax [orig:72 D.5038 ] [72])) mSector.c:274 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5038 ] [72])
        (nil)))
(note 45 31 35 2 NOTE_INSN_DELETED)
(insn 35 45 38 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:73 <retval> ] [73])) mSector.c:275 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 <retval> ] [73])
        (nil)))
(insn 38 35 0 2 (use (reg/i:SI 0 ax)) mSector.c:275 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _set_cross_timeM1 (_set_cross_timeM1, funcdef_no=16, decl_uid=4120, cgraph_uid=16)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 76
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 80:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 98: point = 0
   Insn 95: point = 0
   Insn 91: point = 1
   Insn 88: point = 3
  BB 4
   Insn 86: point = 4
   Insn 85: point = 4
   Insn 84: point = 5
  BB 2
   Insn 101: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 3
   Insn 80: point = 6
   Insn 79: point = 6
   Insn 78: point = 7
   Insn 77: point = 9
   Insn 76: point = 11
   Insn 75: point = 13
   Insn 74: point = 15
   Insn 73: point = 17
   Insn 72: point = 19
   Insn 71: point = 21
   Insn 70: point = 23
   Insn 69: point = 25
   Insn 68: point = 27
   Insn 67: point = 28
   Insn 66: point = 28
   Insn 65: point = 29
   Insn 64: point = 31
   Insn 63: point = 32
   Insn 62: point = 34
   Insn 61: point = 35
   Insn 60: point = 37
   Insn 59: point = 39
   Insn 58: point = 41
   Insn 57: point = 43
   Insn 56: point = 45
   Insn 55: point = 46
   Insn 54: point = 46
   Insn 53: point = 47
   Insn 52: point = 49
   Insn 51: point = 50
   Insn 50: point = 52
   Insn 49: point = 53
   Insn 48: point = 55
   Insn 47: point = 57
   Insn 46: point = 59
   Insn 45: point = 61
   Insn 44: point = 63
   Insn 43: point = 65
   Insn 42: point = 67
   Insn 41: point = 69
   Insn 40: point = 71
   Insn 39: point = 72
   Insn 38: point = 72
   Insn 37: point = 73
   Insn 36: point = 75
   Insn 35: point = 76
   Insn 34: point = 78
   Insn 33: point = 79
   Insn 32: point = 81
   Insn 31: point = 83
   Insn 30: point = 85
   Insn 29: point = 87
   Insn 28: point = 89
   Insn 27: point = 90
   Insn 26: point = 90
   Insn 25: point = 91
   Insn 24: point = 93
   Insn 23: point = 94
   Insn 22: point = 96
   Insn 21: point = 97
   Insn 20: point = 99
   Insn 19: point = 101
   Insn 18: point = 103
   Insn 17: point = 105
   Insn 16: point = 106
   Insn 15: point = 106
   Insn 14: point = 107
   Insn 13: point = 109
   Insn 12: point = 110
   Insn 11: point = 112
 r59: [98..110]
 r60: [105..107]
 r61: [98..99]
 r62: [6..97]
 r63: [82..94]
 r64: [89..91]
 r65: [82..83]
 r66: [80..81]
 r67: [56..79]
 r68: [64..76]
 r69: [71..73]
 r70: [64..65]
 r71: [62..63]
 r72: [60..61]
 r73: [58..59]
 r74: [56..57]
 r75: [54..55]
 r76: [8..53]
 r77: [38..50]
 r78: [45..47]
 r79: [38..39]
 r80: [36..37]
 r81: [12..35]
 r82: [20..32]
 r83: [27..29]
 r84: [20..21]
 r85: [18..19]
 r86: [16..17]
 r87: [14..15]
 r88: [12..13]
 r89: [10..11]
 r90: [8..9]
 r91: [6..7]
 r92: [2..3]
 r93: [0..1]
 r94: [111..112]
 r95: [108..109]
 r96: [104..106] [100..101]
 r97: [102..103]
 r98: [95..96]
 r99: [92..93]
 r100: [88..90] [84..85]
 r101: [86..87]
 r102: [77..78]
 r103: [74..75]
 r104: [70..72] [66..67]
 r105: [68..69]
 r106: [51..52]
 r107: [48..49]
 r108: [44..46] [40..41]
 r109: [42..43]
 r110: [33..34]
 r111: [30..31]
 r112: [26..28] [22..23]
 r113: [24..25]
 r114: [4..5]
Compressing live ranges: from 113 to 94 - 83%
Ranges after the compression:
 r59: [82..91]
 r60: [88..89]
 r61: [82..83]
 r62: [6..81]
 r63: [70..79]
 r64: [76..77]
 r65: [70..71]
 r66: [68..69]
 r67: [48..67]
 r68: [56..65]
 r69: [62..63]
 r70: [56..57]
 r71: [54..55]
 r72: [52..53]
 r73: [50..51]
 r74: [48..49]
 r75: [46..47]
 r76: [8..45]
 r77: [34..43]
 r78: [40..41]
 r79: [34..35]
 r80: [32..33]
 r81: [12..31]
 r82: [20..29]
 r83: [26..27]
 r84: [20..21]
 r85: [18..19]
 r86: [16..17]
 r87: [14..15]
 r88: [12..13]
 r89: [10..11]
 r90: [8..9]
 r91: [6..7]
 r92: [2..3]
 r93: [0..1]
 r94: [92..93]
 r95: [90..91]
 r96: [88..89] [84..85]
 r97: [86..87]
 r98: [80..81]
 r99: [78..79]
 r100: [76..77] [72..73]
 r101: [74..75]
 r102: [66..67]
 r103: [64..65]
 r104: [62..63] [58..59]
 r105: [60..61]
 r106: [44..45]
 r107: [42..43]
 r108: [40..41] [36..37]
 r109: [38..39]
 r110: [30..31]
 r111: [28..29]
 r112: [26..27] [22..23]
 r113: [24..25]
 r114: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 21
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 79
changing reg in insn 23
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 78
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 88
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 28
changing reg in insn 27
changing reg in insn 26
changing reg in insn 31
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 40
changing reg in insn 39
changing reg in insn 38
changing reg in insn 43
changing reg in insn 41
changing reg in insn 40
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 59
changing reg in insn 57
changing reg in insn 56
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 68
changing reg in insn 67
changing reg in insn 66
changing reg in insn 71
changing reg in insn 69
changing reg in insn 68
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 84
changing reg in insn 85
starting the processing of deferred insns
ending the processing of deferred insns


_set_cross_timeM1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={57d,57u} r1={6d,10u,5e} r2={3d,2u} r4={5d,5u} r5={3d,3u} r6={1d,22u} r7={1d,5u} r8={2d,2u} r9={1d,1u} r17={26d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 230{116d,109u,5e} in 81{81 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mSector.c:277 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:279 89 {*movsi_internal}
     (nil))
(jump_insn 101 7 102 2 (set (pc)
        (label_ref 81)) mSector.c:279 650 {jump}
     (nil)
 -> 81)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 83)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113
(code_label 83 102 10 3 119 "" [1 uses])
(note 10 83 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 2 cx [orig:59 D.5041 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [94]) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:60 D.5042 ] [60])
        (sign_extend:DI (reg:SI 0 ax [95]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 15 14 16 3 (set (reg:DI 0 ax [96])
        (reg:DI 1 dx [orig:60 D.5042 ] [60])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [96])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [96])
                (plus:DI (reg:DI 0 ax [96])
                    (reg:DI 1 dx [orig:60 D.5042 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5042 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.5042 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [96])
        (reg:DI 0 ax [97])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:61 D.5042 ] [61])
        (reg:DI 0 ax [96])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 2 cx [orig:62 D.5041 ] [62])
                (plus:DI (reg/f:DI 2 cx [orig:59 D.5041 ] [59])
                    (reg:DI 0 ax [orig:61 D.5042 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5042 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.5041 ] [59])
            (nil))))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 4 si [orig:63 D.5041 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [98]) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 24 23 25 3 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 1 dx [orig:64 D.5042 ] [64])
        (sign_extend:DI (reg:SI 0 ax [99]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(insn 26 25 27 3 (set (reg:DI 0 ax [100])
        (reg:DI 1 dx [orig:64 D.5042 ] [64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 0 ax [100])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 0 ax [100])
                (plus:DI (reg:DI 0 ax [100])
                    (reg:DI 1 dx [orig:64 D.5042 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.5042 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.5042 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 30 29 31 3 (set (reg:DI 0 ax [100])
        (reg:DI 0 ax [101])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:65 D.5042 ] [65])
        (reg:DI 0 ax [100])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 32 31 33 3 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5041 ] [66])
                (plus:DI (reg:DI 0 ax [orig:65 D.5042 ] [65])
                    (reg/f:DI 4 si [orig:63 D.5041 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5042 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:63 D.5041 ] [63])
            (nil))))
(insn 33 32 34 3 (set (reg/f:DI 4 si [orig:67 D.5043 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:66 D.5041 ] [66])
                (const_int 16 [0x10])) [0 _12->time+0 S8 A128])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5041 ] [66])
        (nil)))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 3 (set (reg/f:DI 5 di [orig:68 D.5041 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [102]) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (nil)))
(insn 36 35 37 3 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 1 dx [orig:69 D.5042 ] [69])
        (sign_extend:DI (reg:SI 0 ax [103]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [103])
        (nil)))
(insn 38 37 39 3 (set (reg:DI 0 ax [104])
        (reg:DI 1 dx [orig:69 D.5042 ] [69])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 0 ax [104])
                (ashift:DI (reg:DI 0 ax [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (nil))
(insn 40 39 41 3 (parallel [
            (set (reg:DI 0 ax [104])
                (plus:DI (reg:DI 0 ax [104])
                    (reg:DI 1 dx [orig:69 D.5042 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.5042 ] [69])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:69 D.5042 ] [69])
                (const_int 5 [0x5]))
            (nil))))
(insn 41 40 42 3 (parallel [
            (set (reg:DI 0 ax [105])
                (ashift:DI (reg:DI 0 ax [104])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 42 41 43 3 (set (reg:DI 0 ax [104])
        (reg:DI 0 ax [105])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 43 42 44 3 (set (reg:DI 0 ax [orig:70 D.5042 ] [70])
        (reg:DI 0 ax [104])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5041 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.5042 ] [70])
                    (reg/f:DI 5 di [orig:68 D.5041 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.5042 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:68 D.5041 ] [68])
            (nil))))
(insn 45 44 46 3 (set (reg:SI 0 ax [orig:72 D.5044 ] [72])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:71 D.5041 ] [71])
                (const_int 116 [0x74])) [0 _17->bound+4 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5041 ] [71])
        (nil)))
(insn 46 45 47 3 (set (reg:DI 0 ax [orig:73 D.5042 ] [73])
        (sign_extend:DI (reg:SI 0 ax [orig:72 D.5044 ] [72]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5044 ] [72])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 0 ax [orig:74 D.5042 ] [74])
                (ashift:DI (reg:DI 0 ax [orig:73 D.5042 ] [73])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:73 D.5042 ] [73])
        (nil)))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.5043 ] [75])
                (plus:DI (reg:DI 0 ax [orig:74 D.5042 ] [74])
                    (reg/f:DI 4 si [orig:67 D.5043 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.5042 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:67 D.5043 ] [67])
            (nil))))
(insn 49 48 50 3 (set (reg:XF 9 st(1) [orig:76 D.5045 ] [76])
        (mem:XF (reg/f:DI 0 ax [orig:75 D.5043 ] [75]) [0 *_21+0 S16 A128])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.5043 ] [75])
        (nil)))
(insn 50 49 51 3 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 3 (set (reg/f:DI 4 si [orig:77 D.5041 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [106]) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 52 51 53 3 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 53 52 54 3 (set (reg:DI 1 dx [orig:78 D.5042 ] [78])
        (sign_extend:DI (reg:SI 0 ax [107]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 54 53 55 3 (set (reg:DI 0 ax [108])
        (reg:DI 1 dx [orig:78 D.5042 ] [78])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg:DI 0 ax [108])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (nil))
(insn 56 55 57 3 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg:DI 0 ax [108])
                    (reg:DI 1 dx [orig:78 D.5042 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.5042 ] [78])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:78 D.5042 ] [78])
                (const_int 5 [0x5]))
            (nil))))
(insn 57 56 58 3 (parallel [
            (set (reg:DI 0 ax [109])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 58 57 59 3 (set (reg:DI 0 ax [108])
        (reg:DI 0 ax [109])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(insn 59 58 60 3 (set (reg:DI 0 ax [orig:79 D.5042 ] [79])
        (reg:DI 0 ax [108])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 60 59 61 3 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.5041 ] [80])
                (plus:DI (reg:DI 0 ax [orig:79 D.5042 ] [79])
                    (reg/f:DI 4 si [orig:77 D.5041 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.5042 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:77 D.5041 ] [77])
            (nil))))
(insn 61 60 62 3 (set (reg/f:DI 4 si [orig:81 D.5043 ] [81])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:80 D.5041 ] [80])
                (const_int 16 [0x10])) [0 _26->time+0 S8 A128])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.5041 ] [80])
        (nil)))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 3 (set (reg/f:DI 5 di [orig:82 D.5041 ] [82])
        (mem/f:DI (reg/f:DI 0 ax [110]) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 64 63 65 3 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 65 64 66 3 (set (reg:DI 1 dx [orig:83 D.5042 ] [83])
        (sign_extend:DI (reg:SI 0 ax [111]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [111])
        (nil)))
(insn 66 65 67 3 (set (reg:DI 0 ax [112])
        (reg:DI 1 dx [orig:83 D.5042 ] [83])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg:DI 0 ax [112])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (nil))
(insn 68 67 69 3 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg:DI 0 ax [112])
                    (reg:DI 1 dx [orig:83 D.5042 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.5042 ] [83])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:83 D.5042 ] [83])
                (const_int 5 [0x5]))
            (nil))))
(insn 69 68 70 3 (parallel [
            (set (reg:DI 0 ax [113])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 70 69 71 3 (set (reg:DI 0 ax [112])
        (reg:DI 0 ax [113])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 71 70 72 3 (set (reg:DI 0 ax [orig:84 D.5042 ] [84])
        (reg:DI 0 ax [112])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 72 71 73 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.5041 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 D.5042 ] [84])
                    (reg/f:DI 5 di [orig:82 D.5041 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:84 D.5042 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:82 D.5041 ] [82])
            (nil))))
(insn 73 72 74 3 (set (reg:SI 0 ax [orig:86 D.5044 ] [86])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:85 D.5041 ] [85])
                (const_int 112 [0x70])) [0 _31->bound+0 S4 A128])) mSector.c:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.5041 ] [85])
        (nil)))
(insn 74 73 75 3 (set (reg:DI 0 ax [orig:87 D.5042 ] [87])
        (sign_extend:DI (reg:SI 0 ax [orig:86 D.5044 ] [86]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:86 D.5044 ] [86])
        (nil)))
(insn 75 74 76 3 (parallel [
            (set (reg:DI 0 ax [orig:88 D.5042 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.5042 ] [87])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:87 D.5042 ] [87])
        (nil)))
(insn 76 75 77 3 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.5043 ] [89])
                (plus:DI (reg:DI 0 ax [orig:88 D.5042 ] [88])
                    (reg/f:DI 4 si [orig:81 D.5043 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.5042 ] [88])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:81 D.5043 ] [81])
            (nil))))
(insn 77 76 78 3 (set (reg:XF 8 st [orig:90 D.5045 ] [90])
        (mem:XF (reg/f:DI 0 ax [orig:89 D.5043 ] [89]) [0 *_35+0 S16 A128])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.5043 ] [89])
        (nil)))
(insn 78 77 79 3 (set (reg:XF 8 st [orig:91 D.5045 ] [91])
        (minus:XF (reg:XF 9 st(1) [orig:76 D.5045 ] [76])
            (reg:XF 8 st [orig:90 D.5045 ] [90]))) mSector.c:279 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5045 ] [90])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:76 D.5045 ] [76])
            (nil))))
(insn 79 78 80 3 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:62 D.5041 ] [62])
                (const_int 128 [0x80])) [0 _8->delta_t+0 S16 A128])
        (reg:XF 8 st [orig:91 D.5045 ] [91])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:91 D.5045 ] [91])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:62 D.5041 ] [62])
            (nil))))
(insn 80 79 81 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114
(code_label 81 80 82 4 118 "" [1 uses])
(note 82 81 84 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 4 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [114])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mSector.c:279 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [114])
        (nil)))
(jump_insn 86 85 87 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) mSector.c:279 612 {*jcc_1}
     (nil)
 -> 83)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 91 5 (set (reg:SI 0 ax [orig:92 D.5044 ] [92])
        (const_int 1 [0x1])) mSector.c:280 89 {*movsi_internal}
     (nil))
(insn 91 88 95 5 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:92 D.5044 ] [92])) mSector.c:280 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:92 D.5044 ] [92])
        (nil)))
(insn 95 91 98 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) mSector.c:281 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 <retval> ] [93])
        (nil)))
(insn 98 95 0 5 (use (reg/i:SI 0 ax)) mSector.c:281 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _alloc_flight_pos (_alloc_flight_pos, funcdef_no=17, decl_uid=4129, cgraph_uid=17)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 31:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 13
changing reg in insn 22
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 30
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 39
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 21
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 35
changing reg in insn 36
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.


_alloc_flight_pos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={18d,18u} r1={3d,3u,1e} r2={3d,1u} r3={1d,1u} r4={3d,2u} r5={3d,2u} r6={1d,16u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={8d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 142{90d,51u,1e} in 32{31 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mSector.c:283 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 conf+0 S8 A64])
        (reg:DI 1 dx [ conf ])) mSector.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ conf ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 52 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:285 89 {*movsi_internal}
     (nil))
(jump_insn 52 8 53 2 (set (pc)
        (label_ref 32)) mSector.c:285 650 {jump}
     (nil)
 -> 32)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 34)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 68 69 70 71 72
(code_label 34 53 11 3 123 "" [1 uses])
(note 11 34 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [68])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 2 cx [orig:59 D.5046 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [68]) [0 *f_4(D)+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [68])
        (nil)))
(insn 14 13 15 3 (set (reg:SI 0 ax [69])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 1 dx [orig:60 D.5047 ] [60])
        (sign_extend:DI (reg:SI 0 ax [69]))) mSector.c:285 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [69])
        (nil)))
(insn 16 15 17 3 (set (reg:DI 0 ax [70])
        (reg:DI 1 dx [orig:60 D.5047 ] [60])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [70])
                (ashift:DI (reg:DI 0 ax [70])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [70])
                (plus:DI (reg:DI 0 ax [70])
                    (reg:DI 1 dx [orig:60 D.5047 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5047 ] [60])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.5047 ] [60])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 0 ax [71])
                (ashift:DI (reg:DI 0 ax [70])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 20 19 21 3 (set (reg:DI 0 ax [70])
        (reg:DI 0 ax [71])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(insn 21 20 22 3 (set (reg:DI 0 ax [orig:61 D.5047 ] [61])
        (reg:DI 0 ax [70])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 3 bx [orig:62 D.5046 ] [62])
                (plus:DI (reg/f:DI 2 cx [orig:59 D.5046 ] [59])
                    (reg:DI 0 ax [orig:61 D.5047 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5047 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.5046 ] [59])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 conf+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg:SI 0 ax [orig:63 D.5048 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [72])
                (const_int 192 [0xc0])) [0 conf_9(D)->t_w+0 S4 A128])) mSector.c:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [72])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:SI 0 ax [orig:64 D.5048 ] [64])
                (ashift:SI (reg:SI 0 ax [orig:63 D.5048 ] [63])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.5048 ] [63])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 3 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:64 D.5048 ] [64])) mSector.c:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.5048 ] [64])
        (nil)))
(call_insn 28 27 29 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:285 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [orig:65 D.5049 ] [65])
        (reg:DI 0 ax)) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 30 29 31 3 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:62 D.5046 ] [62])
                (const_int 32 [0x20])) [0 _8->pos+0 S8 A128])
        (reg/f:DI 0 ax [orig:65 D.5049 ] [65])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5049 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:62 D.5046 ] [62])
            (nil))))
(insn 31 30 32 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73
(code_label 32 31 33 4 122 "" [1 uses])
(note 33 32 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 33 36 4 (set (reg:SI 0 ax [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [73])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mSector.c:285 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [73])
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) mSector.c:285 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 34)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 66 67
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 42 5 (set (reg:SI 0 ax [orig:66 D.5048 ] [66])
        (const_int 1 [0x1])) mSector.c:286 89 {*movsi_internal}
     (nil))
(insn 42 39 46 5 (set (reg:SI 0 ax [orig:67 <retval> ] [67])
        (reg:SI 0 ax [orig:66 D.5048 ] [66])) mSector.c:286 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.5048 ] [66])
        (nil)))
(insn 46 42 49 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:67 <retval> ] [67])) mSector.c:287 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 <retval> ] [67])
        (nil)))
(insn 49 46 0 5 (use (reg/i:SI 0 ax)) mSector.c:287 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function init_Sector (init_Sector, funcdef_no=18, decl_uid=1896, cgraph_uid=18)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 37:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=85 from oldreg=72, assigning class DIREG to r85
      Creating newreg=86 from oldreg=74, assigning class CREG to r86
   37: {r86:DI=0;r85:DI=r86:DI<<0x3+r85:DI;r73:DI=r86:DI<<0x3+r73:DI;[r85:DI]=[r73:DI];use r86:DI;}
      REG_UNUSED r74:DI
      REG_UNUSED r73:DI
      REG_UNUSED r72:DI
    Inserting insn reload before:
   73: r85:DI=r72:DI
   74: r86:DI=r74:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 54:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=87 from oldreg=80, assigning class DIREG to r87
      Creating newreg=88 from oldreg=82, assigning class CREG to r88
   54: {r88:DI=0;r87:DI=r88:DI<<0x3+r87:DI;r81:DI=r88:DI<<0x3+r81:DI;[r87:DI]=[r81:DI];use r88:DI;}
      REG_UNUSED r82:DI
      REG_UNUSED r81:DI
      REG_UNUSED r80:DI
    Inserting insn reload before:
   75: r87:DI=r80:DI
   76: r88:DI=r82:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 70: point = 0
   Insn 67: point = 0
   Insn 63: point = 1
   Insn 60: point = 3
   Insn 59: point = 4
   Insn 58: point = 4
   Insn 57: point = 5
   Insn 56: point = 6
   Insn 55: point = 6
   Insn 54: point = 7
   Insn 76: point = 8
	Hard reg 0 is preferable by r88 with profit 1
   Insn 75: point = 10
	Hard reg 1 is preferable by r87 with profit 1
   Insn 53: point = 12
   Insn 52: point = 13
   Insn 51: point = 15
   Insn 50: point = 16
   Insn 49: point = 17
   Insn 48: point = 18
   Insn 47: point = 18
   Insn 46: point = 19
   Insn 45: point = 20
   Insn 44: point = 21
   Insn 43: point = 22
   Insn 42: point = 23
   Insn 41: point = 25
   Insn 40: point = 26
   Insn 39: point = 26
   Insn 38: point = 27
   Insn 37: point = 28
   Insn 74: point = 29
	Hard reg 0 is preferable by r86 with profit 1
   Insn 73: point = 31
	Hard reg 1 is preferable by r85 with profit 1
   Insn 36: point = 33
   Insn 35: point = 34
   Insn 34: point = 36
   Insn 33: point = 37
   Insn 32: point = 38
   Insn 31: point = 39
   Insn 30: point = 40
   Insn 29: point = 41
   Insn 28: point = 42
   Insn 27: point = 43
   Insn 26: point = 43
   Insn 25: point = 44
   Insn 24: point = 45
   Insn 23: point = 46
   Insn 22: point = 47
   Insn 21: point = 47
   Insn 20: point = 48
   Insn 19: point = 49
   Insn 18: point = 49
   Insn 17: point = 49
   Insn 16: point = 49
   Insn 15: point = 49
   Insn 14: point = 50
   Insn 13: point = 51
   Insn 12: point = 51
   Insn 11: point = 51
   Insn 10: point = 52
   Insn 6: point = 53
   Insn 5: point = 53
   Insn 4: point = 53
   Insn 3: point = 53
   Insn 2: point = 53
 r59: [40..42]
 r60: [19..23]
 r61: [2..3]
 r62: [0..1]
 r63: [51..52]
 r64: [49..50]
 r65: [47..48]
 r66: [44..46]
 r67: [43..45]
 r68: [40..41]
 r69: [27..39]
 r70: [26..38]
 r71: [35..37]
 r72: [32..36]
 r73: [28..34]
 r74: [30..33]
 r75: [24..25]
 r76: [20..22]
 r77: [18..21]
 r78: [6..17]
 r79: [14..16]
 r80: [11..15]
 r81: [7..13]
 r82: [9..12]
 r83: [4..5]
 r85: [28..31]
 r86: [28..29]
 r87: [7..10]
 r88: [7..8]
Compressing live ranges: from 53 to 36 - 67%
Ranges after the compression:
 r59: [26..27]
 r60: [14..15]
 r61: [2..3]
 r62: [0..1]
 r63: [34..35]
 r64: [32..33]
 r65: [30..31]
 r66: [28..29]
 r67: [28..29]
 r68: [26..27]
 r69: [18..25]
 r70: [18..25]
 r71: [24..25]
 r72: [22..25]
 r73: [18..23]
 r74: [20..23]
 r75: [16..17]
 r76: [14..15]
 r77: [14..15]
 r78: [6..13]
 r79: [12..13]
 r80: [10..13]
 r81: [6..11]
 r82: [8..11]
 r83: [4..5]
 r85: [18..21]
 r86: [18..19]
 r87: [6..9]
 r88: [6..7]
	 Assigning to 85 (cl=DIREG, orig=72, freq=2, tfirst=85, tfreq=2)...
	   Assign 5 to reload r85 (freq=2)
	 Assigning to 86 (cl=CREG, orig=74, freq=2, tfirst=86, tfreq=2)...
	   Assign 2 to reload r86 (freq=2)
	 Assigning to 87 (cl=DIREG, orig=80, freq=2, tfirst=87, tfreq=2)...
	   Assign 5 to reload r87 (freq=2)
	 Assigning to 88 (cl=CREG, orig=82, freq=2, tfirst=88, tfreq=2)...
	   Assign 2 to reload r88 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=352, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 28
changing reg in insn 30
changing reg in insn 42
changing reg in insn 46
changing reg in insn 60
changing reg in insn 63
changing reg in insn 63
changing reg in insn 67
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 38
changing reg in insn 32
changing reg in insn 39
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 47
changing reg in insn 49
changing reg in insn 55
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 59.


init_Sector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 37[r8] 38[r9]
;;  ref usage 	r0={25d,17u} r1={16d,7u} r2={15d,8u} r4={19d,10u} r5={23d,14u} r6={1d,22u} r7={1d,15u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={9d} r18={9d} r19={9d} r20={1d,1u} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={12d,3u} r38={11d,1u} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 563{465d,98u,0e} in 63{54 regular + 9 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])
        (reg:DI 1 dx [ config ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ config ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 shock+0 S8 A64])
        (reg:DI 2 cx [ shock ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ shock ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 input_ABM+0 S8 A64])
        (reg:DI 37 r8 [ input_ABM ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ input_ABM ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 0 ax [63])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:291 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [63])) mSector.c:291 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [63])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f44d24df4c0 *.LC16>)) mSector.c:291 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_boundary") [flags 0x41]  <function_decl 0x7f44d29f7200 get_boundary>) [0 get_boundary S1 A8])
            (const_int 0 [0]))) mSector.c:291 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg:DI 0 ax [64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:292 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [64])) mSector.c:292 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [64])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f44d24df558 *.LC17>)) mSector.c:292 87 {*movdi_internal_rex64}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_configuration") [flags 0x41]  <function_decl 0x7f44d29f7300 get_configuration>) [0 get_configuration S1 A8])
            (const_int 0 [0]))) mSector.c:292 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f44d24df5f0 *.LC18>)) mSector.c:294 87 {*movdi_internal_rex64}
     (nil))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:294 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 2 (set (reg:DI 0 ax [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:295 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [65])) mSector.c:295 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [65])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("generate_temporary_point") [flags 0x3]  <function_decl 0x7f44d29fcf00 generate_temporary_point>) [0 generate_temporary_point S1 A8])
            (const_int 0 [0]))) mSector.c:295 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 2 (set (reg:DI 1 dx [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (reg:DI 0 ax [67])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 input_ABM+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [66])) mSector.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [66])
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [67])) mSector.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_M1") [flags 0x41]  <function_decl 0x7f44d29f7100 get_M1>) [0 get_M1 S1 A8])
            (const_int 0 [0]))) mSector.c:297 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 28 27 29 2 (set (reg:SI 0 ax [orig:59 D.5050 ] [59])
        (reg:SI 0 ax)) mSector.c:297 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 29 28 30 2 (set (reg/f:DI 1 dx [68])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 1 dx [68]) [0 *Nflight_5(D)+0 S4 A32])
        (reg:SI 0 ax [orig:59 D.5050 ] [59])) mSector.c:297 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [68])
        (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5050 ] [59])
            (nil))))
(insn 31 30 32 2 (set (reg:DI 38 r9 [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg:DI 37 r8 [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:DI 1 dx [72])
        (reg/f:DI 7 sp)) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:DI 4 si [73])
        (reg/f:DI 0 ax [71])) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [71])
        (nil)))
(insn 36 35 73 2 (set (reg:DI 0 ax [74])
        (const_int 38 [0x26])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 73 36 74 2 (set (reg:DI 5 di [72])
        (reg:DI 1 dx [72])) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [72])
        (nil)))
(insn 74 73 37 2 (set (reg:DI 2 cx [74])
        (reg:DI 0 ax [74])) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(insn 37 74 38 2 (parallel [
            (set (reg:DI 2 cx [74])
                (const_int 0 [0]))
            (set (reg:DI 5 di [72])
                (plus:DI (ashift:DI (reg:DI 2 cx [74])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [72])))
            (set (reg:DI 4 si [73])
                (plus:DI (ashift:DI (reg:DI 2 cx [74])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [73])))
            (set (mem:BLK (reg:DI 5 di [72]) [0  S304 A128])
                (mem:BLK (reg:DI 4 si [73]) [0 *config_1(D)+0 S304 A128]))
            (use (reg:DI 2 cx [74]))
        ]) mSector.c:299 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [74])
        (expr_list:REG_UNUSED (reg:DI 5 di [72])
            (expr_list:REG_UNUSED (reg:DI 4 si [73])
                (nil)))))
(insn 38 37 39 2 (set (reg:DI 4 si)
        (reg:DI 38 r9 [69])) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [69])
        (nil)))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [70])) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [70])
        (nil)))
(call_insn 40 39 41 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("modify_traj_intersect_bound") [flags 0x3]  <function_decl 0x7f44d2a01200 modify_traj_intersect_bound>) [0 modify_traj_intersect_bound S1 A8])
            (const_int 304 [0x130]))) mSector.c:299 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:SI 2 cx [orig:60 D.5050 ] [60])
        (mem:SI (reg/f:DI 0 ax [75]) [0 *Nflight_5(D)+0 S4 A32])) mSector.c:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (nil)))
(insn 43 42 44 2 (set (reg:DI 1 dx [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [76])) mSector.c:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [76])
        (nil)))
(insn 46 45 47 2 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:60 D.5050 ] [60])) mSector.c:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:60 D.5050 ] [60])
        (nil)))
(insn 47 46 48 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [77])) mSector.c:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn 48 47 49 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_alloc_flight_pos") [flags 0x3]  <function_decl 0x7f44d278ca00 _alloc_flight_pos>) [0 _alloc_flight_pos S1 A8])
            (const_int 0 [0]))) mSector.c:309 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 49 48 50 2 (set (reg:DI 37 r8 [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 shock+0 S8 A64])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 2 (set (reg:DI 1 dx [80])
        (reg/f:DI 7 sp)) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:DI 4 si [81])
        (reg/f:DI 0 ax [79])) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (nil)))
(insn 53 52 75 2 (set (reg:DI 0 ax [82])
        (const_int 38 [0x26])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 75 53 76 2 (set (reg:DI 5 di [80])
        (reg:DI 1 dx [80])) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [80])
        (nil)))
(insn 76 75 54 2 (set (reg:DI 2 cx [82])
        (reg:DI 0 ax [82])) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [82])
        (nil)))
(insn 54 76 55 2 (parallel [
            (set (reg:DI 2 cx [82])
                (const_int 0 [0]))
            (set (reg:DI 5 di [80])
                (plus:DI (ashift:DI (reg:DI 2 cx [82])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [80])))
            (set (reg:DI 4 si [81])
                (plus:DI (ashift:DI (reg:DI 2 cx [82])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [81])))
            (set (mem:BLK (reg:DI 5 di [80]) [0  S304 A128])
                (mem:BLK (reg:DI 4 si [81]) [0 *config_1(D)+0 S304 A128]))
            (use (reg:DI 2 cx [82]))
        ]) mSector.c:311 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [82])
        (expr_list:REG_UNUSED (reg:DI 5 di [80])
            (expr_list:REG_UNUSED (reg:DI 4 si [81])
                (nil)))))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [78])) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [78])
        (nil)))
(call_insn 56 55 57 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_alloc_shock") [flags 0x3]  <function_decl 0x7f44d278c800 _alloc_shock>) [0 _alloc_shock S1 A8])
            (const_int 304 [0x130]))) mSector.c:311 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 57 56 58 2 (set (reg:DI 0 ax [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:312 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [83])) mSector.c:312 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(call_insn 59 58 60 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_temp_shock") [flags 0x41]  <function_decl 0x7f44d29f7400 get_temp_shock>) [0 get_temp_shock S1 A8])
            (const_int 0 [0]))) mSector.c:312 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 60 59 63 2 (set (reg:SI 0 ax [orig:61 D.5050 ] [61])
        (const_int 1 [0x1])) mSector.c:315 89 {*movsi_internal}
     (nil))
(insn 63 60 67 2 (set (reg:SI 0 ax [orig:62 <retval> ] [62])
        (reg:SI 0 ax [orig:61 D.5050 ] [61])) mSector.c:315 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.5050 ] [61])
        (nil)))
(insn 67 63 70 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:62 <retval> ] [62])) mSector.c:316 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 <retval> ] [62])
        (nil)))
(insn 70 67 0 2 (use (reg/i:SI 0 ax)) mSector.c:316 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

