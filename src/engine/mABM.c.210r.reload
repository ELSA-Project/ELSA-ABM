
;; Function init_output (init_output, funcdef_no=2, decl_uid=1916, cgraph_uid=2)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns


init_output

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,4u} r1={4d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,11u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={4d,1u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 189{158d,31u,0e} in 17{14 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mABM.c:22 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mABM.c:22 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 output_ABM+0 S8 A64])
        (reg:DI 1 dx [ output_ABM ])) mABM.c:22 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ output_ABM ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 output_ABM+0 S8 A64])) mABM.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f05a5492c78 *.LC0>)) mABM.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [59])) mABM.c:36 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [59])
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f05a599ab00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mABM.c:36 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 0 ax [60])
        (reg:DI 0 ax)) mABM.c:36 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [60])) mABM.c:36 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [60])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 wstream+0 S8 A64])
            (const_int 0 [0]))) mABM.c:37 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mABM.c:37 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f05a5492d10 *.LC1>)) mABM.c:37 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:37 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61
(code_label 19 18 20 4 2 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 0 ax [61])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 wstream+0 S8 A64])) mABM.c:38 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [61])) mABM.c:38 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [61])
        (nil)))
(call_insn 23 22 28 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f05a599a800 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mABM.c:38 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 28 23 0 4 (const_int 0 [0]) mABM.c:45 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function save_m3 (save_m3, funcdef_no=3, decl_uid=1934, cgraph_uid=3)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 174:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 175:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 184:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 208:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 216:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (1) rzw {*call_value}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 232: point = 0
   Insn 226: point = 0
   Insn 225: point = 0
   Insn 224: point = 1
  BB 14
   Insn 222: point = 2
   Insn 221: point = 2
   Insn 220: point = 3
  BB 4
   Insn 233: point = 4
   Insn 29: point = 4
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 5
   Insn 24: point = 5
   Insn 23: point = 6
   Insn 22: point = 7
  BB 3
   Insn 19: point = 8
   Insn 18: point = 8
  BB 2
   Insn 16: point = 8
   Insn 15: point = 8
   Insn 14: point = 8
   Insn 13: point = 9
   Insn 12: point = 10
   Insn 11: point = 10
   Insn 10: point = 11
   Insn 9: point = 11
   Insn 5: point = 12
   Insn 4: point = 12
   Insn 3: point = 12
   Insn 2: point = 12
  BB 13
   Insn 216: point = 12
  BB 12
   Insn 214: point = 12
   Insn 213: point = 12
   Insn 212: point = 13
  BB 5
   Insn 235: point = 14
   Insn 33: point = 14
  BB 11
   Insn 208: point = 14
  BB 10
   Insn 205: point = 14
   Insn 204: point = 14
   Insn 203: point = 14
   Insn 202: point = 15
  BB 9
   Insn 200: point = 16
   Insn 199: point = 16
   Insn 197: point = 17
   Insn 196: point = 19
   Insn 195: point = 21
   Insn 194: point = 22
   Insn 193: point = 24
   Insn 192: point = 26
   Insn 191: point = 28
   Insn 190: point = 29
   Insn 189: point = 29
   Insn 188: point = 30
   Insn 187: point = 32
  BB 7
   Insn 237: point = 33
   Insn 91: point = 33
   Insn 90: point = 33
   Insn 89: point = 33
   Insn 88: point = 33
   Insn 87: point = 34
   Insn 86: point = 34
   Insn 85: point = 35
   Insn 84: point = 36
   Insn 83: point = 37
   Insn 82: point = 39
   Insn 81: point = 41
   Insn 80: point = 42
   Insn 79: point = 44
   Insn 78: point = 46
   Insn 77: point = 48
   Insn 76: point = 49
   Insn 75: point = 49
   Insn 74: point = 50
   Insn 73: point = 52
   Insn 72: point = 53
   Insn 71: point = 55
   Insn 70: point = 57
   Insn 69: point = 58
   Insn 68: point = 60
   Insn 67: point = 62
   Insn 66: point = 64
   Insn 65: point = 65
   Insn 64: point = 65
   Insn 63: point = 66
   Insn 62: point = 68
  BB 8
   Insn 184: point = 69
   Insn 183: point = 69
   Insn 182: point = 69
   Insn 181: point = 69
   Insn 180: point = 70
   Insn 179: point = 70
   Insn 178: point = 71
   Insn 177: point = 72
   Insn 176: point = 73
   Insn 175: point = 74
   Insn 174: point = 75
   Insn 173: point = 76
   Insn 172: point = 77
   Insn 171: point = 78
   Insn 170: point = 80
   Insn 169: point = 82
   Insn 168: point = 84
   Insn 167: point = 86
   Insn 166: point = 88
   Insn 165: point = 89
   Insn 164: point = 91
   Insn 163: point = 93
   Insn 162: point = 94
   Insn 161: point = 96
   Insn 160: point = 98
   Insn 159: point = 100
   Insn 158: point = 101
   Insn 157: point = 101
   Insn 156: point = 102
   Insn 155: point = 104
   Insn 154: point = 105
   Insn 153: point = 107
   Insn 152: point = 109
   Insn 151: point = 111
   Insn 150: point = 113
   Insn 149: point = 115
   Insn 148: point = 117
   Insn 147: point = 118
   Insn 146: point = 120
   Insn 145: point = 122
   Insn 144: point = 123
   Insn 143: point = 125
   Insn 142: point = 127
   Insn 141: point = 129
   Insn 140: point = 130
   Insn 139: point = 130
   Insn 138: point = 131
   Insn 137: point = 133
   Insn 136: point = 134
   Insn 135: point = 136
   Insn 134: point = 138
   Insn 133: point = 140
   Insn 132: point = 142
   Insn 131: point = 144
   Insn 130: point = 146
   Insn 129: point = 147
   Insn 128: point = 149
   Insn 127: point = 151
   Insn 126: point = 152
   Insn 125: point = 154
   Insn 124: point = 156
   Insn 123: point = 158
   Insn 122: point = 159
   Insn 121: point = 159
   Insn 120: point = 160
   Insn 119: point = 162
   Insn 118: point = 163
   Insn 117: point = 164
   Insn 116: point = 165
   Insn 115: point = 166
   Insn 114: point = 167
   Insn 113: point = 167
   Insn 112: point = 168
   Insn 111: point = 169
   Insn 110: point = 170
   Insn 109: point = 172
   Insn 108: point = 174
   Insn 107: point = 176
   Insn 106: point = 178
   Insn 105: point = 179
   Insn 104: point = 181
   Insn 103: point = 183
   Insn 102: point = 184
   Insn 101: point = 186
   Insn 100: point = 188
   Insn 99: point = 190
   Insn 98: point = 191
   Insn 97: point = 191
   Insn 96: point = 192
   Insn 95: point = 194
  BB 6
   Insn 60: point = 195
   Insn 59: point = 195
   Insn 58: point = 196
   Insn 57: point = 198
   Insn 56: point = 200
   Insn 55: point = 201
   Insn 54: point = 203
   Insn 53: point = 205
   Insn 52: point = 207
   Insn 51: point = 208
   Insn 50: point = 208
   Insn 49: point = 209
   Insn 48: point = 211
   Insn 47: point = 212
   Insn 46: point = 214
   Insn 45: point = 216
   Insn 44: point = 217
   Insn 43: point = 219
   Insn 42: point = 221
   Insn 41: point = 223
   Insn 40: point = 224
   Insn 39: point = 224
   Insn 38: point = 225
   Insn 37: point = 227
 r59: [223..225]
 r60: [215..217]
 r61: [213..214]
 r62: [195..212]
 r63: [207..209]
 r64: [199..201]
 r65: [197..198]
 r66: [195..196]
 r67: [64..66]
 r68: [56..58]
 r69: [54..55]
 r70: [35..53]
 r71: [48..50]
 r72: [40..42]
 r73: [38..39]
 r74: [34..37]
 r75: [28..30]
 r76: [20..22]
 r77: [18..19]
 r78: [16..17]
 r79: [190..192]
 r80: [182..184]
 r81: [180..181]
 r82: [173..179]
 r83: [175..176]
 r84: [173..174]
 r85: [171..172]
 r86: [168..170]
 r87: [73..166]
 r88: [72..165]
 r89: [71..164]
 r90: [70..163]
 r91: [158..160]
 r92: [150..152]
 r93: [148..149]
 r94: [141..147]
 r95: [143..144]
 r96: [141..142]
 r97: [139..140]
 r98: [137..138]
 r99: [135..136]
 r100: [76..134]
 r101: [129..131]
 r102: [121..123]
 r103: [119..120]
 r104: [112..118]
 r105: [114..115]
 r106: [112..113]
 r107: [110..111]
 r108: [108..109]
 r109: [106..107]
 r110: [75..105]
 r111: [100..102]
 r112: [92..94]
 r113: [90..91]
 r114: [83..89]
 r115: [85..86]
 r116: [83..84]
 r117: [81..82]
 r118: [79..80]
 r119: [74..78]
 r120: [10..11]
 r121: [8..9]
 r122: [5..7]
 r123: [4..6]
 r124: [226..227]
 r125: [222..224] [218..219]
 r126: [220..221]
 r127: [215..216]
 r128: [210..211]
 r129: [206..208] [202..203]
 r130: [204..205]
 r131: [199..200]
 r132: [67..68]
 r133: [63..65] [59..60]
 r134: [61..62]
 r135: [56..57]
 r136: [51..52]
 r137: [47..49] [43..44]
 r138: [45..46]
 r139: [40..41]
 r140: [33..36]
 r141: [193..194]
 r142: [189..191] [185..186]
 r143: [187..188]
 r144: [182..183]
 r145: [177..178]
 r146: [167..169]
 r147: [161..162]
 r148: [157..159] [153..154]
 r149: [155..156]
 r150: [150..151]
 r151: [145..146]
 r152: [132..133]
 r153: [128..130] [124..125]
 r154: [126..127]
 r155: [121..122]
 r156: [116..117]
 r157: [103..104]
 r158: [99..101] [95..96]
 r159: [97..98]
 r160: [92..93]
 r161: [87..88]
 r162: [69..77]
 r163: [31..32]
 r164: [27..29] [23..24]
 r165: [25..26]
 r166: [20..21]
 r167: [14..15]
 r168: [12..13]
 r169: [2..3]
 r170: [0..1]
Compressing live ranges: from 228 to 174 - 76%
Ranges after the compression:
 r59: [170..171]
 r60: [164..165]
 r61: [162..163]
 r62: [148..161]
 r63: [158..159]
 r64: [152..153]
 r65: [150..151]
 r66: [148..149]
 r67: [50..51]
 r68: [44..45]
 r69: [42..43]
 r70: [28..41]
 r71: [38..39]
 r72: [32..33]
 r73: [30..31]
 r74: [28..29]
 r75: [24..25]
 r76: [18..19]
 r77: [16..17]
 r78: [14..15]
 r79: [144..145]
 r80: [138..139]
 r81: [136..137]
 r82: [130..135]
 r83: [132..133]
 r84: [130..131]
 r85: [128..129]
 r86: [126..127]
 r87: [54..125]
 r88: [54..125]
 r89: [54..125]
 r90: [54..125]
 r91: [122..123]
 r92: [116..117]
 r93: [114..115]
 r94: [108..113]
 r95: [110..111]
 r96: [108..109]
 r97: [106..107]
 r98: [104..105]
 r99: [102..103]
 r100: [54..101]
 r101: [98..99]
 r102: [92..93]
 r103: [90..91]
 r104: [84..89]
 r105: [86..87]
 r106: [84..85]
 r107: [82..83]
 r108: [80..81]
 r109: [78..79]
 r110: [54..77]
 r111: [74..75]
 r112: [68..69]
 r113: [66..67]
 r114: [60..65]
 r115: [62..63]
 r116: [60..61]
 r117: [58..59]
 r118: [56..57]
 r119: [54..55]
 r120: [8..9]
 r121: [6..7]
 r122: [4..5]
 r123: [4..5]
 r124: [172..173]
 r125: [170..171] [166..167]
 r126: [168..169]
 r127: [164..165]
 r128: [160..161]
 r129: [158..159] [154..155]
 r130: [156..157]
 r131: [152..153]
 r132: [52..53]
 r133: [50..51] [46..47]
 r134: [48..49]
 r135: [44..45]
 r136: [40..41]
 r137: [38..39] [34..35]
 r138: [36..37]
 r139: [32..33]
 r140: [28..29]
 r141: [146..147]
 r142: [144..145] [140..141]
 r143: [142..143]
 r144: [138..139]
 r145: [134..135]
 r146: [126..127]
 r147: [124..125]
 r148: [122..123] [118..119]
 r149: [120..121]
 r150: [116..117]
 r151: [112..113]
 r152: [100..101]
 r153: [98..99] [94..95]
 r154: [96..97]
 r155: [92..93]
 r156: [88..89]
 r157: [76..77]
 r158: [74..75] [70..71]
 r159: [72..73]
 r160: [68..69]
 r161: [64..65]
 r162: [54..55]
 r163: [26..27]
 r164: [24..25] [20..21]
 r165: [22..23]
 r166: [18..19]
 r167: [12..13]
 r168: [10..11]
 r169: [2..3]
 r170: [0..1]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 38
changing reg in insn 41
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 59
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 52
changing reg in insn 55
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 66
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 85
changing reg in insn 74
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 86
changing reg in insn 188
changing reg in insn 191
changing reg in insn 189
changing reg in insn 191
changing reg in insn 194
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 96
changing reg in insn 99
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 109
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 115
changing reg in insn 176
changing reg in insn 116
changing reg in insn 177
changing reg in insn 117
changing reg in insn 178
changing reg in insn 118
changing reg in insn 179
changing reg in insn 120
changing reg in insn 123
changing reg in insn 121
changing reg in insn 123
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 133
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 173
changing reg in insn 138
changing reg in insn 141
changing reg in insn 139
changing reg in insn 141
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 174
changing reg in insn 156
changing reg in insn 159
changing reg in insn 157
changing reg in insn 159
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 169
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 175
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 26
changing reg in insn 37
changing reg in insn 38
changing reg in insn 43
changing reg in insn 41
changing reg in insn 40
changing reg in insn 39
changing reg in insn 44
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 54
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 55
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 84
changing reg in insn 88
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 113
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 123
changing reg in insn 122
changing reg in insn 121
changing reg in insn 126
changing reg in insn 124
changing reg in insn 123
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 130
changing reg in insn 131
changing reg in insn 137
changing reg in insn 138
changing reg in insn 143
changing reg in insn 141
changing reg in insn 140
changing reg in insn 139
changing reg in insn 144
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 148
changing reg in insn 149
changing reg in insn 155
changing reg in insn 156
changing reg in insn 161
changing reg in insn 159
changing reg in insn 158
changing reg in insn 157
changing reg in insn 162
changing reg in insn 160
changing reg in insn 159
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 166
changing reg in insn 167
changing reg in insn 172
changing reg in insn 181
changing reg in insn 187
changing reg in insn 188
changing reg in insn 193
changing reg in insn 191
changing reg in insn 190
changing reg in insn 189
changing reg in insn 194
changing reg in insn 192
changing reg in insn 191
changing reg in insn 190
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 202
changing reg in insn 203
changing reg in insn 212
changing reg in insn 213
changing reg in insn 220
changing reg in insn 221
changing reg in insn 224
changing reg in insn 225
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 114.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 205.
verify found no changes in insn with uid = 226.


save_m3

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={109d,101u} r1={46d,47u,18e} r2={15d,7u} r3={1d,1u} r4={15d,7u} r5={18d,10u} r6={1d,69u} r7={1d,31u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={63d,5u} r18={8d} r19={8d} r20={1d,1u,9e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={11d,2u} r38={11d,2u} r39={9d,1u} r40={9d,1u} r41={1d,1u} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} 
;;    total ref usage 904{591d,286u,27e} in 199{191 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 120 121
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mABM.c:48 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mABM.c:48 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 Flight+0 S8 A64])
        (reg:DI 1 dx [ Flight ])) mABM.c:48 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ Flight ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 output_ABM+0 S8 A64])
        (reg:DI 2 cx [ output_ABM ])) mABM.c:48 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ output_ABM ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 output_ABM+0 S8 A64])) mABM.c:50 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f05a5492c78 *.LC0>)) mABM.c:50 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [120])) mABM.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [120])
        (nil)))
(call_insn 12 11 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f05a599ab00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mABM.c:50 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 13 12 14 2 (set (reg:DI 0 ax [121])
        (reg:DI 0 ax)) mABM.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 14 13 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])
        (reg:DI 0 ax [121])) mABM.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [121])
        (nil)))
(insn 15 14 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])
            (const_int 0 [0]))) mABM.c:51 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) mABM.c:51 612 {*jcc_1}
     (nil)
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f05a5492d10 *.LC1>)) mABM.c:51 87 {*movdi_internal_rex64}
     (nil))
(call_insn 19 18 20 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:51 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 122 123
(code_label 20 19 21 4 5 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 1 dx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 Nflight+0 S4 A32])) mABM.c:53 89 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])) mABM.c:53 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (set (reg:SI 1 dx)
        (reg:SI 1 dx [122])) mABM.c:53 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [122])
        (nil)))
(insn 25 24 26 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f05a54d3688 *.LC2>)) mABM.c:53 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) mABM.c:53 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 27 26 28 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:53 91 {*movqi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f05a58ae900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) mABM.c:53 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn 29 28 233 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 h+0 S4 A32])
        (const_int 0 [0])) mABM.c:55 89 {*movsi_internal}
     (nil))
(jump_insn 233 29 234 4 (set (pc)
        (label_ref 217)) mABM.c:55 650 {jump}
     (nil)
 -> 217)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 234 233 219)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 219 234 32 5 12 "" [1 uses])
(note 32 219 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 235 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:56 89 {*movsi_internal}
     (nil))
(jump_insn 235 33 236 5 (set (pc)
        (label_ref 209)) mABM.c:56 650 {jump}
     (nil)
 -> 209)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 236 235 211)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 124 125 126 127 128 129 130 131
(code_label 211 236 36 6 11 "" [1 uses])
(note 36 211 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 h+0 S4 A32])) mABM.c:56 89 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:DI 1 dx [orig:59 D.7041 ] [59])
        (sign_extend:DI (reg:SI 0 ax [124]))) mABM.c:56 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [124])
        (nil)))
(insn 39 38 40 6 (set (reg:DI 0 ax [125])
        (reg:DI 1 dx [orig:59 D.7041 ] [59])) mABM.c:56 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg:DI 0 ax [125])
                (ashift:DI (reg:DI 0 ax [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 513 {*ashldi3_1}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 0 ax [125])
                (plus:DI (reg:DI 0 ax [125])
                    (reg:DI 1 dx [orig:59 D.7041 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.7041 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.7041 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 42 41 43 6 (parallel [
            (set (reg:DI 0 ax [126])
                (ashift:DI (reg:DI 0 ax [125])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [125])
        (nil)))
(insn 43 42 44 6 (set (reg:DI 0 ax [125])
        (reg:DI 0 ax [126])) mABM.c:56 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [126])
        (nil)))
(insn 44 43 45 6 (set (reg:DI 1 dx [orig:60 D.7041 ] [60])
        (reg:DI 0 ax [125])) mABM.c:56 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [125])
        (nil)))
(insn 45 44 46 6 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 Flight+0 S8 A64])) mABM.c:56 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.7042 ] [61])
                (plus:DI (reg/f:DI 0 ax [127])
                    (reg:DI 1 dx [orig:60 D.7041 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [127])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7041 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 Flight+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.7041 ] [60]))
                (nil)))))
(insn 47 46 48 6 (set (reg:SI 2 cx [orig:62 D.7043 ] [62])
        (mem/j:SI (reg/f:DI 0 ax [orig:61 D.7042 ] [61]) [0 _12->ID+0 S4 A128])) mABM.c:56 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7042 ] [61])
        (nil)))
(insn 48 47 49 6 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:56 89 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:DI 1 dx [orig:63 D.7041 ] [63])
        (sign_extend:DI (reg:SI 0 ax [128]))) mABM.c:56 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [128])
        (nil)))
(insn 50 49 51 6 (set (reg:DI 0 ax [129])
        (reg:DI 1 dx [orig:63 D.7041 ] [63])) mABM.c:56 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 6 (parallel [
            (set (reg:DI 0 ax [129])
                (ashift:DI (reg:DI 0 ax [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 513 {*ashldi3_1}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg:DI 0 ax [129])
                (plus:DI (reg:DI 0 ax [129])
                    (reg:DI 1 dx [orig:63 D.7041 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.7041 ] [63])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:63 D.7041 ] [63])
                (const_int 5 [0x5]))
            (nil))))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 0 ax [130])
                (ashift:DI (reg:DI 0 ax [129])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [129])
        (nil)))
(insn 54 53 55 6 (set (reg:DI 0 ax [129])
        (reg:DI 0 ax [130])) mABM.c:56 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(insn 55 54 56 6 (set (reg:DI 1 dx [orig:64 D.7041 ] [64])
        (reg:DI 0 ax [129])) mABM.c:56 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [129])
        (nil)))
(insn 56 55 57 6 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:56 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.7042 ] [65])
                (plus:DI (reg/f:DI 0 ax [131])
                    (reg:DI 1 dx [orig:64 D.7041 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [131])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7041 ] [64])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:64 D.7041 ] [64]))
                (nil)))))
(insn 58 57 59 6 (set (reg:SI 0 ax [orig:66 D.7043 ] [66])
        (mem/j:SI (reg/f:DI 0 ax [orig:65 D.7042 ] [65]) [0 _17->ID+0 S4 A128])) mABM.c:56 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7042 ] [65])
        (nil)))
(insn 59 58 60 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:62 D.7043 ] [62])
            (reg:SI 0 ax [orig:66 D.7043 ] [66]))) mABM.c:56 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.7043 ] [66])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:62 D.7043 ] [62])
            (nil))))
(jump_insn 60 59 61 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) mABM.c:56 612 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       7 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 71 72 73 74 132 133 134 135 136 137 138 139 140
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:57 89 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 1 dx [orig:67 D.7041 ] [67])
        (sign_extend:DI (reg:SI 0 ax [132]))) mABM.c:57 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [132])
        (nil)))
(insn 64 63 65 7 (set (reg:DI 0 ax [133])
        (reg:DI 1 dx [orig:67 D.7041 ] [67])) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 0 ax [133])
                (ashift:DI (reg:DI 0 ax [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 513 {*ashldi3_1}
     (nil))
(insn 66 65 67 7 (parallel [
            (set (reg:DI 0 ax [133])
                (plus:DI (reg:DI 0 ax [133])
                    (reg:DI 1 dx [orig:67 D.7041 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7041 ] [67])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:67 D.7041 ] [67])
                (const_int 5 [0x5]))
            (nil))))
(insn 67 66 68 7 (parallel [
            (set (reg:DI 0 ax [134])
                (ashift:DI (reg:DI 0 ax [133])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [133])
        (nil)))
(insn 68 67 69 7 (set (reg:DI 0 ax [133])
        (reg:DI 0 ax [134])) mABM.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [134])
        (nil)))
(insn 69 68 70 7 (set (reg:DI 1 dx [orig:68 D.7041 ] [68])
        (reg:DI 0 ax [133])) mABM.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [133])
        (nil)))
(insn 70 69 71 7 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 7 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.7042 ] [69])
                (plus:DI (reg/f:DI 0 ax [135])
                    (reg:DI 1 dx [orig:68 D.7041 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [135])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.7041 ] [68])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:68 D.7041 ] [68]))
                (nil)))))
(insn 72 71 73 7 (set (reg:SI 2 cx [orig:70 D.7043 ] [70])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:69 D.7042 ] [69])
                (const_int 4 [0x4])) [0 _21->n_nvp+0 S4 A32])) mABM.c:57 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7042 ] [69])
        (nil)))
(insn 73 72 74 7 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:57 89 {*movsi_internal}
     (nil))
(insn 74 73 75 7 (set (reg:DI 1 dx [orig:71 D.7041 ] [71])
        (sign_extend:DI (reg:SI 0 ax [136]))) mABM.c:57 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [136])
        (nil)))
(insn 75 74 76 7 (set (reg:DI 0 ax [137])
        (reg:DI 1 dx [orig:71 D.7041 ] [71])) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 7 (parallel [
            (set (reg:DI 0 ax [137])
                (ashift:DI (reg:DI 0 ax [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 513 {*ashldi3_1}
     (nil))
(insn 77 76 78 7 (parallel [
            (set (reg:DI 0 ax [137])
                (plus:DI (reg:DI 0 ax [137])
                    (reg:DI 1 dx [orig:71 D.7041 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.7041 ] [71])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:71 D.7041 ] [71])
                (const_int 5 [0x5]))
            (nil))))
(insn 78 77 79 7 (parallel [
            (set (reg:DI 0 ax [138])
                (ashift:DI (reg:DI 0 ax [137])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [137])
        (nil)))
(insn 79 78 80 7 (set (reg:DI 0 ax [137])
        (reg:DI 0 ax [138])) mABM.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [138])
        (nil)))
(insn 80 79 81 7 (set (reg:DI 1 dx [orig:72 D.7041 ] [72])
        (reg:DI 0 ax [137])) mABM.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [137])
        (nil)))
(insn 81 80 82 7 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 7 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.7042 ] [73])
                (plus:DI (reg/f:DI 0 ax [139])
                    (reg:DI 1 dx [orig:72 D.7041 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:57 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [139])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.7041 ] [72])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:72 D.7041 ] [72]))
                (nil)))))
(insn 83 82 84 7 (set (reg:SI 1 dx [orig:74 D.7043 ] [74])
        (mem/j:SI (reg/f:DI 0 ax [orig:73 D.7042 ] [73]) [0 _25->ID+0 S4 A128])) mABM.c:57 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7042 ] [73])
        (nil)))
(insn 84 83 85 7 (set (reg:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 7 (set (reg:SI 2 cx)
        (reg:SI 2 cx [orig:70 D.7043 ] [70])) mABM.c:57 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:70 D.7043 ] [70])
        (nil)))
(insn 86 85 87 7 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:74 D.7043 ] [74])) mABM.c:57 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:74 D.7043 ] [74])
        (nil)))
(insn 87 86 88 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f05a54d3720 *.LC3>)) mABM.c:57 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [140])) mABM.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [140])
        (nil)))
(insn 89 88 90 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:57 91 {*movqi_internal}
     (nil))
(call_insn 90 89 91 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f05a58ae900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) mABM.c:57 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                        (nil)))))))
(insn 91 90 237 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:58 89 {*movsi_internal}
     (nil))
(jump_insn 237 91 238 7 (set (pc)
        (label_ref 185)) mABM.c:58 650 {jump}
     (nil)
 -> 185)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 238 237 198)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
(code_label 198 238 94 8 10 "" [1 uses])
(note 94 198 95 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 8 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:59 89 {*movsi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:DI 1 dx [orig:79 D.7041 ] [79])
        (sign_extend:DI (reg:SI 0 ax [141]))) mABM.c:59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [141])
        (nil)))
(insn 97 96 98 8 (set (reg:DI 0 ax [142])
        (reg:DI 1 dx [orig:79 D.7041 ] [79])) mABM.c:59 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg:DI 0 ax [142])
                (ashift:DI (reg:DI 0 ax [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 513 {*ashldi3_1}
     (nil))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 0 ax [142])
                (plus:DI (reg:DI 0 ax [142])
                    (reg:DI 1 dx [orig:79 D.7041 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.7041 ] [79])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:79 D.7041 ] [79])
                (const_int 5 [0x5]))
            (nil))))
(insn 100 99 101 8 (parallel [
            (set (reg:DI 0 ax [143])
                (ashift:DI (reg:DI 0 ax [142])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [142])
        (nil)))
(insn 101 100 102 8 (set (reg:DI 0 ax [142])
        (reg:DI 0 ax [143])) mABM.c:59 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [143])
        (nil)))
(insn 102 101 103 8 (set (reg:DI 1 dx [orig:80 D.7041 ] [80])
        (reg:DI 0 ax [142])) mABM.c:59 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [142])
        (nil)))
(insn 103 102 104 8 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:59 87 {*movdi_internal_rex64}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.7042 ] [81])
                (plus:DI (reg/f:DI 0 ax [144])
                    (reg:DI 1 dx [orig:80 D.7041 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [144])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7041 ] [80])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:80 D.7041 ] [80]))
                (nil)))))
(insn 105 104 106 8 (set (reg/f:DI 0 ax [orig:82 D.7044 ] [82])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:81 D.7042 ] [81])
                (const_int 16 [0x10])) [0 _34->time+0 S8 A128])) mABM.c:59 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7042 ] [81])
        (nil)))
(insn 106 105 107 8 (set (reg:SI 1 dx [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])) mABM.c:59 89 {*movsi_internal}
     (nil))
(insn 107 106 108 8 (set (reg:DI 1 dx [orig:83 D.7041 ] [83])
        (sign_extend:DI (reg:SI 1 dx [145]))) mABM.c:59 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [145])
        (nil)))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 1 dx [orig:84 D.7041 ] [84])
                (ashift:DI (reg:DI 1 dx [orig:83 D.7041 ] [83])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7041 ] [83])
        (nil)))
(insn 109 108 110 8 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7044 ] [85])
                (plus:DI (reg/f:DI 0 ax [orig:82 D.7044 ] [82])
                    (reg:DI 1 dx [orig:84 D.7041 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7041 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7044 ] [82])
            (nil))))
(insn 110 109 111 8 (set (reg:XF 0 ax [orig:86 D.7045 ] [86])
        (mem:XF (reg/f:DI 0 ax [orig:85 D.7044 ] [85]) [0 *_38+0 S16 A128])) mABM.c:59 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7044 ] [85])
        (nil)))
(insn 111 110 112 8 (parallel [
            (set (reg:DI 2 cx [146])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:59 274 {*adddi_1}
     (nil))
(insn 112 111 113 8 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:86 D.7045 ] [86])) mABM.c:59 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:86 D.7045 ] [86])
        (nil)))
(insn 113 112 114 8 (set (reg:DI 5 di)
        (reg:DI 2 cx [146])) mABM.c:59 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [146])
        (nil)))
(call_insn 114 113 115 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time_to_int") [flags 0x41]  <function_decl 0x7f05a595ee00 time_to_int>) [0 time_to_int S1 A8])
            (const_int 16 [0x10]))) mABM.c:59 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
            (nil))))
(insn 115 114 116 8 (set (reg:SI 38 r9 [orig:87 D.7043 ] [87])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 T+12 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (set (reg:SI 37 r8 [orig:88 D.7043 ] [88])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 T+8 S4 A64])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 117 116 118 8 (set (reg:SI 41 r12 [orig:89 D.7043 ] [89])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 T+4 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 118 117 119 8 (set (reg:SI 40 r11 [orig:90 D.7043 ] [90])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 T+0 S4 A128])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:DI 1 dx [orig:91 D.7041 ] [91])
        (sign_extend:DI (reg:SI 0 ax [147]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [147])
        (nil)))
(insn 121 120 122 8 (set (reg:DI 0 ax [148])
        (reg:DI 1 dx [orig:91 D.7041 ] [91])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 122 121 123 8 (parallel [
            (set (reg:DI 0 ax [148])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (nil))
(insn 123 122 124 8 (parallel [
            (set (reg:DI 0 ax [148])
                (plus:DI (reg:DI 0 ax [148])
                    (reg:DI 1 dx [orig:91 D.7041 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:91 D.7041 ] [91])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:91 D.7041 ] [91])
                (const_int 5 [0x5]))
            (nil))))
(insn 124 123 125 8 (parallel [
            (set (reg:DI 0 ax [149])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 125 124 126 8 (set (reg:DI 0 ax [148])
        (reg:DI 0 ax [149])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [149])
        (nil)))
(insn 126 125 127 8 (set (reg:DI 1 dx [orig:92 D.7041 ] [92])
        (reg:DI 0 ax [148])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 127 126 128 8 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.7042 ] [93])
                (plus:DI (reg/f:DI 0 ax [150])
                    (reg:DI 1 dx [orig:92 D.7041 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [150])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.7041 ] [92])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:92 D.7041 ] [92]))
                (nil)))))
(insn 129 128 130 8 (set (reg/f:DI 0 ax [orig:94 D.7046 ] [94])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:93 D.7042 ] [93])
                (const_int 8 [0x8])) [0 _46->nvp+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.7042 ] [93])
        (nil)))
(insn 130 129 131 8 (set (reg:SI 1 dx [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (set (reg:DI 1 dx [orig:95 D.7041 ] [95])
        (sign_extend:DI (reg:SI 1 dx [151]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [151])
        (nil)))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 1 dx [orig:96 D.7041 ] [96])
                (ashift:DI (reg:DI 1 dx [orig:95 D.7041 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7041 ] [95])
        (nil)))
(insn 133 132 134 8 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.7046 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:94 D.7046 ] [94])
                    (reg:DI 1 dx [orig:96 D.7041 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.7041 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.7046 ] [94])
            (nil))))
(insn 134 133 135 8 (set (reg/f:DI 0 ax [orig:98 D.7044 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 D.7046 ] [97]) [0 *_50+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7046 ] [97])
        (nil)))
(insn 135 134 136 8 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.7044 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 D.7044 ] [98])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.7044 ] [98])
        (nil)))
(insn 136 135 137 8 (set (reg:XF 4 si [orig:100 D.7045 ] [100])
        (mem:XF (reg/f:DI 0 ax [orig:99 D.7044 ] [99]) [0 *_52+0 S16 A128])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.7044 ] [99])
        (nil)))
(insn 137 136 138 8 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:DI 1 dx [orig:101 D.7041 ] [101])
        (sign_extend:DI (reg:SI 0 ax [152]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [152])
        (nil)))
(insn 139 138 140 8 (set (reg:DI 0 ax [153])
        (reg:DI 1 dx [orig:101 D.7041 ] [101])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 140 139 141 8 (parallel [
            (set (reg:DI 0 ax [153])
                (ashift:DI (reg:DI 0 ax [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 0 ax [153])
                (plus:DI (reg:DI 0 ax [153])
                    (reg:DI 1 dx [orig:101 D.7041 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:101 D.7041 ] [101])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:101 D.7041 ] [101])
                (const_int 5 [0x5]))
            (nil))))
(insn 142 141 143 8 (parallel [
            (set (reg:DI 0 ax [154])
                (ashift:DI (reg:DI 0 ax [153])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [153])
        (nil)))
(insn 143 142 144 8 (set (reg:DI 0 ax [153])
        (reg:DI 0 ax [154])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [154])
        (nil)))
(insn 144 143 145 8 (set (reg:DI 1 dx [orig:102 D.7041 ] [102])
        (reg:DI 0 ax [153])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [153])
        (nil)))
(insn 145 144 146 8 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 146 145 147 8 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.7042 ] [103])
                (plus:DI (reg/f:DI 0 ax [155])
                    (reg:DI 1 dx [orig:102 D.7041 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [155])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:102 D.7041 ] [102])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:102 D.7041 ] [102]))
                (nil)))))
(insn 147 146 148 8 (set (reg/f:DI 0 ax [orig:104 D.7046 ] [104])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:103 D.7042 ] [103])
                (const_int 8 [0x8])) [0 _56->nvp+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.7042 ] [103])
        (nil)))
(insn 148 147 149 8 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 149 148 150 8 (set (reg:DI 1 dx [orig:105 D.7041 ] [105])
        (sign_extend:DI (reg:SI 1 dx [156]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [156])
        (nil)))
(insn 150 149 151 8 (parallel [
            (set (reg:DI 1 dx [orig:106 D.7041 ] [106])
                (ashift:DI (reg:DI 1 dx [orig:105 D.7041 ] [105])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:105 D.7041 ] [105])
        (nil)))
(insn 151 150 152 8 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.7046 ] [107])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.7046 ] [104])
                    (reg:DI 1 dx [orig:106 D.7041 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:106 D.7041 ] [106])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.7046 ] [104])
            (nil))))
(insn 152 151 153 8 (set (reg/f:DI 0 ax [orig:108 D.7044 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [orig:107 D.7046 ] [107]) [0 *_60+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:107 D.7046 ] [107])
        (nil)))
(insn 153 152 154 8 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.7044 ] [109])
                (plus:DI (reg/f:DI 0 ax [orig:108 D.7044 ] [108])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:108 D.7044 ] [108])
        (nil)))
(insn 154 153 155 8 (set (reg:XF 2 cx [orig:110 D.7045 ] [110])
        (mem:XF (reg/f:DI 0 ax [orig:109 D.7044 ] [109]) [0 *_62+0 S16 A128])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.7044 ] [109])
        (nil)))
(insn 155 154 156 8 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:DI 1 dx [orig:111 D.7041 ] [111])
        (sign_extend:DI (reg:SI 0 ax [157]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [157])
        (nil)))
(insn 157 156 158 8 (set (reg:DI 0 ax [158])
        (reg:DI 1 dx [orig:111 D.7041 ] [111])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 158 157 159 8 (parallel [
            (set (reg:DI 0 ax [158])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:DI 0 ax [158])
                (plus:DI (reg:DI 0 ax [158])
                    (reg:DI 1 dx [orig:111 D.7041 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:111 D.7041 ] [111])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.7041 ] [111])
                (const_int 5 [0x5]))
            (nil))))
(insn 160 159 161 8 (parallel [
            (set (reg:DI 0 ax [159])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [158])
        (nil)))
(insn 161 160 162 8 (set (reg:DI 0 ax [158])
        (reg:DI 0 ax [159])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [159])
        (nil)))
(insn 162 161 163 8 (set (reg:DI 1 dx [orig:112 D.7041 ] [112])
        (reg:DI 0 ax [158])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [158])
        (nil)))
(insn 163 162 164 8 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 164 163 165 8 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.7042 ] [113])
                (plus:DI (reg/f:DI 0 ax [160])
                    (reg:DI 1 dx [orig:112 D.7041 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [160])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:112 D.7041 ] [112])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:112 D.7041 ] [112]))
                (nil)))))
(insn 165 164 166 8 (set (reg/f:DI 0 ax [orig:114 D.7046 ] [114])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:113 D.7042 ] [113])
                (const_int 8 [0x8])) [0 _66->nvp+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:113 D.7042 ] [113])
        (nil)))
(insn 166 165 167 8 (set (reg:SI 1 dx [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])) mABM.c:60 89 {*movsi_internal}
     (nil))
(insn 167 166 168 8 (set (reg:DI 1 dx [orig:115 D.7041 ] [115])
        (sign_extend:DI (reg:SI 1 dx [161]))) mABM.c:60 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [161])
        (nil)))
(insn 168 167 169 8 (parallel [
            (set (reg:DI 1 dx [orig:116 D.7041 ] [116])
                (ashift:DI (reg:DI 1 dx [orig:115 D.7041 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 D.7041 ] [115])
        (nil)))
(insn 169 168 170 8 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.7046 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:114 D.7046 ] [114])
                    (reg:DI 1 dx [orig:116 D.7041 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:60 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:116 D.7041 ] [116])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:114 D.7046 ] [114])
            (nil))))
(insn 170 169 171 8 (set (reg/f:DI 0 ax [orig:118 D.7044 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 D.7046 ] [117]) [0 *_70+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:117 D.7046 ] [117])
        (nil)))
(insn 171 170 172 8 (set (reg:XF 0 ax [orig:119 D.7045 ] [119])
        (mem:XF (reg/f:DI 0 ax [orig:118 D.7044 ] [118]) [0 *_71+0 S16 A128])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:118 D.7044 ] [118])
        (nil)))
(insn 172 171 173 8 (set (reg:DI 39 r10 [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 173 172 174 8 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [orig:100 D.7045 ] [100])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [orig:100 D.7045 ] [100])
        (nil)))
(insn 174 173 175 8 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:110 D.7045 ] [110])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:110 D.7045 ] [110])
        (nil)))
(insn 175 174 176 8 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:119 D.7045 ] [119])) mABM.c:60 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:119 D.7045 ] [119])
        (nil)))
(insn 176 175 177 8 (set (reg:SI 38 r9)
        (reg:SI 38 r9 [orig:87 D.7043 ] [87])) mABM.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:87 D.7043 ] [87])
        (nil)))
(insn 177 176 178 8 (set (reg:SI 37 r8)
        (reg:SI 37 r8 [orig:88 D.7043 ] [88])) mABM.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:88 D.7043 ] [88])
        (nil)))
(insn 178 177 179 8 (set (reg:SI 2 cx)
        (reg:SI 41 r12 [orig:89 D.7043 ] [89])) mABM.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:89 D.7043 ] [89])
        (nil)))
(insn 179 178 180 8 (set (reg:SI 1 dx)
        (reg:SI 40 r11 [orig:90 D.7043 ] [90])) mABM.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [orig:90 D.7043 ] [90])
        (nil)))
(insn 180 179 181 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f05a54d37b8 *.LC4>)) mABM.c:60 87 {*movdi_internal_rex64}
     (nil))
(insn 181 180 182 8 (set (reg:DI 5 di)
        (reg:DI 39 r10 [162])) mABM.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [162])
        (nil)))
(insn 182 181 183 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:60 91 {*movqi_internal}
     (nil))
(call_insn 183 182 184 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f05a58ae900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 48 [0x30]))) mABM.c:60 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                        (expr_list:REG_BR_PRED (use (reg:SI 37 r8))
                            (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 16 [0x10])) [0  S16 A128]))
                                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 32 [0x20])) [0  S16 A128]))
                                            (nil))))))))))))
(insn 184 183 185 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:58 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 75 76 77 78 163 164 165 166
(code_label 185 184 186 9 9 "" [1 uses])
(note 186 185 187 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 188 9 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:58 89 {*movsi_internal}
     (nil))
(insn 188 187 189 9 (set (reg:DI 1 dx [orig:75 D.7041 ] [75])
        (sign_extend:DI (reg:SI 0 ax [163]))) mABM.c:58 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [163])
        (nil)))
(insn 189 188 190 9 (set (reg:DI 0 ax [164])
        (reg:DI 1 dx [orig:75 D.7041 ] [75])) mABM.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 190 189 191 9 (parallel [
            (set (reg:DI 0 ax [164])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:58 513 {*ashldi3_1}
     (nil))
(insn 191 190 192 9 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg:DI 0 ax [164])
                    (reg:DI 1 dx [orig:75 D.7041 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:58 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.7041 ] [75])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:75 D.7041 ] [75])
                (const_int 5 [0x5]))
            (nil))))
(insn 192 191 193 9 (parallel [
            (set (reg:DI 0 ax [165])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:58 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 193 192 194 9 (set (reg:DI 0 ax [164])
        (reg:DI 0 ax [165])) mABM.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [165])
        (nil)))
(insn 194 193 195 9 (set (reg:DI 1 dx [orig:76 D.7041 ] [76])
        (reg:DI 0 ax [164])) mABM.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 195 194 196 9 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 flight+0 S8 A64])) mABM.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 196 195 197 9 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.7042 ] [77])
                (plus:DI (reg/f:DI 0 ax [166])
                    (reg:DI 1 dx [orig:76 D.7041 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:58 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [166])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.7041 ] [76])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:76 D.7041 ] [76]))
                (nil)))))
(insn 197 196 199 9 (set (reg:SI 0 ax [orig:78 D.7043 ] [78])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:77 D.7042 ] [77])
                (const_int 4 [0x4])) [0 _30->n_nvp+0 S4 A32])) mABM.c:58 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7042 ] [77])
        (nil)))
(insn 199 197 200 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:78 D.7043 ] [78])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 j+0 S4 A32]))) mABM.c:58 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 D.7043 ] [78])
        (nil)))
(jump_insn 200 199 201 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) mABM.c:58 612 {*jcc_1}
     (nil)
 -> 198)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 167
(note 201 200 202 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 10 (set (reg:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])) mABM.c:62 87 {*movdi_internal_rex64}
     (nil))
(insn 203 202 204 10 (set (reg:DI 4 si)
        (reg:DI 0 ax [167])) mABM.c:62 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [167])
        (nil)))
(insn 204 203 205 10 (set (reg:SI 5 di)
        (const_int 10 [0xa])) mABM.c:62 89 {*movsi_internal}
     (nil))
(call_insn 205 204 206 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fputc") [flags 0x41]  <function_decl 0x7f05a58b2000 __builtin_fputc>) [0 __builtin_fputc S1 A8])
            (const_int 0 [0]))) mABM.c:62 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 206 205 207 11 8 "" [1 uses])
(note 207 206 208 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:56 273 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168
(code_label 209 208 210 12 7 "" [1 uses])
(note 210 209 212 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 212 210 213 12 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 i+0 S4 A32])) mABM.c:56 89 {*movsi_internal}
     (nil))
(insn 213 212 214 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [168])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 Nflight+0 S4 A32]))) mABM.c:56 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [168])
        (nil)))
(jump_insn 214 213 215 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 211)
            (pc))) mABM.c:56 612 {*jcc_1}
     (nil)
 -> 211)
;;  succ:       6
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 215 214 216 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:55 273 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169
(code_label 217 216 218 14 6 "" [1 uses])
(note 218 217 220 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 220 218 221 14 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 h+0 S4 A32])) mABM.c:55 89 {*movsi_internal}
     (nil))
(insn 221 220 222 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [169])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 Nflight+0 S4 A32]))) mABM.c:55 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [169])
        (nil)))
(jump_insn 222 221 223 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) mABM.c:55 612 {*jcc_1}
     (nil)
 -> 219)
;;  succ:       5
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 170
(note 223 222 224 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 15 (set (reg:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 wstream+0 S8 A64])) mABM.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [170])) mABM.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [170])
        (nil)))
(call_insn 226 225 232 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f05a599a800 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mABM.c:66 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 232 226 0 15 (const_int 0 [0]) mABM.c:68 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function del_flight (del_flight, funcdef_no=4, decl_uid=1924, cgraph_uid=4)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 110:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 132: point = 0
   Insn 129: point = 0
   Insn 125: point = 1
   Insn 122: point = 3
   Insn 121: point = 4
   Insn 120: point = 4
   Insn 119: point = 5
   Insn 118: point = 7
  BB 9
   Insn 116: point = 8
   Insn 115: point = 8
   Insn 114: point = 9
  BB 2
   Insn 135: point = 10
   Insn 8: point = 10
   Insn 4: point = 10
   Insn 3: point = 10
   Insn 2: point = 10
  BB 8
   Insn 110: point = 10
   Insn 109: point = 10
   Insn 108: point = 10
   Insn 107: point = 11
   Insn 106: point = 13
   Insn 105: point = 15
   Insn 104: point = 17
   Insn 103: point = 19
   Insn 102: point = 21
   Insn 101: point = 22
   Insn 100: point = 22
   Insn 99: point = 23
   Insn 98: point = 25
   Insn 97: point = 26
   Insn 96: point = 28
   Insn 95: point = 29
   Insn 94: point = 29
   Insn 93: point = 30
   Insn 92: point = 32
   Insn 91: point = 34
   Insn 90: point = 36
   Insn 89: point = 38
   Insn 88: point = 40
   Insn 87: point = 41
   Insn 86: point = 41
   Insn 85: point = 42
   Insn 84: point = 44
   Insn 83: point = 45
   Insn 82: point = 47
   Insn 81: point = 48
   Insn 80: point = 48
   Insn 79: point = 49
   Insn 78: point = 50
   Insn 77: point = 52
   Insn 76: point = 54
   Insn 75: point = 56
   Insn 74: point = 58
   Insn 73: point = 60
   Insn 72: point = 61
   Insn 71: point = 61
   Insn 70: point = 62
   Insn 69: point = 64
   Insn 68: point = 65
   Insn 67: point = 67
   Insn 66: point = 68
   Insn 65: point = 70
   Insn 64: point = 72
   Insn 63: point = 74
   Insn 62: point = 76
   Insn 61: point = 78
   Insn 60: point = 79
   Insn 59: point = 79
   Insn 58: point = 80
   Insn 57: point = 82
   Insn 56: point = 83
   Insn 55: point = 85
  BB 5
   Insn 139: point = 86
  BB 7
   Insn 52: point = 86
   Insn 51: point = 86
   Insn 50: point = 87
  BB 3
   Insn 137: point = 88
   Insn 12: point = 88
  BB 6
   Insn 46: point = 88
  BB 4
   Insn 40: point = 88
   Insn 39: point = 88
   Insn 38: point = 89
   Insn 37: point = 91
   Insn 36: point = 93
   Insn 35: point = 95
   Insn 34: point = 97
   Insn 33: point = 99
   Insn 32: point = 100
   Insn 31: point = 100
   Insn 30: point = 101
   Insn 29: point = 103
   Insn 28: point = 104
   Insn 27: point = 106
   Insn 26: point = 107
   Insn 25: point = 109
   Insn 24: point = 111
   Insn 23: point = 112
   Insn 22: point = 114
   Insn 21: point = 116
   Insn 20: point = 118
   Insn 19: point = 119
   Insn 18: point = 119
   Insn 17: point = 120
   Insn 16: point = 122
 r59: [118..120]
 r60: [110..112]
 r61: [108..109]
 r62: [88..107]
 r63: [92..104]
 r64: [99..101]
 r65: [92..93]
 r66: [90..91]
 r67: [88..89]
 r68: [71..83]
 r69: [78..80]
 r70: [71..72]
 r71: [69..70]
 r72: [49..68]
 r73: [53..65]
 r74: [60..62]
 r75: [53..54]
 r76: [51..52]
 r77: [48..50]
 r78: [33..45]
 r79: [40..42]
 r80: [33..34]
 r81: [31..32]
 r82: [29..30]
 r83: [14..26]
 r84: [21..23]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [121..122]
 r92: [117..119] [113..114]
 r93: [115..116]
 r94: [110..111]
 r95: [105..106]
 r96: [102..103]
 r97: [98..100] [94..95]
 r98: [96..97]
 r99: [86..87]
 r100: [84..85]
 r101: [81..82]
 r102: [77..79] [73..74]
 r103: [75..76]
 r104: [66..67]
 r105: [63..64]
 r106: [59..61] [55..56]
 r107: [57..58]
 r108: [46..47]
 r109: [43..44]
 r110: [39..41] [35..36]
 r111: [37..38]
 r112: [27..28]
 r113: [24..25]
 r114: [20..22] [16..17]
 r115: [18..19]
 r116: [8..9]
 r117: [6..7]
Compressing live ranges: from 123 to 102 - 82%
Ranges after the compression:
 r59: [98..99]
 r60: [92..93]
 r61: [90..91]
 r62: [74..89]
 r63: [78..87]
 r64: [84..85]
 r65: [78..79]
 r66: [76..77]
 r67: [74..75]
 r68: [60..69]
 r69: [66..67]
 r70: [60..61]
 r71: [58..59]
 r72: [42..57]
 r73: [46..55]
 r74: [52..53]
 r75: [46..47]
 r76: [44..45]
 r77: [42..43]
 r78: [30..39]
 r79: [36..37]
 r80: [30..31]
 r81: [28..29]
 r82: [26..27]
 r83: [14..23]
 r84: [20..21]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [100..101]
 r92: [98..99] [94..95]
 r93: [96..97]
 r94: [92..93]
 r95: [88..89]
 r96: [86..87]
 r97: [84..85] [80..81]
 r98: [82..83]
 r99: [72..73]
 r100: [70..71]
 r101: [68..69]
 r102: [66..67] [62..63]
 r103: [64..65]
 r104: [56..57]
 r105: [54..55]
 r106: [52..53] [48..49]
 r107: [50..51]
 r108: [40..41]
 r109: [38..39]
 r110: [36..37] [32..33]
 r111: [34..35]
 r112: [24..25]
 r113: [22..23]
 r114: [20..21] [16..17]
 r115: [18..19]
 r116: [8..9]
 r117: [6..7]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 20
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 39
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 56
changing reg in insn 58
changing reg in insn 61
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 79
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 86
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 100
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 125
changing reg in insn 125
changing reg in insn 129
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 23
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 36
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 64
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 76
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 91
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 104
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 105
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 121.


del_flight

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={69d,65u} r1={12d,14u,7e} r2={10d,5u} r4={8d,4u} r5={9d,5u} r6={1d,36u} r7={1d,14u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={33d,3u} r18={4d} r19={4d} r20={1d,1u,1e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 461{306d,147u,8e} in 104{100 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mABM.c:71 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])
        (reg:DI 1 dx [ F ])) mABM.c:71 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ F ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 135 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:73 89 {*movsi_internal}
     (nil))
(jump_insn 135 8 136 2 (set (pc)
        (label_ref 111)) mABM.c:73 650 {jump}
     (nil)
 -> 111)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 136 135 113)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 113 136 11 3 20 "" [1 uses])
(note 11 113 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 137 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:74 89 {*movsi_internal}
     (nil))
(jump_insn 137 12 138 3 (set (pc)
        (label_ref 47)) mABM.c:74 650 {jump}
     (nil)
 -> 47)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 138 137 49)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 67 91 92 93 94 95 96 97 98
(code_label 49 138 15 4 19 "" [1 uses])
(note 15 49 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mABM.c:74 89 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 1 dx [orig:59 D.7050 ] [59])
        (sign_extend:DI (reg:SI 0 ax [91]))) mABM.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [91])
        (nil)))
(insn 18 17 19 4 (set (reg:DI 0 ax [92])
        (reg:DI 1 dx [orig:59 D.7050 ] [59])) mABM.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 0 ax [92])
                (ashift:DI (reg:DI 0 ax [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 513 {*ashldi3_1}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 0 ax [92])
                (plus:DI (reg:DI 0 ax [92])
                    (reg:DI 1 dx [orig:59 D.7050 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.7050 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.7050 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 0 ax [93])
                (ashift:DI (reg:DI 0 ax [92])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 22 21 23 4 (set (reg:DI 0 ax [92])
        (reg:DI 0 ax [93])) mABM.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (nil)))
(insn 23 22 24 4 (set (reg:DI 1 dx [orig:60 D.7050 ] [60])
        (reg:DI 0 ax [92])) mABM.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.7051 ] [61])
                (plus:DI (reg/f:DI 0 ax [94])
                    (reg:DI 1 dx [orig:60 D.7050 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7050 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.7050 ] [60]))
                (nil)))))
(insn 26 25 27 4 (set (reg:SI 2 cx [orig:62 D.7052 ] [62])
        (mem/j:SI (reg/f:DI 0 ax [orig:61 D.7051 ] [61]) [0 _9->ID+0 S4 A128])) mABM.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7051 ] [61])
        (nil)))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 4 si [orig:63 D.7051 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [95]) [0 *f_11(D)+0 S8 A64])) mABM.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (nil)))
(insn 29 28 30 4 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:74 89 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 1 dx [orig:64 D.7050 ] [64])
        (sign_extend:DI (reg:SI 0 ax [96]))) mABM.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [96])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 0 ax [97])
        (reg:DI 1 dx [orig:64 D.7050 ] [64])) mABM.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 513 {*ashldi3_1}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg:DI 0 ax [97])
                    (reg:DI 1 dx [orig:64 D.7050 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7050 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.7050 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 0 ax [98])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 35 34 36 4 (set (reg:DI 0 ax [97])
        (reg:DI 0 ax [98])) mABM.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 36 35 37 4 (set (reg:DI 0 ax [orig:65 D.7050 ] [65])
        (reg:DI 0 ax [97])) mABM.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.7051 ] [66])
                (plus:DI (reg:DI 0 ax [orig:65 D.7050 ] [65])
                    (reg/f:DI 4 si [orig:63 D.7051 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.7050 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:63 D.7051 ] [63])
            (nil))))
(insn 38 37 39 4 (set (reg:SI 0 ax [orig:67 D.7052 ] [67])
        (mem/j:SI (reg/f:DI 0 ax [orig:66 D.7051 ] [66]) [0 _15->ID+0 S4 A128])) mABM.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7051 ] [66])
        (nil)))
(insn 39 38 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:62 D.7052 ] [62])
            (reg:SI 0 ax [orig:67 D.7052 ] [67]))) mABM.c:74 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7052 ] [67])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:62 D.7052 ] [62])
            (nil))))
(jump_insn 40 39 41 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) mABM.c:74 612 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 41 40 139 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 139 41 140 5 (set (pc)
        (label_ref 53)) mABM.c:74 650 {jump}
     (nil)
 -> 53)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 140 139 44)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 44 140 45 6 17 "" [1 uses])
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:74 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99
(code_label 47 46 48 7 16 "" [1 uses])
(note 48 47 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 48 51 7 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mABM.c:74 89 {*movsi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [99])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mABM.c:74 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) mABM.c:74 612 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115
(code_label 53 52 54 8 18 "" [1 uses])
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 8 (set (reg/f:DI 2 cx [orig:68 D.7051 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [100]) [0 *f_11(D)+0 S8 A64])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 57 56 58 8 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:76 89 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:DI 1 dx [orig:69 D.7050 ] [69])
        (sign_extend:DI (reg:SI 0 ax [101]))) mABM.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [101])
        (nil)))
(insn 59 58 60 8 (set (reg:DI 0 ax [102])
        (reg:DI 1 dx [orig:69 D.7050 ] [69])) mABM.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 0 ax [102])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 513 {*ashldi3_1}
     (nil))
(insn 61 60 62 8 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg:DI 0 ax [102])
                    (reg:DI 1 dx [orig:69 D.7050 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.7050 ] [69])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:69 D.7050 ] [69])
                (const_int 5 [0x5]))
            (nil))))
(insn 62 61 63 8 (parallel [
            (set (reg:DI 0 ax [103])
                (ashift:DI (reg:DI 0 ax [102])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 63 62 64 8 (set (reg:DI 0 ax [102])
        (reg:DI 0 ax [103])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 64 63 65 8 (set (reg:DI 0 ax [orig:70 D.7050 ] [70])
        (reg:DI 0 ax [102])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 65 64 66 8 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7051 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.7050 ] [70])
                    (reg/f:DI 2 cx [orig:68 D.7051 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.7050 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:68 D.7051 ] [68])
            (nil))))
(insn 66 65 67 8 (set (reg:SI 2 cx [orig:72 D.7052 ] [72])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:71 D.7051 ] [71])
                (const_int 4 [0x4])) [0 _21->n_nvp+0 S4 A32])) mABM.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7051 ] [71])
        (nil)))
(insn 67 66 68 8 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 8 (set (reg/f:DI 4 si [orig:73 D.7051 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [104]) [0 *f_11(D)+0 S8 A64])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 69 68 70 8 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:76 89 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (set (reg:DI 1 dx [orig:74 D.7050 ] [74])
        (sign_extend:DI (reg:SI 0 ax [105]))) mABM.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [105])
        (nil)))
(insn 71 70 72 8 (set (reg:DI 0 ax [106])
        (reg:DI 1 dx [orig:74 D.7050 ] [74])) mABM.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 8 (parallel [
            (set (reg:DI 0 ax [106])
                (ashift:DI (reg:DI 0 ax [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 513 {*ashldi3_1}
     (nil))
(insn 73 72 74 8 (parallel [
            (set (reg:DI 0 ax [106])
                (plus:DI (reg:DI 0 ax [106])
                    (reg:DI 1 dx [orig:74 D.7050 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7050 ] [74])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:74 D.7050 ] [74])
                (const_int 5 [0x5]))
            (nil))))
(insn 74 73 75 8 (parallel [
            (set (reg:DI 0 ax [107])
                (ashift:DI (reg:DI 0 ax [106])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 75 74 76 8 (set (reg:DI 0 ax [106])
        (reg:DI 0 ax [107])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(insn 76 75 77 8 (set (reg:DI 0 ax [orig:75 D.7050 ] [75])
        (reg:DI 0 ax [106])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 77 76 78 8 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7051 ] [76])
                (plus:DI (reg:DI 0 ax [orig:75 D.7050 ] [75])
                    (reg/f:DI 4 si [orig:73 D.7051 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.7050 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:73 D.7051 ] [73])
            (nil))))
(insn 78 77 79 8 (set (reg/f:DI 0 ax [orig:77 D.7053 ] [77])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:76 D.7051 ] [76])
                (const_int 8 [0x8])) [0 _26->nvp+0 S8 A64])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7051 ] [76])
        (nil)))
(insn 79 78 80 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:72 D.7052 ] [72])) mABM.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:72 D.7052 ] [72])
        (nil)))
(insn 80 79 81 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:77 D.7053 ] [77])) mABM.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7053 ] [77])
        (nil)))
(call_insn 81 80 82 8 (call (mem:QI (symbol_ref:DI ("ffree_2D") [flags 0x41]  <function_decl 0x7f05a595e300 ffree_2D>) [0 ffree_2D S1 A8])
        (const_int 0 [0])) mABM.c:76 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 82 81 83 8 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:77 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 8 (set (reg/f:DI 2 cx [orig:78 D.7051 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [108]) [0 *f_11(D)+0 S8 A64])) mABM.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 84 83 85 8 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:77 89 {*movsi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:DI 1 dx [orig:79 D.7050 ] [79])
        (sign_extend:DI (reg:SI 0 ax [109]))) mABM.c:77 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [109])
        (nil)))
(insn 86 85 87 8 (set (reg:DI 0 ax [110])
        (reg:DI 1 dx [orig:79 D.7050 ] [79])) mABM.c:77 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 8 (parallel [
            (set (reg:DI 0 ax [110])
                (ashift:DI (reg:DI 0 ax [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:77 513 {*ashldi3_1}
     (nil))
(insn 88 87 89 8 (parallel [
            (set (reg:DI 0 ax [110])
                (plus:DI (reg:DI 0 ax [110])
                    (reg:DI 1 dx [orig:79 D.7050 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:77 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.7050 ] [79])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:79 D.7050 ] [79])
                (const_int 5 [0x5]))
            (nil))))
(insn 89 88 90 8 (parallel [
            (set (reg:DI 0 ax [111])
                (ashift:DI (reg:DI 0 ax [110])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:77 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 90 89 91 8 (set (reg:DI 0 ax [110])
        (reg:DI 0 ax [111])) mABM.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 91 90 92 8 (set (reg:DI 0 ax [orig:80 D.7050 ] [80])
        (reg:DI 0 ax [110])) mABM.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 92 91 93 8 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.7051 ] [81])
                (plus:DI (reg:DI 0 ax [orig:80 D.7050 ] [80])
                    (reg/f:DI 2 cx [orig:78 D.7051 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:77 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7050 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:78 D.7051 ] [78])
            (nil))))
(insn 93 92 94 8 (set (reg/f:DI 0 ax [orig:82 D.7054 ] [82])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:81 D.7051 ] [81])
                (const_int 24 [0x18])) [0 _31->vel+0 S8 A64])) mABM.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7051 ] [81])
        (nil)))
(insn 94 93 95 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 D.7054 ] [82])) mABM.c:77 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7054 ] [82])
        (nil)))
(call_insn 95 94 96 8 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:77 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 96 95 97 8 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 8 (set (reg/f:DI 2 cx [orig:83 D.7051 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [112]) [0 *f_11(D)+0 S8 A64])) mABM.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [112])
        (nil)))
(insn 98 97 99 8 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:78 89 {*movsi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:DI 1 dx [orig:84 D.7050 ] [84])
        (sign_extend:DI (reg:SI 0 ax [113]))) mABM.c:78 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [113])
        (nil)))
(insn 100 99 101 8 (set (reg:DI 0 ax [114])
        (reg:DI 1 dx [orig:84 D.7050 ] [84])) mABM.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 8 (parallel [
            (set (reg:DI 0 ax [114])
                (ashift:DI (reg:DI 0 ax [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:78 513 {*ashldi3_1}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 0 ax [114])
                (plus:DI (reg:DI 0 ax [114])
                    (reg:DI 1 dx [orig:84 D.7050 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7050 ] [84])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.7050 ] [84])
                (const_int 5 [0x5]))
            (nil))))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 0 ax [115])
                (ashift:DI (reg:DI 0 ax [114])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:78 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(insn 104 103 105 8 (set (reg:DI 0 ax [114])
        (reg:DI 0 ax [115])) mABM.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [115])
        (nil)))
(insn 105 104 106 8 (set (reg:DI 0 ax [orig:85 D.7050 ] [85])
        (reg:DI 0 ax [114])) mABM.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(insn 106 105 107 8 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.7051 ] [86])
                (plus:DI (reg:DI 0 ax [orig:85 D.7050 ] [85])
                    (reg/f:DI 2 cx [orig:83 D.7051 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.7050 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:83 D.7051 ] [83])
            (nil))))
(insn 107 106 108 8 (set (reg/f:DI 0 ax [orig:87 D.7054 ] [87])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:86 D.7051 ] [86])
                (const_int 16 [0x10])) [0 _36->time+0 S8 A128])) mABM.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7051 ] [86])
        (nil)))
(insn 108 107 109 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.7054 ] [87])) mABM.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7054 ] [87])
        (nil)))
(call_insn 109 108 110 8 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:78 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 110 109 111 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:73 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116
(code_label 111 110 112 9 15 "" [1 uses])
(note 112 111 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 112 115 9 (set (reg:SI 0 ax [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:73 89 {*movsi_internal}
     (nil))
(insn 115 114 116 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [116])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mABM.c:73 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [116])
        (nil)))
(jump_insn 116 115 117 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) mABM.c:73 612 {*jcc_1}
     (nil)
 -> 113)
;;  succ:       3
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88 89 90 117
(note 117 116 118 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 10 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:80 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 10 (set (reg/f:DI 0 ax [orig:88 D.7051 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [117]) [0 *f_11(D)+0 S8 A64])) mABM.c:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 120 119 121 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 D.7051 ] [88])) mABM.c:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7051 ] [88])
        (nil)))
(call_insn 121 120 122 10 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:80 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 122 121 125 10 (set (reg:SI 0 ax [orig:89 D.7052 ] [89])
        (const_int 1 [0x1])) mABM.c:82 89 {*movsi_internal}
     (nil))
(insn 125 122 129 10 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:89 D.7052 ] [89])) mABM.c:82 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:89 D.7052 ] [89])
        (nil)))
(insn 129 125 132 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) mABM.c:83 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 <retval> ] [90])
        (nil)))
(insn 132 129 0 10 (use (reg/i:SI 0 ax)) mABM.c:83 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function copy_flight (copy_flight, funcdef_no=5, decl_uid=1920, cgraph_uid=5)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 148
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 206:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 213:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 253
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 295:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 296:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 318:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 336
	 Choosing alt 0 in insn 336:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 357
	 Choosing alt 0 in insn 357:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 358:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 371:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 372
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 379:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 380:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 386:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 393
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 395:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 397:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 400:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 401:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 420
	 Choosing alt 0 in insn 420:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 443
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 445:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 465:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 466
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 468:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 469:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 489
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 491:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 492:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 510: point = 0
   Insn 507: point = 0
   Insn 503: point = 1
   Insn 500: point = 3
  BB 18
   Insn 498: point = 4
   Insn 497: point = 4
   Insn 496: point = 5
  BB 4
   Insn 513: point = 6
   Insn 31: point = 6
  BB 3
   Insn 28: point = 6
   Insn 27: point = 6
  BB 2
   Insn 25: point = 6
   Insn 24: point = 6
   Insn 23: point = 7
   Insn 22: point = 9
   Insn 21: point = 10
   Insn 20: point = 11
   Insn 19: point = 12
   Insn 18: point = 14
   Insn 17: point = 15
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 14: point = 18
   Insn 13: point = 20
   Insn 12: point = 22
   Insn 11: point = 23
   Insn 10: point = 23
   Insn 9: point = 24
   Insn 8: point = 26
   Insn 4: point = 27
   Insn 3: point = 27
   Insn 2: point = 27
  BB 17
   Insn 492: point = 27
   Insn 491: point = 27
   Insn 490: point = 28
   Insn 489: point = 30
   Insn 488: point = 32
   Insn 487: point = 33
   Insn 486: point = 35
   Insn 485: point = 37
   Insn 484: point = 39
   Insn 483: point = 40
   Insn 482: point = 40
   Insn 481: point = 41
   Insn 480: point = 43
   Insn 479: point = 44
   Insn 478: point = 46
   Insn 477: point = 48
   Insn 476: point = 50
   Insn 475: point = 52
   Insn 474: point = 53
   Insn 473: point = 53
   Insn 472: point = 54
   Insn 471: point = 56
   Insn 470: point = 57
   Insn 469: point = 59
   Insn 468: point = 60
   Insn 467: point = 61
   Insn 466: point = 63
   Insn 465: point = 65
   Insn 464: point = 66
   Insn 463: point = 68
   Insn 462: point = 70
   Insn 461: point = 72
   Insn 460: point = 73
   Insn 459: point = 73
   Insn 458: point = 74
   Insn 457: point = 76
   Insn 456: point = 77
   Insn 455: point = 79
   Insn 454: point = 81
   Insn 453: point = 83
   Insn 452: point = 85
   Insn 451: point = 86
   Insn 450: point = 86
   Insn 449: point = 87
   Insn 448: point = 89
   Insn 447: point = 90
   Insn 446: point = 92
   Insn 445: point = 93
   Insn 444: point = 94
   Insn 443: point = 96
   Insn 442: point = 98
   Insn 441: point = 99
   Insn 440: point = 101
   Insn 439: point = 103
   Insn 438: point = 105
   Insn 437: point = 106
   Insn 436: point = 106
   Insn 435: point = 107
   Insn 434: point = 109
   Insn 433: point = 110
   Insn 432: point = 112
   Insn 431: point = 114
   Insn 430: point = 116
   Insn 429: point = 118
   Insn 428: point = 119
   Insn 427: point = 119
   Insn 426: point = 120
   Insn 425: point = 122
   Insn 424: point = 123
   Insn 423: point = 125
   Insn 422: point = 126
   Insn 421: point = 127
   Insn 420: point = 129
   Insn 419: point = 131
   Insn 418: point = 132
   Insn 417: point = 134
   Insn 416: point = 136
   Insn 415: point = 138
   Insn 414: point = 139
   Insn 413: point = 139
   Insn 412: point = 140
   Insn 411: point = 142
   Insn 410: point = 143
   Insn 409: point = 145
   Insn 408: point = 147
   Insn 407: point = 149
   Insn 406: point = 151
   Insn 405: point = 152
   Insn 404: point = 152
   Insn 403: point = 153
   Insn 402: point = 155
   Insn 401: point = 156
   Insn 400: point = 158
  BB 16
   Insn 398: point = 159
   Insn 397: point = 159
   Insn 395: point = 160
   Insn 394: point = 162
   Insn 393: point = 164
   Insn 392: point = 166
   Insn 391: point = 168
   Insn 390: point = 170
   Insn 389: point = 172
   Insn 388: point = 173
   Insn 387: point = 173
   Insn 386: point = 174
   Insn 385: point = 176
   Insn 384: point = 177
   Insn 383: point = 179
  BB 14
   Insn 521: point = 180
   Insn 343: point = 180
   Insn 342: point = 180
   Insn 341: point = 181
   Insn 340: point = 182
   Insn 339: point = 182
   Insn 338: point = 183
   Insn 337: point = 185
   Insn 336: point = 187
   Insn 335: point = 189
   Insn 334: point = 191
   Insn 333: point = 193
   Insn 332: point = 195
   Insn 331: point = 196
   Insn 330: point = 196
   Insn 329: point = 197
   Insn 328: point = 199
   Insn 327: point = 200
   Insn 326: point = 202
   Insn 325: point = 203
   Insn 324: point = 205
   Insn 323: point = 207
   Insn 322: point = 209
   Insn 321: point = 211
   Insn 320: point = 212
   Insn 319: point = 212
   Insn 318: point = 213
   Insn 317: point = 215
   Insn 316: point = 216
   Insn 315: point = 218
  BB 13
   Insn 313: point = 219
   Insn 312: point = 219
   Insn 310: point = 220
   Insn 309: point = 222
   Insn 308: point = 224
   Insn 307: point = 226
   Insn 306: point = 228
   Insn 305: point = 230
   Insn 304: point = 231
   Insn 303: point = 231
   Insn 302: point = 232
   Insn 301: point = 234
   Insn 300: point = 235
   Insn 299: point = 237
  BB 11
   Insn 519: point = 238
   Insn 259: point = 238
   Insn 258: point = 238
   Insn 257: point = 239
   Insn 256: point = 240
   Insn 255: point = 240
   Insn 254: point = 241
   Insn 253: point = 243
   Insn 252: point = 245
   Insn 251: point = 247
   Insn 250: point = 249
   Insn 249: point = 251
   Insn 248: point = 252
   Insn 247: point = 252
   Insn 246: point = 253
   Insn 245: point = 255
   Insn 244: point = 256
   Insn 243: point = 258
   Insn 242: point = 259
   Insn 241: point = 261
   Insn 240: point = 263
   Insn 239: point = 265
   Insn 238: point = 267
   Insn 237: point = 268
   Insn 236: point = 268
   Insn 235: point = 269
   Insn 234: point = 271
   Insn 233: point = 272
   Insn 232: point = 274
  BB 10
   Insn 230: point = 275
   Insn 229: point = 275
   Insn 227: point = 276
   Insn 226: point = 278
   Insn 225: point = 280
   Insn 224: point = 282
   Insn 223: point = 284
   Insn 222: point = 286
   Insn 221: point = 287
   Insn 220: point = 287
   Insn 219: point = 288
   Insn 218: point = 290
   Insn 217: point = 291
   Insn 216: point = 293
  BB 5
   Insn 515: point = 294
   Insn 155: point = 294
   Insn 154: point = 294
   Insn 153: point = 295
   Insn 152: point = 296
   Insn 151: point = 296
   Insn 150: point = 297
   Insn 149: point = 297
   Insn 148: point = 299
   Insn 147: point = 301
   Insn 146: point = 303
   Insn 145: point = 305
   Insn 144: point = 307
   Insn 143: point = 308
   Insn 142: point = 308
   Insn 141: point = 309
   Insn 140: point = 311
   Insn 139: point = 312
   Insn 138: point = 314
   Insn 137: point = 315
   Insn 136: point = 317
   Insn 135: point = 319
   Insn 134: point = 321
   Insn 133: point = 323
   Insn 132: point = 324
   Insn 131: point = 324
   Insn 130: point = 325
   Insn 129: point = 327
   Insn 128: point = 328
   Insn 127: point = 330
   Insn 126: point = 331
   Insn 125: point = 332
   Insn 124: point = 334
   Insn 123: point = 336
   Insn 122: point = 337
   Insn 121: point = 339
   Insn 120: point = 341
   Insn 119: point = 343
   Insn 118: point = 344
   Insn 117: point = 344
   Insn 116: point = 345
   Insn 115: point = 347
   Insn 114: point = 348
   Insn 113: point = 350
   Insn 112: point = 352
   Insn 111: point = 354
   Insn 110: point = 356
   Insn 109: point = 357
   Insn 108: point = 357
   Insn 107: point = 358
   Insn 106: point = 360
   Insn 105: point = 361
   Insn 104: point = 363
   Insn 103: point = 364
   Insn 102: point = 365
   Insn 101: point = 367
   Insn 100: point = 369
   Insn 99: point = 370
   Insn 98: point = 372
   Insn 97: point = 374
   Insn 96: point = 376
   Insn 95: point = 377
   Insn 94: point = 377
   Insn 93: point = 378
   Insn 92: point = 380
   Insn 91: point = 381
   Insn 90: point = 383
   Insn 89: point = 385
   Insn 88: point = 387
   Insn 87: point = 389
   Insn 86: point = 390
   Insn 85: point = 390
   Insn 84: point = 391
   Insn 83: point = 393
   Insn 82: point = 394
   Insn 81: point = 396
   Insn 80: point = 397
   Insn 79: point = 398
   Insn 78: point = 400
   Insn 77: point = 402
   Insn 76: point = 403
   Insn 75: point = 405
   Insn 74: point = 407
   Insn 73: point = 409
   Insn 72: point = 410
   Insn 71: point = 410
   Insn 70: point = 411
   Insn 69: point = 413
   Insn 68: point = 414
   Insn 67: point = 416
   Insn 66: point = 418
   Insn 65: point = 420
   Insn 64: point = 422
   Insn 63: point = 423
   Insn 62: point = 423
   Insn 61: point = 424
   Insn 60: point = 426
   Insn 59: point = 427
   Insn 58: point = 429
   Insn 57: point = 430
   Insn 56: point = 431
   Insn 55: point = 433
   Insn 54: point = 435
   Insn 53: point = 436
   Insn 52: point = 438
   Insn 51: point = 440
   Insn 50: point = 442
   Insn 49: point = 443
   Insn 48: point = 443
   Insn 47: point = 444
   Insn 46: point = 446
   Insn 45: point = 447
   Insn 44: point = 449
   Insn 43: point = 451
   Insn 42: point = 453
   Insn 41: point = 455
   Insn 40: point = 456
   Insn 39: point = 456
   Insn 38: point = 457
   Insn 37: point = 459
   Insn 36: point = 460
   Insn 35: point = 462
  BB 9
   Insn 213: point = 463
  BB 8
   Insn 211: point = 463
   Insn 210: point = 463
  BB 6
   Insn 517: point = 463
   Insn 159: point = 463
  BB 7
   Insn 206: point = 463
   Insn 205: point = 463
   Insn 204: point = 464
   Insn 203: point = 466
   Insn 202: point = 468
   Insn 201: point = 470
   Insn 200: point = 472
   Insn 199: point = 473
   Insn 198: point = 475
   Insn 197: point = 477
   Insn 196: point = 479
   Insn 195: point = 481
   Insn 194: point = 482
   Insn 193: point = 484
   Insn 192: point = 486
   Insn 191: point = 487
   Insn 190: point = 489
   Insn 189: point = 491
   Insn 188: point = 493
   Insn 187: point = 494
   Insn 186: point = 494
   Insn 185: point = 495
   Insn 184: point = 497
   Insn 183: point = 498
   Insn 182: point = 500
   Insn 181: point = 502
   Insn 180: point = 504
   Insn 179: point = 505
   Insn 178: point = 507
   Insn 177: point = 509
   Insn 176: point = 511
   Insn 175: point = 513
   Insn 174: point = 514
   Insn 173: point = 516
   Insn 172: point = 518
   Insn 171: point = 520
   Insn 170: point = 522
   Insn 169: point = 524
   Insn 168: point = 525
   Insn 167: point = 525
   Insn 166: point = 526
   Insn 165: point = 528
   Insn 164: point = 529
   Insn 163: point = 531
  BB 12
   Insn 296: point = 532
   Insn 295: point = 532
   Insn 294: point = 533
   Insn 293: point = 535
   Insn 292: point = 537
   Insn 291: point = 539
   Insn 290: point = 541
   Insn 289: point = 542
   Insn 288: point = 544
   Insn 287: point = 546
   Insn 286: point = 547
   Insn 285: point = 549
   Insn 284: point = 551
   Insn 283: point = 553
   Insn 282: point = 554
   Insn 281: point = 554
   Insn 280: point = 555
   Insn 279: point = 557
   Insn 278: point = 558
   Insn 277: point = 560
   Insn 276: point = 562
   Insn 275: point = 564
   Insn 274: point = 565
   Insn 273: point = 567
   Insn 272: point = 569
   Insn 271: point = 571
   Insn 270: point = 573
   Insn 269: point = 575
   Insn 268: point = 576
   Insn 267: point = 576
   Insn 266: point = 577
   Insn 265: point = 579
   Insn 264: point = 580
   Insn 263: point = 582
  BB 15
   Insn 380: point = 583
   Insn 379: point = 583
   Insn 378: point = 584
   Insn 377: point = 586
   Insn 376: point = 588
   Insn 375: point = 590
   Insn 374: point = 592
   Insn 373: point = 593
   Insn 372: point = 595
   Insn 371: point = 597
   Insn 370: point = 598
   Insn 369: point = 600
   Insn 368: point = 602
   Insn 367: point = 604
   Insn 366: point = 605
   Insn 365: point = 605
   Insn 364: point = 606
   Insn 363: point = 608
   Insn 362: point = 609
   Insn 361: point = 611
   Insn 360: point = 613
   Insn 359: point = 615
   Insn 358: point = 616
   Insn 357: point = 618
   Insn 356: point = 620
   Insn 355: point = 622
   Insn 354: point = 624
   Insn 353: point = 626
   Insn 352: point = 627
   Insn 351: point = 627
   Insn 350: point = 628
   Insn 349: point = 630
   Insn 348: point = 631
   Insn 347: point = 633
 r59: [22..24]
 r60: [15..16]
 r61: [10..12]
 r62: [6..7]
 r63: [448..460]
 r64: [455..457]
 r65: [448..449]
 r66: [430..447]
 r67: [442..444]
 r68: [434..436]
 r69: [432..433]
 r70: [430..431]
 r71: [415..427]
 r72: [422..424]
 r73: [415..416]
 r74: [397..414]
 r75: [409..411]
 r76: [401..403]
 r77: [399..400]
 r78: [397..398]
 r79: [382..394]
 r80: [389..391]
 r81: [382..383]
 r82: [364..381]
 r83: [376..378]
 r84: [368..370]
 r85: [366..367]
 r86: [364..365]
 r87: [349..361]
 r88: [356..358]
 r89: [349..350]
 r90: [331..348]
 r91: [343..345]
 r92: [335..337]
 r93: [333..334]
 r94: [331..332]
 r95: [316..328]
 r96: [323..325]
 r97: [316..317]
 r98: [294..315]
 r99: [300..312]
 r100: [307..309]
 r101: [300..301]
 r102: [298..299]
 r103: [296..297]
 r104: [294..295]
 r105: [279..291]
 r106: [286..288]
 r107: [279..280]
 r108: [277..278]
 r109: [275..276]
 r110: [517..529]
 r111: [524..526]
 r112: [517..518]
 r113: [515..516]
 r114: [508..514]
 r115: [510..511]
 r116: [508..509]
 r117: [506..507]
 r118: [499..505]
 r119: [501..502]
 r120: [499..500]
 r121: [463..498]
 r122: [493..495]
 r123: [485..487]
 r124: [483..484]
 r125: [476..482]
 r126: [478..479]
 r127: [476..477]
 r128: [474..475]
 r129: [467..473]
 r130: [469..470]
 r131: [467..468]
 r132: [465..466]
 r133: [463..464]
 r134: [260..272]
 r135: [267..269]
 r136: [260..261]
 r137: [238..259]
 r138: [244..256]
 r139: [251..253]
 r140: [244..245]
 r141: [242..243]
 r142: [240..241]
 r143: [238..239]
 r144: [223..235]
 r145: [230..232]
 r146: [223..224]
 r147: [221..222]
 r148: [219..220]
 r149: [568..580]
 r150: [575..577]
 r151: [568..569]
 r152: [566..567]
 r153: [559..565]
 r154: [561..562]
 r155: [559..560]
 r156: [532..558]
 r157: [553..555]
 r158: [545..547]
 r159: [543..544]
 r160: [536..542]
 r161: [538..539]
 r162: [536..537]
 r163: [534..535]
 r164: [532..533]
 r165: [204..216]
 r166: [211..213]
 r167: [204..205]
 r168: [180..203]
 r169: [188..200]
 r170: [195..197]
 r171: [188..189]
 r172: [186..187]
 r173: [184..185]
 r174: [182..183]
 r175: [180..181]
 r176: [165..177]
 r177: [172..174]
 r178: [165..166]
 r179: [163..164]
 r180: [161..162]
 r181: [159..160]
 r182: [619..631]
 r183: [626..628]
 r184: [619..620]
 r185: [617..618]
 r186: [610..616]
 r187: [612..613]
 r188: [610..611]
 r189: [583..609]
 r190: [604..606]
 r191: [596..598]
 r192: [594..595]
 r193: [587..593]
 r194: [589..590]
 r195: [587..588]
 r196: [585..586]
 r197: [583..584]
 r198: [144..156]
 r199: [151..153]
 r200: [144..145]
 r201: [126..143]
 r202: [138..140]
 r203: [130..132]
 r204: [128..129]
 r205: [126..127]
 r206: [111..123]
 r207: [118..120]
 r208: [111..112]
 r209: [93..110]
 r210: [105..107]
 r211: [97..99]
 r212: [95..96]
 r213: [93..94]
 r214: [78..90]
 r215: [85..87]
 r216: [78..79]
 r217: [60..77]
 r218: [72..74]
 r219: [64..66]
 r220: [62..63]
 r221: [60..61]
 r222: [45..57]
 r223: [52..54]
 r224: [45..46]
 r225: [27..44]
 r226: [39..41]
 r227: [31..33]
 r228: [29..30]
 r229: [27..28]
 r230: [2..3]
 r231: [0..1]
 r232: [25..26]
 r233: [21..23] [17..18]
 r234: [19..20]
 r235: [13..14]
 r236: [10..11]
 r237: [8..9]
 r238: [461..462]
 r239: [458..459]
 r240: [454..456] [450..451]
 r241: [452..453]
 r242: [445..446]
 r243: [441..443] [437..438]
 r244: [439..440]
 r245: [434..435]
 r246: [428..429]
 r247: [425..426]
 r248: [421..423] [417..418]
 r249: [419..420]
 r250: [412..413]
 r251: [408..410] [404..405]
 r252: [406..407]
 r253: [401..402]
 r254: [395..396]
 r255: [392..393]
 r256: [388..390] [384..385]
 r257: [386..387]
 r258: [379..380]
 r259: [375..377] [371..372]
 r260: [373..374]
 r261: [368..369]
 r262: [362..363]
 r263: [359..360]
 r264: [355..357] [351..352]
 r265: [353..354]
 r266: [346..347]
 r267: [342..344] [338..339]
 r268: [340..341]
 r269: [335..336]
 r270: [329..330]
 r271: [326..327]
 r272: [322..324] [318..319]
 r273: [320..321]
 r274: [313..314]
 r275: [310..311]
 r276: [306..308] [302..303]
 r277: [304..305]
 r278: [530..531]
 r279: [527..528]
 r280: [523..525] [519..520]
 r281: [521..522]
 r282: [512..513]
 r283: [503..504]
 r284: [496..497]
 r285: [492..494] [488..489]
 r286: [490..491]
 r287: [485..486]
 r288: [480..481]
 r289: [471..472]
 r290: [292..293]
 r291: [289..290]
 r292: [285..287] [281..282]
 r293: [283..284]
 r294: [273..274]
 r295: [270..271]
 r296: [266..268] [262..263]
 r297: [264..265]
 r298: [257..258]
 r299: [254..255]
 r300: [250..252] [246..247]
 r301: [248..249]
 r302: [581..582]
 r303: [578..579]
 r304: [574..576] [570..571]
 r305: [572..573]
 r306: [563..564]
 r307: [556..557]
 r308: [552..554] [548..549]
 r309: [550..551]
 r310: [545..546]
 r311: [540..541]
 r312: [236..237]
 r313: [233..234]
 r314: [229..231] [225..226]
 r315: [227..228]
 r316: [217..218]
 r317: [214..215]
 r318: [210..212] [206..207]
 r319: [208..209]
 r320: [201..202]
 r321: [198..199]
 r322: [194..196] [190..191]
 r323: [192..193]
 r324: [632..633]
 r325: [629..630]
 r326: [625..627] [621..622]
 r327: [623..624]
 r328: [614..615]
 r329: [607..608]
 r330: [603..605] [599..600]
 r331: [601..602]
 r332: [596..597]
 r333: [591..592]
 r334: [178..179]
 r335: [175..176]
 r336: [171..173] [167..168]
 r337: [169..170]
 r338: [157..158]
 r339: [154..155]
 r340: [150..152] [146..147]
 r341: [148..149]
 r342: [141..142]
 r343: [137..139] [133..134]
 r344: [135..136]
 r345: [130..131]
 r346: [124..125]
 r347: [121..122]
 r348: [117..119] [113..114]
 r349: [115..116]
 r350: [108..109]
 r351: [104..106] [100..101]
 r352: [102..103]
 r353: [97..98]
 r354: [91..92]
 r355: [88..89]
 r356: [84..86] [80..81]
 r357: [82..83]
 r358: [75..76]
 r359: [71..73] [67..68]
 r360: [69..70]
 r361: [64..65]
 r362: [58..59]
 r363: [55..56]
 r364: [51..53] [47..48]
 r365: [49..50]
 r366: [42..43]
 r367: [38..40] [34..35]
 r368: [36..37]
 r369: [31..32]
 r370: [4..5]
Compressing live ranges: from 634 to 516 - 81%
Ranges after the compression:
 r59: [20..21]
 r60: [14..15]
 r61: [10..11]
 r62: [6..7]
 r63: [362..371]
 r64: [368..369]
 r65: [362..363]
 r66: [348..361]
 r67: [358..359]
 r68: [352..353]
 r69: [350..351]
 r70: [348..349]
 r71: [336..345]
 r72: [342..343]
 r73: [336..337]
 r74: [322..335]
 r75: [332..333]
 r76: [326..327]
 r77: [324..325]
 r78: [322..323]
 r79: [310..319]
 r80: [316..317]
 r81: [310..311]
 r82: [296..309]
 r83: [306..307]
 r84: [300..301]
 r85: [298..299]
 r86: [296..297]
 r87: [284..293]
 r88: [290..291]
 r89: [284..285]
 r90: [270..283]
 r91: [280..281]
 r92: [274..275]
 r93: [272..273]
 r94: [270..271]
 r95: [258..267]
 r96: [264..265]
 r97: [258..259]
 r98: [240..257]
 r99: [246..255]
 r100: [252..253]
 r101: [246..247]
 r102: [244..245]
 r103: [242..243]
 r104: [240..241]
 r105: [228..237]
 r106: [234..235]
 r107: [228..229]
 r108: [226..227]
 r109: [224..225]
 r110: [420..429]
 r111: [426..427]
 r112: [420..421]
 r113: [418..419]
 r114: [412..417]
 r115: [414..415]
 r116: [412..413]
 r117: [410..411]
 r118: [404..409]
 r119: [406..407]
 r120: [404..405]
 r121: [374..403]
 r122: [400..401]
 r123: [394..395]
 r124: [392..393]
 r125: [386..391]
 r126: [388..389]
 r127: [386..387]
 r128: [384..385]
 r129: [378..383]
 r130: [380..381]
 r131: [378..379]
 r132: [376..377]
 r133: [374..375]
 r134: [212..221]
 r135: [218..219]
 r136: [212..213]
 r137: [194..211]
 r138: [200..209]
 r139: [206..207]
 r140: [200..201]
 r141: [198..199]
 r142: [196..197]
 r143: [194..195]
 r144: [182..191]
 r145: [188..189]
 r146: [182..183]
 r147: [180..181]
 r148: [178..179]
 r149: [462..471]
 r150: [468..469]
 r151: [462..463]
 r152: [460..461]
 r153: [454..459]
 r154: [456..457]
 r155: [454..455]
 r156: [432..453]
 r157: [450..451]
 r158: [444..445]
 r159: [442..443]
 r160: [436..441]
 r161: [438..439]
 r162: [436..437]
 r163: [434..435]
 r164: [432..433]
 r165: [166..175]
 r166: [172..173]
 r167: [166..167]
 r168: [146..165]
 r169: [154..163]
 r170: [160..161]
 r171: [154..155]
 r172: [152..153]
 r173: [150..151]
 r174: [148..149]
 r175: [146..147]
 r176: [134..143]
 r177: [140..141]
 r178: [134..135]
 r179: [132..133]
 r180: [130..131]
 r181: [128..129]
 r182: [504..513]
 r183: [510..511]
 r184: [504..505]
 r185: [502..503]
 r186: [496..501]
 r187: [498..499]
 r188: [496..497]
 r189: [474..495]
 r190: [492..493]
 r191: [486..487]
 r192: [484..485]
 r193: [478..483]
 r194: [480..481]
 r195: [478..479]
 r196: [476..477]
 r197: [474..475]
 r198: [116..125]
 r199: [122..123]
 r200: [116..117]
 r201: [102..115]
 r202: [112..113]
 r203: [106..107]
 r204: [104..105]
 r205: [102..103]
 r206: [90..99]
 r207: [96..97]
 r208: [90..91]
 r209: [76..89]
 r210: [86..87]
 r211: [80..81]
 r212: [78..79]
 r213: [76..77]
 r214: [64..73]
 r215: [70..71]
 r216: [64..65]
 r217: [50..63]
 r218: [60..61]
 r219: [54..55]
 r220: [52..53]
 r221: [50..51]
 r222: [38..47]
 r223: [44..45]
 r224: [38..39]
 r225: [24..37]
 r226: [34..35]
 r227: [28..29]
 r228: [26..27]
 r229: [24..25]
 r230: [2..3]
 r231: [0..1]
 r232: [22..23]
 r233: [20..21] [16..17]
 r234: [18..19]
 r235: [12..13]
 r236: [10..11]
 r237: [8..9]
 r238: [372..373]
 r239: [370..371]
 r240: [368..369] [364..365]
 r241: [366..367]
 r242: [360..361]
 r243: [358..359] [354..355]
 r244: [356..357]
 r245: [352..353]
 r246: [346..347]
 r247: [344..345]
 r248: [342..343] [338..339]
 r249: [340..341]
 r250: [334..335]
 r251: [332..333] [328..329]
 r252: [330..331]
 r253: [326..327]
 r254: [320..321]
 r255: [318..319]
 r256: [316..317] [312..313]
 r257: [314..315]
 r258: [308..309]
 r259: [306..307] [302..303]
 r260: [304..305]
 r261: [300..301]
 r262: [294..295]
 r263: [292..293]
 r264: [290..291] [286..287]
 r265: [288..289]
 r266: [282..283]
 r267: [280..281] [276..277]
 r268: [278..279]
 r269: [274..275]
 r270: [268..269]
 r271: [266..267]
 r272: [264..265] [260..261]
 r273: [262..263]
 r274: [256..257]
 r275: [254..255]
 r276: [252..253] [248..249]
 r277: [250..251]
 r278: [430..431]
 r279: [428..429]
 r280: [426..427] [422..423]
 r281: [424..425]
 r282: [416..417]
 r283: [408..409]
 r284: [402..403]
 r285: [400..401] [396..397]
 r286: [398..399]
 r287: [394..395]
 r288: [390..391]
 r289: [382..383]
 r290: [238..239]
 r291: [236..237]
 r292: [234..235] [230..231]
 r293: [232..233]
 r294: [222..223]
 r295: [220..221]
 r296: [218..219] [214..215]
 r297: [216..217]
 r298: [210..211]
 r299: [208..209]
 r300: [206..207] [202..203]
 r301: [204..205]
 r302: [472..473]
 r303: [470..471]
 r304: [468..469] [464..465]
 r305: [466..467]
 r306: [458..459]
 r307: [452..453]
 r308: [450..451] [446..447]
 r309: [448..449]
 r310: [444..445]
 r311: [440..441]
 r312: [192..193]
 r313: [190..191]
 r314: [188..189] [184..185]
 r315: [186..187]
 r316: [176..177]
 r317: [174..175]
 r318: [172..173] [168..169]
 r319: [170..171]
 r320: [164..165]
 r321: [162..163]
 r322: [160..161] [156..157]
 r323: [158..159]
 r324: [514..515]
 r325: [512..513]
 r326: [510..511] [506..507]
 r327: [508..509]
 r328: [500..501]
 r329: [494..495]
 r330: [492..493] [488..489]
 r331: [490..491]
 r332: [486..487]
 r333: [482..483]
 r334: [144..145]
 r335: [142..143]
 r336: [140..141] [136..137]
 r337: [138..139]
 r338: [126..127]
 r339: [124..125]
 r340: [122..123] [118..119]
 r341: [120..121]
 r342: [114..115]
 r343: [112..113] [108..109]
 r344: [110..111]
 r345: [106..107]
 r346: [100..101]
 r347: [98..99]
 r348: [96..97] [92..93]
 r349: [94..95]
 r350: [88..89]
 r351: [86..87] [82..83]
 r352: [84..85]
 r353: [80..81]
 r354: [74..75]
 r355: [72..73]
 r356: [70..71] [66..67]
 r357: [68..69]
 r358: [62..63]
 r359: [60..61] [56..57]
 r360: [58..59]
 r361: [54..55]
 r362: [48..49]
 r363: [46..47]
 r364: [44..45] [40..41]
 r365: [42..43]
 r366: [36..37]
 r367: [34..35] [30..31]
 r368: [32..33]
 r369: [28..29]
 r370: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 36
changing reg in insn 45
changing reg in insn 38
changing reg in insn 41
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 57
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 68
changing reg in insn 61
changing reg in insn 64
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 80
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 73
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 91
changing reg in insn 84
changing reg in insn 87
changing reg in insn 85
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 103
changing reg in insn 93
changing reg in insn 96
changing reg in insn 94
changing reg in insn 96
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 114
changing reg in insn 107
changing reg in insn 110
changing reg in insn 108
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 126
changing reg in insn 116
changing reg in insn 119
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 137
changing reg in insn 130
changing reg in insn 133
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 154
changing reg in insn 139
changing reg in insn 141
changing reg in insn 144
changing reg in insn 142
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 217
changing reg in insn 219
changing reg in insn 222
changing reg in insn 220
changing reg in insn 222
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 164
changing reg in insn 166
changing reg in insn 169
changing reg in insn 167
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 178
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 183
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 205
changing reg in insn 185
changing reg in insn 188
changing reg in insn 186
changing reg in insn 188
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 198
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 203
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 233
changing reg in insn 242
changing reg in insn 235
changing reg in insn 238
changing reg in insn 236
changing reg in insn 238
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 258
changing reg in insn 244
changing reg in insn 246
changing reg in insn 249
changing reg in insn 247
changing reg in insn 249
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 258
changing reg in insn 300
changing reg in insn 302
changing reg in insn 305
changing reg in insn 303
changing reg in insn 305
changing reg in insn 308
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 312
changing reg in insn 264
changing reg in insn 266
changing reg in insn 269
changing reg in insn 267
changing reg in insn 269
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 278
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 295
changing reg in insn 280
changing reg in insn 283
changing reg in insn 281
changing reg in insn 283
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 293
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 316
changing reg in insn 325
changing reg in insn 318
changing reg in insn 321
changing reg in insn 319
changing reg in insn 321
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 342
changing reg in insn 327
changing reg in insn 329
changing reg in insn 332
changing reg in insn 330
changing reg in insn 332
changing reg in insn 335
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 384
changing reg in insn 386
changing reg in insn 389
changing reg in insn 387
changing reg in insn 389
changing reg in insn 392
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 397
changing reg in insn 348
changing reg in insn 350
changing reg in insn 353
changing reg in insn 351
changing reg in insn 353
changing reg in insn 356
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 362
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 379
changing reg in insn 364
changing reg in insn 367
changing reg in insn 365
changing reg in insn 367
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 377
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 401
changing reg in insn 410
changing reg in insn 403
changing reg in insn 406
changing reg in insn 404
changing reg in insn 406
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 422
changing reg in insn 412
changing reg in insn 415
changing reg in insn 413
changing reg in insn 415
changing reg in insn 418
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 433
changing reg in insn 426
changing reg in insn 429
changing reg in insn 427
changing reg in insn 429
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 445
changing reg in insn 435
changing reg in insn 438
changing reg in insn 436
changing reg in insn 438
changing reg in insn 441
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 445
changing reg in insn 447
changing reg in insn 456
changing reg in insn 449
changing reg in insn 452
changing reg in insn 450
changing reg in insn 452
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 468
changing reg in insn 458
changing reg in insn 461
changing reg in insn 459
changing reg in insn 461
changing reg in insn 464
changing reg in insn 466
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 479
changing reg in insn 472
changing reg in insn 475
changing reg in insn 473
changing reg in insn 475
changing reg in insn 478
changing reg in insn 479
changing reg in insn 479
changing reg in insn 491
changing reg in insn 481
changing reg in insn 484
changing reg in insn 482
changing reg in insn 484
changing reg in insn 487
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 491
changing reg in insn 500
changing reg in insn 503
changing reg in insn 503
changing reg in insn 507
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 12
changing reg in insn 11
changing reg in insn 10
changing reg in insn 15
changing reg in insn 13
changing reg in insn 12
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 43
changing reg in insn 41
changing reg in insn 40
changing reg in insn 39
changing reg in insn 44
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 52
changing reg in insn 50
changing reg in insn 49
changing reg in insn 48
changing reg in insn 53
changing reg in insn 51
changing reg in insn 50
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 64
changing reg in insn 63
changing reg in insn 62
changing reg in insn 67
changing reg in insn 65
changing reg in insn 64
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 76
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 89
changing reg in insn 87
changing reg in insn 86
changing reg in insn 85
changing reg in insn 90
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 96
changing reg in insn 95
changing reg in insn 94
changing reg in insn 99
changing reg in insn 97
changing reg in insn 96
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 112
changing reg in insn 110
changing reg in insn 109
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 110
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 119
changing reg in insn 118
changing reg in insn 117
changing reg in insn 122
changing reg in insn 120
changing reg in insn 119
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 135
changing reg in insn 133
changing reg in insn 132
changing reg in insn 131
changing reg in insn 136
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 147
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 171
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 172
changing reg in insn 170
changing reg in insn 169
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 185
changing reg in insn 190
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 191
changing reg in insn 189
changing reg in insn 188
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 195
changing reg in insn 196
changing reg in insn 200
changing reg in insn 201
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 224
changing reg in insn 222
changing reg in insn 221
changing reg in insn 220
changing reg in insn 225
changing reg in insn 223
changing reg in insn 222
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 240
changing reg in insn 238
changing reg in insn 237
changing reg in insn 236
changing reg in insn 241
changing reg in insn 239
changing reg in insn 238
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 251
changing reg in insn 249
changing reg in insn 248
changing reg in insn 247
changing reg in insn 252
changing reg in insn 250
changing reg in insn 249
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 271
changing reg in insn 269
changing reg in insn 268
changing reg in insn 267
changing reg in insn 272
changing reg in insn 270
changing reg in insn 269
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 276
changing reg in insn 279
changing reg in insn 280
changing reg in insn 285
changing reg in insn 283
changing reg in insn 282
changing reg in insn 281
changing reg in insn 286
changing reg in insn 284
changing reg in insn 283
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 290
changing reg in insn 291
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 307
changing reg in insn 305
changing reg in insn 304
changing reg in insn 303
changing reg in insn 308
changing reg in insn 306
changing reg in insn 305
changing reg in insn 304
changing reg in insn 306
changing reg in insn 307
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 323
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 324
changing reg in insn 322
changing reg in insn 321
changing reg in insn 320
changing reg in insn 322
changing reg in insn 323
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 334
changing reg in insn 332
changing reg in insn 331
changing reg in insn 330
changing reg in insn 335
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 333
changing reg in insn 334
changing reg in insn 347
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 355
changing reg in insn 353
changing reg in insn 352
changing reg in insn 351
changing reg in insn 356
changing reg in insn 354
changing reg in insn 353
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 363
changing reg in insn 364
changing reg in insn 369
changing reg in insn 367
changing reg in insn 366
changing reg in insn 365
changing reg in insn 370
changing reg in insn 368
changing reg in insn 367
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 374
changing reg in insn 375
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 391
changing reg in insn 389
changing reg in insn 388
changing reg in insn 387
changing reg in insn 392
changing reg in insn 390
changing reg in insn 389
changing reg in insn 388
changing reg in insn 390
changing reg in insn 391
changing reg in insn 400
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 408
changing reg in insn 406
changing reg in insn 405
changing reg in insn 404
changing reg in insn 409
changing reg in insn 407
changing reg in insn 406
changing reg in insn 405
changing reg in insn 407
changing reg in insn 408
changing reg in insn 411
changing reg in insn 412
changing reg in insn 417
changing reg in insn 415
changing reg in insn 414
changing reg in insn 413
changing reg in insn 418
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 431
changing reg in insn 429
changing reg in insn 428
changing reg in insn 427
changing reg in insn 432
changing reg in insn 430
changing reg in insn 429
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 440
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 441
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 449
changing reg in insn 454
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 455
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 453
changing reg in insn 454
changing reg in insn 457
changing reg in insn 458
changing reg in insn 463
changing reg in insn 461
changing reg in insn 460
changing reg in insn 459
changing reg in insn 464
changing reg in insn 462
changing reg in insn 461
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 469
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 477
changing reg in insn 475
changing reg in insn 474
changing reg in insn 473
changing reg in insn 478
changing reg in insn 476
changing reg in insn 475
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 480
changing reg in insn 481
changing reg in insn 486
changing reg in insn 484
changing reg in insn 483
changing reg in insn 482
changing reg in insn 487
changing reg in insn 485
changing reg in insn 484
changing reg in insn 483
changing reg in insn 485
changing reg in insn 486
changing reg in insn 488
changing reg in insn 496
changing reg in insn 497
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 340.


copy_flight

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={313d,312u} r1={78d,105u,43e} r2={37d,31u} r3={3d,3u} r4={7d,2u} r5={11d,6u} r6={1d,116u} r7={1d,24u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={161d,6u} r18={5d} r19={5d} r20={1d,1u,11e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 1473{813d,606u,54e} in 466{461 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 232 233 234 235 236 237
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])
        (reg:DI 5 di [ F ])) mABM.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ F ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mABM.c:85 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])
        (reg:DI 1 dx [ f ])) mABM.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ f ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32])) mABM.c:88 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx [orig:59 D.7055 ] [59])
        (sign_extend:DI (reg:SI 0 ax [232]))) mABM.c:88 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [232])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 0 ax [233])
        (reg:DI 1 dx [orig:59 D.7055 ] [59])) mABM.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 0 ax [233])
                (ashift:DI (reg:DI 0 ax [233])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:88 513 {*ashldi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 0 ax [233])
                (plus:DI (reg:DI 0 ax [233])
                    (reg:DI 1 dx [orig:59 D.7055 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:88 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.7055 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.7055 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [234])
                (ashift:DI (reg:DI 0 ax [233])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:88 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [233])
        (nil)))
(insn 14 13 15 2 (set (reg:DI 0 ax [233])
        (reg:DI 0 ax [234])) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [234])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 0 ax [orig:60 D.7055 ] [60])
        (reg:DI 0 ax [233])) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [233])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.7055 ] [60])) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.7055 ] [60])
        (nil)))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f05a58d2b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mABM.c:88 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [235])
        (reg:DI 0 ax)) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [235])
            (nil))))
(insn 19 18 20 2 (set (reg/f:DI 1 dx [orig:61 D.7056 ] [61])
        (reg/f:DI 0 ax [235])) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [235])
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (mem/f:DI (reg/f:DI 0 ax [236]) [0 *f_10(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:61 D.7056 ] [61])) mABM.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [236])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:61 D.7056 ] [61])
            (nil))))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [orig:62 D.7057 ] [62])
        (mem/f:DI (reg/f:DI 0 ax [237]) [0 *f_10(D)+0 S8 A64])) mABM.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [237])
        (nil)))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:62 D.7057 ] [62])
            (const_int 0 [0]))) mABM.c:89 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7057 ] [62])
        (nil)))
(jump_insn 25 24 26 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) mABM.c:89 612 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 26 25 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f05a54f0720 *.LC5>)) mABM.c:89 87 {*movdi_internal_rex64}
     (nil))
(call_insn 28 27 29 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:89 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 29 28 30 4 23 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 513 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:91 89 {*movsi_internal}
     (nil))
(jump_insn 513 31 514 4 (set (pc)
        (label_ref 493)) mABM.c:91 650 {jump}
     (nil)
 -> 493)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 514 513 495)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277
(code_label 495 514 34 5 33 "" [1 uses])
(note 34 495 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (set (reg/f:DI 2 cx [orig:63 D.7057 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [238]) [0 *f_10(D)+0 S8 A64])) mABM.c:92 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [238])
        (nil)))
(insn 37 36 38 5 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:92 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 1 dx [orig:64 D.7055 ] [64])
        (sign_extend:DI (reg:SI 0 ax [239]))) mABM.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [239])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 0 ax [240])
        (reg:DI 1 dx [orig:64 D.7055 ] [64])) mABM.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 0 ax [240])
                (ashift:DI (reg:DI 0 ax [240])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 513 {*ashldi3_1}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg:DI 0 ax [240])
                    (reg:DI 1 dx [orig:64 D.7055 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7055 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.7055 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 0 ax [241])
                (ashift:DI (reg:DI 0 ax [240])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [240])
        (nil)))
(insn 43 42 44 5 (set (reg:DI 0 ax [240])
        (reg:DI 0 ax [241])) mABM.c:92 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [241])
        (nil)))
(insn 44 43 45 5 (set (reg:DI 0 ax [orig:65 D.7055 ] [65])
        (reg:DI 0 ax [240])) mABM.c:92 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [240])
        (nil)))
(insn 45 44 46 5 (parallel [
            (set (reg/f:DI 2 cx [orig:66 D.7057 ] [66])
                (plus:DI (reg/f:DI 2 cx [orig:63 D.7057 ] [63])
                    (reg:DI 0 ax [orig:65 D.7055 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.7055 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:63 D.7057 ] [63])
            (nil))))
(insn 46 45 47 5 (set (reg:SI 0 ax [242])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:92 89 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 1 dx [orig:67 D.7055 ] [67])
        (sign_extend:DI (reg:SI 0 ax [242]))) mABM.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [242])
        (nil)))
(insn 48 47 49 5 (set (reg:DI 0 ax [243])
        (reg:DI 1 dx [orig:67 D.7055 ] [67])) mABM.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 5 (parallel [
            (set (reg:DI 0 ax [243])
                (ashift:DI (reg:DI 0 ax [243])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 513 {*ashldi3_1}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 0 ax [243])
                (plus:DI (reg:DI 0 ax [243])
                    (reg:DI 1 dx [orig:67 D.7055 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7055 ] [67])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:67 D.7055 ] [67])
                (const_int 5 [0x5]))
            (nil))))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 0 ax [244])
                (ashift:DI (reg:DI 0 ax [243])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [243])
        (nil)))
(insn 52 51 53 5 (set (reg:DI 0 ax [243])
        (reg:DI 0 ax [244])) mABM.c:92 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [244])
        (nil)))
(insn 53 52 54 5 (set (reg:DI 1 dx [orig:68 D.7055 ] [68])
        (reg:DI 0 ax [243])) mABM.c:92 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [243])
        (nil)))
(insn 54 53 55 5 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 5 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.7057 ] [69])
                (plus:DI (reg/f:DI 0 ax [245])
                    (reg:DI 1 dx [orig:68 D.7055 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [245])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.7055 ] [68])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:68 D.7055 ] [68]))
                (nil)))))
(insn 56 55 57 5 (set (reg:SI 0 ax [orig:70 D.7058 ] [70])
        (mem/j:SI (reg/f:DI 0 ax [orig:69 D.7057 ] [69]) [0 _20->ID+0 S4 A128])) mABM.c:92 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7057 ] [69])
        (nil)))
(insn 57 56 58 5 (set (mem/j:SI (reg/f:DI 2 cx [orig:66 D.7057 ] [66]) [0 _16->ID+0 S4 A128])
        (reg:SI 0 ax [orig:70 D.7058 ] [70])) mABM.c:92 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.7058 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:66 D.7057 ] [66])
            (nil))))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:94 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (set (reg/f:DI 2 cx [orig:71 D.7057 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [246]) [0 *f_10(D)+0 S8 A64])) mABM.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [246])
        (nil)))
(insn 60 59 61 5 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:94 89 {*movsi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 1 dx [orig:72 D.7055 ] [72])
        (sign_extend:DI (reg:SI 0 ax [247]))) mABM.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [247])
        (nil)))
(insn 62 61 63 5 (set (reg:DI 0 ax [248])
        (reg:DI 1 dx [orig:72 D.7055 ] [72])) mABM.c:94 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 0 ax [248])
                (ashift:DI (reg:DI 0 ax [248])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 513 {*ashldi3_1}
     (nil))
(insn 64 63 65 5 (parallel [
            (set (reg:DI 0 ax [248])
                (plus:DI (reg:DI 0 ax [248])
                    (reg:DI 1 dx [orig:72 D.7055 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.7055 ] [72])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:72 D.7055 ] [72])
                (const_int 5 [0x5]))
            (nil))))
(insn 65 64 66 5 (parallel [
            (set (reg:DI 0 ax [249])
                (ashift:DI (reg:DI 0 ax [248])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [248])
        (nil)))
(insn 66 65 67 5 (set (reg:DI 0 ax [248])
        (reg:DI 0 ax [249])) mABM.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [249])
        (nil)))
(insn 67 66 68 5 (set (reg:DI 0 ax [orig:73 D.7055 ] [73])
        (reg:DI 0 ax [248])) mABM.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [248])
        (nil)))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 2 cx [orig:74 D.7057 ] [74])
                (plus:DI (reg/f:DI 2 cx [orig:71 D.7057 ] [71])
                    (reg:DI 0 ax [orig:73 D.7055 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:73 D.7055 ] [73])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:71 D.7057 ] [71])
            (nil))))
(insn 69 68 70 5 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:94 89 {*movsi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:DI 1 dx [orig:75 D.7055 ] [75])
        (sign_extend:DI (reg:SI 0 ax [250]))) mABM.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [250])
        (nil)))
(insn 71 70 72 5 (set (reg:DI 0 ax [251])
        (reg:DI 1 dx [orig:75 D.7055 ] [75])) mABM.c:94 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 5 (parallel [
            (set (reg:DI 0 ax [251])
                (ashift:DI (reg:DI 0 ax [251])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 513 {*ashldi3_1}
     (nil))
(insn 73 72 74 5 (parallel [
            (set (reg:DI 0 ax [251])
                (plus:DI (reg:DI 0 ax [251])
                    (reg:DI 1 dx [orig:75 D.7055 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.7055 ] [75])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:75 D.7055 ] [75])
                (const_int 5 [0x5]))
            (nil))))
(insn 74 73 75 5 (parallel [
            (set (reg:DI 0 ax [252])
                (ashift:DI (reg:DI 0 ax [251])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [251])
        (nil)))
(insn 75 74 76 5 (set (reg:DI 0 ax [251])
        (reg:DI 0 ax [252])) mABM.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [252])
        (nil)))
(insn 76 75 77 5 (set (reg:DI 1 dx [orig:76 D.7055 ] [76])
        (reg:DI 0 ax [251])) mABM.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [251])
        (nil)))
(insn 77 76 78 5 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:94 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 5 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.7057 ] [77])
                (plus:DI (reg/f:DI 0 ax [253])
                    (reg:DI 1 dx [orig:76 D.7055 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:94 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [253])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.7055 ] [76])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:76 D.7055 ] [76]))
                (nil)))))
(insn 79 78 80 5 (set (reg:SI 0 ax [orig:78 D.7058 ] [78])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:77 D.7057 ] [77])
                (const_int 4 [0x4])) [0 _28->n_nvp+0 S4 A32])) mABM.c:94 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7057 ] [77])
        (nil)))
(insn 80 79 81 5 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:74 D.7057 ] [74])
                (const_int 4 [0x4])) [0 _25->n_nvp+0 S4 A32])
        (reg:SI 0 ax [orig:78 D.7058 ] [78])) mABM.c:94 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 D.7058 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:74 D.7057 ] [74])
            (nil))))
(insn 81 80 82 5 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 5 (set (reg/f:DI 2 cx [orig:79 D.7057 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [254]) [0 *f_10(D)+0 S8 A64])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [254])
        (nil)))
(insn 83 82 84 5 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:96 89 {*movsi_internal}
     (nil))
(insn 84 83 85 5 (set (reg:DI 1 dx [orig:80 D.7055 ] [80])
        (sign_extend:DI (reg:SI 0 ax [255]))) mABM.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [255])
        (nil)))
(insn 85 84 86 5 (set (reg:DI 0 ax [256])
        (reg:DI 1 dx [orig:80 D.7055 ] [80])) mABM.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 5 (parallel [
            (set (reg:DI 0 ax [256])
                (ashift:DI (reg:DI 0 ax [256])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 513 {*ashldi3_1}
     (nil))
(insn 87 86 88 5 (parallel [
            (set (reg:DI 0 ax [256])
                (plus:DI (reg:DI 0 ax [256])
                    (reg:DI 1 dx [orig:80 D.7055 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7055 ] [80])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:80 D.7055 ] [80])
                (const_int 5 [0x5]))
            (nil))))
(insn 88 87 89 5 (parallel [
            (set (reg:DI 0 ax [257])
                (ashift:DI (reg:DI 0 ax [256])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [256])
        (nil)))
(insn 89 88 90 5 (set (reg:DI 0 ax [256])
        (reg:DI 0 ax [257])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [257])
        (nil)))
(insn 90 89 91 5 (set (reg:DI 0 ax [orig:81 D.7055 ] [81])
        (reg:DI 0 ax [256])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [256])
        (nil)))
(insn 91 90 92 5 (parallel [
            (set (reg/f:DI 2 cx [orig:82 D.7057 ] [82])
                (plus:DI (reg/f:DI 2 cx [orig:79 D.7057 ] [79])
                    (reg:DI 0 ax [orig:81 D.7055 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:81 D.7055 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:79 D.7057 ] [79])
            (nil))))
(insn 92 91 93 5 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:96 89 {*movsi_internal}
     (nil))
(insn 93 92 94 5 (set (reg:DI 1 dx [orig:83 D.7055 ] [83])
        (sign_extend:DI (reg:SI 0 ax [258]))) mABM.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [258])
        (nil)))
(insn 94 93 95 5 (set (reg:DI 0 ax [259])
        (reg:DI 1 dx [orig:83 D.7055 ] [83])) mABM.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 5 (parallel [
            (set (reg:DI 0 ax [259])
                (ashift:DI (reg:DI 0 ax [259])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 513 {*ashldi3_1}
     (nil))
(insn 96 95 97 5 (parallel [
            (set (reg:DI 0 ax [259])
                (plus:DI (reg:DI 0 ax [259])
                    (reg:DI 1 dx [orig:83 D.7055 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7055 ] [83])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:83 D.7055 ] [83])
                (const_int 5 [0x5]))
            (nil))))
(insn 97 96 98 5 (parallel [
            (set (reg:DI 0 ax [260])
                (ashift:DI (reg:DI 0 ax [259])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [259])
        (nil)))
(insn 98 97 99 5 (set (reg:DI 0 ax [259])
        (reg:DI 0 ax [260])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [260])
        (nil)))
(insn 99 98 100 5 (set (reg:DI 1 dx [orig:84 D.7055 ] [84])
        (reg:DI 0 ax [259])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [259])
        (nil)))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 5 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7057 ] [85])
                (plus:DI (reg/f:DI 0 ax [261])
                    (reg:DI 1 dx [orig:84 D.7055 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [261])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7055 ] [84])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:84 D.7055 ] [84]))
                (nil)))))
(insn 102 101 103 5 (set (reg/f:DI 0 ax [orig:86 D.7059 ] [86])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:85 D.7057 ] [85])
                (const_int 32 [0x20])) [0 _36->pos+0 S8 A128])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7057 ] [85])
        (nil)))
(insn 103 102 104 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 2 cx [orig:82 D.7057 ] [82])
                (const_int 32 [0x20])) [0 _33->pos+0 S8 A128])
        (reg/f:DI 0 ax [orig:86 D.7059 ] [86])) mABM.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7059 ] [86])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:82 D.7057 ] [82])
            (nil))))
(insn 104 103 105 5 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 5 (set (reg/f:DI 2 cx [orig:87 D.7057 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [262]) [0 *f_10(D)+0 S8 A64])) mABM.c:97 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [262])
        (nil)))
(insn 106 105 107 5 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:97 89 {*movsi_internal}
     (nil))
(insn 107 106 108 5 (set (reg:DI 1 dx [orig:88 D.7055 ] [88])
        (sign_extend:DI (reg:SI 0 ax [263]))) mABM.c:97 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [263])
        (nil)))
(insn 108 107 109 5 (set (reg:DI 0 ax [264])
        (reg:DI 1 dx [orig:88 D.7055 ] [88])) mABM.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 5 (parallel [
            (set (reg:DI 0 ax [264])
                (ashift:DI (reg:DI 0 ax [264])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 513 {*ashldi3_1}
     (nil))
(insn 110 109 111 5 (parallel [
            (set (reg:DI 0 ax [264])
                (plus:DI (reg:DI 0 ax [264])
                    (reg:DI 1 dx [orig:88 D.7055 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.7055 ] [88])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.7055 ] [88])
                (const_int 5 [0x5]))
            (nil))))
(insn 111 110 112 5 (parallel [
            (set (reg:DI 0 ax [265])
                (ashift:DI (reg:DI 0 ax [264])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [264])
        (nil)))
(insn 112 111 113 5 (set (reg:DI 0 ax [264])
        (reg:DI 0 ax [265])) mABM.c:97 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [265])
        (nil)))
(insn 113 112 114 5 (set (reg:DI 0 ax [orig:89 D.7055 ] [89])
        (reg:DI 0 ax [264])) mABM.c:97 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [264])
        (nil)))
(insn 114 113 115 5 (parallel [
            (set (reg/f:DI 2 cx [orig:90 D.7057 ] [90])
                (plus:DI (reg/f:DI 2 cx [orig:87 D.7057 ] [87])
                    (reg:DI 0 ax [orig:89 D.7055 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.7055 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:87 D.7057 ] [87])
            (nil))))
(insn 115 114 116 5 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:97 89 {*movsi_internal}
     (nil))
(insn 116 115 117 5 (set (reg:DI 1 dx [orig:91 D.7055 ] [91])
        (sign_extend:DI (reg:SI 0 ax [266]))) mABM.c:97 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [266])
        (nil)))
(insn 117 116 118 5 (set (reg:DI 0 ax [267])
        (reg:DI 1 dx [orig:91 D.7055 ] [91])) mABM.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 5 (parallel [
            (set (reg:DI 0 ax [267])
                (ashift:DI (reg:DI 0 ax [267])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 513 {*ashldi3_1}
     (nil))
(insn 119 118 120 5 (parallel [
            (set (reg:DI 0 ax [267])
                (plus:DI (reg:DI 0 ax [267])
                    (reg:DI 1 dx [orig:91 D.7055 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:91 D.7055 ] [91])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:91 D.7055 ] [91])
                (const_int 5 [0x5]))
            (nil))))
(insn 120 119 121 5 (parallel [
            (set (reg:DI 0 ax [268])
                (ashift:DI (reg:DI 0 ax [267])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [267])
        (nil)))
(insn 121 120 122 5 (set (reg:DI 0 ax [267])
        (reg:DI 0 ax [268])) mABM.c:97 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [268])
        (nil)))
(insn 122 121 123 5 (set (reg:DI 1 dx [orig:92 D.7055 ] [92])
        (reg:DI 0 ax [267])) mABM.c:97 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [267])
        (nil)))
(insn 123 122 124 5 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 124 123 125 5 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.7057 ] [93])
                (plus:DI (reg/f:DI 0 ax [269])
                    (reg:DI 1 dx [orig:92 D.7055 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:97 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [269])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.7055 ] [92])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:92 D.7055 ] [92]))
                (nil)))))
(insn 125 124 126 5 (set (reg:SI 0 ax [orig:94 D.7058 ] [94])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:93 D.7057 ] [93])
                (const_int 40 [0x28])) [0 _44->ready+0 S4 A64])) mABM.c:97 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.7057 ] [93])
        (nil)))
(insn 126 125 127 5 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:90 D.7057 ] [90])
                (const_int 40 [0x28])) [0 _41->ready+0 S4 A64])
        (reg:SI 0 ax [orig:94 D.7058 ] [94])) mABM.c:97 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 D.7058 ] [94])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:90 D.7057 ] [90])
            (nil))))
(insn 127 126 128 5 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 5 (set (reg/f:DI 2 cx [orig:95 D.7057 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [270]) [0 *f_10(D)+0 S8 A64])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [270])
        (nil)))
(insn 129 128 130 5 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:99 89 {*movsi_internal}
     (nil))
(insn 130 129 131 5 (set (reg:DI 1 dx [orig:96 D.7055 ] [96])
        (sign_extend:DI (reg:SI 0 ax [271]))) mABM.c:99 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [271])
        (nil)))
(insn 131 130 132 5 (set (reg:DI 0 ax [272])
        (reg:DI 1 dx [orig:96 D.7055 ] [96])) mABM.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 132 131 133 5 (parallel [
            (set (reg:DI 0 ax [272])
                (ashift:DI (reg:DI 0 ax [272])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 513 {*ashldi3_1}
     (nil))
(insn 133 132 134 5 (parallel [
            (set (reg:DI 0 ax [272])
                (plus:DI (reg:DI 0 ax [272])
                    (reg:DI 1 dx [orig:96 D.7055 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.7055 ] [96])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.7055 ] [96])
                (const_int 5 [0x5]))
            (nil))))
(insn 134 133 135 5 (parallel [
            (set (reg:DI 0 ax [273])
                (ashift:DI (reg:DI 0 ax [272])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [272])
        (nil)))
(insn 135 134 136 5 (set (reg:DI 0 ax [272])
        (reg:DI 0 ax [273])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [273])
        (nil)))
(insn 136 135 137 5 (set (reg:DI 0 ax [orig:97 D.7055 ] [97])
        (reg:DI 0 ax [272])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [272])
        (nil)))
(insn 137 136 138 5 (parallel [
            (set (reg/f:DI 3 bx [orig:98 D.7057 ] [98])
                (plus:DI (reg/f:DI 2 cx [orig:95 D.7057 ] [95])
                    (reg:DI 0 ax [orig:97 D.7055 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.7055 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:95 D.7057 ] [95])
            (nil))))
(insn 138 137 139 5 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 139 138 140 5 (set (reg/f:DI 2 cx [orig:99 D.7057 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [274]) [0 *f_10(D)+0 S8 A64])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [274])
        (nil)))
(insn 140 139 141 5 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:99 89 {*movsi_internal}
     (nil))
(insn 141 140 142 5 (set (reg:DI 1 dx [orig:100 D.7055 ] [100])
        (sign_extend:DI (reg:SI 0 ax [275]))) mABM.c:99 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [275])
        (nil)))
(insn 142 141 143 5 (set (reg:DI 0 ax [276])
        (reg:DI 1 dx [orig:100 D.7055 ] [100])) mABM.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 5 (parallel [
            (set (reg:DI 0 ax [276])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 513 {*ashldi3_1}
     (nil))
(insn 144 143 145 5 (parallel [
            (set (reg:DI 0 ax [276])
                (plus:DI (reg:DI 0 ax [276])
                    (reg:DI 1 dx [orig:100 D.7055 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.7055 ] [100])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.7055 ] [100])
                (const_int 5 [0x5]))
            (nil))))
(insn 145 144 146 5 (parallel [
            (set (reg:DI 0 ax [277])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 146 145 147 5 (set (reg:DI 0 ax [276])
        (reg:DI 0 ax [277])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [277])
        (nil)))
(insn 147 146 148 5 (set (reg:DI 0 ax [orig:101 D.7055 ] [101])
        (reg:DI 0 ax [276])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 148 147 149 5 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.7057 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.7055 ] [101])
                    (reg/f:DI 2 cx [orig:99 D.7057 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.7055 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:99 D.7057 ] [99])
            (nil))))
(insn 149 148 150 5 (set (reg:SI 0 ax [orig:103 D.7058 ] [103])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:102 D.7057 ] [102])
                (const_int 4 [0x4])) [0 _53->n_nvp+0 S4 A32])) mABM.c:99 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.7057 ] [102])
        (nil)))
(insn 150 149 151 5 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mABM.c:99 89 {*movsi_internal}
     (nil))
(insn 151 150 152 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:103 D.7058 ] [103])) mABM.c:99 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:103 D.7058 ] [103])
        (nil)))
(call_insn 152 151 153 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f05a5959600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mABM.c:99 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 153 152 154 5 (set (reg/f:DI 0 ax [orig:104 D.7059 ] [104])
        (reg:DI 0 ax)) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 154 153 155 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:98 D.7057 ] [98])
                (const_int 8 [0x8])) [0 _49->nvp+0 S8 A64])
        (reg/f:DI 0 ax [orig:104 D.7059 ] [104])) mABM.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.7059 ] [104])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:98 D.7057 ] [98])
            (nil))))
(insn 155 154 515 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:100 89 {*movsi_internal}
     (nil))
(jump_insn 515 155 516 5 (set (pc)
        (label_ref 214)) mABM.c:100 650 {jump}
     (nil)
 -> 214)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 516 515 228)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 228 516 158 6 28 "" [1 uses])
(note 158 228 159 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 517 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
        (const_int 0 [0])) mABM.c:100 89 {*movsi_internal}
     (nil))
(jump_insn 517 159 518 6 (set (pc)
        (label_ref 207)) mABM.c:100 650 {jump}
     (nil)
 -> 207)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 518 517 209)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 278 279 280 281 282 283 284 285 286 287 288 289
(code_label 209 518 162 7 27 "" [1 uses])
(note 162 209 163 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 7 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 164 163 165 7 (set (reg/f:DI 2 cx [orig:110 D.7057 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [278]) [0 *f_10(D)+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [278])
        (nil)))
(insn 165 164 166 7 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 166 165 167 7 (set (reg:DI 1 dx [orig:111 D.7055 ] [111])
        (sign_extend:DI (reg:SI 0 ax [279]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [279])
        (nil)))
(insn 167 166 168 7 (set (reg:DI 0 ax [280])
        (reg:DI 1 dx [orig:111 D.7055 ] [111])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 168 167 169 7 (parallel [
            (set (reg:DI 0 ax [280])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (nil))
(insn 169 168 170 7 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg:DI 0 ax [280])
                    (reg:DI 1 dx [orig:111 D.7055 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:111 D.7055 ] [111])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.7055 ] [111])
                (const_int 5 [0x5]))
            (nil))))
(insn 170 169 171 7 (parallel [
            (set (reg:DI 0 ax [281])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [280])
        (nil)))
(insn 171 170 172 7 (set (reg:DI 0 ax [280])
        (reg:DI 0 ax [281])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [281])
        (nil)))
(insn 172 171 173 7 (set (reg:DI 0 ax [orig:112 D.7055 ] [112])
        (reg:DI 0 ax [280])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [280])
        (nil)))
(insn 173 172 174 7 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.7057 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 D.7055 ] [112])
                    (reg/f:DI 2 cx [orig:110 D.7057 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:112 D.7055 ] [112])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:110 D.7057 ] [110])
            (nil))))
(insn 174 173 175 7 (set (reg/f:DI 0 ax [orig:114 D.7059 ] [114])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:113 D.7057 ] [113])
                (const_int 8 [0x8])) [0 _66->nvp+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:113 D.7057 ] [113])
        (nil)))
(insn 175 174 176 7 (set (reg:SI 1 dx [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 176 175 177 7 (set (reg:DI 1 dx [orig:115 D.7055 ] [115])
        (sign_extend:DI (reg:SI 1 dx [282]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [282])
        (nil)))
(insn 177 176 178 7 (parallel [
            (set (reg:DI 1 dx [orig:116 D.7055 ] [116])
                (ashift:DI (reg:DI 1 dx [orig:115 D.7055 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 D.7055 ] [115])
        (nil)))
(insn 178 177 179 7 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.7059 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:114 D.7059 ] [114])
                    (reg:DI 1 dx [orig:116 D.7055 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:116 D.7055 ] [116])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:114 D.7059 ] [114])
            (nil))))
(insn 179 178 180 7 (set (reg/f:DI 0 ax [orig:118 D.7060 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 D.7059 ] [117]) [0 *_70+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:117 D.7059 ] [117])
        (nil)))
(insn 180 179 181 7 (set (reg:SI 1 dx [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 181 180 182 7 (set (reg:DI 1 dx [orig:119 D.7055 ] [119])
        (sign_extend:DI (reg:SI 1 dx [283]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [283])
        (nil)))
(insn 182 181 183 7 (parallel [
            (set (reg:DI 1 dx [orig:120 D.7055 ] [120])
                (ashift:DI (reg:DI 1 dx [orig:119 D.7055 ] [119])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:119 D.7055 ] [119])
        (nil)))
(insn 183 182 184 7 (parallel [
            (set (reg/f:DI 2 cx [orig:121 D.7060 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:118 D.7060 ] [118])
                    (reg:DI 1 dx [orig:120 D.7055 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:120 D.7055 ] [120])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:118 D.7060 ] [118])
            (nil))))
(insn 184 183 185 7 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 185 184 186 7 (set (reg:DI 1 dx [orig:122 D.7055 ] [122])
        (sign_extend:DI (reg:SI 0 ax [284]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [284])
        (nil)))
(insn 186 185 187 7 (set (reg:DI 0 ax [285])
        (reg:DI 1 dx [orig:122 D.7055 ] [122])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 187 186 188 7 (parallel [
            (set (reg:DI 0 ax [285])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (nil))
(insn 188 187 189 7 (parallel [
            (set (reg:DI 0 ax [285])
                (plus:DI (reg:DI 0 ax [285])
                    (reg:DI 1 dx [orig:122 D.7055 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:122 D.7055 ] [122])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:122 D.7055 ] [122])
                (const_int 5 [0x5]))
            (nil))))
(insn 189 188 190 7 (parallel [
            (set (reg:DI 0 ax [286])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 190 189 191 7 (set (reg:DI 0 ax [285])
        (reg:DI 0 ax [286])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [286])
        (nil)))
(insn 191 190 192 7 (set (reg:DI 1 dx [orig:123 D.7055 ] [123])
        (reg:DI 0 ax [285])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 192 191 193 7 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 193 192 194 7 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.7057 ] [124])
                (plus:DI (reg/f:DI 0 ax [287])
                    (reg:DI 1 dx [orig:123 D.7055 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [287])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:123 D.7055 ] [123])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:123 D.7055 ] [123]))
                (nil)))))
(insn 194 193 195 7 (set (reg/f:DI 0 ax [orig:125 D.7059 ] [125])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:124 D.7057 ] [124])
                (const_int 8 [0x8])) [0 _77->nvp+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:124 D.7057 ] [124])
        (nil)))
(insn 195 194 196 7 (set (reg:SI 1 dx [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 196 195 197 7 (set (reg:DI 1 dx [orig:126 D.7055 ] [126])
        (sign_extend:DI (reg:SI 1 dx [288]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [288])
        (nil)))
(insn 197 196 198 7 (parallel [
            (set (reg:DI 1 dx [orig:127 D.7055 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.7055 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:126 D.7055 ] [126])
        (nil)))
(insn 198 197 199 7 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.7059 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.7059 ] [125])
                    (reg:DI 1 dx [orig:127 D.7055 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:127 D.7055 ] [127])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.7059 ] [125])
            (nil))))
(insn 199 198 200 7 (set (reg/f:DI 0 ax [orig:129 D.7060 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 D.7059 ] [128]) [0 *_81+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:128 D.7059 ] [128])
        (nil)))
(insn 200 199 201 7 (set (reg:SI 1 dx [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 201 200 202 7 (set (reg:DI 1 dx [orig:130 D.7055 ] [130])
        (sign_extend:DI (reg:SI 1 dx [289]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [289])
        (nil)))
(insn 202 201 203 7 (parallel [
            (set (reg:DI 1 dx [orig:131 D.7055 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.7055 ] [130])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:130 D.7055 ] [130])
        (nil)))
(insn 203 202 204 7 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.7060 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.7060 ] [129])
                    (reg:DI 1 dx [orig:131 D.7055 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:131 D.7055 ] [131])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:129 D.7060 ] [129])
            (nil))))
(insn 204 203 205 7 (set (reg:XF 0 ax [orig:133 D.7061 ] [133])
        (mem:XF (reg/f:DI 0 ax [orig:132 D.7060 ] [132]) [0 *_85+0 S16 A128])) mABM.c:100 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:132 D.7060 ] [132])
        (nil)))
(insn 205 204 206 7 (set (mem:XF (reg/f:DI 2 cx [orig:121 D.7060 ] [121]) [0 *_74+0 S16 A128])
        (reg:XF 0 ax [orig:133 D.7061 ] [133])) mABM.c:100 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:133 D.7061 ] [133])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:121 D.7060 ] [121])
            (nil))))
(insn 206 205 207 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 207 206 208 8 26 "" [1 uses])
(note 208 207 210 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 210 208 211 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:100 7 {*cmpsi_1}
     (nil))
(jump_insn 211 210 212 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) mABM.c:100 612 {*jcc_1}
     (nil)
 -> 209)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 212 211 213 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 214 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 290 291 292 293
(code_label 214 213 215 10 25 "" [1 uses])
(note 215 214 216 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 10 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 217 216 218 10 (set (reg/f:DI 2 cx [orig:105 D.7057 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [290]) [0 *f_10(D)+0 S8 A64])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [290])
        (nil)))
(insn 218 217 219 10 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (nil))
(insn 219 218 220 10 (set (reg:DI 1 dx [orig:106 D.7055 ] [106])
        (sign_extend:DI (reg:SI 0 ax [291]))) mABM.c:100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [291])
        (nil)))
(insn 220 219 221 10 (set (reg:DI 0 ax [292])
        (reg:DI 1 dx [orig:106 D.7055 ] [106])) mABM.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 221 220 222 10 (parallel [
            (set (reg:DI 0 ax [292])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (nil))
(insn 222 221 223 10 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg:DI 0 ax [292])
                    (reg:DI 1 dx [orig:106 D.7055 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:106 D.7055 ] [106])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:106 D.7055 ] [106])
                (const_int 5 [0x5]))
            (nil))))
(insn 223 222 224 10 (parallel [
            (set (reg:DI 0 ax [293])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [292])
        (nil)))
(insn 224 223 225 10 (set (reg:DI 0 ax [292])
        (reg:DI 0 ax [293])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [293])
        (nil)))
(insn 225 224 226 10 (set (reg:DI 0 ax [orig:107 D.7055 ] [107])
        (reg:DI 0 ax [292])) mABM.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [292])
        (nil)))
(insn 226 225 227 10 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.7057 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 D.7055 ] [107])
                    (reg/f:DI 2 cx [orig:105 D.7057 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:100 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:107 D.7055 ] [107])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:105 D.7057 ] [105])
            (nil))))
(insn 227 226 229 10 (set (reg:SI 0 ax [orig:109 D.7058 ] [109])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:108 D.7057 ] [108])
                (const_int 4 [0x4])) [0 _60->n_nvp+0 S4 A32])) mABM.c:100 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:108 D.7057 ] [108])
        (nil)))
(insn 229 227 230 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 D.7058 ] [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) mABM.c:100 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:109 D.7058 ] [109])
        (nil)))
(jump_insn 230 229 231 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 228)
            (pc))) mABM.c:100 612 {*jcc_1}
     (nil)
 -> 228)
;;  succ:       6
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 134 135 136 137 138 139 140 141 142 143 294 295 296 297 298 299 300 301
(note 231 230 232 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 11 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:102 87 {*movdi_internal_rex64}
     (nil))
(insn 233 232 234 11 (set (reg/f:DI 2 cx [orig:134 D.7057 ] [134])
        (mem/f:DI (reg/f:DI 0 ax [294]) [0 *f_10(D)+0 S8 A64])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [294])
        (nil)))
(insn 234 233 235 11 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:102 89 {*movsi_internal}
     (nil))
(insn 235 234 236 11 (set (reg:DI 1 dx [orig:135 D.7055 ] [135])
        (sign_extend:DI (reg:SI 0 ax [295]))) mABM.c:102 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [295])
        (nil)))
(insn 236 235 237 11 (set (reg:DI 0 ax [296])
        (reg:DI 1 dx [orig:135 D.7055 ] [135])) mABM.c:102 87 {*movdi_internal_rex64}
     (nil))
(insn 237 236 238 11 (parallel [
            (set (reg:DI 0 ax [296])
                (ashift:DI (reg:DI 0 ax [296])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 513 {*ashldi3_1}
     (nil))
(insn 238 237 239 11 (parallel [
            (set (reg:DI 0 ax [296])
                (plus:DI (reg:DI 0 ax [296])
                    (reg:DI 1 dx [orig:135 D.7055 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:135 D.7055 ] [135])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:135 D.7055 ] [135])
                (const_int 5 [0x5]))
            (nil))))
(insn 239 238 240 11 (parallel [
            (set (reg:DI 0 ax [297])
                (ashift:DI (reg:DI 0 ax [296])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [296])
        (nil)))
(insn 240 239 241 11 (set (reg:DI 0 ax [296])
        (reg:DI 0 ax [297])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [297])
        (nil)))
(insn 241 240 242 11 (set (reg:DI 0 ax [orig:136 D.7055 ] [136])
        (reg:DI 0 ax [296])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [296])
        (nil)))
(insn 242 241 243 11 (parallel [
            (set (reg/f:DI 3 bx [orig:137 D.7057 ] [137])
                (plus:DI (reg/f:DI 2 cx [orig:134 D.7057 ] [134])
                    (reg:DI 0 ax [orig:136 D.7055 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:136 D.7055 ] [136])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:134 D.7057 ] [134])
            (nil))))
(insn 243 242 244 11 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:102 87 {*movdi_internal_rex64}
     (nil))
(insn 244 243 245 11 (set (reg/f:DI 2 cx [orig:138 D.7057 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [298]) [0 *f_10(D)+0 S8 A64])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [298])
        (nil)))
(insn 245 244 246 11 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:102 89 {*movsi_internal}
     (nil))
(insn 246 245 247 11 (set (reg:DI 1 dx [orig:139 D.7055 ] [139])
        (sign_extend:DI (reg:SI 0 ax [299]))) mABM.c:102 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [299])
        (nil)))
(insn 247 246 248 11 (set (reg:DI 0 ax [300])
        (reg:DI 1 dx [orig:139 D.7055 ] [139])) mABM.c:102 87 {*movdi_internal_rex64}
     (nil))
(insn 248 247 249 11 (parallel [
            (set (reg:DI 0 ax [300])
                (ashift:DI (reg:DI 0 ax [300])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 513 {*ashldi3_1}
     (nil))
(insn 249 248 250 11 (parallel [
            (set (reg:DI 0 ax [300])
                (plus:DI (reg:DI 0 ax [300])
                    (reg:DI 1 dx [orig:139 D.7055 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.7055 ] [139])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:139 D.7055 ] [139])
                (const_int 5 [0x5]))
            (nil))))
(insn 250 249 251 11 (parallel [
            (set (reg:DI 0 ax [301])
                (ashift:DI (reg:DI 0 ax [300])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (nil)))
(insn 251 250 252 11 (set (reg:DI 0 ax [300])
        (reg:DI 0 ax [301])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [301])
        (nil)))
(insn 252 251 253 11 (set (reg:DI 0 ax [orig:140 D.7055 ] [140])
        (reg:DI 0 ax [300])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (nil)))
(insn 253 252 254 11 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.7057 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 D.7055 ] [140])
                    (reg/f:DI 2 cx [orig:138 D.7057 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:102 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:140 D.7055 ] [140])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:138 D.7057 ] [138])
            (nil))))
(insn 254 253 255 11 (set (reg:SI 0 ax [orig:142 D.7058 ] [142])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:141 D.7057 ] [141])
                (const_int 4 [0x4])) [0 _96->n_nvp+0 S4 A32])) mABM.c:102 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:141 D.7057 ] [141])
        (nil)))
(insn 255 254 256 11 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:142 D.7058 ] [142])) mABM.c:102 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:142 D.7058 ] [142])
        (nil)))
(call_insn 256 255 257 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:102 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 257 256 258 11 (set (reg/f:DI 0 ax [orig:143 D.7060 ] [143])
        (reg:DI 0 ax)) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 258 257 259 11 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:137 D.7057 ] [137])
                (const_int 16 [0x10])) [0 _92->time+0 S8 A128])
        (reg/f:DI 0 ax [orig:143 D.7060 ] [143])) mABM.c:102 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:143 D.7060 ] [143])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:137 D.7057 ] [137])
            (nil))))
(insn 259 258 519 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:103 89 {*movsi_internal}
     (nil))
(jump_insn 519 259 520 11 (set (pc)
        (label_ref 297)) mABM.c:103 650 {jump}
     (nil)
 -> 297)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 520 519 311)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 302 303 304 305 306 307 308 309 310 311
(code_label 311 520 262 12 30 "" [1 uses])
(note 262 311 263 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 12 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 264 263 265 12 (set (reg/f:DI 2 cx [orig:149 D.7057 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [302]) [0 *f_10(D)+0 S8 A64])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [302])
        (nil)))
(insn 265 264 266 12 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (nil))
(insn 266 265 267 12 (set (reg:DI 1 dx [orig:150 D.7055 ] [150])
        (sign_extend:DI (reg:SI 0 ax [303]))) mABM.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [303])
        (nil)))
(insn 267 266 268 12 (set (reg:DI 0 ax [304])
        (reg:DI 1 dx [orig:150 D.7055 ] [150])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 268 267 269 12 (parallel [
            (set (reg:DI 0 ax [304])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (nil))
(insn 269 268 270 12 (parallel [
            (set (reg:DI 0 ax [304])
                (plus:DI (reg:DI 0 ax [304])
                    (reg:DI 1 dx [orig:150 D.7055 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:150 D.7055 ] [150])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:150 D.7055 ] [150])
                (const_int 5 [0x5]))
            (nil))))
(insn 270 269 271 12 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 271 270 272 12 (set (reg:DI 0 ax [304])
        (reg:DI 0 ax [305])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [305])
        (nil)))
(insn 272 271 273 12 (set (reg:DI 0 ax [orig:151 D.7055 ] [151])
        (reg:DI 0 ax [304])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 273 272 274 12 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.7057 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.7055 ] [151])
                    (reg/f:DI 2 cx [orig:149 D.7057 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:151 D.7055 ] [151])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:149 D.7057 ] [149])
            (nil))))
(insn 274 273 275 12 (set (reg/f:DI 0 ax [orig:153 D.7060 ] [153])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:152 D.7057 ] [152])
                (const_int 16 [0x10])) [0 _108->time+0 S8 A128])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:152 D.7057 ] [152])
        (nil)))
(insn 275 274 276 12 (set (reg:SI 1 dx [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (nil))
(insn 276 275 277 12 (set (reg:DI 1 dx [orig:154 D.7055 ] [154])
        (sign_extend:DI (reg:SI 1 dx [306]))) mABM.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [306])
        (nil)))
(insn 277 276 278 12 (parallel [
            (set (reg:DI 1 dx [orig:155 D.7055 ] [155])
                (ashift:DI (reg:DI 1 dx [orig:154 D.7055 ] [154])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:154 D.7055 ] [154])
        (nil)))
(insn 278 277 279 12 (parallel [
            (set (reg/f:DI 2 cx [orig:156 D.7060 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:153 D.7060 ] [153])
                    (reg:DI 1 dx [orig:155 D.7055 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:155 D.7055 ] [155])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.7060 ] [153])
            (nil))))
(insn 279 278 280 12 (set (reg:SI 0 ax [307])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (nil))
(insn 280 279 281 12 (set (reg:DI 1 dx [orig:157 D.7055 ] [157])
        (sign_extend:DI (reg:SI 0 ax [307]))) mABM.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [307])
        (nil)))
(insn 281 280 282 12 (set (reg:DI 0 ax [308])
        (reg:DI 1 dx [orig:157 D.7055 ] [157])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 282 281 283 12 (parallel [
            (set (reg:DI 0 ax [308])
                (ashift:DI (reg:DI 0 ax [308])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (nil))
(insn 283 282 284 12 (parallel [
            (set (reg:DI 0 ax [308])
                (plus:DI (reg:DI 0 ax [308])
                    (reg:DI 1 dx [orig:157 D.7055 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:157 D.7055 ] [157])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:157 D.7055 ] [157])
                (const_int 5 [0x5]))
            (nil))))
(insn 284 283 285 12 (parallel [
            (set (reg:DI 0 ax [309])
                (ashift:DI (reg:DI 0 ax [308])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [308])
        (nil)))
(insn 285 284 286 12 (set (reg:DI 0 ax [308])
        (reg:DI 0 ax [309])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [309])
        (nil)))
(insn 286 285 287 12 (set (reg:DI 1 dx [orig:158 D.7055 ] [158])
        (reg:DI 0 ax [308])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [308])
        (nil)))
(insn 287 286 288 12 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 288 287 289 12 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.7057 ] [159])
                (plus:DI (reg/f:DI 0 ax [310])
                    (reg:DI 1 dx [orig:158 D.7055 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [310])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:158 D.7055 ] [158])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:158 D.7055 ] [158]))
                (nil)))))
(insn 289 288 290 12 (set (reg/f:DI 0 ax [orig:160 D.7060 ] [160])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:159 D.7057 ] [159])
                (const_int 16 [0x10])) [0 _115->time+0 S8 A128])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.7057 ] [159])
        (nil)))
(insn 290 289 291 12 (set (reg:SI 1 dx [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (nil))
(insn 291 290 292 12 (set (reg:DI 1 dx [orig:161 D.7055 ] [161])
        (sign_extend:DI (reg:SI 1 dx [311]))) mABM.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [311])
        (nil)))
(insn 292 291 293 12 (parallel [
            (set (reg:DI 1 dx [orig:162 D.7055 ] [162])
                (ashift:DI (reg:DI 1 dx [orig:161 D.7055 ] [161])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:161 D.7055 ] [161])
        (nil)))
(insn 293 292 294 12 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.7060 ] [163])
                (plus:DI (reg/f:DI 0 ax [orig:160 D.7060 ] [160])
                    (reg:DI 1 dx [orig:162 D.7055 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:162 D.7055 ] [162])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:160 D.7060 ] [160])
            (nil))))
(insn 294 293 295 12 (set (reg:XF 0 ax [orig:164 D.7061 ] [164])
        (mem:XF (reg/f:DI 0 ax [orig:163 D.7060 ] [163]) [0 *_119+0 S16 A128])) mABM.c:103 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:163 D.7060 ] [163])
        (nil)))
(insn 295 294 296 12 (set (mem:XF (reg/f:DI 2 cx [orig:156 D.7060 ] [156]) [0 *_112+0 S16 A128])
        (reg:XF 0 ax [orig:164 D.7061 ] [164])) mABM.c:103 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:164 D.7061 ] [164])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:156 D.7060 ] [156])
            (nil))))
(insn 296 295 297 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 146 147 148 312 313 314 315
(code_label 297 296 298 13 29 "" [1 uses])
(note 298 297 299 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 300 13 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 300 299 301 13 (set (reg/f:DI 2 cx [orig:144 D.7057 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [312]) [0 *f_10(D)+0 S8 A64])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [312])
        (nil)))
(insn 301 300 302 13 (set (reg:SI 0 ax [313])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (nil))
(insn 302 301 303 13 (set (reg:DI 1 dx [orig:145 D.7055 ] [145])
        (sign_extend:DI (reg:SI 0 ax [313]))) mABM.c:103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [313])
        (nil)))
(insn 303 302 304 13 (set (reg:DI 0 ax [314])
        (reg:DI 1 dx [orig:145 D.7055 ] [145])) mABM.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 304 303 305 13 (parallel [
            (set (reg:DI 0 ax [314])
                (ashift:DI (reg:DI 0 ax [314])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (nil))
(insn 305 304 306 13 (parallel [
            (set (reg:DI 0 ax [314])
                (plus:DI (reg:DI 0 ax [314])
                    (reg:DI 1 dx [orig:145 D.7055 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:145 D.7055 ] [145])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:145 D.7055 ] [145])
                (const_int 5 [0x5]))
            (nil))))
(insn 306 305 307 13 (parallel [
            (set (reg:DI 0 ax [315])
                (ashift:DI (reg:DI 0 ax [314])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [314])
        (nil)))
(insn 307 306 308 13 (set (reg:DI 0 ax [314])
        (reg:DI 0 ax [315])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [315])
        (nil)))
(insn 308 307 309 13 (set (reg:DI 0 ax [orig:146 D.7055 ] [146])
        (reg:DI 0 ax [314])) mABM.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [314])
        (nil)))
(insn 309 308 310 13 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.7057 ] [147])
                (plus:DI (reg:DI 0 ax [orig:146 D.7055 ] [146])
                    (reg/f:DI 2 cx [orig:144 D.7057 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:103 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:146 D.7055 ] [146])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:144 D.7057 ] [144])
            (nil))))
(insn 310 309 312 13 (set (reg:SI 0 ax [orig:148 D.7058 ] [148])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:147 D.7057 ] [147])
                (const_int 4 [0x4])) [0 _103->n_nvp+0 S4 A32])) mABM.c:103 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:147 D.7057 ] [147])
        (nil)))
(insn 312 310 313 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:148 D.7058 ] [148])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) mABM.c:103 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:148 D.7058 ] [148])
        (nil)))
(jump_insn 313 312 314 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 311)
            (pc))) mABM.c:103 612 {*jcc_1}
     (nil)
 -> 311)
;;  succ:       12
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 165 166 167 168 169 170 171 172 173 174 175 316 317 318 319 320 321 322 323
(note 314 313 315 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 14 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 316 315 317 14 (set (reg/f:DI 2 cx [orig:165 D.7057 ] [165])
        (mem/f:DI (reg/f:DI 0 ax [316]) [0 *f_10(D)+0 S8 A64])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [316])
        (nil)))
(insn 317 316 318 14 (set (reg:SI 0 ax [317])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:105 89 {*movsi_internal}
     (nil))
(insn 318 317 319 14 (set (reg:DI 1 dx [orig:166 D.7055 ] [166])
        (sign_extend:DI (reg:SI 0 ax [317]))) mABM.c:105 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [317])
        (nil)))
(insn 319 318 320 14 (set (reg:DI 0 ax [318])
        (reg:DI 1 dx [orig:166 D.7055 ] [166])) mABM.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 320 319 321 14 (parallel [
            (set (reg:DI 0 ax [318])
                (ashift:DI (reg:DI 0 ax [318])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 513 {*ashldi3_1}
     (nil))
(insn 321 320 322 14 (parallel [
            (set (reg:DI 0 ax [318])
                (plus:DI (reg:DI 0 ax [318])
                    (reg:DI 1 dx [orig:166 D.7055 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:166 D.7055 ] [166])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.7055 ] [166])
                (const_int 5 [0x5]))
            (nil))))
(insn 322 321 323 14 (parallel [
            (set (reg:DI 0 ax [319])
                (ashift:DI (reg:DI 0 ax [318])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [318])
        (nil)))
(insn 323 322 324 14 (set (reg:DI 0 ax [318])
        (reg:DI 0 ax [319])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [319])
        (nil)))
(insn 324 323 325 14 (set (reg:DI 0 ax [orig:167 D.7055 ] [167])
        (reg:DI 0 ax [318])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [318])
        (nil)))
(insn 325 324 326 14 (parallel [
            (set (reg/f:DI 3 bx [orig:168 D.7057 ] [168])
                (plus:DI (reg/f:DI 2 cx [orig:165 D.7057 ] [165])
                    (reg:DI 0 ax [orig:167 D.7055 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:167 D.7055 ] [167])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:165 D.7057 ] [165])
            (nil))))
(insn 326 325 327 14 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 327 326 328 14 (set (reg/f:DI 2 cx [orig:169 D.7057 ] [169])
        (mem/f:DI (reg/f:DI 0 ax [320]) [0 *f_10(D)+0 S8 A64])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [320])
        (nil)))
(insn 328 327 329 14 (set (reg:SI 0 ax [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:105 89 {*movsi_internal}
     (nil))
(insn 329 328 330 14 (set (reg:DI 1 dx [orig:170 D.7055 ] [170])
        (sign_extend:DI (reg:SI 0 ax [321]))) mABM.c:105 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [321])
        (nil)))
(insn 330 329 331 14 (set (reg:DI 0 ax [322])
        (reg:DI 1 dx [orig:170 D.7055 ] [170])) mABM.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 331 330 332 14 (parallel [
            (set (reg:DI 0 ax [322])
                (ashift:DI (reg:DI 0 ax [322])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 513 {*ashldi3_1}
     (nil))
(insn 332 331 333 14 (parallel [
            (set (reg:DI 0 ax [322])
                (plus:DI (reg:DI 0 ax [322])
                    (reg:DI 1 dx [orig:170 D.7055 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:170 D.7055 ] [170])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:170 D.7055 ] [170])
                (const_int 5 [0x5]))
            (nil))))
(insn 333 332 334 14 (parallel [
            (set (reg:DI 0 ax [323])
                (ashift:DI (reg:DI 0 ax [322])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [322])
        (nil)))
(insn 334 333 335 14 (set (reg:DI 0 ax [322])
        (reg:DI 0 ax [323])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [323])
        (nil)))
(insn 335 334 336 14 (set (reg:DI 0 ax [orig:171 D.7055 ] [171])
        (reg:DI 0 ax [322])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [322])
        (nil)))
(insn 336 335 337 14 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.7057 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 D.7055 ] [171])
                    (reg/f:DI 2 cx [orig:169 D.7057 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:171 D.7055 ] [171])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:169 D.7057 ] [169])
            (nil))))
(insn 337 336 338 14 (set (reg:SI 0 ax [orig:173 D.7058 ] [173])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:172 D.7057 ] [172])
                (const_int 4 [0x4])) [0 _129->n_nvp+0 S4 A32])) mABM.c:105 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:172 D.7057 ] [172])
        (nil)))
(insn 338 337 339 14 (parallel [
            (set (reg:SI 0 ax [orig:174 D.7058 ] [174])
                (plus:SI (reg:SI 0 ax [orig:173 D.7058 ] [173])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:105 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:173 D.7058 ] [173])
        (nil)))
(insn 339 338 340 14 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:174 D.7058 ] [174])) mABM.c:105 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:174 D.7058 ] [174])
        (nil)))
(call_insn 340 339 341 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:105 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 341 340 342 14 (set (reg/f:DI 0 ax [orig:175 D.7060 ] [175])
        (reg:DI 0 ax)) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 342 341 343 14 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:168 D.7057 ] [168])
                (const_int 24 [0x18])) [0 _125->vel+0 S8 A64])
        (reg/f:DI 0 ax [orig:175 D.7060 ] [175])) mABM.c:105 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:175 D.7060 ] [175])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:168 D.7057 ] [168])
            (nil))))
(insn 343 342 521 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:106 89 {*movsi_internal}
     (nil))
(jump_insn 521 343 522 14 (set (pc)
        (label_ref 381)) mABM.c:106 650 {jump}
     (nil)
 -> 381)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 522 521 396)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 324 325 326 327 328 329 330 331 332 333
(code_label 396 522 346 15 32 "" [1 uses])
(note 346 396 347 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 15 (set (reg/f:DI 0 ax [324])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 348 347 349 15 (set (reg/f:DI 2 cx [orig:182 D.7057 ] [182])
        (mem/f:DI (reg/f:DI 0 ax [324]) [0 *f_10(D)+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [324])
        (nil)))
(insn 349 348 350 15 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (nil))
(insn 350 349 351 15 (set (reg:DI 1 dx [orig:183 D.7055 ] [183])
        (sign_extend:DI (reg:SI 0 ax [325]))) mABM.c:106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [325])
        (nil)))
(insn 351 350 352 15 (set (reg:DI 0 ax [326])
        (reg:DI 1 dx [orig:183 D.7055 ] [183])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 352 351 353 15 (parallel [
            (set (reg:DI 0 ax [326])
                (ashift:DI (reg:DI 0 ax [326])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (nil))
(insn 353 352 354 15 (parallel [
            (set (reg:DI 0 ax [326])
                (plus:DI (reg:DI 0 ax [326])
                    (reg:DI 1 dx [orig:183 D.7055 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:183 D.7055 ] [183])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:183 D.7055 ] [183])
                (const_int 5 [0x5]))
            (nil))))
(insn 354 353 355 15 (parallel [
            (set (reg:DI 0 ax [327])
                (ashift:DI (reg:DI 0 ax [326])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [326])
        (nil)))
(insn 355 354 356 15 (set (reg:DI 0 ax [326])
        (reg:DI 0 ax [327])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [327])
        (nil)))
(insn 356 355 357 15 (set (reg:DI 0 ax [orig:184 D.7055 ] [184])
        (reg:DI 0 ax [326])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [326])
        (nil)))
(insn 357 356 358 15 (parallel [
            (set (reg/f:DI 0 ax [orig:185 D.7057 ] [185])
                (plus:DI (reg:DI 0 ax [orig:184 D.7055 ] [184])
                    (reg/f:DI 2 cx [orig:182 D.7057 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:184 D.7055 ] [184])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:182 D.7057 ] [182])
            (nil))))
(insn 358 357 359 15 (set (reg/f:DI 0 ax [orig:186 D.7060 ] [186])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:185 D.7057 ] [185])
                (const_int 24 [0x18])) [0 _143->vel+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:185 D.7057 ] [185])
        (nil)))
(insn 359 358 360 15 (set (reg:SI 1 dx [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (nil))
(insn 360 359 361 15 (set (reg:DI 1 dx [orig:187 D.7055 ] [187])
        (sign_extend:DI (reg:SI 1 dx [328]))) mABM.c:106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [328])
        (nil)))
(insn 361 360 362 15 (parallel [
            (set (reg:DI 1 dx [orig:188 D.7055 ] [188])
                (ashift:DI (reg:DI 1 dx [orig:187 D.7055 ] [187])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:187 D.7055 ] [187])
        (nil)))
(insn 362 361 363 15 (parallel [
            (set (reg/f:DI 2 cx [orig:189 D.7060 ] [189])
                (plus:DI (reg/f:DI 0 ax [orig:186 D.7060 ] [186])
                    (reg:DI 1 dx [orig:188 D.7055 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:188 D.7055 ] [188])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:186 D.7060 ] [186])
            (nil))))
(insn 363 362 364 15 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (nil))
(insn 364 363 365 15 (set (reg:DI 1 dx [orig:190 D.7055 ] [190])
        (sign_extend:DI (reg:SI 0 ax [329]))) mABM.c:106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [329])
        (nil)))
(insn 365 364 366 15 (set (reg:DI 0 ax [330])
        (reg:DI 1 dx [orig:190 D.7055 ] [190])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 366 365 367 15 (parallel [
            (set (reg:DI 0 ax [330])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (nil))
(insn 367 366 368 15 (parallel [
            (set (reg:DI 0 ax [330])
                (plus:DI (reg:DI 0 ax [330])
                    (reg:DI 1 dx [orig:190 D.7055 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:190 D.7055 ] [190])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.7055 ] [190])
                (const_int 5 [0x5]))
            (nil))))
(insn 368 367 369 15 (parallel [
            (set (reg:DI 0 ax [331])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [330])
        (nil)))
(insn 369 368 370 15 (set (reg:DI 0 ax [330])
        (reg:DI 0 ax [331])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [331])
        (nil)))
(insn 370 369 371 15 (set (reg:DI 1 dx [orig:191 D.7055 ] [191])
        (reg:DI 0 ax [330])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [330])
        (nil)))
(insn 371 370 372 15 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 372 371 373 15 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.7057 ] [192])
                (plus:DI (reg/f:DI 0 ax [332])
                    (reg:DI 1 dx [orig:191 D.7055 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [332])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:191 D.7055 ] [191])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:191 D.7055 ] [191]))
                (nil)))))
(insn 373 372 374 15 (set (reg/f:DI 0 ax [orig:193 D.7060 ] [193])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:192 D.7057 ] [192])
                (const_int 24 [0x18])) [0 _150->vel+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:192 D.7057 ] [192])
        (nil)))
(insn 374 373 375 15 (set (reg:SI 1 dx [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (nil))
(insn 375 374 376 15 (set (reg:DI 1 dx [orig:194 D.7055 ] [194])
        (sign_extend:DI (reg:SI 1 dx [333]))) mABM.c:106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [333])
        (nil)))
(insn 376 375 377 15 (parallel [
            (set (reg:DI 1 dx [orig:195 D.7055 ] [195])
                (ashift:DI (reg:DI 1 dx [orig:194 D.7055 ] [194])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:194 D.7055 ] [194])
        (nil)))
(insn 377 376 378 15 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.7060 ] [196])
                (plus:DI (reg/f:DI 0 ax [orig:193 D.7060 ] [193])
                    (reg:DI 1 dx [orig:195 D.7055 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:195 D.7055 ] [195])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:193 D.7060 ] [193])
            (nil))))
(insn 378 377 379 15 (set (reg:XF 0 ax [orig:197 D.7061 ] [197])
        (mem:XF (reg/f:DI 0 ax [orig:196 D.7060 ] [196]) [0 *_154+0 S16 A128])) mABM.c:106 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:196 D.7060 ] [196])
        (nil)))
(insn 379 378 380 15 (set (mem:XF (reg/f:DI 2 cx [orig:189 D.7060 ] [189]) [0 *_147+0 S16 A128])
        (reg:XF 0 ax [orig:197 D.7061 ] [197])) mABM.c:106 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:197 D.7061 ] [197])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:189 D.7060 ] [189])
            (nil))))
(insn 380 379 381 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 273 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 176 177 178 179 180 181 334 335 336 337
(code_label 381 380 382 16 31 "" [1 uses])
(note 382 381 383 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 16 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 384 383 385 16 (set (reg/f:DI 2 cx [orig:176 D.7057 ] [176])
        (mem/f:DI (reg/f:DI 0 ax [334]) [0 *f_10(D)+0 S8 A64])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [334])
        (nil)))
(insn 385 384 386 16 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (nil))
(insn 386 385 387 16 (set (reg:DI 1 dx [orig:177 D.7055 ] [177])
        (sign_extend:DI (reg:SI 0 ax [335]))) mABM.c:106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [335])
        (nil)))
(insn 387 386 388 16 (set (reg:DI 0 ax [336])
        (reg:DI 1 dx [orig:177 D.7055 ] [177])) mABM.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 388 387 389 16 (parallel [
            (set (reg:DI 0 ax [336])
                (ashift:DI (reg:DI 0 ax [336])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (nil))
(insn 389 388 390 16 (parallel [
            (set (reg:DI 0 ax [336])
                (plus:DI (reg:DI 0 ax [336])
                    (reg:DI 1 dx [orig:177 D.7055 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:177 D.7055 ] [177])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:177 D.7055 ] [177])
                (const_int 5 [0x5]))
            (nil))))
(insn 390 389 391 16 (parallel [
            (set (reg:DI 0 ax [337])
                (ashift:DI (reg:DI 0 ax [336])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [336])
        (nil)))
(insn 391 390 392 16 (set (reg:DI 0 ax [336])
        (reg:DI 0 ax [337])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [337])
        (nil)))
(insn 392 391 393 16 (set (reg:DI 0 ax [orig:178 D.7055 ] [178])
        (reg:DI 0 ax [336])) mABM.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [336])
        (nil)))
(insn 393 392 394 16 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.7057 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.7055 ] [178])
                    (reg/f:DI 2 cx [orig:176 D.7057 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:178 D.7055 ] [178])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:176 D.7057 ] [176])
            (nil))))
(insn 394 393 395 16 (set (reg:SI 0 ax [orig:180 D.7058 ] [180])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:179 D.7057 ] [179])
                (const_int 4 [0x4])) [0 _137->n_nvp+0 S4 A32])) mABM.c:106 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:179 D.7057 ] [179])
        (nil)))
(insn 395 394 397 16 (parallel [
            (set (reg:SI 0 ax [orig:181 D.7058 ] [181])
                (plus:SI (reg:SI 0 ax [orig:180 D.7058 ] [180])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:106 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:180 D.7058 ] [180])
        (nil)))
(insn 397 395 398 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:181 D.7058 ] [181])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) mABM.c:106 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:181 D.7058 ] [181])
        (nil)))
(jump_insn 398 397 399 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 396)
            (pc))) mABM.c:106 612 {*jcc_1}
     (nil)
 -> 396)
;;  succ:       15
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369
(note 399 398 400 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 17 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:108 87 {*movdi_internal_rex64}
     (nil))
(insn 401 400 402 17 (set (reg/f:DI 2 cx [orig:198 D.7057 ] [198])
        (mem/f:DI (reg/f:DI 0 ax [338]) [0 *f_10(D)+0 S8 A64])) mABM.c:108 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [338])
        (nil)))
(insn 402 401 403 17 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:108 89 {*movsi_internal}
     (nil))
(insn 403 402 404 17 (set (reg:DI 1 dx [orig:199 D.7055 ] [199])
        (sign_extend:DI (reg:SI 0 ax [339]))) mABM.c:108 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [339])
        (nil)))
(insn 404 403 405 17 (set (reg:DI 0 ax [340])
        (reg:DI 1 dx [orig:199 D.7055 ] [199])) mABM.c:108 87 {*movdi_internal_rex64}
     (nil))
(insn 405 404 406 17 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 513 {*ashldi3_1}
     (nil))
(insn 406 405 407 17 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg:DI 0 ax [340])
                    (reg:DI 1 dx [orig:199 D.7055 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:199 D.7055 ] [199])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.7055 ] [199])
                (const_int 5 [0x5]))
            (nil))))
(insn 407 406 408 17 (parallel [
            (set (reg:DI 0 ax [341])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [340])
        (nil)))
(insn 408 407 409 17 (set (reg:DI 0 ax [340])
        (reg:DI 0 ax [341])) mABM.c:108 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [341])
        (nil)))
(insn 409 408 410 17 (set (reg:DI 0 ax [orig:200 D.7055 ] [200])
        (reg:DI 0 ax [340])) mABM.c:108 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [340])
        (nil)))
(insn 410 409 411 17 (parallel [
            (set (reg/f:DI 2 cx [orig:201 D.7057 ] [201])
                (plus:DI (reg/f:DI 2 cx [orig:198 D.7057 ] [198])
                    (reg:DI 0 ax [orig:200 D.7055 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:200 D.7055 ] [200])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:198 D.7057 ] [198])
            (nil))))
(insn 411 410 412 17 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:108 89 {*movsi_internal}
     (nil))
(insn 412 411 413 17 (set (reg:DI 1 dx [orig:202 D.7055 ] [202])
        (sign_extend:DI (reg:SI 0 ax [342]))) mABM.c:108 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [342])
        (nil)))
(insn 413 412 414 17 (set (reg:DI 0 ax [343])
        (reg:DI 1 dx [orig:202 D.7055 ] [202])) mABM.c:108 87 {*movdi_internal_rex64}
     (nil))
(insn 414 413 415 17 (parallel [
            (set (reg:DI 0 ax [343])
                (ashift:DI (reg:DI 0 ax [343])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 513 {*ashldi3_1}
     (nil))
(insn 415 414 416 17 (parallel [
            (set (reg:DI 0 ax [343])
                (plus:DI (reg:DI 0 ax [343])
                    (reg:DI 1 dx [orig:202 D.7055 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:202 D.7055 ] [202])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:202 D.7055 ] [202])
                (const_int 5 [0x5]))
            (nil))))
(insn 416 415 417 17 (parallel [
            (set (reg:DI 0 ax [344])
                (ashift:DI (reg:DI 0 ax [343])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [343])
        (nil)))
(insn 417 416 418 17 (set (reg:DI 0 ax [343])
        (reg:DI 0 ax [344])) mABM.c:108 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [344])
        (nil)))
(insn 418 417 419 17 (set (reg:DI 1 dx [orig:203 D.7055 ] [203])
        (reg:DI 0 ax [343])) mABM.c:108 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [343])
        (nil)))
(insn 419 418 420 17 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:108 87 {*movdi_internal_rex64}
     (nil))
(insn 420 419 421 17 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.7057 ] [204])
                (plus:DI (reg/f:DI 0 ax [345])
                    (reg:DI 1 dx [orig:203 D.7055 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:108 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [345])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:203 D.7055 ] [203])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:203 D.7055 ] [203]))
                (nil)))))
(insn 421 420 422 17 (set (reg:SI 0 ax [orig:205 D.7058 ] [205])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:204 D.7057 ] [204])
                (const_int 44 [0x2c])) [0 _163->st_indx+0 S4 A32])) mABM.c:108 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:204 D.7057 ] [204])
        (nil)))
(insn 422 421 423 17 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:201 D.7057 ] [201])
                (const_int 44 [0x2c])) [0 _160->st_indx+0 S4 A32])
        (reg:SI 0 ax [orig:205 D.7058 ] [205])) mABM.c:108 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:205 D.7058 ] [205])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:201 D.7057 ] [201])
            (nil))))
(insn 423 422 424 17 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:110 87 {*movdi_internal_rex64}
     (nil))
(insn 424 423 425 17 (set (reg/f:DI 2 cx [orig:206 D.7057 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [346]) [0 *f_10(D)+0 S8 A64])) mABM.c:110 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [346])
        (nil)))
(insn 425 424 426 17 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:110 89 {*movsi_internal}
     (nil))
(insn 426 425 427 17 (set (reg:DI 1 dx [orig:207 D.7055 ] [207])
        (sign_extend:DI (reg:SI 0 ax [347]))) mABM.c:110 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [347])
        (nil)))
(insn 427 426 428 17 (set (reg:DI 0 ax [348])
        (reg:DI 1 dx [orig:207 D.7055 ] [207])) mABM.c:110 87 {*movdi_internal_rex64}
     (nil))
(insn 428 427 429 17 (parallel [
            (set (reg:DI 0 ax [348])
                (ashift:DI (reg:DI 0 ax [348])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 513 {*ashldi3_1}
     (nil))
(insn 429 428 430 17 (parallel [
            (set (reg:DI 0 ax [348])
                (plus:DI (reg:DI 0 ax [348])
                    (reg:DI 1 dx [orig:207 D.7055 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:207 D.7055 ] [207])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:207 D.7055 ] [207])
                (const_int 5 [0x5]))
            (nil))))
(insn 430 429 431 17 (parallel [
            (set (reg:DI 0 ax [349])
                (ashift:DI (reg:DI 0 ax [348])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [348])
        (nil)))
(insn 431 430 432 17 (set (reg:DI 0 ax [348])
        (reg:DI 0 ax [349])) mABM.c:110 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [349])
        (nil)))
(insn 432 431 433 17 (set (reg:DI 0 ax [orig:208 D.7055 ] [208])
        (reg:DI 0 ax [348])) mABM.c:110 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [348])
        (nil)))
(insn 433 432 434 17 (parallel [
            (set (reg/f:DI 2 cx [orig:209 D.7057 ] [209])
                (plus:DI (reg/f:DI 2 cx [orig:206 D.7057 ] [206])
                    (reg:DI 0 ax [orig:208 D.7055 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:208 D.7055 ] [208])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:206 D.7057 ] [206])
            (nil))))
(insn 434 433 435 17 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:110 89 {*movsi_internal}
     (nil))
(insn 435 434 436 17 (set (reg:DI 1 dx [orig:210 D.7055 ] [210])
        (sign_extend:DI (reg:SI 0 ax [350]))) mABM.c:110 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [350])
        (nil)))
(insn 436 435 437 17 (set (reg:DI 0 ax [351])
        (reg:DI 1 dx [orig:210 D.7055 ] [210])) mABM.c:110 87 {*movdi_internal_rex64}
     (nil))
(insn 437 436 438 17 (parallel [
            (set (reg:DI 0 ax [351])
                (ashift:DI (reg:DI 0 ax [351])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 513 {*ashldi3_1}
     (nil))
(insn 438 437 439 17 (parallel [
            (set (reg:DI 0 ax [351])
                (plus:DI (reg:DI 0 ax [351])
                    (reg:DI 1 dx [orig:210 D.7055 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:210 D.7055 ] [210])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:210 D.7055 ] [210])
                (const_int 5 [0x5]))
            (nil))))
(insn 439 438 440 17 (parallel [
            (set (reg:DI 0 ax [352])
                (ashift:DI (reg:DI 0 ax [351])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [351])
        (nil)))
(insn 440 439 441 17 (set (reg:DI 0 ax [351])
        (reg:DI 0 ax [352])) mABM.c:110 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [352])
        (nil)))
(insn 441 440 442 17 (set (reg:DI 1 dx [orig:211 D.7055 ] [211])
        (reg:DI 0 ax [351])) mABM.c:110 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [351])
        (nil)))
(insn 442 441 443 17 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:110 87 {*movdi_internal_rex64}
     (nil))
(insn 443 442 444 17 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.7057 ] [212])
                (plus:DI (reg/f:DI 0 ax [353])
                    (reg:DI 1 dx [orig:211 D.7055 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:110 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [353])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:211 D.7055 ] [211])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:211 D.7055 ] [211]))
                (nil)))))
(insn 444 443 445 17 (set (reg:SI 0 ax [orig:213 D.7058 ] [213])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:212 D.7057 ] [212])
                (const_int 112 [0x70])) [0 _171->bound+0 S4 A128])) mABM.c:110 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:212 D.7057 ] [212])
        (nil)))
(insn 445 444 446 17 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:209 D.7057 ] [209])
                (const_int 112 [0x70])) [0 _168->bound+0 S4 A128])
        (reg:SI 0 ax [orig:213 D.7058 ] [213])) mABM.c:110 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:213 D.7058 ] [213])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:209 D.7057 ] [209])
            (nil))))
(insn 446 445 447 17 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:111 87 {*movdi_internal_rex64}
     (nil))
(insn 447 446 448 17 (set (reg/f:DI 2 cx [orig:214 D.7057 ] [214])
        (mem/f:DI (reg/f:DI 0 ax [354]) [0 *f_10(D)+0 S8 A64])) mABM.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [354])
        (nil)))
(insn 448 447 449 17 (set (reg:SI 0 ax [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:111 89 {*movsi_internal}
     (nil))
(insn 449 448 450 17 (set (reg:DI 1 dx [orig:215 D.7055 ] [215])
        (sign_extend:DI (reg:SI 0 ax [355]))) mABM.c:111 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [355])
        (nil)))
(insn 450 449 451 17 (set (reg:DI 0 ax [356])
        (reg:DI 1 dx [orig:215 D.7055 ] [215])) mABM.c:111 87 {*movdi_internal_rex64}
     (nil))
(insn 451 450 452 17 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [356])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 513 {*ashldi3_1}
     (nil))
(insn 452 451 453 17 (parallel [
            (set (reg:DI 0 ax [356])
                (plus:DI (reg:DI 0 ax [356])
                    (reg:DI 1 dx [orig:215 D.7055 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:215 D.7055 ] [215])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:215 D.7055 ] [215])
                (const_int 5 [0x5]))
            (nil))))
(insn 453 452 454 17 (parallel [
            (set (reg:DI 0 ax [357])
                (ashift:DI (reg:DI 0 ax [356])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [356])
        (nil)))
(insn 454 453 455 17 (set (reg:DI 0 ax [356])
        (reg:DI 0 ax [357])) mABM.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [357])
        (nil)))
(insn 455 454 456 17 (set (reg:DI 0 ax [orig:216 D.7055 ] [216])
        (reg:DI 0 ax [356])) mABM.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [356])
        (nil)))
(insn 456 455 457 17 (parallel [
            (set (reg/f:DI 2 cx [orig:217 D.7057 ] [217])
                (plus:DI (reg/f:DI 2 cx [orig:214 D.7057 ] [214])
                    (reg:DI 0 ax [orig:216 D.7055 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:216 D.7055 ] [216])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:214 D.7057 ] [214])
            (nil))))
(insn 457 456 458 17 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:111 89 {*movsi_internal}
     (nil))
(insn 458 457 459 17 (set (reg:DI 1 dx [orig:218 D.7055 ] [218])
        (sign_extend:DI (reg:SI 0 ax [358]))) mABM.c:111 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [358])
        (nil)))
(insn 459 458 460 17 (set (reg:DI 0 ax [359])
        (reg:DI 1 dx [orig:218 D.7055 ] [218])) mABM.c:111 87 {*movdi_internal_rex64}
     (nil))
(insn 460 459 461 17 (parallel [
            (set (reg:DI 0 ax [359])
                (ashift:DI (reg:DI 0 ax [359])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 513 {*ashldi3_1}
     (nil))
(insn 461 460 462 17 (parallel [
            (set (reg:DI 0 ax [359])
                (plus:DI (reg:DI 0 ax [359])
                    (reg:DI 1 dx [orig:218 D.7055 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:218 D.7055 ] [218])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:218 D.7055 ] [218])
                (const_int 5 [0x5]))
            (nil))))
(insn 462 461 463 17 (parallel [
            (set (reg:DI 0 ax [360])
                (ashift:DI (reg:DI 0 ax [359])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [359])
        (nil)))
(insn 463 462 464 17 (set (reg:DI 0 ax [359])
        (reg:DI 0 ax [360])) mABM.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [360])
        (nil)))
(insn 464 463 465 17 (set (reg:DI 1 dx [orig:219 D.7055 ] [219])
        (reg:DI 0 ax [359])) mABM.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [359])
        (nil)))
(insn 465 464 466 17 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:111 87 {*movdi_internal_rex64}
     (nil))
(insn 466 465 467 17 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.7057 ] [220])
                (plus:DI (reg/f:DI 0 ax [361])
                    (reg:DI 1 dx [orig:219 D.7055 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:111 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [361])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:219 D.7055 ] [219])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:219 D.7055 ] [219]))
                (nil)))))
(insn 467 466 468 17 (set (reg:SI 0 ax [orig:221 D.7058 ] [221])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:220 D.7057 ] [220])
                (const_int 116 [0x74])) [0 _179->bound+4 S4 A32])) mABM.c:111 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:220 D.7057 ] [220])
        (nil)))
(insn 468 467 469 17 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:217 D.7057 ] [217])
                (const_int 116 [0x74])) [0 _176->bound+4 S4 A32])
        (reg:SI 0 ax [orig:221 D.7058 ] [221])) mABM.c:111 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:221 D.7058 ] [221])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:217 D.7057 ] [217])
            (nil))))
(insn 469 468 470 17 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 470 469 471 17 (set (reg/f:DI 2 cx [orig:222 D.7057 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [362]) [0 *f_10(D)+0 S8 A64])) mABM.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [362])
        (nil)))
(insn 471 470 472 17 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:113 89 {*movsi_internal}
     (nil))
(insn 472 471 473 17 (set (reg:DI 1 dx [orig:223 D.7055 ] [223])
        (sign_extend:DI (reg:SI 0 ax [363]))) mABM.c:113 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [363])
        (nil)))
(insn 473 472 474 17 (set (reg:DI 0 ax [364])
        (reg:DI 1 dx [orig:223 D.7055 ] [223])) mABM.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 474 473 475 17 (parallel [
            (set (reg:DI 0 ax [364])
                (ashift:DI (reg:DI 0 ax [364])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 513 {*ashldi3_1}
     (nil))
(insn 475 474 476 17 (parallel [
            (set (reg:DI 0 ax [364])
                (plus:DI (reg:DI 0 ax [364])
                    (reg:DI 1 dx [orig:223 D.7055 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:223 D.7055 ] [223])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:223 D.7055 ] [223])
                (const_int 5 [0x5]))
            (nil))))
(insn 476 475 477 17 (parallel [
            (set (reg:DI 0 ax [365])
                (ashift:DI (reg:DI 0 ax [364])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [364])
        (nil)))
(insn 477 476 478 17 (set (reg:DI 0 ax [364])
        (reg:DI 0 ax [365])) mABM.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [365])
        (nil)))
(insn 478 477 479 17 (set (reg:DI 0 ax [orig:224 D.7055 ] [224])
        (reg:DI 0 ax [364])) mABM.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [364])
        (nil)))
(insn 479 478 480 17 (parallel [
            (set (reg/f:DI 2 cx [orig:225 D.7057 ] [225])
                (plus:DI (reg/f:DI 2 cx [orig:222 D.7057 ] [222])
                    (reg:DI 0 ax [orig:224 D.7055 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:224 D.7055 ] [224])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:222 D.7057 ] [222])
            (nil))))
(insn 480 479 481 17 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:113 89 {*movsi_internal}
     (nil))
(insn 481 480 482 17 (set (reg:DI 1 dx [orig:226 D.7055 ] [226])
        (sign_extend:DI (reg:SI 0 ax [366]))) mABM.c:113 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [366])
        (nil)))
(insn 482 481 483 17 (set (reg:DI 0 ax [367])
        (reg:DI 1 dx [orig:226 D.7055 ] [226])) mABM.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 483 482 484 17 (parallel [
            (set (reg:DI 0 ax [367])
                (ashift:DI (reg:DI 0 ax [367])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 513 {*ashldi3_1}
     (nil))
(insn 484 483 485 17 (parallel [
            (set (reg:DI 0 ax [367])
                (plus:DI (reg:DI 0 ax [367])
                    (reg:DI 1 dx [orig:226 D.7055 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:226 D.7055 ] [226])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.7055 ] [226])
                (const_int 5 [0x5]))
            (nil))))
(insn 485 484 486 17 (parallel [
            (set (reg:DI 0 ax [368])
                (ashift:DI (reg:DI 0 ax [367])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [367])
        (nil)))
(insn 486 485 487 17 (set (reg:DI 0 ax [367])
        (reg:DI 0 ax [368])) mABM.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [368])
        (nil)))
(insn 487 486 488 17 (set (reg:DI 1 dx [orig:227 D.7055 ] [227])
        (reg:DI 0 ax [367])) mABM.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [367])
        (nil)))
(insn 488 487 489 17 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 F+0 S8 A64])) mABM.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 489 488 490 17 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.7057 ] [228])
                (plus:DI (reg/f:DI 0 ax [369])
                    (reg:DI 1 dx [orig:227 D.7055 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:113 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [369])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:227 D.7055 ] [227])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 F+0 S8 A64])
                    (reg:DI 1 dx [orig:227 D.7055 ] [227]))
                (nil)))))
(insn 490 489 491 17 (set (reg:XF 0 ax [orig:229 D.7061 ] [229])
        (mem/j:XF (plus:DI (reg/f:DI 0 ax [orig:228 D.7057 ] [228])
                (const_int 128 [0x80])) [0 _187->delta_t+0 S16 A128])) mABM.c:113 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:228 D.7057 ] [228])
        (nil)))
(insn 491 490 492 17 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:225 D.7057 ] [225])
                (const_int 128 [0x80])) [0 _184->delta_t+0 S16 A128])
        (reg:XF 0 ax [orig:229 D.7061 ] [229])) mABM.c:113 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:229 D.7061 ] [229])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:225 D.7057 ] [225])
            (nil))))
(insn 492 491 493 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:91 273 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 370
(code_label 493 492 494 18 24 "" [1 uses])
(note 494 493 496 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 496 494 497 18 (set (reg:SI 0 ax [370])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:91 89 {*movsi_internal}
     (nil))
(insn 497 496 498 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [370])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32]))) mABM.c:91 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [370])
        (nil)))
(jump_insn 498 497 499 18 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) mABM.c:91 612 {*jcc_1}
     (nil)
 -> 495)
;;  succ:       5
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 230 231
(note 499 498 500 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 503 19 (set (reg:SI 0 ax [orig:230 D.7058 ] [230])
        (const_int 1 [0x1])) mABM.c:115 89 {*movsi_internal}
     (nil))
(insn 503 500 507 19 (set (reg:SI 0 ax [orig:231 <retval> ] [231])
        (reg:SI 0 ax [orig:230 D.7058 ] [230])) mABM.c:115 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:230 D.7058 ] [230])
        (nil)))
(insn 507 503 510 19 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:231 <retval> ] [231])) mABM.c:116 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:231 <retval> ] [231])
        (nil)))
(insn 510 507 0 19 (use (reg/i:SI 0 ax)) mABM.c:116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _delay_on_m1 (_delay_on_m1, funcdef_no=6, decl_uid=4107, cgraph_uid=6)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 48:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=91 from oldreg=71, assigning class FLOAT_REGS to r91
   48: r91:XF=[r70:DI]
      REG_DEAD r70:DI
    Inserting insn reload after:
   86: r71:XF=r91:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=92 from oldreg=71, assigning class FLOAT_REGS to r92
   56: r76:XF=r75:XF+r92:XF
      REG_DEAD r75:XF
      REG_DEAD r71:XF
    Inserting insn reload before:
   87: r92:XF=r71:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 60:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=93 from oldreg=71, assigning class FLOAT_REGS to inheritance r93
    Original reg change 71->93 (bb4):
   86: r93:XF=r91:XF
    Add original<-inheritance after:
   88: r71:XF=r93:XF

    Inheritance reuse change 71->93 (bb4):
   87: r92:XF=r93:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    88: r71:XF=r93:XF
deleting insn with uid = 88.
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 78: point = 0
   Insn 75: point = 0
   Insn 71: point = 1
   Insn 68: point = 3
  BB 6
   Insn 66: point = 4
   Insn 65: point = 4
   Insn 64: point = 5
  BB 2
   Insn 84: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 5
   Insn 60: point = 6
  BB 4
   Insn 57: point = 6
   Insn 56: point = 7
   Insn 87: point = 9
	   Creating copy r92<-r93@1
   Insn 55: point = 11
   Insn 54: point = 12
   Insn 53: point = 12
   Insn 52: point = 13
   Insn 51: point = 14
   Insn 50: point = 16
   Insn 49: point = 17
   Insn 86: point = 18
	   Creating copy r91->r93@1
   Insn 48: point = 20
   Insn 47: point = 22
   Insn 46: point = 24
   Insn 45: point = 26
   Insn 44: point = 28
   Insn 43: point = 30
   Insn 42: point = 32
   Insn 41: point = 33
   Insn 40: point = 33
   Insn 39: point = 34
   Insn 38: point = 36
   Insn 37: point = 37
   Insn 36: point = 39
   Insn 35: point = 40
   Insn 34: point = 42
   Insn 33: point = 44
   Insn 32: point = 46
   Insn 31: point = 48
   Insn 30: point = 50
   Insn 29: point = 51
   Insn 28: point = 51
   Insn 27: point = 52
   Insn 26: point = 54
   Insn 25: point = 55
   Insn 24: point = 57
  BB 3
   Insn 19: point = 58
   Insn 18: point = 58
   Insn 17: point = 59
   Insn 16: point = 60
   Insn 15: point = 61
   Insn 14: point = 61
   Insn 13: point = 62
   Insn 12: point = 63
   Insn 11: point = 64
 r59: [58..60]
 r60: [58..59]
 r61: [43..55]
 r62: [50..52]
 r63: [43..44]
 r64: [41..42]
 r65: [6..40]
 r66: [25..37]
 r67: [32..34]
 r68: [25..26]
 r69: [23..24]
 r70: [21..22]
 r72: [13..17]
 r73: [15..16]
 r74: [12..14]
 r75: [8..11]
 r76: [6..7]
 r77: [2..3]
 r78: [0..1]
 r79: [63..64]
 r80: [61..62]
 r81: [56..57]
 r82: [53..54]
 r83: [49..51] [45..46]
 r84: [47..48]
 r85: [38..39]
 r86: [35..36]
 r87: [31..33] [27..28]
 r88: [29..30]
 r89: [4..5]
 r91: [19..20]
 r92: [8..9]
 r93: [10..18]
Compressing live ranges: from 65 to 54 - 83%
Ranges after the compression:
 r59: [48..49]
 r60: [48..49]
 r61: [36..45]
 r62: [42..43]
 r63: [36..37]
 r64: [34..35]
 r65: [6..33]
 r66: [22..31]
 r67: [28..29]
 r68: [22..23]
 r69: [20..21]
 r70: [18..19]
 r72: [12..15]
 r73: [14..15]
 r74: [12..13]
 r75: [8..11]
 r76: [6..7]
 r77: [2..3]
 r78: [0..1]
 r79: [52..53]
 r80: [50..51]
 r81: [46..47]
 r82: [44..45]
 r83: [42..43] [38..39]
 r84: [40..41]
 r85: [32..33]
 r86: [30..31]
 r87: [28..29] [24..25]
 r88: [26..27]
 r89: [4..5]
 r91: [16..17]
 r92: [8..9]
 r93: [10..15]
	 Assigning to 91 (cl=FLOAT_REGS, orig=71, freq=2, tfirst=91, tfreq=2)...
	   Assign 10 to reload r91 (freq=2)
	Hard reg 10 is preferable by r93 with profit 1
	Hard reg 10 is preferable by r92 with profit 1
	 Assigning to 92 (cl=FLOAT_REGS, orig=71, freq=2, tfirst=91, tfreq=2)...
	   Assign 10 to reload r92 (freq=2)
	Hard reg 10 is preferable by r93 with profit 2
	 Assigning to 93 (cl=FLOAT_REGS, orig=71, freq=2, tfirst=91, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   87: r92:XF=r71:XF
      REG_DEAD r71:XF
   Insn after restoring regs:
   86: r71:XF=r91:XF
      REG_DEAD r91:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 7
   Insn 78: point = 0
   Insn 75: point = 0
   Insn 71: point = 1
   Insn 68: point = 3
  BB 6
   Insn 66: point = 4
   Insn 65: point = 4
   Insn 64: point = 5
  BB 2
   Insn 84: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 5
   Insn 60: point = 6
  BB 4
   Insn 57: point = 6
   Insn 56: point = 7
   Insn 87: point = 9
   Insn 55: point = 11
   Insn 54: point = 12
   Insn 53: point = 12
   Insn 52: point = 13
   Insn 51: point = 14
   Insn 50: point = 16
   Insn 49: point = 17
   Insn 86: point = 18
   Insn 48: point = 20
   Insn 47: point = 22
   Insn 46: point = 24
   Insn 45: point = 26
   Insn 44: point = 28
   Insn 43: point = 30
   Insn 42: point = 32
   Insn 41: point = 33
   Insn 40: point = 33
   Insn 39: point = 34
   Insn 38: point = 36
   Insn 37: point = 37
   Insn 36: point = 39
   Insn 35: point = 40
   Insn 34: point = 42
   Insn 33: point = 44
   Insn 32: point = 46
   Insn 31: point = 48
   Insn 30: point = 50
   Insn 29: point = 51
   Insn 28: point = 51
   Insn 27: point = 52
   Insn 26: point = 54
   Insn 25: point = 55
   Insn 24: point = 57
  BB 3
   Insn 19: point = 58
   Insn 18: point = 58
   Insn 17: point = 59
   Insn 16: point = 60
   Insn 15: point = 61
   Insn 14: point = 61
   Insn 13: point = 62
   Insn 12: point = 63
   Insn 11: point = 64
 r71: [10..18]
Compressing live ranges: from 65 to 2 - 3%
Ranges after the compression:
 r71: [0..1]
  Slot 0 regnos (width = 16):	 71
Changing spilled pseudos to memory in insn #86
Changing spilled pseudos to memory in insn #87

********** Local #3: **********

Reusing alternative 0 for insn #87
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #86
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 57
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 68
changing reg in insn 71
changing reg in insn 71
changing reg in insn 75
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 44
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 64
changing reg in insn 65
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 54.


_delay_on_m1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={29d,27u} r1={8d,7u,2e} r2={5d,2u} r3={1d,1u} r4={3d,1u} r5={3d,1u} r6={1d,23u} r7={1d,17u} r8={7d,7u} r9={3d,1u} r10={4d,2u} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={13d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 253{159d,92u,2e} in 57{55 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:118 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 84 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:120 89 {*movsi_internal}
     (nil))
(jump_insn 84 7 85 2 (set (pc)
        (label_ref 61)) mABM.c:120 650 {jump}
     (nil)
 -> 61)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 85 84 63)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 79 80
(code_label 63 85 10 3 39 "" [1 uses])
(note 10 63 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:XF 0 ax [79])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [79])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [79])
        (nil)))
(insn 13 12 14 3 (set (reg:XF 0 ax [80])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [80])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [80])
        (nil)))
(call_insn 15 14 16 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:120 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 16 15 17 3 (set (reg:XF 8 st [orig:59 D.7063 ] [59])
        (reg:XF 8 st)) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 17 16 18 3 (set (reg:XF 9 st(1) [orig:60 D.7063 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 112 [0x70])) [0 conf.pdelay+0 S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:60 D.7063 ] [60])
            (reg:XF 8 st [orig:59 D.7063 ] [59]))) mABM.c:120 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.7063 ] [60])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.7063 ] [59])
            (nil))))
(jump_insn 19 18 23 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) mABM.c:120 612 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 81 82 83 84 85 86 87 88
(note 23 19 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 2 cx [orig:61 D.7064 ] [61])
        (mem/f:DI (reg/f:DI 0 ax [81]) [0 *f_6(D)+0 S8 A64])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 0 ax [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:120 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [orig:62 D.7065 ] [62])
        (sign_extend:DI (reg:SI 0 ax [82]))) mABM.c:120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [82])
        (nil)))
(insn 28 27 29 4 (set (reg:DI 0 ax [83])
        (reg:DI 1 dx [orig:62 D.7065 ] [62])) mABM.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 0 ax [83])
                (ashift:DI (reg:DI 0 ax [83])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 513 {*ashldi3_1}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [83])
                (plus:DI (reg:DI 0 ax [83])
                    (reg:DI 1 dx [orig:62 D.7065 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7065 ] [62])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:62 D.7065 ] [62])
                (const_int 5 [0x5]))
            (nil))))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 0 ax [84])
                (ashift:DI (reg:DI 0 ax [83])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 32 31 33 4 (set (reg:DI 0 ax [83])
        (reg:DI 0 ax [84])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(insn 33 32 34 4 (set (reg:DI 0 ax [orig:63 D.7065 ] [63])
        (reg:DI 0 ax [83])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7064 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.7065 ] [63])
                    (reg/f:DI 2 cx [orig:61 D.7064 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.7065 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:61 D.7064 ] [61])
            (nil))))
(insn 35 34 36 4 (set (reg/f:DI 3 bx [orig:65 D.7066 ] [65])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:64 D.7064 ] [64])
                (const_int 16 [0x10])) [0 _10->time+0 S8 A128])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7064 ] [64])
        (nil)))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 2 cx [orig:66 D.7064 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [85]) [0 *f_6(D)+0 S8 A64])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 38 37 39 4 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:120 89 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 1 dx [orig:67 D.7065 ] [67])
        (sign_extend:DI (reg:SI 0 ax [86]))) mABM.c:120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [86])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 0 ax [87])
        (reg:DI 1 dx [orig:67 D.7065 ] [67])) mABM.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 0 ax [87])
                (ashift:DI (reg:DI 0 ax [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 513 {*ashldi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 0 ax [87])
                (plus:DI (reg:DI 0 ax [87])
                    (reg:DI 1 dx [orig:67 D.7065 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7065 ] [67])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:67 D.7065 ] [67])
                (const_int 5 [0x5]))
            (nil))))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [88])
                (ashift:DI (reg:DI 0 ax [87])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(insn 44 43 45 4 (set (reg:DI 0 ax [87])
        (reg:DI 0 ax [88])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:68 D.7065 ] [68])
        (reg:DI 0 ax [87])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.7064 ] [69])
                (plus:DI (reg:DI 0 ax [orig:68 D.7065 ] [68])
                    (reg/f:DI 2 cx [orig:66 D.7064 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:68 D.7065 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:66 D.7064 ] [66])
            (nil))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [orig:70 D.7066 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:69 D.7064 ] [69])
                (const_int 16 [0x10])) [0 _15->time+0 S8 A128])) mABM.c:120 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7064 ] [69])
        (nil)))
(insn 48 47 86 4 (set (reg:XF 10 st(2) [orig:71 D.7063 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.7066 ] [70]) [0 *_16+0 S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7066 ] [70])
        (nil)))
(insn 86 48 88 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])
        (reg:XF 10 st(2) [orig:71 D.7063 ] [71])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:71 D.7063 ] [71])
        (nil)))
(note 88 86 49 4 NOTE_INSN_DELETED)
(insn 49 88 50 4 (set (reg:XF 0 ax [orig:72 D.7063 ] [72])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 conf.xdelay+0 S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (nil))
(insn 50 49 51 4 (set (reg:XF 8 st [orig:73 D.7063 ] [73])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 conf.xdelay+0 S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 4 (set (reg:XF 8 st [orig:74 D.7063 ] [74])
        (neg:XF (reg:XF 8 st [orig:73 D.7063 ] [73]))) mABM.c:120 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.7063 ] [73])
        (nil)))
(insn 52 51 53 4 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.7063 ] [72])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.7063 ] [72])
        (nil)))
(insn 53 52 54 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:74 D.7063 ] [74])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.7063 ] [74])
        (nil)))
(call_insn 54 53 55 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:120 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 55 54 87 4 (set (reg:XF 8 st [orig:75 D.7063 ] [75])
        (reg:XF 8 st)) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 87 55 56 4 (set (reg:XF 10 st(2) [orig:71 D.7063 ] [71])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 71 [ D.7063 ])
        (nil)))
(insn 56 87 57 4 (set (reg:XF 8 st [orig:76 D.7063 ] [76])
        (plus:XF (reg:XF 8 st [orig:75 D.7063 ] [75])
            (reg:XF 10 st(2) [orig:71 D.7063 ] [71]))) mABM.c:120 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:71 D.7063 ] [71])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.7063 ] [75])
            (nil))))
(insn 57 56 58 4 (set (mem:XF (reg/f:DI 3 bx [orig:65 D.7066 ] [65]) [0 *_11+0 S16 A128])
        (reg:XF 8 st [orig:76 D.7063 ] [76])) mABM.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.7063 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:65 D.7066 ] [65])
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 58 57 59 5 37 "" [1 uses])
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:120 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89
(code_label 61 60 62 6 36 "" [1 uses])
(note 62 61 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 64 62 65 6 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:120 89 {*movsi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:120 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [89])
        (nil)))
(jump_insn 66 65 67 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) mABM.c:120 612 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 77 78
(note 67 66 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 71 7 (set (reg:SI 0 ax [orig:77 D.7067 ] [77])
        (const_int 1 [0x1])) mABM.c:121 89 {*movsi_internal}
     (nil))
(insn 71 68 75 7 (set (reg:SI 0 ax [orig:78 <retval> ] [78])
        (reg:SI 0 ax [orig:77 D.7067 ] [77])) mABM.c:121 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.7067 ] [77])
        (nil)))
(insn 75 71 78 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:78 <retval> ] [78])) mABM.c:122 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 <retval> ] [78])
        (nil)))
(insn 78 75 0 7 (use (reg/i:SI 0 ax)) mABM.c:122 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _init_tool (_init_tool, funcdef_no=7, decl_uid=4116, cgraph_uid=7)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 77: point = 0
   Insn 74: point = 0
   Insn 70: point = 1
   Insn 67: point = 3
   Insn 66: point = 4
   Insn 65: point = 5
   Insn 64: point = 6
   Insn 63: point = 7
   Insn 62: point = 7
   Insn 61: point = 8
   Insn 60: point = 9
   Insn 59: point = 10
   Insn 58: point = 11
   Insn 57: point = 12
   Insn 56: point = 12
   Insn 55: point = 13
  BB 6
   Insn 52: point = 14
   Insn 51: point = 14
  BB 5
   Insn 49: point = 14
   Insn 48: point = 14
   Insn 47: point = 15
   Insn 46: point = 17
   Insn 45: point = 18
   Insn 44: point = 19
   Insn 43: point = 20
   Insn 42: point = 21
   Insn 41: point = 21
   Insn 40: point = 22
   Insn 39: point = 22
   Insn 38: point = 23
   Insn 37: point = 24
   Insn 36: point = 25
   Insn 35: point = 26
   Insn 34: point = 26
   Insn 33: point = 27
  BB 4
   Insn 31: point = 28
   Insn 30: point = 28
   Insn 29: point = 29
  BB 2
   Insn 80: point = 30
   Insn 13: point = 30
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 32
   Insn 9: point = 33
   Insn 8: point = 33
   Insn 7: point = 34
   Insn 3: point = 35
   Insn 2: point = 35
  BB 3
   Insn 25: point = 35
   Insn 24: point = 35
   Insn 23: point = 36
   Insn 22: point = 37
   Insn 21: point = 39
   Insn 20: point = 41
   Insn 19: point = 43
   Insn 18: point = 44
   Insn 17: point = 46
 r59: [30..32]
 r60: [38..44]
 r61: [40..41]
 r62: [38..39]
 r63: [35..37]
 r64: [26..27]
 r65: [23..25]
 r66: [21..22]
 r67: [18..20]
 r68: [14..15]
 r69: [12..13]
 r70: [9..11]
 r71: [4..6]
 r72: [2..3]
 r73: [0..1]
 r74: [33..34]
 r75: [30..31]
 r76: [45..46]
 r77: [42..43]
 r78: [35..36]
 r79: [28..29]
 r80: [23..24]
 r81: [18..19]
 r82: [16..17]
 r83: [9..10]
 r84: [7..8]
 r85: [4..5]
Compressing live ranges: from 47 to 40 - 85%
Ranges after the compression:
 r59: [26..27]
 r60: [32..37]
 r61: [34..35]
 r62: [32..33]
 r63: [30..31]
 r64: [22..23]
 r65: [20..21]
 r66: [18..19]
 r67: [16..17]
 r68: [12..13]
 r69: [10..11]
 r70: [8..9]
 r71: [4..5]
 r72: [2..3]
 r73: [0..1]
 r74: [28..29]
 r75: [26..27]
 r76: [38..39]
 r77: [36..37]
 r78: [30..31]
 r79: [24..25]
 r80: [20..21]
 r81: [16..17]
 r82: [14..15]
 r83: [8..9]
 r84: [6..7]
 r85: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 60
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 70
changing reg in insn 74
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 63.


_init_tool

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={26d,25u} r1={16d,9u} r2={7d} r4={8d,2u} r5={13d,7u} r6={1d,28u} r7={1d,13u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={11d,2u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 409{322d,87u,0e} in 57{51 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 74 75
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])
        (reg:DI 5 di [ t ])) mABM.c:124 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ t ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mABM.c:124 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])) mABM.c:127 89 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [74])) mABM.c:127 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [74])
        (nil)))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ialloc_vec") [flags 0x41]  <function_decl 0x7f05a5959800 ialloc_vec>) [0 ialloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:127 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:59 D.7069 ] [59])
        (reg:DI 0 ax)) mABM.c:127 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 1 dx [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:127 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/f/j:DI (reg/f:DI 1 dx [75]) [0 t_4(D)->lista+0 S8 A64])
        (reg/f:DI 0 ax [orig:59 D.7069 ] [59])) mABM.c:127 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [75])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.7069 ] [59])
            (nil))))
(insn 13 12 80 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:128 89 {*movsi_internal}
     (nil))
(jump_insn 80 13 81 2 (set (pc)
        (label_ref 26)) mABM.c:128 650 {jump}
     (nil)
 -> 26)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 81 80 28)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 76 77 78
(code_label 28 81 16 3 44 "" [1 uses])
(note 16 28 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:128 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:60 D.7069 ] [60])
        (mem/f/j:DI (reg/f:DI 0 ax [76]) [0 t_4(D)->lista+0 S8 A64])) mABM.c:128 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 19 18 20 3 (set (reg:SI 1 dx [77])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:128 89 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 1 dx [orig:61 D.7070 ] [61])
        (sign_extend:DI (reg:SI 1 dx [77]))) mABM.c:128 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [77])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.7070 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.7070 ] [61])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:128 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7070 ] [61])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 1 dx [orig:63 D.7069 ] [63])
                (plus:DI (reg:DI 1 dx [orig:62 D.7070 ] [62])
                    (reg/f:DI 0 ax [orig:60 D.7069 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:128 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7070 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7069 ] [60])
            (nil))))
(insn 23 22 24 3 (set (reg:SI 0 ax [78])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:128 89 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (mem:SI (reg/f:DI 1 dx [orig:63 D.7069 ] [63]) [0 *_9+0 S4 A32])
        (reg:SI 0 ax [78])) mABM.c:128 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [78])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:63 D.7069 ] [63])
            (nil))))
(insn 25 24 26 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:128 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79
(code_label 26 25 27 4 43 "" [1 uses])
(note 27 26 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 27 30 4 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:128 89 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [79])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mABM.c:128 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) mABM.c:128 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 68 80 81 82
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg:SI 0 ax [orig:64 D.7071 ] [64])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:130 89 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:64 D.7071 ] [64])) mABM.c:130 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7071 ] [64])
        (nil)))
(call_insn 35 34 36 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:130 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 36 35 37 5 (set (reg/f:DI 0 ax [orig:65 D.7072 ] [65])
        (reg:DI 0 ax)) mABM.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 37 36 38 5 (set (reg/f:DI 1 dx [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:130 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [80])
                (const_int 8 [0x8])) [0 t_4(D)->dist+0 S8 A64])
        (reg/f:DI 0 ax [orig:65 D.7072 ] [65])) mABM.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [80])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7072 ] [65])
            (nil))))
(insn 39 38 40 5 (set (reg:SI 0 ax [orig:66 D.7071 ] [66])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:132 89 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mABM.c:132 89 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:66 D.7071 ] [66])) mABM.c:132 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.7071 ] [66])
        (nil)))
(call_insn 42 41 43 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f05a5959600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mABM.c:132 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [orig:67 D.7073 ] [67])
        (reg:DI 0 ax)) mABM.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 44 43 45 5 (set (reg/f:DI 1 dx [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [81])
                (const_int 16 [0x10])) [0 t_4(D)->sel_nvp_index+0 S8 A64])
        (reg/f:DI 0 ax [orig:67 D.7073 ] [67])) mABM.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7073 ] [67])
            (nil))))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [orig:68 D.7073 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 16 [0x10])) [0 t_4(D)->sel_nvp_index+0 S8 A64])) mABM.c:133 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 48 47 49 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:68 D.7073 ] [68])
            (const_int 0 [0]))) mABM.c:133 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7073 ] [68])
        (nil)))
(jump_insn 49 48 50 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) mABM.c:133 612 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f05a551b5f0 *.LC9>)) mABM.c:133 87 {*movdi_internal_rex64}
     (nil))
(call_insn 52 51 53 6 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:133 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 73 83 84 85
(code_label 53 52 54 7 45 "" [1 uses])
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg:SI 0 ax [orig:69 D.7071 ] [69])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:135 89 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:69 D.7071 ] [69])) mABM.c:135 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7071 ] [69])
        (nil)))
(call_insn 57 56 58 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:135 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 58 57 59 7 (set (reg/f:DI 0 ax [orig:70 D.7072 ] [70])
        (reg:DI 0 ax)) mABM.c:135 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 59 58 60 7 (set (reg/f:DI 1 dx [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:135 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [83])
                (const_int 32 [0x20])) [0 t_4(D)->temp_angle+0 S8 A64])
        (reg/f:DI 0 ax [orig:70 D.7072 ] [70])) mABM.c:135 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [83])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7072 ] [70])
            (nil))))
(insn 61 60 62 7 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])) mABM.c:137 89 {*movsi_internal}
     (nil))
(insn 62 61 63 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [84])) mABM.c:137 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [84])
        (nil)))
(call_insn 63 62 64 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:137 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 64 63 65 7 (set (reg/f:DI 0 ax [orig:71 D.7072 ] [71])
        (reg:DI 0 ax)) mABM.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 65 64 66 7 (set (reg/f:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t+0 S8 A64])) mABM.c:137 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [85])
                (const_int 40 [0x28])) [0 t_4(D)->dV+0 S8 A64])
        (reg/f:DI 0 ax [orig:71 D.7072 ] [71])) mABM.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [85])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7072 ] [71])
            (nil))))
(insn 67 66 70 7 (set (reg:SI 0 ax [orig:72 D.7071 ] [72])
        (const_int 1 [0x1])) mABM.c:139 89 {*movsi_internal}
     (nil))
(insn 70 67 74 7 (set (reg:SI 0 ax [orig:73 <retval> ] [73])
        (reg:SI 0 ax [orig:72 D.7071 ] [72])) mABM.c:139 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.7071 ] [72])
        (nil)))
(insn 74 70 77 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:73 <retval> ] [73])) mABM.c:140 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 <retval> ] [73])
        (nil)))
(insn 77 74 0 7 (use (reg/i:SI 0 ax)) mABM.c:140 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _del_tool (_del_tool, funcdef_no=8, decl_uid=4124, cgraph_uid=8)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 27.


_del_tool

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={19d,14u} r1={7d,1u} r2={6d} r4={7d,1u} r5={11d,6u} r6={1d,9u} r7={1d,7u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={5d} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 297{258d,39u,0e} in 27{22 regular + 5 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])
        (reg:DI 5 di [ t ])) mABM.c:142 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ t ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [67])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])) mABM.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:59 D.7075 ] [59])
        (mem/f/j:DI (reg/f:DI 0 ax [67]) [0 t_1(D)->lista+0 S8 A64])) mABM.c:143 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 D.7075 ] [59])) mABM.c:143 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.7075 ] [59])
        (nil)))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:143 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [68])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])) mABM.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:60 D.7076 ] [60])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [68])
                (const_int 8 [0x8])) [0 t_1(D)->dist+0 S8 A64])) mABM.c:144 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [68])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:60 D.7076 ] [60])) mABM.c:144 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7076 ] [60])
        (nil)))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:144 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (reg:SI 1 dx [orig:61 D.7077 ] [61])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:145 89 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])) mABM.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:62 D.7078 ] [62])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 16 [0x10])) [0 t_1(D)->sel_nvp_index+0 S8 A64])) mABM.c:145 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:61 D.7077 ] [61])) mABM.c:145 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:61 D.7077 ] [61])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:62 D.7078 ] [62])) mABM.c:145 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7078 ] [62])
        (nil)))
(call_insn 19 18 20 2 (call (mem:QI (symbol_ref:DI ("ffree_2D") [flags 0x41]  <function_decl 0x7f05a595e300 ffree_2D>) [0 ffree_2D S1 A8])
        (const_int 0 [0])) mABM.c:145 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])) mABM.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [orig:63 D.7076 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [70])
                (const_int 32 [0x20])) [0 t_1(D)->temp_angle+0 S8 A64])) mABM.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [70])
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:63 D.7076 ] [63])) mABM.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7076 ] [63])
        (nil)))
(call_insn 23 22 24 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:146 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 t+0 S8 A64])) mABM.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [orig:64 D.7076 ] [64])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [71])
                (const_int 40 [0x28])) [0 t_1(D)->dV+0 S8 A64])) mABM.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [71])
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:64 D.7076 ] [64])) mABM.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7076 ] [64])
        (nil)))
(call_insn 27 26 28 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f05a58cb000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mABM.c:147 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 28 27 31 2 (set (reg:SI 0 ax [orig:65 D.7077 ] [65])
        (const_int 1 [0x1])) mABM.c:148 89 {*movsi_internal}
     (nil))
(insn 31 28 35 2 (set (reg:SI 0 ax [orig:66 <retval> ] [66])
        (reg:SI 0 ax [orig:65 D.7077 ] [65])) mABM.c:148 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.7077 ] [65])
        (nil)))
(insn 35 31 38 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:66 <retval> ] [66])) mABM.c:149 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 <retval> ] [66])
        (nil)))
(insn 38 35 0 2 (use (reg/i:SI 0 ax)) mABM.c:149 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _create_shock (_create_shock, funcdef_no=9, decl_uid=4128, cgraph_uid=9)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 9:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 11
	 Choosing alt 0 in insn 11:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 72:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 96:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 97:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=155 from oldreg=118, assigning class FLOAT_REGS to r155
   97: r155:XF=[argp:DI+0xb0]
    Inserting insn reload after:
  153: r118:XF=r155:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 146:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 108:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=156 from oldreg=126, assigning class SSE_REGS to r156
  109: r156:DF=r156:DF*r150:DF
      REG_DEAD r150:DF
      REG_DEAD r125:DF
    Inserting insn reload before:
  154: r156:DF=r125:DF
    Inserting insn reload after:
  155: r126:DF=r156:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 155:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=157 from oldreg=118, assigning class FLOAT_REGS to r157
  111: r128:XF=r127:XF+r157:XF
      REG_DEAD r127:XF
      REG_DEAD r118:XF
    Inserting insn reload before:
  156: r157:XF=r118:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 126 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=158 from oldreg=118, assigning class FLOAT_REGS to inheritance r158
    Original reg change 118->158 (bb4):
  153: r158:XF=r155:XF
    Add original<-inheritance after:
  157: r118:XF=r158:XF

    Inheritance reuse change 118->158 (bb4):
  156: r157:XF=r158:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   157: r118:XF=r158:XF
deleting insn with uid = 157.
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 132: point = 0
   Insn 129: point = 0
   Insn 125: point = 1
   Insn 122: point = 3
  BB 5
   Insn 120: point = 4
   Insn 119: point = 4
   Insn 117: point = 5
   Insn 116: point = 7
  BB 2
   Insn 135: point = 8
   Insn 15: point = 8
   Insn 140: point = 8
   Insn 152: point = 9
   Insn 151: point = 10
   Insn 150: point = 10
   Insn 149: point = 11
   Insn 13: point = 11
   Insn 12: point = 13
   Insn 11: point = 14
   Insn 10: point = 16
   Insn 9: point = 17
   Insn 139: point = 19
   Insn 7: point = 21
   Insn 6: point = 22
   Insn 2: point = 23
  BB 4
   Insn 113: point = 23
   Insn 112: point = 23
   Insn 111: point = 24
   Insn 156: point = 26
	   Creating copy r157<-r158@1
   Insn 110: point = 28
   Insn 155: point = 30
   Insn 109: point = 32
   Insn 154: point = 33
	Hard reg 21 is preferable by r156 with profit 1
   Insn 108: point = 35
   Insn 107: point = 36
   Insn 106: point = 38
   Insn 105: point = 39
   Insn 104: point = 39
   Insn 138: point = 40
   Insn 148: point = 42
   Insn 147: point = 43
   Insn 146: point = 43
   Insn 145: point = 44
   Insn 102: point = 44
   Insn 101: point = 46
   Insn 100: point = 47
   Insn 99: point = 49
   Insn 98: point = 50
   Insn 153: point = 51
	   Creating copy r155->r158@1
   Insn 97: point = 53
   Insn 96: point = 54
   Insn 95: point = 56
   Insn 94: point = 58
   Insn 93: point = 60
   Insn 92: point = 62
   Insn 91: point = 64
   Insn 90: point = 65
   Insn 89: point = 67
   Insn 88: point = 68
   Insn 87: point = 69
   Insn 86: point = 70
   Insn 85: point = 72
   Insn 84: point = 74
   Insn 83: point = 76
   Insn 82: point = 78
   Insn 81: point = 80
   Insn 80: point = 81
   Insn 79: point = 83
   Insn 78: point = 84
   Insn 137: point = 85
   Insn 76: point = 87
   Insn 75: point = 88
   Insn 74: point = 88
   Insn 73: point = 89
   Insn 72: point = 90
   Insn 71: point = 92
   Insn 70: point = 94
   Insn 69: point = 96
   Insn 68: point = 98
   Insn 67: point = 100
   Insn 66: point = 101
   Insn 65: point = 103
   Insn 64: point = 104
   Insn 63: point = 105
   Insn 62: point = 106
   Insn 61: point = 108
   Insn 60: point = 110
   Insn 59: point = 112
   Insn 58: point = 114
   Insn 57: point = 116
   Insn 56: point = 117
   Insn 55: point = 119
   Insn 54: point = 120
   Insn 53: point = 121
   Insn 52: point = 123
   Insn 51: point = 125
   Insn 50: point = 127
   Insn 49: point = 129
   Insn 48: point = 131
   Insn 47: point = 132
   Insn 46: point = 133
   Insn 45: point = 135
   Insn 44: point = 137
   Insn 43: point = 139
   Insn 42: point = 141
   Insn 41: point = 143
   Insn 40: point = 144
   Insn 39: point = 146
   Insn 38: point = 147
   Insn 37: point = 148
   Insn 36: point = 150
   Insn 35: point = 152
   Insn 34: point = 154
   Insn 33: point = 156
   Insn 32: point = 158
   Insn 31: point = 159
   Insn 30: point = 160
   Insn 29: point = 162
   Insn 28: point = 164
   Insn 27: point = 166
   Insn 26: point = 168
   Insn 25: point = 169
   Insn 24: point = 171
   Insn 23: point = 172
   Insn 22: point = 173
   Insn 21: point = 174
   Insn 20: point = 174
   Insn 19: point = 175
 r59: [18..22]
 r60: [20..21]
 r61: [18..19]
 r62: [15..17]
 r63: [15..16]
 r64: [12..14]
 r65: [8..11]
 r66: [4..5]
 r67: [174..175]
 r68: [163..169]
 r69: [165..166]
 r70: [163..164]
 r71: [161..162]
 r72: [147..160]
 r73: [153..159]
 r74: [155..156]
 r75: [153..154]
 r76: [151..152]
 r77: [149..150]
 r78: [147..148]
 r79: [138..144]
 r80: [140..141]
 r81: [138..139]
 r82: [136..137]
 r83: [134..135]
 r84: [120..133]
 r85: [126..132]
 r86: [128..129]
 r87: [126..127]
 r88: [124..125]
 r89: [122..123]
 r90: [120..121]
 r91: [111..117]
 r92: [113..114]
 r93: [111..112]
 r94: [109..110]
 r95: [107..108]
 r96: [104..106]
 r97: [104..105]
 r98: [95..101]
 r99: [97..98]
 r100: [95..96]
 r101: [93..94]
 r102: [91..92]
 r103: [84..90]
 r104: [86..87]
 r105: [84..85]
 r106: [75..81]
 r107: [77..78]
 r108: [75..76]
 r109: [73..74]
 r110: [71..72]
 r111: [68..70]
 r112: [59..65]
 r113: [61..62]
 r114: [59..60]
 r115: [57..58]
 r116: [55..56]
 r117: [23..54]
 r119: [48..50]
 r120: [48..49]
 r121: [45..47]
 r122: [41..44]
 r123: [39..40]
 r124: [37..38]
 r125: [34..36]
 r126: [29..30]
 r127: [25..28]
 r128: [23..24]
 r129: [2..3]
 r130: [0..1]
 r131: [12..13]
 r132: [172..173]
 r133: [170..171]
 r134: [167..168]
 r135: [157..158]
 r136: [145..146]
 r137: [142..143]
 r138: [130..131]
 r139: [118..119]
 r140: [115..116]
 r141: [102..103]
 r142: [99..100]
 r143: [88..89]
 r144: [82..83]
 r145: [79..80]
 r146: [68..69]
 r147: [66..67]
 r148: [63..64]
 r149: [45..46]
 r150: [32..35]
 r151: [6..7]
 r153: [42..43]
 r154: [9..10]
 r155: [52..53]
 r156: [31..33]
 r157: [25..26]
 r158: [27..51]
Compressing live ranges: from 176 to 150 - 85%
Ranges after the compression:
 r59: [14..17]
 r60: [16..17]
 r61: [14..15]
 r62: [12..13]
 r63: [12..13]
 r64: [10..11]
 r65: [8..9]
 r66: [4..5]
 r67: [148..149]
 r68: [138..143]
 r69: [140..141]
 r70: [138..139]
 r71: [136..137]
 r72: [124..135]
 r73: [130..135]
 r74: [132..133]
 r75: [130..131]
 r76: [128..129]
 r77: [126..127]
 r78: [124..125]
 r79: [116..121]
 r80: [118..119]
 r81: [116..117]
 r82: [114..115]
 r83: [112..113]
 r84: [100..111]
 r85: [106..111]
 r86: [108..109]
 r87: [106..107]
 r88: [104..105]
 r89: [102..103]
 r90: [100..101]
 r91: [92..97]
 r92: [94..95]
 r93: [92..93]
 r94: [90..91]
 r95: [88..89]
 r96: [86..87]
 r97: [86..87]
 r98: [78..83]
 r99: [80..81]
 r100: [78..79]
 r101: [76..77]
 r102: [74..75]
 r103: [68..73]
 r104: [70..71]
 r105: [68..69]
 r106: [60..65]
 r107: [62..63]
 r108: [60..61]
 r109: [58..59]
 r110: [56..57]
 r111: [54..55]
 r112: [46..51]
 r113: [48..49]
 r114: [46..47]
 r115: [44..45]
 r116: [42..43]
 r117: [18..41]
 r119: [38..39]
 r120: [38..39]
 r121: [36..37]
 r122: [34..35]
 r123: [32..33]
 r124: [30..31]
 r125: [28..29]
 r126: [24..25]
 r127: [20..23]
 r128: [18..19]
 r129: [2..3]
 r130: [0..1]
 r131: [10..11]
 r132: [146..147]
 r133: [144..145]
 r134: [142..143]
 r135: [134..135]
 r136: [122..123]
 r137: [120..121]
 r138: [110..111]
 r139: [98..99]
 r140: [96..97]
 r141: [84..85]
 r142: [82..83]
 r143: [72..73]
 r144: [66..67]
 r145: [64..65]
 r146: [54..55]
 r147: [52..53]
 r148: [50..51]
 r149: [36..37]
 r150: [26..29]
 r151: [6..7]
 r153: [34..35]
 r154: [8..9]
 r155: [40..41]
 r156: [26..27]
 r157: [20..21]
 r158: [22..39]
	 Assigning to 155 (cl=FLOAT_REGS, orig=118, freq=2, tfirst=155, tfreq=2)...
	   Assign 10 to reload r155 (freq=2)
	Hard reg 10 is preferable by r158 with profit 1
	Hard reg 10 is preferable by r157 with profit 1
	 Assigning to 157 (cl=FLOAT_REGS, orig=118, freq=2, tfirst=155, tfreq=2)...
	   Assign 10 to reload r157 (freq=2)
	Hard reg 10 is preferable by r158 with profit 2
	 Assigning to 158 (cl=FLOAT_REGS, orig=118, freq=2, tfirst=155, tfreq=2)...
	 Assigning to 156 (cl=SSE_REGS, orig=126, freq=3, tfirst=156, tfreq=3)...
	   Assign 21 to reload r156 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  156: r157:XF=r118:XF
      REG_DEAD r118:XF
   Insn after restoring regs:
  153: r118:XF=r155:XF
      REG_DEAD r155:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 6
   Insn 132: point = 0
   Insn 129: point = 0
   Insn 125: point = 1
   Insn 122: point = 3
  BB 5
   Insn 120: point = 4
   Insn 119: point = 4
   Insn 117: point = 5
   Insn 116: point = 7
  BB 2
   Insn 135: point = 8
   Insn 15: point = 8
   Insn 140: point = 8
   Insn 152: point = 9
   Insn 151: point = 10
   Insn 150: point = 10
   Insn 149: point = 11
   Insn 13: point = 11
   Insn 12: point = 13
   Insn 11: point = 14
   Insn 10: point = 16
   Insn 9: point = 17
   Insn 139: point = 19
   Insn 7: point = 21
   Insn 6: point = 22
   Insn 2: point = 23
  BB 4
   Insn 113: point = 23
   Insn 112: point = 23
   Insn 111: point = 24
   Insn 156: point = 26
   Insn 110: point = 28
   Insn 155: point = 30
   Insn 109: point = 32
   Insn 154: point = 33
   Insn 108: point = 35
   Insn 107: point = 36
   Insn 106: point = 38
   Insn 105: point = 39
   Insn 104: point = 39
   Insn 138: point = 40
   Insn 148: point = 42
   Insn 147: point = 43
   Insn 146: point = 43
   Insn 145: point = 44
   Insn 102: point = 44
   Insn 101: point = 46
   Insn 100: point = 47
   Insn 99: point = 49
   Insn 98: point = 50
   Insn 153: point = 51
   Insn 97: point = 53
   Insn 96: point = 54
   Insn 95: point = 56
   Insn 94: point = 58
   Insn 93: point = 60
   Insn 92: point = 62
   Insn 91: point = 64
   Insn 90: point = 65
   Insn 89: point = 67
   Insn 88: point = 68
   Insn 87: point = 69
   Insn 86: point = 70
   Insn 85: point = 72
   Insn 84: point = 74
   Insn 83: point = 76
   Insn 82: point = 78
   Insn 81: point = 80
   Insn 80: point = 81
   Insn 79: point = 83
   Insn 78: point = 84
   Insn 137: point = 85
   Insn 76: point = 87
   Insn 75: point = 88
   Insn 74: point = 88
   Insn 73: point = 89
   Insn 72: point = 90
   Insn 71: point = 92
   Insn 70: point = 94
   Insn 69: point = 96
   Insn 68: point = 98
   Insn 67: point = 100
   Insn 66: point = 101
   Insn 65: point = 103
   Insn 64: point = 104
   Insn 63: point = 105
   Insn 62: point = 106
   Insn 61: point = 108
   Insn 60: point = 110
   Insn 59: point = 112
   Insn 58: point = 114
   Insn 57: point = 116
   Insn 56: point = 117
   Insn 55: point = 119
   Insn 54: point = 120
   Insn 53: point = 121
   Insn 52: point = 123
   Insn 51: point = 125
   Insn 50: point = 127
   Insn 49: point = 129
   Insn 48: point = 131
   Insn 47: point = 132
   Insn 46: point = 133
   Insn 45: point = 135
   Insn 44: point = 137
   Insn 43: point = 139
   Insn 42: point = 141
   Insn 41: point = 143
   Insn 40: point = 144
   Insn 39: point = 146
   Insn 38: point = 147
   Insn 37: point = 148
   Insn 36: point = 150
   Insn 35: point = 152
   Insn 34: point = 154
   Insn 33: point = 156
   Insn 32: point = 158
   Insn 31: point = 159
   Insn 30: point = 160
   Insn 29: point = 162
   Insn 28: point = 164
   Insn 27: point = 166
   Insn 26: point = 168
   Insn 25: point = 169
   Insn 24: point = 171
   Insn 23: point = 172
   Insn 22: point = 173
   Insn 21: point = 174
   Insn 20: point = 174
   Insn 19: point = 175
 r118: [27..51]
 r126: [29..30]
Compressing live ranges: from 176 to 2 - 1%
Ranges after the compression:
 r118: [0..1]
 r126: [0..1]
  Slot 0 regnos (width = 16):	 118
  Slot 1 regnos (width = 8):	 126
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #155
Changing spilled pseudos to memory in insn #110
Changing spilled pseudos to memory in insn #156

********** Local #3: **********

Reusing alternative 0 for insn #156
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #110
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #155
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 155:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 1 for insn #153
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 139
changing reg in insn 139
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 140
changing reg in insn 117
changing reg in insn 119
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 38
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 44
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 54
changing reg in insn 47
changing reg in insn 51
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 78
changing reg in insn 76
changing reg in insn 137
changing reg in insn 137
changing reg in insn 78
changing reg in insn 80
changing reg in insn 84
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 94
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 112
changing reg in insn 98
changing reg in insn 100
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 102
changing reg in insn 102
changing reg in insn 138
changing reg in insn 138
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 122
changing reg in insn 125
changing reg in insn 125
changing reg in insn 129
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 48
changing reg in insn 49
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 116
changing reg in insn 117
changing reg in insn 147
changing reg in insn 146
changing reg in insn 148
changing reg in insn 147
changing reg in insn 151
changing reg in insn 150
changing reg in insn 152
changing reg in insn 151
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 105.


_create_shock

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 19[fpcr] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={53d,53u} r1={32d,28u} r2={8d,4u} r3={2d,2u} r4={4d} r5={7d,4u} r6={1d,55u} r7={1d,8u} r8={13d,10u} r9={8d,5u} r10={5d,2u} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={28d,1u} r18={3d} r19={3d,2u} r20={1d,1u} r21={7d,3u} r22={5d,1u} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 461{282d,179u,0e} in 127{124 regular + 3 call} insns.
(note 1 0 141 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 131 154
(note 141 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 141 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])
        (reg:DI 5 di [ sh ])) mABM.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ sh ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:XF 9 st(1) [orig:59 D.7079 ] [59])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:153 131 {*movxf_internal_rex64}
     (nil))
(insn 7 6 139 2 (set (reg:SI 0 ax [orig:60 D.7080 ] [60])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:153 89 {*movsi_internal}
     (nil))
(insn 139 7 9 2 (parallel [
            (set (reg:XF 8 st [orig:61 D.7079 ] [61])
                (float:XF (reg:SI 0 ax [orig:60 D.7080 ] [60])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:153 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.7080 ] [60])
        (nil)))
(insn 9 139 10 2 (set (reg:XF 9 st(1) [orig:62 D.7079 ] [62])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.7079 ] [59])
            (reg:XF 8 st [orig:61 D.7079 ] [61]))) mABM.c:153 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.7079 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.7079 ] [59])
            (nil))))
(insn 10 9 11 2 (set (reg:XF 8 st [orig:63 D.7079 ] [63])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:153 131 {*movxf_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:64 D.7079 ] [64])
        (mult:XF (reg:XF 8 st [orig:63 D.7079 ] [63])
            (reg:XF 9 st(1) [orig:62 D.7079 ] [62]))) mABM.c:153 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.7079 ] [63])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.7079 ] [62])
            (nil))))
(insn 12 11 13 2 (set (reg:XF 9 st(1) [131])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S16 A128])) mABM.c:153 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 8.64e+4 [0x0.a8cp+17])
        (nil)))
(insn 13 12 149 2 (set (reg:XF 8 st [orig:65 D.7079 ] [65])
        (div:XF (reg:XF 9 st(1) [131])
            (reg:XF 8 st [orig:64 D.7079 ] [64]))) mABM.c:153 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [131])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7079 ] [64])
            (nil))))
(insn 149 13 150 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:153 199 {x86_fnstcw_1}
     (nil))
(insn 150 149 151 2 (set (reg:HI 0 ax [154])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])) mABM.c:153 90 {*movhi_internal}
     (nil))
(insn 151 150 152 2 (parallel [
            (set (reg:HI 0 ax [154])
                (ior:HI (reg:HI 0 ax [154])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:153 410 {*iorhi_1}
     (nil))
(insn 152 151 140 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0  S2 A16])
        (reg:HI 0 ax [154])) mABM.c:153 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [154])
        (nil)))
(insn 140 152 15 2 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 niter+0 S4 A32])
                (fix:SI (reg:XF 8 st [orig:65 D.7079 ] [65])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -46 [0xffffffffffffffd2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S2 A16]))
        ]) mABM.c:153 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.7079 ] [65])
        (nil)))
(insn 15 140 135 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:154 89 {*movsi_internal}
     (nil))
(jump_insn 135 15 136 2 (set (pc)
        (label_ref 114)) mABM.c:154 650 {jump}
     (nil)
 -> 114)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 136 135 118)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 153
(code_label 118 136 18 4 51 "" [1 uses])
(note 18 118 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [orig:67 D.7080 ] [67])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 144 [0x90])) [0 conf.n_point_shock+0 S4 A128])) mABM.c:155 89 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:67 D.7080 ] [67])) mABM.c:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7080 ] [67])
        (nil)))
(call_insn 21 20 22 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("irand") [flags 0x41]  <function_decl 0x7f05a595e000 irand>) [0 irand S1 A8])
            (const_int 0 [0]))) mABM.c:155 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 22 21 23 4 (set (reg:SI 0 ax [132])
        (reg:SI 0 ax)) mABM.c:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 23 22 24 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 coin+0 S4 A32])
        (reg:SI 0 ax [132])) mABM.c:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [132])
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:156 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [orig:68 D.7081 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 1 dx [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:156 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [orig:69 D.7082 ] [69])
        (sign_extend:DI (reg:SI 1 dx [134]))) mABM.c:156 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [134])
        (nil)))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 1 dx [orig:70 D.7082 ] [70])
                (ashift:DI (reg:DI 1 dx [orig:69 D.7082 ] [69])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:156 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.7082 ] [69])
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7081 ] [71])
                (plus:DI (reg/f:DI 0 ax [orig:68 D.7081 ] [68])
                    (reg:DI 1 dx [orig:70 D.7082 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:156 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.7082 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7081 ] [68])
            (nil))))
(insn 30 29 31 4 (set (reg/f:DI 2 cx [orig:72 D.7083 ] [72])
        (mem/f:DI (reg/f:DI 0 ax [orig:71 D.7081 ] [71]) [0 *_18+0 S8 A64])) mABM.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7081 ] [71])
        (nil)))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [orig:73 D.7081 ] [73])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 136 [0x88])) [0 conf.point_shock+0 S8 A64])) mABM.c:156 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 4 (set (reg:SI 1 dx [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 coin+0 S4 A32])) mABM.c:156 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 1 dx [orig:74 D.7082 ] [74])
        (sign_extend:DI (reg:SI 1 dx [135]))) mABM.c:156 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [135])
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 1 dx [orig:75 D.7082 ] [75])
                (ashift:DI (reg:DI 1 dx [orig:74 D.7082 ] [74])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:156 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7082 ] [74])
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7081 ] [76])
                (plus:DI (reg/f:DI 0 ax [orig:73 D.7081 ] [73])
                    (reg:DI 1 dx [orig:75 D.7082 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:156 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.7082 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7081 ] [73])
            (nil))))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [orig:77 D.7083 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [orig:76 D.7081 ] [76]) [0 *_23+0 S8 A64])) mABM.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7081 ] [76])
        (nil)))
(insn 37 36 38 4 (set (reg:XF 0 ax [orig:78 D.7079 ] [78])
        (mem:XF (reg/f:DI 0 ax [orig:77 D.7083 ] [77]) [0 *_24+0 S16 A128])) mABM.c:156 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7083 ] [77])
        (nil)))
(insn 38 37 39 4 (set (mem:XF (reg/f:DI 2 cx [orig:72 D.7083 ] [72]) [0 *_19+0 S16 A128])
        (reg:XF 0 ax [orig:78 D.7079 ] [78])) mABM.c:156 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:78 D.7079 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:72 D.7083 ] [72])
            (nil))))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 4 (set (reg/f:DI 0 ax [orig:79 D.7081 ] [79])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (nil)))
(insn 41 40 42 4 (set (reg:SI 1 dx [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:157 89 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 1 dx [orig:80 D.7082 ] [80])
        (sign_extend:DI (reg:SI 1 dx [137]))) mABM.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [137])
        (nil)))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 1 dx [orig:81 D.7082 ] [81])
                (ashift:DI (reg:DI 1 dx [orig:80 D.7082 ] [80])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:157 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7082 ] [80])
        (nil)))
(insn 44 43 45 4 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.7081 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:79 D.7081 ] [79])
                    (reg:DI 1 dx [orig:81 D.7082 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.7082 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7081 ] [79])
            (nil))))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [orig:83 D.7083 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 D.7081 ] [82]) [0 *_29+0 S8 A64])) mABM.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7081 ] [82])
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 2 cx [orig:84 D.7083 ] [84])
                (plus:DI (reg/f:DI 0 ax [orig:83 D.7083 ] [83])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.7083 ] [83])
        (nil)))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [orig:85 D.7081 ] [85])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 136 [0x88])) [0 conf.point_shock+0 S8 A64])) mABM.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 4 (set (reg:SI 1 dx [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 coin+0 S4 A32])) mABM.c:157 89 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 1 dx [orig:86 D.7082 ] [86])
        (sign_extend:DI (reg:SI 1 dx [138]))) mABM.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [138])
        (nil)))
(insn 50 49 51 4 (parallel [
            (set (reg:DI 1 dx [orig:87 D.7082 ] [87])
                (ashift:DI (reg:DI 1 dx [orig:86 D.7082 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:157 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:86 D.7082 ] [86])
        (nil)))
(insn 51 50 52 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.7081 ] [88])
                (plus:DI (reg/f:DI 0 ax [orig:85 D.7081 ] [85])
                    (reg:DI 1 dx [orig:87 D.7082 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.7082 ] [87])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7081 ] [85])
            (nil))))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [orig:89 D.7083 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [orig:88 D.7081 ] [88]) [0 *_35+0 S8 A64])) mABM.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7081 ] [88])
        (nil)))
(insn 53 52 54 4 (set (reg:XF 0 ax [orig:90 D.7079 ] [90])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:89 D.7083 ] [89])
                (const_int 16 [0x10])) [0 MEM[(long double *)_36 + 16B]+0 S16 A128])) mABM.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.7083 ] [89])
        (nil)))
(insn 54 53 55 4 (set (mem:XF (reg/f:DI 2 cx [orig:84 D.7083 ] [84]) [0 *_31+0 S16 A128])
        (reg:XF 0 ax [orig:90 D.7079 ] [90])) mABM.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:90 D.7079 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:84 D.7083 ] [84])
            (nil))))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:158 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [orig:91 D.7081 ] [91])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:158 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [139])
        (nil)))
(insn 57 56 58 4 (set (reg:SI 1 dx [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:158 89 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:DI 1 dx [orig:92 D.7082 ] [92])
        (sign_extend:DI (reg:SI 1 dx [140]))) mABM.c:158 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [140])
        (nil)))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 1 dx [orig:93 D.7082 ] [93])
                (ashift:DI (reg:DI 1 dx [orig:92 D.7082 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:158 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.7082 ] [92])
        (nil)))
(insn 60 59 61 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.7081 ] [94])
                (plus:DI (reg/f:DI 0 ax [orig:91 D.7081 ] [91])
                    (reg:DI 1 dx [orig:93 D.7082 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:158 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.7082 ] [93])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7081 ] [91])
            (nil))))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [orig:95 D.7083 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.7081 ] [94]) [0 *_41+0 S8 A64])) mABM.c:158 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.7081 ] [94])
        (nil)))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 2 cx [orig:96 D.7083 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:95 D.7083 ] [95])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:158 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.7083 ] [95])
        (nil)))
(insn 63 62 64 4 (set (reg:XF 0 ax [orig:97 D.7079 ] [97])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 160 [0xa0])) [0 conf.radius+0 S16 A128])) mABM.c:158 131 {*movxf_internal_rex64}
     (nil))
(insn 64 63 65 4 (set (mem:XF (reg/f:DI 2 cx [orig:96 D.7083 ] [96]) [0 *_43+0 S16 A128])
        (reg:XF 0 ax [orig:97 D.7079 ] [97])) mABM.c:158 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:97 D.7079 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:96 D.7083 ] [96])
            (nil))))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:159 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [orig:98 D.7081 ] [98])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [141])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [141])
        (nil)))
(insn 67 66 68 4 (set (reg:SI 1 dx [142])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:159 89 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:99 D.7082 ] [99])
        (sign_extend:DI (reg:SI 1 dx [142]))) mABM.c:159 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [142])
        (nil)))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.7082 ] [100])
                (ashift:DI (reg:DI 1 dx [orig:99 D.7082 ] [99])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:159 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:99 D.7082 ] [99])
        (nil)))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.7081 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:98 D.7081 ] [98])
                    (reg:DI 1 dx [orig:100 D.7082 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:159 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.7082 ] [100])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.7081 ] [98])
            (nil))))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [orig:102 D.7083 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [orig:101 D.7081 ] [101]) [0 *_48+0 S8 A64])) mABM.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.7081 ] [101])
        (nil)))
(insn 72 71 73 4 (parallel [
            (set (reg/f:DI 3 bx [orig:103 D.7083 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:102 D.7083 ] [102])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:159 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.7083 ] [102])
        (nil)))
(insn 73 72 74 4 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 niter+0 S4 A32])) mABM.c:159 89 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [143])) mABM.c:159 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [143])
        (nil)))
(call_insn 75 74 76 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("irand") [flags 0x41]  <function_decl 0x7f05a595e000 irand>) [0 irand S1 A8])
            (const_int 0 [0]))) mABM.c:159 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 76 75 137 4 (set (reg:SI 0 ax [orig:104 D.7080 ] [104])
        (reg:SI 0 ax)) mABM.c:159 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 137 76 78 4 (parallel [
            (set (reg:XF 8 st [orig:105 D.7079 ] [105])
                (float:XF (reg:SI 0 ax [orig:104 D.7080 ] [104])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:159 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.7080 ] [104])
        (nil)))
(insn 78 137 79 4 (set (mem:XF (reg/f:DI 3 bx [orig:103 D.7083 ] [103]) [0 *_50+0 S16 A128])
        (reg:XF 8 st [orig:105 D.7079 ] [105])) mABM.c:159 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:105 D.7079 ] [105])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:103 D.7083 ] [103])
            (nil))))
(insn 79 78 80 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 4 (set (reg/f:DI 0 ax [orig:106 D.7081 ] [106])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [144])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [144])
        (nil)))
(insn 81 80 82 4 (set (reg:SI 1 dx [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:160 89 {*movsi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DI 1 dx [orig:107 D.7082 ] [107])
        (sign_extend:DI (reg:SI 1 dx [145]))) mABM.c:160 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [145])
        (nil)))
(insn 83 82 84 4 (parallel [
            (set (reg:DI 1 dx [orig:108 D.7082 ] [108])
                (ashift:DI (reg:DI 1 dx [orig:107 D.7082 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:160 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.7082 ] [107])
        (nil)))
(insn 84 83 85 4 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.7081 ] [109])
                (plus:DI (reg/f:DI 0 ax [orig:106 D.7081 ] [106])
                    (reg:DI 1 dx [orig:108 D.7082 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:108 D.7082 ] [108])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:106 D.7081 ] [106])
            (nil))))
(insn 85 84 86 4 (set (reg/f:DI 0 ax [orig:110 D.7083 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [orig:109 D.7081 ] [109]) [0 *_56+0 S8 A64])) mABM.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.7081 ] [109])
        (nil)))
(insn 86 85 87 4 (parallel [
            (set (reg/f:DI 2 cx [orig:111 D.7083 ] [111])
                (plus:DI (reg/f:DI 0 ax [orig:110 D.7083 ] [110])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.7083 ] [110])
        (nil)))
(insn 87 86 88 4 (set (reg:XF 0 ax [146])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:160 131 {*movxf_internal_rex64}
     (nil))
(insn 88 87 89 4 (set (mem:XF (reg/f:DI 2 cx [orig:111 D.7083 ] [111]) [0 *_58+0 S16 A128])
        (reg:XF 0 ax [146])) mABM.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [146])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:111 D.7083 ] [111])
            (nil))))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:161 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [orig:112 D.7081 ] [112])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [147])
                (const_int 8 [0x8])) [0 sh_11(D)->shock+0 S8 A64])) mABM.c:161 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [147])
        (nil)))
(insn 91 90 92 4 (set (reg:SI 1 dx [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:161 89 {*movsi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:DI 1 dx [orig:113 D.7082 ] [113])
        (sign_extend:DI (reg:SI 1 dx [148]))) mABM.c:161 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [148])
        (nil)))
(insn 93 92 94 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.7082 ] [114])
                (ashift:DI (reg:DI 1 dx [orig:113 D.7082 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:161 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:113 D.7082 ] [113])
        (nil)))
(insn 94 93 95 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.7081 ] [115])
                (plus:DI (reg/f:DI 0 ax [orig:112 D.7081 ] [112])
                    (reg:DI 1 dx [orig:114 D.7082 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:161 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:114 D.7082 ] [114])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:112 D.7081 ] [112])
            (nil))))
(insn 95 94 96 4 (set (reg/f:DI 0 ax [orig:116 D.7083 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 D.7081 ] [115]) [0 *_62+0 S8 A64])) mABM.c:161 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:115 D.7081 ] [115])
        (nil)))
(insn 96 95 97 4 (parallel [
            (set (reg/f:DI 3 bx [orig:117 D.7083 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:116 D.7083 ] [116])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:161 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:116 D.7083 ] [116])
        (nil)))
(insn 97 96 153 4 (set (reg:XF 10 st(2) [orig:118 D.7079 ] [118])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 176 [0xb0])) [0 conf.f_lvl+0 S16 A128])) mABM.c:161 131 {*movxf_internal_rex64}
     (nil))
(insn 153 97 157 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])
        (reg:XF 10 st(2) [orig:118 D.7079 ] [118])) mABM.c:161 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:118 D.7079 ] [118])
        (nil)))
(note 157 153 98 4 NOTE_INSN_DELETED)
(insn 98 157 99 4 (set (reg:XF 9 st(1) [orig:119 D.7079 ] [119])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 192 [0xc0])) [0 conf.f_lvl+16 S16 A128])) mABM.c:161 131 {*movxf_internal_rex64}
     (nil))
(insn 99 98 100 4 (set (reg:XF 8 st [orig:120 D.7079 ] [120])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 176 [0xb0])) [0 conf.f_lvl+0 S16 A128])) mABM.c:161 131 {*movxf_internal_rex64}
     (nil))
(insn 100 99 101 4 (set (reg:XF 9 st(1) [orig:121 D.7079 ] [121])
        (minus:XF (reg:XF 9 st(1) [orig:119 D.7079 ] [119])
            (reg:XF 8 st [orig:120 D.7079 ] [120]))) mABM.c:161 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:120 D.7079 ] [120])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:119 D.7079 ] [119])
            (nil))))
(insn 101 100 102 4 (set (reg:XF 8 st [149])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mABM.c:161 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 102 101 145 4 (set (reg:XF 8 st [orig:122 D.7079 ] [122])
        (div:XF (reg:XF 9 st(1) [orig:121 D.7079 ] [121])
            (reg:XF 8 st [149]))) mABM.c:161 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [149])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:121 D.7079 ] [121])
            (nil))))
(insn 145 102 146 4 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:161 199 {x86_fnstcw_1}
     (nil))
(insn 146 145 147 4 (set (reg:HI 0 ax [153])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])) mABM.c:161 90 {*movhi_internal}
     (nil))
(insn 147 146 148 4 (parallel [
            (set (reg:HI 0 ax [153])
                (ior:HI (reg:HI 0 ax [153])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:161 410 {*iorhi_1}
     (nil))
(insn 148 147 138 4 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0  S2 A16])
        (reg:HI 0 ax [153])) mABM.c:161 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [153])
        (nil)))
(insn 138 148 104 4 (parallel [
            (set (reg:SI 0 ax [orig:123 D.7080 ] [123])
                (fix:SI (reg:XF 8 st [orig:122 D.7079 ] [122])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -46 [0xffffffffffffffd2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:161 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:122 D.7079 ] [122])
        (nil)))
(insn 104 138 105 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:123 D.7080 ] [123])) mABM.c:161 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:123 D.7080 ] [123])
        (nil)))
(call_insn 105 104 106 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("irand") [flags 0x41]  <function_decl 0x7f05a595e000 irand>) [0 irand S1 A8])
            (const_int 0 [0]))) mABM.c:161 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 106 105 107 4 (set (reg:SI 0 ax [orig:124 D.7080 ] [124])
        (reg:SI 0 ax)) mABM.c:161 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 107 106 108 4 (set (reg:DF 21 xmm0 [orig:125 D.7084 ] [125])
        (float:DF (reg:SI 0 ax [orig:124 D.7080 ] [124]))) mABM.c:161 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:124 D.7080 ] [124])
        (nil)))
(insn 108 107 154 4 (set (reg:DF 22 xmm1 [150])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S8 A64])) mABM.c:161 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 154 108 109 4 (set (reg:DF 21 xmm0 [orig:126 D.7084 ] [126])
        (reg:DF 21 xmm0 [orig:125 D.7084 ] [125])) mABM.c:161 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:125 D.7084 ] [125])
        (nil)))
(insn 109 154 155 4 (set (reg:DF 21 xmm0 [orig:126 D.7084 ] [126])
        (mult:DF (reg:DF 21 xmm0 [orig:126 D.7084 ] [126])
            (reg:DF 22 xmm1 [150]))) mABM.c:161 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [150])
        (nil)))
(insn 155 109 110 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 %sfp+-72 S8 A64])
        (reg:DF 21 xmm0 [orig:126 D.7084 ] [126])) mABM.c:161 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:126 D.7084 ] [126])
        (nil)))
(insn 110 155 156 4 (set (reg:XF 8 st [orig:127 D.7079 ] [127])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 %sfp+-72 S8 A64]))) mABM.c:161 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 126 [ D.7084 ])
        (nil)))
(insn 156 110 111 4 (set (reg:XF 10 st(2) [orig:118 D.7079 ] [118])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])) mABM.c:161 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 118 [ D.7079 ])
        (nil)))
(insn 111 156 112 4 (set (reg:XF 8 st [orig:128 D.7079 ] [128])
        (plus:XF (reg:XF 8 st [orig:127 D.7079 ] [127])
            (reg:XF 10 st(2) [orig:118 D.7079 ] [118]))) mABM.c:161 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:118 D.7079 ] [118])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:127 D.7079 ] [127])
            (nil))))
(insn 112 111 113 4 (set (mem:XF (reg/f:DI 3 bx [orig:117 D.7083 ] [117]) [0 *_64+0 S16 A128])
        (reg:XF 8 st [orig:128 D.7079 ] [128])) mABM.c:161 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:128 D.7079 ] [128])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:117 D.7083 ] [117])
            (nil))))
(insn 113 112 114 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:154 273 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 151
(code_label 114 113 115 5 50 "" [1 uses])
(note 115 114 116 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 5 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+0 S8 A64])) mABM.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 117 116 119 5 (set (reg:SI 0 ax [orig:66 D.7080 ] [66])
        (mem/j:SI (reg/f:DI 0 ax [151]) [0 sh_11(D)->Nshock+0 S4 A64])) mABM.c:154 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [151])
        (nil)))
(insn 119 117 120 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:66 D.7080 ] [66])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) mABM.c:154 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.7080 ] [66])
        (nil)))
(jump_insn 120 119 121 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) mABM.c:154 612 {*jcc_1}
     (nil)
 -> 118)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 129 130
(note 121 120 122 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 125 6 (set (reg:SI 0 ax [orig:129 D.7080 ] [129])
        (const_int 1 [0x1])) mABM.c:163 89 {*movsi_internal}
     (nil))
(insn 125 122 142 6 (set (reg:SI 0 ax [orig:130 <retval> ] [130])
        (reg:SI 0 ax [orig:129 D.7080 ] [129])) mABM.c:163 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:129 D.7080 ] [129])
        (nil)))
(note 142 125 129 6 NOTE_INSN_DELETED)
(insn 129 142 132 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:130 <retval> ] [130])) mABM.c:164 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:130 <retval> ] [130])
        (nil)))
(insn 132 129 0 6 (use (reg/i:SI 0 ax)) mABM.c:164 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _nvp_to_close (_nvp_to_close, funcdef_no=10, decl_uid=4146, cgraph_uid=10)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=145 from oldreg=66, assigning class GENERAL_REGS to r145
   28: {r145:DI=r145:DI<<0x4;clobber flags:CC;}
      REG_DEAD r65:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  153: r145:DI=r65:DI
    Inserting insn reload after:
  154: r66:DI=r145:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 42:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=146 from oldreg=80, assigning class GENERAL_REGS to r146
   61: {r146:DI=r146:DI<<0x4;clobber flags:CC;}
      REG_DEAD r79:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  155: r146:DI=r79:DI
    Inserting insn reload after:
  156: r80:DI=r146:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=147 from oldreg=86, assigning class GENERAL_REGS to r147
   72: {r147:DI=r147:DI<<0x4;clobber flags:CC;}
      REG_DEAD r85:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r147:DI=r85:DI
    Inserting insn reload after:
  158: r86:DI=r147:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 79:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 113:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 119:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 142: point = 0
   Insn 139: point = 0
   Insn 135: point = 1
  BB 5
   Insn 151: point = 4
   Insn 127: point = 4
   Insn 126: point = 5
   Insn 125: point = 5
   Insn 124: point = 6
   Insn 123: point = 7
   Insn 122: point = 8
   Insn 121: point = 9
   Insn 120: point = 10
   Insn 119: point = 11
   Insn 118: point = 12
   Insn 117: point = 13
   Insn 116: point = 14
   Insn 115: point = 15
   Insn 114: point = 16
   Insn 113: point = 17
   Insn 112: point = 18
   Insn 111: point = 19
   Insn 110: point = 20
   Insn 109: point = 21
   Insn 108: point = 22
   Insn 107: point = 23
   Insn 106: point = 24
   Insn 105: point = 25
   Insn 104: point = 26
   Insn 103: point = 27
   Insn 102: point = 28
   Insn 101: point = 28
   Insn 100: point = 29
   Insn 99: point = 30
   Insn 98: point = 32
   Insn 97: point = 34
   Insn 96: point = 35
   Insn 95: point = 37
   Insn 94: point = 39
   Insn 93: point = 41
   Insn 92: point = 42
   Insn 91: point = 44
   Insn 90: point = 46
   Insn 89: point = 47
   Insn 88: point = 49
   Insn 87: point = 51
   Insn 86: point = 53
   Insn 85: point = 55
   Insn 84: point = 56
   Insn 83: point = 57
   Insn 82: point = 58
   Insn 81: point = 60
   Insn 80: point = 62
   Insn 79: point = 63
   Insn 78: point = 65
   Insn 77: point = 67
   Insn 76: point = 68
   Insn 75: point = 69
   Insn 74: point = 71
   Insn 73: point = 73
   Insn 158: point = 74
	Hard reg 1 is preferable by r147 with profit 1
   Insn 72: point = 76
   Insn 157: point = 76
	Hard reg 1 is preferable by r147 with profit 1
	Hard reg 0 is preferable by r147 with profit 1
   Insn 71: point = 78
   Insn 70: point = 80
   Insn 69: point = 82
   Insn 68: point = 83
   Insn 67: point = 84
   Insn 66: point = 86
   Insn 65: point = 87
   Insn 64: point = 89
   Insn 63: point = 90
   Insn 62: point = 92
   Insn 156: point = 93
	Hard reg 1 is preferable by r146 with profit 1
   Insn 61: point = 95
   Insn 155: point = 95
	Hard reg 1 is preferable by r146 with profit 1
	Hard reg 0 is preferable by r146 with profit 1
   Insn 60: point = 97
   Insn 59: point = 99
   Insn 58: point = 101
  BB 4
   Insn 149: point = 102
   Insn 53: point = 102
  BB 3
   Insn 51: point = 103
   Insn 50: point = 103
   Insn 49: point = 104
   Insn 48: point = 106
   Insn 47: point = 107
   Insn 46: point = 109
   Insn 45: point = 111
   Insn 44: point = 112
   Insn 43: point = 113
   Insn 42: point = 114
   Insn 41: point = 116
   Insn 40: point = 118
   Insn 39: point = 119
   Insn 38: point = 120
   Insn 37: point = 121
   Insn 36: point = 123
   Insn 35: point = 125
   Insn 34: point = 127
   Insn 33: point = 129
   Insn 32: point = 130
   Insn 31: point = 131
   Insn 30: point = 133
   Insn 29: point = 135
   Insn 154: point = 136
	Hard reg 1 is preferable by r145 with profit 1
   Insn 28: point = 138
   Insn 153: point = 138
	Hard reg 1 is preferable by r145 with profit 1
	Hard reg 0 is preferable by r145 with profit 1
   Insn 27: point = 140
   Insn 26: point = 142
   Insn 25: point = 144
   Insn 24: point = 145
   Insn 23: point = 147
   Insn 22: point = 148
   Insn 21: point = 150
  BB 6
   Insn 132: point = 151
  BB 2
   Insn 16: point = 152
   Insn 15: point = 152
   Insn 14: point = 153
   Insn 13: point = 155
   Insn 12: point = 156
   Insn 11: point = 158
   Insn 7: point = 159
   Insn 6: point = 159
   Insn 5: point = 159
   Insn 4: point = 159
   Insn 3: point = 159
   Insn 2: point = 159
 r59: [151..151] [102..102] [2..4]
 r60: [152..156]
 r61: [152..153]
 r62: [122..148]
 r63: [124..145]
 r64: [141..142]
 r65: [139..140]
 r66: [134..136]
 r67: [132..133]
 r68: [126..131]
 r69: [126..127]
 r70: [124..125]
 r71: [122..123]
 r72: [119..121]
 r73: [115..116]
 r74: [112..114]
 r75: [108..109]
 r76: [103..107]
 r77: [103..104]
 r78: [98..99]
 r79: [96..97]
 r80: [91..93]
 r81: [83..90]
 r82: [85..87]
 r83: [83..84]
 r84: [79..80]
 r85: [77..78]
 r86: [72..74]
 r87: [70..71]
 r88: [64..69]
 r89: [64..65]
 r90: [59..63]
 r91: [59..60]
 r92: [56..58]
 r93: [52..53]
 r94: [50..51]
 r95: [48..49]
 r96: [45..47]
 r97: [43..44]
 r98: [29..42]
 r99: [38..39]
 r100: [36..37]
 r101: [33..35]
 r102: [31..32]
 r103: [28..30]
 r104: [25..27]
 r105: [0..1]
 r106: [157..158]
 r107: [154..155]
 r108: [149..150]
 r109: [146..147]
 r110: [143..144]
 r111: [134..135]
 r112: [128..130]
 r113: [128..129]
 r114: [119..120]
 r115: [117..118]
 r116: [112..113]
 r117: [110..111]
 r118: [105..106]
 r119: [100..101]
 r120: [91..92]
 r121: [88..89]
 r122: [85..86]
 r123: [81..82]
 r124: [72..73]
 r125: [66..68]
 r126: [66..67]
 r127: [61..62]
 r128: [56..57]
 r129: [54..55]
 r130: [45..46]
 r131: [40..41]
 r132: [33..34]
 r133: [25..26]
 r134: [10..24]
 r135: [9..23]
 r136: [8..22]
 r137: [7..21]
 r138: [6..20]
 r139: [5..19]
 r140: [17..18]
 r141: [15..16]
 r142: [13..14]
 r143: [11..12]
 r145: [137..138]
 r146: [94..95]
 r147: [75..76]
Compressing live ranges: from 159 to 124 - 77%
Ranges after the compression:
 r59: [117..117] [76..76] [2..3]
 r60: [118..121]
 r61: [118..119]
 r62: [93..114]
 r63: [95..112]
 r64: [109..110]
 r65: [107..108]
 r66: [103..104]
 r67: [101..102]
 r68: [97..100]
 r69: [97..98]
 r70: [95..96]
 r71: [93..94]
 r72: [91..92]
 r73: [87..88]
 r74: [85..86]
 r75: [81..82]
 r76: [77..80]
 r77: [77..78]
 r78: [72..73]
 r79: [70..71]
 r80: [66..67]
 r81: [60..65]
 r82: [62..63]
 r83: [60..61]
 r84: [56..57]
 r85: [54..55]
 r86: [50..51]
 r87: [48..49]
 r88: [44..47]
 r89: [44..45]
 r90: [40..43]
 r91: [40..41]
 r92: [38..39]
 r93: [34..35]
 r94: [32..33]
 r95: [30..31]
 r96: [28..29]
 r97: [26..27]
 r98: [14..25]
 r99: [22..23]
 r100: [20..21]
 r101: [18..19]
 r102: [16..17]
 r103: [14..15]
 r104: [12..13]
 r105: [0..1]
 r106: [122..123]
 r107: [120..121]
 r108: [115..116]
 r109: [113..114]
 r110: [111..112]
 r111: [103..104]
 r112: [99..100]
 r113: [99..100]
 r114: [91..92]
 r115: [89..90]
 r116: [85..86]
 r117: [83..84]
 r118: [79..80]
 r119: [74..75]
 r120: [66..67]
 r121: [64..65]
 r122: [62..63]
 r123: [58..59]
 r124: [50..51]
 r125: [46..47]
 r126: [46..47]
 r127: [42..43]
 r128: [38..39]
 r129: [36..37]
 r130: [28..29]
 r131: [24..25]
 r132: [18..19]
 r133: [12..13]
 r134: [4..11]
 r135: [4..11]
 r136: [4..11]
 r137: [4..11]
 r138: [4..11]
 r139: [4..11]
 r140: [10..11]
 r141: [8..9]
 r142: [6..7]
 r143: [4..5]
 r145: [105..106]
 r146: [68..69]
 r147: [52..53]
	 Assigning to 145 (cl=GENERAL_REGS, orig=66, freq=3, tfirst=145, tfreq=3)...
	   Assign 0 to reload r145 (freq=3)
	 Assigning to 146 (cl=GENERAL_REGS, orig=80, freq=3, tfirst=146, tfreq=3)...
	   Assign 0 to reload r146 (freq=3)
	 Assigning to 147 (cl=GENERAL_REGS, orig=86, freq=3, tfirst=147, tfreq=3)...
	   Assign 0 to reload r147 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 132
changing reg in insn 127
changing reg in insn 53
changing reg in insn 135
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 37
changing reg in insn 24
changing reg in insn 36
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 63
changing reg in insn 63
changing reg in insn 63
changing reg in insn 68
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 100
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 135
changing reg in insn 139
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 120
changing reg in insn 107
changing reg in insn 121
changing reg in insn 108
changing reg in insn 122
changing reg in insn 109
changing reg in insn 123
changing reg in insn 110
changing reg in insn 124
changing reg in insn 111
changing reg in insn 125
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 126.


_nvp_to_close

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 17[flags] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={60d,57u} r1={14d,12u,4e} r2={6d,4u,1e} r4={6d,4u} r5={6d,4u} r6={1d,49u} r7={1d,17u} r8={15d,14u} r9={7d,5u} r10={4d,2u} r11={3d,1u} r12={3d,1u} r13={2d} r14={2d} r15={2d} r16={2e} r17={18d,2u} r18={2d} r19={2d} r20={1d,1u,4e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={5d,3u} r38={5d,3u} r39={3d,1u} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 417{226d,180u,11e} in 126{124 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 60 61 106 107
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 d+0 S8 A64])
        (reg:DI 5 di [ d ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ d ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])
        (reg:DI 4 si [ t_c ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ t_c ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])
        (reg:DI 1 dx [ vel ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ vel ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])
        (reg:DI 2 cx [ nvp ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ nvp ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 l_nvp+0 S8 A64])
        (reg:DI 37 r8 [ l_nvp ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ l_nvp ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])
        (reg:DI 38 r9 [ j ])) mABM.c:167 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ j ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 d+0 S8 A64])) mABM.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:XF 9 st(1) [orig:60 D.7086 ] [60])
        (mem:XF (reg/f:DI 0 ax [106]) [0 *d_2(D)+0 S16 A128])) mABM.c:168 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 l_nvp+0 S8 A64])) mABM.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:XF 8 st [orig:61 D.7086 ] [61])
        (mem:XF (reg/f:DI 0 ax [107]) [0 *l_nvp_4(D)+0 S16 A128])) mABM.c:168 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (nil)))
(insn 15 14 16 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:60 D.7086 ] [60])
            (reg:XF 8 st [orig:61 D.7086 ] [61]))) mABM.c:168 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.7086 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.7086 ] [60])
            (nil))))
(jump_insn 16 15 20 2 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) mABM.c:168 612 {*jcc_1}
     (nil)
 -> 148)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 108 109 110 111 112 113 114 115 116 117 118
(note 20 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])) mABM.c:169 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 3 (set (reg:XF 9 st(1) [orig:62 D.7086 ] [62])
        (mem:XF (reg/f:DI 0 ax [108]) [0 *t_c_6(D)+0 S16 A128])) mABM.c:169 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 l_nvp+0 S8 A64])) mABM.c:169 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg:XF 10 st(2) [orig:63 D.7086 ] [63])
        (mem:XF (reg/f:DI 0 ax [109]) [0 *l_nvp_4(D)+0 S16 A128])) mABM.c:169 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:169 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 ax [orig:64 D.7085 ] [64])
        (mem:SI (reg/f:DI 0 ax [110]) [0 *j_9(D)+0 S4 A32])) mABM.c:169 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 27 26 153 3 (set (reg:DI 0 ax [orig:65 D.7087 ] [65])
        (sign_extend:DI (reg:SI 0 ax [orig:64 D.7085 ] [64]))) mABM.c:169 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7085 ] [64])
        (nil)))
(insn 153 27 28 3 (set (reg:DI 0 ax [orig:66 D.7087 ] [66])
        (reg:DI 0 ax [orig:65 D.7087 ] [65])) mABM.c:169 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.7087 ] [65])
        (nil)))
(insn 28 153 154 3 (parallel [
            (set (reg:DI 0 ax [orig:66 D.7087 ] [66])
                (ashift:DI (reg:DI 0 ax [orig:66 D.7087 ] [66])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:169 513 {*ashldi3_1}
     (nil))
(insn 154 28 29 3 (set (reg:DI 1 dx [orig:66 D.7087 ] [66])
        (reg:DI 0 ax [orig:66 D.7087 ] [66])) mABM.c:169 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.7087 ] [66])
        (nil)))
(insn 29 154 30 3 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])) mABM.c:169 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.7088 ] [67])
                (plus:DI (reg/f:DI 0 ax [111])
                    (reg:DI 1 dx [orig:66 D.7087 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:169 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.7087 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.7087 ] [66]))
                (nil)))))
(insn 31 30 32 3 (set (reg:XF 11 st(3) [orig:68 D.7086 ] [68])
        (mem:XF (reg/f:DI 0 ax [orig:67 D.7088 ] [67]) [0 *_14+0 S16 A128])) mABM.c:169 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7088 ] [67])
        (nil)))
(insn 32 31 33 3 (set (reg:XF 12 st(4) [112])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 dV+0 S16 A128])) mABM.c:169 131 {*movxf_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:XF 8 st [113])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:169 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 34 33 35 3 (set (reg:XF 8 st [orig:69 D.7086 ] [69])
        (plus:XF (reg:XF 8 st [113])
            (reg:XF 12 st(4) [112]))) mABM.c:169 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [113])
        (expr_list:REG_DEAD (reg:XF 12 st(4) [112])
            (nil))))
(insn 35 34 36 3 (set (reg:XF 8 st [orig:70 D.7086 ] [70])
        (mult:XF (reg:XF 8 st [orig:69 D.7086 ] [69])
            (reg:XF 11 st(3) [orig:68 D.7086 ] [68]))) mABM.c:169 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.7086 ] [69])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:68 D.7086 ] [68])
            (nil))))
(insn 36 35 37 3 (set (reg:XF 8 st [orig:71 D.7086 ] [71])
        (div:XF (reg:XF 10 st(2) [orig:63 D.7086 ] [63])
            (reg:XF 8 st [orig:70 D.7086 ] [70]))) mABM.c:169 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.7086 ] [70])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.7086 ] [63])
            (nil))))
(insn 37 36 38 3 (set (reg:XF 8 st [orig:72 D.7086 ] [72])
        (minus:XF (reg:XF 9 st(1) [orig:62 D.7086 ] [62])
            (reg:XF 8 st [orig:71 D.7086 ] [71]))) mABM.c:169 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.7086 ] [71])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.7086 ] [62])
            (nil))))
(insn 38 37 39 3 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])) mABM.c:169 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 3 (set (mem:XF (reg/f:DI 0 ax [114]) [0 *t_c_6(D)+0 S16 A128])
        (reg:XF 8 st [orig:72 D.7086 ] [72])) mABM.c:169 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.7086 ] [72])
            (nil))))
(insn 40 39 41 3 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [orig:73 D.7085 ] [73])
        (mem:SI (reg/f:DI 0 ax [115]) [0 *j_9(D)+0 S4 A32])) mABM.c:170 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (nil)))
(insn 42 41 43 3 (parallel [
            (set (reg:SI 1 dx [orig:74 D.7085 ] [74])
                (plus:SI (reg:SI 0 ax [orig:73 D.7085 ] [73])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:170 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 D.7085 ] [73])
        (nil)))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 3 (set (mem:SI (reg/f:DI 0 ax [116]) [0 *j_9(D)+0 S4 A32])
        (reg:SI 1 dx [orig:74 D.7085 ] [74])) mABM.c:170 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:74 D.7085 ] [74])
            (nil))))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:171 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 3 (set (reg:SI 0 ax [orig:75 D.7085 ] [75])
        (mem:SI (reg/f:DI 0 ax [117]) [0 *j_9(D)+0 S4 A32])) mABM.c:171 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg:SI 1 dx [orig:76 D.7085 ] [76])
                (plus:SI (reg:SI 0 ax [orig:75 D.7085 ] [75])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:171 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:75 D.7085 ] [75])
        (nil)))
(insn 48 47 49 3 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 n_nvp+0 S4 A64])) mABM.c:171 89 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (reg:SI 0 ax [orig:77 D.7085 ] [77])
                (plus:SI (reg:SI 0 ax [118])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:171 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                        (const_int 16 [0x10])) [0 n_nvp+0 S4 A64])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 50 49 51 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:76 D.7085 ] [76])
            (reg:SI 0 ax [orig:77 D.7085 ] [77]))) mABM.c:171 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.7085 ] [77])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:76 D.7085 ] [76])
            (nil))))
(jump_insn 51 50 52 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) mABM.c:171 612 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 52 51 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 149 4 (set (reg:SI 0 ax [orig:59 D.7085 ] [59])
        (const_int 0 [0])) mABM.c:172 89 {*movsi_internal}
     (nil))
(jump_insn 149 53 150 4 (set (pc)
        (label_ref 133)) mABM.c:172 650 {jump}
     (nil)
 -> 133)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 150 149 56)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
(code_label 56 150 57 5 56 "" [1 uses])
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:173 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (set (reg:SI 0 ax [orig:78 D.7085 ] [78])
        (mem:SI (reg/f:DI 0 ax [119]) [0 *j_9(D)+0 S4 A32])) mABM.c:173 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (nil)))
(insn 60 59 155 5 (set (reg:DI 0 ax [orig:79 D.7087 ] [79])
        (sign_extend:DI (reg:SI 0 ax [orig:78 D.7085 ] [78]))) mABM.c:173 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 D.7085 ] [78])
        (nil)))
(insn 155 60 61 5 (set (reg:DI 0 ax [orig:80 D.7087 ] [80])
        (reg:DI 0 ax [orig:79 D.7087 ] [79])) mABM.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.7087 ] [79])
        (nil)))
(insn 61 155 156 5 (parallel [
            (set (reg:DI 0 ax [orig:80 D.7087 ] [80])
                (ashift:DI (reg:DI 0 ax [orig:80 D.7087 ] [80])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:173 513 {*ashldi3_1}
     (nil))
(insn 156 61 62 5 (set (reg:DI 1 dx [orig:80 D.7087 ] [80])
        (reg:DI 0 ax [orig:80 D.7087 ] [80])) mABM.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7087 ] [80])
        (nil)))
(insn 62 156 63 5 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 time+0 S8 A64])) mABM.c:173 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg/f:DI 1 dx [orig:81 D.7088 ] [81])
                (plus:DI (reg:DI 1 dx [orig:80 D.7087 ] [80])
                    (reg/f:DI 0 ax [120])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:173 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [120])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7087 ] [80])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                            (const_int 24 [0x18])) [0 time+0 S8 A64])
                    (reg:DI 1 dx [orig:80 D.7087 ] [80]))
                (nil)))))
(insn 64 63 65 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])) mABM.c:173 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 5 (set (reg:XF 8 st [orig:82 D.7086 ] [82])
        (mem:XF (reg/f:DI 0 ax [121]) [0 *t_c_6(D)+0 S16 A128])) mABM.c:173 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (nil)))
(insn 66 65 67 5 (set (reg:XF 9 st(1) [122])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 t+0 S16 A128])) mABM.c:173 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 5 (set (reg:XF 8 st [orig:83 D.7086 ] [83])
        (minus:XF (reg:XF 9 st(1) [122])
            (reg:XF 8 st [orig:82 D.7086 ] [82]))) mABM.c:173 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [122])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.7086 ] [82])
            (nil))))
(insn 68 67 69 5 (set (mem:XF (reg/f:DI 1 dx [orig:81 D.7088 ] [81]) [0 *_32+0 S16 A128])
        (reg:XF 8 st [orig:83 D.7086 ] [83])) mABM.c:173 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.7086 ] [83])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:81 D.7088 ] [81])
            (nil))))
(insn 69 68 70 5 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 5 (set (reg:SI 0 ax [orig:84 D.7085 ] [84])
        (mem:SI (reg/f:DI 0 ax [123]) [0 *j_9(D)+0 S4 A32])) mABM.c:174 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [123])
        (nil)))
(insn 71 70 157 5 (set (reg:DI 0 ax [orig:85 D.7087 ] [85])
        (sign_extend:DI (reg:SI 0 ax [orig:84 D.7085 ] [84]))) mABM.c:174 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.7085 ] [84])
        (nil)))
(insn 157 71 72 5 (set (reg:DI 0 ax [orig:86 D.7087 ] [86])
        (reg:DI 0 ax [orig:85 D.7087 ] [85])) mABM.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.7087 ] [85])
        (nil)))
(insn 72 157 158 5 (parallel [
            (set (reg:DI 0 ax [orig:86 D.7087 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:86 D.7087 ] [86])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:174 513 {*ashldi3_1}
     (nil))
(insn 158 72 73 5 (set (reg:DI 1 dx [orig:86 D.7087 ] [86])
        (reg:DI 0 ax [orig:86 D.7087 ] [86])) mABM.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:86 D.7087 ] [86])
        (nil)))
(insn 73 158 74 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])) mABM.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 5 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.7088 ] [87])
                (plus:DI (reg/f:DI 0 ax [124])
                    (reg:DI 1 dx [orig:86 D.7087 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:174 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:86 D.7087 ] [86])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:86 D.7087 ] [86]))
                (nil)))))
(insn 75 74 76 5 (set (reg:XF 9 st(1) [orig:88 D.7086 ] [88])
        (mem:XF (reg/f:DI 0 ax [orig:87 D.7088 ] [87]) [0 *_39+0 S16 A128])) mABM.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7088 ] [87])
        (nil)))
(insn 76 75 77 5 (set (reg:XF 10 st(2) [125])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 dV+0 S16 A128])) mABM.c:174 131 {*movxf_internal_rex64}
     (nil))
(insn 77 76 78 5 (set (reg:XF 8 st [126])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 78 77 79 5 (set (reg:XF 8 st [orig:89 D.7086 ] [89])
        (plus:XF (reg:XF 8 st [126])
            (reg:XF 10 st(2) [125]))) mABM.c:174 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [126])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [125])
            (nil))))
(insn 79 78 80 5 (set (reg:XF 9 st(1) [orig:90 D.7086 ] [90])
        (mult:XF (reg:XF 9 st(1) [orig:88 D.7086 ] [88])
            (reg:XF 8 st [orig:89 D.7086 ] [89]))) mABM.c:174 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.7086 ] [89])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:88 D.7086 ] [88])
            (nil))))
(insn 80 79 81 5 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])) mABM.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 5 (set (reg:XF 8 st [orig:91 D.7086 ] [91])
        (mem:XF (reg/f:DI 0 ax [127]) [0 *t_c_6(D)+0 S16 A128])) mABM.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [127])
        (nil)))
(insn 82 81 83 5 (set (reg:XF 8 st [orig:92 D.7086 ] [92])
        (mult:XF (reg:XF 8 st [orig:91 D.7086 ] [91])
            (reg:XF 9 st(1) [orig:90 D.7086 ] [90]))) mABM.c:174 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:91 D.7086 ] [91])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:90 D.7086 ] [90])
            (nil))))
(insn 83 82 84 5 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 d+0 S8 A64])) mABM.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 5 (set (mem:XF (reg/f:DI 0 ax [128]) [0 *d_2(D)+0 S16 A128])
        (reg:XF 8 st [orig:92 D.7086 ] [92])) mABM.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [128])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7086 ] [92])
            (nil))))
(insn 85 84 86 5 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 5 (set (reg:SI 0 ax [orig:93 D.7085 ] [93])
        (mem:SI (reg/f:DI 0 ax [129]) [0 *j_9(D)+0 S4 A32])) mABM.c:175 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [129])
        (nil)))
(insn 87 86 88 5 (set (reg:DI 0 ax [orig:94 D.7089 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.7085 ] [93]))) mABM.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.7085 ] [93])
        (nil)))
(insn 88 87 89 5 (parallel [
            (set (reg:DI 0 ax [orig:95 D.7089 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.7089 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:175 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:94 D.7089 ] [94])
        (nil)))
(insn 89 88 90 5 (parallel [
            (set (reg:DI 1 dx [orig:96 D.7089 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.7089 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:175 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:95 D.7089 ] [95])
        (nil)))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 91 90 92 5 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.7090 ] [97])
                (plus:DI (reg/f:DI 0 ax [130])
                    (reg:DI 1 dx [orig:96 D.7089 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:175 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [130])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.7089 ] [96])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:96 D.7089 ] [96]))
                (nil)))))
(insn 92 91 93 5 (set (reg/f:DI 1 dx [orig:98 D.7088 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 D.7090 ] [97]) [0 *_50+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7090 ] [97])
        (nil)))
(insn 93 92 94 5 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 94 93 95 5 (set (reg:SI 0 ax [orig:99 D.7085 ] [99])
        (mem:SI (reg/f:DI 0 ax [131]) [0 *j_9(D)+0 S4 A32])) mABM.c:175 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [131])
        (nil)))
(insn 95 94 96 5 (set (reg:DI 0 ax [orig:100 D.7087 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 D.7085 ] [99]))) mABM.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:99 D.7085 ] [99])
        (nil)))
(insn 96 95 97 5 (parallel [
            (set (reg:DI 2 cx [orig:101 D.7087 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.7087 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:175 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:100 D.7087 ] [100])
        (nil)))
(insn 97 96 98 5 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 5 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.7090 ] [102])
                (plus:DI (reg/f:DI 0 ax [132])
                    (reg:DI 2 cx [orig:101 D.7087 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:175 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [132])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:101 D.7087 ] [101])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])
                    (reg:DI 2 cx [orig:101 D.7087 ] [101]))
                (nil)))))
(insn 99 98 100 5 (set (reg/f:DI 0 ax [orig:103 D.7088 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [orig:102 D.7090 ] [102]) [0 *_55+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.7090 ] [102])
        (nil)))
(insn 100 99 101 5 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:98 D.7088 ] [98])) mABM.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:98 D.7088 ] [98])
        (nil)))
(insn 101 100 102 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 D.7088 ] [103])) mABM.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.7088 ] [103])
        (nil)))
(call_insn 102 101 103 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:175 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 103 102 104 5 (set (reg:XF 8 st [orig:104 D.7086 ] [104])
        (reg:XF 8 st)) mABM.c:175 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 104 103 105 5 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 l_nvp+0 S8 A64])) mABM.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 5 (set (mem:XF (reg/f:DI 0 ax [133]) [0 *l_nvp_4(D)+0 S16 A128])
        (reg:XF 8 st [orig:104 D.7086 ] [104])) mABM.c:175 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:104 D.7086 ] [104])
            (nil))))
(insn 106 105 107 5 (set (reg:DI 38 r9 [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 j+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 5 (set (reg:DI 37 r8 [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 l_nvp+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 108 107 109 5 (set (reg:DI 2 cx [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 nvp+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 5 (set (reg:DI 39 r10 [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 vel+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 110 109 111 5 (set (reg:DI 4 si [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_c+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 5 (set (reg:DI 5 di [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 d+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 112 111 113 5 (set (reg:XF 0 ax [140])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 t+0 S16 A128])) mABM.c:177 131 {*movxf_internal_rex64}
     (nil))
(insn 113 112 114 5 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 0 ax [140])) mABM.c:177 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [140])
        (nil)))
(insn 114 113 115 5 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 time+0 S8 A64])) mABM.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg/f:DI 0 ax [141])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [141])
        (nil)))
(insn 116 115 117 5 (set (reg:SI 0 ax [142])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 n_nvp+0 S4 A64])) mABM.c:177 89 {*movsi_internal}
     (nil))
(insn 117 116 118 5 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S4 A64])
        (reg:SI 0 ax [142])) mABM.c:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [142])
        (nil)))
(insn 118 117 119 5 (set (reg:XF 0 ax [143])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 dV+0 S16 A128])) mABM.c:177 131 {*movxf_internal_rex64}
     (nil))
(insn 119 118 120 5 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [143])) mABM.c:177 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [143])
        (nil)))
(insn 120 119 121 5 (set (reg:DI 38 r9)
        (reg:DI 38 r9 [134])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [134])
        (nil)))
(insn 121 120 122 5 (set (reg:DI 37 r8)
        (reg:DI 37 r8 [135])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [135])
        (nil)))
(insn 122 121 123 5 (set (reg:DI 2 cx)
        (reg:DI 2 cx [136])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [136])
        (nil)))
(insn 123 122 124 5 (set (reg:DI 1 dx)
        (reg:DI 39 r10 [137])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [137])
        (nil)))
(insn 124 123 125 5 (set (reg:DI 4 si)
        (reg:DI 4 si [138])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [138])
        (nil)))
(insn 125 124 126 5 (set (reg:DI 5 di)
        (reg:DI 5 di [139])) mABM.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [139])
        (nil)))
(call_insn 126 125 127 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_nvp_to_close") [flags 0x3]  <function_decl 0x7f05a56ea900 _nvp_to_close>) [0 _nvp_to_close S1 A8])
            (const_int 48 [0x30]))) mABM.c:177 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 16 [0x10])) [0  S4 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 24 [0x18])) [0  S8 A64]))
                                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 32 [0x20])) [0  S16 A128]))
                                            (nil))))))))))))
(insn 127 126 151 5 (set (reg:SI 0 ax [orig:59 D.7085 ] [59])
        (reg:SI 0 ax)) mABM.c:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn 151 127 152 5 (set (pc)
        (label_ref 133)) mABM.c:177 650 {jump}
     (nil)
 -> 133)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 152 151 148)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 148 152 131 6 59 "" [1 uses])
(note 131 148 132 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 6 (set (reg:SI 0 ax [orig:59 D.7085 ] [59])
        (const_int 1 [0x1])) mABM.c:179 89 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              4 [100.0%] 
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 105
(code_label 133 132 134 7 57 "" [2 uses])
(note 134 133 135 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 139 7 (set (reg:SI 0 ax [orig:105 <retval> ] [105])
        (reg:SI 0 ax [orig:59 D.7085 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7085 ] [59])
        (nil)))
(insn 139 135 142 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:105 <retval> ] [105])) mABM.c:180 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:105 <retval> ] [105])
        (nil)))
(insn 142 139 0 7 (use (reg/i:SI 0 ax)) mABM.c:180 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _position (_position, funcdef_no=11, decl_uid=4154, cgraph_uid=11)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=224, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=192, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=705 from oldreg=66, assigning class FLOAT_REGS to r705
   16: r705:XF=[r65:DI]
      REG_DEAD r65:DI
    Inserting insn reload after:
  938: r66:XF=r705:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 938:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=706 from oldreg=66, assigning class FLOAT_REGS to r706
   41: r518:XF=r82:XF+r706:XF
      REG_DEAD r82:XF
      REG_DEAD r66:XF
    Inserting insn reload before:
  939: r706:XF=r66:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 95:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 935:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 936:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 937:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=707 from oldreg=105, assigning class GENERAL_REGS to r707
  110: {r707:DI=r707:DI<<0x4;clobber flags:CC;}
      REG_DEAD r104:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  940: r707:DI=r104:DI
    Inserting insn reload after:
  941: r105:DI=r707:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 112
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 115:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=708 from oldreg=119, assigning class GENERAL_REGS to r708
  134: {r708:DI=r708:DI<<0x4;clobber flags:CC;}
      REG_DEAD r118:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  942: r708:DI=r118:DI
    Inserting insn reload after:
  943: r119:DI=r708:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 928:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 153:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 155:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 160:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 176:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 182
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 184:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 186:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 194:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 196:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 204:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 206:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 207:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=709 from oldreg=164, assigning class GENERAL_REGS to r709
  223: {r709:DI=r709:DI<<0x4;clobber flags:CC;}
      REG_DEAD r163:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  944: r709:DI=r163:DI
    Inserting insn reload after:
  945: r164:DI=r709:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 225
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 927:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 252:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 254
	 Choosing alt 0 in insn 254:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 257:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 261:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 268:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 285:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 291:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 296:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 299:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 301:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 308:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 309:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 311:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 317
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 318:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 319:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 321:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 322:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 340:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 341:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 342
	 Choosing alt 0 in insn 342:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 355
	 Choosing alt 0 in insn 355:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 356:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 359:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=710 from oldreg=230, assigning class GENERAL_REGS to r710
  359: {r710:DI=r710:DI<<0x4;clobber flags:CC;}
      REG_DEAD r229:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  946: r710:DI=r229:DI
    Inserting insn reload after:
  947: r230:DI=r710:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 361
	 Choosing alt 0 in insn 361:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 363:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 364:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 372:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 374
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 376:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 384:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 388:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 390
	 Choosing alt 0 in insn 390:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 391:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 392:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 397
	 Choosing alt 0 in insn 397:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 400:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 409:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 410
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 415:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 418:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 423
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 427:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=711 from oldreg=274, assigning class GENERAL_REGS to r711
  427: {r711:DI=r711:DI<<0x4;clobber flags:CC;}
      REG_DEAD r273:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  948: r711:DI=r273:DI
    Inserting insn reload after:
  949: r274:DI=r711:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 429
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 432:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 433:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 441:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 443
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 444:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 445:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 450
	 Choosing alt 0 in insn 450:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 453:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 457:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 459
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 461:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 464:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 465:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 466
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 469:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 472:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=712 from oldreg=304, assigning class GENERAL_REGS to r712
  487: {r712:DI=r712:DI<<0x4;clobber flags:CC;}
      REG_DEAD r303:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  950: r712:DI=r303:DI
    Inserting insn reload after:
  951: r304:DI=r712:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 489
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 493
	 Choosing alt 0 in insn 493:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 494:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 496:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 515:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=713 from oldreg=320, assigning class GENERAL_REGS to r713
  515: {r713:DI=r713:DI<<0x4;clobber flags:CC;}
      REG_DEAD r319:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  952: r713:DI=r319:DI
    Inserting insn reload after:
  953: r320:DI=r713:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 516:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 517
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 522
	 Choosing alt 0 in insn 522:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 523:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 524:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 526:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 529:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 926:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 538:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 540:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 545:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 555:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 556:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 557:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 558
	 Choosing alt 0 in insn 558:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 560:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 561:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 564:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 565:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 567
	 Choosing alt 0 in insn 567:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 568:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 569:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 570:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 571:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 574:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 576:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 577
	 Choosing alt 0 in insn 577:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 578:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 579:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 580:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 581:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 585:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 586:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 587
	 Choosing alt 0 in insn 587:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 588:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 589:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 590:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 591:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 592:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 596:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 598:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 608:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=714 from oldreg=367, assigning class GENERAL_REGS to r714
  608: {r714:DI=r714:DI<<0x4;clobber flags:CC;}
      REG_DEAD r366:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  954: r714:DI=r366:DI
    Inserting insn reload after:
  955: r367:DI=r714:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 610
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 614
	 Choosing alt 0 in insn 614:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 615:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 617
	 Choosing alt 0 in insn 617:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 618:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 621:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 622:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 624
	 Choosing alt 0 in insn 624:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 625:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 629:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 630
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 631:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 636:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 925:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 641:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 643
	 Choosing alt 0 in insn 643:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 644:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 646:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 647:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 648:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 650:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 651:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 653:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 655:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 657:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 676:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 677
	 Choosing alt 0 in insn 677:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 678:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 679:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 680:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 683:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 685:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 686
	 Choosing alt 0 in insn 686:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 688:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 690:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 693:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 696
	 Choosing alt 0 in insn 696:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 697:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 698:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 699:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 700:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 703:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 705:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 706
	 Choosing alt 0 in insn 706:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 707:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 708:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 710:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 711:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 715:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 717:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 725:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 727:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 728:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 729:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 730:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 731
	 Choosing alt 0 in insn 731:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 732:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 734:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 736:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 737:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 738
	 Choosing alt 0 in insn 738:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 741:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 742:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 744
	 Choosing alt 0 in insn 744:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 745:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 747:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 748:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=715 from oldreg=435, assigning class GENERAL_REGS to r715
  748: {r715:DI=r715:DI<<0x4;clobber flags:CC;}
      REG_DEAD r434:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  956: r715:DI=r434:DI
    Inserting insn reload after:
  957: r435:DI=r715:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 750
	 Choosing alt 0 in insn 750:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 753:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 754
	 Choosing alt 0 in insn 754:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 755
	 Choosing alt 0 in insn 755:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 756:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 757:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 763:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 764:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 765:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 766:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 767
	 Choosing alt 0 in insn 767:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 769:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 772:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 773:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 774
	 Choosing alt 0 in insn 774:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 777:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 780:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 781:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 782:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 783
	 Choosing alt 0 in insn 783:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 784:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 785:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 786:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 788:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 789:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 790
	 Choosing alt 0 in insn 790:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 791:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 793:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 800:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 801:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 802:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 803
	 Choosing alt 0 in insn 803:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 804:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 805:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 807:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 808:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 809:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 810
	 Choosing alt 0 in insn 810:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 811:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 814:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 815:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 816
	 Choosing alt 0 in insn 816:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 817:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 820:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=716 from oldreg=481, assigning class GENERAL_REGS to r716
  820: {r716:DI=r716:DI<<0x4;clobber flags:CC;}
      REG_DEAD r480:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  958: r716:DI=r480:DI
    Inserting insn reload after:
  959: r481:DI=r716:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 821:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 822
	 Choosing alt 0 in insn 822:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 824:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 826
	 Choosing alt 0 in insn 826:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 827
	 Choosing alt 0 in insn 827:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 828:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 829:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 830:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 835:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 837:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 838:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 839:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 840
	 Choosing alt 0 in insn 840:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 841:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 842:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 844:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 845:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 846:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 847
	 Choosing alt 0 in insn 847:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 848:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 849:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 850:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 851:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 853:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 854:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 855:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 856
	 Choosing alt 0 in insn 856:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 857:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 858:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 859:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 860:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 861:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 862:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 863
	 Choosing alt 0 in insn 863:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 864:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 865:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 866:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 869:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 872:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 873:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 875:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=717 from oldreg=66, assigning class FLOAT_REGS to inheritance r717
    Original reg change 66->717 (bb2):
  938: r717:XF=r705:XF
    Add original<-inheritance after:
  960: r66:XF=r717:XF

    Inheritance reuse change 66->717 (bb2):
  939: r706:XF=r717:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   960: r66:XF=r717:XF
deleting insn with uid = 960.
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36

********** Pseudo live ranges #1: **********

  BB 36
   Insn 890: point = 0
   Insn 887: point = 0
   Insn 883: point = 1
  BB 30
   Insn 921: point = 4
   Insn 720: point = 4
  BB 29
   Insn 718: point = 5
   Insn 717: point = 5
   Insn 715: point = 6
   Insn 714: point = 8
  BB 27
   Insn 919: point = 9
  BB 28
   Insn 711: point = 9
   Insn 710: point = 9
   Insn 709: point = 10
   Insn 708: point = 11
   Insn 707: point = 13
   Insn 706: point = 15
   Insn 705: point = 17
   Insn 704: point = 18
   Insn 703: point = 20
   Insn 702: point = 22
   Insn 701: point = 24
   Insn 700: point = 25
   Insn 699: point = 26
   Insn 698: point = 27
   Insn 697: point = 29
   Insn 696: point = 31
   Insn 695: point = 33
   Insn 694: point = 34
   Insn 693: point = 36
   Insn 692: point = 38
   Insn 691: point = 40
   Insn 690: point = 41
   Insn 689: point = 42
   Insn 688: point = 43
   Insn 687: point = 45
   Insn 686: point = 47
   Insn 685: point = 49
   Insn 684: point = 50
   Insn 683: point = 52
   Insn 682: point = 54
   Insn 681: point = 56
   Insn 680: point = 57
   Insn 679: point = 58
   Insn 678: point = 59
   Insn 677: point = 61
   Insn 676: point = 63
   Insn 675: point = 64
   Insn 674: point = 66
   Insn 673: point = 68
   Insn 672: point = 70
  BB 14
   Insn 908: point = 71
   Insn 331: point = 71
  BB 13
   Insn 329: point = 72
   Insn 328: point = 72
   Insn 326: point = 73
   Insn 325: point = 75
  BB 11
   Insn 906: point = 76
  BB 12
   Insn 322: point = 76
   Insn 321: point = 76
   Insn 320: point = 77
   Insn 319: point = 78
   Insn 318: point = 80
   Insn 317: point = 82
   Insn 316: point = 84
   Insn 315: point = 85
   Insn 314: point = 87
   Insn 313: point = 89
   Insn 312: point = 91
   Insn 311: point = 92
   Insn 310: point = 93
   Insn 309: point = 94
   Insn 308: point = 96
   Insn 307: point = 98
   Insn 306: point = 100
   Insn 305: point = 101
   Insn 304: point = 103
   Insn 303: point = 105
   Insn 302: point = 107
   Insn 301: point = 108
   Insn 300: point = 109
   Insn 299: point = 110
   Insn 298: point = 112
   Insn 297: point = 114
   Insn 296: point = 116
   Insn 295: point = 117
   Insn 294: point = 119
   Insn 293: point = 121
   Insn 292: point = 123
   Insn 291: point = 124
   Insn 290: point = 125
   Insn 289: point = 126
   Insn 288: point = 128
   Insn 287: point = 130
   Insn 286: point = 131
   Insn 285: point = 133
   Insn 284: point = 135
   Insn 283: point = 137
  BB 9
   Insn 904: point = 138
   Insn 216: point = 138
  BB 8
   Insn 214: point = 139
   Insn 213: point = 139
   Insn 211: point = 140
   Insn 210: point = 142
  BB 6
   Insn 902: point = 143
  BB 7
   Insn 207: point = 143
   Insn 206: point = 143
   Insn 205: point = 144
   Insn 204: point = 145
   Insn 203: point = 147
   Insn 202: point = 149
   Insn 201: point = 151
   Insn 200: point = 152
   Insn 199: point = 154
   Insn 198: point = 156
   Insn 197: point = 158
   Insn 196: point = 159
   Insn 195: point = 160
   Insn 194: point = 161
   Insn 193: point = 163
   Insn 192: point = 165
   Insn 191: point = 167
   Insn 190: point = 168
   Insn 189: point = 170
   Insn 188: point = 172
   Insn 187: point = 174
   Insn 186: point = 175
   Insn 185: point = 176
   Insn 184: point = 177
   Insn 183: point = 179
   Insn 182: point = 181
   Insn 181: point = 183
   Insn 180: point = 184
   Insn 179: point = 186
   Insn 178: point = 188
   Insn 177: point = 190
   Insn 176: point = 191
   Insn 175: point = 192
   Insn 174: point = 193
   Insn 173: point = 195
   Insn 172: point = 197
   Insn 171: point = 198
   Insn 170: point = 200
   Insn 169: point = 202
   Insn 168: point = 204
  BB 25
   Insn 917: point = 205
   Insn 601: point = 205
  BB 24
   Insn 599: point = 206
   Insn 598: point = 206
   Insn 596: point = 207
   Insn 595: point = 209
  BB 22
   Insn 915: point = 210
  BB 23
   Insn 592: point = 210
   Insn 591: point = 210
   Insn 590: point = 211
   Insn 589: point = 212
   Insn 588: point = 214
   Insn 587: point = 216
   Insn 586: point = 218
   Insn 585: point = 219
   Insn 584: point = 221
   Insn 583: point = 223
   Insn 582: point = 225
   Insn 581: point = 226
   Insn 580: point = 227
   Insn 579: point = 228
   Insn 578: point = 230
   Insn 577: point = 232
   Insn 576: point = 234
   Insn 575: point = 235
   Insn 574: point = 237
   Insn 573: point = 239
   Insn 572: point = 241
   Insn 571: point = 242
   Insn 570: point = 243
   Insn 569: point = 244
   Insn 568: point = 246
   Insn 567: point = 248
   Insn 566: point = 250
   Insn 565: point = 251
   Insn 564: point = 253
   Insn 563: point = 255
   Insn 562: point = 257
   Insn 561: point = 258
   Insn 560: point = 259
   Insn 559: point = 260
   Insn 558: point = 262
   Insn 557: point = 264
   Insn 556: point = 265
   Insn 555: point = 267
   Insn 554: point = 269
   Insn 553: point = 271
  BB 35
   Insn 878: point = 272
  BB 34
   Insn 876: point = 273
   Insn 875: point = 273
   Insn 873: point = 274
   Insn 872: point = 276
  BB 19
   Insn 912: point = 277
   Insn 481: point = 277
   Insn 480: point = 278
  BB 18
   Insn 478: point = 279
   Insn 477: point = 279
   Insn 476: point = 280
  BB 2
   Insn 899: point = 281
   Insn 104: point = 281
   Insn 103: point = 282
   Insn 102: point = 283
   Insn 101: point = 284
   Insn 100: point = 286
   Insn 99: point = 287
   Insn 929: point = 287
   Insn 937: point = 288
   Insn 936: point = 289
   Insn 935: point = 289
   Insn 934: point = 290
   Insn 97: point = 290
   Insn 96: point = 292
   Insn 95: point = 293
   Insn 94: point = 295
   Insn 93: point = 296
   Insn 92: point = 297
   Insn 91: point = 298
   Insn 90: point = 299
   Insn 89: point = 299
   Insn 88: point = 300
   Insn 87: point = 301
   Insn 86: point = 302
   Insn 85: point = 304
   Insn 84: point = 306
   Insn 83: point = 307
   Insn 82: point = 309
   Insn 81: point = 311
   Insn 80: point = 312
   Insn 79: point = 313
   Insn 78: point = 315
   Insn 77: point = 316
   Insn 76: point = 318
   Insn 75: point = 320
   Insn 74: point = 321
   Insn 73: point = 322
   Insn 72: point = 324
   Insn 71: point = 325
   Insn 70: point = 327
   Insn 69: point = 329
   Insn 68: point = 330
   Insn 67: point = 331
   Insn 66: point = 333
   Insn 65: point = 334
   Insn 64: point = 336
   Insn 63: point = 338
   Insn 62: point = 339
   Insn 61: point = 340
   Insn 60: point = 342
   Insn 59: point = 343
   Insn 58: point = 345
   Insn 57: point = 346
   Insn 56: point = 347
   Insn 55: point = 349
   Insn 54: point = 350
   Insn 53: point = 351
   Insn 52: point = 353
   Insn 51: point = 354
   Insn 50: point = 355
   Insn 49: point = 357
   Insn 48: point = 358
   Insn 47: point = 359
   Insn 46: point = 361
   Insn 45: point = 362
   Insn 44: point = 363
   Insn 43: point = 365
   Insn 42: point = 366
   Insn 41: point = 367
   Insn 939: point = 369
	   Creating copy r706<-r717@1
   Insn 40: point = 371
   Insn 39: point = 373
   Insn 38: point = 375
   Insn 37: point = 377
   Insn 36: point = 379
   Insn 35: point = 381
   Insn 34: point = 383
   Insn 33: point = 385
   Insn 32: point = 386
   Insn 31: point = 388
   Insn 30: point = 389
   Insn 29: point = 390
   Insn 28: point = 390
   Insn 27: point = 391
   Insn 26: point = 392
   Insn 25: point = 393
   Insn 24: point = 395
   Insn 23: point = 397
   Insn 22: point = 399
   Insn 21: point = 401
   Insn 20: point = 403
   Insn 19: point = 405
   Insn 18: point = 406
   Insn 17: point = 408
   Insn 938: point = 409
	   Creating copy r705->r717@1
   Insn 16: point = 411
   Insn 15: point = 413
   Insn 14: point = 415
   Insn 13: point = 417
   Insn 12: point = 419
   Insn 11: point = 421
   Insn 10: point = 423
   Insn 9: point = 424
   Insn 8: point = 426
   Insn 4: point = 427
   Insn 3: point = 427
   Insn 2: point = 427
  BB 17
   Insn 472: point = 427
  BB 15
   Insn 910: point = 427
   Insn 400: point = 427
   Insn 399: point = 428
   Insn 398: point = 430
   Insn 397: point = 432
   Insn 396: point = 434
   Insn 395: point = 435
   Insn 394: point = 437
   Insn 393: point = 439
   Insn 392: point = 440
   Insn 391: point = 442
   Insn 390: point = 444
   Insn 389: point = 446
   Insn 388: point = 447
   Insn 387: point = 449
   Insn 386: point = 451
   Insn 385: point = 453
   Insn 384: point = 454
   Insn 383: point = 455
   Insn 382: point = 457
   Insn 381: point = 459
   Insn 380: point = 461
   Insn 379: point = 462
   Insn 378: point = 464
   Insn 377: point = 466
   Insn 376: point = 467
   Insn 375: point = 469
   Insn 374: point = 471
   Insn 373: point = 473
   Insn 372: point = 474
   Insn 371: point = 476
   Insn 370: point = 478
   Insn 369: point = 480
   Insn 368: point = 481
   Insn 367: point = 481
   Insn 366: point = 482
   Insn 365: point = 483
   Insn 364: point = 484
   Insn 363: point = 485
   Insn 362: point = 486
   Insn 361: point = 488
   Insn 360: point = 490
   Insn 947: point = 491
	Hard reg 1 is preferable by r710 with profit 1
   Insn 359: point = 493
   Insn 946: point = 493
	Hard reg 1 is preferable by r710 with profit 1
	Hard reg 0 is preferable by r710 with profit 1
   Insn 358: point = 495
   Insn 357: point = 497
   Insn 356: point = 498
   Insn 355: point = 500
   Insn 354: point = 502
   Insn 353: point = 503
   Insn 352: point = 505
   Insn 351: point = 507
   Insn 350: point = 508
   Insn 349: point = 510
   Insn 348: point = 512
   Insn 347: point = 513
   Insn 346: point = 515
   Insn 345: point = 517
   Insn 344: point = 519
   Insn 343: point = 520
   Insn 342: point = 522
   Insn 341: point = 524
   Insn 340: point = 525
   Insn 339: point = 527
   Insn 338: point = 529
   Insn 337: point = 531
   Insn 336: point = 532
  BB 10
   Insn 278: point = 533
   Insn 277: point = 533
   Insn 276: point = 534
   Insn 275: point = 535
   Insn 274: point = 535
   Insn 273: point = 536
   Insn 272: point = 537
   Insn 271: point = 538
   Insn 270: point = 539
   Insn 269: point = 540
   Insn 268: point = 541
   Insn 267: point = 542
   Insn 266: point = 543
   Insn 265: point = 544
   Insn 264: point = 545
   Insn 263: point = 546
   Insn 262: point = 547
   Insn 261: point = 548
   Insn 260: point = 549
   Insn 259: point = 550
   Insn 258: point = 551
   Insn 257: point = 552
   Insn 256: point = 553
   Insn 255: point = 555
   Insn 254: point = 556
   Insn 253: point = 558
   Insn 252: point = 559
   Insn 251: point = 561
   Insn 927: point = 562
   Insn 249: point = 564
   Insn 248: point = 566
   Insn 247: point = 567
   Insn 246: point = 568
   Insn 245: point = 569
   Insn 244: point = 569
   Insn 243: point = 570
   Insn 242: point = 571
   Insn 241: point = 573
   Insn 240: point = 575
   Insn 239: point = 576
   Insn 238: point = 578
   Insn 237: point = 580
   Insn 236: point = 581
   Insn 235: point = 583
   Insn 234: point = 585
   Insn 233: point = 586
   Insn 232: point = 588
   Insn 231: point = 590
   Insn 230: point = 592
   Insn 229: point = 593
   Insn 228: point = 594
   Insn 227: point = 596
   Insn 226: point = 597
   Insn 225: point = 599
   Insn 224: point = 601
   Insn 945: point = 602
	Hard reg 1 is preferable by r709 with profit 1
   Insn 223: point = 604
   Insn 944: point = 604
	Hard reg 1 is preferable by r709 with profit 1
	Hard reg 0 is preferable by r709 with profit 1
   Insn 222: point = 606
   Insn 221: point = 608
  BB 5
   Insn 163: point = 609
   Insn 162: point = 609
   Insn 161: point = 610
   Insn 160: point = 611
   Insn 159: point = 613
   Insn 158: point = 614
   Insn 157: point = 615
   Insn 156: point = 617
   Insn 155: point = 618
   Insn 154: point = 620
   Insn 153: point = 621
   Insn 152: point = 623
   Insn 928: point = 624
   Insn 150: point = 626
   Insn 149: point = 628
   Insn 148: point = 629
   Insn 147: point = 631
   Insn 146: point = 633
   Insn 145: point = 635
   Insn 144: point = 636
   Insn 143: point = 638
   Insn 142: point = 639
   Insn 141: point = 640
   Insn 140: point = 642
   Insn 139: point = 643
   Insn 138: point = 644
   Insn 137: point = 646
   Insn 136: point = 648
   Insn 135: point = 650
   Insn 943: point = 651
	Hard reg 1 is preferable by r708 with profit 1
   Insn 134: point = 653
   Insn 942: point = 653
	Hard reg 1 is preferable by r708 with profit 1
	Hard reg 0 is preferable by r708 with profit 1
   Insn 133: point = 655
   Insn 132: point = 657
   Insn 131: point = 658
   Insn 130: point = 659
   Insn 129: point = 660
   Insn 128: point = 662
   Insn 127: point = 663
  BB 16
   Insn 469: point = 664
   Insn 468: point = 665
   Insn 467: point = 667
   Insn 466: point = 669
   Insn 465: point = 671
   Insn 464: point = 672
   Insn 463: point = 674
   Insn 462: point = 676
   Insn 461: point = 677
   Insn 460: point = 679
   Insn 459: point = 681
   Insn 458: point = 683
   Insn 457: point = 684
   Insn 456: point = 686
   Insn 455: point = 688
   Insn 454: point = 690
   Insn 453: point = 691
   Insn 452: point = 692
   Insn 451: point = 694
   Insn 450: point = 696
   Insn 449: point = 698
   Insn 448: point = 699
   Insn 447: point = 701
   Insn 446: point = 703
   Insn 445: point = 704
   Insn 444: point = 706
   Insn 443: point = 708
   Insn 442: point = 710
   Insn 441: point = 711
   Insn 440: point = 713
   Insn 439: point = 715
   Insn 438: point = 717
   Insn 437: point = 718
   Insn 436: point = 718
   Insn 435: point = 719
   Insn 434: point = 720
   Insn 433: point = 721
   Insn 432: point = 722
   Insn 431: point = 723
   Insn 430: point = 724
   Insn 429: point = 726
   Insn 428: point = 728
   Insn 949: point = 729
	Hard reg 1 is preferable by r711 with profit 1
   Insn 427: point = 731
   Insn 948: point = 731
	Hard reg 1 is preferable by r711 with profit 1
	Hard reg 0 is preferable by r711 with profit 1
   Insn 426: point = 733
   Insn 425: point = 735
   Insn 424: point = 736
   Insn 423: point = 738
   Insn 422: point = 740
   Insn 421: point = 741
   Insn 420: point = 743
   Insn 419: point = 745
   Insn 418: point = 746
   Insn 417: point = 748
   Insn 416: point = 750
   Insn 415: point = 751
   Insn 414: point = 753
   Insn 413: point = 755
   Insn 412: point = 757
   Insn 411: point = 758
   Insn 410: point = 760
   Insn 409: point = 762
   Insn 408: point = 763
   Insn 407: point = 765
   Insn 406: point = 767
   Insn 405: point = 769
  BB 4
   Insn 122: point = 770
   Insn 121: point = 770
   Insn 120: point = 771
   Insn 119: point = 772
   Insn 118: point = 773
   Insn 117: point = 774
   Insn 116: point = 776
   Insn 115: point = 777
   Insn 114: point = 779
   Insn 113: point = 780
   Insn 112: point = 782
   Insn 111: point = 784
   Insn 941: point = 785
	Hard reg 1 is preferable by r707 with profit 1
   Insn 110: point = 787
   Insn 940: point = 787
	Hard reg 1 is preferable by r707 with profit 1
	Hard reg 0 is preferable by r707 with profit 1
   Insn 109: point = 789
   Insn 108: point = 791
  BB 33
   Insn 869: point = 792
  BB 31
   Insn 923: point = 792
   Insn 793: point = 792
   Insn 792: point = 793
   Insn 791: point = 795
   Insn 790: point = 797
   Insn 789: point = 799
   Insn 788: point = 800
   Insn 787: point = 802
   Insn 786: point = 804
   Insn 785: point = 805
   Insn 784: point = 807
   Insn 783: point = 809
   Insn 782: point = 811
   Insn 781: point = 812
   Insn 780: point = 814
   Insn 779: point = 816
   Insn 778: point = 818
   Insn 777: point = 819
   Insn 776: point = 820
   Insn 775: point = 822
   Insn 774: point = 824
   Insn 773: point = 826
   Insn 772: point = 827
   Insn 771: point = 829
   Insn 770: point = 831
   Insn 769: point = 832
   Insn 768: point = 834
   Insn 767: point = 836
   Insn 766: point = 838
   Insn 765: point = 839
   Insn 764: point = 841
   Insn 763: point = 843
   Insn 762: point = 845
   Insn 761: point = 846
   Insn 760: point = 846
   Insn 759: point = 847
   Insn 758: point = 848
   Insn 757: point = 849
   Insn 756: point = 850
   Insn 755: point = 851
   Insn 754: point = 853
   Insn 753: point = 855
   Insn 752: point = 856
   Insn 751: point = 857
   Insn 750: point = 859
   Insn 749: point = 861
   Insn 957: point = 862
	Hard reg 38 is preferable by r715 with profit 1
   Insn 748: point = 864
   Insn 956: point = 864
	Hard reg 38 is preferable by r715 with profit 1
	Hard reg 37 is preferable by r715 with profit 1
   Insn 747: point = 866
   Insn 746: point = 868
   Insn 745: point = 869
   Insn 744: point = 871
   Insn 743: point = 873
   Insn 742: point = 874
   Insn 741: point = 876
   Insn 740: point = 878
   Insn 739: point = 879
   Insn 738: point = 881
   Insn 737: point = 883
   Insn 736: point = 884
   Insn 735: point = 886
   Insn 734: point = 888
   Insn 733: point = 890
   Insn 732: point = 891
   Insn 731: point = 893
   Insn 730: point = 895
   Insn 729: point = 896
   Insn 728: point = 898
   Insn 727: point = 900
   Insn 726: point = 902
   Insn 725: point = 903
  BB 26
   Insn 667: point = 904
   Insn 666: point = 904
   Insn 665: point = 905
   Insn 664: point = 906
   Insn 663: point = 906
   Insn 662: point = 907
   Insn 661: point = 908
   Insn 660: point = 909
   Insn 659: point = 910
   Insn 658: point = 911
   Insn 657: point = 912
   Insn 656: point = 913
   Insn 655: point = 914
   Insn 654: point = 915
   Insn 653: point = 916
   Insn 652: point = 917
   Insn 651: point = 918
   Insn 650: point = 919
   Insn 649: point = 920
   Insn 648: point = 921
   Insn 647: point = 922
   Insn 646: point = 923
   Insn 645: point = 924
   Insn 644: point = 926
   Insn 643: point = 927
   Insn 642: point = 929
   Insn 641: point = 930
   Insn 640: point = 932
   Insn 925: point = 933
   Insn 638: point = 935
   Insn 637: point = 937
   Insn 636: point = 938
   Insn 635: point = 939
   Insn 634: point = 940
   Insn 633: point = 940
   Insn 632: point = 941
   Insn 631: point = 942
   Insn 630: point = 944
   Insn 629: point = 946
   Insn 628: point = 947
   Insn 627: point = 949
   Insn 626: point = 951
   Insn 625: point = 952
   Insn 624: point = 954
   Insn 623: point = 956
   Insn 622: point = 957
   Insn 621: point = 959
   Insn 620: point = 961
   Insn 619: point = 963
   Insn 618: point = 964
   Insn 617: point = 965
   Insn 616: point = 967
   Insn 615: point = 968
   Insn 614: point = 970
   Insn 613: point = 972
   Insn 612: point = 973
   Insn 611: point = 974
   Insn 610: point = 976
   Insn 609: point = 978
   Insn 955: point = 979
	Hard reg 1 is preferable by r714 with profit 1
   Insn 608: point = 981
   Insn 954: point = 981
	Hard reg 1 is preferable by r714 with profit 1
	Hard reg 0 is preferable by r714 with profit 1
   Insn 607: point = 983
   Insn 606: point = 985
  BB 21
   Insn 548: point = 986
   Insn 547: point = 986
   Insn 546: point = 987
   Insn 545: point = 988
   Insn 544: point = 990
   Insn 543: point = 991
   Insn 542: point = 992
   Insn 541: point = 994
   Insn 540: point = 995
   Insn 539: point = 997
   Insn 538: point = 998
   Insn 537: point = 1000
   Insn 926: point = 1001
   Insn 535: point = 1003
   Insn 534: point = 1005
   Insn 533: point = 1006
   Insn 532: point = 1008
   Insn 531: point = 1010
   Insn 530: point = 1012
   Insn 529: point = 1013
   Insn 528: point = 1015
   Insn 527: point = 1016
   Insn 526: point = 1017
   Insn 525: point = 1019
   Insn 524: point = 1020
   Insn 523: point = 1021
   Insn 522: point = 1023
   Insn 521: point = 1025
   Insn 520: point = 1027
   Insn 519: point = 1028
   Insn 518: point = 1029
   Insn 517: point = 1031
   Insn 516: point = 1033
   Insn 953: point = 1034
	Hard reg 1 is preferable by r713 with profit 1
   Insn 515: point = 1036
   Insn 952: point = 1036
	Hard reg 1 is preferable by r713 with profit 1
	Hard reg 0 is preferable by r713 with profit 1
   Insn 514: point = 1038
   Insn 513: point = 1040
   Insn 512: point = 1041
   Insn 511: point = 1042
   Insn 510: point = 1043
   Insn 509: point = 1045
   Insn 508: point = 1046
  BB 32
   Insn 866: point = 1047
   Insn 865: point = 1048
   Insn 864: point = 1050
   Insn 863: point = 1052
   Insn 862: point = 1054
   Insn 861: point = 1055
   Insn 860: point = 1057
   Insn 859: point = 1059
   Insn 858: point = 1060
   Insn 857: point = 1062
   Insn 856: point = 1064
   Insn 855: point = 1066
   Insn 854: point = 1067
   Insn 853: point = 1069
   Insn 852: point = 1071
   Insn 851: point = 1073
   Insn 850: point = 1074
   Insn 849: point = 1075
   Insn 848: point = 1077
   Insn 847: point = 1079
   Insn 846: point = 1081
   Insn 845: point = 1082
   Insn 844: point = 1084
   Insn 843: point = 1086
   Insn 842: point = 1087
   Insn 841: point = 1089
   Insn 840: point = 1091
   Insn 839: point = 1093
   Insn 838: point = 1094
   Insn 837: point = 1096
   Insn 836: point = 1098
   Insn 835: point = 1100
   Insn 834: point = 1101
   Insn 833: point = 1101
   Insn 832: point = 1102
   Insn 831: point = 1103
   Insn 830: point = 1104
   Insn 829: point = 1105
   Insn 828: point = 1106
   Insn 827: point = 1107
   Insn 826: point = 1109
   Insn 825: point = 1111
   Insn 824: point = 1112
   Insn 823: point = 1113
   Insn 822: point = 1115
   Insn 821: point = 1117
   Insn 959: point = 1118
	Hard reg 1 is preferable by r716 with profit 1
   Insn 820: point = 1120
   Insn 958: point = 1120
	Hard reg 1 is preferable by r716 with profit 1
	Hard reg 0 is preferable by r716 with profit 1
   Insn 819: point = 1122
   Insn 818: point = 1124
   Insn 817: point = 1125
   Insn 816: point = 1127
   Insn 815: point = 1129
   Insn 814: point = 1130
   Insn 813: point = 1132
   Insn 812: point = 1134
   Insn 811: point = 1135
   Insn 810: point = 1137
   Insn 809: point = 1139
   Insn 808: point = 1140
   Insn 807: point = 1142
   Insn 806: point = 1144
   Insn 805: point = 1146
   Insn 804: point = 1147
   Insn 803: point = 1149
   Insn 802: point = 1151
   Insn 801: point = 1152
   Insn 800: point = 1154
   Insn 799: point = 1156
   Insn 798: point = 1158
  BB 20
   Insn 503: point = 1159
   Insn 502: point = 1159
   Insn 501: point = 1160
   Insn 500: point = 1161
   Insn 499: point = 1162
   Insn 498: point = 1163
   Insn 497: point = 1165
   Insn 496: point = 1166
   Insn 495: point = 1168
   Insn 494: point = 1169
   Insn 493: point = 1171
   Insn 492: point = 1173
   Insn 491: point = 1174
   Insn 490: point = 1175
   Insn 489: point = 1177
   Insn 488: point = 1179
   Insn 951: point = 1180
	Hard reg 1 is preferable by r712 with profit 1
   Insn 487: point = 1182
   Insn 950: point = 1182
	Hard reg 1 is preferable by r712 with profit 1
	Hard reg 0 is preferable by r712 with profit 1
   Insn 486: point = 1184
   Insn 485: point = 1186
 r59: [272..272] [205..205] [138..138] [71..71] [2..4]
 r60: [414..424]
 r61: [420..421]
 r62: [418..419]
 r63: [416..417]
 r64: [414..415]
 r65: [412..413]
 r67: [396..406]
 r68: [402..403]
 r69: [400..401]
 r70: [398..399]
 r71: [396..397]
 r72: [394..395]
 r73: [391..393]
 r74: [372..389]
 r75: [376..386]
 r76: [382..383]
 r77: [380..381]
 r78: [378..379]
 r79: [376..377]
 r80: [374..375]
 r81: [372..373]
 r82: [368..371]
 r83: [339..343]
 r84: [339..340]
 r85: [335..336]
 r86: [330..334]
 r87: [330..331]
 r88: [326..327]
 r89: [321..325]
 r90: [321..322]
 r91: [317..318]
 r92: [312..316]
 r93: [312..313]
 r94: [308..309]
 r95: [305..307]
 r96: [303..304]
 r97: [300..302]
 r98: [297..298]
 r99: [294..296]
 r100: [291..293]
 r101: [287..290]
 r102: [283..284]
 r103: [790..791]
 r104: [788..789]
 r105: [783..785]
 r106: [781..782]
 r107: [778..780]
 r108: [775..777]
 r109: [775..776]
 r110: [773..774]
 r111: [770..772]
 r112: [770..771]
 r113: [661..663]
 r114: [661..662]
 r115: [659..660]
 r116: [645..658]
 r117: [656..657]
 r118: [654..655]
 r119: [649..651]
 r120: [647..648]
 r121: [645..646]
 r122: [643..644]
 r123: [641..642]
 r124: [639..640]
 r125: [630..636]
 r126: [634..635]
 r127: [632..633]
 r128: [630..631]
 r129: [614..629]
 r130: [625..626]
 r131: [622..624]
 r132: [619..621]
 r133: [616..618]
 r134: [616..617]
 r135: [614..615]
 r136: [609..611]
 r137: [609..610]
 r138: [139..140]
 r139: [201..202]
 r140: [199..200]
 r141: [196..198]
 r142: [194..195]
 r143: [191..193]
 r144: [187..188]
 r145: [185..186]
 r146: [182..184]
 r147: [180..181]
 r148: [178..179]
 r149: [175..177]
 r150: [171..172]
 r151: [169..170]
 r152: [166..168]
 r153: [164..165]
 r154: [162..163]
 r155: [159..161]
 r156: [155..156]
 r157: [153..154]
 r158: [150..152]
 r159: [148..149]
 r160: [146..147]
 r161: [143..145]
 r162: [607..608]
 r163: [605..606]
 r164: [600..602]
 r165: [598..599]
 r166: [595..597]
 r167: [595..596]
 r168: [593..594]
 r169: [591..592]
 r170: [589..590]
 r171: [587..588]
 r172: [584..586]
 r173: [582..583]
 r174: [570..581]
 r175: [579..580]
 r176: [577..578]
 r177: [574..576]
 r178: [572..573]
 r179: [569..571]
 r180: [567..568]
 r181: [563..564]
 r182: [560..562]
 r183: [557..559]
 r184: [546..556]
 r185: [545..553]
 r186: [533..534]
 r187: [72..73]
 r188: [134..135]
 r189: [132..133]
 r190: [129..131]
 r191: [127..128]
 r192: [124..126]
 r193: [120..121]
 r194: [118..119]
 r195: [115..117]
 r196: [113..114]
 r197: [111..112]
 r198: [108..110]
 r199: [104..105]
 r200: [102..103]
 r201: [99..101]
 r202: [97..98]
 r203: [95..96]
 r204: [92..94]
 r205: [88..89]
 r206: [86..87]
 r207: [83..85]
 r208: [81..82]
 r209: [79..80]
 r210: [76..78]
 r211: [485..532]
 r212: [528..529]
 r213: [526..527]
 r214: [523..525]
 r215: [521..522]
 r216: [483..520]
 r217: [518..519]
 r218: [516..517]
 r219: [514..515]
 r220: [511..513]
 r221: [509..510]
 r222: [482..508]
 r223: [506..507]
 r224: [504..505]
 r225: [501..503]
 r226: [499..500]
 r227: [481..498]
 r228: [496..497]
 r229: [494..495]
 r230: [489..491]
 r231: [487..488]
 r232: [484..486]
 r233: [477..478]
 r234: [475..476]
 r235: [472..474]
 r236: [470..471]
 r237: [468..469]
 r238: [454..467]
 r239: [465..466]
 r240: [463..464]
 r241: [460..462]
 r242: [458..459]
 r243: [456..457]
 r244: [454..455]
 r245: [450..451]
 r246: [448..449]
 r247: [445..447]
 r248: [443..444]
 r249: [441..442]
 r250: [427..440]
 r251: [438..439]
 r252: [436..437]
 r253: [433..435]
 r254: [431..432]
 r255: [429..430]
 r256: [427..428]
 r257: [766..767]
 r258: [764..765]
 r259: [761..763]
 r260: [759..760]
 r261: [720..758]
 r262: [756..757]
 r263: [754..755]
 r264: [752..753]
 r265: [749..751]
 r266: [747..748]
 r267: [719..746]
 r268: [742..743]
 r269: [739..741]
 r270: [737..738]
 r271: [718..736]
 r272: [734..735]
 r273: [732..733]
 r274: [727..729]
 r275: [725..726]
 r276: [721..724]
 r277: [714..715]
 r278: [712..713]
 r279: [709..711]
 r280: [707..708]
 r281: [705..706]
 r282: [691..704]
 r283: [702..703]
 r284: [700..701]
 r285: [697..699]
 r286: [695..696]
 r287: [693..694]
 r288: [691..692]
 r289: [687..688]
 r290: [685..686]
 r291: [682..684]
 r292: [680..681]
 r293: [678..679]
 r294: [664..677]
 r295: [675..676]
 r296: [673..674]
 r297: [670..672]
 r298: [668..669]
 r299: [666..667]
 r300: [664..665]
 r301: [273..274]
 r302: [1185..1186]
 r303: [1183..1184]
 r304: [1178..1180]
 r305: [1176..1177]
 r306: [1170..1175]
 r307: [1170..1171]
 r308: [1167..1169]
 r309: [1164..1166]
 r310: [1164..1165]
 r311: [1162..1163]
 r312: [1159..1161]
 r313: [1159..1160]
 r314: [1044..1046]
 r315: [1044..1045]
 r316: [1042..1043]
 r317: [1022..1041]
 r318: [1039..1040]
 r319: [1037..1038]
 r320: [1032..1034]
 r321: [1030..1031]
 r322: [1024..1029]
 r323: [1024..1025]
 r324: [1022..1023]
 r325: [1020..1021]
 r326: [1018..1019]
 r327: [1016..1017]
 r328: [1007..1013]
 r329: [1011..1012]
 r330: [1009..1010]
 r331: [1007..1008]
 r332: [991..1006]
 r333: [1002..1003]
 r334: [999..1001]
 r335: [996..998]
 r336: [993..995]
 r337: [993..994]
 r338: [991..992]
 r339: [986..988]
 r340: [986..987]
 r341: [206..207]
 r342: [268..269]
 r343: [266..267]
 r344: [263..265]
 r345: [261..262]
 r346: [258..260]
 r347: [254..255]
 r348: [252..253]
 r349: [249..251]
 r350: [247..248]
 r351: [245..246]
 r352: [242..244]
 r353: [238..239]
 r354: [236..237]
 r355: [233..235]
 r356: [231..232]
 r357: [229..230]
 r358: [226..228]
 r359: [222..223]
 r360: [220..221]
 r361: [217..219]
 r362: [215..216]
 r363: [213..214]
 r364: [210..212]
 r365: [984..985]
 r366: [982..983]
 r367: [977..979]
 r368: [975..976]
 r369: [969..974]
 r370: [969..970]
 r371: [966..968]
 r372: [966..967]
 r373: [964..965]
 r374: [962..963]
 r375: [960..961]
 r376: [958..959]
 r377: [955..957]
 r378: [953..954]
 r379: [941..952]
 r380: [950..951]
 r381: [948..949]
 r382: [945..947]
 r383: [943..944]
 r384: [940..942]
 r385: [938..939]
 r386: [934..935]
 r387: [931..933]
 r388: [928..930]
 r389: [917..927]
 r390: [916..924]
 r391: [904..905]
 r392: [5..6]
 r393: [67..68]
 r394: [65..66]
 r395: [62..64]
 r396: [60..61]
 r397: [57..59]
 r398: [53..54]
 r399: [51..52]
 r400: [48..50]
 r401: [46..47]
 r402: [44..45]
 r403: [41..43]
 r404: [37..38]
 r405: [35..36]
 r406: [32..34]
 r407: [30..31]
 r408: [28..29]
 r409: [25..27]
 r410: [21..22]
 r411: [19..20]
 r412: [16..18]
 r413: [14..15]
 r414: [12..13]
 r415: [9..11]
 r416: [850..903]
 r417: [899..900]
 r418: [897..898]
 r419: [894..896]
 r420: [892..893]
 r421: [848..891]
 r422: [889..890]
 r423: [887..888]
 r424: [885..886]
 r425: [882..884]
 r426: [880..881]
 r427: [847..879]
 r428: [877..878]
 r429: [875..876]
 r430: [872..874]
 r431: [870..871]
 r432: [846..869]
 r433: [867..868]
 r434: [865..866]
 r435: [860..862]
 r436: [858..859]
 r437: [852..857]
 r438: [852..853]
 r439: [849..851]
 r440: [842..843]
 r441: [840..841]
 r442: [837..839]
 r443: [835..836]
 r444: [833..834]
 r445: [819..832]
 r446: [830..831]
 r447: [828..829]
 r448: [825..827]
 r449: [823..824]
 r450: [821..822]
 r451: [819..820]
 r452: [815..816]
 r453: [813..814]
 r454: [810..812]
 r455: [808..809]
 r456: [806..807]
 r457: [792..805]
 r458: [803..804]
 r459: [801..802]
 r460: [798..800]
 r461: [796..797]
 r462: [794..795]
 r463: [792..793]
 r464: [1155..1156]
 r465: [1153..1154]
 r466: [1150..1152]
 r467: [1148..1149]
 r468: [1103..1147]
 r469: [1145..1146]
 r470: [1143..1144]
 r471: [1141..1142]
 r472: [1138..1140]
 r473: [1136..1137]
 r474: [1102..1135]
 r475: [1131..1132]
 r476: [1128..1130]
 r477: [1126..1127]
 r478: [1101..1125]
 r479: [1123..1124]
 r480: [1121..1122]
 r481: [1116..1118]
 r482: [1114..1115]
 r483: [1108..1113]
 r484: [1108..1109]
 r485: [1104..1107]
 r486: [1097..1098]
 r487: [1095..1096]
 r488: [1092..1094]
 r489: [1090..1091]
 r490: [1088..1089]
 r491: [1074..1087]
 r492: [1085..1086]
 r493: [1083..1084]
 r494: [1080..1082]
 r495: [1078..1079]
 r496: [1076..1077]
 r497: [1074..1075]
 r498: [1070..1071]
 r499: [1068..1069]
 r500: [1065..1067]
 r501: [1063..1064]
 r502: [1061..1062]
 r503: [1047..1060]
 r504: [1058..1059]
 r505: [1056..1057]
 r506: [1053..1055]
 r507: [1051..1052]
 r508: [1049..1050]
 r509: [1047..1048]
 r510: [0..1]
 r511: [425..426]
 r512: [422..423]
 r513: [407..408]
 r514: [404..405]
 r515: [390..392]
 r516: [387..388]
 r517: [384..385]
 r518: [366..367]
 r519: [364..365]
 r520: [362..363]
 r521: [360..361]
 r522: [358..359]
 r523: [356..357]
 r524: [354..355]
 r525: [352..353]
 r526: [350..351]
 r527: [348..349]
 r528: [346..347]
 r529: [344..345]
 r530: [341..342]
 r531: [337..338]
 r532: [332..333]
 r533: [328..329]
 r534: [323..324]
 r535: [319..320]
 r536: [314..315]
 r537: [310..311]
 r538: [305..306]
 r539: [299..301]
 r540: [294..295]
 r541: [291..292]
 r542: [285..286]
 r543: [281..282]
 r544: [783..784]
 r545: [778..779]
 r546: [649..650]
 r547: [637..638]
 r548: [627..628]
 r549: [622..623]
 r550: [619..620]
 r551: [612..613]
 r552: [203..204]
 r553: [196..197]
 r554: [191..192]
 r555: [189..190]
 r556: [182..183]
 r557: [175..176]
 r558: [173..174]
 r559: [166..167]
 r560: [159..160]
 r561: [157..158]
 r562: [150..151]
 r563: [143..144]
 r564: [141..142]
 r565: [600..601]
 r566: [584..585]
 r567: [574..575]
 r568: [565..566]
 r569: [560..561]
 r570: [557..558]
 r571: [554..555]
 r572: [540..552]
 r573: [539..551]
 r574: [538..550]
 r575: [537..549]
 r576: [536..548]
 r577: [535..547]
 r578: [543..544]
 r579: [541..542]
 r580: [136..137]
 r581: [129..130]
 r582: [124..125]
 r583: [122..123]
 r584: [115..116]
 r585: [108..109]
 r586: [106..107]
 r587: [99..100]
 r588: [92..93]
 r589: [90..91]
 r590: [83..84]
 r591: [76..77]
 r592: [74..75]
 r593: [530..531]
 r594: [523..524]
 r595: [511..512]
 r596: [501..502]
 r597: [489..490]
 r598: [479..480]
 r599: [472..473]
 r600: [460..461]
 r601: [452..453]
 r602: [445..446]
 r603: [433..434]
 r604: [768..769]
 r605: [761..762]
 r606: [749..750]
 r607: [744..745]
 r608: [739..740]
 r609: [727..728]
 r610: [722..723]
 r611: [716..717]
 r612: [709..710]
 r613: [697..698]
 r614: [689..690]
 r615: [682..683]
 r616: [670..671]
 r617: [279..280]
 r618: [277..278]
 r619: [1178..1179]
 r620: [1172..1174]
 r621: [1172..1173]
 r622: [1167..1168]
 r623: [1032..1033]
 r624: [1026..1028]
 r625: [1026..1027]
 r626: [1014..1015]
 r627: [1004..1005]
 r628: [999..1000]
 r629: [996..997]
 r630: [989..990]
 r631: [270..271]
 r632: [263..264]
 r633: [258..259]
 r634: [256..257]
 r635: [249..250]
 r636: [242..243]
 r637: [240..241]
 r638: [233..234]
 r639: [226..227]
 r640: [224..225]
 r641: [217..218]
 r642: [210..211]
 r643: [208..209]
 r644: [977..978]
 r645: [971..973]
 r646: [971..972]
 r647: [955..956]
 r648: [945..946]
 r649: [936..937]
 r650: [931..932]
 r651: [928..929]
 r652: [925..926]
 r653: [911..923]
 r654: [910..922]
 r655: [909..921]
 r656: [908..920]
 r657: [907..919]
 r658: [906..918]
 r659: [914..915]
 r660: [912..913]
 r661: [69..70]
 r662: [62..63]
 r663: [57..58]
 r664: [55..56]
 r665: [48..49]
 r666: [41..42]
 r667: [39..40]
 r668: [32..33]
 r669: [25..26]
 r670: [23..24]
 r671: [16..17]
 r672: [9..10]
 r673: [7..8]
 r674: [901..902]
 r675: [894..895]
 r676: [882..883]
 r677: [872..873]
 r678: [860..861]
 r679: [854..856]
 r680: [854..855]
 r681: [844..845]
 r682: [837..838]
 r683: [825..826]
 r684: [817..818]
 r685: [810..811]
 r686: [798..799]
 r687: [1157..1158]
 r688: [1150..1151]
 r689: [1138..1139]
 r690: [1133..1134]
 r691: [1128..1129]
 r692: [1116..1117]
 r693: [1110..1112]
 r694: [1110..1111]
 r695: [1105..1106]
 r696: [1099..1100]
 r697: [1092..1093]
 r698: [1080..1081]
 r699: [1072..1073]
 r700: [1065..1066]
 r701: [1053..1054]
 r702: [275..276]
 r704: [288..289]
 r705: [410..411]
 r706: [368..369]
 r707: [786..787]
 r708: [652..653]
 r709: [603..604]
 r710: [492..493]
 r711: [730..731]
 r712: [1181..1182]
 r713: [1035..1036]
 r714: [980..981]
 r715: [863..864]
 r716: [1119..1120]
 r717: [370..409]
Compressing live ranges: from 1187 to 984 - 82%
Ranges after the compression:
 r59: [239..239] [180..180] [121..121] [62..62] [2..3]
 r60: [364..373]
 r61: [370..371]
 r62: [368..369]
 r63: [366..367]
 r64: [364..365]
 r65: [362..363]
 r67: [348..357]
 r68: [354..355]
 r69: [352..353]
 r70: [350..351]
 r71: [348..349]
 r72: [346..347]
 r73: [344..345]
 r74: [328..343]
 r75: [332..341]
 r76: [338..339]
 r77: [336..337]
 r78: [334..335]
 r79: [332..333]
 r80: [330..331]
 r81: [328..329]
 r82: [324..327]
 r83: [296..299]
 r84: [296..297]
 r85: [292..293]
 r86: [288..291]
 r87: [288..289]
 r88: [284..285]
 r89: [280..283]
 r90: [280..281]
 r91: [276..277]
 r92: [272..275]
 r93: [272..273]
 r94: [268..269]
 r95: [266..267]
 r96: [264..265]
 r97: [262..263]
 r98: [260..261]
 r99: [258..259]
 r100: [256..257]
 r101: [254..255]
 r102: [250..251]
 r103: [668..669]
 r104: [666..667]
 r105: [662..663]
 r106: [660..661]
 r107: [658..659]
 r108: [656..657]
 r109: [656..657]
 r110: [654..655]
 r111: [652..653]
 r112: [652..653]
 r113: [562..563]
 r114: [562..563]
 r115: [560..561]
 r116: [548..559]
 r117: [558..559]
 r118: [556..557]
 r119: [552..553]
 r120: [550..551]
 r121: [548..549]
 r122: [546..547]
 r123: [544..545]
 r124: [542..543]
 r125: [534..539]
 r126: [538..539]
 r127: [536..537]
 r128: [534..535]
 r129: [522..533]
 r130: [530..531]
 r131: [528..529]
 r132: [526..527]
 r133: [524..525]
 r134: [524..525]
 r135: [522..523]
 r136: [518..519]
 r137: [518..519]
 r138: [122..123]
 r139: [176..177]
 r140: [174..175]
 r141: [172..173]
 r142: [170..171]
 r143: [168..169]
 r144: [164..165]
 r145: [162..163]
 r146: [160..161]
 r147: [158..159]
 r148: [156..157]
 r149: [154..155]
 r150: [150..151]
 r151: [148..149]
 r152: [146..147]
 r153: [144..145]
 r154: [142..143]
 r155: [140..141]
 r156: [136..137]
 r157: [134..135]
 r158: [132..133]
 r159: [130..131]
 r160: [128..129]
 r161: [126..127]
 r162: [516..517]
 r163: [514..515]
 r164: [510..511]
 r165: [508..509]
 r166: [506..507]
 r167: [506..507]
 r168: [504..505]
 r169: [502..503]
 r170: [500..501]
 r171: [498..499]
 r172: [496..497]
 r173: [494..495]
 r174: [484..493]
 r175: [492..493]
 r176: [490..491]
 r177: [488..489]
 r178: [486..487]
 r179: [484..485]
 r180: [482..483]
 r181: [478..479]
 r182: [476..477]
 r183: [474..475]
 r184: [470..473]
 r185: [470..471]
 r186: [464..465]
 r187: [63..64]
 r188: [117..118]
 r189: [115..116]
 r190: [113..114]
 r191: [111..112]
 r192: [109..110]
 r193: [105..106]
 r194: [103..104]
 r195: [101..102]
 r196: [99..100]
 r197: [97..98]
 r198: [95..96]
 r199: [91..92]
 r200: [89..90]
 r201: [87..88]
 r202: [85..86]
 r203: [83..84]
 r204: [81..82]
 r205: [77..78]
 r206: [75..76]
 r207: [73..74]
 r208: [71..72]
 r209: [69..70]
 r210: [67..68]
 r211: [424..463]
 r212: [460..461]
 r213: [458..459]
 r214: [456..457]
 r215: [454..455]
 r216: [424..453]
 r217: [452..453]
 r218: [450..451]
 r219: [448..449]
 r220: [446..447]
 r221: [444..445]
 r222: [424..443]
 r223: [442..443]
 r224: [440..441]
 r225: [438..439]
 r226: [436..437]
 r227: [424..435]
 r228: [434..435]
 r229: [432..433]
 r230: [428..429]
 r231: [426..427]
 r232: [424..425]
 r233: [420..421]
 r234: [418..419]
 r235: [416..417]
 r236: [414..415]
 r237: [412..413]
 r238: [400..411]
 r239: [410..411]
 r240: [408..409]
 r241: [406..407]
 r242: [404..405]
 r243: [402..403]
 r244: [400..401]
 r245: [396..397]
 r246: [394..395]
 r247: [392..393]
 r248: [390..391]
 r249: [388..389]
 r250: [376..387]
 r251: [386..387]
 r252: [384..385]
 r253: [382..383]
 r254: [380..381]
 r255: [378..379]
 r256: [376..377]
 r257: [648..649]
 r258: [646..647]
 r259: [644..645]
 r260: [642..643]
 r261: [612..641]
 r262: [640..641]
 r263: [638..639]
 r264: [636..637]
 r265: [634..635]
 r266: [632..633]
 r267: [612..631]
 r268: [628..629]
 r269: [626..627]
 r270: [624..625]
 r271: [612..623]
 r272: [622..623]
 r273: [620..621]
 r274: [616..617]
 r275: [614..615]
 r276: [612..613]
 r277: [608..609]
 r278: [606..607]
 r279: [604..605]
 r280: [602..603]
 r281: [600..601]
 r282: [588..599]
 r283: [598..599]
 r284: [596..597]
 r285: [594..595]
 r286: [592..593]
 r287: [590..591]
 r288: [588..589]
 r289: [584..585]
 r290: [582..583]
 r291: [580..581]
 r292: [578..579]
 r293: [576..577]
 r294: [564..575]
 r295: [574..575]
 r296: [572..573]
 r297: [570..571]
 r298: [568..569]
 r299: [566..567]
 r300: [564..565]
 r301: [240..241]
 r302: [982..983]
 r303: [980..981]
 r304: [976..977]
 r305: [974..975]
 r306: [970..973]
 r307: [970..971]
 r308: [968..969]
 r309: [966..967]
 r310: [966..967]
 r311: [964..965]
 r312: [962..963]
 r313: [962..963]
 r314: [868..869]
 r315: [868..869]
 r316: [866..867]
 r317: [850..865]
 r318: [864..865]
 r319: [862..863]
 r320: [858..859]
 r321: [856..857]
 r322: [852..855]
 r323: [852..853]
 r324: [850..851]
 r325: [848..849]
 r326: [846..847]
 r327: [844..845]
 r328: [836..841]
 r329: [840..841]
 r330: [838..839]
 r331: [836..837]
 r332: [824..835]
 r333: [832..833]
 r334: [830..831]
 r335: [828..829]
 r336: [826..827]
 r337: [826..827]
 r338: [824..825]
 r339: [820..821]
 r340: [820..821]
 r341: [181..182]
 r342: [235..236]
 r343: [233..234]
 r344: [231..232]
 r345: [229..230]
 r346: [227..228]
 r347: [223..224]
 r348: [221..222]
 r349: [219..220]
 r350: [217..218]
 r351: [215..216]
 r352: [213..214]
 r353: [209..210]
 r354: [207..208]
 r355: [205..206]
 r356: [203..204]
 r357: [201..202]
 r358: [199..200]
 r359: [195..196]
 r360: [193..194]
 r361: [191..192]
 r362: [189..190]
 r363: [187..188]
 r364: [185..186]
 r365: [818..819]
 r366: [816..817]
 r367: [812..813]
 r368: [810..811]
 r369: [806..809]
 r370: [806..807]
 r371: [804..805]
 r372: [804..805]
 r373: [802..803]
 r374: [800..801]
 r375: [798..799]
 r376: [796..797]
 r377: [794..795]
 r378: [792..793]
 r379: [782..791]
 r380: [790..791]
 r381: [788..789]
 r382: [786..787]
 r383: [784..785]
 r384: [782..783]
 r385: [780..781]
 r386: [776..777]
 r387: [774..775]
 r388: [772..773]
 r389: [768..771]
 r390: [768..769]
 r391: [762..763]
 r392: [4..5]
 r393: [58..59]
 r394: [56..57]
 r395: [54..55]
 r396: [52..53]
 r397: [50..51]
 r398: [46..47]
 r399: [44..45]
 r400: [42..43]
 r401: [40..41]
 r402: [38..39]
 r403: [36..37]
 r404: [32..33]
 r405: [30..31]
 r406: [28..29]
 r407: [26..27]
 r408: [24..25]
 r409: [22..23]
 r410: [18..19]
 r411: [16..17]
 r412: [14..15]
 r413: [12..13]
 r414: [10..11]
 r415: [8..9]
 r416: [718..761]
 r417: [758..759]
 r418: [756..757]
 r419: [754..755]
 r420: [752..753]
 r421: [718..751]
 r422: [750..751]
 r423: [748..749]
 r424: [746..747]
 r425: [744..745]
 r426: [742..743]
 r427: [718..741]
 r428: [740..741]
 r429: [738..739]
 r430: [736..737]
 r431: [734..735]
 r432: [718..733]
 r433: [732..733]
 r434: [730..731]
 r435: [726..727]
 r436: [724..725]
 r437: [720..723]
 r438: [720..721]
 r439: [718..719]
 r440: [714..715]
 r441: [712..713]
 r442: [710..711]
 r443: [708..709]
 r444: [706..707]
 r445: [694..705]
 r446: [704..705]
 r447: [702..703]
 r448: [700..701]
 r449: [698..699]
 r450: [696..697]
 r451: [694..695]
 r452: [690..691]
 r453: [688..689]
 r454: [686..687]
 r455: [684..685]
 r456: [682..683]
 r457: [670..681]
 r458: [680..681]
 r459: [678..679]
 r460: [676..677]
 r461: [674..675]
 r462: [672..673]
 r463: [670..671]
 r464: [958..959]
 r465: [956..957]
 r466: [954..955]
 r467: [952..953]
 r468: [918..951]
 r469: [950..951]
 r470: [948..949]
 r471: [946..947]
 r472: [944..945]
 r473: [942..943]
 r474: [918..941]
 r475: [938..939]
 r476: [936..937]
 r477: [934..935]
 r478: [918..933]
 r479: [932..933]
 r480: [930..931]
 r481: [926..927]
 r482: [924..925]
 r483: [920..923]
 r484: [920..921]
 r485: [918..919]
 r486: [914..915]
 r487: [912..913]
 r488: [910..911]
 r489: [908..909]
 r490: [906..907]
 r491: [894..905]
 r492: [904..905]
 r493: [902..903]
 r494: [900..901]
 r495: [898..899]
 r496: [896..897]
 r497: [894..895]
 r498: [890..891]
 r499: [888..889]
 r500: [886..887]
 r501: [884..885]
 r502: [882..883]
 r503: [870..881]
 r504: [880..881]
 r505: [878..879]
 r506: [876..877]
 r507: [874..875]
 r508: [872..873]
 r509: [870..871]
 r510: [0..1]
 r511: [374..375]
 r512: [372..373]
 r513: [358..359]
 r514: [356..357]
 r515: [344..345]
 r516: [342..343]
 r517: [340..341]
 r518: [322..323]
 r519: [320..321]
 r520: [318..319]
 r521: [316..317]
 r522: [314..315]
 r523: [312..313]
 r524: [310..311]
 r525: [308..309]
 r526: [306..307]
 r527: [304..305]
 r528: [302..303]
 r529: [300..301]
 r530: [298..299]
 r531: [294..295]
 r532: [290..291]
 r533: [286..287]
 r534: [282..283]
 r535: [278..279]
 r536: [274..275]
 r537: [270..271]
 r538: [266..267]
 r539: [262..263]
 r540: [258..259]
 r541: [256..257]
 r542: [252..253]
 r543: [248..249]
 r544: [662..663]
 r545: [658..659]
 r546: [552..553]
 r547: [540..541]
 r548: [532..533]
 r549: [528..529]
 r550: [526..527]
 r551: [520..521]
 r552: [178..179]
 r553: [172..173]
 r554: [168..169]
 r555: [166..167]
 r556: [160..161]
 r557: [154..155]
 r558: [152..153]
 r559: [146..147]
 r560: [140..141]
 r561: [138..139]
 r562: [132..133]
 r563: [126..127]
 r564: [124..125]
 r565: [510..511]
 r566: [496..497]
 r567: [488..489]
 r568: [480..481]
 r569: [476..477]
 r570: [474..475]
 r571: [472..473]
 r572: [466..471]
 r573: [466..471]
 r574: [466..471]
 r575: [466..471]
 r576: [466..471]
 r577: [466..471]
 r578: [468..469]
 r579: [466..467]
 r580: [119..120]
 r581: [113..114]
 r582: [109..110]
 r583: [107..108]
 r584: [101..102]
 r585: [95..96]
 r586: [93..94]
 r587: [87..88]
 r588: [81..82]
 r589: [79..80]
 r590: [73..74]
 r591: [67..68]
 r592: [65..66]
 r593: [462..463]
 r594: [456..457]
 r595: [446..447]
 r596: [438..439]
 r597: [428..429]
 r598: [422..423]
 r599: [416..417]
 r600: [406..407]
 r601: [398..399]
 r602: [392..393]
 r603: [382..383]
 r604: [650..651]
 r605: [644..645]
 r606: [634..635]
 r607: [630..631]
 r608: [626..627]
 r609: [616..617]
 r610: [612..613]
 r611: [610..611]
 r612: [604..605]
 r613: [594..595]
 r614: [586..587]
 r615: [580..581]
 r616: [570..571]
 r617: [246..247]
 r618: [244..245]
 r619: [976..977]
 r620: [972..973]
 r621: [972..973]
 r622: [968..969]
 r623: [858..859]
 r624: [854..855]
 r625: [854..855]
 r626: [842..843]
 r627: [834..835]
 r628: [830..831]
 r629: [828..829]
 r630: [822..823]
 r631: [237..238]
 r632: [231..232]
 r633: [227..228]
 r634: [225..226]
 r635: [219..220]
 r636: [213..214]
 r637: [211..212]
 r638: [205..206]
 r639: [199..200]
 r640: [197..198]
 r641: [191..192]
 r642: [185..186]
 r643: [183..184]
 r644: [812..813]
 r645: [808..809]
 r646: [808..809]
 r647: [794..795]
 r648: [786..787]
 r649: [778..779]
 r650: [774..775]
 r651: [772..773]
 r652: [770..771]
 r653: [764..769]
 r654: [764..769]
 r655: [764..769]
 r656: [764..769]
 r657: [764..769]
 r658: [764..769]
 r659: [766..767]
 r660: [764..765]
 r661: [60..61]
 r662: [54..55]
 r663: [50..51]
 r664: [48..49]
 r665: [42..43]
 r666: [36..37]
 r667: [34..35]
 r668: [28..29]
 r669: [22..23]
 r670: [20..21]
 r671: [14..15]
 r672: [8..9]
 r673: [6..7]
 r674: [760..761]
 r675: [754..755]
 r676: [744..745]
 r677: [736..737]
 r678: [726..727]
 r679: [722..723]
 r680: [722..723]
 r681: [716..717]
 r682: [710..711]
 r683: [700..701]
 r684: [692..693]
 r685: [686..687]
 r686: [676..677]
 r687: [960..961]
 r688: [954..955]
 r689: [944..945]
 r690: [940..941]
 r691: [936..937]
 r692: [926..927]
 r693: [922..923]
 r694: [922..923]
 r695: [918..919]
 r696: [916..917]
 r697: [910..911]
 r698: [900..901]
 r699: [892..893]
 r700: [886..887]
 r701: [876..877]
 r702: [242..243]
 r704: [254..255]
 r705: [360..361]
 r706: [324..325]
 r707: [664..665]
 r708: [554..555]
 r709: [512..513]
 r710: [430..431]
 r711: [618..619]
 r712: [978..979]
 r713: [860..861]
 r714: [814..815]
 r715: [728..729]
 r716: [928..929]
 r717: [326..359]
	 Assigning to 705 (cl=FLOAT_REGS, orig=66, freq=2, tfirst=705, tfreq=2)...
	   Assign 12 to reload r705 (freq=2)
	Hard reg 12 is preferable by r717 with profit 1
	Hard reg 12 is preferable by r706 with profit 1
	 Assigning to 706 (cl=FLOAT_REGS, orig=66, freq=2, tfirst=705, tfreq=2)...
	   Assign 12 to reload r706 (freq=2)
	Hard reg 12 is preferable by r717 with profit 2
	 Assigning to 717 (cl=FLOAT_REGS, orig=66, freq=2, tfirst=705, tfreq=2)...
	 Assigning to 707 (cl=GENERAL_REGS, orig=105, freq=3, tfirst=707, tfreq=3)...
	   Assign 0 to reload r707 (freq=3)
	 Assigning to 708 (cl=GENERAL_REGS, orig=119, freq=3, tfirst=708, tfreq=3)...
	   Assign 0 to reload r708 (freq=3)
	 Assigning to 709 (cl=GENERAL_REGS, orig=164, freq=3, tfirst=709, tfreq=3)...
	   Assign 0 to reload r709 (freq=3)
	 Assigning to 710 (cl=GENERAL_REGS, orig=230, freq=3, tfirst=710, tfreq=3)...
	   Assign 0 to reload r710 (freq=3)
	 Assigning to 711 (cl=GENERAL_REGS, orig=274, freq=3, tfirst=711, tfreq=3)...
	   Assign 0 to reload r711 (freq=3)
	 Assigning to 712 (cl=GENERAL_REGS, orig=304, freq=3, tfirst=712, tfreq=3)...
	   Assign 0 to reload r712 (freq=3)
	 Assigning to 713 (cl=GENERAL_REGS, orig=320, freq=3, tfirst=713, tfreq=3)...
	   Assign 0 to reload r713 (freq=3)
	 Assigning to 714 (cl=GENERAL_REGS, orig=367, freq=3, tfirst=714, tfreq=3)...
	   Assign 0 to reload r714 (freq=3)
	 Assigning to 715 (cl=GENERAL_REGS, orig=435, freq=3, tfirst=715, tfreq=3)...
	   Assign 38 to reload r715 (freq=3)
	 Assigning to 716 (cl=GENERAL_REGS, orig=481, freq=3, tfirst=716, tfreq=3)...
	   Assign 0 to reload r716 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  939: r706:XF=r66:XF
      REG_DEAD r66:XF
   Insn after restoring regs:
  938: r66:XF=r705:XF
      REG_DEAD r705:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 36
   Insn 890: point = 0
   Insn 887: point = 0
   Insn 883: point = 1
  BB 30
   Insn 921: point = 4
   Insn 720: point = 4
  BB 29
   Insn 718: point = 5
   Insn 717: point = 5
   Insn 715: point = 6
   Insn 714: point = 8
  BB 27
   Insn 919: point = 9
  BB 28
   Insn 711: point = 9
   Insn 710: point = 9
   Insn 709: point = 10
   Insn 708: point = 11
   Insn 707: point = 13
   Insn 706: point = 15
   Insn 705: point = 17
   Insn 704: point = 18
   Insn 703: point = 20
   Insn 702: point = 22
   Insn 701: point = 24
   Insn 700: point = 25
   Insn 699: point = 26
   Insn 698: point = 27
   Insn 697: point = 29
   Insn 696: point = 31
   Insn 695: point = 33
   Insn 694: point = 34
   Insn 693: point = 36
   Insn 692: point = 38
   Insn 691: point = 40
   Insn 690: point = 41
   Insn 689: point = 42
   Insn 688: point = 43
   Insn 687: point = 45
   Insn 686: point = 47
   Insn 685: point = 49
   Insn 684: point = 50
   Insn 683: point = 52
   Insn 682: point = 54
   Insn 681: point = 56
   Insn 680: point = 57
   Insn 679: point = 58
   Insn 678: point = 59
   Insn 677: point = 61
   Insn 676: point = 63
   Insn 675: point = 64
   Insn 674: point = 66
   Insn 673: point = 68
   Insn 672: point = 70
  BB 14
   Insn 908: point = 71
   Insn 331: point = 71
  BB 13
   Insn 329: point = 72
   Insn 328: point = 72
   Insn 326: point = 73
   Insn 325: point = 75
  BB 11
   Insn 906: point = 76
  BB 12
   Insn 322: point = 76
   Insn 321: point = 76
   Insn 320: point = 77
   Insn 319: point = 78
   Insn 318: point = 80
   Insn 317: point = 82
   Insn 316: point = 84
   Insn 315: point = 85
   Insn 314: point = 87
   Insn 313: point = 89
   Insn 312: point = 91
   Insn 311: point = 92
   Insn 310: point = 93
   Insn 309: point = 94
   Insn 308: point = 96
   Insn 307: point = 98
   Insn 306: point = 100
   Insn 305: point = 101
   Insn 304: point = 103
   Insn 303: point = 105
   Insn 302: point = 107
   Insn 301: point = 108
   Insn 300: point = 109
   Insn 299: point = 110
   Insn 298: point = 112
   Insn 297: point = 114
   Insn 296: point = 116
   Insn 295: point = 117
   Insn 294: point = 119
   Insn 293: point = 121
   Insn 292: point = 123
   Insn 291: point = 124
   Insn 290: point = 125
   Insn 289: point = 126
   Insn 288: point = 128
   Insn 287: point = 130
   Insn 286: point = 131
   Insn 285: point = 133
   Insn 284: point = 135
   Insn 283: point = 137
  BB 9
   Insn 904: point = 138
   Insn 216: point = 138
  BB 8
   Insn 214: point = 139
   Insn 213: point = 139
   Insn 211: point = 140
   Insn 210: point = 142
  BB 6
   Insn 902: point = 143
  BB 7
   Insn 207: point = 143
   Insn 206: point = 143
   Insn 205: point = 144
   Insn 204: point = 145
   Insn 203: point = 147
   Insn 202: point = 149
   Insn 201: point = 151
   Insn 200: point = 152
   Insn 199: point = 154
   Insn 198: point = 156
   Insn 197: point = 158
   Insn 196: point = 159
   Insn 195: point = 160
   Insn 194: point = 161
   Insn 193: point = 163
   Insn 192: point = 165
   Insn 191: point = 167
   Insn 190: point = 168
   Insn 189: point = 170
   Insn 188: point = 172
   Insn 187: point = 174
   Insn 186: point = 175
   Insn 185: point = 176
   Insn 184: point = 177
   Insn 183: point = 179
   Insn 182: point = 181
   Insn 181: point = 183
   Insn 180: point = 184
   Insn 179: point = 186
   Insn 178: point = 188
   Insn 177: point = 190
   Insn 176: point = 191
   Insn 175: point = 192
   Insn 174: point = 193
   Insn 173: point = 195
   Insn 172: point = 197
   Insn 171: point = 198
   Insn 170: point = 200
   Insn 169: point = 202
   Insn 168: point = 204
  BB 25
   Insn 917: point = 205
   Insn 601: point = 205
  BB 24
   Insn 599: point = 206
   Insn 598: point = 206
   Insn 596: point = 207
   Insn 595: point = 209
  BB 22
   Insn 915: point = 210
  BB 23
   Insn 592: point = 210
   Insn 591: point = 210
   Insn 590: point = 211
   Insn 589: point = 212
   Insn 588: point = 214
   Insn 587: point = 216
   Insn 586: point = 218
   Insn 585: point = 219
   Insn 584: point = 221
   Insn 583: point = 223
   Insn 582: point = 225
   Insn 581: point = 226
   Insn 580: point = 227
   Insn 579: point = 228
   Insn 578: point = 230
   Insn 577: point = 232
   Insn 576: point = 234
   Insn 575: point = 235
   Insn 574: point = 237
   Insn 573: point = 239
   Insn 572: point = 241
   Insn 571: point = 242
   Insn 570: point = 243
   Insn 569: point = 244
   Insn 568: point = 246
   Insn 567: point = 248
   Insn 566: point = 250
   Insn 565: point = 251
   Insn 564: point = 253
   Insn 563: point = 255
   Insn 562: point = 257
   Insn 561: point = 258
   Insn 560: point = 259
   Insn 559: point = 260
   Insn 558: point = 262
   Insn 557: point = 264
   Insn 556: point = 265
   Insn 555: point = 267
   Insn 554: point = 269
   Insn 553: point = 271
  BB 35
   Insn 878: point = 272
  BB 34
   Insn 876: point = 273
   Insn 875: point = 273
   Insn 873: point = 274
   Insn 872: point = 276
  BB 19
   Insn 912: point = 277
   Insn 481: point = 277
   Insn 480: point = 278
  BB 18
   Insn 478: point = 279
   Insn 477: point = 279
   Insn 476: point = 280
  BB 2
   Insn 899: point = 281
   Insn 104: point = 281
   Insn 103: point = 282
   Insn 102: point = 283
   Insn 101: point = 284
   Insn 100: point = 286
   Insn 99: point = 287
   Insn 929: point = 287
   Insn 937: point = 288
   Insn 936: point = 289
   Insn 935: point = 289
   Insn 934: point = 290
   Insn 97: point = 290
   Insn 96: point = 292
   Insn 95: point = 293
   Insn 94: point = 295
   Insn 93: point = 296
   Insn 92: point = 297
   Insn 91: point = 298
   Insn 90: point = 299
   Insn 89: point = 299
   Insn 88: point = 300
   Insn 87: point = 301
   Insn 86: point = 302
   Insn 85: point = 304
   Insn 84: point = 306
   Insn 83: point = 307
   Insn 82: point = 309
   Insn 81: point = 311
   Insn 80: point = 312
   Insn 79: point = 313
   Insn 78: point = 315
   Insn 77: point = 316
   Insn 76: point = 318
   Insn 75: point = 320
   Insn 74: point = 321
   Insn 73: point = 322
   Insn 72: point = 324
   Insn 71: point = 325
   Insn 70: point = 327
   Insn 69: point = 329
   Insn 68: point = 330
   Insn 67: point = 331
   Insn 66: point = 333
   Insn 65: point = 334
   Insn 64: point = 336
   Insn 63: point = 338
   Insn 62: point = 339
   Insn 61: point = 340
   Insn 60: point = 342
   Insn 59: point = 343
   Insn 58: point = 345
   Insn 57: point = 346
   Insn 56: point = 347
   Insn 55: point = 349
   Insn 54: point = 350
   Insn 53: point = 351
   Insn 52: point = 353
   Insn 51: point = 354
   Insn 50: point = 355
   Insn 49: point = 357
   Insn 48: point = 358
   Insn 47: point = 359
   Insn 46: point = 361
   Insn 45: point = 362
   Insn 44: point = 363
   Insn 43: point = 365
   Insn 42: point = 366
   Insn 41: point = 367
   Insn 939: point = 369
   Insn 40: point = 371
   Insn 39: point = 373
   Insn 38: point = 375
   Insn 37: point = 377
   Insn 36: point = 379
   Insn 35: point = 381
   Insn 34: point = 383
   Insn 33: point = 385
   Insn 32: point = 386
   Insn 31: point = 388
   Insn 30: point = 389
   Insn 29: point = 390
   Insn 28: point = 390
   Insn 27: point = 391
   Insn 26: point = 392
   Insn 25: point = 393
   Insn 24: point = 395
   Insn 23: point = 397
   Insn 22: point = 399
   Insn 21: point = 401
   Insn 20: point = 403
   Insn 19: point = 405
   Insn 18: point = 406
   Insn 17: point = 408
   Insn 938: point = 409
   Insn 16: point = 411
   Insn 15: point = 413
   Insn 14: point = 415
   Insn 13: point = 417
   Insn 12: point = 419
   Insn 11: point = 421
   Insn 10: point = 423
   Insn 9: point = 424
   Insn 8: point = 426
   Insn 4: point = 427
   Insn 3: point = 427
   Insn 2: point = 427
  BB 17
   Insn 472: point = 427
  BB 15
   Insn 910: point = 427
   Insn 400: point = 427
   Insn 399: point = 428
   Insn 398: point = 430
   Insn 397: point = 432
   Insn 396: point = 434
   Insn 395: point = 435
   Insn 394: point = 437
   Insn 393: point = 439
   Insn 392: point = 440
   Insn 391: point = 442
   Insn 390: point = 444
   Insn 389: point = 446
   Insn 388: point = 447
   Insn 387: point = 449
   Insn 386: point = 451
   Insn 385: point = 453
   Insn 384: point = 454
   Insn 383: point = 455
   Insn 382: point = 457
   Insn 381: point = 459
   Insn 380: point = 461
   Insn 379: point = 462
   Insn 378: point = 464
   Insn 377: point = 466
   Insn 376: point = 467
   Insn 375: point = 469
   Insn 374: point = 471
   Insn 373: point = 473
   Insn 372: point = 474
   Insn 371: point = 476
   Insn 370: point = 478
   Insn 369: point = 480
   Insn 368: point = 481
   Insn 367: point = 481
   Insn 366: point = 482
   Insn 365: point = 483
   Insn 364: point = 484
   Insn 363: point = 485
   Insn 362: point = 486
   Insn 361: point = 488
   Insn 360: point = 490
   Insn 947: point = 491
   Insn 359: point = 493
   Insn 946: point = 493
   Insn 358: point = 495
   Insn 357: point = 497
   Insn 356: point = 498
   Insn 355: point = 500
   Insn 354: point = 502
   Insn 353: point = 503
   Insn 352: point = 505
   Insn 351: point = 507
   Insn 350: point = 508
   Insn 349: point = 510
   Insn 348: point = 512
   Insn 347: point = 513
   Insn 346: point = 515
   Insn 345: point = 517
   Insn 344: point = 519
   Insn 343: point = 520
   Insn 342: point = 522
   Insn 341: point = 524
   Insn 340: point = 525
   Insn 339: point = 527
   Insn 338: point = 529
   Insn 337: point = 531
   Insn 336: point = 532
  BB 10
   Insn 278: point = 533
   Insn 277: point = 533
   Insn 276: point = 534
   Insn 275: point = 535
   Insn 274: point = 535
   Insn 273: point = 536
   Insn 272: point = 537
   Insn 271: point = 538
   Insn 270: point = 539
   Insn 269: point = 540
   Insn 268: point = 541
   Insn 267: point = 542
   Insn 266: point = 543
   Insn 265: point = 544
   Insn 264: point = 545
   Insn 263: point = 546
   Insn 262: point = 547
   Insn 261: point = 548
   Insn 260: point = 549
   Insn 259: point = 550
   Insn 258: point = 551
   Insn 257: point = 552
   Insn 256: point = 553
   Insn 255: point = 555
   Insn 254: point = 556
   Insn 253: point = 558
   Insn 252: point = 559
   Insn 251: point = 561
   Insn 927: point = 562
   Insn 249: point = 564
   Insn 248: point = 566
   Insn 247: point = 567
   Insn 246: point = 568
   Insn 245: point = 569
   Insn 244: point = 569
   Insn 243: point = 570
   Insn 242: point = 571
   Insn 241: point = 573
   Insn 240: point = 575
   Insn 239: point = 576
   Insn 238: point = 578
   Insn 237: point = 580
   Insn 236: point = 581
   Insn 235: point = 583
   Insn 234: point = 585
   Insn 233: point = 586
   Insn 232: point = 588
   Insn 231: point = 590
   Insn 230: point = 592
   Insn 229: point = 593
   Insn 228: point = 594
   Insn 227: point = 596
   Insn 226: point = 597
   Insn 225: point = 599
   Insn 224: point = 601
   Insn 945: point = 602
   Insn 223: point = 604
   Insn 944: point = 604
   Insn 222: point = 606
   Insn 221: point = 608
  BB 5
   Insn 163: point = 609
   Insn 162: point = 609
   Insn 161: point = 610
   Insn 160: point = 611
   Insn 159: point = 613
   Insn 158: point = 614
   Insn 157: point = 615
   Insn 156: point = 617
   Insn 155: point = 618
   Insn 154: point = 620
   Insn 153: point = 621
   Insn 152: point = 623
   Insn 928: point = 624
   Insn 150: point = 626
   Insn 149: point = 628
   Insn 148: point = 629
   Insn 147: point = 631
   Insn 146: point = 633
   Insn 145: point = 635
   Insn 144: point = 636
   Insn 143: point = 638
   Insn 142: point = 639
   Insn 141: point = 640
   Insn 140: point = 642
   Insn 139: point = 643
   Insn 138: point = 644
   Insn 137: point = 646
   Insn 136: point = 648
   Insn 135: point = 650
   Insn 943: point = 651
   Insn 134: point = 653
   Insn 942: point = 653
   Insn 133: point = 655
   Insn 132: point = 657
   Insn 131: point = 658
   Insn 130: point = 659
   Insn 129: point = 660
   Insn 128: point = 662
   Insn 127: point = 663
  BB 16
   Insn 469: point = 664
   Insn 468: point = 665
   Insn 467: point = 667
   Insn 466: point = 669
   Insn 465: point = 671
   Insn 464: point = 672
   Insn 463: point = 674
   Insn 462: point = 676
   Insn 461: point = 677
   Insn 460: point = 679
   Insn 459: point = 681
   Insn 458: point = 683
   Insn 457: point = 684
   Insn 456: point = 686
   Insn 455: point = 688
   Insn 454: point = 690
   Insn 453: point = 691
   Insn 452: point = 692
   Insn 451: point = 694
   Insn 450: point = 696
   Insn 449: point = 698
   Insn 448: point = 699
   Insn 447: point = 701
   Insn 446: point = 703
   Insn 445: point = 704
   Insn 444: point = 706
   Insn 443: point = 708
   Insn 442: point = 710
   Insn 441: point = 711
   Insn 440: point = 713
   Insn 439: point = 715
   Insn 438: point = 717
   Insn 437: point = 718
   Insn 436: point = 718
   Insn 435: point = 719
   Insn 434: point = 720
   Insn 433: point = 721
   Insn 432: point = 722
   Insn 431: point = 723
   Insn 430: point = 724
   Insn 429: point = 726
   Insn 428: point = 728
   Insn 949: point = 729
   Insn 427: point = 731
   Insn 948: point = 731
   Insn 426: point = 733
   Insn 425: point = 735
   Insn 424: point = 736
   Insn 423: point = 738
   Insn 422: point = 740
   Insn 421: point = 741
   Insn 420: point = 743
   Insn 419: point = 745
   Insn 418: point = 746
   Insn 417: point = 748
   Insn 416: point = 750
   Insn 415: point = 751
   Insn 414: point = 753
   Insn 413: point = 755
   Insn 412: point = 757
   Insn 411: point = 758
   Insn 410: point = 760
   Insn 409: point = 762
   Insn 408: point = 763
   Insn 407: point = 765
   Insn 406: point = 767
   Insn 405: point = 769
  BB 4
   Insn 122: point = 770
   Insn 121: point = 770
   Insn 120: point = 771
   Insn 119: point = 772
   Insn 118: point = 773
   Insn 117: point = 774
   Insn 116: point = 776
   Insn 115: point = 777
   Insn 114: point = 779
   Insn 113: point = 780
   Insn 112: point = 782
   Insn 111: point = 784
   Insn 941: point = 785
   Insn 110: point = 787
   Insn 940: point = 787
   Insn 109: point = 789
   Insn 108: point = 791
  BB 33
   Insn 869: point = 792
  BB 31
   Insn 923: point = 792
   Insn 793: point = 792
   Insn 792: point = 793
   Insn 791: point = 795
   Insn 790: point = 797
   Insn 789: point = 799
   Insn 788: point = 800
   Insn 787: point = 802
   Insn 786: point = 804
   Insn 785: point = 805
   Insn 784: point = 807
   Insn 783: point = 809
   Insn 782: point = 811
   Insn 781: point = 812
   Insn 780: point = 814
   Insn 779: point = 816
   Insn 778: point = 818
   Insn 777: point = 819
   Insn 776: point = 820
   Insn 775: point = 822
   Insn 774: point = 824
   Insn 773: point = 826
   Insn 772: point = 827
   Insn 771: point = 829
   Insn 770: point = 831
   Insn 769: point = 832
   Insn 768: point = 834
   Insn 767: point = 836
   Insn 766: point = 838
   Insn 765: point = 839
   Insn 764: point = 841
   Insn 763: point = 843
   Insn 762: point = 845
   Insn 761: point = 846
   Insn 760: point = 846
   Insn 759: point = 847
   Insn 758: point = 848
   Insn 757: point = 849
   Insn 756: point = 850
   Insn 755: point = 851
   Insn 754: point = 853
   Insn 753: point = 855
   Insn 752: point = 856
   Insn 751: point = 857
   Insn 750: point = 859
   Insn 749: point = 861
   Insn 957: point = 862
   Insn 748: point = 864
   Insn 956: point = 864
   Insn 747: point = 866
   Insn 746: point = 868
   Insn 745: point = 869
   Insn 744: point = 871
   Insn 743: point = 873
   Insn 742: point = 874
   Insn 741: point = 876
   Insn 740: point = 878
   Insn 739: point = 879
   Insn 738: point = 881
   Insn 737: point = 883
   Insn 736: point = 884
   Insn 735: point = 886
   Insn 734: point = 888
   Insn 733: point = 890
   Insn 732: point = 891
   Insn 731: point = 893
   Insn 730: point = 895
   Insn 729: point = 896
   Insn 728: point = 898
   Insn 727: point = 900
   Insn 726: point = 902
   Insn 725: point = 903
  BB 26
   Insn 667: point = 904
   Insn 666: point = 904
   Insn 665: point = 905
   Insn 664: point = 906
   Insn 663: point = 906
   Insn 662: point = 907
   Insn 661: point = 908
   Insn 660: point = 909
   Insn 659: point = 910
   Insn 658: point = 911
   Insn 657: point = 912
   Insn 656: point = 913
   Insn 655: point = 914
   Insn 654: point = 915
   Insn 653: point = 916
   Insn 652: point = 917
   Insn 651: point = 918
   Insn 650: point = 919
   Insn 649: point = 920
   Insn 648: point = 921
   Insn 647: point = 922
   Insn 646: point = 923
   Insn 645: point = 924
   Insn 644: point = 926
   Insn 643: point = 927
   Insn 642: point = 929
   Insn 641: point = 930
   Insn 640: point = 932
   Insn 925: point = 933
   Insn 638: point = 935
   Insn 637: point = 937
   Insn 636: point = 938
   Insn 635: point = 939
   Insn 634: point = 940
   Insn 633: point = 940
   Insn 632: point = 941
   Insn 631: point = 942
   Insn 630: point = 944
   Insn 629: point = 946
   Insn 628: point = 947
   Insn 627: point = 949
   Insn 626: point = 951
   Insn 625: point = 952
   Insn 624: point = 954
   Insn 623: point = 956
   Insn 622: point = 957
   Insn 621: point = 959
   Insn 620: point = 961
   Insn 619: point = 963
   Insn 618: point = 964
   Insn 617: point = 965
   Insn 616: point = 967
   Insn 615: point = 968
   Insn 614: point = 970
   Insn 613: point = 972
   Insn 612: point = 973
   Insn 611: point = 974
   Insn 610: point = 976
   Insn 609: point = 978
   Insn 955: point = 979
   Insn 608: point = 981
   Insn 954: point = 981
   Insn 607: point = 983
   Insn 606: point = 985
  BB 21
   Insn 548: point = 986
   Insn 547: point = 986
   Insn 546: point = 987
   Insn 545: point = 988
   Insn 544: point = 990
   Insn 543: point = 991
   Insn 542: point = 992
   Insn 541: point = 994
   Insn 540: point = 995
   Insn 539: point = 997
   Insn 538: point = 998
   Insn 537: point = 1000
   Insn 926: point = 1001
   Insn 535: point = 1003
   Insn 534: point = 1005
   Insn 533: point = 1006
   Insn 532: point = 1008
   Insn 531: point = 1010
   Insn 530: point = 1012
   Insn 529: point = 1013
   Insn 528: point = 1015
   Insn 527: point = 1016
   Insn 526: point = 1017
   Insn 525: point = 1019
   Insn 524: point = 1020
   Insn 523: point = 1021
   Insn 522: point = 1023
   Insn 521: point = 1025
   Insn 520: point = 1027
   Insn 519: point = 1028
   Insn 518: point = 1029
   Insn 517: point = 1031
   Insn 516: point = 1033
   Insn 953: point = 1034
   Insn 515: point = 1036
   Insn 952: point = 1036
   Insn 514: point = 1038
   Insn 513: point = 1040
   Insn 512: point = 1041
   Insn 511: point = 1042
   Insn 510: point = 1043
   Insn 509: point = 1045
   Insn 508: point = 1046
  BB 32
   Insn 866: point = 1047
   Insn 865: point = 1048
   Insn 864: point = 1050
   Insn 863: point = 1052
   Insn 862: point = 1054
   Insn 861: point = 1055
   Insn 860: point = 1057
   Insn 859: point = 1059
   Insn 858: point = 1060
   Insn 857: point = 1062
   Insn 856: point = 1064
   Insn 855: point = 1066
   Insn 854: point = 1067
   Insn 853: point = 1069
   Insn 852: point = 1071
   Insn 851: point = 1073
   Insn 850: point = 1074
   Insn 849: point = 1075
   Insn 848: point = 1077
   Insn 847: point = 1079
   Insn 846: point = 1081
   Insn 845: point = 1082
   Insn 844: point = 1084
   Insn 843: point = 1086
   Insn 842: point = 1087
   Insn 841: point = 1089
   Insn 840: point = 1091
   Insn 839: point = 1093
   Insn 838: point = 1094
   Insn 837: point = 1096
   Insn 836: point = 1098
   Insn 835: point = 1100
   Insn 834: point = 1101
   Insn 833: point = 1101
   Insn 832: point = 1102
   Insn 831: point = 1103
   Insn 830: point = 1104
   Insn 829: point = 1105
   Insn 828: point = 1106
   Insn 827: point = 1107
   Insn 826: point = 1109
   Insn 825: point = 1111
   Insn 824: point = 1112
   Insn 823: point = 1113
   Insn 822: point = 1115
   Insn 821: point = 1117
   Insn 959: point = 1118
   Insn 820: point = 1120
   Insn 958: point = 1120
   Insn 819: point = 1122
   Insn 818: point = 1124
   Insn 817: point = 1125
   Insn 816: point = 1127
   Insn 815: point = 1129
   Insn 814: point = 1130
   Insn 813: point = 1132
   Insn 812: point = 1134
   Insn 811: point = 1135
   Insn 810: point = 1137
   Insn 809: point = 1139
   Insn 808: point = 1140
   Insn 807: point = 1142
   Insn 806: point = 1144
   Insn 805: point = 1146
   Insn 804: point = 1147
   Insn 803: point = 1149
   Insn 802: point = 1151
   Insn 801: point = 1152
   Insn 800: point = 1154
   Insn 799: point = 1156
   Insn 798: point = 1158
  BB 20
   Insn 503: point = 1159
   Insn 502: point = 1159
   Insn 501: point = 1160
   Insn 500: point = 1161
   Insn 499: point = 1162
   Insn 498: point = 1163
   Insn 497: point = 1165
   Insn 496: point = 1166
   Insn 495: point = 1168
   Insn 494: point = 1169
   Insn 493: point = 1171
   Insn 492: point = 1173
   Insn 491: point = 1174
   Insn 490: point = 1175
   Insn 489: point = 1177
   Insn 488: point = 1179
   Insn 951: point = 1180
   Insn 487: point = 1182
   Insn 950: point = 1182
   Insn 486: point = 1184
   Insn 485: point = 1186
 r66: [370..409]
Compressing live ranges: from 1187 to 2 - 0%
Ranges after the compression:
 r66: [0..1]
  Slot 0 regnos (width = 16):	 66
Changing spilled pseudos to memory in insn #938
Changing spilled pseudos to memory in insn #939

********** Local #3: **********

Reusing alternative 0 for insn #939
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #938
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 938:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=240, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=208, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 878
changing reg in insn 720
changing reg in insn 601
changing reg in insn 331
changing reg in insn 216
changing reg in insn 883
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 40
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 59
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 68
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 80
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 929
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 127
changing reg in insn 129
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 138
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 148
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 158
changing reg in insn 150
changing reg in insn 928
changing reg in insn 928
changing reg in insn 153
changing reg in insn 153
changing reg in insn 155
changing reg in insn 155
changing reg in insn 157
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 162
changing reg in insn 211
changing reg in insn 213
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 243
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 927
changing reg in insn 927
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 263
changing reg in insn 256
changing reg in insn 264
changing reg in insn 276
changing reg in insn 277
changing reg in insn 326
changing reg in insn 328
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 295
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 321
changing reg in insn 336
changing reg in insn 363
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 365
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 366
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 367
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 364
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 374
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 384
changing reg in insn 377
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 390
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 400
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 434
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 415
changing reg in insn 415
changing reg in insn 417
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 435
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 436
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 433
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 445
changing reg in insn 445
changing reg in insn 453
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 452
changing reg in insn 453
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 459
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 469
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 466
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 873
changing reg in insn 875
changing reg in insn 485
changing reg in insn 486
changing reg in insn 486
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 494
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 496
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 501
changing reg in insn 502
changing reg in insn 508
changing reg in insn 510
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 523
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 517
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 521
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 524
changing reg in insn 525
changing reg in insn 526
changing reg in insn 526
changing reg in insn 527
changing reg in insn 529
changing reg in insn 533
changing reg in insn 530
changing reg in insn 531
changing reg in insn 531
changing reg in insn 532
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 543
changing reg in insn 535
changing reg in insn 926
changing reg in insn 926
changing reg in insn 538
changing reg in insn 538
changing reg in insn 540
changing reg in insn 540
changing reg in insn 542
changing reg in insn 541
changing reg in insn 542
changing reg in insn 542
changing reg in insn 543
changing reg in insn 545
changing reg in insn 547
changing reg in insn 546
changing reg in insn 547
changing reg in insn 596
changing reg in insn 598
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 558
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 561
changing reg in insn 563
changing reg in insn 564
changing reg in insn 564
changing reg in insn 565
changing reg in insn 565
changing reg in insn 567
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 569
changing reg in insn 571
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 575
changing reg in insn 575
changing reg in insn 577
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 581
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 585
changing reg in insn 587
changing reg in insn 587
changing reg in insn 588
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 591
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 610
changing reg in insn 610
changing reg in insn 611
changing reg in insn 611
changing reg in insn 615
changing reg in insn 614
changing reg in insn 615
changing reg in insn 615
changing reg in insn 616
changing reg in insn 617
changing reg in insn 618
changing reg in insn 619
changing reg in insn 620
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 622
changing reg in insn 622
changing reg in insn 624
changing reg in insn 624
changing reg in insn 625
changing reg in insn 625
changing reg in insn 632
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 633
changing reg in insn 635
changing reg in insn 636
changing reg in insn 638
changing reg in insn 925
changing reg in insn 925
changing reg in insn 641
changing reg in insn 641
changing reg in insn 643
changing reg in insn 652
changing reg in insn 645
changing reg in insn 653
changing reg in insn 665
changing reg in insn 666
changing reg in insn 715
changing reg in insn 717
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 677
changing reg in insn 677
changing reg in insn 678
changing reg in insn 678
changing reg in insn 680
changing reg in insn 682
changing reg in insn 683
changing reg in insn 683
changing reg in insn 684
changing reg in insn 684
changing reg in insn 686
changing reg in insn 686
changing reg in insn 687
changing reg in insn 687
changing reg in insn 688
changing reg in insn 688
changing reg in insn 690
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 694
changing reg in insn 694
changing reg in insn 696
changing reg in insn 696
changing reg in insn 697
changing reg in insn 697
changing reg in insn 698
changing reg in insn 698
changing reg in insn 700
changing reg in insn 702
changing reg in insn 703
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 706
changing reg in insn 706
changing reg in insn 707
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 710
changing reg in insn 725
changing reg in insn 756
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 729
changing reg in insn 729
changing reg in insn 731
changing reg in insn 731
changing reg in insn 732
changing reg in insn 732
changing reg in insn 758
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 738
changing reg in insn 738
changing reg in insn 739
changing reg in insn 739
changing reg in insn 759
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 744
changing reg in insn 744
changing reg in insn 745
changing reg in insn 745
changing reg in insn 760
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 750
changing reg in insn 750
changing reg in insn 751
changing reg in insn 751
changing reg in insn 754
changing reg in insn 755
changing reg in insn 757
changing reg in insn 763
changing reg in insn 764
changing reg in insn 764
changing reg in insn 765
changing reg in insn 765
changing reg in insn 767
changing reg in insn 767
changing reg in insn 768
changing reg in insn 768
changing reg in insn 769
changing reg in insn 769
changing reg in insn 777
changing reg in insn 770
changing reg in insn 771
changing reg in insn 771
changing reg in insn 772
changing reg in insn 772
changing reg in insn 774
changing reg in insn 774
changing reg in insn 775
changing reg in insn 775
changing reg in insn 776
changing reg in insn 776
changing reg in insn 777
changing reg in insn 779
changing reg in insn 780
changing reg in insn 780
changing reg in insn 781
changing reg in insn 781
changing reg in insn 783
changing reg in insn 783
changing reg in insn 784
changing reg in insn 784
changing reg in insn 785
changing reg in insn 785
changing reg in insn 793
changing reg in insn 786
changing reg in insn 787
changing reg in insn 787
changing reg in insn 788
changing reg in insn 788
changing reg in insn 790
changing reg in insn 790
changing reg in insn 791
changing reg in insn 791
changing reg in insn 792
changing reg in insn 792
changing reg in insn 793
changing reg in insn 799
changing reg in insn 800
changing reg in insn 800
changing reg in insn 801
changing reg in insn 801
changing reg in insn 803
changing reg in insn 803
changing reg in insn 804
changing reg in insn 804
changing reg in insn 831
changing reg in insn 805
changing reg in insn 806
changing reg in insn 806
changing reg in insn 807
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 810
changing reg in insn 810
changing reg in insn 811
changing reg in insn 811
changing reg in insn 832
changing reg in insn 813
changing reg in insn 814
changing reg in insn 814
changing reg in insn 816
changing reg in insn 816
changing reg in insn 817
changing reg in insn 817
changing reg in insn 833
changing reg in insn 818
changing reg in insn 819
changing reg in insn 819
changing reg in insn 822
changing reg in insn 822
changing reg in insn 823
changing reg in insn 823
changing reg in insn 826
changing reg in insn 827
changing reg in insn 830
changing reg in insn 836
changing reg in insn 837
changing reg in insn 837
changing reg in insn 838
changing reg in insn 838
changing reg in insn 840
changing reg in insn 840
changing reg in insn 841
changing reg in insn 841
changing reg in insn 842
changing reg in insn 842
changing reg in insn 850
changing reg in insn 843
changing reg in insn 844
changing reg in insn 844
changing reg in insn 845
changing reg in insn 845
changing reg in insn 847
changing reg in insn 847
changing reg in insn 848
changing reg in insn 848
changing reg in insn 849
changing reg in insn 849
changing reg in insn 850
changing reg in insn 852
changing reg in insn 853
changing reg in insn 853
changing reg in insn 854
changing reg in insn 854
changing reg in insn 856
changing reg in insn 856
changing reg in insn 857
changing reg in insn 857
changing reg in insn 858
changing reg in insn 858
changing reg in insn 866
changing reg in insn 859
changing reg in insn 860
changing reg in insn 860
changing reg in insn 861
changing reg in insn 861
changing reg in insn 863
changing reg in insn 863
changing reg in insn 864
changing reg in insn 864
changing reg in insn 865
changing reg in insn 865
changing reg in insn 866
changing reg in insn 883
changing reg in insn 887
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 87
changing reg in insn 89
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 114
changing reg in insn 115
changing reg in insn 135
changing reg in insn 143
changing reg in insn 144
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 191
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 201
changing reg in insn 205
changing reg in insn 206
changing reg in insn 210
changing reg in insn 211
changing reg in insn 224
changing reg in insn 234
changing reg in insn 240
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 269
changing reg in insn 258
changing reg in insn 270
changing reg in insn 259
changing reg in insn 271
changing reg in insn 260
changing reg in insn 272
changing reg in insn 261
changing reg in insn 273
changing reg in insn 262
changing reg in insn 274
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 283
changing reg in insn 284
changing reg in insn 287
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 296
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 306
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 316
changing reg in insn 320
changing reg in insn 321
changing reg in insn 325
changing reg in insn 326
changing reg in insn 337
changing reg in insn 338
changing reg in insn 341
changing reg in insn 348
changing reg in insn 354
changing reg in insn 360
changing reg in insn 369
changing reg in insn 370
changing reg in insn 373
changing reg in insn 380
changing reg in insn 385
changing reg in insn 386
changing reg in insn 389
changing reg in insn 396
changing reg in insn 405
changing reg in insn 406
changing reg in insn 409
changing reg in insn 416
changing reg in insn 419
changing reg in insn 420
changing reg in insn 422
changing reg in insn 428
changing reg in insn 431
changing reg in insn 432
changing reg in insn 438
changing reg in insn 439
changing reg in insn 442
changing reg in insn 449
changing reg in insn 454
changing reg in insn 455
changing reg in insn 458
changing reg in insn 465
changing reg in insn 476
changing reg in insn 477
changing reg in insn 480
changing reg in insn 481
changing reg in insn 488
changing reg in insn 491
changing reg in insn 492
changing reg in insn 495
changing reg in insn 496
changing reg in insn 516
changing reg in insn 519
changing reg in insn 520
changing reg in insn 528
changing reg in insn 529
changing reg in insn 534
changing reg in insn 535
changing reg in insn 537
changing reg in insn 538
changing reg in insn 539
changing reg in insn 540
changing reg in insn 544
changing reg in insn 545
changing reg in insn 553
changing reg in insn 554
changing reg in insn 557
changing reg in insn 560
changing reg in insn 561
changing reg in insn 562
changing reg in insn 563
changing reg in insn 566
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 573
changing reg in insn 576
changing reg in insn 580
changing reg in insn 581
changing reg in insn 582
changing reg in insn 583
changing reg in insn 586
changing reg in insn 590
changing reg in insn 591
changing reg in insn 595
changing reg in insn 596
changing reg in insn 609
changing reg in insn 612
changing reg in insn 613
changing reg in insn 623
changing reg in insn 629
changing reg in insn 637
changing reg in insn 638
changing reg in insn 640
changing reg in insn 641
changing reg in insn 642
changing reg in insn 644
changing reg in insn 645
changing reg in insn 646
changing reg in insn 658
changing reg in insn 647
changing reg in insn 659
changing reg in insn 648
changing reg in insn 660
changing reg in insn 649
changing reg in insn 661
changing reg in insn 650
changing reg in insn 662
changing reg in insn 651
changing reg in insn 663
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 657
changing reg in insn 672
changing reg in insn 673
changing reg in insn 676
changing reg in insn 679
changing reg in insn 680
changing reg in insn 681
changing reg in insn 682
changing reg in insn 685
changing reg in insn 689
changing reg in insn 690
changing reg in insn 691
changing reg in insn 692
changing reg in insn 695
changing reg in insn 699
changing reg in insn 700
changing reg in insn 701
changing reg in insn 702
changing reg in insn 705
changing reg in insn 709
changing reg in insn 710
changing reg in insn 714
changing reg in insn 715
changing reg in insn 726
changing reg in insn 727
changing reg in insn 730
changing reg in insn 737
changing reg in insn 743
changing reg in insn 749
changing reg in insn 752
changing reg in insn 753
changing reg in insn 762
changing reg in insn 763
changing reg in insn 766
changing reg in insn 773
changing reg in insn 778
changing reg in insn 779
changing reg in insn 782
changing reg in insn 789
changing reg in insn 798
changing reg in insn 799
changing reg in insn 802
changing reg in insn 809
changing reg in insn 812
changing reg in insn 813
changing reg in insn 815
changing reg in insn 821
changing reg in insn 824
changing reg in insn 825
changing reg in insn 828
changing reg in insn 829
changing reg in insn 835
changing reg in insn 836
changing reg in insn 839
changing reg in insn 846
changing reg in insn 851
changing reg in insn 852
changing reg in insn 855
changing reg in insn 862
changing reg in insn 872
changing reg in insn 873
changing reg in insn 936
changing reg in insn 935
changing reg in insn 937
changing reg in insn 936
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 245.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 368.
verify found no changes in insn with uid = 437.
verify found no changes in insn with uid = 634.
verify found no changes in insn with uid = 664.
verify found no changes in insn with uid = 761.
verify found no changes in insn with uid = 834.


_position

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 17[flags] 19[fpcr] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={439d,427u} r1={124d,114u,53e} r2={63d,52u,2e} r3={2d,2u} r4={29d,19u,2e} r5={27d,17u} r6={1d,306u} r7={1d,77u} r8={65d,59u} r9={39d,29u} r10={15d,5u} r11={11d,1u} r12={12d,2u} r13={10d} r14={10d} r15={10d} r17={239d,12u} r18={10d} r19={10d,1u} r20={1d,1u,71e} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={22d,11u,1e} r38={18d,7u,1e} r39={12d,2u} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} 
;;    total ref usage 2702{1428d,1144u,130e} in 833{823 regular + 10 call} insns.
(note 1 0 930 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 704
(note 930 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 930 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:184 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])
        (reg:DI 4 si [ st_point ])) mABM.c:184 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ st_point ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])
        (reg:SI 1 dx [ t_wind ])) mABM.c:184 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ t_wind ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:60 D.7092 ] [60])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [511])
                (const_int 16 [0x10])) [0 f_8(D)->time+0 S8 A128])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [511])
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [512])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:61 D.7091 ] [61])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [512])
                (const_int 44 [0x2c])) [0 f_8(D)->st_indx+0 S4 A32])) mABM.c:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [512])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 0 ax [orig:62 D.7093 ] [62])
        (sign_extend:DI (reg:SI 0 ax [orig:61 D.7091 ] [61]))) mABM.c:187 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.7091 ] [61])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [orig:63 D.7093 ] [63])
                (ashift:DI (reg:DI 0 ax [orig:62 D.7093 ] [62])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.7093 ] [62])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 0 ax [orig:64 D.7094 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.7093 ] [63])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.7093 ] [63])
        (nil)))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.7092 ] [65])
                (plus:DI (reg:DI 0 ax [orig:64 D.7094 ] [64])
                    (reg/f:DI 1 dx [orig:60 D.7092 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.7094 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:60 D.7092 ] [60])
            (nil))))
(insn 16 15 938 2 (set (reg:XF 12 st(4) [orig:66 D.7095 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.7092 ] [65]) [0 *_14+0 S16 A128])) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7092 ] [65])
        (nil)))
(insn 938 16 960 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])
        (reg:XF 12 st(4) [orig:66 D.7095 ] [66])) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:66 D.7095 ] [66])
        (nil)))
(note 960 938 17 2 NOTE_INSN_DELETED)
(insn 17 960 18 2 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 1 dx [orig:67 D.7096 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [513])
                (const_int 8 [0x8])) [0 f_8(D)->nvp+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [513])
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:SI 0 ax [orig:68 D.7091 ] [68])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [514])
                (const_int 44 [0x2c])) [0 f_8(D)->st_indx+0 S4 A32])) mABM.c:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [514])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 0 ax [orig:69 D.7093 ] [69])
        (sign_extend:DI (reg:SI 0 ax [orig:68 D.7091 ] [68]))) mABM.c:187 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.7091 ] [68])
        (nil)))
(insn 22 21 23 2 (parallel [
            (set (reg:DI 0 ax [orig:70 D.7093 ] [70])
                (ashift:DI (reg:DI 0 ax [orig:69 D.7093 ] [69])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.7093 ] [69])
        (nil)))
(insn 23 22 24 2 (parallel [
            (set (reg:DI 0 ax [orig:71 D.7094 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.7093 ] [70])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.7093 ] [70])
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.7096 ] [72])
                (plus:DI (reg:DI 0 ax [orig:71 D.7094 ] [71])
                    (reg/f:DI 1 dx [orig:67 D.7096 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.7094 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:67 D.7096 ] [67])
            (nil))))
(insn 25 24 26 2 (set (reg/f:DI 1 dx [orig:73 D.7092 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [orig:72 D.7096 ] [72]) [0 *_21+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7096 ] [72])
        (nil)))
(insn 26 25 27 2 (set (reg:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:73 D.7092 ] [73])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:73 D.7092 ] [73])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [515])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [515])
        (nil)))
(call_insn 29 28 30 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 30 29 31 2 (set (reg:XF 8 st [orig:74 D.7095 ] [74])
        (reg:XF 8 st)) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg/f:DI 1 dx [orig:75 D.7092 ] [75])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [516])
                (const_int 24 [0x18])) [0 f_8(D)->vel+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [516])
        (nil)))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:187 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:SI 0 ax [orig:76 D.7091 ] [76])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [517])
                (const_int 44 [0x2c])) [0 f_8(D)->st_indx+0 S4 A32])) mABM.c:187 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [517])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 0 ax [orig:77 D.7093 ] [77])
        (sign_extend:DI (reg:SI 0 ax [orig:76 D.7091 ] [76]))) mABM.c:187 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:76 D.7091 ] [76])
        (nil)))
(insn 36 35 37 2 (parallel [
            (set (reg:DI 0 ax [orig:78 D.7093 ] [78])
                (ashift:DI (reg:DI 0 ax [orig:77 D.7093 ] [77])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:77 D.7093 ] [77])
        (nil)))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 0 ax [orig:79 D.7094 ] [79])
                (plus:DI (reg:DI 0 ax [orig:78 D.7093 ] [78])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:78 D.7093 ] [78])
        (nil)))
(insn 38 37 39 2 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.7092 ] [80])
                (plus:DI (reg:DI 0 ax [orig:79 D.7094 ] [79])
                    (reg/f:DI 1 dx [orig:75 D.7092 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:187 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.7094 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:75 D.7092 ] [75])
            (nil))))
(insn 39 38 40 2 (set (reg:XF 9 st(1) [orig:81 D.7095 ] [81])
        (mem:XF (reg/f:DI 0 ax [orig:80 D.7092 ] [80]) [0 *_30+0 S16 A128])) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.7092 ] [80])
        (nil)))
(insn 40 39 939 2 (set (reg:XF 8 st [orig:82 D.7095 ] [82])
        (div:XF (reg:XF 8 st [orig:74 D.7095 ] [74])
            (reg:XF 9 st(1) [orig:81 D.7095 ] [81]))) mABM.c:187 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 D.7095 ] [81])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.7095 ] [74])
            (nil))))
(insn 939 40 41 2 (set (reg:XF 12 st(4) [orig:66 D.7095 ] [66])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 66 [ D.7095 ])
        (nil)))
(insn 41 939 42 2 (set (reg:XF 8 st [518])
        (plus:XF (reg:XF 8 st [orig:82 D.7095 ] [82])
            (reg:XF 12 st(4) [orig:66 D.7095 ] [66]))) mABM.c:187 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:66 D.7095 ] [66])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.7095 ] [82])
            (nil))))
(insn 42 41 43 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t0+0 S16 A128])
        (reg:XF 8 st [518])) mABM.c:187 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [518])
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [519])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:188 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 ax [520])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [519])
                (const_int 4 [0x4])) [0 f_8(D)->n_nvp+0 S4 A32])) mABM.c:188 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [519])
        (nil)))
(insn 45 44 46 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n_nvp+0 S4 A32])
        (reg:SI 0 ax [520])) mABM.c:188 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [520])
        (nil)))
(insn 46 45 47 2 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 2 (set (reg/f:DI 0 ax [522])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [521])
                (const_int 32 [0x20])) [0 f_8(D)->pos+0 S8 A128])) mABM.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [521])
        (nil)))
(insn 48 47 49 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])
        (reg/f:DI 0 ax [522])) mABM.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [522])
        (nil)))
(insn 49 48 50 2 (set (reg/f:DI 0 ax [523])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (reg:SI 0 ax [524])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [523])
                (const_int 44 [0x2c])) [0 f_8(D)->st_indx+0 S4 A32])) mABM.c:190 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [523])
        (nil)))
(insn 51 50 52 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 st_indx+0 S4 A32])
        (reg:SI 0 ax [524])) mABM.c:190 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [524])
        (nil)))
(insn 52 51 53 2 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:191 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg/f:DI 0 ax [526])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [525])
                (const_int 24 [0x18])) [0 f_8(D)->vel+0 S8 A64])) mABM.c:191 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [525])
        (nil)))
(insn 54 53 55 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])
        (reg/f:DI 0 ax [526])) mABM.c:191 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [526])
        (nil)))
(insn 55 54 56 2 (set (reg/f:DI 0 ax [527])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:192 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [528])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [527])
                (const_int 8 [0x8])) [0 f_8(D)->nvp+0 S8 A64])) mABM.c:192 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [527])
        (nil)))
(insn 57 56 58 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])
        (reg/f:DI 0 ax [528])) mABM.c:192 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [528])
        (nil)))
(insn 58 57 59 2 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:194 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (reg/f:DI 2 cx [orig:83 D.7092 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [529]) [0 *pos_35+0 S8 A64])) mABM.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [529])
        (nil)))
(insn 60 59 61 2 (set (reg/f:DI 0 ax [530])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:194 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 2 (set (reg:XF 0 ax [orig:84 D.7095 ] [84])
        (mem:XF (reg/f:DI 0 ax [530]) [0 *st_point_23(D)+0 S16 A128])) mABM.c:194 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [530])
        (nil)))
(insn 62 61 63 2 (set (mem:XF (reg/f:DI 2 cx [orig:83 D.7092 ] [83]) [0 *_39+0 S16 A128])
        (reg:XF 0 ax [orig:84 D.7095 ] [84])) mABM.c:194 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:84 D.7095 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:83 D.7092 ] [83])
            (nil))))
(insn 63 62 64 2 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:195 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [orig:85 D.7092 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [531]) [0 *pos_35+0 S8 A64])) mABM.c:195 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [531])
        (nil)))
(insn 65 64 66 2 (parallel [
            (set (reg/f:DI 2 cx [orig:86 D.7092 ] [86])
                (plus:DI (reg/f:DI 0 ax [orig:85 D.7092 ] [85])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:195 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7092 ] [85])
        (nil)))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:195 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (reg:XF 0 ax [orig:87 D.7095 ] [87])
        (mem:XF (plus:DI (reg/f:DI 0 ax [532])
                (const_int 16 [0x10])) [0 MEM[(long double *)st_point_23(D) + 16B]+0 S16 A128])) mABM.c:195 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [532])
        (nil)))
(insn 68 67 69 2 (set (mem:XF (reg/f:DI 2 cx [orig:86 D.7092 ] [86]) [0 *_42+0 S16 A128])
        (reg:XF 0 ax [orig:87 D.7095 ] [87])) mABM.c:195 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:87 D.7095 ] [87])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:86 D.7092 ] [86])
            (nil))))
(insn 69 68 70 2 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 2 (set (reg/f:DI 0 ax [orig:88 D.7092 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [533]) [0 *pos_35+0 S8 A64])) mABM.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [533])
        (nil)))
(insn 71 70 72 2 (parallel [
            (set (reg/f:DI 2 cx [orig:89 D.7092 ] [89])
                (plus:DI (reg/f:DI 0 ax [orig:88 D.7092 ] [88])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7092 ] [88])
        (nil)))
(insn 72 71 73 2 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (reg:XF 0 ax [orig:90 D.7095 ] [90])
        (mem:XF (plus:DI (reg/f:DI 0 ax [534])
                (const_int 32 [0x20])) [0 MEM[(long double *)st_point_23(D) + 32B]+0 S16 A128])) mABM.c:196 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [534])
        (nil)))
(insn 74 73 75 2 (set (mem:XF (reg/f:DI 2 cx [orig:89 D.7092 ] [89]) [0 *_45+0 S16 A128])
        (reg:XF 0 ax [orig:90 D.7095 ] [90])) mABM.c:196 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:90 D.7095 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:89 D.7092 ] [89])
            (nil))))
(insn 75 74 76 2 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:197 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 2 (set (reg/f:DI 0 ax [orig:91 D.7092 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [535]) [0 *pos_35+0 S8 A64])) mABM.c:197 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [535])
        (nil)))
(insn 77 76 78 2 (parallel [
            (set (reg/f:DI 2 cx [orig:92 D.7092 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:91 D.7092 ] [91])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:197 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7092 ] [91])
        (nil)))
(insn 78 77 79 2 (set (reg/f:DI 0 ax [536])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:197 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 2 (set (reg:XF 0 ax [orig:93 D.7095 ] [93])
        (mem:XF (plus:DI (reg/f:DI 0 ax [536])
                (const_int 48 [0x30])) [0 MEM[(long double *)st_point_23(D) + 48B]+0 S16 A128])) mABM.c:197 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [536])
        (nil)))
(insn 80 79 81 2 (set (mem:XF (reg/f:DI 2 cx [orig:92 D.7092 ] [92]) [0 *_48+0 S16 A128])
        (reg:XF 0 ax [orig:93 D.7095 ] [93])) mABM.c:197 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:93 D.7095 ] [93])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:92 D.7092 ] [92])
            (nil))))
(insn 81 80 82 2 (set (reg:SI 0 ax [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 st_indx+0 S4 A32])) mABM.c:199 89 {*movsi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:DI 0 ax [orig:94 D.7093 ] [94])
        (sign_extend:DI (reg:SI 0 ax [537]))) mABM.c:199 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [537])
        (nil)))
(insn 83 82 84 2 (parallel [
            (set (reg:DI 1 dx [orig:95 D.7093 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.7093 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:199 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:94 D.7093 ] [94])
        (nil)))
(insn 84 83 85 2 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:199 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 2 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.7096 ] [96])
                (plus:DI (reg/f:DI 0 ax [538])
                    (reg:DI 1 dx [orig:95 D.7093 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:199 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [538])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7093 ] [95])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:95 D.7093 ] [95]))
                (nil)))))
(insn 86 85 87 2 (set (reg/f:DI 1 dx [orig:97 D.7092 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.7096 ] [96]) [0 *_52+0 S8 A64])) mABM.c:199 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.7096 ] [96])
        (nil)))
(insn 87 86 88 2 (set (reg:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 st_point+0 S8 A64])) mABM.c:199 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:97 D.7092 ] [97])) mABM.c:199 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:97 D.7092 ] [97])
        (nil)))
(insn 89 88 90 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [539])) mABM.c:199 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [539])
        (nil)))
(call_insn 90 89 91 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:199 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 91 90 92 2 (set (reg:XF 8 st [orig:98 l_nvp.0 ] [98])
        (reg:XF 8 st)) mABM.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 92 91 93 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])
        (reg:XF 8 st [orig:98 l_nvp.0 ] [98])) mABM.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:98 l_nvp.0 ] [98])
        (nil)))
(insn 93 92 94 2 (set (reg:XF 9 st(1) [orig:99 D.7095 ] [99])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32]))) mABM.c:203 256 {*floatsixf2_i387}
     (nil))
(insn 94 93 95 2 (set (reg:XF 8 st [540])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 t_r+0 S16 A128])) mABM.c:203 131 {*movxf_internal_rex64}
     (nil))
(insn 95 94 96 2 (set (reg:XF 9 st(1) [orig:100 D.7095 ] [100])
        (mult:XF (reg:XF 9 st(1) [orig:99 D.7095 ] [99])
            (reg:XF 8 st [540]))) mABM.c:203 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [540])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:99 D.7095 ] [99])
            (nil))))
(insn 96 95 97 2 (set (reg:XF 8 st [541])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:203 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 97 96 934 2 (set (reg:XF 8 st [orig:101 D.7095 ] [101])
        (minus:XF (reg:XF 9 st(1) [orig:100 D.7095 ] [100])
            (reg:XF 8 st [541]))) mABM.c:203 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [541])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:100 D.7095 ] [100])
            (nil))))
(insn 934 97 935 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -154 [0xffffffffffffff66])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:203 199 {x86_fnstcw_1}
     (nil))
(insn 935 934 936 2 (set (reg:HI 0 ax [704])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -154 [0xffffffffffffff66])) [0  S2 A16])) mABM.c:203 90 {*movhi_internal}
     (nil))
(insn 936 935 937 2 (parallel [
            (set (reg:HI 0 ax [704])
                (ior:HI (reg:HI 0 ax [704])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:203 410 {*iorhi_1}
     (nil))
(insn 937 936 929 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0  S2 A16])
        (reg:HI 0 ax [704])) mABM.c:203 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [704])
        (nil)))
(insn 929 937 99 2 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -108 [0xffffffffffffff94])) [0 i_perf_fore+0 S4 A32])
                (fix:SI (reg:XF 8 st [orig:101 D.7095 ] [101])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -154 [0xffffffffffffff66])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -156 [0xffffffffffffff64])) [0  S2 A16]))
        ]) mABM.c:203 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:101 D.7095 ] [101])
        (nil)))
(insn 99 929 100 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:204 89 {*movsi_internal}
     (nil))
(insn 100 99 101 2 (set (reg:SI 0 ax [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 st_indx+0 S4 A32])) mABM.c:204 89 {*movsi_internal}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg:SI 0 ax [orig:102 j.1 ] [102])
                (plus:SI (reg:SI 0 ax [542])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:204 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [542])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 st_indx+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 102 101 103 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])
        (reg:SI 0 ax [orig:102 j.1 ] [102])) mABM.c:204 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:102 j.1 ] [102])
        (nil)))
(insn 103 102 104 2 (set (reg:XF 0 ax [543])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:204 131 {*movxf_internal_rex64}
     (nil))
(insn 104 103 899 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 0 ax [543])) mABM.c:204 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [543])
        (nil)))
(jump_insn 899 104 900 2 (set (pc)
        (label_ref 473)) mABM.c:204 650 {jump}
     (nil)
 -> 473)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 900 899 475)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 107 108 109 110 111 112 544 545
(code_label 475 900 107 4 72 "" [1 uses])
(note 107 475 108 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 4 (set (reg:SI 0 ax [orig:103 j.2 ] [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:205 89 {*movsi_internal}
     (nil))
(insn 109 108 940 4 (set (reg:DI 0 ax [orig:104 D.7093 ] [104])
        (sign_extend:DI (reg:SI 0 ax [orig:103 j.2 ] [103]))) mABM.c:205 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:103 j.2 ] [103])
        (nil)))
(insn 940 109 110 4 (set (reg:DI 0 ax [orig:105 D.7093 ] [105])
        (reg:DI 0 ax [orig:104 D.7093 ] [104])) mABM.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:104 D.7093 ] [104])
        (nil)))
(insn 110 940 941 4 (parallel [
            (set (reg:DI 0 ax [orig:105 D.7093 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:105 D.7093 ] [105])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:205 513 {*ashldi3_1}
     (nil))
(insn 941 110 111 4 (set (reg:DI 1 dx [orig:105 D.7093 ] [105])
        (reg:DI 0 ax [orig:105 D.7093 ] [105])) mABM.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:105 D.7093 ] [105])
        (nil)))
(insn 111 941 112 4 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:205 87 {*movdi_internal_rex64}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.7092 ] [106])
                (plus:DI (reg/f:DI 0 ax [544])
                    (reg:DI 1 dx [orig:105 D.7093 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [544])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:105 D.7093 ] [105])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:105 D.7093 ] [105]))
                (nil)))))
(insn 113 112 114 4 (set (reg:XF 9 st(1) [orig:107 D.7095 ] [107])
        (mem:XF (reg/f:DI 0 ax [orig:106 D.7092 ] [106]) [0 *_66+0 S16 A128])) mABM.c:205 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:106 D.7092 ] [106])
        (nil)))
(insn 114 113 115 4 (set (reg:XF 8 st [545])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:205 131 {*movxf_internal_rex64}
     (nil))
(insn 115 114 116 4 (set (reg:XF 9 st(1) [orig:108 D.7095 ] [108])
        (mult:XF (reg:XF 9 st(1) [orig:107 D.7095 ] [107])
            (reg:XF 8 st [545]))) mABM.c:205 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [545])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:107 D.7095 ] [107])
            (nil))))
(insn 116 115 117 4 (set (reg:XF 8 st [orig:109 d.3 ] [109])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:205 131 {*movxf_internal_rex64}
     (nil))
(insn 117 116 118 4 (set (reg:XF 8 st [orig:110 d.4 ] [110])
        (plus:XF (reg:XF 8 st [orig:109 d.3 ] [109])
            (reg:XF 9 st(1) [orig:108 D.7095 ] [108]))) mABM.c:205 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:109 d.3 ] [109])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:108 D.7095 ] [108])
            (nil))))
(insn 118 117 119 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:110 d.4 ] [110])) mABM.c:205 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:110 d.4 ] [110])
        (nil)))
(insn 119 118 120 4 (set (reg:XF 9 st(1) [orig:111 d.5 ] [111])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:206 131 {*movxf_internal_rex64}
     (nil))
(insn 120 119 121 4 (set (reg:XF 8 st [orig:112 l_nvp.6 ] [112])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])) mABM.c:206 131 {*movxf_internal_rex64}
     (nil))
(insn 121 120 122 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:111 d.5 ] [111])
            (reg:XF 8 st [orig:112 l_nvp.6 ] [112]))) mABM.c:206 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:112 l_nvp.6 ] [112])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:111 d.5 ] [111])
            (nil))))
(jump_insn 122 121 126 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 901)
            (pc))) mABM.c:206 612 {*jcc_1}
     (nil)
 -> 901)
;;  succ:       5 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 546 547 548 549 550 551
(note 126 122 127 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 5 (set (reg:XF 9 st(1) [orig:113 d.7 ] [113])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:207 131 {*movxf_internal_rex64}
     (nil))
(insn 128 127 129 5 (set (reg:XF 8 st [orig:114 l_nvp.8 ] [114])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])) mABM.c:207 131 {*movxf_internal_rex64}
     (nil))
(insn 129 128 130 5 (set (reg:XF 8 st [orig:115 d.9 ] [115])
        (minus:XF (reg:XF 9 st(1) [orig:113 d.7 ] [113])
            (reg:XF 8 st [orig:114 l_nvp.8 ] [114]))) mABM.c:207 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:114 l_nvp.8 ] [114])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:113 d.7 ] [113])
            (nil))))
(insn 130 129 131 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:115 d.9 ] [115])) mABM.c:207 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:115 d.9 ] [115])
        (nil)))
(insn 131 130 132 5 (set (reg:XF 9 st(1) [orig:116 d.10 ] [116])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:208 131 {*movxf_internal_rex64}
     (nil))
(insn 132 131 133 5 (set (reg:SI 0 ax [orig:117 j.11 ] [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:208 89 {*movsi_internal}
     (nil))
(insn 133 132 942 5 (set (reg:DI 0 ax [orig:118 D.7093 ] [118])
        (sign_extend:DI (reg:SI 0 ax [orig:117 j.11 ] [117]))) mABM.c:208 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:117 j.11 ] [117])
        (nil)))
(insn 942 133 134 5 (set (reg:DI 0 ax [orig:119 D.7093 ] [119])
        (reg:DI 0 ax [orig:118 D.7093 ] [118])) mABM.c:208 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:118 D.7093 ] [118])
        (nil)))
(insn 134 942 943 5 (parallel [
            (set (reg:DI 0 ax [orig:119 D.7093 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:119 D.7093 ] [119])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:208 513 {*ashldi3_1}
     (nil))
(insn 943 134 135 5 (set (reg:DI 1 dx [orig:119 D.7093 ] [119])
        (reg:DI 0 ax [orig:119 D.7093 ] [119])) mABM.c:208 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 D.7093 ] [119])
        (nil)))
(insn 135 943 136 5 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:208 87 {*movdi_internal_rex64}
     (nil))
(insn 136 135 137 5 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.7092 ] [120])
                (plus:DI (reg/f:DI 0 ax [546])
                    (reg:DI 1 dx [orig:119 D.7093 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:208 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [546])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:119 D.7093 ] [119])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:119 D.7093 ] [119]))
                (nil)))))
(insn 137 136 138 5 (set (reg:XF 8 st [orig:121 D.7095 ] [121])
        (mem:XF (reg/f:DI 0 ax [orig:120 D.7092 ] [120]) [0 *_81+0 S16 A128])) mABM.c:208 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:120 D.7092 ] [120])
        (nil)))
(insn 138 137 139 5 (set (reg:XF 8 st [orig:122 t_c.12 ] [122])
        (div:XF (reg:XF 9 st(1) [orig:116 d.10 ] [116])
            (reg:XF 8 st [orig:121 D.7095 ] [121]))) mABM.c:208 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:121 D.7095 ] [121])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:116 d.10 ] [116])
            (nil))))
(insn 139 138 140 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])
        (reg:XF 8 st [orig:122 t_c.12 ] [122])) mABM.c:208 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:122 t_c.12 ] [122])
        (nil)))
(insn 140 139 141 5 (set (reg:SI 0 ax [orig:123 j.13 ] [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:209 89 {*movsi_internal}
     (nil))
(insn 141 140 142 5 (parallel [
            (set (reg:SI 0 ax [orig:124 j.14 ] [124])
                (plus:SI (reg:SI 0 ax [orig:123 j.13 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:209 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:123 j.13 ] [123])
        (nil)))
(insn 142 141 143 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])
        (reg:SI 0 ax [orig:124 j.14 ] [124])) mABM.c:209 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:124 j.14 ] [124])
        (nil)))
(insn 143 142 144 5 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:210 87 {*movdi_internal_rex64}
     (nil))
(insn 144 143 145 5 (set (reg/f:DI 0 ax [orig:125 D.7092 ] [125])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [547])
                (const_int 16 [0x10])) [0 f_8(D)->time+0 S8 A128])) mABM.c:210 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [547])
        (nil)))
(insn 145 144 146 5 (set (reg:SI 1 dx [orig:126 j.15 ] [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:210 89 {*movsi_internal}
     (nil))
(insn 146 145 147 5 (set (reg:DI 1 dx [orig:127 D.7093 ] [127])
        (sign_extend:DI (reg:SI 1 dx [orig:126 j.15 ] [126]))) mABM.c:210 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:126 j.15 ] [126])
        (nil)))
(insn 147 146 148 5 (parallel [
            (set (reg:DI 1 dx [orig:128 D.7093 ] [128])
                (ashift:DI (reg:DI 1 dx [orig:127 D.7093 ] [127])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:210 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:127 D.7093 ] [127])
        (nil)))
(insn 148 147 149 5 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.7092 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.7092 ] [125])
                    (reg:DI 1 dx [orig:128 D.7093 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:210 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:128 D.7093 ] [128])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.7092 ] [125])
            (nil))))
(insn 149 148 150 5 (set (reg:SI 1 dx [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:210 89 {*movsi_internal}
     (nil))
(insn 150 149 928 5 (parallel [
            (set (reg:SI 1 dx [orig:130 D.7091 ] [130])
                (plus:SI (reg:SI 1 dx [548])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:210 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [548])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 928 150 152 5 (parallel [
            (set (reg:XF 9 st(1) [orig:131 D.7095 ] [131])
                (float:XF (reg:SI 1 dx [orig:130 D.7091 ] [130])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -152 [0xffffffffffffff68])) [0  S4 A32]))
        ]) mABM.c:210 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:130 D.7091 ] [130])
        (nil)))
(insn 152 928 153 5 (set (reg:XF 8 st [549])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:210 131 {*movxf_internal_rex64}
     (nil))
(insn 153 152 154 5 (set (reg:XF 9 st(1) [orig:132 D.7095 ] [132])
        (mult:XF (reg:XF 9 st(1) [orig:131 D.7095 ] [131])
            (reg:XF 8 st [549]))) mABM.c:210 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [549])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:131 D.7095 ] [131])
            (nil))))
(insn 154 153 155 5 (set (reg:XF 8 st [550])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t0+0 S16 A128])) mABM.c:210 131 {*movxf_internal_rex64}
     (nil))
(insn 155 154 156 5 (set (reg:XF 9 st(1) [orig:133 D.7095 ] [133])
        (plus:XF (reg:XF 9 st(1) [orig:132 D.7095 ] [132])
            (reg:XF 8 st [550]))) mABM.c:210 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [550])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:132 D.7095 ] [132])
            (nil))))
(insn 156 155 157 5 (set (reg:XF 8 st [orig:134 t_c.16 ] [134])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:210 131 {*movxf_internal_rex64}
     (nil))
(insn 157 156 158 5 (set (reg:XF 8 st [orig:135 D.7095 ] [135])
        (minus:XF (reg:XF 9 st(1) [orig:133 D.7095 ] [133])
            (reg:XF 8 st [orig:134 t_c.16 ] [134]))) mABM.c:210 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:134 t_c.16 ] [134])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:133 D.7095 ] [133])
            (nil))))
(insn 158 157 159 5 (set (mem:XF (reg/f:DI 0 ax [orig:129 D.7092 ] [129]) [0 *_90+0 S16 A128])
        (reg:XF 8 st [orig:135 D.7095 ] [135])) mABM.c:210 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:135 D.7095 ] [135])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:129 D.7092 ] [129])
            (nil))))
(insn 159 158 160 5 (set (reg:SI 0 ax [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n_nvp+0 S4 A32])) mABM.c:212 89 {*movsi_internal}
     (nil))
(insn 160 159 161 5 (parallel [
            (set (reg:SI 1 dx [orig:136 D.7091 ] [136])
                (plus:SI (reg:SI 0 ax [551])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:212 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [551])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -100 [0xffffffffffffff9c])) [0 n_nvp+0 S4 A32])
                (const_int -2 [0xfffffffffffffffe]))
            (nil))))
(insn 161 160 162 5 (set (reg:SI 0 ax [orig:137 j.17 ] [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:212 89 {*movsi_internal}
     (nil))
(insn 162 161 163 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:136 D.7091 ] [136])
            (reg:SI 0 ax [orig:137 j.17 ] [137]))) mABM.c:212 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:137 j.17 ] [137])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:136 D.7091 ] [136])
            (nil))))
(jump_insn 163 162 164 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) mABM.c:212 612 {*jcc_1}
     (nil)
 -> 219)
;;  succ:       6 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 164 163 902 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 902 164 903 6 (set (pc)
        (label_ref 208)) mABM.c:213 650 {jump}
     (nil)
 -> 208)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 903 902 212)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 552 553 554 555 556 557 558 559 560 561 562 563
(code_label 212 903 167 7 66 "" [1 uses])
(note 167 212 168 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 7 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:214 89 {*movsi_internal}
     (nil))
(insn 169 168 170 7 (set (reg:DI 0 ax [orig:139 D.7094 ] [139])
        (sign_extend:DI (reg:SI 0 ax [552]))) mABM.c:214 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [552])
        (nil)))
(insn 170 169 171 7 (parallel [
            (set (reg:DI 0 ax [orig:140 D.7094 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 D.7094 ] [139])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:214 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:139 D.7094 ] [139])
        (nil)))
(insn 171 170 172 7 (parallel [
            (set (reg:DI 1 dx [orig:141 D.7094 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 D.7094 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:214 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:140 D.7094 ] [140])
        (nil)))
(insn 172 171 173 7 (set (reg/f:DI 0 ax [553])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:214 87 {*movdi_internal_rex64}
     (nil))
(insn 173 172 174 7 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.7096 ] [142])
                (plus:DI (reg/f:DI 0 ax [553])
                    (reg:DI 1 dx [orig:141 D.7094 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:214 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [553])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:141 D.7094 ] [141])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:141 D.7094 ] [141]))
                (nil)))))
(insn 174 173 175 7 (set (reg/f:DI 2 cx [orig:143 D.7092 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [orig:142 D.7096 ] [142]) [0 *_103+0 S8 A64])) mABM.c:214 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:142 D.7096 ] [142])
        (nil)))
(insn 175 174 176 7 (set (reg:XF 0 ax [554])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:214 131 {*movxf_internal_rex64}
     (nil))
(insn 176 175 177 7 (set (mem:XF (reg/f:DI 2 cx [orig:143 D.7092 ] [143]) [0 *_104+0 S16 A128])
        (reg:XF 0 ax [554])) mABM.c:214 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [554])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:143 D.7092 ] [143])
            (nil))))
(insn 177 176 178 7 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:215 89 {*movsi_internal}
     (nil))
(insn 178 177 179 7 (set (reg:DI 0 ax [orig:144 D.7094 ] [144])
        (sign_extend:DI (reg:SI 0 ax [555]))) mABM.c:215 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [555])
        (nil)))
(insn 179 178 180 7 (parallel [
            (set (reg:DI 0 ax [orig:145 D.7094 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 D.7094 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:144 D.7094 ] [144])
        (nil)))
(insn 180 179 181 7 (parallel [
            (set (reg:DI 1 dx [orig:146 D.7094 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.7094 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:215 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:145 D.7094 ] [145])
        (nil)))
(insn 181 180 182 7 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 182 181 183 7 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.7096 ] [147])
                (plus:DI (reg/f:DI 0 ax [556])
                    (reg:DI 1 dx [orig:146 D.7094 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [556])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:146 D.7094 ] [146])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:146 D.7094 ] [146]))
                (nil)))))
(insn 183 182 184 7 (set (reg/f:DI 0 ax [orig:148 D.7092 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [orig:147 D.7096 ] [147]) [0 *_108+0 S8 A64])) mABM.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:147 D.7096 ] [147])
        (nil)))
(insn 184 183 185 7 (parallel [
            (set (reg/f:DI 2 cx [orig:149 D.7092 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:148 D.7092 ] [148])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:148 D.7092 ] [148])
        (nil)))
(insn 185 184 186 7 (set (reg:XF 0 ax [557])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:215 131 {*movxf_internal_rex64}
     (nil))
(insn 186 185 187 7 (set (mem:XF (reg/f:DI 2 cx [orig:149 D.7092 ] [149]) [0 *_110+0 S16 A128])
        (reg:XF 0 ax [557])) mABM.c:215 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [557])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:149 D.7092 ] [149])
            (nil))))
(insn 187 186 188 7 (set (reg:SI 0 ax [558])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:216 89 {*movsi_internal}
     (nil))
(insn 188 187 189 7 (set (reg:DI 0 ax [orig:150 D.7094 ] [150])
        (sign_extend:DI (reg:SI 0 ax [558]))) mABM.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [558])
        (nil)))
(insn 189 188 190 7 (parallel [
            (set (reg:DI 0 ax [orig:151 D.7094 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 D.7094 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:150 D.7094 ] [150])
        (nil)))
(insn 190 189 191 7 (parallel [
            (set (reg:DI 1 dx [orig:152 D.7094 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.7094 ] [151])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:151 D.7094 ] [151])
        (nil)))
(insn 191 190 192 7 (set (reg/f:DI 0 ax [559])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 192 191 193 7 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.7096 ] [153])
                (plus:DI (reg/f:DI 0 ax [559])
                    (reg:DI 1 dx [orig:152 D.7094 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [559])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:152 D.7094 ] [152])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:152 D.7094 ] [152]))
                (nil)))))
(insn 193 192 194 7 (set (reg/f:DI 0 ax [orig:154 D.7092 ] [154])
        (mem/f:DI (reg/f:DI 0 ax [orig:153 D.7096 ] [153]) [0 *_114+0 S8 A64])) mABM.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.7096 ] [153])
        (nil)))
(insn 194 193 195 7 (parallel [
            (set (reg/f:DI 2 cx [orig:155 D.7092 ] [155])
                (plus:DI (reg/f:DI 0 ax [orig:154 D.7092 ] [154])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:154 D.7092 ] [154])
        (nil)))
(insn 195 194 196 7 (set (reg:XF 0 ax [560])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:216 131 {*movxf_internal_rex64}
     (nil))
(insn 196 195 197 7 (set (mem:XF (reg/f:DI 2 cx [orig:155 D.7092 ] [155]) [0 *_116+0 S16 A128])
        (reg:XF 0 ax [560])) mABM.c:216 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [560])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:155 D.7092 ] [155])
            (nil))))
(insn 197 196 198 7 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:217 89 {*movsi_internal}
     (nil))
(insn 198 197 199 7 (set (reg:DI 0 ax [orig:156 D.7094 ] [156])
        (sign_extend:DI (reg:SI 0 ax [561]))) mABM.c:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [561])
        (nil)))
(insn 199 198 200 7 (parallel [
            (set (reg:DI 0 ax [orig:157 D.7094 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 D.7094 ] [156])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:156 D.7094 ] [156])
        (nil)))
(insn 200 199 201 7 (parallel [
            (set (reg:DI 1 dx [orig:158 D.7094 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.7094 ] [157])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:217 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:157 D.7094 ] [157])
        (nil)))
(insn 201 200 202 7 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 202 201 203 7 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.7096 ] [159])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 1 dx [orig:158 D.7094 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [562])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:158 D.7094 ] [158])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:158 D.7094 ] [158]))
                (nil)))))
(insn 203 202 204 7 (set (reg/f:DI 0 ax [orig:160 D.7092 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [orig:159 D.7096 ] [159]) [0 *_120+0 S8 A64])) mABM.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.7096 ] [159])
        (nil)))
(insn 204 203 205 7 (parallel [
            (set (reg/f:DI 2 cx [orig:161 D.7092 ] [161])
                (plus:DI (reg/f:DI 0 ax [orig:160 D.7092 ] [160])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:160 D.7092 ] [160])
        (nil)))
(insn 205 204 206 7 (set (reg:XF 0 ax [563])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:217 131 {*movxf_internal_rex64}
     (nil))
(insn 206 205 207 7 (set (mem:XF (reg/f:DI 2 cx [orig:161 D.7092 ] [161]) [0 *_122+0 S16 A128])
        (reg:XF 0 ax [563])) mABM.c:217 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [563])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:161 D.7092 ] [161])
            (nil))))
(insn 207 206 208 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:213 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 564
(code_label 208 207 209 8 65 "" [1 uses])
(note 209 208 210 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 8 (set (reg:SI 0 ax [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])) mABM.c:213 89 {*movsi_internal}
     (nil))
(insn 211 210 213 8 (parallel [
            (set (reg:SI 0 ax [orig:138 D.7091 ] [138])
                (plus:SI (reg:SI 0 ax [564])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:213 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [564])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -132 [0xffffffffffffff7c])) [0 t_wind+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 213 211 214 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:138 D.7091 ] [138])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32]))) mABM.c:213 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:138 D.7091 ] [138])
        (nil)))
(jump_insn 214 213 215 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) mABM.c:213 612 {*jcc_1}
     (nil)
 -> 212)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 215 214 216 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 904 9 (set (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (const_int 0 [0])) mABM.c:219 89 {*movsi_internal}
     (nil))
(jump_insn 904 216 905 9 (set (pc)
        (label_ref 881)) mABM.c:219 650 {jump}
     (nil)
 -> 881)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 905 904 219)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579
(code_label 219 905 220 10 64 "" [1 uses])
(note 220 219 221 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 10 (set (reg:SI 0 ax [orig:162 j.18 ] [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:221 89 {*movsi_internal}
     (nil))
(insn 222 221 944 10 (set (reg:DI 0 ax [orig:163 D.7093 ] [163])
        (sign_extend:DI (reg:SI 0 ax [orig:162 j.18 ] [162]))) mABM.c:221 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:162 j.18 ] [162])
        (nil)))
(insn 944 222 223 10 (set (reg:DI 0 ax [orig:164 D.7093 ] [164])
        (reg:DI 0 ax [orig:163 D.7093 ] [163])) mABM.c:221 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:163 D.7093 ] [163])
        (nil)))
(insn 223 944 945 10 (parallel [
            (set (reg:DI 0 ax [orig:164 D.7093 ] [164])
                (ashift:DI (reg:DI 0 ax [orig:164 D.7093 ] [164])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:221 513 {*ashldi3_1}
     (nil))
(insn 945 223 224 10 (set (reg:DI 1 dx [orig:164 D.7093 ] [164])
        (reg:DI 0 ax [orig:164 D.7093 ] [164])) mABM.c:221 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:164 D.7093 ] [164])
        (nil)))
(insn 224 945 225 10 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:221 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 10 (parallel [
            (set (reg/f:DI 0 ax [orig:165 D.7092 ] [165])
                (plus:DI (reg/f:DI 0 ax [565])
                    (reg:DI 1 dx [orig:164 D.7093 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:221 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [565])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:164 D.7093 ] [164])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:164 D.7093 ] [164]))
                (nil)))))
(insn 226 225 227 10 (set (reg:XF 9 st(1) [orig:166 D.7095 ] [166])
        (mem:XF (reg/f:DI 0 ax [orig:165 D.7092 ] [165]) [0 *_128+0 S16 A128])) mABM.c:221 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:165 D.7092 ] [165])
        (nil)))
(insn 227 226 228 10 (set (reg:XF 8 st [orig:167 t_c.19 ] [167])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:221 131 {*movxf_internal_rex64}
     (nil))
(insn 228 227 229 10 (set (reg:XF 8 st [orig:168 d.20 ] [168])
        (mult:XF (reg:XF 8 st [orig:167 t_c.19 ] [167])
            (reg:XF 9 st(1) [orig:166 D.7095 ] [166]))) mABM.c:221 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:167 t_c.19 ] [167])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:166 D.7095 ] [166])
            (nil))))
(insn 229 228 230 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:168 d.20 ] [168])) mABM.c:221 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:168 d.20 ] [168])
        (nil)))
(insn 230 229 231 10 (set (reg:SI 0 ax [orig:169 j.21 ] [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:223 89 {*movsi_internal}
     (nil))
(insn 231 230 232 10 (set (reg:DI 0 ax [orig:170 D.7094 ] [170])
        (sign_extend:DI (reg:SI 0 ax [orig:169 j.21 ] [169]))) mABM.c:223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:169 j.21 ] [169])
        (nil)))
(insn 232 231 233 10 (parallel [
            (set (reg:DI 0 ax [orig:171 D.7094 ] [171])
                (plus:DI (reg:DI 0 ax [orig:170 D.7094 ] [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:170 D.7094 ] [170])
        (nil)))
(insn 233 232 234 10 (parallel [
            (set (reg:DI 1 dx [orig:172 D.7094 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.7094 ] [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:223 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:171 D.7094 ] [171])
        (nil)))
(insn 234 233 235 10 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 235 234 236 10 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.7096 ] [173])
                (plus:DI (reg/f:DI 0 ax [566])
                    (reg:DI 1 dx [orig:172 D.7094 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [566])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:172 D.7094 ] [172])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:172 D.7094 ] [172]))
                (nil)))))
(insn 236 235 237 10 (set (reg/f:DI 1 dx [orig:174 D.7092 ] [174])
        (mem/f:DI (reg/f:DI 0 ax [orig:173 D.7096 ] [173]) [0 *_136+0 S8 A64])) mABM.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:173 D.7096 ] [173])
        (nil)))
(insn 237 236 238 10 (set (reg:SI 0 ax [orig:175 j.22 ] [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:223 89 {*movsi_internal}
     (nil))
(insn 238 237 239 10 (set (reg:DI 0 ax [orig:176 D.7093 ] [176])
        (sign_extend:DI (reg:SI 0 ax [orig:175 j.22 ] [175]))) mABM.c:223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:175 j.22 ] [175])
        (nil)))
(insn 239 238 240 10 (parallel [
            (set (reg:DI 2 cx [orig:177 D.7093 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.7093 ] [176])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:223 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:176 D.7093 ] [176])
        (nil)))
(insn 240 239 241 10 (set (reg/f:DI 0 ax [567])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 241 240 242 10 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.7096 ] [178])
                (plus:DI (reg/f:DI 0 ax [567])
                    (reg:DI 2 cx [orig:177 D.7093 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [567])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:177 D.7093 ] [177])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 2 cx [orig:177 D.7093 ] [177]))
                (nil)))))
(insn 242 241 243 10 (set (reg/f:DI 0 ax [orig:179 D.7092 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [orig:178 D.7096 ] [178]) [0 *_141+0 S8 A64])) mABM.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:178 D.7096 ] [178])
        (nil)))
(insn 243 242 244 10 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:174 D.7092 ] [174])) mABM.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:174 D.7092 ] [174])
        (nil)))
(insn 244 243 245 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:179 D.7092 ] [179])) mABM.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:179 D.7092 ] [179])
        (nil)))
(call_insn 245 244 246 10 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:223 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 246 245 247 10 (set (reg:XF 8 st [orig:180 l_nvp.23 ] [180])
        (reg:XF 8 st)) mABM.c:223 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 247 246 248 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])
        (reg:XF 8 st [orig:180 l_nvp.23 ] [180])) mABM.c:223 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:180 l_nvp.23 ] [180])
        (nil)))
(insn 248 247 249 10 (set (reg:SI 0 ax [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:224 89 {*movsi_internal}
     (nil))
(insn 249 248 927 10 (parallel [
            (set (reg:SI 0 ax [orig:181 D.7091 ] [181])
                (plus:SI (reg:SI 0 ax [568])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:224 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [568])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 927 249 251 10 (parallel [
            (set (reg:XF 9 st(1) [orig:182 D.7095 ] [182])
                (float:XF (reg:SI 0 ax [orig:181 D.7091 ] [181])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -152 [0xffffffffffffff68])) [0  S4 A32]))
        ]) mABM.c:224 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:181 D.7091 ] [181])
        (nil)))
(insn 251 927 252 10 (set (reg:XF 8 st [569])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 252 251 253 10 (set (reg:XF 9 st(1) [orig:183 D.7095 ] [183])
        (mult:XF (reg:XF 9 st(1) [orig:182 D.7095 ] [182])
            (reg:XF 8 st [569]))) mABM.c:224 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [569])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:182 D.7095 ] [182])
            (nil))))
(insn 253 252 254 10 (set (reg:XF 8 st [570])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t0+0 S16 A128])) mABM.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 254 253 255 10 (set (reg:XF 8 st [orig:184 D.7095 ] [184])
        (plus:XF (reg:XF 8 st [570])
            (reg:XF 9 st(1) [orig:183 D.7095 ] [183]))) mABM.c:224 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [570])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:183 D.7095 ] [183])
            (nil))))
(insn 255 254 256 10 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:224 87 {*movdi_internal_rex64}
     (nil))
(insn 256 255 257 10 (set (reg/f:DI 0 ax [orig:185 D.7092 ] [185])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [571])
                (const_int 16 [0x10])) [0 f_8(D)->time+0 S8 A128])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [571])
        (nil)))
(insn 257 256 258 10 (parallel [
            (set (reg:DI 38 r9 [572])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:224 274 {*adddi_1}
     (nil))
(insn 258 257 259 10 (parallel [
            (set (reg:DI 37 r8 [573])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:224 274 {*adddi_1}
     (nil))
(insn 259 258 260 10 (set (reg:DI 2 cx [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:224 87 {*movdi_internal_rex64}
     (nil))
(insn 260 259 261 10 (set (reg:DI 39 r10 [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:224 87 {*movdi_internal_rex64}
     (nil))
(insn 261 260 262 10 (parallel [
            (set (reg:DI 4 si [576])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:224 274 {*adddi_1}
     (nil))
(insn 262 261 263 10 (parallel [
            (set (reg:DI 5 di [577])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:224 274 {*adddi_1}
     (nil))
(insn 263 262 264 10 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 8 st [orig:184 D.7095 ] [184])) mABM.c:224 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:184 D.7095 ] [184])
        (nil)))
(insn 264 263 265 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg/f:DI 0 ax [orig:185 D.7092 ] [185])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:185 D.7092 ] [185])
        (nil)))
(insn 265 264 266 10 (set (reg:SI 0 ax [578])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n_nvp+0 S4 A32])) mABM.c:224 89 {*movsi_internal}
     (nil))
(insn 266 265 267 10 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S4 A64])
        (reg:SI 0 ax [578])) mABM.c:224 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [578])
        (nil)))
(insn 267 266 268 10 (set (reg:XF 0 ax [579])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 268 267 269 10 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [579])) mABM.c:224 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [579])
        (nil)))
(insn 269 268 270 10 (set (reg:DI 38 r9)
        (reg:DI 38 r9 [572])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [572])
        (nil)))
(insn 270 269 271 10 (set (reg:DI 37 r8)
        (reg:DI 37 r8 [573])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [573])
        (nil)))
(insn 271 270 272 10 (set (reg:DI 2 cx)
        (reg:DI 2 cx [574])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [574])
        (nil)))
(insn 272 271 273 10 (set (reg:DI 1 dx)
        (reg:DI 39 r10 [575])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [575])
        (nil)))
(insn 273 272 274 10 (set (reg:DI 4 si)
        (reg:DI 4 si [576])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [576])
        (nil)))
(insn 274 273 275 10 (set (reg:DI 5 di)
        (reg:DI 5 di [577])) mABM.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [577])
        (nil)))
(call_insn 275 274 276 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_nvp_to_close") [flags 0x3]  <function_decl 0x7f05a56ea900 _nvp_to_close>) [0 _nvp_to_close S1 A8])
            (const_int 48 [0x30]))) mABM.c:224 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 16 [0x10])) [0  S4 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 24 [0x18])) [0  S8 A64]))
                                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 32 [0x20])) [0  S16 A128]))
                                            (nil))))))))))))
(insn 276 275 277 10 (set (reg:SI 0 ax [orig:186 D.7091 ] [186])
        (reg:SI 0 ax)) mABM.c:224 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 277 276 278 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:186 D.7091 ] [186])
            (const_int 0 [0]))) mABM.c:224 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:186 D.7091 ] [186])
        (nil)))
(jump_insn 278 277 279 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 334)
            (pc))) mABM.c:224 612 {*jcc_1}
     (nil)
 -> 334)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 279 278 906 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 906 279 907 11 (set (pc)
        (label_ref 323)) mABM.c:225 650 {jump}
     (nil)
 -> 323)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 907 906 327)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 580 581 582 583 584 585 586 587 588 589 590 591
(code_label 327 907 282 12 70 "" [1 uses])
(note 282 327 283 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 12 (set (reg:SI 0 ax [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:226 89 {*movsi_internal}
     (nil))
(insn 284 283 285 12 (set (reg:DI 0 ax [orig:188 D.7094 ] [188])
        (sign_extend:DI (reg:SI 0 ax [580]))) mABM.c:226 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [580])
        (nil)))
(insn 285 284 286 12 (parallel [
            (set (reg:DI 0 ax [orig:189 D.7094 ] [189])
                (plus:DI (reg:DI 0 ax [orig:188 D.7094 ] [188])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:188 D.7094 ] [188])
        (nil)))
(insn 286 285 287 12 (parallel [
            (set (reg:DI 1 dx [orig:190 D.7094 ] [190])
                (ashift:DI (reg:DI 0 ax [orig:189 D.7094 ] [189])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:226 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:189 D.7094 ] [189])
        (nil)))
(insn 287 286 288 12 (set (reg/f:DI 0 ax [581])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:226 87 {*movdi_internal_rex64}
     (nil))
(insn 288 287 289 12 (parallel [
            (set (reg/f:DI 0 ax [orig:191 D.7096 ] [191])
                (plus:DI (reg/f:DI 0 ax [581])
                    (reg:DI 1 dx [orig:190 D.7094 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [581])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:190 D.7094 ] [190])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:190 D.7094 ] [190]))
                (nil)))))
(insn 289 288 290 12 (set (reg/f:DI 2 cx [orig:192 D.7092 ] [192])
        (mem/f:DI (reg/f:DI 0 ax [orig:191 D.7096 ] [191]) [0 *_154+0 S8 A64])) mABM.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:191 D.7096 ] [191])
        (nil)))
(insn 290 289 291 12 (set (reg:XF 0 ax [582])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:226 131 {*movxf_internal_rex64}
     (nil))
(insn 291 290 292 12 (set (mem:XF (reg/f:DI 2 cx [orig:192 D.7092 ] [192]) [0 *_155+0 S16 A128])
        (reg:XF 0 ax [582])) mABM.c:226 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [582])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:192 D.7092 ] [192])
            (nil))))
(insn 292 291 293 12 (set (reg:SI 0 ax [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:227 89 {*movsi_internal}
     (nil))
(insn 293 292 294 12 (set (reg:DI 0 ax [orig:193 D.7094 ] [193])
        (sign_extend:DI (reg:SI 0 ax [583]))) mABM.c:227 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [583])
        (nil)))
(insn 294 293 295 12 (parallel [
            (set (reg:DI 0 ax [orig:194 D.7094 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 D.7094 ] [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:193 D.7094 ] [193])
        (nil)))
(insn 295 294 296 12 (parallel [
            (set (reg:DI 1 dx [orig:195 D.7094 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.7094 ] [194])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:227 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:194 D.7094 ] [194])
        (nil)))
(insn 296 295 297 12 (set (reg/f:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:227 87 {*movdi_internal_rex64}
     (nil))
(insn 297 296 298 12 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.7096 ] [196])
                (plus:DI (reg/f:DI 0 ax [584])
                    (reg:DI 1 dx [orig:195 D.7094 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [584])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:195 D.7094 ] [195])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:195 D.7094 ] [195]))
                (nil)))))
(insn 298 297 299 12 (set (reg/f:DI 0 ax [orig:197 D.7092 ] [197])
        (mem/f:DI (reg/f:DI 0 ax [orig:196 D.7096 ] [196]) [0 *_159+0 S8 A64])) mABM.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:196 D.7096 ] [196])
        (nil)))
(insn 299 298 300 12 (parallel [
            (set (reg/f:DI 2 cx [orig:198 D.7092 ] [198])
                (plus:DI (reg/f:DI 0 ax [orig:197 D.7092 ] [197])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:197 D.7092 ] [197])
        (nil)))
(insn 300 299 301 12 (set (reg:XF 0 ax [585])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:227 131 {*movxf_internal_rex64}
     (nil))
(insn 301 300 302 12 (set (mem:XF (reg/f:DI 2 cx [orig:198 D.7092 ] [198]) [0 *_161+0 S16 A128])
        (reg:XF 0 ax [585])) mABM.c:227 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [585])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:198 D.7092 ] [198])
            (nil))))
(insn 302 301 303 12 (set (reg:SI 0 ax [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:228 89 {*movsi_internal}
     (nil))
(insn 303 302 304 12 (set (reg:DI 0 ax [orig:199 D.7094 ] [199])
        (sign_extend:DI (reg:SI 0 ax [586]))) mABM.c:228 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [586])
        (nil)))
(insn 304 303 305 12 (parallel [
            (set (reg:DI 0 ax [orig:200 D.7094 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 D.7094 ] [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:199 D.7094 ] [199])
        (nil)))
(insn 305 304 306 12 (parallel [
            (set (reg:DI 1 dx [orig:201 D.7094 ] [201])
                (ashift:DI (reg:DI 0 ax [orig:200 D.7094 ] [200])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:228 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:200 D.7094 ] [200])
        (nil)))
(insn 306 305 307 12 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:228 87 {*movdi_internal_rex64}
     (nil))
(insn 307 306 308 12 (parallel [
            (set (reg/f:DI 0 ax [orig:202 D.7096 ] [202])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:201 D.7094 ] [201])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [587])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:201 D.7094 ] [201])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:201 D.7094 ] [201]))
                (nil)))))
(insn 308 307 309 12 (set (reg/f:DI 0 ax [orig:203 D.7092 ] [203])
        (mem/f:DI (reg/f:DI 0 ax [orig:202 D.7096 ] [202]) [0 *_165+0 S8 A64])) mABM.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:202 D.7096 ] [202])
        (nil)))
(insn 309 308 310 12 (parallel [
            (set (reg/f:DI 2 cx [orig:204 D.7092 ] [204])
                (plus:DI (reg/f:DI 0 ax [orig:203 D.7092 ] [203])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:203 D.7092 ] [203])
        (nil)))
(insn 310 309 311 12 (set (reg:XF 0 ax [588])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:228 131 {*movxf_internal_rex64}
     (nil))
(insn 311 310 312 12 (set (mem:XF (reg/f:DI 2 cx [orig:204 D.7092 ] [204]) [0 *_167+0 S16 A128])
        (reg:XF 0 ax [588])) mABM.c:228 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [588])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:204 D.7092 ] [204])
            (nil))))
(insn 312 311 313 12 (set (reg:SI 0 ax [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:229 89 {*movsi_internal}
     (nil))
(insn 313 312 314 12 (set (reg:DI 0 ax [orig:205 D.7094 ] [205])
        (sign_extend:DI (reg:SI 0 ax [589]))) mABM.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [589])
        (nil)))
(insn 314 313 315 12 (parallel [
            (set (reg:DI 0 ax [orig:206 D.7094 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 D.7094 ] [205])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:205 D.7094 ] [205])
        (nil)))
(insn 315 314 316 12 (parallel [
            (set (reg:DI 1 dx [orig:207 D.7094 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.7094 ] [206])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:206 D.7094 ] [206])
        (nil)))
(insn 316 315 317 12 (set (reg/f:DI 0 ax [590])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 317 316 318 12 (parallel [
            (set (reg/f:DI 0 ax [orig:208 D.7096 ] [208])
                (plus:DI (reg/f:DI 0 ax [590])
                    (reg:DI 1 dx [orig:207 D.7094 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [590])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:207 D.7094 ] [207])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:207 D.7094 ] [207]))
                (nil)))))
(insn 318 317 319 12 (set (reg/f:DI 0 ax [orig:209 D.7092 ] [209])
        (mem/f:DI (reg/f:DI 0 ax [orig:208 D.7096 ] [208]) [0 *_171+0 S8 A64])) mABM.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:208 D.7096 ] [208])
        (nil)))
(insn 319 318 320 12 (parallel [
            (set (reg/f:DI 2 cx [orig:210 D.7092 ] [210])
                (plus:DI (reg/f:DI 0 ax [orig:209 D.7092 ] [209])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:209 D.7092 ] [209])
        (nil)))
(insn 320 319 321 12 (set (reg:XF 0 ax [591])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:229 131 {*movxf_internal_rex64}
     (nil))
(insn 321 320 322 12 (set (mem:XF (reg/f:DI 2 cx [orig:210 D.7092 ] [210]) [0 *_173+0 S16 A128])
        (reg:XF 0 ax [591])) mABM.c:229 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [591])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:210 D.7092 ] [210])
            (nil))))
(insn 322 321 323 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:225 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 187 592
(code_label 323 322 324 13 69 "" [1 uses])
(note 324 323 325 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 325 324 326 13 (set (reg:SI 0 ax [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])) mABM.c:225 89 {*movsi_internal}
     (nil))
(insn 326 325 328 13 (parallel [
            (set (reg:SI 0 ax [orig:187 D.7091 ] [187])
                (plus:SI (reg:SI 0 ax [592])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:225 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [592])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -132 [0xffffffffffffff7c])) [0 t_wind+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 328 326 329 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:187 D.7091 ] [187])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32]))) mABM.c:225 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:187 D.7091 ] [187])
        (nil)))
(jump_insn 329 328 330 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) mABM.c:225 612 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       12
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 330 329 331 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 908 14 (set (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (const_int 0 [0])) mABM.c:231 89 {*movsi_internal}
     (nil))
(jump_insn 908 331 909 14 (set (pc)
        (label_ref 881)) mABM.c:231 650 {jump}
     (nil)
 -> 881)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 909 908 334)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 593 594 595 596 597 598 599 600 601 602 603
(code_label 334 909 335 15 68 "" [1 uses])
(note 335 334 336 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 15 (set (reg:XF 2 cx [orig:211 t_c.24 ] [211])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 337 336 338 15 (set (reg:SI 0 ax [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:233 89 {*movsi_internal}
     (nil))
(insn 338 337 339 15 (set (reg:DI 0 ax [orig:212 D.7094 ] [212])
        (sign_extend:DI (reg:SI 0 ax [593]))) mABM.c:233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [593])
        (nil)))
(insn 339 338 340 15 (parallel [
            (set (reg:DI 0 ax [orig:213 D.7094 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 D.7094 ] [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:212 D.7094 ] [212])
        (nil)))
(insn 340 339 341 15 (parallel [
            (set (reg:DI 1 dx [orig:214 D.7094 ] [214])
                (ashift:DI (reg:DI 0 ax [orig:213 D.7094 ] [213])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:213 D.7094 ] [213])
        (nil)))
(insn 341 340 342 15 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (nil))
(insn 342 341 343 15 (parallel [
            (set (reg/f:DI 0 ax [orig:215 D.7096 ] [215])
                (plus:DI (reg/f:DI 0 ax [594])
                    (reg:DI 1 dx [orig:214 D.7094 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [594])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:214 D.7094 ] [214])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:214 D.7094 ] [214]))
                (nil)))))
(insn 343 342 344 15 (set (reg/f:DI 37 r8 [orig:216 D.7092 ] [216])
        (mem/f:DI (reg/f:DI 0 ax [orig:215 D.7096 ] [215]) [0 *_180+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:215 D.7096 ] [215])
        (nil)))
(insn 344 343 345 15 (set (reg:SI 0 ax [orig:217 j.25 ] [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:233 89 {*movsi_internal}
     (nil))
(insn 345 344 346 15 (set (reg:DI 0 ax [orig:218 D.7094 ] [218])
        (sign_extend:DI (reg:SI 0 ax [orig:217 j.25 ] [217]))) mABM.c:233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:217 j.25 ] [217])
        (nil)))
(insn 346 345 347 15 (parallel [
            (set (reg:DI 0 ax [orig:219 D.7094 ] [219])
                (plus:DI (reg:DI 0 ax [orig:218 D.7094 ] [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:218 D.7094 ] [218])
        (nil)))
(insn 347 346 348 15 (parallel [
            (set (reg:DI 1 dx [orig:220 D.7094 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 D.7094 ] [219])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:219 D.7094 ] [219])
        (nil)))
(insn 348 347 349 15 (set (reg/f:DI 0 ax [595])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (nil))
(insn 349 348 350 15 (parallel [
            (set (reg/f:DI 0 ax [orig:221 D.7096 ] [221])
                (plus:DI (reg/f:DI 0 ax [595])
                    (reg:DI 1 dx [orig:220 D.7094 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [595])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:220 D.7094 ] [220])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:220 D.7094 ] [220]))
                (nil)))))
(insn 350 349 351 15 (set (reg/f:DI 4 si [orig:222 D.7092 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [orig:221 D.7096 ] [221]) [0 *_186+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:221 D.7096 ] [221])
        (nil)))
(insn 351 350 352 15 (set (reg:SI 0 ax [orig:223 j.26 ] [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:233 89 {*movsi_internal}
     (nil))
(insn 352 351 353 15 (set (reg:DI 0 ax [orig:224 D.7093 ] [224])
        (sign_extend:DI (reg:SI 0 ax [orig:223 j.26 ] [223]))) mABM.c:233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:223 j.26 ] [223])
        (nil)))
(insn 353 352 354 15 (parallel [
            (set (reg:DI 1 dx [orig:225 D.7093 ] [225])
                (ashift:DI (reg:DI 0 ax [orig:224 D.7093 ] [224])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:224 D.7093 ] [224])
        (nil)))
(insn 354 353 355 15 (set (reg/f:DI 0 ax [596])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (nil))
(insn 355 354 356 15 (parallel [
            (set (reg/f:DI 0 ax [orig:226 D.7096 ] [226])
                (plus:DI (reg/f:DI 0 ax [596])
                    (reg:DI 1 dx [orig:225 D.7093 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [596])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:225 D.7093 ] [225])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:225 D.7093 ] [225]))
                (nil)))))
(insn 356 355 357 15 (set (reg/f:DI 5 di [orig:227 D.7092 ] [227])
        (mem/f:DI (reg/f:DI 0 ax [orig:226 D.7096 ] [226]) [0 *_191+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:226 D.7096 ] [226])
        (nil)))
(insn 357 356 358 15 (set (reg:SI 0 ax [orig:228 j.27 ] [228])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:233 89 {*movsi_internal}
     (nil))
(insn 358 357 946 15 (set (reg:DI 0 ax [orig:229 D.7093 ] [229])
        (sign_extend:DI (reg:SI 0 ax [orig:228 j.27 ] [228]))) mABM.c:233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:228 j.27 ] [228])
        (nil)))
(insn 946 358 359 15 (set (reg:DI 0 ax [orig:230 D.7093 ] [230])
        (reg:DI 0 ax [orig:229 D.7093 ] [229])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:229 D.7093 ] [229])
        (nil)))
(insn 359 946 947 15 (parallel [
            (set (reg:DI 0 ax [orig:230 D.7093 ] [230])
                (ashift:DI (reg:DI 0 ax [orig:230 D.7093 ] [230])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 513 {*ashldi3_1}
     (nil))
(insn 947 359 360 15 (set (reg:DI 1 dx [orig:230 D.7093 ] [230])
        (reg:DI 0 ax [orig:230 D.7093 ] [230])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:230 D.7093 ] [230])
        (nil)))
(insn 360 947 361 15 (set (reg/f:DI 0 ax [597])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:233 87 {*movdi_internal_rex64}
     (nil))
(insn 361 360 362 15 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.7092 ] [231])
                (plus:DI (reg/f:DI 0 ax [597])
                    (reg:DI 1 dx [orig:230 D.7093 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:233 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [597])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:230 D.7093 ] [230])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:230 D.7093 ] [230]))
                (nil)))))
(insn 362 361 363 15 (set (reg:XF 0 ax [orig:232 D.7095 ] [232])
        (mem:XF (reg/f:DI 0 ax [orig:231 D.7092 ] [231]) [0 *_196+0 S16 A128])) mABM.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:231 D.7092 ] [231])
        (nil)))
(insn 363 362 364 15 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:211 t_c.24 ] [211])) mABM.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:211 t_c.24 ] [211])
        (nil)))
(insn 364 363 365 15 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:232 D.7095 ] [232])) mABM.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:232 D.7095 ] [232])
        (nil)))
(insn 365 364 366 15 (set (reg:DI 1 dx)
        (reg/f:DI 37 r8 [orig:216 D.7092 ] [216])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:216 D.7092 ] [216])
        (nil)))
(insn 366 365 367 15 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:222 D.7092 ] [222])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:222 D.7092 ] [222])
        (nil)))
(insn 367 366 368 15 (set (reg:DI 5 di)
        (reg/f:DI 5 di [orig:227 D.7092 ] [227])) mABM.c:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:227 D.7092 ] [227])
        (nil)))
(call_insn 368 367 369 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("coord") [flags 0x41]  <function_decl 0x7f05a595e800 coord>) [0 coord S1 A8])
            (const_int 32 [0x20]))) mABM.c:233 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 369 368 370 15 (set (reg:SI 0 ax [598])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:234 89 {*movsi_internal}
     (nil))
(insn 370 369 371 15 (set (reg:DI 0 ax [orig:233 D.7094 ] [233])
        (sign_extend:DI (reg:SI 0 ax [598]))) mABM.c:234 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [598])
        (nil)))
(insn 371 370 372 15 (parallel [
            (set (reg:DI 0 ax [orig:234 D.7094 ] [234])
                (plus:DI (reg:DI 0 ax [orig:233 D.7094 ] [233])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:233 D.7094 ] [233])
        (nil)))
(insn 372 371 373 15 (parallel [
            (set (reg:DI 1 dx [orig:235 D.7094 ] [235])
                (ashift:DI (reg:DI 0 ax [orig:234 D.7094 ] [234])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:234 D.7094 ] [234])
        (nil)))
(insn 373 372 374 15 (set (reg/f:DI 0 ax [599])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:234 87 {*movdi_internal_rex64}
     (nil))
(insn 374 373 375 15 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.7096 ] [236])
                (plus:DI (reg/f:DI 0 ax [599])
                    (reg:DI 1 dx [orig:235 D.7094 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [599])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:235 D.7094 ] [235])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:235 D.7094 ] [235]))
                (nil)))))
(insn 375 374 376 15 (set (reg/f:DI 0 ax [orig:237 D.7092 ] [237])
        (mem/f:DI (reg/f:DI 0 ax [orig:236 D.7096 ] [236]) [0 *_201+0 S8 A64])) mABM.c:234 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:236 D.7096 ] [236])
        (nil)))
(insn 376 375 377 15 (parallel [
            (set (reg/f:DI 2 cx [orig:238 D.7092 ] [238])
                (plus:DI (reg/f:DI 0 ax [orig:237 D.7092 ] [237])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:237 D.7092 ] [237])
        (nil)))
(insn 377 376 378 15 (set (reg:SI 0 ax [orig:239 j.28 ] [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:234 89 {*movsi_internal}
     (nil))
(insn 378 377 379 15 (set (reg:DI 0 ax [orig:240 D.7093 ] [240])
        (sign_extend:DI (reg:SI 0 ax [orig:239 j.28 ] [239]))) mABM.c:234 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:239 j.28 ] [239])
        (nil)))
(insn 379 378 380 15 (parallel [
            (set (reg:DI 1 dx [orig:241 D.7093 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.7093 ] [240])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:240 D.7093 ] [240])
        (nil)))
(insn 380 379 381 15 (set (reg/f:DI 0 ax [600])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:234 87 {*movdi_internal_rex64}
     (nil))
(insn 381 380 382 15 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.7096 ] [242])
                (plus:DI (reg/f:DI 0 ax [600])
                    (reg:DI 1 dx [orig:241 D.7093 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:234 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [600])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:241 D.7093 ] [241])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:241 D.7093 ] [241]))
                (nil)))))
(insn 382 381 383 15 (set (reg/f:DI 0 ax [orig:243 D.7092 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [orig:242 D.7096 ] [242]) [0 *_207+0 S8 A64])) mABM.c:234 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:242 D.7096 ] [242])
        (nil)))
(insn 383 382 384 15 (set (reg:XF 0 ax [orig:244 D.7095 ] [244])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:243 D.7092 ] [243])
                (const_int 32 [0x20])) [0 MEM[(long double *)_208 + 32B]+0 S16 A128])) mABM.c:234 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:243 D.7092 ] [243])
        (nil)))
(insn 384 383 385 15 (set (mem:XF (reg/f:DI 2 cx [orig:238 D.7092 ] [238]) [0 *_203+0 S16 A128])
        (reg:XF 0 ax [orig:244 D.7095 ] [244])) mABM.c:234 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:244 D.7095 ] [244])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:238 D.7092 ] [238])
            (nil))))
(insn 385 384 386 15 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:235 89 {*movsi_internal}
     (nil))
(insn 386 385 387 15 (set (reg:DI 0 ax [orig:245 D.7094 ] [245])
        (sign_extend:DI (reg:SI 0 ax [601]))) mABM.c:235 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [601])
        (nil)))
(insn 387 386 388 15 (parallel [
            (set (reg:DI 0 ax [orig:246 D.7094 ] [246])
                (plus:DI (reg:DI 0 ax [orig:245 D.7094 ] [245])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:245 D.7094 ] [245])
        (nil)))
(insn 388 387 389 15 (parallel [
            (set (reg:DI 1 dx [orig:247 D.7094 ] [247])
                (ashift:DI (reg:DI 0 ax [orig:246 D.7094 ] [246])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:246 D.7094 ] [246])
        (nil)))
(insn 389 388 390 15 (set (reg/f:DI 0 ax [602])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:235 87 {*movdi_internal_rex64}
     (nil))
(insn 390 389 391 15 (parallel [
            (set (reg/f:DI 0 ax [orig:248 D.7096 ] [248])
                (plus:DI (reg/f:DI 0 ax [602])
                    (reg:DI 1 dx [orig:247 D.7094 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [602])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:247 D.7094 ] [247])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:247 D.7094 ] [247]))
                (nil)))))
(insn 391 390 392 15 (set (reg/f:DI 0 ax [orig:249 D.7092 ] [249])
        (mem/f:DI (reg/f:DI 0 ax [orig:248 D.7096 ] [248]) [0 *_213+0 S8 A64])) mABM.c:235 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:248 D.7096 ] [248])
        (nil)))
(insn 392 391 393 15 (parallel [
            (set (reg/f:DI 2 cx [orig:250 D.7092 ] [250])
                (plus:DI (reg/f:DI 0 ax [orig:249 D.7092 ] [249])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:249 D.7092 ] [249])
        (nil)))
(insn 393 392 394 15 (set (reg:SI 0 ax [orig:251 j.29 ] [251])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:235 89 {*movsi_internal}
     (nil))
(insn 394 393 395 15 (set (reg:DI 0 ax [orig:252 D.7093 ] [252])
        (sign_extend:DI (reg:SI 0 ax [orig:251 j.29 ] [251]))) mABM.c:235 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:251 j.29 ] [251])
        (nil)))
(insn 395 394 396 15 (parallel [
            (set (reg:DI 1 dx [orig:253 D.7093 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.7093 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:252 D.7093 ] [252])
        (nil)))
(insn 396 395 397 15 (set (reg/f:DI 0 ax [603])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:235 87 {*movdi_internal_rex64}
     (nil))
(insn 397 396 398 15 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.7096 ] [254])
                (plus:DI (reg/f:DI 0 ax [603])
                    (reg:DI 1 dx [orig:253 D.7093 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:235 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [603])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:253 D.7093 ] [253])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:253 D.7093 ] [253]))
                (nil)))))
(insn 398 397 399 15 (set (reg/f:DI 0 ax [orig:255 D.7092 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [orig:254 D.7096 ] [254]) [0 *_219+0 S8 A64])) mABM.c:235 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:254 D.7096 ] [254])
        (nil)))
(insn 399 398 400 15 (set (reg:XF 0 ax [orig:256 D.7095 ] [256])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:255 D.7092 ] [255])
                (const_int 48 [0x30])) [0 MEM[(long double *)_220 + 48B]+0 S16 A128])) mABM.c:235 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:255 D.7092 ] [255])
        (nil)))
(insn 400 399 910 15 (set (mem:XF (reg/f:DI 2 cx [orig:250 D.7092 ] [250]) [0 *_215+0 S16 A128])
        (reg:XF 0 ax [orig:256 D.7095 ] [256])) mABM.c:235 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:256 D.7095 ] [256])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:250 D.7092 ] [250])
            (nil))))
(jump_insn 910 400 911 15 (set (pc)
        (label_ref 470)) 650 {jump}
     (nil)
 -> 470)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 911 910 901)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 604 605 606 607 608 609 610 611 612 613 614 615 616
(code_label 901 911 404 16 87 "" [1 uses])
(note 404 901 405 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 406 16 (set (reg:SI 0 ax [604])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:239 89 {*movsi_internal}
     (nil))
(insn 406 405 407 16 (set (reg:DI 0 ax [orig:257 D.7094 ] [257])
        (sign_extend:DI (reg:SI 0 ax [604]))) mABM.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [604])
        (nil)))
(insn 407 406 408 16 (parallel [
            (set (reg:DI 0 ax [orig:258 D.7094 ] [258])
                (plus:DI (reg:DI 0 ax [orig:257 D.7094 ] [257])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:257 D.7094 ] [257])
        (nil)))
(insn 408 407 409 16 (parallel [
            (set (reg:DI 1 dx [orig:259 D.7094 ] [259])
                (ashift:DI (reg:DI 0 ax [orig:258 D.7094 ] [258])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:258 D.7094 ] [258])
        (nil)))
(insn 409 408 410 16 (set (reg/f:DI 0 ax [605])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 410 409 411 16 (parallel [
            (set (reg/f:DI 0 ax [orig:260 D.7096 ] [260])
                (plus:DI (reg/f:DI 0 ax [605])
                    (reg:DI 1 dx [orig:259 D.7094 ] [259])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [605])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:259 D.7094 ] [259])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:259 D.7094 ] [259]))
                (nil)))))
(insn 411 410 412 16 (set (reg/f:DI 37 r8 [orig:261 D.7092 ] [261])
        (mem/f:DI (reg/f:DI 0 ax [orig:260 D.7096 ] [260]) [0 *_225+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:260 D.7096 ] [260])
        (nil)))
(insn 412 411 413 16 (set (reg:SI 0 ax [orig:262 j.30 ] [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:239 89 {*movsi_internal}
     (nil))
(insn 413 412 414 16 (set (reg:DI 0 ax [orig:263 D.7094 ] [263])
        (sign_extend:DI (reg:SI 0 ax [orig:262 j.30 ] [262]))) mABM.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:262 j.30 ] [262])
        (nil)))
(insn 414 413 415 16 (parallel [
            (set (reg:DI 0 ax [orig:264 D.7094 ] [264])
                (plus:DI (reg:DI 0 ax [orig:263 D.7094 ] [263])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:263 D.7094 ] [263])
        (nil)))
(insn 415 414 416 16 (parallel [
            (set (reg:DI 1 dx [orig:265 D.7094 ] [265])
                (ashift:DI (reg:DI 0 ax [orig:264 D.7094 ] [264])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:264 D.7094 ] [264])
        (nil)))
(insn 416 415 417 16 (set (reg/f:DI 0 ax [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 417 416 418 16 (parallel [
            (set (reg/f:DI 0 ax [orig:266 D.7096 ] [266])
                (plus:DI (reg/f:DI 0 ax [606])
                    (reg:DI 1 dx [orig:265 D.7094 ] [265])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [606])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:265 D.7094 ] [265])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:265 D.7094 ] [265]))
                (nil)))))
(insn 418 417 419 16 (set (reg/f:DI 4 si [orig:267 D.7092 ] [267])
        (mem/f:DI (reg/f:DI 0 ax [orig:266 D.7096 ] [266]) [0 *_231+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:266 D.7096 ] [266])
        (nil)))
(insn 419 418 420 16 (set (reg:SI 0 ax [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:239 89 {*movsi_internal}
     (nil))
(insn 420 419 421 16 (set (reg:DI 0 ax [orig:268 D.7093 ] [268])
        (sign_extend:DI (reg:SI 0 ax [607]))) mABM.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [607])
        (nil)))
(insn 421 420 422 16 (parallel [
            (set (reg:DI 1 dx [orig:269 D.7093 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.7093 ] [268])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:268 D.7093 ] [268])
        (nil)))
(insn 422 421 423 16 (set (reg/f:DI 0 ax [608])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 423 422 424 16 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.7096 ] [270])
                (plus:DI (reg/f:DI 0 ax [608])
                    (reg:DI 1 dx [orig:269 D.7093 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [608])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:269 D.7093 ] [269])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:269 D.7093 ] [269]))
                (nil)))))
(insn 424 423 425 16 (set (reg/f:DI 5 di [orig:271 D.7092 ] [271])
        (mem/f:DI (reg/f:DI 0 ax [orig:270 D.7096 ] [270]) [0 *_235+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:270 D.7096 ] [270])
        (nil)))
(insn 425 424 426 16 (set (reg:SI 0 ax [orig:272 j.31 ] [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:239 89 {*movsi_internal}
     (nil))
(insn 426 425 948 16 (set (reg:DI 0 ax [orig:273 D.7093 ] [273])
        (sign_extend:DI (reg:SI 0 ax [orig:272 j.31 ] [272]))) mABM.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:272 j.31 ] [272])
        (nil)))
(insn 948 426 427 16 (set (reg:DI 0 ax [orig:274 D.7093 ] [274])
        (reg:DI 0 ax [orig:273 D.7093 ] [273])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:273 D.7093 ] [273])
        (nil)))
(insn 427 948 949 16 (parallel [
            (set (reg:DI 0 ax [orig:274 D.7093 ] [274])
                (ashift:DI (reg:DI 0 ax [orig:274 D.7093 ] [274])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 513 {*ashldi3_1}
     (nil))
(insn 949 427 428 16 (set (reg:DI 1 dx [orig:274 D.7093 ] [274])
        (reg:DI 0 ax [orig:274 D.7093 ] [274])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:274 D.7093 ] [274])
        (nil)))
(insn 428 949 429 16 (set (reg/f:DI 0 ax [609])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 429 428 430 16 (parallel [
            (set (reg/f:DI 0 ax [orig:275 D.7092 ] [275])
                (plus:DI (reg/f:DI 0 ax [609])
                    (reg:DI 1 dx [orig:274 D.7093 ] [274])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [609])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:274 D.7093 ] [274])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:274 D.7093 ] [274]))
                (nil)))))
(insn 430 429 431 16 (set (reg:XF 0 ax [orig:276 D.7095 ] [276])
        (mem:XF (reg/f:DI 0 ax [orig:275 D.7092 ] [275]) [0 *_240+0 S16 A128])) mABM.c:239 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:275 D.7092 ] [275])
        (nil)))
(insn 431 430 432 16 (set (reg:XF 2 cx [610])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:239 131 {*movxf_internal_rex64}
     (nil))
(insn 432 431 433 16 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [610])) mABM.c:239 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [610])
        (nil)))
(insn 433 432 434 16 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:276 D.7095 ] [276])) mABM.c:239 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:276 D.7095 ] [276])
        (nil)))
(insn 434 433 435 16 (set (reg:DI 1 dx)
        (reg/f:DI 37 r8 [orig:261 D.7092 ] [261])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:261 D.7092 ] [261])
        (nil)))
(insn 435 434 436 16 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:267 D.7092 ] [267])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:267 D.7092 ] [267])
        (nil)))
(insn 436 435 437 16 (set (reg:DI 5 di)
        (reg/f:DI 5 di [orig:271 D.7092 ] [271])) mABM.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:271 D.7092 ] [271])
        (nil)))
(call_insn 437 436 438 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("coord") [flags 0x41]  <function_decl 0x7f05a595e800 coord>) [0 coord S1 A8])
            (const_int 32 [0x20]))) mABM.c:239 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 438 437 439 16 (set (reg:SI 0 ax [611])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:240 89 {*movsi_internal}
     (nil))
(insn 439 438 440 16 (set (reg:DI 0 ax [orig:277 D.7094 ] [277])
        (sign_extend:DI (reg:SI 0 ax [611]))) mABM.c:240 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [611])
        (nil)))
(insn 440 439 441 16 (parallel [
            (set (reg:DI 0 ax [orig:278 D.7094 ] [278])
                (plus:DI (reg:DI 0 ax [orig:277 D.7094 ] [277])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:277 D.7094 ] [277])
        (nil)))
(insn 441 440 442 16 (parallel [
            (set (reg:DI 1 dx [orig:279 D.7094 ] [279])
                (ashift:DI (reg:DI 0 ax [orig:278 D.7094 ] [278])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:278 D.7094 ] [278])
        (nil)))
(insn 442 441 443 16 (set (reg/f:DI 0 ax [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:240 87 {*movdi_internal_rex64}
     (nil))
(insn 443 442 444 16 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.7096 ] [280])
                (plus:DI (reg/f:DI 0 ax [612])
                    (reg:DI 1 dx [orig:279 D.7094 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [612])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:279 D.7094 ] [279])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:279 D.7094 ] [279]))
                (nil)))))
(insn 444 443 445 16 (set (reg/f:DI 0 ax [orig:281 D.7092 ] [281])
        (mem/f:DI (reg/f:DI 0 ax [orig:280 D.7096 ] [280]) [0 *_245+0 S8 A64])) mABM.c:240 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:280 D.7096 ] [280])
        (nil)))
(insn 445 444 446 16 (parallel [
            (set (reg/f:DI 2 cx [orig:282 D.7092 ] [282])
                (plus:DI (reg/f:DI 0 ax [orig:281 D.7092 ] [281])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:281 D.7092 ] [281])
        (nil)))
(insn 446 445 447 16 (set (reg:SI 0 ax [orig:283 j.32 ] [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:240 89 {*movsi_internal}
     (nil))
(insn 447 446 448 16 (set (reg:DI 0 ax [orig:284 D.7093 ] [284])
        (sign_extend:DI (reg:SI 0 ax [orig:283 j.32 ] [283]))) mABM.c:240 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:283 j.32 ] [283])
        (nil)))
(insn 448 447 449 16 (parallel [
            (set (reg:DI 1 dx [orig:285 D.7093 ] [285])
                (ashift:DI (reg:DI 0 ax [orig:284 D.7093 ] [284])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:284 D.7093 ] [284])
        (nil)))
(insn 449 448 450 16 (set (reg/f:DI 0 ax [613])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:240 87 {*movdi_internal_rex64}
     (nil))
(insn 450 449 451 16 (parallel [
            (set (reg/f:DI 0 ax [orig:286 D.7096 ] [286])
                (plus:DI (reg/f:DI 0 ax [613])
                    (reg:DI 1 dx [orig:285 D.7093 ] [285])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:240 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [613])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:285 D.7093 ] [285])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:285 D.7093 ] [285]))
                (nil)))))
(insn 451 450 452 16 (set (reg/f:DI 0 ax [orig:287 D.7092 ] [287])
        (mem/f:DI (reg/f:DI 0 ax [orig:286 D.7096 ] [286]) [0 *_251+0 S8 A64])) mABM.c:240 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:286 D.7096 ] [286])
        (nil)))
(insn 452 451 453 16 (set (reg:XF 0 ax [orig:288 D.7095 ] [288])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:287 D.7092 ] [287])
                (const_int 32 [0x20])) [0 MEM[(long double *)_252 + 32B]+0 S16 A128])) mABM.c:240 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:287 D.7092 ] [287])
        (nil)))
(insn 453 452 454 16 (set (mem:XF (reg/f:DI 2 cx [orig:282 D.7092 ] [282]) [0 *_247+0 S16 A128])
        (reg:XF 0 ax [orig:288 D.7095 ] [288])) mABM.c:240 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:288 D.7095 ] [288])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:282 D.7092 ] [282])
            (nil))))
(insn 454 453 455 16 (set (reg:SI 0 ax [614])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:241 89 {*movsi_internal}
     (nil))
(insn 455 454 456 16 (set (reg:DI 0 ax [orig:289 D.7094 ] [289])
        (sign_extend:DI (reg:SI 0 ax [614]))) mABM.c:241 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [614])
        (nil)))
(insn 456 455 457 16 (parallel [
            (set (reg:DI 0 ax [orig:290 D.7094 ] [290])
                (plus:DI (reg:DI 0 ax [orig:289 D.7094 ] [289])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:289 D.7094 ] [289])
        (nil)))
(insn 457 456 458 16 (parallel [
            (set (reg:DI 1 dx [orig:291 D.7094 ] [291])
                (ashift:DI (reg:DI 0 ax [orig:290 D.7094 ] [290])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:290 D.7094 ] [290])
        (nil)))
(insn 458 457 459 16 (set (reg/f:DI 0 ax [615])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:241 87 {*movdi_internal_rex64}
     (nil))
(insn 459 458 460 16 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.7096 ] [292])
                (plus:DI (reg/f:DI 0 ax [615])
                    (reg:DI 1 dx [orig:291 D.7094 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [615])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:291 D.7094 ] [291])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:291 D.7094 ] [291]))
                (nil)))))
(insn 460 459 461 16 (set (reg/f:DI 0 ax [orig:293 D.7092 ] [293])
        (mem/f:DI (reg/f:DI 0 ax [orig:292 D.7096 ] [292]) [0 *_257+0 S8 A64])) mABM.c:241 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:292 D.7096 ] [292])
        (nil)))
(insn 461 460 462 16 (parallel [
            (set (reg/f:DI 2 cx [orig:294 D.7092 ] [294])
                (plus:DI (reg/f:DI 0 ax [orig:293 D.7092 ] [293])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:293 D.7092 ] [293])
        (nil)))
(insn 462 461 463 16 (set (reg:SI 0 ax [orig:295 j.33 ] [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:241 89 {*movsi_internal}
     (nil))
(insn 463 462 464 16 (set (reg:DI 0 ax [orig:296 D.7093 ] [296])
        (sign_extend:DI (reg:SI 0 ax [orig:295 j.33 ] [295]))) mABM.c:241 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:295 j.33 ] [295])
        (nil)))
(insn 464 463 465 16 (parallel [
            (set (reg:DI 1 dx [orig:297 D.7093 ] [297])
                (ashift:DI (reg:DI 0 ax [orig:296 D.7093 ] [296])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:296 D.7093 ] [296])
        (nil)))
(insn 465 464 466 16 (set (reg/f:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:241 87 {*movdi_internal_rex64}
     (nil))
(insn 466 465 467 16 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.7096 ] [298])
                (plus:DI (reg/f:DI 0 ax [616])
                    (reg:DI 1 dx [orig:297 D.7093 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:241 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [616])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:297 D.7093 ] [297])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:297 D.7093 ] [297]))
                (nil)))))
(insn 467 466 468 16 (set (reg/f:DI 0 ax [orig:299 D.7092 ] [299])
        (mem/f:DI (reg/f:DI 0 ax [orig:298 D.7096 ] [298]) [0 *_263+0 S8 A64])) mABM.c:241 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:298 D.7096 ] [298])
        (nil)))
(insn 468 467 469 16 (set (reg:XF 0 ax [orig:300 D.7095 ] [300])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:299 D.7092 ] [299])
                (const_int 48 [0x30])) [0 MEM[(long double *)_264 + 48B]+0 S16 A128])) mABM.c:241 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:299 D.7092 ] [299])
        (nil)))
(insn 469 468 470 16 (set (mem:XF (reg/f:DI 2 cx [orig:294 D.7092 ] [294]) [0 *_259+0 S16 A128])
        (reg:XF 0 ax [orig:300 D.7095 ] [300])) mABM.c:241 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:300 D.7095 ] [300])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:294 D.7092 ] [294])
            (nil))))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 470 469 471 17 71 "" [1 uses])
(note 471 470 472 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 472 471 473 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:204 273 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 617
(code_label 473 472 474 18 61 "" [1 uses])
(note 474 473 476 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 476 474 477 18 (set (reg:SI 0 ax [617])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:204 89 {*movsi_internal}
     (nil))
(insn 477 476 478 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [617])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [0 i_perf_fore+0 S4 A32]))) mABM.c:204 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [617])
        (nil)))
(jump_insn 478 477 479 18 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 475)
            (pc))) mABM.c:204 612 {*jcc_1}
     (nil)
 -> 475)
;;  succ:       4
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 618
(note 479 478 480 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 481 19 (set (reg:SI 0 ax [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i_perf_fore+0 S4 A32])) mABM.c:248 89 {*movsi_internal}
     (nil))
(insn 481 480 912 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
        (reg:SI 0 ax [618])) mABM.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [618])
        (nil)))
(jump_insn 912 481 913 19 (set (pc)
        (label_ref 870)) mABM.c:248 650 {jump}
     (nil)
 -> 870)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 913 912 874)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 302 303 304 305 306 307 308 309 310 311 312 313 619 620 621 622
(code_label 874 913 484 20 83 "" [1 uses])
(note 484 874 485 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 485 484 486 20 (set (reg:SI 0 ax [orig:302 j.34 ] [302])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:249 89 {*movsi_internal}
     (nil))
(insn 486 485 950 20 (set (reg:DI 0 ax [orig:303 D.7093 ] [303])
        (sign_extend:DI (reg:SI 0 ax [orig:302 j.34 ] [302]))) mABM.c:249 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:302 j.34 ] [302])
        (nil)))
(insn 950 486 487 20 (set (reg:DI 0 ax [orig:304 D.7093 ] [304])
        (reg:DI 0 ax [orig:303 D.7093 ] [303])) mABM.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:303 D.7093 ] [303])
        (nil)))
(insn 487 950 951 20 (parallel [
            (set (reg:DI 0 ax [orig:304 D.7093 ] [304])
                (ashift:DI (reg:DI 0 ax [orig:304 D.7093 ] [304])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:249 513 {*ashldi3_1}
     (nil))
(insn 951 487 488 20 (set (reg:DI 1 dx [orig:304 D.7093 ] [304])
        (reg:DI 0 ax [orig:304 D.7093 ] [304])) mABM.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:304 D.7093 ] [304])
        (nil)))
(insn 488 951 489 20 (set (reg/f:DI 0 ax [619])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 489 488 490 20 (parallel [
            (set (reg/f:DI 0 ax [orig:305 D.7092 ] [305])
                (plus:DI (reg/f:DI 0 ax [619])
                    (reg:DI 1 dx [orig:304 D.7093 ] [304])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:249 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [619])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:304 D.7093 ] [304])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:304 D.7093 ] [304]))
                (nil)))))
(insn 490 489 491 20 (set (reg:XF 9 st(1) [orig:306 D.7095 ] [306])
        (mem:XF (reg/f:DI 0 ax [orig:305 D.7092 ] [305]) [0 *_272+0 S16 A128])) mABM.c:249 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:305 D.7092 ] [305])
        (nil)))
(insn 491 490 492 20 (set (reg:XF 10 st(2) [620])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:249 131 {*movxf_internal_rex64}
     (nil))
(insn 492 491 493 20 (set (reg:XF 8 st [621])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:249 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 493 492 494 20 (set (reg:XF 8 st [orig:307 D.7095 ] [307])
        (plus:XF (reg:XF 8 st [621])
            (reg:XF 10 st(2) [620]))) mABM.c:249 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [621])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [620])
            (nil))))
(insn 494 493 495 20 (set (reg:XF 9 st(1) [orig:308 D.7095 ] [308])
        (mult:XF (reg:XF 9 st(1) [orig:306 D.7095 ] [306])
            (reg:XF 8 st [orig:307 D.7095 ] [307]))) mABM.c:249 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:307 D.7095 ] [307])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:306 D.7095 ] [306])
            (nil))))
(insn 495 494 496 20 (set (reg:XF 8 st [622])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:249 131 {*movxf_internal_rex64}
     (nil))
(insn 496 495 497 20 (set (reg:XF 9 st(1) [orig:309 D.7095 ] [309])
        (mult:XF (reg:XF 9 st(1) [orig:308 D.7095 ] [308])
            (reg:XF 8 st [622]))) mABM.c:249 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [622])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:308 D.7095 ] [308])
            (nil))))
(insn 497 496 498 20 (set (reg:XF 8 st [orig:310 d.35 ] [310])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:249 131 {*movxf_internal_rex64}
     (nil))
(insn 498 497 499 20 (set (reg:XF 8 st [orig:311 d.36 ] [311])
        (plus:XF (reg:XF 8 st [orig:310 d.35 ] [310])
            (reg:XF 9 st(1) [orig:309 D.7095 ] [309]))) mABM.c:249 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:310 d.35 ] [310])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:309 D.7095 ] [309])
            (nil))))
(insn 499 498 500 20 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:311 d.36 ] [311])) mABM.c:249 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:311 d.36 ] [311])
        (nil)))
(insn 500 499 501 20 (set (reg:XF 9 st(1) [orig:312 d.37 ] [312])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:250 131 {*movxf_internal_rex64}
     (nil))
(insn 501 500 502 20 (set (reg:XF 8 st [orig:313 l_nvp.38 ] [313])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])) mABM.c:250 131 {*movxf_internal_rex64}
     (nil))
(insn 502 501 503 20 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:312 d.37 ] [312])
            (reg:XF 8 st [orig:313 l_nvp.38 ] [313]))) mABM.c:250 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:313 l_nvp.38 ] [313])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:312 d.37 ] [312])
            (nil))))
(jump_insn 503 502 507 20 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 914)
            (pc))) mABM.c:250 612 {*jcc_1}
     (nil)
 -> 914)
;;  succ:       21 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 623 624 625 626 627 628 629 630
(note 507 503 508 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 508 507 509 21 (set (reg:XF 9 st(1) [orig:314 d.39 ] [314])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:251 131 {*movxf_internal_rex64}
     (nil))
(insn 509 508 510 21 (set (reg:XF 8 st [orig:315 l_nvp.40 ] [315])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])) mABM.c:251 131 {*movxf_internal_rex64}
     (nil))
(insn 510 509 511 21 (set (reg:XF 8 st [orig:316 d.41 ] [316])
        (minus:XF (reg:XF 9 st(1) [orig:314 d.39 ] [314])
            (reg:XF 8 st [orig:315 l_nvp.40 ] [315]))) mABM.c:251 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:315 l_nvp.40 ] [315])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:314 d.39 ] [314])
            (nil))))
(insn 511 510 512 21 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:316 d.41 ] [316])) mABM.c:251 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:316 d.41 ] [316])
        (nil)))
(insn 512 511 513 21 (set (reg:XF 9 st(1) [orig:317 d.42 ] [317])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])) mABM.c:252 131 {*movxf_internal_rex64}
     (nil))
(insn 513 512 514 21 (set (reg:SI 0 ax [orig:318 j.43 ] [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:252 89 {*movsi_internal}
     (nil))
(insn 514 513 952 21 (set (reg:DI 0 ax [orig:319 D.7093 ] [319])
        (sign_extend:DI (reg:SI 0 ax [orig:318 j.43 ] [318]))) mABM.c:252 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:318 j.43 ] [318])
        (nil)))
(insn 952 514 515 21 (set (reg:DI 0 ax [orig:320 D.7093 ] [320])
        (reg:DI 0 ax [orig:319 D.7093 ] [319])) mABM.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:319 D.7093 ] [319])
        (nil)))
(insn 515 952 953 21 (parallel [
            (set (reg:DI 0 ax [orig:320 D.7093 ] [320])
                (ashift:DI (reg:DI 0 ax [orig:320 D.7093 ] [320])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:252 513 {*ashldi3_1}
     (nil))
(insn 953 515 516 21 (set (reg:DI 1 dx [orig:320 D.7093 ] [320])
        (reg:DI 0 ax [orig:320 D.7093 ] [320])) mABM.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:320 D.7093 ] [320])
        (nil)))
(insn 516 953 517 21 (set (reg/f:DI 0 ax [623])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 517 516 518 21 (parallel [
            (set (reg/f:DI 0 ax [orig:321 D.7092 ] [321])
                (plus:DI (reg/f:DI 0 ax [623])
                    (reg:DI 1 dx [orig:320 D.7093 ] [320])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [623])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:320 D.7093 ] [320])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:320 D.7093 ] [320]))
                (nil)))))
(insn 518 517 519 21 (set (reg:XF 10 st(2) [orig:322 D.7095 ] [322])
        (mem:XF (reg/f:DI 0 ax [orig:321 D.7092 ] [321]) [0 *_289+0 S16 A128])) mABM.c:252 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:321 D.7092 ] [321])
        (nil)))
(insn 519 518 520 21 (set (reg:XF 11 st(3) [624])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:252 131 {*movxf_internal_rex64}
     (nil))
(insn 520 519 521 21 (set (reg:XF 8 st [625])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:252 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 521 520 522 21 (set (reg:XF 8 st [orig:323 D.7095 ] [323])
        (plus:XF (reg:XF 8 st [625])
            (reg:XF 11 st(3) [624]))) mABM.c:252 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [625])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [624])
            (nil))))
(insn 522 521 523 21 (set (reg:XF 8 st [orig:324 D.7095 ] [324])
        (mult:XF (reg:XF 8 st [orig:323 D.7095 ] [323])
            (reg:XF 10 st(2) [orig:322 D.7095 ] [322]))) mABM.c:252 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:323 D.7095 ] [323])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:322 D.7095 ] [322])
            (nil))))
(insn 523 522 524 21 (set (reg:XF 8 st [orig:325 t_c.44 ] [325])
        (div:XF (reg:XF 9 st(1) [orig:317 d.42 ] [317])
            (reg:XF 8 st [orig:324 D.7095 ] [324]))) mABM.c:252 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:324 D.7095 ] [324])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:317 d.42 ] [317])
            (nil))))
(insn 524 523 525 21 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])
        (reg:XF 8 st [orig:325 t_c.44 ] [325])) mABM.c:252 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:325 t_c.44 ] [325])
        (nil)))
(insn 525 524 526 21 (set (reg:SI 0 ax [orig:326 j.45 ] [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:253 89 {*movsi_internal}
     (nil))
(insn 526 525 527 21 (parallel [
            (set (reg:SI 0 ax [orig:327 j.46 ] [327])
                (plus:SI (reg:SI 0 ax [orig:326 j.45 ] [326])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:253 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:326 j.45 ] [326])
        (nil)))
(insn 527 526 528 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])
        (reg:SI 0 ax [orig:327 j.46 ] [327])) mABM.c:253 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:327 j.46 ] [327])
        (nil)))
(insn 528 527 529 21 (set (reg/f:DI 0 ax [626])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:254 87 {*movdi_internal_rex64}
     (nil))
(insn 529 528 530 21 (set (reg/f:DI 0 ax [orig:328 D.7092 ] [328])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [626])
                (const_int 16 [0x10])) [0 f_8(D)->time+0 S8 A128])) mABM.c:254 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [626])
        (nil)))
(insn 530 529 531 21 (set (reg:SI 1 dx [orig:329 j.47 ] [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:254 89 {*movsi_internal}
     (nil))
(insn 531 530 532 21 (set (reg:DI 1 dx [orig:330 D.7093 ] [330])
        (sign_extend:DI (reg:SI 1 dx [orig:329 j.47 ] [329]))) mABM.c:254 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:329 j.47 ] [329])
        (nil)))
(insn 532 531 533 21 (parallel [
            (set (reg:DI 1 dx [orig:331 D.7093 ] [331])
                (ashift:DI (reg:DI 1 dx [orig:330 D.7093 ] [330])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:254 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:330 D.7093 ] [330])
        (nil)))
(insn 533 532 534 21 (parallel [
            (set (reg/f:DI 0 ax [orig:332 D.7092 ] [332])
                (plus:DI (reg/f:DI 0 ax [orig:328 D.7092 ] [328])
                    (reg:DI 1 dx [orig:331 D.7093 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:254 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:331 D.7093 ] [331])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:328 D.7092 ] [328])
            (nil))))
(insn 534 533 535 21 (set (reg:SI 1 dx [627])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:254 89 {*movsi_internal}
     (nil))
(insn 535 534 926 21 (parallel [
            (set (reg:SI 1 dx [orig:333 D.7091 ] [333])
                (plus:SI (reg:SI 1 dx [627])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:254 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [627])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 926 535 537 21 (parallel [
            (set (reg:XF 9 st(1) [orig:334 D.7095 ] [334])
                (float:XF (reg:SI 1 dx [orig:333 D.7091 ] [333])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -152 [0xffffffffffffff68])) [0  S4 A32]))
        ]) mABM.c:254 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:333 D.7091 ] [333])
        (nil)))
(insn 537 926 538 21 (set (reg:XF 8 st [628])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:254 131 {*movxf_internal_rex64}
     (nil))
(insn 538 537 539 21 (set (reg:XF 9 st(1) [orig:335 D.7095 ] [335])
        (mult:XF (reg:XF 9 st(1) [orig:334 D.7095 ] [334])
            (reg:XF 8 st [628]))) mABM.c:254 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [628])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:334 D.7095 ] [334])
            (nil))))
(insn 539 538 540 21 (set (reg:XF 8 st [629])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t0+0 S16 A128])) mABM.c:254 131 {*movxf_internal_rex64}
     (nil))
(insn 540 539 541 21 (set (reg:XF 9 st(1) [orig:336 D.7095 ] [336])
        (plus:XF (reg:XF 9 st(1) [orig:335 D.7095 ] [335])
            (reg:XF 8 st [629]))) mABM.c:254 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [629])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:335 D.7095 ] [335])
            (nil))))
(insn 541 540 542 21 (set (reg:XF 8 st [orig:337 t_c.48 ] [337])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:254 131 {*movxf_internal_rex64}
     (nil))
(insn 542 541 543 21 (set (reg:XF 8 st [orig:338 D.7095 ] [338])
        (minus:XF (reg:XF 9 st(1) [orig:336 D.7095 ] [336])
            (reg:XF 8 st [orig:337 t_c.48 ] [337]))) mABM.c:254 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:337 t_c.48 ] [337])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:336 D.7095 ] [336])
            (nil))))
(insn 543 542 544 21 (set (mem:XF (reg/f:DI 0 ax [orig:332 D.7092 ] [332]) [0 *_300+0 S16 A128])
        (reg:XF 8 st [orig:338 D.7095 ] [338])) mABM.c:254 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:338 D.7095 ] [338])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:332 D.7092 ] [332])
            (nil))))
(insn 544 543 545 21 (set (reg:SI 0 ax [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n_nvp+0 S4 A32])) mABM.c:256 89 {*movsi_internal}
     (nil))
(insn 545 544 546 21 (parallel [
            (set (reg:SI 1 dx [orig:339 D.7091 ] [339])
                (plus:SI (reg:SI 0 ax [630])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:256 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [630])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -100 [0xffffffffffffff9c])) [0 n_nvp+0 S4 A32])
                (const_int -2 [0xfffffffffffffffe]))
            (nil))))
(insn 546 545 547 21 (set (reg:SI 0 ax [orig:340 j.49 ] [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:256 89 {*movsi_internal}
     (nil))
(insn 547 546 548 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:339 D.7091 ] [339])
            (reg:SI 0 ax [orig:340 j.49 ] [340]))) mABM.c:256 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:340 j.49 ] [340])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:339 D.7091 ] [339])
            (nil))))
(jump_insn 548 547 549 21 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 604)
            (pc))) mABM.c:256 612 {*jcc_1}
     (nil)
 -> 604)
;;  succ:       22 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 549 548 915 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(jump_insn 915 549 916 22 (set (pc)
        (label_ref 593)) mABM.c:257 650 {jump}
     (nil)
 -> 593)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 916 915 597)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 631 632 633 634 635 636 637 638 639 640 641 642
(code_label 597 916 552 23 78 "" [1 uses])
(note 552 597 553 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 553 552 554 23 (set (reg:SI 0 ax [631])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:258 89 {*movsi_internal}
     (nil))
(insn 554 553 555 23 (set (reg:DI 0 ax [orig:342 D.7094 ] [342])
        (sign_extend:DI (reg:SI 0 ax [631]))) mABM.c:258 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [631])
        (nil)))
(insn 555 554 556 23 (parallel [
            (set (reg:DI 0 ax [orig:343 D.7094 ] [343])
                (plus:DI (reg:DI 0 ax [orig:342 D.7094 ] [342])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:258 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:342 D.7094 ] [342])
        (nil)))
(insn 556 555 557 23 (parallel [
            (set (reg:DI 1 dx [orig:344 D.7094 ] [344])
                (ashift:DI (reg:DI 0 ax [orig:343 D.7094 ] [343])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:258 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:343 D.7094 ] [343])
        (nil)))
(insn 557 556 558 23 (set (reg/f:DI 0 ax [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:258 87 {*movdi_internal_rex64}
     (nil))
(insn 558 557 559 23 (parallel [
            (set (reg/f:DI 0 ax [orig:345 D.7096 ] [345])
                (plus:DI (reg/f:DI 0 ax [632])
                    (reg:DI 1 dx [orig:344 D.7094 ] [344])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:258 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [632])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:344 D.7094 ] [344])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:344 D.7094 ] [344]))
                (nil)))))
(insn 559 558 560 23 (set (reg/f:DI 2 cx [orig:346 D.7092 ] [346])
        (mem/f:DI (reg/f:DI 0 ax [orig:345 D.7096 ] [345]) [0 *_313+0 S8 A64])) mABM.c:258 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:345 D.7096 ] [345])
        (nil)))
(insn 560 559 561 23 (set (reg:XF 0 ax [633])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:258 131 {*movxf_internal_rex64}
     (nil))
(insn 561 560 562 23 (set (mem:XF (reg/f:DI 2 cx [orig:346 D.7092 ] [346]) [0 *_314+0 S16 A128])
        (reg:XF 0 ax [633])) mABM.c:258 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [633])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:346 D.7092 ] [346])
            (nil))))
(insn 562 561 563 23 (set (reg:SI 0 ax [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:259 89 {*movsi_internal}
     (nil))
(insn 563 562 564 23 (set (reg:DI 0 ax [orig:347 D.7094 ] [347])
        (sign_extend:DI (reg:SI 0 ax [634]))) mABM.c:259 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [634])
        (nil)))
(insn 564 563 565 23 (parallel [
            (set (reg:DI 0 ax [orig:348 D.7094 ] [348])
                (plus:DI (reg:DI 0 ax [orig:347 D.7094 ] [347])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:259 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:347 D.7094 ] [347])
        (nil)))
(insn 565 564 566 23 (parallel [
            (set (reg:DI 1 dx [orig:349 D.7094 ] [349])
                (ashift:DI (reg:DI 0 ax [orig:348 D.7094 ] [348])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:259 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:348 D.7094 ] [348])
        (nil)))
(insn 566 565 567 23 (set (reg/f:DI 0 ax [635])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:259 87 {*movdi_internal_rex64}
     (nil))
(insn 567 566 568 23 (parallel [
            (set (reg/f:DI 0 ax [orig:350 D.7096 ] [350])
                (plus:DI (reg/f:DI 0 ax [635])
                    (reg:DI 1 dx [orig:349 D.7094 ] [349])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:259 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [635])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:349 D.7094 ] [349])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:349 D.7094 ] [349]))
                (nil)))))
(insn 568 567 569 23 (set (reg/f:DI 0 ax [orig:351 D.7092 ] [351])
        (mem/f:DI (reg/f:DI 0 ax [orig:350 D.7096 ] [350]) [0 *_318+0 S8 A64])) mABM.c:259 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:350 D.7096 ] [350])
        (nil)))
(insn 569 568 570 23 (parallel [
            (set (reg/f:DI 2 cx [orig:352 D.7092 ] [352])
                (plus:DI (reg/f:DI 0 ax [orig:351 D.7092 ] [351])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:259 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:351 D.7092 ] [351])
        (nil)))
(insn 570 569 571 23 (set (reg:XF 0 ax [636])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:259 131 {*movxf_internal_rex64}
     (nil))
(insn 571 570 572 23 (set (mem:XF (reg/f:DI 2 cx [orig:352 D.7092 ] [352]) [0 *_320+0 S16 A128])
        (reg:XF 0 ax [636])) mABM.c:259 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [636])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:352 D.7092 ] [352])
            (nil))))
(insn 572 571 573 23 (set (reg:SI 0 ax [637])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:260 89 {*movsi_internal}
     (nil))
(insn 573 572 574 23 (set (reg:DI 0 ax [orig:353 D.7094 ] [353])
        (sign_extend:DI (reg:SI 0 ax [637]))) mABM.c:260 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [637])
        (nil)))
(insn 574 573 575 23 (parallel [
            (set (reg:DI 0 ax [orig:354 D.7094 ] [354])
                (plus:DI (reg:DI 0 ax [orig:353 D.7094 ] [353])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:260 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:353 D.7094 ] [353])
        (nil)))
(insn 575 574 576 23 (parallel [
            (set (reg:DI 1 dx [orig:355 D.7094 ] [355])
                (ashift:DI (reg:DI 0 ax [orig:354 D.7094 ] [354])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:260 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:354 D.7094 ] [354])
        (nil)))
(insn 576 575 577 23 (set (reg/f:DI 0 ax [638])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:260 87 {*movdi_internal_rex64}
     (nil))
(insn 577 576 578 23 (parallel [
            (set (reg/f:DI 0 ax [orig:356 D.7096 ] [356])
                (plus:DI (reg/f:DI 0 ax [638])
                    (reg:DI 1 dx [orig:355 D.7094 ] [355])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:260 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [638])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:355 D.7094 ] [355])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:355 D.7094 ] [355]))
                (nil)))))
(insn 578 577 579 23 (set (reg/f:DI 0 ax [orig:357 D.7092 ] [357])
        (mem/f:DI (reg/f:DI 0 ax [orig:356 D.7096 ] [356]) [0 *_324+0 S8 A64])) mABM.c:260 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:356 D.7096 ] [356])
        (nil)))
(insn 579 578 580 23 (parallel [
            (set (reg/f:DI 2 cx [orig:358 D.7092 ] [358])
                (plus:DI (reg/f:DI 0 ax [orig:357 D.7092 ] [357])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:260 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:357 D.7092 ] [357])
        (nil)))
(insn 580 579 581 23 (set (reg:XF 0 ax [639])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:260 131 {*movxf_internal_rex64}
     (nil))
(insn 581 580 582 23 (set (mem:XF (reg/f:DI 2 cx [orig:358 D.7092 ] [358]) [0 *_326+0 S16 A128])
        (reg:XF 0 ax [639])) mABM.c:260 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [639])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:358 D.7092 ] [358])
            (nil))))
(insn 582 581 583 23 (set (reg:SI 0 ax [640])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:261 89 {*movsi_internal}
     (nil))
(insn 583 582 584 23 (set (reg:DI 0 ax [orig:359 D.7094 ] [359])
        (sign_extend:DI (reg:SI 0 ax [640]))) mABM.c:261 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [640])
        (nil)))
(insn 584 583 585 23 (parallel [
            (set (reg:DI 0 ax [orig:360 D.7094 ] [360])
                (plus:DI (reg:DI 0 ax [orig:359 D.7094 ] [359])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:261 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:359 D.7094 ] [359])
        (nil)))
(insn 585 584 586 23 (parallel [
            (set (reg:DI 1 dx [orig:361 D.7094 ] [361])
                (ashift:DI (reg:DI 0 ax [orig:360 D.7094 ] [360])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:261 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:360 D.7094 ] [360])
        (nil)))
(insn 586 585 587 23 (set (reg/f:DI 0 ax [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:261 87 {*movdi_internal_rex64}
     (nil))
(insn 587 586 588 23 (parallel [
            (set (reg/f:DI 0 ax [orig:362 D.7096 ] [362])
                (plus:DI (reg/f:DI 0 ax [641])
                    (reg:DI 1 dx [orig:361 D.7094 ] [361])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:261 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [641])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:361 D.7094 ] [361])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:361 D.7094 ] [361]))
                (nil)))))
(insn 588 587 589 23 (set (reg/f:DI 0 ax [orig:363 D.7092 ] [363])
        (mem/f:DI (reg/f:DI 0 ax [orig:362 D.7096 ] [362]) [0 *_330+0 S8 A64])) mABM.c:261 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:362 D.7096 ] [362])
        (nil)))
(insn 589 588 590 23 (parallel [
            (set (reg/f:DI 2 cx [orig:364 D.7092 ] [364])
                (plus:DI (reg/f:DI 0 ax [orig:363 D.7092 ] [363])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:261 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:363 D.7092 ] [363])
        (nil)))
(insn 590 589 591 23 (set (reg:XF 0 ax [642])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:261 131 {*movxf_internal_rex64}
     (nil))
(insn 591 590 592 23 (set (mem:XF (reg/f:DI 2 cx [orig:364 D.7092 ] [364]) [0 *_332+0 S16 A128])
        (reg:XF 0 ax [642])) mABM.c:261 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [642])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:364 D.7092 ] [364])
            (nil))))
(insn 592 591 593 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:257 273 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 341 643
(code_label 593 592 594 24 77 "" [1 uses])
(note 594 593 595 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 595 594 596 24 (set (reg:SI 0 ax [643])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])) mABM.c:257 89 {*movsi_internal}
     (nil))
(insn 596 595 598 24 (parallel [
            (set (reg:SI 0 ax [orig:341 D.7091 ] [341])
                (plus:SI (reg:SI 0 ax [643])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:257 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [643])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -132 [0xffffffffffffff7c])) [0 t_wind+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 598 596 599 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:341 D.7091 ] [341])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32]))) mABM.c:257 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:341 D.7091 ] [341])
        (nil)))
(jump_insn 599 598 600 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 597)
            (pc))) mABM.c:257 612 {*jcc_1}
     (nil)
 -> 597)
;;  succ:       23
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 600 599 601 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 601 600 917 25 (set (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (const_int 0 [0])) mABM.c:263 89 {*movsi_internal}
     (nil))
(jump_insn 917 601 918 25 (set (pc)
        (label_ref 881)) mABM.c:263 650 {jump}
     (nil)
 -> 881)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 918 917 604)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660
(code_label 604 918 605 26 76 "" [1 uses])
(note 605 604 606 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 606 605 607 26 (set (reg:SI 0 ax [orig:365 j.50 ] [365])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:265 89 {*movsi_internal}
     (nil))
(insn 607 606 954 26 (set (reg:DI 0 ax [orig:366 D.7093 ] [366])
        (sign_extend:DI (reg:SI 0 ax [orig:365 j.50 ] [365]))) mABM.c:265 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:365 j.50 ] [365])
        (nil)))
(insn 954 607 608 26 (set (reg:DI 0 ax [orig:367 D.7093 ] [367])
        (reg:DI 0 ax [orig:366 D.7093 ] [366])) mABM.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:366 D.7093 ] [366])
        (nil)))
(insn 608 954 955 26 (parallel [
            (set (reg:DI 0 ax [orig:367 D.7093 ] [367])
                (ashift:DI (reg:DI 0 ax [orig:367 D.7093 ] [367])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:265 513 {*ashldi3_1}
     (nil))
(insn 955 608 609 26 (set (reg:DI 1 dx [orig:367 D.7093 ] [367])
        (reg:DI 0 ax [orig:367 D.7093 ] [367])) mABM.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:367 D.7093 ] [367])
        (nil)))
(insn 609 955 610 26 (set (reg/f:DI 0 ax [644])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:265 87 {*movdi_internal_rex64}
     (nil))
(insn 610 609 611 26 (parallel [
            (set (reg/f:DI 0 ax [orig:368 D.7092 ] [368])
                (plus:DI (reg/f:DI 0 ax [644])
                    (reg:DI 1 dx [orig:367 D.7093 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:265 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [644])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:367 D.7093 ] [367])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:367 D.7093 ] [367]))
                (nil)))))
(insn 611 610 612 26 (set (reg:XF 9 st(1) [orig:369 D.7095 ] [369])
        (mem:XF (reg/f:DI 0 ax [orig:368 D.7092 ] [368]) [0 *_338+0 S16 A128])) mABM.c:265 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:368 D.7092 ] [368])
        (nil)))
(insn 612 611 613 26 (set (reg:XF 10 st(2) [645])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:265 131 {*movxf_internal_rex64}
     (nil))
(insn 613 612 614 26 (set (reg:XF 8 st [646])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:265 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 614 613 615 26 (set (reg:XF 8 st [orig:370 D.7095 ] [370])
        (plus:XF (reg:XF 8 st [646])
            (reg:XF 10 st(2) [645]))) mABM.c:265 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [646])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [645])
            (nil))))
(insn 615 614 616 26 (set (reg:XF 9 st(1) [orig:371 D.7095 ] [371])
        (mult:XF (reg:XF 9 st(1) [orig:369 D.7095 ] [369])
            (reg:XF 8 st [orig:370 D.7095 ] [370]))) mABM.c:265 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:370 D.7095 ] [370])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:369 D.7095 ] [369])
            (nil))))
(insn 616 615 617 26 (set (reg:XF 8 st [orig:372 t_c.51 ] [372])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:265 131 {*movxf_internal_rex64}
     (nil))
(insn 617 616 618 26 (set (reg:XF 8 st [orig:373 d.52 ] [373])
        (mult:XF (reg:XF 8 st [orig:372 t_c.51 ] [372])
            (reg:XF 9 st(1) [orig:371 D.7095 ] [371]))) mABM.c:265 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:372 t_c.51 ] [372])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:371 D.7095 ] [371])
            (nil))))
(insn 618 617 619 26 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:373 d.52 ] [373])) mABM.c:265 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:373 d.52 ] [373])
        (nil)))
(insn 619 618 620 26 (set (reg:SI 0 ax [orig:374 j.53 ] [374])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:267 89 {*movsi_internal}
     (nil))
(insn 620 619 621 26 (set (reg:DI 0 ax [orig:375 D.7094 ] [375])
        (sign_extend:DI (reg:SI 0 ax [orig:374 j.53 ] [374]))) mABM.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:374 j.53 ] [374])
        (nil)))
(insn 621 620 622 26 (parallel [
            (set (reg:DI 0 ax [orig:376 D.7094 ] [376])
                (plus:DI (reg:DI 0 ax [orig:375 D.7094 ] [375])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:375 D.7094 ] [375])
        (nil)))
(insn 622 621 623 26 (parallel [
            (set (reg:DI 1 dx [orig:377 D.7094 ] [377])
                (ashift:DI (reg:DI 0 ax [orig:376 D.7094 ] [376])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:376 D.7094 ] [376])
        (nil)))
(insn 623 622 624 26 (set (reg/f:DI 0 ax [647])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 624 623 625 26 (parallel [
            (set (reg/f:DI 0 ax [orig:378 D.7096 ] [378])
                (plus:DI (reg/f:DI 0 ax [647])
                    (reg:DI 1 dx [orig:377 D.7094 ] [377])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [647])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:377 D.7094 ] [377])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:377 D.7094 ] [377]))
                (nil)))))
(insn 625 624 626 26 (set (reg/f:DI 1 dx [orig:379 D.7092 ] [379])
        (mem/f:DI (reg/f:DI 0 ax [orig:378 D.7096 ] [378]) [0 *_348+0 S8 A64])) mABM.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:378 D.7096 ] [378])
        (nil)))
(insn 626 625 627 26 (set (reg:SI 0 ax [orig:380 j.54 ] [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:267 89 {*movsi_internal}
     (nil))
(insn 627 626 628 26 (set (reg:DI 0 ax [orig:381 D.7093 ] [381])
        (sign_extend:DI (reg:SI 0 ax [orig:380 j.54 ] [380]))) mABM.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:380 j.54 ] [380])
        (nil)))
(insn 628 627 629 26 (parallel [
            (set (reg:DI 2 cx [orig:382 D.7093 ] [382])
                (ashift:DI (reg:DI 0 ax [orig:381 D.7093 ] [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:381 D.7093 ] [381])
        (nil)))
(insn 629 628 630 26 (set (reg/f:DI 0 ax [648])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 630 629 631 26 (parallel [
            (set (reg/f:DI 0 ax [orig:383 D.7096 ] [383])
                (plus:DI (reg/f:DI 0 ax [648])
                    (reg:DI 2 cx [orig:382 D.7093 ] [382])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [648])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:382 D.7093 ] [382])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 2 cx [orig:382 D.7093 ] [382]))
                (nil)))))
(insn 631 630 632 26 (set (reg/f:DI 0 ax [orig:384 D.7092 ] [384])
        (mem/f:DI (reg/f:DI 0 ax [orig:383 D.7096 ] [383]) [0 *_353+0 S8 A64])) mABM.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:383 D.7096 ] [383])
        (nil)))
(insn 632 631 633 26 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:379 D.7092 ] [379])) mABM.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:379 D.7092 ] [379])
        (nil)))
(insn 633 632 634 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:384 D.7092 ] [384])) mABM.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:384 D.7092 ] [384])
        (nil)))
(call_insn 634 633 635 26 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:267 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 635 634 636 26 (set (reg:XF 8 st [orig:385 l_nvp.55 ] [385])
        (reg:XF 8 st)) mABM.c:267 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 636 635 637 26 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 l_nvp+0 S16 A128])
        (reg:XF 8 st [orig:385 l_nvp.55 ] [385])) mABM.c:267 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:385 l_nvp.55 ] [385])
        (nil)))
(insn 637 636 638 26 (set (reg:SI 0 ax [649])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:268 89 {*movsi_internal}
     (nil))
(insn 638 637 925 26 (parallel [
            (set (reg:SI 0 ax [orig:386 D.7091 ] [386])
                (plus:SI (reg:SI 0 ax [649])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:268 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [649])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 925 638 640 26 (parallel [
            (set (reg:XF 9 st(1) [orig:387 D.7095 ] [387])
                (float:XF (reg:SI 0 ax [orig:386 D.7091 ] [386])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -152 [0xffffffffffffff68])) [0  S4 A32]))
        ]) mABM.c:268 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:386 D.7091 ] [386])
        (nil)))
(insn 640 925 641 26 (set (reg:XF 8 st [650])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:268 131 {*movxf_internal_rex64}
     (nil))
(insn 641 640 642 26 (set (reg:XF 9 st(1) [orig:388 D.7095 ] [388])
        (mult:XF (reg:XF 9 st(1) [orig:387 D.7095 ] [387])
            (reg:XF 8 st [650]))) mABM.c:268 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [650])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:387 D.7095 ] [387])
            (nil))))
(insn 642 641 643 26 (set (reg:XF 8 st [651])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t0+0 S16 A128])) mABM.c:268 131 {*movxf_internal_rex64}
     (nil))
(insn 643 642 644 26 (set (reg:XF 8 st [orig:389 D.7095 ] [389])
        (plus:XF (reg:XF 8 st [651])
            (reg:XF 9 st(1) [orig:388 D.7095 ] [388]))) mABM.c:268 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [651])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:388 D.7095 ] [388])
            (nil))))
(insn 644 643 645 26 (set (reg/f:DI 0 ax [652])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:268 87 {*movdi_internal_rex64}
     (nil))
(insn 645 644 646 26 (set (reg/f:DI 0 ax [orig:390 D.7092 ] [390])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [652])
                (const_int 16 [0x10])) [0 f_8(D)->time+0 S8 A128])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [652])
        (nil)))
(insn 646 645 647 26 (parallel [
            (set (reg:DI 38 r9 [653])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:268 274 {*adddi_1}
     (nil))
(insn 647 646 648 26 (parallel [
            (set (reg:DI 37 r8 [654])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:268 274 {*adddi_1}
     (nil))
(insn 648 647 649 26 (set (reg:DI 2 cx [655])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:268 87 {*movdi_internal_rex64}
     (nil))
(insn 649 648 650 26 (set (reg:DI 39 r10 [656])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:268 87 {*movdi_internal_rex64}
     (nil))
(insn 650 649 651 26 (parallel [
            (set (reg:DI 4 si [657])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:268 274 {*adddi_1}
     (nil))
(insn 651 650 652 26 (parallel [
            (set (reg:DI 5 di [658])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:268 274 {*adddi_1}
     (nil))
(insn 652 651 653 26 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 8 st [orig:389 D.7095 ] [389])) mABM.c:268 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:389 D.7095 ] [389])
        (nil)))
(insn 653 652 654 26 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg/f:DI 0 ax [orig:390 D.7092 ] [390])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:390 D.7092 ] [390])
        (nil)))
(insn 654 653 655 26 (set (reg:SI 0 ax [659])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n_nvp+0 S4 A32])) mABM.c:268 89 {*movsi_internal}
     (nil))
(insn 655 654 656 26 (set (mem:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S4 A64])
        (reg:SI 0 ax [659])) mABM.c:268 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [659])
        (nil)))
(insn 656 655 657 26 (set (reg:XF 0 ax [660])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:268 131 {*movxf_internal_rex64}
     (nil))
(insn 657 656 658 26 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [660])) mABM.c:268 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [660])
        (nil)))
(insn 658 657 659 26 (set (reg:DI 38 r9)
        (reg:DI 38 r9 [653])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [653])
        (nil)))
(insn 659 658 660 26 (set (reg:DI 37 r8)
        (reg:DI 37 r8 [654])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [654])
        (nil)))
(insn 660 659 661 26 (set (reg:DI 2 cx)
        (reg:DI 2 cx [655])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [655])
        (nil)))
(insn 661 660 662 26 (set (reg:DI 1 dx)
        (reg:DI 39 r10 [656])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [656])
        (nil)))
(insn 662 661 663 26 (set (reg:DI 4 si)
        (reg:DI 4 si [657])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [657])
        (nil)))
(insn 663 662 664 26 (set (reg:DI 5 di)
        (reg:DI 5 di [658])) mABM.c:268 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [658])
        (nil)))
(call_insn 664 663 665 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_nvp_to_close") [flags 0x3]  <function_decl 0x7f05a56ea900 _nvp_to_close>) [0 _nvp_to_close S1 A8])
            (const_int 48 [0x30]))) mABM.c:268 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                                (expr_list:REG_BR_PRED (use (mem:SI (plus:DI (reg/f:DI 7 sp)
                                                (const_int 16 [0x10])) [0  S4 A64]))
                                    (expr_list:REG_FRAME_RELATED_EXPR (use (mem/f:DI (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 24 [0x18])) [0  S8 A64]))
                                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                        (const_int 32 [0x20])) [0  S16 A128]))
                                            (nil))))))))))))
(insn 665 664 666 26 (set (reg:SI 0 ax [orig:391 D.7091 ] [391])
        (reg:SI 0 ax)) mABM.c:268 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 666 665 667 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:391 D.7091 ] [391])
            (const_int 0 [0]))) mABM.c:268 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:391 D.7091 ] [391])
        (nil)))
(jump_insn 667 666 668 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 723)
            (pc))) mABM.c:268 612 {*jcc_1}
     (nil)
 -> 723)
;;  succ:       27 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 668 667 919 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(jump_insn 919 668 920 27 (set (pc)
        (label_ref 712)) mABM.c:269 650 {jump}
     (nil)
 -> 712)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 920 919 716)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 661 662 663 664 665 666 667 668 669 670 671 672
(code_label 716 920 671 28 81 "" [1 uses])
(note 671 716 672 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 672 671 673 28 (set (reg:SI 0 ax [661])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:270 89 {*movsi_internal}
     (nil))
(insn 673 672 674 28 (set (reg:DI 0 ax [orig:393 D.7094 ] [393])
        (sign_extend:DI (reg:SI 0 ax [661]))) mABM.c:270 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [661])
        (nil)))
(insn 674 673 675 28 (parallel [
            (set (reg:DI 0 ax [orig:394 D.7094 ] [394])
                (plus:DI (reg:DI 0 ax [orig:393 D.7094 ] [393])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:270 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:393 D.7094 ] [393])
        (nil)))
(insn 675 674 676 28 (parallel [
            (set (reg:DI 1 dx [orig:395 D.7094 ] [395])
                (ashift:DI (reg:DI 0 ax [orig:394 D.7094 ] [394])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:270 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:394 D.7094 ] [394])
        (nil)))
(insn 676 675 677 28 (set (reg/f:DI 0 ax [662])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:270 87 {*movdi_internal_rex64}
     (nil))
(insn 677 676 678 28 (parallel [
            (set (reg/f:DI 0 ax [orig:396 D.7096 ] [396])
                (plus:DI (reg/f:DI 0 ax [662])
                    (reg:DI 1 dx [orig:395 D.7094 ] [395])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:270 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [662])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:395 D.7094 ] [395])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:395 D.7094 ] [395]))
                (nil)))))
(insn 678 677 679 28 (set (reg/f:DI 2 cx [orig:397 D.7092 ] [397])
        (mem/f:DI (reg/f:DI 0 ax [orig:396 D.7096 ] [396]) [0 *_366+0 S8 A64])) mABM.c:270 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:396 D.7096 ] [396])
        (nil)))
(insn 679 678 680 28 (set (reg:XF 0 ax [663])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:270 131 {*movxf_internal_rex64}
     (nil))
(insn 680 679 681 28 (set (mem:XF (reg/f:DI 2 cx [orig:397 D.7092 ] [397]) [0 *_367+0 S16 A128])
        (reg:XF 0 ax [663])) mABM.c:270 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [663])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:397 D.7092 ] [397])
            (nil))))
(insn 681 680 682 28 (set (reg:SI 0 ax [664])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:271 89 {*movsi_internal}
     (nil))
(insn 682 681 683 28 (set (reg:DI 0 ax [orig:398 D.7094 ] [398])
        (sign_extend:DI (reg:SI 0 ax [664]))) mABM.c:271 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [664])
        (nil)))
(insn 683 682 684 28 (parallel [
            (set (reg:DI 0 ax [orig:399 D.7094 ] [399])
                (plus:DI (reg:DI 0 ax [orig:398 D.7094 ] [398])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:271 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:398 D.7094 ] [398])
        (nil)))
(insn 684 683 685 28 (parallel [
            (set (reg:DI 1 dx [orig:400 D.7094 ] [400])
                (ashift:DI (reg:DI 0 ax [orig:399 D.7094 ] [399])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:271 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:399 D.7094 ] [399])
        (nil)))
(insn 685 684 686 28 (set (reg/f:DI 0 ax [665])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:271 87 {*movdi_internal_rex64}
     (nil))
(insn 686 685 687 28 (parallel [
            (set (reg/f:DI 0 ax [orig:401 D.7096 ] [401])
                (plus:DI (reg/f:DI 0 ax [665])
                    (reg:DI 1 dx [orig:400 D.7094 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:271 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [665])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:400 D.7094 ] [400])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:400 D.7094 ] [400]))
                (nil)))))
(insn 687 686 688 28 (set (reg/f:DI 0 ax [orig:402 D.7092 ] [402])
        (mem/f:DI (reg/f:DI 0 ax [orig:401 D.7096 ] [401]) [0 *_371+0 S8 A64])) mABM.c:271 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:401 D.7096 ] [401])
        (nil)))
(insn 688 687 689 28 (parallel [
            (set (reg/f:DI 2 cx [orig:403 D.7092 ] [403])
                (plus:DI (reg/f:DI 0 ax [orig:402 D.7092 ] [402])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:271 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:402 D.7092 ] [402])
        (nil)))
(insn 689 688 690 28 (set (reg:XF 0 ax [666])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:271 131 {*movxf_internal_rex64}
     (nil))
(insn 690 689 691 28 (set (mem:XF (reg/f:DI 2 cx [orig:403 D.7092 ] [403]) [0 *_373+0 S16 A128])
        (reg:XF 0 ax [666])) mABM.c:271 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [666])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:403 D.7092 ] [403])
            (nil))))
(insn 691 690 692 28 (set (reg:SI 0 ax [667])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:272 89 {*movsi_internal}
     (nil))
(insn 692 691 693 28 (set (reg:DI 0 ax [orig:404 D.7094 ] [404])
        (sign_extend:DI (reg:SI 0 ax [667]))) mABM.c:272 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [667])
        (nil)))
(insn 693 692 694 28 (parallel [
            (set (reg:DI 0 ax [orig:405 D.7094 ] [405])
                (plus:DI (reg:DI 0 ax [orig:404 D.7094 ] [404])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:272 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:404 D.7094 ] [404])
        (nil)))
(insn 694 693 695 28 (parallel [
            (set (reg:DI 1 dx [orig:406 D.7094 ] [406])
                (ashift:DI (reg:DI 0 ax [orig:405 D.7094 ] [405])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:272 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:405 D.7094 ] [405])
        (nil)))
(insn 695 694 696 28 (set (reg/f:DI 0 ax [668])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:272 87 {*movdi_internal_rex64}
     (nil))
(insn 696 695 697 28 (parallel [
            (set (reg/f:DI 0 ax [orig:407 D.7096 ] [407])
                (plus:DI (reg/f:DI 0 ax [668])
                    (reg:DI 1 dx [orig:406 D.7094 ] [406])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:272 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [668])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:406 D.7094 ] [406])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:406 D.7094 ] [406]))
                (nil)))))
(insn 697 696 698 28 (set (reg/f:DI 0 ax [orig:408 D.7092 ] [408])
        (mem/f:DI (reg/f:DI 0 ax [orig:407 D.7096 ] [407]) [0 *_377+0 S8 A64])) mABM.c:272 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:407 D.7096 ] [407])
        (nil)))
(insn 698 697 699 28 (parallel [
            (set (reg/f:DI 2 cx [orig:409 D.7092 ] [409])
                (plus:DI (reg/f:DI 0 ax [orig:408 D.7092 ] [408])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:272 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:408 D.7092 ] [408])
        (nil)))
(insn 699 698 700 28 (set (reg:XF 0 ax [669])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:272 131 {*movxf_internal_rex64}
     (nil))
(insn 700 699 701 28 (set (mem:XF (reg/f:DI 2 cx [orig:409 D.7092 ] [409]) [0 *_379+0 S16 A128])
        (reg:XF 0 ax [669])) mABM.c:272 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [669])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:409 D.7092 ] [409])
            (nil))))
(insn 701 700 702 28 (set (reg:SI 0 ax [670])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:273 89 {*movsi_internal}
     (nil))
(insn 702 701 703 28 (set (reg:DI 0 ax [orig:410 D.7094 ] [410])
        (sign_extend:DI (reg:SI 0 ax [670]))) mABM.c:273 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [670])
        (nil)))
(insn 703 702 704 28 (parallel [
            (set (reg:DI 0 ax [orig:411 D.7094 ] [411])
                (plus:DI (reg:DI 0 ax [orig:410 D.7094 ] [410])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:273 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:410 D.7094 ] [410])
        (nil)))
(insn 704 703 705 28 (parallel [
            (set (reg:DI 1 dx [orig:412 D.7094 ] [412])
                (ashift:DI (reg:DI 0 ax [orig:411 D.7094 ] [411])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:273 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:411 D.7094 ] [411])
        (nil)))
(insn 705 704 706 28 (set (reg/f:DI 0 ax [671])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:273 87 {*movdi_internal_rex64}
     (nil))
(insn 706 705 707 28 (parallel [
            (set (reg/f:DI 0 ax [orig:413 D.7096 ] [413])
                (plus:DI (reg/f:DI 0 ax [671])
                    (reg:DI 1 dx [orig:412 D.7094 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:273 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [671])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:412 D.7094 ] [412])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:412 D.7094 ] [412]))
                (nil)))))
(insn 707 706 708 28 (set (reg/f:DI 0 ax [orig:414 D.7092 ] [414])
        (mem/f:DI (reg/f:DI 0 ax [orig:413 D.7096 ] [413]) [0 *_383+0 S8 A64])) mABM.c:273 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:413 D.7096 ] [413])
        (nil)))
(insn 708 707 709 28 (parallel [
            (set (reg/f:DI 2 cx [orig:415 D.7092 ] [415])
                (plus:DI (reg/f:DI 0 ax [orig:414 D.7092 ] [414])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:273 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:414 D.7092 ] [414])
        (nil)))
(insn 709 708 710 28 (set (reg:XF 0 ax [672])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:273 131 {*movxf_internal_rex64}
     (nil))
(insn 710 709 711 28 (set (mem:XF (reg/f:DI 2 cx [orig:415 D.7092 ] [415]) [0 *_385+0 S16 A128])
        (reg:XF 0 ax [672])) mABM.c:273 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [672])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:415 D.7092 ] [415])
            (nil))))
(insn 711 710 712 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:269 273 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              27 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 392 673
(code_label 712 711 713 29 80 "" [1 uses])
(note 713 712 714 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 714 713 715 29 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])) mABM.c:269 89 {*movsi_internal}
     (nil))
(insn 715 714 717 29 (parallel [
            (set (reg:SI 0 ax [orig:392 D.7091 ] [392])
                (plus:SI (reg:SI 0 ax [673])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:269 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [673])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -132 [0xffffffffffffff7c])) [0 t_wind+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 717 715 718 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:392 D.7091 ] [392])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32]))) mABM.c:269 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:392 D.7091 ] [392])
        (nil)))
(jump_insn 718 717 719 29 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) mABM.c:269 612 {*jcc_1}
     (nil)
 -> 716)
;;  succ:       28
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 719 718 720 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 720 719 921 30 (set (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (const_int 0 [0])) mABM.c:275 89 {*movsi_internal}
     (nil))
(jump_insn 921 720 922 30 (set (pc)
        (label_ref 881)) mABM.c:275 650 {jump}
     (nil)
 -> 881)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 922 921 723)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 674 675 676 677 678 679 680 681 682 683 684 685 686
(code_label 723 922 724 31 79 "" [1 uses])
(note 724 723 725 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 725 724 726 31 (set (reg:XF 0 ax [orig:416 t_c.56 ] [416])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 t_c+0 S16 A128])) mABM.c:277 131 {*movxf_internal_rex64}
     (nil))
(insn 726 725 727 31 (set (reg:SI 2 cx [674])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:277 89 {*movsi_internal}
     (nil))
(insn 727 726 728 31 (set (reg:DI 2 cx [orig:417 D.7094 ] [417])
        (sign_extend:DI (reg:SI 2 cx [674]))) mABM.c:277 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [674])
        (nil)))
(insn 728 727 729 31 (parallel [
            (set (reg:DI 2 cx [orig:418 D.7094 ] [418])
                (plus:DI (reg:DI 2 cx [orig:417 D.7094 ] [417])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:417 D.7094 ] [417])
        (nil)))
(insn 729 728 730 31 (parallel [
            (set (reg:DI 4 si [orig:419 D.7094 ] [419])
                (ashift:DI (reg:DI 2 cx [orig:418 D.7094 ] [418])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:418 D.7094 ] [418])
        (nil)))
(insn 730 729 731 31 (set (reg/f:DI 2 cx [675])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (nil))
(insn 731 730 732 31 (parallel [
            (set (reg/f:DI 2 cx [orig:420 D.7096 ] [420])
                (plus:DI (reg/f:DI 2 cx [675])
                    (reg:DI 4 si [orig:419 D.7094 ] [419])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [675])
        (expr_list:REG_DEAD (reg:DI 4 si [orig:419 D.7094 ] [419])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 4 si [orig:419 D.7094 ] [419]))
                (nil)))))
(insn 732 731 733 31 (set (reg/f:DI 5 di [orig:421 D.7092 ] [421])
        (mem/f:DI (reg/f:DI 2 cx [orig:420 D.7096 ] [420]) [0 *_392+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:420 D.7096 ] [420])
        (nil)))
(insn 733 732 734 31 (set (reg:SI 2 cx [orig:422 j.57 ] [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:277 89 {*movsi_internal}
     (nil))
(insn 734 733 735 31 (set (reg:DI 2 cx [orig:423 D.7094 ] [423])
        (sign_extend:DI (reg:SI 2 cx [orig:422 j.57 ] [422]))) mABM.c:277 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:422 j.57 ] [422])
        (nil)))
(insn 735 734 736 31 (parallel [
            (set (reg:DI 2 cx [orig:424 D.7094 ] [424])
                (plus:DI (reg:DI 2 cx [orig:423 D.7094 ] [423])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:423 D.7094 ] [423])
        (nil)))
(insn 736 735 737 31 (parallel [
            (set (reg:DI 4 si [orig:425 D.7094 ] [425])
                (ashift:DI (reg:DI 2 cx [orig:424 D.7094 ] [424])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:424 D.7094 ] [424])
        (nil)))
(insn 737 736 738 31 (set (reg/f:DI 2 cx [676])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (nil))
(insn 738 737 739 31 (parallel [
            (set (reg/f:DI 2 cx [orig:426 D.7096 ] [426])
                (plus:DI (reg/f:DI 2 cx [676])
                    (reg:DI 4 si [orig:425 D.7094 ] [425])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [676])
        (expr_list:REG_DEAD (reg:DI 4 si [orig:425 D.7094 ] [425])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 4 si [orig:425 D.7094 ] [425]))
                (nil)))))
(insn 739 738 740 31 (set (reg/f:DI 4 si [orig:427 D.7092 ] [427])
        (mem/f:DI (reg/f:DI 2 cx [orig:426 D.7096 ] [426]) [0 *_398+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:426 D.7096 ] [426])
        (nil)))
(insn 740 739 741 31 (set (reg:SI 2 cx [orig:428 j.58 ] [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:277 89 {*movsi_internal}
     (nil))
(insn 741 740 742 31 (set (reg:DI 2 cx [orig:429 D.7093 ] [429])
        (sign_extend:DI (reg:SI 2 cx [orig:428 j.58 ] [428]))) mABM.c:277 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:428 j.58 ] [428])
        (nil)))
(insn 742 741 743 31 (parallel [
            (set (reg:DI 37 r8 [orig:430 D.7093 ] [430])
                (ashift:DI (reg:DI 2 cx [orig:429 D.7093 ] [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:429 D.7093 ] [429])
        (nil)))
(insn 743 742 744 31 (set (reg/f:DI 2 cx [677])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (nil))
(insn 744 743 745 31 (parallel [
            (set (reg/f:DI 2 cx [orig:431 D.7096 ] [431])
                (plus:DI (reg/f:DI 2 cx [677])
                    (reg:DI 37 r8 [orig:430 D.7093 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [677])
        (expr_list:REG_DEAD (reg:DI 37 r8 [orig:430 D.7093 ] [430])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 37 r8 [orig:430 D.7093 ] [430]))
                (nil)))))
(insn 745 744 746 31 (set (reg/f:DI 2 cx [orig:432 D.7092 ] [432])
        (mem/f:DI (reg/f:DI 2 cx [orig:431 D.7096 ] [431]) [0 *_403+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:431 D.7096 ] [431])
        (nil)))
(insn 746 745 747 31 (set (reg:SI 37 r8 [orig:433 j.59 ] [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:277 89 {*movsi_internal}
     (nil))
(insn 747 746 956 31 (set (reg:DI 37 r8 [orig:434 D.7093 ] [434])
        (sign_extend:DI (reg:SI 37 r8 [orig:433 j.59 ] [433]))) mABM.c:277 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 37 r8 [orig:433 j.59 ] [433])
        (nil)))
(insn 956 747 748 31 (set (reg:DI 38 r9 [orig:435 D.7093 ] [435])
        (reg:DI 37 r8 [orig:434 D.7093 ] [434])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [orig:434 D.7093 ] [434])
        (nil)))
(insn 748 956 957 31 (parallel [
            (set (reg:DI 38 r9 [orig:435 D.7093 ] [435])
                (ashift:DI (reg:DI 38 r9 [orig:435 D.7093 ] [435])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 513 {*ashldi3_1}
     (nil))
(insn 957 748 749 31 (set (reg:DI 38 r9 [orig:435 D.7093 ] [435])
        (reg:DI 38 r9 [orig:435 D.7093 ] [435])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [orig:435 D.7093 ] [435])
        (nil)))
(insn 749 957 750 31 (set (reg/f:DI 37 r8 [678])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:277 87 {*movdi_internal_rex64}
     (nil))
(insn 750 749 751 31 (parallel [
            (set (reg/f:DI 37 r8 [orig:436 D.7092 ] [436])
                (plus:DI (reg/f:DI 37 r8 [678])
                    (reg:DI 38 r9 [orig:435 D.7093 ] [435])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:277 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [678])
        (expr_list:REG_DEAD (reg:DI 38 r9 [orig:435 D.7093 ] [435])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 38 r9 [orig:435 D.7093 ] [435]))
                (nil)))))
(insn 751 750 752 31 (set (reg:XF 9 st(1) [orig:437 D.7095 ] [437])
        (mem:XF (reg/f:DI 37 r8 [orig:436 D.7092 ] [436]) [0 *_408+0 S16 A128])) mABM.c:277 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:436 D.7092 ] [436])
        (nil)))
(insn 752 751 753 31 (set (reg:XF 10 st(2) [679])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:277 131 {*movxf_internal_rex64}
     (nil))
(insn 753 752 754 31 (set (reg:XF 8 st [680])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:277 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 754 753 755 31 (set (reg:XF 8 st [orig:438 D.7095 ] [438])
        (plus:XF (reg:XF 8 st [680])
            (reg:XF 10 st(2) [679]))) mABM.c:277 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [680])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [679])
            (nil))))
(insn 755 754 756 31 (set (reg:XF 8 st [orig:439 D.7095 ] [439])
        (mult:XF (reg:XF 8 st [orig:438 D.7095 ] [438])
            (reg:XF 9 st(1) [orig:437 D.7095 ] [437]))) mABM.c:277 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:438 D.7095 ] [438])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:437 D.7095 ] [437])
            (nil))))
(insn 756 755 757 31 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [orig:416 t_c.56 ] [416])) mABM.c:277 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:416 t_c.56 ] [416])
        (nil)))
(insn 757 756 758 31 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:439 D.7095 ] [439])) mABM.c:277 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:439 D.7095 ] [439])
        (nil)))
(insn 758 757 759 31 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:421 D.7092 ] [421])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:421 D.7092 ] [421])
        (nil)))
(insn 759 758 760 31 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:427 D.7092 ] [427])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:427 D.7092 ] [427])
        (nil)))
(insn 760 759 761 31 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:432 D.7092 ] [432])) mABM.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:432 D.7092 ] [432])
        (nil)))
(call_insn 761 760 762 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("coord") [flags 0x41]  <function_decl 0x7f05a595e800 coord>) [0 coord S1 A8])
            (const_int 32 [0x20]))) mABM.c:277 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 762 761 763 31 (set (reg:SI 0 ax [681])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:278 89 {*movsi_internal}
     (nil))
(insn 763 762 764 31 (set (reg:DI 0 ax [orig:440 D.7094 ] [440])
        (sign_extend:DI (reg:SI 0 ax [681]))) mABM.c:278 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [681])
        (nil)))
(insn 764 763 765 31 (parallel [
            (set (reg:DI 0 ax [orig:441 D.7094 ] [441])
                (plus:DI (reg:DI 0 ax [orig:440 D.7094 ] [440])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:440 D.7094 ] [440])
        (nil)))
(insn 765 764 766 31 (parallel [
            (set (reg:DI 1 dx [orig:442 D.7094 ] [442])
                (ashift:DI (reg:DI 0 ax [orig:441 D.7094 ] [441])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:441 D.7094 ] [441])
        (nil)))
(insn 766 765 767 31 (set (reg/f:DI 0 ax [682])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:278 87 {*movdi_internal_rex64}
     (nil))
(insn 767 766 768 31 (parallel [
            (set (reg/f:DI 0 ax [orig:443 D.7096 ] [443])
                (plus:DI (reg/f:DI 0 ax [682])
                    (reg:DI 1 dx [orig:442 D.7094 ] [442])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [682])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:442 D.7094 ] [442])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:442 D.7094 ] [442]))
                (nil)))))
(insn 768 767 769 31 (set (reg/f:DI 0 ax [orig:444 D.7092 ] [444])
        (mem/f:DI (reg/f:DI 0 ax [orig:443 D.7096 ] [443]) [0 *_415+0 S8 A64])) mABM.c:278 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:443 D.7096 ] [443])
        (nil)))
(insn 769 768 770 31 (parallel [
            (set (reg/f:DI 2 cx [orig:445 D.7092 ] [445])
                (plus:DI (reg/f:DI 0 ax [orig:444 D.7092 ] [444])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:444 D.7092 ] [444])
        (nil)))
(insn 770 769 771 31 (set (reg:SI 0 ax [orig:446 j.60 ] [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:278 89 {*movsi_internal}
     (nil))
(insn 771 770 772 31 (set (reg:DI 0 ax [orig:447 D.7093 ] [447])
        (sign_extend:DI (reg:SI 0 ax [orig:446 j.60 ] [446]))) mABM.c:278 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:446 j.60 ] [446])
        (nil)))
(insn 772 771 773 31 (parallel [
            (set (reg:DI 1 dx [orig:448 D.7093 ] [448])
                (ashift:DI (reg:DI 0 ax [orig:447 D.7093 ] [447])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:447 D.7093 ] [447])
        (nil)))
(insn 773 772 774 31 (set (reg/f:DI 0 ax [683])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:278 87 {*movdi_internal_rex64}
     (nil))
(insn 774 773 775 31 (parallel [
            (set (reg/f:DI 0 ax [orig:449 D.7096 ] [449])
                (plus:DI (reg/f:DI 0 ax [683])
                    (reg:DI 1 dx [orig:448 D.7093 ] [448])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:278 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [683])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:448 D.7093 ] [448])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:448 D.7093 ] [448]))
                (nil)))))
(insn 775 774 776 31 (set (reg/f:DI 0 ax [orig:450 D.7092 ] [450])
        (mem/f:DI (reg/f:DI 0 ax [orig:449 D.7096 ] [449]) [0 *_421+0 S8 A64])) mABM.c:278 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:449 D.7096 ] [449])
        (nil)))
(insn 776 775 777 31 (set (reg:XF 0 ax [orig:451 D.7095 ] [451])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:450 D.7092 ] [450])
                (const_int 32 [0x20])) [0 MEM[(long double *)_422 + 32B]+0 S16 A128])) mABM.c:278 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:450 D.7092 ] [450])
        (nil)))
(insn 777 776 778 31 (set (mem:XF (reg/f:DI 2 cx [orig:445 D.7092 ] [445]) [0 *_417+0 S16 A128])
        (reg:XF 0 ax [orig:451 D.7095 ] [451])) mABM.c:278 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:451 D.7095 ] [451])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:445 D.7092 ] [445])
            (nil))))
(insn 778 777 779 31 (set (reg:SI 0 ax [684])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:279 89 {*movsi_internal}
     (nil))
(insn 779 778 780 31 (set (reg:DI 0 ax [orig:452 D.7094 ] [452])
        (sign_extend:DI (reg:SI 0 ax [684]))) mABM.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [684])
        (nil)))
(insn 780 779 781 31 (parallel [
            (set (reg:DI 0 ax [orig:453 D.7094 ] [453])
                (plus:DI (reg:DI 0 ax [orig:452 D.7094 ] [452])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:452 D.7094 ] [452])
        (nil)))
(insn 781 780 782 31 (parallel [
            (set (reg:DI 1 dx [orig:454 D.7094 ] [454])
                (ashift:DI (reg:DI 0 ax [orig:453 D.7094 ] [453])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:453 D.7094 ] [453])
        (nil)))
(insn 782 781 783 31 (set (reg/f:DI 0 ax [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 783 782 784 31 (parallel [
            (set (reg/f:DI 0 ax [orig:455 D.7096 ] [455])
                (plus:DI (reg/f:DI 0 ax [685])
                    (reg:DI 1 dx [orig:454 D.7094 ] [454])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [685])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:454 D.7094 ] [454])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:454 D.7094 ] [454]))
                (nil)))))
(insn 784 783 785 31 (set (reg/f:DI 0 ax [orig:456 D.7092 ] [456])
        (mem/f:DI (reg/f:DI 0 ax [orig:455 D.7096 ] [455]) [0 *_427+0 S8 A64])) mABM.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:455 D.7096 ] [455])
        (nil)))
(insn 785 784 786 31 (parallel [
            (set (reg/f:DI 2 cx [orig:457 D.7092 ] [457])
                (plus:DI (reg/f:DI 0 ax [orig:456 D.7092 ] [456])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:456 D.7092 ] [456])
        (nil)))
(insn 786 785 787 31 (set (reg:SI 0 ax [orig:458 j.61 ] [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:279 89 {*movsi_internal}
     (nil))
(insn 787 786 788 31 (set (reg:DI 0 ax [orig:459 D.7093 ] [459])
        (sign_extend:DI (reg:SI 0 ax [orig:458 j.61 ] [458]))) mABM.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:458 j.61 ] [458])
        (nil)))
(insn 788 787 789 31 (parallel [
            (set (reg:DI 1 dx [orig:460 D.7093 ] [460])
                (ashift:DI (reg:DI 0 ax [orig:459 D.7093 ] [459])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:459 D.7093 ] [459])
        (nil)))
(insn 789 788 790 31 (set (reg/f:DI 0 ax [686])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 790 789 791 31 (parallel [
            (set (reg/f:DI 0 ax [orig:461 D.7096 ] [461])
                (plus:DI (reg/f:DI 0 ax [686])
                    (reg:DI 1 dx [orig:460 D.7093 ] [460])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [686])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:460 D.7093 ] [460])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:460 D.7093 ] [460]))
                (nil)))))
(insn 791 790 792 31 (set (reg/f:DI 0 ax [orig:462 D.7092 ] [462])
        (mem/f:DI (reg/f:DI 0 ax [orig:461 D.7096 ] [461]) [0 *_433+0 S8 A64])) mABM.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:461 D.7096 ] [461])
        (nil)))
(insn 792 791 793 31 (set (reg:XF 0 ax [orig:463 D.7095 ] [463])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:462 D.7092 ] [462])
                (const_int 48 [0x30])) [0 MEM[(long double *)_434 + 48B]+0 S16 A128])) mABM.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:462 D.7092 ] [462])
        (nil)))
(insn 793 792 923 31 (set (mem:XF (reg/f:DI 2 cx [orig:457 D.7092 ] [457]) [0 *_429+0 S16 A128])
        (reg:XF 0 ax [orig:463 D.7095 ] [463])) mABM.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:463 D.7095 ] [463])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:457 D.7092 ] [457])
            (nil))))
(jump_insn 923 793 924 31 (set (pc)
        (label_ref 867)) 650 {jump}
     (nil)
 -> 867)
;;  succ:       33 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 924 923 914)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
(code_label 914 924 797 32 88 "" [1 uses])
(note 797 914 798 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 798 797 799 32 (set (reg:SI 0 ax [687])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:283 89 {*movsi_internal}
     (nil))
(insn 799 798 800 32 (set (reg:DI 0 ax [orig:464 D.7094 ] [464])
        (sign_extend:DI (reg:SI 0 ax [687]))) mABM.c:283 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [687])
        (nil)))
(insn 800 799 801 32 (parallel [
            (set (reg:DI 0 ax [orig:465 D.7094 ] [465])
                (plus:DI (reg:DI 0 ax [orig:464 D.7094 ] [464])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:464 D.7094 ] [464])
        (nil)))
(insn 801 800 802 32 (parallel [
            (set (reg:DI 1 dx [orig:466 D.7094 ] [466])
                (ashift:DI (reg:DI 0 ax [orig:465 D.7094 ] [465])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:465 D.7094 ] [465])
        (nil)))
(insn 802 801 803 32 (set (reg/f:DI 0 ax [688])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 803 802 804 32 (parallel [
            (set (reg/f:DI 0 ax [orig:467 D.7096 ] [467])
                (plus:DI (reg/f:DI 0 ax [688])
                    (reg:DI 1 dx [orig:466 D.7094 ] [466])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [688])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:466 D.7094 ] [466])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:466 D.7094 ] [466]))
                (nil)))))
(insn 804 803 805 32 (set (reg/f:DI 5 di [orig:468 D.7092 ] [468])
        (mem/f:DI (reg/f:DI 0 ax [orig:467 D.7096 ] [467]) [0 *_439+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:467 D.7096 ] [467])
        (nil)))
(insn 805 804 806 32 (set (reg:SI 0 ax [orig:469 j.62 ] [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:283 89 {*movsi_internal}
     (nil))
(insn 806 805 807 32 (set (reg:DI 0 ax [orig:470 D.7094 ] [470])
        (sign_extend:DI (reg:SI 0 ax [orig:469 j.62 ] [469]))) mABM.c:283 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:469 j.62 ] [469])
        (nil)))
(insn 807 806 808 32 (parallel [
            (set (reg:DI 0 ax [orig:471 D.7094 ] [471])
                (plus:DI (reg:DI 0 ax [orig:470 D.7094 ] [470])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:470 D.7094 ] [470])
        (nil)))
(insn 808 807 809 32 (parallel [
            (set (reg:DI 1 dx [orig:472 D.7094 ] [472])
                (ashift:DI (reg:DI 0 ax [orig:471 D.7094 ] [471])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:471 D.7094 ] [471])
        (nil)))
(insn 809 808 810 32 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 810 809 811 32 (parallel [
            (set (reg/f:DI 0 ax [orig:473 D.7096 ] [473])
                (plus:DI (reg/f:DI 0 ax [689])
                    (reg:DI 1 dx [orig:472 D.7094 ] [472])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [689])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:472 D.7094 ] [472])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:472 D.7094 ] [472]))
                (nil)))))
(insn 811 810 812 32 (set (reg/f:DI 4 si [orig:474 D.7092 ] [474])
        (mem/f:DI (reg/f:DI 0 ax [orig:473 D.7096 ] [473]) [0 *_445+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:473 D.7096 ] [473])
        (nil)))
(insn 812 811 813 32 (set (reg:SI 0 ax [690])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:283 89 {*movsi_internal}
     (nil))
(insn 813 812 814 32 (set (reg:DI 0 ax [orig:475 D.7093 ] [475])
        (sign_extend:DI (reg:SI 0 ax [690]))) mABM.c:283 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [690])
        (nil)))
(insn 814 813 815 32 (parallel [
            (set (reg:DI 1 dx [orig:476 D.7093 ] [476])
                (ashift:DI (reg:DI 0 ax [orig:475 D.7093 ] [475])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:475 D.7093 ] [475])
        (nil)))
(insn 815 814 816 32 (set (reg/f:DI 0 ax [691])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 816 815 817 32 (parallel [
            (set (reg/f:DI 0 ax [orig:477 D.7096 ] [477])
                (plus:DI (reg/f:DI 0 ax [691])
                    (reg:DI 1 dx [orig:476 D.7093 ] [476])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [691])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:476 D.7093 ] [476])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:476 D.7093 ] [476]))
                (nil)))))
(insn 817 816 818 32 (set (reg/f:DI 2 cx [orig:478 D.7092 ] [478])
        (mem/f:DI (reg/f:DI 0 ax [orig:477 D.7096 ] [477]) [0 *_449+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:477 D.7096 ] [477])
        (nil)))
(insn 818 817 819 32 (set (reg:SI 0 ax [orig:479 j.63 ] [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:283 89 {*movsi_internal}
     (nil))
(insn 819 818 958 32 (set (reg:DI 0 ax [orig:480 D.7093 ] [480])
        (sign_extend:DI (reg:SI 0 ax [orig:479 j.63 ] [479]))) mABM.c:283 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:479 j.63 ] [479])
        (nil)))
(insn 958 819 820 32 (set (reg:DI 0 ax [orig:481 D.7093 ] [481])
        (reg:DI 0 ax [orig:480 D.7093 ] [480])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:480 D.7093 ] [480])
        (nil)))
(insn 820 958 959 32 (parallel [
            (set (reg:DI 0 ax [orig:481 D.7093 ] [481])
                (ashift:DI (reg:DI 0 ax [orig:481 D.7093 ] [481])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 513 {*ashldi3_1}
     (nil))
(insn 959 820 821 32 (set (reg:DI 1 dx [orig:481 D.7093 ] [481])
        (reg:DI 0 ax [orig:481 D.7093 ] [481])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:481 D.7093 ] [481])
        (nil)))
(insn 821 959 822 32 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 vel+0 S8 A64])) mABM.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 822 821 823 32 (parallel [
            (set (reg/f:DI 0 ax [orig:482 D.7092 ] [482])
                (plus:DI (reg/f:DI 0 ax [692])
                    (reg:DI 1 dx [orig:481 D.7093 ] [481])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [692])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:481 D.7093 ] [481])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 vel+0 S8 A64])
                    (reg:DI 1 dx [orig:481 D.7093 ] [481]))
                (nil)))))
(insn 823 822 824 32 (set (reg:XF 9 st(1) [orig:483 D.7095 ] [483])
        (mem:XF (reg/f:DI 0 ax [orig:482 D.7092 ] [482]) [0 *_454+0 S16 A128])) mABM.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:482 D.7092 ] [482])
        (nil)))
(insn 824 823 825 32 (set (reg:XF 10 st(2) [693])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 dV+0 S16 A128])) mABM.c:283 131 {*movxf_internal_rex64}
     (nil))
(insn 825 824 826 32 (set (reg:XF 8 st [694])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 826 825 827 32 (set (reg:XF 8 st [orig:484 D.7095 ] [484])
        (plus:XF (reg:XF 8 st [694])
            (reg:XF 10 st(2) [693]))) mABM.c:283 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [694])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [693])
            (nil))))
(insn 827 826 828 32 (set (reg:XF 8 st [orig:485 D.7095 ] [485])
        (mult:XF (reg:XF 8 st [orig:484 D.7095 ] [484])
            (reg:XF 9 st(1) [orig:483 D.7095 ] [483]))) mABM.c:283 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:484 D.7095 ] [484])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:483 D.7095 ] [483])
            (nil))))
(insn 828 827 829 32 (set (reg:XF 0 ax [695])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time_step+0 S16 A128])) mABM.c:283 131 {*movxf_internal_rex64}
     (nil))
(insn 829 828 830 32 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [695])) mABM.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [695])
        (nil)))
(insn 830 829 831 32 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:485 D.7095 ] [485])) mABM.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:485 D.7095 ] [485])
        (nil)))
(insn 831 830 832 32 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:468 D.7092 ] [468])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:468 D.7092 ] [468])
        (nil)))
(insn 832 831 833 32 (set (reg:DI 4 si)
        (reg/f:DI 4 si [orig:474 D.7092 ] [474])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:474 D.7092 ] [474])
        (nil)))
(insn 833 832 834 32 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:478 D.7092 ] [478])) mABM.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:478 D.7092 ] [478])
        (nil)))
(call_insn 834 833 835 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("coord") [flags 0x41]  <function_decl 0x7f05a595e800 coord>) [0 coord S1 A8])
            (const_int 32 [0x20]))) mABM.c:283 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (nil)))))))
(insn 835 834 836 32 (set (reg:SI 0 ax [696])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:284 89 {*movsi_internal}
     (nil))
(insn 836 835 837 32 (set (reg:DI 0 ax [orig:486 D.7094 ] [486])
        (sign_extend:DI (reg:SI 0 ax [696]))) mABM.c:284 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [696])
        (nil)))
(insn 837 836 838 32 (parallel [
            (set (reg:DI 0 ax [orig:487 D.7094 ] [487])
                (plus:DI (reg:DI 0 ax [orig:486 D.7094 ] [486])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:486 D.7094 ] [486])
        (nil)))
(insn 838 837 839 32 (parallel [
            (set (reg:DI 1 dx [orig:488 D.7094 ] [488])
                (ashift:DI (reg:DI 0 ax [orig:487 D.7094 ] [487])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:487 D.7094 ] [487])
        (nil)))
(insn 839 838 840 32 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 840 839 841 32 (parallel [
            (set (reg/f:DI 0 ax [orig:489 D.7096 ] [489])
                (plus:DI (reg/f:DI 0 ax [697])
                    (reg:DI 1 dx [orig:488 D.7094 ] [488])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [697])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:488 D.7094 ] [488])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:488 D.7094 ] [488]))
                (nil)))))
(insn 841 840 842 32 (set (reg/f:DI 0 ax [orig:490 D.7092 ] [490])
        (mem/f:DI (reg/f:DI 0 ax [orig:489 D.7096 ] [489]) [0 *_461+0 S8 A64])) mABM.c:284 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:489 D.7096 ] [489])
        (nil)))
(insn 842 841 843 32 (parallel [
            (set (reg/f:DI 2 cx [orig:491 D.7092 ] [491])
                (plus:DI (reg/f:DI 0 ax [orig:490 D.7092 ] [490])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:490 D.7092 ] [490])
        (nil)))
(insn 843 842 844 32 (set (reg:SI 0 ax [orig:492 j.64 ] [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:284 89 {*movsi_internal}
     (nil))
(insn 844 843 845 32 (set (reg:DI 0 ax [orig:493 D.7093 ] [493])
        (sign_extend:DI (reg:SI 0 ax [orig:492 j.64 ] [492]))) mABM.c:284 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:492 j.64 ] [492])
        (nil)))
(insn 845 844 846 32 (parallel [
            (set (reg:DI 1 dx [orig:494 D.7093 ] [494])
                (ashift:DI (reg:DI 0 ax [orig:493 D.7093 ] [493])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:493 D.7093 ] [493])
        (nil)))
(insn 846 845 847 32 (set (reg/f:DI 0 ax [698])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 847 846 848 32 (parallel [
            (set (reg/f:DI 0 ax [orig:495 D.7096 ] [495])
                (plus:DI (reg/f:DI 0 ax [698])
                    (reg:DI 1 dx [orig:494 D.7093 ] [494])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [698])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:494 D.7093 ] [494])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:494 D.7093 ] [494]))
                (nil)))))
(insn 848 847 849 32 (set (reg/f:DI 0 ax [orig:496 D.7092 ] [496])
        (mem/f:DI (reg/f:DI 0 ax [orig:495 D.7096 ] [495]) [0 *_467+0 S8 A64])) mABM.c:284 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:495 D.7096 ] [495])
        (nil)))
(insn 849 848 850 32 (set (reg:XF 0 ax [orig:497 D.7095 ] [497])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:496 D.7092 ] [496])
                (const_int 32 [0x20])) [0 MEM[(long double *)_468 + 32B]+0 S16 A128])) mABM.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:496 D.7092 ] [496])
        (nil)))
(insn 850 849 851 32 (set (mem:XF (reg/f:DI 2 cx [orig:491 D.7092 ] [491]) [0 *_463+0 S16 A128])
        (reg:XF 0 ax [orig:497 D.7095 ] [497])) mABM.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:497 D.7095 ] [497])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:491 D.7092 ] [491])
            (nil))))
(insn 851 850 852 32 (set (reg:SI 0 ax [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])) mABM.c:285 89 {*movsi_internal}
     (nil))
(insn 852 851 853 32 (set (reg:DI 0 ax [orig:498 D.7094 ] [498])
        (sign_extend:DI (reg:SI 0 ax [699]))) mABM.c:285 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [699])
        (nil)))
(insn 853 852 854 32 (parallel [
            (set (reg:DI 0 ax [orig:499 D.7094 ] [499])
                (plus:DI (reg:DI 0 ax [orig:498 D.7094 ] [498])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:498 D.7094 ] [498])
        (nil)))
(insn 854 853 855 32 (parallel [
            (set (reg:DI 1 dx [orig:500 D.7094 ] [500])
                (ashift:DI (reg:DI 0 ax [orig:499 D.7094 ] [499])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:499 D.7094 ] [499])
        (nil)))
(insn 855 854 856 32 (set (reg/f:DI 0 ax [700])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 pos+0 S8 A64])) mABM.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 856 855 857 32 (parallel [
            (set (reg/f:DI 0 ax [orig:501 D.7096 ] [501])
                (plus:DI (reg/f:DI 0 ax [700])
                    (reg:DI 1 dx [orig:500 D.7094 ] [500])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [700])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:500 D.7094 ] [500])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:500 D.7094 ] [500]))
                (nil)))))
(insn 857 856 858 32 (set (reg/f:DI 0 ax [orig:502 D.7092 ] [502])
        (mem/f:DI (reg/f:DI 0 ax [orig:501 D.7096 ] [501]) [0 *_473+0 S8 A64])) mABM.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:501 D.7096 ] [501])
        (nil)))
(insn 858 857 859 32 (parallel [
            (set (reg/f:DI 2 cx [orig:503 D.7092 ] [503])
                (plus:DI (reg/f:DI 0 ax [orig:502 D.7092 ] [502])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:502 D.7092 ] [502])
        (nil)))
(insn 859 858 860 32 (set (reg:SI 0 ax [orig:504 j.65 ] [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 j+0 S4 A32])) mABM.c:285 89 {*movsi_internal}
     (nil))
(insn 860 859 861 32 (set (reg:DI 0 ax [orig:505 D.7093 ] [505])
        (sign_extend:DI (reg:SI 0 ax [orig:504 j.65 ] [504]))) mABM.c:285 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:504 j.65 ] [504])
        (nil)))
(insn 861 860 862 32 (parallel [
            (set (reg:DI 1 dx [orig:506 D.7093 ] [506])
                (ashift:DI (reg:DI 0 ax [orig:505 D.7093 ] [505])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:505 D.7093 ] [505])
        (nil)))
(insn 862 861 863 32 (set (reg/f:DI 0 ax [701])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 nvp+0 S8 A64])) mABM.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 863 862 864 32 (parallel [
            (set (reg/f:DI 0 ax [orig:507 D.7096 ] [507])
                (plus:DI (reg/f:DI 0 ax [701])
                    (reg:DI 1 dx [orig:506 D.7093 ] [506])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [701])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:506 D.7093 ] [506])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:506 D.7093 ] [506]))
                (nil)))))
(insn 864 863 865 32 (set (reg/f:DI 0 ax [orig:508 D.7092 ] [508])
        (mem/f:DI (reg/f:DI 0 ax [orig:507 D.7096 ] [507]) [0 *_479+0 S8 A64])) mABM.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:507 D.7096 ] [507])
        (nil)))
(insn 865 864 866 32 (set (reg:XF 0 ax [orig:509 D.7095 ] [509])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:508 D.7092 ] [508])
                (const_int 48 [0x30])) [0 MEM[(long double *)_480 + 48B]+0 S16 A128])) mABM.c:285 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:508 D.7092 ] [508])
        (nil)))
(insn 866 865 867 32 (set (mem:XF (reg/f:DI 2 cx [orig:503 D.7092 ] [503]) [0 *_475+0 S16 A128])
        (reg:XF 0 ax [orig:509 D.7095 ] [509])) mABM.c:285 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:509 D.7095 ] [509])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:503 D.7092 ] [503])
            (nil))))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              31 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 867 866 868 33 82 "" [1 uses])
(note 868 867 869 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 869 868 870 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:248 273 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 301 702
(code_label 870 869 871 34 73 "" [1 uses])
(note 871 870 872 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 872 871 873 34 (set (reg:SI 0 ax [702])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 t_wind+0 S4 A32])) mABM.c:248 89 {*movsi_internal}
     (nil))
(insn 873 872 875 34 (parallel [
            (set (reg:SI 0 ax [orig:301 D.7091 ] [301])
                (plus:SI (reg:SI 0 ax [702])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:248 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [702])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -132 [0xffffffffffffff7c])) [0 t_wind+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 875 873 876 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:301 D.7091 ] [301])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 i+0 S4 A32]))) mABM.c:248 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:301 D.7091 ] [301])
        (nil)))
(jump_insn 876 875 877 34 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 874)
            (pc))) mABM.c:248 612 {*jcc_1}
     (nil)
 -> 874)
;;  succ:       20
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 877 876 878 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 878 877 881 35 (set (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (const_int 1 [0x1])) mABM.c:289 89 {*movsi_internal}
     (nil))
;;  succ:       36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;;              25 [100.0%] 
;;              9 [100.0%] 
;;              14 [100.0%] 
;;              30 [100.0%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 510
(code_label 881 878 882 36 84 "" [4 uses])
(note 882 881 883 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 883 882 931 36 (set (reg:SI 0 ax [orig:510 <retval> ] [510])
        (reg:SI 0 ax [orig:59 D.7091 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7091 ] [59])
        (nil)))
(note 931 883 887 36 NOTE_INSN_DELETED)
(insn 887 931 890 36 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:510 <retval> ] [510])) mABM.c:290 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:510 <retval> ] [510])
        (nil)))
(insn 890 887 0 36 (use (reg/i:SI 0 ax)) mABM.c:290 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _extract_from_dist_laplace (_extract_from_dist_laplace, funcdef_no=12, decl_uid=4188, cgraph_uid=12)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=619,losers=2 -- reject
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) ?x  (1) f  (2) m {*truncxfdf2_mixed}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) x  (1) xm {*movv2df_internal}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=1,overall=7,losers=1,rld_nregs=2
          alt=2,overall=1207,losers=1 -- reject
	 Choosing alt 0 in insn 15:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
      Creating newreg=85 from oldreg=60, assigning class SSE_REGS to r85
   15: {r85:DF=abs(r85:DF);use r77:V2DF;clobber flags:CC;}
      REG_DEAD r77:V2DF
      REG_DEAD r59:DF
      REG_UNUSED flags:CC
      REG_EQUAL abs(r59:DF)
    Inserting insn reload before:
   47: r85:DF=r59:DF
    Inserting insn reload after:
   48: r60:DF=r85:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 48:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 20:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=86 from oldreg=63, assigning class FLOAT_REGS to r86
   20: r86:XF=r86:XF*r79:XF
      REG_DEAD r79:XF
      REG_DEAD r62:XF
    Inserting insn reload before:
   49: r86:XF=r62:XF
    Inserting insn reload after:
   50: r63:XF=r86:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=619,losers=2 -- reject
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) ?x  (1) f  (2) m {*truncxfdf2_mixed}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) x  (1) xm {*movv2df_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) x  (1) x  (2) 0 {*absnegdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 26:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 27:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=87 from oldreg=67, assigning class SSE_REGS to r87
   27: r87:DF=r87:DF-r66:DF
      REG_DEAD r82:DF
      REG_DEAD r66:DF
    Inserting insn reload before:
   51: r87:DF=r82:DF
    Inserting insn reload after:
   52: r67:DF=r87:DF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 30:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=88 from oldreg=63, assigning class FLOAT_REGS to r88
   32: r70:XF=r69:XF*r88:XF
      REG_DEAD r69:XF
      REG_DEAD r63:XF
    Inserting insn reload before:
   53: r88:XF=r63:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 68 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=89 from oldreg=63, assigning class FLOAT_REGS to inheritance r89
    Original reg change 63->89 (bb2):
   50: r89:XF=r86:XF
    Add original<-inheritance after:
   54: r63:XF=r89:XF

    Inheritance reuse change 63->89 (bb2):
   53: r88:XF=r89:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 60 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    54: r63:XF=r89:XF
deleting insn with uid = 54.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 44: point = 0
   Insn 41: point = 0
   Insn 37: point = 1
   Insn 34: point = 3
   Insn 33: point = 5
   Insn 32: point = 6
   Insn 53: point = 8
	   Creating copy r88<-r89@1
   Insn 31: point = 10
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 13
   Insn 52: point = 14
	Hard reg 21 is preferable by r87 with profit 1
   Insn 27: point = 16
   Insn 51: point = 17
	Hard reg 21 is preferable by r87 with profit 1
	Hard reg 22 is preferable by r87 with profit 1
   Insn 26: point = 19
   Insn 25: point = 20
   Insn 24: point = 22
   Insn 23: point = 24
   Insn 22: point = 25
   Insn 21: point = 27
   Insn 50: point = 28
	   Creating copy r86->r89@1
   Insn 20: point = 30
   Insn 49: point = 31
	Hard reg 9 is preferable by r86 with profit 1
   Insn 19: point = 33
   Insn 18: point = 34
   Insn 17: point = 36
   Insn 16: point = 37
   Insn 48: point = 39
   Insn 15: point = 41
   Insn 47: point = 42
	Hard reg 22 is preferable by r85 with profit 1
   Insn 14: point = 44
   Insn 13: point = 45
   Insn 12: point = 47
   Insn 11: point = 48
   Insn 10: point = 49
   Insn 9: point = 50
   Insn 8: point = 50
   Insn 7: point = 51
   Insn 6: point = 52
   Insn 5: point = 53
 r59: [43..45]
 r60: [38..39]
 r61: [35..37]
 r62: [32..34]
 r64: [23..25]
 r65: [21..22]
 r66: [16..20]
 r67: [13..14]
 r68: [11..12]
 r69: [7..10]
 r70: [4..6]
 r71: [2..3]
 r72: [0..1]
 r73: [52..53]
 r74: [50..51]
 r75: [48..49]
 r76: [46..47]
 r77: [41..44]
 r78: [35..36]
 r79: [30..33]
 r80: [26..27]
 r81: [23..24]
 r82: [18..19]
 r83: [4..5]
 r85: [40..42]
 r86: [29..31]
 r87: [15..17]
 r88: [7..8]
 r89: [9..28]
Compressing live ranges: from 54 to 44 - 81%
Ranges after the compression:
 r59: [34..35]
 r60: [30..31]
 r61: [28..29]
 r62: [26..27]
 r64: [20..21]
 r65: [18..19]
 r66: [14..17]
 r67: [12..13]
 r68: [10..11]
 r69: [6..9]
 r70: [4..5]
 r71: [2..3]
 r72: [0..1]
 r73: [42..43]
 r74: [40..41]
 r75: [38..39]
 r76: [36..37]
 r77: [32..35]
 r78: [28..29]
 r79: [24..27]
 r80: [22..23]
 r81: [20..21]
 r82: [16..17]
 r83: [4..5]
 r85: [32..33]
 r86: [24..25]
 r87: [14..15]
 r88: [6..7]
 r89: [8..23]
	 Assigning to 86 (cl=FLOAT_REGS, orig=63, freq=3, tfirst=86, tfreq=3)...
	   Assign 9 to reload r86 (freq=3)
	Hard reg 9 is preferable by r89 with profit 1
	Hard reg 9 is preferable by r88 with profit 1
	 Assigning to 88 (cl=FLOAT_REGS, orig=63, freq=2, tfirst=86, tfreq=3)...
	   Assign 9 to reload r88 (freq=2)
	Hard reg 9 is preferable by r89 with profit 2
	 Assigning to 89 (cl=FLOAT_REGS, orig=63, freq=2, tfirst=86, tfreq=3)...
	 Assigning to 85 (cl=SSE_REGS, orig=60, freq=3, tfirst=85, tfreq=3)...
	   Assign 22 to reload r85 (freq=3)
	 Assigning to 87 (cl=SSE_REGS, orig=67, freq=3, tfirst=87, tfreq=3)...
	   Assign 22 to reload r87 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   53: r88:XF=r63:XF
      REG_DEAD r63:XF
   Insn after restoring regs:
   50: r63:XF=r86:XF
      REG_DEAD r86:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 44: point = 0
   Insn 41: point = 0
   Insn 37: point = 1
   Insn 34: point = 3
   Insn 33: point = 5
   Insn 32: point = 6
   Insn 53: point = 8
   Insn 31: point = 10
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 13
   Insn 52: point = 14
   Insn 27: point = 16
   Insn 51: point = 17
   Insn 26: point = 19
   Insn 25: point = 20
   Insn 24: point = 22
   Insn 23: point = 24
   Insn 22: point = 25
   Insn 21: point = 27
   Insn 50: point = 28
   Insn 20: point = 30
   Insn 49: point = 31
   Insn 19: point = 33
   Insn 18: point = 34
   Insn 17: point = 36
   Insn 16: point = 37
   Insn 48: point = 39
   Insn 15: point = 41
   Insn 47: point = 42
   Insn 14: point = 44
   Insn 13: point = 45
   Insn 12: point = 47
   Insn 11: point = 48
   Insn 10: point = 49
   Insn 9: point = 50
   Insn 8: point = 50
   Insn 7: point = 51
   Insn 6: point = 52
   Insn 5: point = 53
 r60: [38..39]
 r63: [9..28]
 r68: [11..12]
Compressing live ranges: from 54 to 4 - 7%
Ranges after the compression:
 r60: [2..3]
 r63: [0..1]
 r68: [0..1]
  Slot 0 regnos (width = 16):	 60	 63
  Slot 1 regnos (width = 8):	 68
Changing spilled pseudos to memory in insn #48
Changing spilled pseudos to memory in insn #16
Changing spilled pseudos to memory in insn #50
Changing spilled pseudos to memory in insn #30
Changing spilled pseudos to memory in insn #31
Changing spilled pseudos to memory in insn #53

********** Local #3: **********

Reusing alternative 0 for insn #53
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #31
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #30
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 30:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 1 for insn #50
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #16
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #48
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 48:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 37
changing reg in insn 37
changing reg in insn 41
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 29.


_extract_from_dist_laplace

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={5d,2u} r1={5d,2u} r2={3d} r4={3d} r5={3d} r6={1d,16u} r7={1d,8u} r8={12d,12u} r9={8d,6u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r20={1d,1u} r21={9d,8u} r22={10d,7u,2e} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 205{141d,62u,2e} in 40{38 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 0 ax [73])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) mABM.c:294 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [73])) mABM.c:294 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [73])
        (nil)))
(insn 7 6 8 2 (set (reg:XF 0 ax [74])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mABM.c:294 131 {*movxf_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [74])) mABM.c:294 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [74])
        (nil)))
(call_insn 9 8 10 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:294 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 10 9 11 2 (set (reg:XF 8 st [75])
        (reg:XF 8 st)) mABM.c:294 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 11 10 12 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 p+0 S16 A128])
        (reg:XF 8 st [75])) mABM.c:294 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [75])
        (nil)))
(insn 12 11 13 2 (set (reg:XF 8 st [76])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 p+0 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DF 22 xmm1 [orig:59 D.7097 ] [59])
                (float_truncate:DF (reg:XF 8 st [76])))
            (clobber (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S8 A64]))
        ]) mABM.c:295 170 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 8 st [76])
        (nil)))
(insn 14 13 47 2 (set (reg:V2DF 21 xmm0 [77])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) mABM.c:295 1150 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 47 14 15 2 (set (reg:DF 22 xmm1 [orig:60 D.7097 ] [60])
        (reg:DF 22 xmm1 [orig:59 D.7097 ] [59])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:59 D.7097 ] [59])
        (nil)))
(insn 15 47 48 2 (parallel [
            (set (reg:DF 22 xmm1 [orig:60 D.7097 ] [60])
                (abs:DF (reg:DF 22 xmm1 [orig:60 D.7097 ] [60])))
            (use (reg:V2DF 21 xmm0 [77]))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:295 471 {*absnegdf2_sse}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [77])
        (expr_list:REG_EQUAL (abs:DF (reg:DF 22 xmm1 [orig:59 D.7097 ] [59]))
            (nil))))
(insn 48 15 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A128])
        (reg:DF 22 xmm1 [orig:60 D.7097 ] [60])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:60 D.7097 ] [60])
        (nil)))
(insn 16 48 17 2 (set (reg:XF 8 st [orig:61 D.7098 ] [61])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A128]))) mABM.c:295 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 60 [ D.7097 ])
        (nil)))
(insn 17 16 18 2 (set (reg:XF 9 st(1) [78])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 p+0 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:XF 9 st(1) [orig:62 D.7098 ] [62])
        (div:XF (reg:XF 9 st(1) [78])
            (reg:XF 8 st [orig:61 D.7098 ] [61]))) mABM.c:295 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [78])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.7098 ] [61])
            (nil))))
(insn 19 18 49 2 (set (reg:XF 8 st [79])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 49 19 20 2 (set (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
        (reg:XF 9 st(1) [orig:62 D.7098 ] [62])) mABM.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.7098 ] [62])
        (nil)))
(insn 20 49 50 2 (set (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
        (mult:XF (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
            (reg:XF 8 st [79]))) mABM.c:295 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [79])
        (nil)))
(insn 50 20 54 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])
        (reg:XF 9 st(1) [orig:63 D.7098 ] [63])) mABM.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
        (nil)))
(note 54 50 21 2 NOTE_INSN_DELETED)
(insn 21 54 22 2 (set (reg:XF 8 st [80])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 p+0 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg:DF 22 xmm1 [orig:64 D.7097 ] [64])
                (float_truncate:DF (reg:XF 8 st [80])))
            (clobber (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S8 A64]))
        ]) mABM.c:295 170 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 8 st [80])
        (nil)))
(insn 23 22 24 2 (set (reg:V2DF 21 xmm0 [81])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) mABM.c:295 1150 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg:DF 21 xmm0 [orig:65 D.7097 ] [65])
                (abs:DF (reg:DF 22 xmm1 [orig:64 D.7097 ] [64])))
            (use (reg:V2DF 21 xmm0 [81]))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:295 471 {*absnegdf2_sse}
     (expr_list:REG_DEAD (reg:V2DF 21 xmm0 [81])
        (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:64 D.7097 ] [64])
            (expr_list:REG_EQUAL (abs:DF (reg:DF 22 xmm1 [orig:64 D.7097 ] [64]))
                (nil)))))
(insn 25 24 26 2 (set (reg:DF 21 xmm0 [orig:66 D.7097 ] [66])
        (plus:DF (reg:DF 21 xmm0 [orig:65 D.7097 ] [65])
            (reg:DF 21 xmm0 [orig:65 D.7097 ] [65]))) mABM.c:295 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:65 D.7097 ] [65])
        (nil)))
(insn 26 25 51 2 (set (reg:DF 22 xmm1 [82])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 51 26 27 2 (set (reg:DF 22 xmm1 [orig:67 D.7097 ] [67])
        (reg:DF 22 xmm1 [82])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [82])
        (nil)))
(insn 27 51 52 2 (set (reg:DF 22 xmm1 [orig:67 D.7097 ] [67])
        (minus:DF (reg:DF 22 xmm1 [orig:67 D.7097 ] [67])
            (reg:DF 21 xmm0 [orig:66 D.7097 ] [66]))) mABM.c:295 785 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:66 D.7097 ] [66])
        (nil)))
(insn 52 27 28 2 (set (reg:DF 21 xmm0 [orig:67 D.7097 ] [67])
        (reg:DF 22 xmm1 [orig:67 D.7097 ] [67])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:67 D.7097 ] [67])
        (nil)))
(insn 28 52 29 2 (set (reg:DF 21 xmm0)
        (reg:DF 21 xmm0 [orig:67 D.7097 ] [67])) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:67 D.7097 ] [67])
        (nil)))
(call_insn 29 28 30 2 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7f05a587a500 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) mABM.c:295 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S8 A64])
        (reg:DF 21 xmm0)) mABM.c:295 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 31 30 53 2 (set (reg:XF 8 st [orig:69 D.7098 ] [69])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S8 A64]))) mABM.c:295 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 68 [ D.7097 ])
        (nil)))
(insn 53 31 32 2 (set (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 63 [ D.7098 ])
        (nil)))
(insn 32 53 33 2 (set (reg:XF 8 st [orig:70 D.7098 ] [70])
        (mult:XF (reg:XF 8 st [orig:69 D.7098 ] [69])
            (reg:XF 9 st(1) [orig:63 D.7098 ] [63]))) mABM.c:295 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.7098 ] [63])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.7098 ] [69])
            (nil))))
(insn 33 32 34 2 (set (reg:XF 9 st(1) [83])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 mu+0 S16 A128])) mABM.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 37 2 (set (reg:XF 8 st [orig:71 D.7098 ] [71])
        (minus:XF (reg:XF 9 st(1) [83])
            (reg:XF 8 st [orig:70 D.7098 ] [70]))) mABM.c:295 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [83])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.7098 ] [70])
            (nil))))
(insn 37 34 41 2 (set (reg:XF 8 st [orig:72 <retval> ] [72])
        (reg:XF 8 st [orig:71 D.7098 ] [71])) mABM.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.7098 ] [71])
        (nil)))
(insn 41 37 44 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:72 <retval> ] [72])) mABM.c:296 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 <retval> ] [72])
        (nil)))
(insn 44 41 0 2 (use (reg/i:XF 8 st)) mABM.c:296 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _laplacian_change_vel (_laplacian_change_vel, funcdef_no=13, decl_uid=4193, cgraph_uid=13)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 76:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 96:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 114: point = 0
   Insn 111: point = 0
   Insn 107: point = 1
   Insn 104: point = 3
  BB 7
   Insn 102: point = 4
   Insn 101: point = 4
   Insn 100: point = 5
  BB 2
   Insn 117: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 6
   Insn 96: point = 6
  BB 5
   Insn 94: point = 6
   Insn 93: point = 6
   Insn 91: point = 7
   Insn 90: point = 9
   Insn 89: point = 11
   Insn 88: point = 13
   Insn 87: point = 15
   Insn 86: point = 17
   Insn 85: point = 19
   Insn 84: point = 20
   Insn 83: point = 20
   Insn 82: point = 21
   Insn 81: point = 23
   Insn 80: point = 24
   Insn 79: point = 26
  BB 3
   Insn 119: point = 27
   Insn 18: point = 27
   Insn 17: point = 27
   Insn 16: point = 28
   Insn 15: point = 29
   Insn 14: point = 29
   Insn 13: point = 30
   Insn 12: point = 31
   Insn 11: point = 32
  BB 4
   Insn 76: point = 33
   Insn 75: point = 33
   Insn 74: point = 34
   Insn 73: point = 36
   Insn 72: point = 38
   Insn 71: point = 39
   Insn 70: point = 41
   Insn 69: point = 43
   Insn 68: point = 45
   Insn 67: point = 47
   Insn 66: point = 48
   Insn 65: point = 50
   Insn 64: point = 52
   Insn 63: point = 54
   Insn 62: point = 56
   Insn 61: point = 58
   Insn 60: point = 59
   Insn 59: point = 59
   Insn 58: point = 60
   Insn 57: point = 62
   Insn 56: point = 63
   Insn 55: point = 65
   Insn 54: point = 66
   Insn 53: point = 68
   Insn 52: point = 70
   Insn 51: point = 72
   Insn 50: point = 74
   Insn 49: point = 75
   Insn 48: point = 77
   Insn 47: point = 79
   Insn 46: point = 81
   Insn 45: point = 83
   Insn 44: point = 85
   Insn 43: point = 86
   Insn 42: point = 86
   Insn 41: point = 87
   Insn 40: point = 89
   Insn 39: point = 90
   Insn 38: point = 92
   Insn 37: point = 93
   Insn 36: point = 95
   Insn 35: point = 97
   Insn 34: point = 99
   Insn 33: point = 100
   Insn 32: point = 102
   Insn 31: point = 104
   Insn 30: point = 106
   Insn 29: point = 108
   Insn 28: point = 110
   Insn 27: point = 111
   Insn 26: point = 111
   Insn 25: point = 112
   Insn 24: point = 114
   Insn 23: point = 115
   Insn 22: point = 117
 r59: [12..24]
 r60: [19..21]
 r61: [12..13]
 r62: [10..11]
 r63: [8..9]
 r64: [6..7]
 r65: [103..115]
 r66: [110..112]
 r67: [103..104]
 r68: [101..102]
 r69: [94..100]
 r70: [96..97]
 r71: [94..95]
 r72: [33..93]
 r73: [78..90]
 r74: [85..87]
 r75: [78..79]
 r76: [76..77]
 r77: [69..75]
 r78: [71..72]
 r79: [69..70]
 r80: [67..68]
 r81: [35..66]
 r82: [51..63]
 r83: [58..60]
 r84: [51..52]
 r85: [49..50]
 r86: [42..48]
 r87: [44..45]
 r88: [42..43]
 r89: [40..41]
 r90: [37..39]
 r91: [35..36]
 r92: [33..34]
 r93: [2..3]
 r94: [0..1]
 r95: [31..32]
 r96: [29..30]
 r97: [27..28]
 r98: [116..117]
 r99: [113..114]
 r100: [109..111] [105..106]
 r101: [107..108]
 r102: [98..99]
 r103: [91..92]
 r104: [88..89]
 r105: [84..86] [80..81]
 r106: [82..83]
 r107: [73..74]
 r108: [64..65]
 r109: [61..62]
 r110: [57..59] [53..54]
 r111: [55..56]
 r112: [46..47]
 r113: [37..38]
 r114: [25..26]
 r115: [22..23]
 r116: [18..20] [14..15]
 r117: [16..17]
 r118: [4..5]
Compressing live ranges: from 118 to 100 - 84%
Ranges after the compression:
 r59: [12..21]
 r60: [18..19]
 r61: [12..13]
 r62: [10..11]
 r63: [8..9]
 r64: [6..7]
 r65: [88..97]
 r66: [94..95]
 r67: [88..89]
 r68: [86..87]
 r69: [80..85]
 r70: [82..83]
 r71: [80..81]
 r72: [30..79]
 r73: [68..77]
 r74: [74..75]
 r75: [68..69]
 r76: [66..67]
 r77: [60..65]
 r78: [62..63]
 r79: [60..61]
 r80: [58..59]
 r81: [32..57]
 r82: [46..55]
 r83: [52..53]
 r84: [46..47]
 r85: [44..45]
 r86: [38..43]
 r87: [40..41]
 r88: [38..39]
 r89: [36..37]
 r90: [34..35]
 r91: [32..33]
 r92: [30..31]
 r93: [2..3]
 r94: [0..1]
 r95: [28..29]
 r96: [26..27]
 r97: [24..25]
 r98: [98..99]
 r99: [96..97]
 r100: [94..95] [90..91]
 r101: [92..93]
 r102: [84..85]
 r103: [78..79]
 r104: [76..77]
 r105: [74..75] [70..71]
 r106: [72..73]
 r107: [64..65]
 r108: [56..57]
 r109: [54..55]
 r110: [52..53] [48..49]
 r111: [50..51]
 r112: [42..43]
 r113: [34..35]
 r114: [22..23]
 r115: [20..21]
 r116: [18..19] [14..15]
 r117: [16..17]
 r118: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 80
changing reg in insn 82
changing reg in insn 85
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 23
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 75
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 53
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 58
changing reg in insn 61
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 104
changing reg in insn 107
changing reg in insn 107
changing reg in insn 111
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 28
changing reg in insn 27
changing reg in insn 26
changing reg in insn 31
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 64
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 85
changing reg in insn 84
changing reg in insn 83
changing reg in insn 88
changing reg in insn 86
changing reg in insn 85
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 100
changing reg in insn 101
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.


_laplacian_change_vel

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={51d,50u} r1={17d,19u,4e} r2={5d,3u} r4={4d,3u} r5={2d,1u} r6={1d,32u} r7={1d,13u} r8={5d,5u} r9={2d,1u} r10={2d,1u} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={28d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 299{164d,131u,4e} in 91{90 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:299 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 117 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:302 89 {*movsi_internal}
     (nil))
(jump_insn 117 7 118 2 (set (pc)
        (label_ref 97)) mABM.c:302 650 {jump}
     (nil)
 -> 97)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 118 117 99)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 95 96 97
(code_label 99 118 10 3 95 "" [1 uses])
(note 10 99 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:XF 0 ax [95])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S16 A128])) mABM.c:303 131 {*movxf_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [95])) mABM.c:303 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [95])
        (nil)))
(insn 13 12 14 3 (set (reg:XF 0 ax [96])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S16 A128])) mABM.c:303 131 {*movxf_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [96])) mABM.c:303 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [96])
        (nil)))
(call_insn 15 14 16 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_extract_from_dist_laplace") [flags 0x3]  <function_decl 0x7f05a56eac00 _extract_from_dist_laplace>) [0 _extract_from_dist_laplace S1 A8])
            (const_int 32 [0x20]))) mABM.c:303 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 16 15 17 3 (set (reg:XF 8 st [97])
        (reg:XF 8 st)) mABM.c:303 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 17 16 18 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])
        (reg:XF 8 st [97])) mABM.c:303 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [97])
        (nil)))
(insn 18 17 119 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:304 89 {*movsi_internal}
     (nil))
(jump_insn 119 18 120 3 (set (pc)
        (label_ref 77)) mABM.c:304 650 {jump}
     (nil)
 -> 77)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 92)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113
(code_label 92 120 21 4 94 "" [1 uses])
(note 21 92 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 2 cx [orig:65 D.7099 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [98]) [0 *f_7(D)+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 24 23 25 4 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 1 dx [orig:66 D.7100 ] [66])
        (sign_extend:DI (reg:SI 0 ax [99]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(insn 26 25 27 4 (set (reg:DI 0 ax [100])
        (reg:DI 1 dx [orig:66 D.7100 ] [66])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [100])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 0 ax [100])
                (plus:DI (reg:DI 0 ax [100])
                    (reg:DI 1 dx [orig:66 D.7100 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.7100 ] [66])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:66 D.7100 ] [66])
                (const_int 5 [0x5]))
            (nil))))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 30 29 31 4 (set (reg:DI 0 ax [100])
        (reg:DI 0 ax [101])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 0 ax [orig:67 D.7100 ] [67])
        (reg:DI 0 ax [100])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 32 31 33 4 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.7099 ] [68])
                (plus:DI (reg:DI 0 ax [orig:67 D.7100 ] [67])
                    (reg/f:DI 2 cx [orig:65 D.7099 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.7100 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:65 D.7099 ] [65])
            (nil))))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:69 D.7102 ] [69])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:68 D.7099 ] [68])
                (const_int 24 [0x18])) [0 _17->vel+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7099 ] [68])
        (nil)))
(insn 34 33 35 4 (set (reg:SI 1 dx [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 1 dx [orig:70 D.7100 ] [70])
        (sign_extend:DI (reg:SI 1 dx [102]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [102])
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:71 D.7100 ] [71])
                (ashift:DI (reg:DI 1 dx [orig:70 D.7100 ] [70])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.7100 ] [70])
        (nil)))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 2 cx [orig:72 D.7102 ] [72])
                (plus:DI (reg/f:DI 0 ax [orig:69 D.7102 ] [69])
                    (reg:DI 1 dx [orig:71 D.7100 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.7100 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7102 ] [69])
            (nil))))
(insn 38 37 39 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 4 si [orig:73 D.7099 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [103]) [0 *f_7(D)+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (nil)))
(insn 40 39 41 4 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 1 dx [orig:74 D.7100 ] [74])
        (sign_extend:DI (reg:SI 0 ax [104]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [104])
        (nil)))
(insn 42 41 43 4 (set (reg:DI 0 ax [105])
        (reg:DI 1 dx [orig:74 D.7100 ] [74])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [105])
                (ashift:DI (reg:DI 0 ax [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg:DI 0 ax [105])
                    (reg:DI 1 dx [orig:74 D.7100 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7100 ] [74])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:74 D.7100 ] [74])
                (const_int 5 [0x5]))
            (nil))))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 0 ax [106])
                (ashift:DI (reg:DI 0 ax [105])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 46 45 47 4 (set (reg:DI 0 ax [105])
        (reg:DI 0 ax [106])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:75 D.7100 ] [75])
        (reg:DI 0 ax [105])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7099 ] [76])
                (plus:DI (reg:DI 0 ax [orig:75 D.7100 ] [75])
                    (reg/f:DI 4 si [orig:73 D.7099 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.7100 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:73 D.7099 ] [73])
            (nil))))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [orig:77 D.7102 ] [77])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:76 D.7099 ] [76])
                (const_int 24 [0x18])) [0 _25->vel+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7099 ] [76])
        (nil)))
(insn 50 49 51 4 (set (reg:SI 1 dx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 1 dx [orig:78 D.7100 ] [78])
        (sign_extend:DI (reg:SI 1 dx [107]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [107])
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 1 dx [orig:79 D.7100 ] [79])
                (ashift:DI (reg:DI 1 dx [orig:78 D.7100 ] [78])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.7100 ] [78])
        (nil)))
(insn 53 52 54 4 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.7102 ] [80])
                (plus:DI (reg/f:DI 0 ax [orig:77 D.7102 ] [77])
                    (reg:DI 1 dx [orig:79 D.7100 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.7100 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7102 ] [77])
            (nil))))
(insn 54 53 55 4 (set (reg:XF 9 st(1) [orig:81 D.7103 ] [81])
        (mem:XF (reg/f:DI 0 ax [orig:80 D.7102 ] [80]) [0 *_29+0 S16 A128])) mABM.c:304 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.7102 ] [80])
        (nil)))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 4 si [orig:82 D.7099 ] [82])
        (mem/f:DI (reg/f:DI 0 ax [108]) [0 *f_7(D)+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 57 56 58 4 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:DI 1 dx [orig:83 D.7100 ] [83])
        (sign_extend:DI (reg:SI 0 ax [109]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [109])
        (nil)))
(insn 59 58 60 4 (set (reg:DI 0 ax [110])
        (reg:DI 1 dx [orig:83 D.7100 ] [83])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 0 ax [110])
                (ashift:DI (reg:DI 0 ax [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (nil))
(insn 61 60 62 4 (parallel [
            (set (reg:DI 0 ax [110])
                (plus:DI (reg:DI 0 ax [110])
                    (reg:DI 1 dx [orig:83 D.7100 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7100 ] [83])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:83 D.7100 ] [83])
                (const_int 5 [0x5]))
            (nil))))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 0 ax [111])
                (ashift:DI (reg:DI 0 ax [110])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 63 62 64 4 (set (reg:DI 0 ax [110])
        (reg:DI 0 ax [111])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:84 D.7100 ] [84])
        (reg:DI 0 ax [110])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 65 64 66 4 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7099 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 D.7100 ] [84])
                    (reg/f:DI 4 si [orig:82 D.7099 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:84 D.7100 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:82 D.7099 ] [82])
            (nil))))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [orig:86 D.7102 ] [86])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:85 D.7099 ] [85])
                (const_int 24 [0x18])) [0 _34->vel+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7099 ] [85])
        (nil)))
(insn 67 66 68 4 (set (reg:SI 1 dx [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:87 D.7100 ] [87])
        (sign_extend:DI (reg:SI 1 dx [112]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [112])
        (nil)))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.7100 ] [88])
                (ashift:DI (reg:DI 1 dx [orig:87 D.7100 ] [87])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.7100 ] [87])
        (nil)))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.7102 ] [89])
                (plus:DI (reg/f:DI 0 ax [orig:86 D.7102 ] [86])
                    (reg:DI 1 dx [orig:88 D.7100 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.7100 ] [88])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7102 ] [86])
            (nil))))
(insn 71 70 72 4 (set (reg:XF 10 st(2) [orig:90 D.7103 ] [90])
        (mem:XF (reg/f:DI 0 ax [orig:89 D.7102 ] [89]) [0 *_38+0 S16 A128])) mABM.c:304 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.7102 ] [89])
        (nil)))
(insn 72 71 73 4 (set (reg:XF 8 st [113])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])) mABM.c:304 131 {*movxf_internal_rex64}
     (nil))
(insn 73 72 74 4 (set (reg:XF 8 st [orig:91 D.7103 ] [91])
        (mult:XF (reg:XF 8 st [113])
            (reg:XF 10 st(2) [orig:90 D.7103 ] [90]))) mABM.c:304 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [113])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:90 D.7103 ] [90])
            (nil))))
(insn 74 73 75 4 (set (reg:XF 8 st [orig:92 D.7103 ] [92])
        (plus:XF (reg:XF 8 st [orig:91 D.7103 ] [91])
            (reg:XF 9 st(1) [orig:81 D.7103 ] [81]))) mABM.c:304 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:91 D.7103 ] [91])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 D.7103 ] [81])
            (nil))))
(insn 75 74 76 4 (set (mem:XF (reg/f:DI 2 cx [orig:72 D.7102 ] [72]) [0 *_21+0 S16 A128])
        (reg:XF 8 st [orig:92 D.7103 ] [92])) mABM.c:304 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7103 ] [92])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:72 D.7102 ] [72])
            (nil))))
(insn 76 75 77 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 273 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 114 115 116 117
(code_label 77 76 78 5 93 "" [1 uses])
(note 78 77 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 5 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 5 (set (reg/f:DI 2 cx [orig:59 D.7099 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [114]) [0 *f_7(D)+0 S8 A64])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (nil)))
(insn 81 80 82 5 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:DI 1 dx [orig:60 D.7100 ] [60])
        (sign_extend:DI (reg:SI 0 ax [115]))) mABM.c:304 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [115])
        (nil)))
(insn 83 82 84 5 (set (reg:DI 0 ax [116])
        (reg:DI 1 dx [orig:60 D.7100 ] [60])) mABM.c:304 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 5 (parallel [
            (set (reg:DI 0 ax [116])
                (ashift:DI (reg:DI 0 ax [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (nil))
(insn 85 84 86 5 (parallel [
            (set (reg:DI 0 ax [116])
                (plus:DI (reg:DI 0 ax [116])
                    (reg:DI 1 dx [orig:60 D.7100 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7100 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.7100 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 86 85 87 5 (parallel [
            (set (reg:DI 0 ax [117])
                (ashift:DI (reg:DI 0 ax [116])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 87 86 88 5 (set (reg:DI 0 ax [116])
        (reg:DI 0 ax [117])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [117])
        (nil)))
(insn 88 87 89 5 (set (reg:DI 0 ax [orig:61 D.7100 ] [61])
        (reg:DI 0 ax [116])) mABM.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 89 88 90 5 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7099 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.7100 ] [61])
                    (reg/f:DI 2 cx [orig:59 D.7099 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7100 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.7099 ] [59])
            (nil))))
(insn 90 89 91 5 (set (reg:SI 0 ax [orig:63 D.7101 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:62 D.7099 ] [62])
                (const_int 4 [0x4])) [0 _11->n_nvp+0 S4 A32])) mABM.c:304 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7099 ] [62])
        (nil)))
(insn 91 90 93 5 (parallel [
            (set (reg:SI 0 ax [orig:64 D.7101 ] [64])
                (plus:SI (reg:SI 0 ax [orig:63 D.7101 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:304 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.7101 ] [63])
        (nil)))
(insn 93 91 94 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:64 D.7101 ] [64])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32]))) mABM.c:304 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7101 ] [64])
        (nil)))
(jump_insn 94 93 95 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) mABM.c:304 612 {*jcc_1}
     (nil)
 -> 92)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:302 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118
(code_label 97 96 98 7 92 "" [1 uses])
(note 98 97 100 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 100 98 101 7 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:302 89 {*movsi_internal}
     (nil))
(insn 101 100 102 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [118])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:302 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (nil)))
(jump_insn 102 101 103 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) mABM.c:302 612 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 93 94
(note 103 102 104 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 107 8 (set (reg:SI 0 ax [orig:93 D.7101 ] [93])
        (const_int 1 [0x1])) mABM.c:306 89 {*movsi_internal}
     (nil))
(insn 107 104 111 8 (set (reg:SI 0 ax [orig:94 <retval> ] [94])
        (reg:SI 0 ax [orig:93 D.7101 ] [93])) mABM.c:306 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.7101 ] [93])
        (nil)))
(insn 111 107 114 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:94 <retval> ] [94])) mABM.c:307 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 <retval> ] [94])
        (nil)))
(insn 114 111 0 8 (use (reg/i:SI 0 ax)) mABM.c:307 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _sort_ready (_sort_ready, funcdef_no=14, decl_uid=4206, cgraph_uid=14)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 68:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=127 from oldreg=103, assigning class DIREG to r127
      Creating newreg=128 from oldreg=105, assigning class CREG to r128
   68: {r128:DI=0;r127:DI=r128:DI<<0x3+r127:DI;r104:DI=r128:DI<<0x3+r104:DI;[r127:DI]=[r104:DI];use r128:DI;}
      REG_UNUSED r105:DI
      REG_UNUSED r104:DI
      REG_UNUSED r103:DI
    Inserting insn reload before:
  148: r127:DI=r103:DI
  149: r128:DI=r105:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 94:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=129 from oldreg=114, assigning class DIREG to r129
      Creating newreg=130 from oldreg=116, assigning class CREG to r130
   94: {r130:DI=0;r129:DI=r130:DI<<0x3+r129:DI;r115:DI=r130:DI<<0x3+r115:DI;[r129:DI]=[r115:DI];use r130:DI;}
      REG_UNUSED r116:DI
      REG_UNUSED r115:DI
      REG_UNUSED r114:DI
    Inserting insn reload before:
  150: r129:DI=r114:DI
  151: r130:DI=r116:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 109:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=131 from oldreg=121, assigning class DIREG to r131
      Creating newreg=132 from oldreg=123, assigning class CREG to r132
  109: {r132:DI=0;r131:DI=r132:DI<<0x3+r131:DI;r122:DI=r132:DI<<0x3+r122:DI;[r131:DI]=[r122:DI];use r132:DI;}
      REG_UNUSED r123:DI
      REG_UNUSED r122:DI
      REG_UNUSED r121:DI
    Inserting insn reload before:
  152: r131:DI=r121:DI
  153: r132:DI=r123:DI

          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 112:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 121:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 139: point = 0
   Insn 136: point = 0
   Insn 132: point = 1
   Insn 129: point = 3
  BB 11
   Insn 127: point = 4
   Insn 126: point = 4
   Insn 125: point = 5
  BB 2
   Insn 142: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 10
   Insn 121: point = 6
  BB 4
   Insn 144: point = 6
  BB 9
   Insn 118: point = 6
   Insn 117: point = 6
   Insn 116: point = 7
  BB 5
   Insn 146: point = 8
   Insn 35: point = 8
   Insn 34: point = 9
   Insn 33: point = 11
  BB 3
   Insn 24: point = 12
   Insn 23: point = 12
   Insn 22: point = 13
   Insn 21: point = 15
   Insn 20: point = 17
   Insn 19: point = 19
   Insn 18: point = 21
   Insn 17: point = 23
   Insn 16: point = 24
   Insn 15: point = 24
   Insn 14: point = 25
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 11: point = 30
  BB 8
   Insn 112: point = 31
  BB 7
   Insn 109: point = 31
   Insn 153: point = 32
	Hard reg 0 is preferable by r132 with profit 1
   Insn 152: point = 34
	Hard reg 1 is preferable by r131 with profit 1
   Insn 108: point = 36
   Insn 107: point = 37
   Insn 106: point = 38
   Insn 105: point = 40
   Insn 104: point = 42
   Insn 103: point = 44
   Insn 102: point = 46
   Insn 101: point = 48
   Insn 100: point = 49
   Insn 99: point = 49
   Insn 98: point = 50
   Insn 97: point = 52
   Insn 96: point = 53
   Insn 95: point = 55
   Insn 94: point = 56
   Insn 151: point = 57
	Hard reg 0 is preferable by r130 with profit 1
   Insn 150: point = 59
	Hard reg 1 is preferable by r129 with profit 1
   Insn 93: point = 61
   Insn 92: point = 62
   Insn 91: point = 64
   Insn 90: point = 66
   Insn 89: point = 68
   Insn 88: point = 70
   Insn 87: point = 72
   Insn 86: point = 74
   Insn 85: point = 75
   Insn 84: point = 75
   Insn 83: point = 76
   Insn 82: point = 78
   Insn 81: point = 79
   Insn 80: point = 81
   Insn 79: point = 82
   Insn 78: point = 84
   Insn 77: point = 86
   Insn 76: point = 88
   Insn 75: point = 90
   Insn 74: point = 91
   Insn 73: point = 91
   Insn 72: point = 92
   Insn 71: point = 94
   Insn 70: point = 95
   Insn 69: point = 97
   Insn 68: point = 98
   Insn 149: point = 99
	Hard reg 0 is preferable by r128 with profit 1
   Insn 148: point = 101
	Hard reg 1 is preferable by r127 with profit 1
   Insn 67: point = 103
   Insn 66: point = 104
   Insn 65: point = 106
   Insn 64: point = 107
   Insn 63: point = 109
   Insn 62: point = 111
   Insn 61: point = 113
   Insn 60: point = 115
   Insn 59: point = 116
   Insn 58: point = 116
   Insn 57: point = 117
   Insn 56: point = 119
   Insn 55: point = 120
   Insn 54: point = 122
  BB 6
   Insn 52: point = 123
   Insn 51: point = 123
   Insn 50: point = 124
   Insn 49: point = 126
   Insn 48: point = 128
   Insn 47: point = 130
   Insn 46: point = 132
   Insn 45: point = 134
   Insn 44: point = 135
   Insn 43: point = 135
   Insn 42: point = 136
   Insn 41: point = 138
   Insn 40: point = 139
   Insn 39: point = 141
 r59: [16..28]
 r60: [23..25]
 r61: [16..17]
 r62: [14..15]
 r63: [12..13]
 r64: [127..139]
 r65: [134..136]
 r66: [127..128]
 r67: [125..126]
 r68: [123..124]
 r69: [108..120]
 r70: [115..117]
 r71: [108..109]
 r72: [105..107]
 r73: [83..95]
 r74: [90..92]
 r75: [83..84]
 r76: [65..82]
 r77: [67..79]
 r78: [74..76]
 r79: [67..68]
 r80: [63..66]
 r81: [41..53]
 r82: [48..50]
 r83: [41..42]
 r84: [39..40]
 r85: [2..3]
 r86: [0..1]
 r87: [29..30]
 r88: [26..27]
 r89: [22..24] [18..19]
 r90: [20..21]
 r93: [8..9]
 r94: [10..11]
 r95: [140..141]
 r96: [137..138]
 r97: [133..135] [129..130]
 r98: [131..132]
 r99: [121..122]
 r100: [118..119]
 r101: [114..116] [110..111]
 r102: [112..113]
 r103: [102..106]
 r104: [98..104]
 r105: [100..103]
 r106: [96..97]
 r107: [93..94]
 r108: [89..91] [85..86]
 r109: [87..88]
 r110: [80..81]
 r111: [77..78]
 r112: [73..75] [69..70]
 r113: [71..72]
 r114: [60..64]
 r115: [56..62]
 r116: [58..61]
 r117: [54..55]
 r118: [51..52]
 r119: [47..49] [43..44]
 r120: [45..46]
 r121: [35..38]
 r122: [31..37]
 r123: [33..36]
 r124: [6..7]
 r125: [4..5]
 r127: [98..101]
 r128: [98..99]
 r129: [56..59]
 r130: [56..57]
 r131: [31..34]
 r132: [31..32]
Compressing live ranges: from 142 to 118 - 83%
Ranges after the compression:
 r59: [16..25]
 r60: [22..23]
 r61: [16..17]
 r62: [14..15]
 r63: [12..13]
 r64: [106..115]
 r65: [112..113]
 r66: [106..107]
 r67: [104..105]
 r68: [102..103]
 r69: [90..99]
 r70: [96..97]
 r71: [90..91]
 r72: [88..89]
 r73: [70..79]
 r74: [76..77]
 r75: [70..71]
 r76: [56..69]
 r77: [58..67]
 r78: [64..65]
 r79: [58..59]
 r80: [54..57]
 r81: [36..45]
 r82: [42..43]
 r83: [36..37]
 r84: [34..35]
 r85: [2..3]
 r86: [0..1]
 r87: [26..27]
 r88: [24..25]
 r89: [22..23] [18..19]
 r90: [20..21]
 r93: [8..9]
 r94: [10..11]
 r95: [116..117]
 r96: [114..115]
 r97: [112..113] [108..109]
 r98: [110..111]
 r99: [100..101]
 r100: [98..99]
 r101: [96..97] [92..93]
 r102: [94..95]
 r103: [86..89]
 r104: [82..87]
 r105: [84..87]
 r106: [80..81]
 r107: [78..79]
 r108: [76..77] [72..73]
 r109: [74..75]
 r110: [68..69]
 r111: [66..67]
 r112: [64..65] [60..61]
 r113: [62..63]
 r114: [52..55]
 r115: [48..53]
 r116: [50..53]
 r117: [46..47]
 r118: [44..45]
 r119: [42..43] [38..39]
 r120: [40..41]
 r121: [32..33]
 r122: [28..33]
 r123: [30..33]
 r124: [6..7]
 r125: [4..5]
 r127: [82..85]
 r128: [82..83]
 r129: [48..51]
 r130: [48..49]
 r131: [28..31]
 r132: [28..29]
	 Assigning to 127 (cl=DIREG, orig=103, freq=2, tfirst=127, tfreq=2)...
	   Assign 5 to reload r127 (freq=2)
	 Assigning to 128 (cl=CREG, orig=105, freq=2, tfirst=128, tfreq=2)...
	   Assign 2 to reload r128 (freq=2)
	 Assigning to 129 (cl=DIREG, orig=114, freq=2, tfirst=129, tfreq=2)...
	   Assign 5 to reload r129 (freq=2)
	 Assigning to 130 (cl=CREG, orig=116, freq=2, tfirst=130, tfreq=2)...
	   Assign 2 to reload r130 (freq=2)
	 Assigning to 131 (cl=DIREG, orig=121, freq=2, tfirst=131, tfreq=2)...
	   Assign 5 to reload r131 (freq=2)
	 Assigning to 132 (cl=CREG, orig=123, freq=2, tfirst=132, tfreq=2)...
	   Assign 2 to reload r132 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=84, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=68, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 70
changing reg in insn 79
changing reg in insn 72
changing reg in insn 75
changing reg in insn 73
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 91
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 84
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 99
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 129
changing reg in insn 132
changing reg in insn 132
changing reg in insn 136
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 34
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 48
changing reg in insn 46
changing reg in insn 45
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 63
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 78
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 88
changing reg in insn 86
changing reg in insn 85
changing reg in insn 84
changing reg in insn 89
changing reg in insn 87
changing reg in insn 86
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 94
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 104
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 109
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 108
changing reg in insn 116
changing reg in insn 117
changing reg in insn 125
changing reg in insn 126
starting the processing of deferred insns
ending the processing of deferred insns


_sort_ready

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={66d,66u} r1={10d,15u,6e} r2={13d,15u} r4={8d,8u} r5={7d,7u} r6={1d,39u} r7={1d,12u} r17={33d,4u} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 324{150d,167u,7e} in 111{111 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:310 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:310 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 142 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:314 89 {*movsi_internal}
     (nil))
(jump_insn 142 7 143 2 (set (pc)
        (label_ref 122)) mABM.c:314 650 {jump}
     (nil)
 -> 122)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 143 142 124)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 87 88 89 90
(code_label 124 143 10 3 104 "" [1 uses])
(note 10 124 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:315 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 2 cx [orig:59 D.7104 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [87]) [0 *f_5(D)+0 S8 A64])) mABM.c:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])) mABM.c:315 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:60 D.7105 ] [60])
        (sign_extend:DI (reg:SI 0 ax [88]))) mABM.c:315 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(insn 15 14 16 3 (set (reg:DI 0 ax [89])
        (reg:DI 1 dx [orig:60 D.7105 ] [60])) mABM.c:315 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [89])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:315 513 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [89])
                (plus:DI (reg:DI 0 ax [89])
                    (reg:DI 1 dx [orig:60 D.7105 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:315 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7105 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.7105 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [90])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:315 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [89])
        (reg:DI 0 ax [90])) mABM.c:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:61 D.7105 ] [61])
        (reg:DI 0 ax [89])) mABM.c:315 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7104 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.7105 ] [61])
                    (reg/f:DI 2 cx [orig:59 D.7104 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:315 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7105 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.7104 ] [59])
            (nil))))
(insn 22 21 23 3 (set (reg:SI 0 ax [orig:63 D.7106 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:62 D.7104 ] [62])
                (const_int 40 [0x28])) [0 _9->ready+0 S4 A64])) mABM.c:315 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7104 ] [62])
        (nil)))
(insn 23 22 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.7106 ] [63])
            (const_int 0 [0]))) mABM.c:315 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.7106 ] [63])
        (nil)))
(jump_insn 24 23 25 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) mABM.c:315 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 25 24 144 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 144 25 145 4 (set (pc)
        (label_ref 119)) mABM.c:315 650 {jump}
     (nil)
 -> 119)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 145 144 28)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94
(code_label 28 145 29 5 99 "" [1 uses])
(note 29 28 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 29 34 5 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])) mABM.c:316 89 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg:SI 0 ax [93])
                (plus:SI (reg:SI 0 ax [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [94])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 35 34 146 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])
        (reg:SI 0 ax [93])) mABM.c:316 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [93])
        (nil)))
(jump_insn 146 35 147 5 (set (pc)
        (label_ref 113)) mABM.c:316 650 {jump}
     (nil)
 -> 113)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 115)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 95 96 97 98
(code_label 115 147 38 6 103 "" [1 uses])
(note 38 115 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:316 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 6 (set (reg/f:DI 2 cx [orig:64 D.7104 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [95]) [0 *f_5(D)+0 S8 A64])) mABM.c:316 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (nil)))
(insn 41 40 42 6 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])) mABM.c:316 89 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 1 dx [orig:65 D.7105 ] [65])
        (sign_extend:DI (reg:SI 0 ax [96]))) mABM.c:316 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [96])
        (nil)))
(insn 43 42 44 6 (set (reg:DI 0 ax [97])
        (reg:DI 1 dx [orig:65 D.7105 ] [65])) mABM.c:316 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 513 {*ashldi3_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg:DI 0 ax [97])
                    (reg:DI 1 dx [orig:65 D.7105 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7105 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.7105 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 46 45 47 6 (parallel [
            (set (reg:DI 0 ax [98])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 47 46 48 6 (set (reg:DI 0 ax [97])
        (reg:DI 0 ax [98])) mABM.c:316 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 48 47 49 6 (set (reg:DI 0 ax [orig:66 D.7105 ] [66])
        (reg:DI 0 ax [97])) mABM.c:316 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 49 48 50 6 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.7104 ] [67])
                (plus:DI (reg:DI 0 ax [orig:66 D.7105 ] [66])
                    (reg/f:DI 2 cx [orig:64 D.7104 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.7105 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:64 D.7104 ] [64])
            (nil))))
(insn 50 49 51 6 (set (reg:SI 0 ax [orig:68 D.7106 ] [68])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:67 D.7104 ] [67])
                (const_int 40 [0x28])) [0 _15->ready+0 S4 A64])) mABM.c:316 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7104 ] [67])
        (nil)))
(insn 51 50 52 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:68 D.7106 ] [68])
            (const_int 0 [0]))) mABM.c:316 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.7106 ] [68])
        (nil)))
(jump_insn 52 51 53 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) mABM.c:316 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:317 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 7 (set (reg/f:DI 2 cx [orig:69 D.7104 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [99]) [0 *f_5(D)+0 S8 A64])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 56 55 57 7 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])) mABM.c:317 89 {*movsi_internal}
     (nil))
(insn 57 56 58 7 (set (reg:DI 1 dx [orig:70 D.7105 ] [70])
        (sign_extend:DI (reg:SI 0 ax [100]))) mABM.c:317 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [100])
        (nil)))
(insn 58 57 59 7 (set (reg:DI 0 ax [101])
        (reg:DI 1 dx [orig:70 D.7105 ] [70])) mABM.c:317 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 7 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:317 513 {*ashldi3_1}
     (nil))
(insn 60 59 61 7 (parallel [
            (set (reg:DI 0 ax [101])
                (plus:DI (reg:DI 0 ax [101])
                    (reg:DI 1 dx [orig:70 D.7105 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:317 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.7105 ] [70])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:70 D.7105 ] [70])
                (const_int 5 [0x5]))
            (nil))))
(insn 61 60 62 7 (parallel [
            (set (reg:DI 0 ax [102])
                (ashift:DI (reg:DI 0 ax [101])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:317 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 62 61 63 7 (set (reg:DI 0 ax [101])
        (reg:DI 0 ax [102])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 63 62 64 7 (set (reg:DI 0 ax [orig:71 D.7105 ] [71])
        (reg:DI 0 ax [101])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 64 63 65 7 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.7104 ] [72])
                (plus:DI (reg:DI 0 ax [orig:71 D.7105 ] [71])
                    (reg/f:DI 2 cx [orig:69 D.7104 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:317 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.7105 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:69 D.7104 ] [69])
            (nil))))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 1 dx [103])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:317 274 {*adddi_1}
     (nil))
(insn 66 65 67 7 (set (reg:DI 4 si [104])
        (reg/f:DI 0 ax [orig:72 D.7104 ] [72])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7104 ] [72])
        (nil)))
(insn 67 66 148 7 (set (reg:DI 0 ax [105])
        (const_int 20 [0x14])) mABM.c:317 87 {*movdi_internal_rex64}
     (nil))
(insn 148 67 149 7 (set (reg:DI 5 di [103])
        (reg:DI 1 dx [103])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [103])
        (nil)))
(insn 149 148 68 7 (set (reg:DI 2 cx [105])
        (reg:DI 0 ax [105])) mABM.c:317 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 68 149 69 7 (parallel [
            (set (reg:DI 2 cx [105])
                (const_int 0 [0]))
            (set (reg:DI 5 di [103])
                (plus:DI (ashift:DI (reg:DI 2 cx [105])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [103])))
            (set (reg:DI 4 si [104])
                (plus:DI (ashift:DI (reg:DI 2 cx [105])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [104])))
            (set (mem/c:BLK (reg:DI 5 di [103]) [0 comodo+0 S160 A128])
                (mem:BLK (reg:DI 4 si [104]) [0 *_20+0 S160 A128]))
            (use (reg:DI 2 cx [105]))
        ]) mABM.c:317 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [105])
        (expr_list:REG_UNUSED (reg:DI 5 di [103])
            (expr_list:REG_UNUSED (reg:DI 4 si [104])
                (nil)))))
(insn 69 68 70 7 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:318 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 7 (set (reg/f:DI 2 cx [orig:73 D.7104 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [106]) [0 *f_5(D)+0 S8 A64])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 71 70 72 7 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])) mABM.c:318 89 {*movsi_internal}
     (nil))
(insn 72 71 73 7 (set (reg:DI 1 dx [orig:74 D.7105 ] [74])
        (sign_extend:DI (reg:SI 0 ax [107]))) mABM.c:318 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 73 72 74 7 (set (reg:DI 0 ax [108])
        (reg:DI 1 dx [orig:74 D.7105 ] [74])) mABM.c:318 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 7 (parallel [
            (set (reg:DI 0 ax [108])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 513 {*ashldi3_1}
     (nil))
(insn 75 74 76 7 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg:DI 0 ax [108])
                    (reg:DI 1 dx [orig:74 D.7105 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7105 ] [74])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:74 D.7105 ] [74])
                (const_int 5 [0x5]))
            (nil))))
(insn 76 75 77 7 (parallel [
            (set (reg:DI 0 ax [109])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 77 76 78 7 (set (reg:DI 0 ax [108])
        (reg:DI 0 ax [109])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(insn 78 77 79 7 (set (reg:DI 0 ax [orig:75 D.7105 ] [75])
        (reg:DI 0 ax [108])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 79 78 80 7 (parallel [
            (set (reg/f:DI 4 si [orig:76 D.7104 ] [76])
                (plus:DI (reg/f:DI 2 cx [orig:73 D.7104 ] [73])
                    (reg:DI 0 ax [orig:75 D.7105 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.7105 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:73 D.7104 ] [73])
            (nil))))
(insn 80 79 81 7 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:318 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 7 (set (reg/f:DI 2 cx [orig:77 D.7104 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [110]) [0 *f_5(D)+0 S8 A64])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 82 81 83 7 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])) mABM.c:318 89 {*movsi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:DI 1 dx [orig:78 D.7105 ] [78])
        (sign_extend:DI (reg:SI 0 ax [111]))) mABM.c:318 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [111])
        (nil)))
(insn 84 83 85 7 (set (reg:DI 0 ax [112])
        (reg:DI 1 dx [orig:78 D.7105 ] [78])) mABM.c:318 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 0 ax [112])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 513 {*ashldi3_1}
     (nil))
(insn 86 85 87 7 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg:DI 0 ax [112])
                    (reg:DI 1 dx [orig:78 D.7105 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.7105 ] [78])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:78 D.7105 ] [78])
                (const_int 5 [0x5]))
            (nil))))
(insn 87 86 88 7 (parallel [
            (set (reg:DI 0 ax [113])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 88 87 89 7 (set (reg:DI 0 ax [112])
        (reg:DI 0 ax [113])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 89 88 90 7 (set (reg:DI 0 ax [orig:79 D.7105 ] [79])
        (reg:DI 0 ax [112])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 90 89 91 7 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.7104 ] [80])
                (plus:DI (reg:DI 0 ax [orig:79 D.7105 ] [79])
                    (reg/f:DI 2 cx [orig:77 D.7104 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:318 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.7105 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:77 D.7104 ] [77])
            (nil))))
(insn 91 90 92 7 (set (reg:DI 1 dx [114])
        (reg/f:DI 4 si [orig:76 D.7104 ] [76])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:76 D.7104 ] [76])
        (nil)))
(insn 92 91 93 7 (set (reg:DI 4 si [115])
        (reg/f:DI 0 ax [orig:80 D.7104 ] [80])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.7104 ] [80])
        (nil)))
(insn 93 92 150 7 (set (reg:DI 0 ax [116])
        (const_int 20 [0x14])) mABM.c:318 87 {*movdi_internal_rex64}
     (nil))
(insn 150 93 151 7 (set (reg:DI 5 di [114])
        (reg:DI 1 dx [114])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [114])
        (nil)))
(insn 151 150 94 7 (set (reg:DI 2 cx [116])
        (reg:DI 0 ax [116])) mABM.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 94 151 95 7 (parallel [
            (set (reg:DI 2 cx [116])
                (const_int 0 [0]))
            (set (reg:DI 5 di [114])
                (plus:DI (ashift:DI (reg:DI 2 cx [116])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [114])))
            (set (reg:DI 4 si [115])
                (plus:DI (ashift:DI (reg:DI 2 cx [116])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [115])))
            (set (mem:BLK (reg:DI 5 di [114]) [0 *_24+0 S160 A128])
                (mem:BLK (reg:DI 4 si [115]) [0 *_28+0 S160 A128]))
            (use (reg:DI 2 cx [116]))
        ]) mABM.c:318 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [116])
        (expr_list:REG_UNUSED (reg:DI 5 di [114])
            (expr_list:REG_UNUSED (reg:DI 4 si [115])
                (nil)))))
(insn 95 94 96 7 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 f+0 S8 A64])) mABM.c:319 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 7 (set (reg/f:DI 2 cx [orig:81 D.7104 ] [81])
        (mem/f:DI (reg/f:DI 0 ax [117]) [0 *f_5(D)+0 S8 A64])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 97 96 98 7 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])) mABM.c:319 89 {*movsi_internal}
     (nil))
(insn 98 97 99 7 (set (reg:DI 1 dx [orig:82 D.7105 ] [82])
        (sign_extend:DI (reg:SI 0 ax [118]))) mABM.c:319 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (nil)))
(insn 99 98 100 7 (set (reg:DI 0 ax [119])
        (reg:DI 1 dx [orig:82 D.7105 ] [82])) mABM.c:319 87 {*movdi_internal_rex64}
     (nil))
(insn 100 99 101 7 (parallel [
            (set (reg:DI 0 ax [119])
                (ashift:DI (reg:DI 0 ax [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:319 513 {*ashldi3_1}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg:DI 0 ax [119])
                (plus:DI (reg:DI 0 ax [119])
                    (reg:DI 1 dx [orig:82 D.7105 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:319 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.7105 ] [82])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:82 D.7105 ] [82])
                (const_int 5 [0x5]))
            (nil))))
(insn 102 101 103 7 (parallel [
            (set (reg:DI 0 ax [120])
                (ashift:DI (reg:DI 0 ax [119])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:319 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [119])
        (nil)))
(insn 103 102 104 7 (set (reg:DI 0 ax [119])
        (reg:DI 0 ax [120])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [120])
        (nil)))
(insn 104 103 105 7 (set (reg:DI 0 ax [orig:83 D.7105 ] [83])
        (reg:DI 0 ax [119])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [119])
        (nil)))
(insn 105 104 106 7 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.7104 ] [84])
                (plus:DI (reg:DI 0 ax [orig:83 D.7105 ] [83])
                    (reg/f:DI 2 cx [orig:81 D.7104 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:319 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:83 D.7105 ] [83])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:81 D.7104 ] [81])
            (nil))))
(insn 106 105 107 7 (set (reg:DI 1 dx [121])
        (reg/f:DI 0 ax [orig:84 D.7104 ] [84])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.7104 ] [84])
        (nil)))
(insn 107 106 108 7 (parallel [
            (set (reg:DI 4 si [122])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:319 274 {*adddi_1}
     (nil))
(insn 108 107 152 7 (set (reg:DI 0 ax [123])
        (const_int 20 [0x14])) mABM.c:319 87 {*movdi_internal_rex64}
     (nil))
(insn 152 108 153 7 (set (reg:DI 5 di [121])
        (reg:DI 1 dx [121])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [121])
        (nil)))
(insn 153 152 109 7 (set (reg:DI 2 cx [123])
        (reg:DI 0 ax [123])) mABM.c:319 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 109 153 110 7 (parallel [
            (set (reg:DI 2 cx [123])
                (const_int 0 [0]))
            (set (reg:DI 5 di [121])
                (plus:DI (ashift:DI (reg:DI 2 cx [123])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [121])))
            (set (reg:DI 4 si [122])
                (plus:DI (ashift:DI (reg:DI 2 cx [123])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [122])))
            (set (mem:BLK (reg:DI 5 di [121]) [0 *_32+0 S160 A128])
                (mem/c:BLK (reg:DI 4 si [122]) [0 comodo+0 S160 A128]))
            (use (reg:DI 2 cx [123]))
        ]) mABM.c:319 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [123])
        (expr_list:REG_UNUSED (reg:DI 5 di [121])
            (expr_list:REG_UNUSED (reg:DI 4 si [122])
                (nil)))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 110 109 111 8 102 "" [1 uses])
(note 111 110 112 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:316 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124
(code_label 113 112 114 9 101 "" [1 uses])
(note 114 113 116 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 116 114 117 9 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 j+0 S4 A32])) mABM.c:316 89 {*movsi_internal}
     (nil))
(insn 117 116 118 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [124])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -188 [0xffffffffffffff44])) [0 N_f+0 S4 A32]))) mABM.c:316 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [124])
        (nil)))
(jump_insn 118 117 119 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) mABM.c:316 612 {*jcc_1}
     (nil)
 -> 115)
;;  succ:       6
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 119 118 120 10 100 "" [1 uses])
(note 120 119 121 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:314 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125
(code_label 122 121 123 11 98 "" [1 uses])
(note 123 122 125 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 125 123 126 11 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 i+0 S4 A32])) mABM.c:314 89 {*movsi_internal}
     (nil))
(insn 126 125 127 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [125])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -188 [0xffffffffffffff44])) [0 N_f+0 S4 A32]))) mABM.c:314 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [125])
        (nil)))
(jump_insn 127 126 128 11 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) mABM.c:314 612 {*jcc_1}
     (nil)
 -> 124)
;;  succ:       3
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 85 86
(note 128 127 129 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 132 12 (set (reg:SI 0 ax [orig:85 D.7106 ] [85])
        (const_int 1 [0x1])) mABM.c:322 89 {*movsi_internal}
     (nil))
(insn 132 129 136 12 (set (reg:SI 0 ax [orig:86 <retval> ] [86])
        (reg:SI 0 ax [orig:85 D.7106 ] [85])) mABM.c:322 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.7106 ] [85])
        (nil)))
(insn 136 132 139 12 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:86 <retval> ] [86])) mABM.c:323 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:86 <retval> ] [86])
        (nil)))
(insn 139 136 0 12 (use (reg/i:SI 0 ax)) mABM.c:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _set_st_point (_set_st_point, funcdef_no=15, decl_uid=4221, cgraph_uid=15)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=544, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=512, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 547:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 10
	 Choosing alt 0 in insn 10:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 554:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 555:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 168:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 275:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 285:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 310:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 334:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 342:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 345:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 355
	 Choosing alt 0 in insn 355:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 370
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 386:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 389:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=393 from oldreg=347, assigning class DIREG to r393
      Creating newreg=394 from oldreg=349, assigning class CREG to r394
  389: {r394:DI=0;r393:DI=r394:DI<<0x3+r393:DI;r348:DI=r394:DI<<0x3+r348:DI;[r393:DI]=[r348:DI];use r394:DI;}
      REG_UNUSED r349:DI
      REG_UNUSED r348:DI
      REG_UNUSED r347:DI
    Inserting insn reload before:
  557: r393:DI=r347:DI
  558: r394:DI=r349:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 393:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=395 from oldreg=350, assigning class DIREG to r395
      Creating newreg=396 from oldreg=352, assigning class CREG to r396
  393: {r396:DI=0;r395:DI=r396:DI<<0x3+r395:DI;r351:DI=r396:DI<<0x3+r351:DI;[r395:DI]=[r351:DI];use r396:DI;}
      REG_UNUSED r352:DI
      REG_UNUSED r351:DI
      REG_UNUSED r350:DI
    Inserting insn reload before:
  559: r395:DI=r350:DI
  560: r396:DI=r352:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 405:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 406:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 409:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=397 from oldreg=357, assigning class DIREG to r397
      Creating newreg=398 from oldreg=359, assigning class CREG to r398
  409: {r398:DI=0;r397:DI=r398:DI<<0x3+r397:DI;r358:DI=r398:DI<<0x3+r358:DI;[r397:DI]=[r358:DI];use r398:DI;}
      REG_UNUSED r359:DI
      REG_UNUSED r358:DI
      REG_UNUSED r357:DI
    Inserting insn reload before:
  561: r397:DI=r357:DI
  562: r398:DI=r359:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 413:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=399 from oldreg=360, assigning class DIREG to r399
      Creating newreg=400 from oldreg=362, assigning class CREG to r400
  413: {r400:DI=0;r399:DI=r400:DI<<0x3+r399:DI;r361:DI=r400:DI<<0x3+r361:DI;[r399:DI]=[r361:DI];use r400:DI;}
      REG_UNUSED r362:DI
      REG_UNUSED r361:DI
      REG_UNUSED r360:DI
    Inserting insn reload before:
  563: r399:DI=r360:DI
  564: r400:DI=r362:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 426
	 Choosing alt 0 in insn 426:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 432:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 442:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 444:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 445:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 455
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 463:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 471:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 480
	 Choosing alt 0 in insn 480:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 482:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 485:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 492
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 494:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 498:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 508
	 Choosing alt 0 in insn 508:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 509:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 512:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 530: point = 0
   Insn 527: point = 0
   Insn 523: point = 1
   Insn 520: point = 3
  BB 18
   Insn 518: point = 4
   Insn 517: point = 4
   Insn 516: point = 5
  BB 2
   Insn 541: point = 6
   Insn 12: point = 6
   Insn 548: point = 6
   Insn 556: point = 7
   Insn 555: point = 8
   Insn 554: point = 8
   Insn 553: point = 9
   Insn 10: point = 9
   Insn 9: point = 11
   Insn 547: point = 12
   Insn 7: point = 14
   Insn 3: point = 15
   Insn 2: point = 15
  BB 17
   Insn 512: point = 15
  BB 7
   Insn 543: point = 15
   Insn 71: point = 15
   Insn 70: point = 16
   Insn 69: point = 18
   Insn 68: point = 20
   Insn 67: point = 22
   Insn 66: point = 24
   Insn 65: point = 25
   Insn 64: point = 25
   Insn 63: point = 26
   Insn 62: point = 28
   Insn 61: point = 29
   Insn 60: point = 31
  BB 16
   Insn 509: point = 32
   Insn 508: point = 33
   Insn 507: point = 35
   Insn 506: point = 37
   Insn 505: point = 39
   Insn 504: point = 41
   Insn 503: point = 42
   Insn 502: point = 42
   Insn 501: point = 43
   Insn 500: point = 45
   Insn 499: point = 46
   Insn 498: point = 48
  BB 15
   Insn 496: point = 49
   Insn 495: point = 49
   Insn 494: point = 50
   Insn 493: point = 52
   Insn 492: point = 54
   Insn 491: point = 56
   Insn 490: point = 58
   Insn 489: point = 60
   Insn 488: point = 62
   Insn 487: point = 63
   Insn 486: point = 63
   Insn 485: point = 64
   Insn 484: point = 66
   Insn 483: point = 67
   Insn 482: point = 69
   Insn 481: point = 70
   Insn 480: point = 72
   Insn 479: point = 74
   Insn 478: point = 76
   Insn 477: point = 78
   Insn 476: point = 80
   Insn 475: point = 81
   Insn 474: point = 81
   Insn 473: point = 82
   Insn 472: point = 84
   Insn 471: point = 85
   Insn 470: point = 87
  BB 14
   Insn 467: point = 88
   Insn 466: point = 88
   Insn 465: point = 88
   Insn 464: point = 88
   Insn 463: point = 89
   Insn 462: point = 90
   Insn 461: point = 90
   Insn 460: point = 90
   Insn 459: point = 90
   Insn 458: point = 91
   Insn 457: point = 92
   Insn 456: point = 93
   Insn 455: point = 95
   Insn 454: point = 97
   Insn 453: point = 99
   Insn 452: point = 101
   Insn 451: point = 103
   Insn 450: point = 104
   Insn 449: point = 104
   Insn 448: point = 105
   Insn 447: point = 107
   Insn 446: point = 108
   Insn 445: point = 110
   Insn 444: point = 111
   Insn 443: point = 112
   Insn 442: point = 113
   Insn 441: point = 115
   Insn 440: point = 117
   Insn 439: point = 119
   Insn 438: point = 121
   Insn 437: point = 122
   Insn 436: point = 122
   Insn 435: point = 123
   Insn 434: point = 125
   Insn 433: point = 126
   Insn 432: point = 128
   Insn 431: point = 129
   Insn 430: point = 129
   Insn 429: point = 129
   Insn 428: point = 129
   Insn 427: point = 130
   Insn 426: point = 132
   Insn 425: point = 134
   Insn 424: point = 136
   Insn 423: point = 138
   Insn 422: point = 140
   Insn 421: point = 141
   Insn 420: point = 141
   Insn 419: point = 142
   Insn 418: point = 144
   Insn 417: point = 145
   Insn 416: point = 147
   Insn 415: point = 148
   Insn 414: point = 148
   Insn 413: point = 148
   Insn 564: point = 149
	Hard reg 0 is preferable by r400 with profit 1
   Insn 563: point = 151
	Hard reg 1 is preferable by r399 with profit 1
   Insn 412: point = 153
   Insn 411: point = 154
   Insn 410: point = 156
   Insn 409: point = 157
   Insn 562: point = 158
	Hard reg 0 is preferable by r398 with profit 1
   Insn 561: point = 160
	Hard reg 1 is preferable by r397 with profit 1
   Insn 408: point = 162
   Insn 407: point = 163
   Insn 406: point = 164
   Insn 405: point = 165
   Insn 404: point = 167
   Insn 403: point = 169
   Insn 402: point = 171
   Insn 401: point = 173
   Insn 400: point = 174
   Insn 399: point = 174
   Insn 398: point = 175
   Insn 397: point = 177
   Insn 396: point = 178
   Insn 395: point = 180
   Insn 394: point = 181
   Insn 393: point = 181
   Insn 560: point = 182
	Hard reg 0 is preferable by r396 with profit 1
   Insn 559: point = 184
	Hard reg 1 is preferable by r395 with profit 1
   Insn 392: point = 186
   Insn 391: point = 187
   Insn 390: point = 189
   Insn 389: point = 190
   Insn 558: point = 191
	Hard reg 0 is preferable by r394 with profit 1
   Insn 557: point = 193
	Hard reg 1 is preferable by r393 with profit 1
   Insn 388: point = 195
   Insn 387: point = 196
   Insn 386: point = 197
   Insn 385: point = 198
   Insn 384: point = 200
   Insn 383: point = 202
   Insn 382: point = 204
   Insn 381: point = 206
   Insn 380: point = 207
   Insn 379: point = 207
   Insn 378: point = 208
   Insn 377: point = 210
   Insn 376: point = 211
   Insn 375: point = 213
  BB 13
   Insn 373: point = 214
   Insn 372: point = 214
   Insn 371: point = 215
   Insn 370: point = 217
   Insn 369: point = 219
   Insn 368: point = 221
   Insn 367: point = 223
   Insn 366: point = 225
   Insn 365: point = 226
   Insn 364: point = 226
   Insn 363: point = 227
   Insn 362: point = 229
   Insn 361: point = 230
   Insn 360: point = 232
  BB 12
   Insn 358: point = 233
   Insn 357: point = 233
   Insn 356: point = 234
   Insn 355: point = 236
   Insn 354: point = 238
   Insn 353: point = 240
   Insn 352: point = 242
   Insn 351: point = 244
   Insn 350: point = 245
   Insn 349: point = 245
   Insn 348: point = 246
   Insn 347: point = 248
   Insn 346: point = 249
   Insn 345: point = 251
  BB 10
   Insn 545: point = 252
   Insn 258: point = 252
   Insn 257: point = 253
   Insn 256: point = 255
   Insn 255: point = 257
   Insn 254: point = 259
   Insn 253: point = 261
   Insn 252: point = 263
   Insn 251: point = 264
   Insn 250: point = 264
   Insn 249: point = 265
   Insn 248: point = 267
   Insn 247: point = 268
   Insn 246: point = 270
   Insn 245: point = 271
   Insn 244: point = 273
   Insn 243: point = 275
   Insn 242: point = 277
   Insn 241: point = 279
   Insn 240: point = 280
   Insn 239: point = 280
   Insn 238: point = 281
   Insn 237: point = 283
   Insn 236: point = 284
   Insn 235: point = 286
  BB 11
   Insn 342: point = 287
   Insn 341: point = 288
   Insn 340: point = 289
   Insn 339: point = 289
   Insn 338: point = 290
   Insn 337: point = 291
   Insn 336: point = 292
   Insn 335: point = 293
   Insn 334: point = 294
   Insn 333: point = 296
   Insn 332: point = 298
   Insn 331: point = 300
   Insn 330: point = 302
   Insn 329: point = 304
   Insn 328: point = 305
   Insn 327: point = 305
   Insn 326: point = 306
   Insn 325: point = 308
   Insn 324: point = 309
   Insn 323: point = 311
   Insn 322: point = 312
   Insn 321: point = 314
   Insn 320: point = 316
   Insn 319: point = 318
   Insn 318: point = 320
   Insn 317: point = 322
   Insn 316: point = 323
   Insn 315: point = 323
   Insn 314: point = 324
   Insn 313: point = 326
   Insn 312: point = 327
   Insn 311: point = 329
   Insn 310: point = 330
   Insn 309: point = 332
   Insn 308: point = 334
   Insn 307: point = 336
   Insn 306: point = 338
   Insn 305: point = 340
   Insn 304: point = 341
   Insn 303: point = 341
   Insn 302: point = 342
   Insn 301: point = 344
   Insn 300: point = 345
   Insn 299: point = 347
   Insn 298: point = 348
   Insn 297: point = 350
   Insn 296: point = 352
   Insn 295: point = 354
   Insn 294: point = 356
   Insn 293: point = 358
   Insn 292: point = 359
   Insn 291: point = 359
   Insn 290: point = 360
   Insn 289: point = 362
   Insn 288: point = 363
   Insn 287: point = 365
   Insn 286: point = 366
   Insn 285: point = 368
   Insn 284: point = 370
   Insn 283: point = 372
   Insn 282: point = 374
   Insn 281: point = 376
   Insn 280: point = 378
   Insn 279: point = 379
   Insn 278: point = 379
   Insn 277: point = 380
   Insn 276: point = 382
   Insn 275: point = 383
   Insn 274: point = 385
   Insn 273: point = 386
   Insn 272: point = 388
   Insn 271: point = 390
   Insn 270: point = 392
   Insn 269: point = 394
   Insn 268: point = 395
   Insn 267: point = 395
   Insn 266: point = 396
   Insn 265: point = 398
   Insn 264: point = 399
   Insn 263: point = 401
  BB 9
   Insn 230: point = 402
   Insn 229: point = 402
   Insn 228: point = 403
  BB 8
   Insn 227: point = 405
   Insn 226: point = 405
   Insn 225: point = 406
   Insn 224: point = 407
   Insn 223: point = 409
   Insn 222: point = 411
   Insn 221: point = 413
   Insn 220: point = 415
   Insn 219: point = 417
   Insn 218: point = 418
   Insn 217: point = 418
   Insn 216: point = 419
   Insn 215: point = 421
   Insn 214: point = 422
   Insn 213: point = 424
   Insn 212: point = 425
   Insn 211: point = 426
   Insn 210: point = 428
   Insn 209: point = 430
   Insn 208: point = 432
   Insn 207: point = 434
   Insn 206: point = 436
   Insn 205: point = 437
   Insn 204: point = 437
   Insn 203: point = 438
   Insn 202: point = 440
   Insn 201: point = 441
   Insn 200: point = 443
   Insn 199: point = 444
   Insn 198: point = 445
   Insn 197: point = 447
   Insn 196: point = 449
   Insn 195: point = 451
   Insn 194: point = 453
   Insn 193: point = 455
   Insn 192: point = 457
   Insn 191: point = 458
   Insn 190: point = 460
   Insn 189: point = 462
   Insn 188: point = 464
   Insn 187: point = 466
   Insn 186: point = 468
   Insn 185: point = 469
   Insn 184: point = 469
   Insn 183: point = 470
   Insn 182: point = 472
   Insn 181: point = 473
   Insn 180: point = 475
   Insn 179: point = 476
   Insn 178: point = 478
   Insn 177: point = 480
   Insn 176: point = 482
   Insn 175: point = 484
   Insn 174: point = 485
   Insn 173: point = 485
   Insn 172: point = 486
   Insn 171: point = 488
   Insn 170: point = 489
   Insn 169: point = 491
   Insn 168: point = 492
   Insn 167: point = 493
   Insn 166: point = 495
   Insn 165: point = 497
   Insn 164: point = 499
   Insn 163: point = 501
   Insn 162: point = 503
   Insn 161: point = 505
   Insn 160: point = 506
   Insn 159: point = 508
   Insn 158: point = 510
   Insn 157: point = 512
   Insn 156: point = 514
   Insn 155: point = 516
   Insn 154: point = 517
   Insn 153: point = 517
   Insn 152: point = 518
   Insn 151: point = 520
   Insn 150: point = 521
   Insn 149: point = 523
   Insn 148: point = 524
   Insn 147: point = 526
   Insn 146: point = 528
   Insn 145: point = 530
   Insn 144: point = 532
   Insn 143: point = 533
   Insn 142: point = 533
   Insn 141: point = 534
   Insn 140: point = 536
   Insn 139: point = 537
   Insn 138: point = 539
   Insn 137: point = 540
   Insn 136: point = 541
   Insn 135: point = 543
   Insn 134: point = 545
   Insn 133: point = 547
   Insn 132: point = 549
   Insn 131: point = 551
   Insn 130: point = 553
   Insn 129: point = 554
   Insn 128: point = 556
   Insn 127: point = 558
   Insn 126: point = 560
   Insn 125: point = 562
   Insn 124: point = 564
   Insn 123: point = 565
   Insn 122: point = 565
   Insn 121: point = 566
   Insn 120: point = 568
   Insn 119: point = 569
   Insn 118: point = 571
   Insn 117: point = 572
   Insn 116: point = 574
   Insn 115: point = 576
   Insn 114: point = 578
   Insn 113: point = 580
   Insn 112: point = 581
   Insn 111: point = 581
   Insn 110: point = 582
   Insn 109: point = 584
   Insn 108: point = 585
   Insn 107: point = 587
   Insn 106: point = 588
   Insn 105: point = 589
   Insn 104: point = 591
   Insn 103: point = 593
   Insn 102: point = 595
   Insn 101: point = 597
   Insn 100: point = 599
   Insn 99: point = 601
   Insn 98: point = 602
   Insn 97: point = 604
   Insn 96: point = 606
   Insn 95: point = 608
   Insn 94: point = 610
   Insn 93: point = 612
   Insn 92: point = 613
   Insn 91: point = 613
   Insn 90: point = 614
   Insn 89: point = 616
   Insn 88: point = 617
   Insn 87: point = 619
   Insn 86: point = 620
   Insn 85: point = 622
   Insn 84: point = 624
   Insn 83: point = 626
   Insn 82: point = 628
   Insn 81: point = 629
   Insn 80: point = 629
   Insn 79: point = 630
   Insn 78: point = 632
   Insn 77: point = 633
   Insn 76: point = 635
  BB 6
   Insn 55: point = 636
   Insn 54: point = 636
   Insn 53: point = 637
  BB 5
   Insn 52: point = 639
   Insn 51: point = 639
   Insn 50: point = 640
   Insn 49: point = 641
   Insn 48: point = 643
   Insn 47: point = 645
   Insn 46: point = 647
   Insn 45: point = 649
   Insn 44: point = 651
   Insn 43: point = 653
   Insn 42: point = 654
   Insn 41: point = 656
   Insn 40: point = 658
   Insn 39: point = 660
   Insn 38: point = 662
   Insn 37: point = 664
   Insn 36: point = 665
   Insn 35: point = 665
   Insn 34: point = 666
   Insn 33: point = 668
   Insn 32: point = 669
   Insn 31: point = 671
  BB 4
   Insn 29: point = 672
   Insn 28: point = 672
   Insn 27: point = 673
   Insn 26: point = 675
   Insn 25: point = 677
   Insn 24: point = 679
   Insn 23: point = 681
   Insn 22: point = 683
   Insn 21: point = 684
   Insn 20: point = 684
   Insn 19: point = 685
   Insn 18: point = 687
   Insn 17: point = 688
   Insn 16: point = 690
 r59: [13..14]
 r60: [10..12]
 r61: [10..11]
 r62: [6..9]
 r63: [676..688]
 r64: [683..685]
 r65: [676..677]
 r66: [674..675]
 r67: [672..673]
 r68: [657..669]
 r69: [664..666]
 r70: [657..658]
 r71: [655..656]
 r72: [646..654]
 r73: [650..651]
 r74: [648..649]
 r75: [646..647]
 r76: [644..645]
 r77: [642..643]
 r78: [636..641]
 r79: [17..29]
 r80: [24..26]
 r81: [17..18]
 r82: [15..16]
 r83: [621..633]
 r84: [628..630]
 r85: [621..622]
 r86: [588..620]
 r87: [605..617]
 r88: [612..614]
 r89: [605..606]
 r90: [603..604]
 r91: [594..602]
 r92: [598..599]
 r93: [596..597]
 r94: [594..595]
 r95: [592..593]
 r96: [590..591]
 r97: [588..589]
 r98: [573..585]
 r99: [580..582]
 r100: [573..574]
 r101: [540..572]
 r102: [557..569]
 r103: [564..566]
 r104: [557..558]
 r105: [555..556]
 r106: [546..554]
 r107: [550..551]
 r108: [548..549]
 r109: [546..547]
 r110: [544..545]
 r111: [542..543]
 r112: [540..541]
 r113: [525..537]
 r114: [532..534]
 r115: [525..526]
 r116: [492..524]
 r117: [509..521]
 r118: [516..518]
 r119: [509..510]
 r120: [507..508]
 r121: [498..506]
 r122: [502..503]
 r123: [500..501]
 r124: [498..499]
 r125: [496..497]
 r126: [494..495]
 r127: [492..493]
 r128: [477..489]
 r129: [484..486]
 r130: [477..478]
 r131: [444..476]
 r132: [461..473]
 r133: [468..470]
 r134: [461..462]
 r135: [459..460]
 r136: [450..458]
 r137: [454..455]
 r138: [452..453]
 r139: [450..451]
 r140: [448..449]
 r141: [446..447]
 r142: [444..445]
 r143: [429..441]
 r144: [436..438]
 r145: [429..430]
 r146: [427..428]
 r147: [410..422]
 r148: [417..419]
 r149: [410..411]
 r150: [408..409]
 r151: [402..407]
 r152: [272..284]
 r153: [279..281]
 r154: [272..273]
 r155: [252..271]
 r156: [256..268]
 r157: [263..265]
 r158: [256..257]
 r159: [254..255]
 r160: [252..253]
 r161: [387..399]
 r162: [394..396]
 r163: [387..388]
 r164: [287..386]
 r165: [371..383]
 r166: [378..380]
 r167: [371..372]
 r168: [369..370]
 r169: [367..368]
 r170: [293..366]
 r171: [351..363]
 r172: [358..360]
 r173: [351..352]
 r174: [349..350]
 r175: [292..348]
 r176: [333..345]
 r177: [340..342]
 r178: [333..334]
 r179: [331..332]
 r180: [291..330]
 r181: [315..327]
 r182: [322..324]
 r183: [315..316]
 r184: [313..314]
 r185: [290..312]
 r186: [297..309]
 r187: [304..306]
 r188: [297..298]
 r189: [295..296]
 r190: [289..294]
 r191: [287..288]
 r192: [237..249]
 r193: [244..246]
 r194: [237..238]
 r195: [235..236]
 r196: [233..234]
 r197: [218..230]
 r198: [225..227]
 r199: [218..219]
 r200: [216..217]
 r201: [214..215]
 r202: [199..211]
 r203: [206..208]
 r204: [199..200]
 r205: [188..198]
 r206: [166..178]
 r207: [173..175]
 r208: [166..167]
 r209: [155..165]
 r210: [133..145]
 r211: [140..142]
 r212: [133..134]
 r213: [131..132]
 r214: [129..130]
 r215: [114..126]
 r216: [121..123]
 r217: [114..115]
 r218: [111..113]
 r219: [96..108]
 r220: [103..105]
 r221: [96..97]
 r222: [94..95]
 r223: [91..93]
 r224: [73..85]
 r225: [80..82]
 r226: [73..74]
 r227: [71..72]
 r228: [49..70]
 r229: [55..67]
 r230: [62..64]
 r231: [55..56]
 r232: [53..54]
 r233: [51..52]
 r234: [49..50]
 r235: [34..46]
 r236: [41..43]
 r237: [34..35]
 r238: [32..33]
 r239: [2..3]
 r240: [0..1]
 r241: [689..690]
 r242: [686..687]
 r243: [682..684] [678..679]
 r244: [680..681]
 r245: [670..671]
 r246: [667..668]
 r247: [663..665] [659..660]
 r248: [661..662]
 r249: [652..653]
 r250: [639..640]
 r251: [636..637]
 r252: [30..31]
 r253: [27..28]
 r254: [23..25] [19..20]
 r255: [21..22]
 r256: [634..635]
 r257: [631..632]
 r258: [627..629] [623..624]
 r259: [625..626]
 r260: [618..619]
 r261: [615..616]
 r262: [611..613] [607..608]
 r263: [609..610]
 r264: [600..601]
 r265: [586..587]
 r266: [583..584]
 r267: [579..581] [575..576]
 r268: [577..578]
 r269: [570..571]
 r270: [567..568]
 r271: [563..565] [559..560]
 r272: [561..562]
 r273: [552..553]
 r274: [538..539]
 r275: [535..536]
 r276: [531..533] [527..528]
 r277: [529..530]
 r278: [522..523]
 r279: [519..520]
 r280: [515..517] [511..512]
 r281: [513..514]
 r282: [504..505]
 r283: [490..491]
 r284: [487..488]
 r285: [483..485] [479..480]
 r286: [481..482]
 r287: [474..475]
 r288: [471..472]
 r289: [467..469] [463..464]
 r290: [465..466]
 r291: [456..457]
 r292: [442..443]
 r293: [439..440]
 r294: [435..437] [431..432]
 r295: [433..434]
 r296: [425..426]
 r297: [423..424]
 r298: [420..421]
 r299: [416..418] [412..413]
 r300: [414..415]
 r301: [405..406]
 r302: [402..403]
 r303: [285..286]
 r304: [282..283]
 r305: [278..280] [274..275]
 r306: [276..277]
 r307: [269..270]
 r308: [266..267]
 r309: [262..264] [258..259]
 r310: [260..261]
 r311: [400..401]
 r312: [397..398]
 r313: [393..395] [389..390]
 r314: [391..392]
 r315: [384..385]
 r316: [381..382]
 r317: [377..379] [373..374]
 r318: [375..376]
 r319: [364..365]
 r320: [361..362]
 r321: [357..359] [353..354]
 r322: [355..356]
 r323: [346..347]
 r324: [343..344]
 r325: [339..341] [335..336]
 r326: [337..338]
 r327: [328..329]
 r328: [325..326]
 r329: [321..323] [317..318]
 r330: [319..320]
 r331: [310..311]
 r332: [307..308]
 r333: [303..305] [299..300]
 r334: [301..302]
 r335: [250..251]
 r336: [247..248]
 r337: [243..245] [239..240]
 r338: [241..242]
 r339: [231..232]
 r340: [228..229]
 r341: [224..226] [220..221]
 r342: [222..223]
 r343: [212..213]
 r344: [209..210]
 r345: [205..207] [201..202]
 r346: [203..204]
 r347: [194..197]
 r348: [190..196]
 r349: [192..195]
 r350: [185..189]
 r351: [181..187]
 r352: [183..186]
 r353: [179..180]
 r354: [176..177]
 r355: [172..174] [168..169]
 r356: [170..171]
 r357: [161..164]
 r358: [157..163]
 r359: [159..162]
 r360: [152..156]
 r361: [148..154]
 r362: [150..153]
 r363: [146..147]
 r364: [143..144]
 r365: [139..141] [135..136]
 r366: [137..138]
 r367: [127..128]
 r368: [124..125]
 r369: [120..122] [116..117]
 r370: [118..119]
 r371: [111..112]
 r372: [109..110]
 r373: [106..107]
 r374: [102..104] [98..99]
 r375: [100..101]
 r376: [90..92]
 r377: [88..89]
 r378: [86..87]
 r379: [83..84]
 r380: [79..81] [75..76]
 r381: [77..78]
 r382: [68..69]
 r383: [65..66]
 r384: [61..63] [57..58]
 r385: [59..60]
 r386: [47..48]
 r387: [44..45]
 r388: [40..42] [36..37]
 r389: [38..39]
 r390: [4..5]
 r392: [7..8]
 r393: [190..193]
 r394: [190..191]
 r395: [181..184]
 r396: [181..182]
 r397: [157..160]
 r398: [157..158]
 r399: [148..151]
 r400: [148..149]
Compressing live ranges: from 691 to 560 - 81%
Ranges after the compression:
 r59: [10..11]
 r60: [8..9]
 r61: [8..9]
 r62: [6..7]
 r63: [548..557]
 r64: [554..555]
 r65: [548..549]
 r66: [546..547]
 r67: [544..545]
 r68: [532..541]
 r69: [538..539]
 r70: [532..533]
 r71: [530..531]
 r72: [522..529]
 r73: [526..527]
 r74: [524..525]
 r75: [522..523]
 r76: [520..521]
 r77: [518..519]
 r78: [514..517]
 r79: [14..23]
 r80: [20..21]
 r81: [14..15]
 r82: [12..13]
 r83: [502..511]
 r84: [508..509]
 r85: [502..503]
 r86: [474..501]
 r87: [490..499]
 r88: [496..497]
 r89: [490..491]
 r90: [488..489]
 r91: [480..487]
 r92: [484..485]
 r93: [482..483]
 r94: [480..481]
 r95: [478..479]
 r96: [476..477]
 r97: [474..475]
 r98: [462..471]
 r99: [468..469]
 r100: [462..463]
 r101: [434..461]
 r102: [450..459]
 r103: [456..457]
 r104: [450..451]
 r105: [448..449]
 r106: [440..447]
 r107: [444..445]
 r108: [442..443]
 r109: [440..441]
 r110: [438..439]
 r111: [436..437]
 r112: [434..435]
 r113: [422..431]
 r114: [428..429]
 r115: [422..423]
 r116: [394..421]
 r117: [410..419]
 r118: [416..417]
 r119: [410..411]
 r120: [408..409]
 r121: [400..407]
 r122: [404..405]
 r123: [402..403]
 r124: [400..401]
 r125: [398..399]
 r126: [396..397]
 r127: [394..395]
 r128: [382..391]
 r129: [388..389]
 r130: [382..383]
 r131: [354..381]
 r132: [370..379]
 r133: [376..377]
 r134: [370..371]
 r135: [368..369]
 r136: [360..367]
 r137: [364..365]
 r138: [362..363]
 r139: [360..361]
 r140: [358..359]
 r141: [356..357]
 r142: [354..355]
 r143: [342..351]
 r144: [348..349]
 r145: [342..343]
 r146: [340..341]
 r147: [326..335]
 r148: [332..333]
 r149: [326..327]
 r150: [324..325]
 r151: [320..323]
 r152: [220..229]
 r153: [226..227]
 r154: [220..221]
 r155: [204..219]
 r156: [208..217]
 r157: [214..215]
 r158: [208..209]
 r159: [206..207]
 r160: [204..205]
 r161: [308..317]
 r162: [314..315]
 r163: [308..309]
 r164: [232..307]
 r165: [296..305]
 r166: [302..303]
 r167: [296..297]
 r168: [294..295]
 r169: [292..293]
 r170: [234..291]
 r171: [280..289]
 r172: [286..287]
 r173: [280..281]
 r174: [278..279]
 r175: [234..277]
 r176: [266..275]
 r177: [272..273]
 r178: [266..267]
 r179: [264..265]
 r180: [234..263]
 r181: [252..261]
 r182: [258..259]
 r183: [252..253]
 r184: [250..251]
 r185: [234..249]
 r186: [238..247]
 r187: [244..245]
 r188: [238..239]
 r189: [236..237]
 r190: [234..235]
 r191: [232..233]
 r192: [192..201]
 r193: [198..199]
 r194: [192..193]
 r195: [190..191]
 r196: [188..189]
 r197: [176..185]
 r198: [182..183]
 r199: [176..177]
 r200: [174..175]
 r201: [172..173]
 r202: [160..169]
 r203: [166..167]
 r204: [160..161]
 r205: [152..159]
 r206: [134..143]
 r207: [140..141]
 r208: [134..135]
 r209: [126..133]
 r210: [108..117]
 r211: [114..115]
 r212: [108..109]
 r213: [106..107]
 r214: [104..105]
 r215: [92..101]
 r216: [98..99]
 r217: [92..93]
 r218: [90..91]
 r219: [78..87]
 r220: [84..85]
 r221: [78..79]
 r222: [76..77]
 r223: [74..75]
 r224: [60..69]
 r225: [66..67]
 r226: [60..61]
 r227: [58..59]
 r228: [40..57]
 r229: [46..55]
 r230: [52..53]
 r231: [46..47]
 r232: [44..45]
 r233: [42..43]
 r234: [40..41]
 r235: [28..37]
 r236: [34..35]
 r237: [28..29]
 r238: [26..27]
 r239: [2..3]
 r240: [0..1]
 r241: [558..559]
 r242: [556..557]
 r243: [554..555] [550..551]
 r244: [552..553]
 r245: [542..543]
 r246: [540..541]
 r247: [538..539] [534..535]
 r248: [536..537]
 r249: [528..529]
 r250: [516..517]
 r251: [514..515]
 r252: [24..25]
 r253: [22..23]
 r254: [20..21] [16..17]
 r255: [18..19]
 r256: [512..513]
 r257: [510..511]
 r258: [508..509] [504..505]
 r259: [506..507]
 r260: [500..501]
 r261: [498..499]
 r262: [496..497] [492..493]
 r263: [494..495]
 r264: [486..487]
 r265: [472..473]
 r266: [470..471]
 r267: [468..469] [464..465]
 r268: [466..467]
 r269: [460..461]
 r270: [458..459]
 r271: [456..457] [452..453]
 r272: [454..455]
 r273: [446..447]
 r274: [432..433]
 r275: [430..431]
 r276: [428..429] [424..425]
 r277: [426..427]
 r278: [420..421]
 r279: [418..419]
 r280: [416..417] [412..413]
 r281: [414..415]
 r282: [406..407]
 r283: [392..393]
 r284: [390..391]
 r285: [388..389] [384..385]
 r286: [386..387]
 r287: [380..381]
 r288: [378..379]
 r289: [376..377] [372..373]
 r290: [374..375]
 r291: [366..367]
 r292: [352..353]
 r293: [350..351]
 r294: [348..349] [344..345]
 r295: [346..347]
 r296: [338..339]
 r297: [336..337]
 r298: [334..335]
 r299: [332..333] [328..329]
 r300: [330..331]
 r301: [322..323]
 r302: [320..321]
 r303: [230..231]
 r304: [228..229]
 r305: [226..227] [222..223]
 r306: [224..225]
 r307: [218..219]
 r308: [216..217]
 r309: [214..215] [210..211]
 r310: [212..213]
 r311: [318..319]
 r312: [316..317]
 r313: [314..315] [310..311]
 r314: [312..313]
 r315: [306..307]
 r316: [304..305]
 r317: [302..303] [298..299]
 r318: [300..301]
 r319: [290..291]
 r320: [288..289]
 r321: [286..287] [282..283]
 r322: [284..285]
 r323: [276..277]
 r324: [274..275]
 r325: [272..273] [268..269]
 r326: [270..271]
 r327: [262..263]
 r328: [260..261]
 r329: [258..259] [254..255]
 r330: [256..257]
 r331: [248..249]
 r332: [246..247]
 r333: [244..245] [240..241]
 r334: [242..243]
 r335: [202..203]
 r336: [200..201]
 r337: [198..199] [194..195]
 r338: [196..197]
 r339: [186..187]
 r340: [184..185]
 r341: [182..183] [178..179]
 r342: [180..181]
 r343: [170..171]
 r344: [168..169]
 r345: [166..167] [162..163]
 r346: [164..165]
 r347: [158..159]
 r348: [154..159]
 r349: [156..159]
 r350: [150..153]
 r351: [146..151]
 r352: [148..151]
 r353: [144..145]
 r354: [142..143]
 r355: [140..141] [136..137]
 r356: [138..139]
 r357: [132..133]
 r358: [128..133]
 r359: [130..133]
 r360: [124..127]
 r361: [120..125]
 r362: [122..125]
 r363: [118..119]
 r364: [116..117]
 r365: [114..115] [110..111]
 r366: [112..113]
 r367: [102..103]
 r368: [100..101]
 r369: [98..99] [94..95]
 r370: [96..97]
 r371: [90..91]
 r372: [88..89]
 r373: [86..87]
 r374: [84..85] [80..81]
 r375: [82..83]
 r376: [74..75]
 r377: [72..73]
 r378: [70..71]
 r379: [68..69]
 r380: [66..67] [62..63]
 r381: [64..65]
 r382: [56..57]
 r383: [54..55]
 r384: [52..53] [48..49]
 r385: [50..51]
 r386: [38..39]
 r387: [36..37]
 r388: [34..35] [30..31]
 r389: [32..33]
 r390: [4..5]
 r392: [6..7]
 r393: [154..157]
 r394: [154..155]
 r395: [146..149]
 r396: [146..147]
 r397: [128..131]
 r398: [128..129]
 r399: [120..123]
 r400: [120..121]
	 Assigning to 393 (cl=DIREG, orig=347, freq=2, tfirst=393, tfreq=2)...
	   Assign 5 to reload r393 (freq=2)
	 Assigning to 394 (cl=CREG, orig=349, freq=2, tfirst=394, tfreq=2)...
	   Assign 2 to reload r394 (freq=2)
	 Assigning to 395 (cl=DIREG, orig=350, freq=2, tfirst=395, tfreq=2)...
	   Assign 5 to reload r395 (freq=2)
	 Assigning to 396 (cl=CREG, orig=352, freq=2, tfirst=396, tfreq=2)...
	   Assign 2 to reload r396 (freq=2)
	 Assigning to 397 (cl=DIREG, orig=357, freq=2, tfirst=397, tfreq=2)...
	   Assign 5 to reload r397 (freq=2)
	 Assigning to 398 (cl=CREG, orig=359, freq=2, tfirst=398, tfreq=2)...
	   Assign 2 to reload r398 (freq=2)
	 Assigning to 399 (cl=DIREG, orig=360, freq=2, tfirst=399, tfreq=2)...
	   Assign 5 to reload r399 (freq=2)
	 Assigning to 400 (cl=CREG, orig=362, freq=2, tfirst=400, tfreq=2)...
	   Assign 2 to reload r400 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=544, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=512, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 7
changing reg in insn 547
changing reg in insn 547
changing reg in insn 9
changing reg in insn 10
changing reg in insn 548
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 47
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 54
changing reg in insn 51
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 77
changing reg in insn 86
changing reg in insn 79
changing reg in insn 82
changing reg in insn 80
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 106
changing reg in insn 88
changing reg in insn 90
changing reg in insn 93
changing reg in insn 91
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 103
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 117
changing reg in insn 110
changing reg in insn 113
changing reg in insn 111
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 137
changing reg in insn 119
changing reg in insn 121
changing reg in insn 124
changing reg in insn 122
changing reg in insn 124
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 134
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 148
changing reg in insn 141
changing reg in insn 144
changing reg in insn 142
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 168
changing reg in insn 150
changing reg in insn 152
changing reg in insn 155
changing reg in insn 153
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 165
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 179
changing reg in insn 172
changing reg in insn 175
changing reg in insn 173
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 199
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 184
changing reg in insn 186
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 196
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 203
changing reg in insn 206
changing reg in insn 204
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 216
changing reg in insn 219
changing reg in insn 217
changing reg in insn 219
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 229
changing reg in insn 226
changing reg in insn 236
changing reg in insn 245
changing reg in insn 238
changing reg in insn 241
changing reg in insn 239
changing reg in insn 241
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 258
changing reg in insn 247
changing reg in insn 249
changing reg in insn 252
changing reg in insn 250
changing reg in insn 252
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 258
changing reg in insn 264
changing reg in insn 273
changing reg in insn 266
changing reg in insn 269
changing reg in insn 267
changing reg in insn 269
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 342
changing reg in insn 275
changing reg in insn 277
changing reg in insn 280
changing reg in insn 278
changing reg in insn 280
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 335
changing reg in insn 288
changing reg in insn 290
changing reg in insn 293
changing reg in insn 291
changing reg in insn 293
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 336
changing reg in insn 300
changing reg in insn 302
changing reg in insn 305
changing reg in insn 303
changing reg in insn 305
changing reg in insn 308
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 337
changing reg in insn 312
changing reg in insn 314
changing reg in insn 317
changing reg in insn 315
changing reg in insn 317
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 338
changing reg in insn 324
changing reg in insn 326
changing reg in insn 329
changing reg in insn 327
changing reg in insn 329
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 348
changing reg in insn 351
changing reg in insn 349
changing reg in insn 351
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 363
changing reg in insn 366
changing reg in insn 364
changing reg in insn 366
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 376
changing reg in insn 385
changing reg in insn 378
changing reg in insn 381
changing reg in insn 379
changing reg in insn 381
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 391
changing reg in insn 396
changing reg in insn 405
changing reg in insn 398
changing reg in insn 401
changing reg in insn 399
changing reg in insn 401
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 411
changing reg in insn 417
changing reg in insn 419
changing reg in insn 422
changing reg in insn 420
changing reg in insn 422
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 427
changing reg in insn 428
changing reg in insn 433
changing reg in insn 442
changing reg in insn 435
changing reg in insn 438
changing reg in insn 436
changing reg in insn 438
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 444
changing reg in insn 446
changing reg in insn 448
changing reg in insn 451
changing reg in insn 449
changing reg in insn 451
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 458
changing reg in insn 471
changing reg in insn 473
changing reg in insn 476
changing reg in insn 474
changing reg in insn 476
changing reg in insn 479
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 495
changing reg in insn 483
changing reg in insn 485
changing reg in insn 488
changing reg in insn 486
changing reg in insn 488
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 499
changing reg in insn 501
changing reg in insn 504
changing reg in insn 502
changing reg in insn 504
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 520
changing reg in insn 523
changing reg in insn 523
changing reg in insn 527
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 84
changing reg in insn 82
changing reg in insn 81
changing reg in insn 80
changing reg in insn 85
changing reg in insn 83
changing reg in insn 82
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 93
changing reg in insn 92
changing reg in insn 91
changing reg in insn 96
changing reg in insn 94
changing reg in insn 93
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 115
changing reg in insn 113
changing reg in insn 112
changing reg in insn 111
changing reg in insn 116
changing reg in insn 114
changing reg in insn 113
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 124
changing reg in insn 123
changing reg in insn 122
changing reg in insn 127
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 147
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 157
changing reg in insn 155
changing reg in insn 154
changing reg in insn 153
changing reg in insn 158
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 177
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 178
changing reg in insn 176
changing reg in insn 175
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 188
changing reg in insn 186
changing reg in insn 185
changing reg in insn 184
changing reg in insn 189
changing reg in insn 187
changing reg in insn 186
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 192
changing reg in insn 193
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 208
changing reg in insn 206
changing reg in insn 205
changing reg in insn 204
changing reg in insn 209
changing reg in insn 207
changing reg in insn 206
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 221
changing reg in insn 219
changing reg in insn 218
changing reg in insn 217
changing reg in insn 222
changing reg in insn 220
changing reg in insn 219
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 243
changing reg in insn 241
changing reg in insn 240
changing reg in insn 239
changing reg in insn 244
changing reg in insn 242
changing reg in insn 241
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 249
changing reg in insn 254
changing reg in insn 252
changing reg in insn 251
changing reg in insn 250
changing reg in insn 255
changing reg in insn 253
changing reg in insn 252
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 271
changing reg in insn 269
changing reg in insn 268
changing reg in insn 267
changing reg in insn 272
changing reg in insn 270
changing reg in insn 269
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 282
changing reg in insn 280
changing reg in insn 279
changing reg in insn 278
changing reg in insn 283
changing reg in insn 281
changing reg in insn 280
changing reg in insn 279
changing reg in insn 281
changing reg in insn 282
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 295
changing reg in insn 293
changing reg in insn 292
changing reg in insn 291
changing reg in insn 296
changing reg in insn 294
changing reg in insn 293
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 307
changing reg in insn 305
changing reg in insn 304
changing reg in insn 303
changing reg in insn 308
changing reg in insn 306
changing reg in insn 305
changing reg in insn 304
changing reg in insn 306
changing reg in insn 307
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 319
changing reg in insn 317
changing reg in insn 316
changing reg in insn 315
changing reg in insn 320
changing reg in insn 318
changing reg in insn 317
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 331
changing reg in insn 329
changing reg in insn 328
changing reg in insn 327
changing reg in insn 332
changing reg in insn 330
changing reg in insn 329
changing reg in insn 328
changing reg in insn 330
changing reg in insn 331
changing reg in insn 345
changing reg in insn 346
changing reg in insn 347
changing reg in insn 348
changing reg in insn 353
changing reg in insn 351
changing reg in insn 350
changing reg in insn 349
changing reg in insn 354
changing reg in insn 352
changing reg in insn 351
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 368
changing reg in insn 366
changing reg in insn 365
changing reg in insn 364
changing reg in insn 369
changing reg in insn 367
changing reg in insn 366
changing reg in insn 365
changing reg in insn 367
changing reg in insn 368
changing reg in insn 375
changing reg in insn 376
changing reg in insn 377
changing reg in insn 378
changing reg in insn 383
changing reg in insn 381
changing reg in insn 380
changing reg in insn 379
changing reg in insn 384
changing reg in insn 382
changing reg in insn 381
changing reg in insn 380
changing reg in insn 382
changing reg in insn 383
changing reg in insn 386
changing reg in insn 389
changing reg in insn 387
changing reg in insn 389
changing reg in insn 389
changing reg in insn 388
changing reg in insn 390
changing reg in insn 393
changing reg in insn 391
changing reg in insn 393
changing reg in insn 393
changing reg in insn 392
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 403
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 404
changing reg in insn 402
changing reg in insn 401
changing reg in insn 400
changing reg in insn 402
changing reg in insn 403
changing reg in insn 406
changing reg in insn 409
changing reg in insn 407
changing reg in insn 409
changing reg in insn 409
changing reg in insn 408
changing reg in insn 410
changing reg in insn 413
changing reg in insn 411
changing reg in insn 413
changing reg in insn 413
changing reg in insn 412
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 424
changing reg in insn 422
changing reg in insn 421
changing reg in insn 420
changing reg in insn 425
changing reg in insn 423
changing reg in insn 422
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 435
changing reg in insn 440
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 441
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 453
changing reg in insn 451
changing reg in insn 450
changing reg in insn 449
changing reg in insn 454
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 452
changing reg in insn 453
changing reg in insn 457
changing reg in insn 459
changing reg in insn 463
changing reg in insn 464
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 473
changing reg in insn 478
changing reg in insn 476
changing reg in insn 475
changing reg in insn 474
changing reg in insn 479
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 477
changing reg in insn 478
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 490
changing reg in insn 488
changing reg in insn 487
changing reg in insn 486
changing reg in insn 491
changing reg in insn 489
changing reg in insn 488
changing reg in insn 487
changing reg in insn 489
changing reg in insn 490
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 506
changing reg in insn 504
changing reg in insn 503
changing reg in insn 502
changing reg in insn 507
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 505
changing reg in insn 506
changing reg in insn 516
changing reg in insn 517
changing reg in insn 555
changing reg in insn 554
changing reg in insn 556
changing reg in insn 555
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 340.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 415.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 462.
verify found no changes in insn with uid = 467.


_set_st_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 19[fpcr] 37[r8] 38[r9]
;;  ref usage 	r0={324d,319u} r1={70d,94u,31e} r2={45d,42u} r3={1d,1u} r4={28d,22u} r5={21d,15u} r6={1d,107u} r7={1d,32u} r8={10d,6u} r9={11d,5u} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={161d,9u} r18={6d} r19={6d,1u} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={11d,4u} r38={8d,1u} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 1595{905d,659u,31e} in 501{495 regular + 6 call} insns.
(note 1 0 549 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 392
(note 549 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 549 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:325 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:325 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 547 2 (set (reg:SI 0 ax [orig:59 D.7107 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:329 89 {*movsi_internal}
     (nil))
(insn 547 7 9 2 (parallel [
            (set (reg:XF 9 st(1) [orig:60 D.7108 ] [60])
                (float:XF (reg:SI 0 ax [orig:59 D.7107 ] [59])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S4 A32]))
        ]) mABM.c:329 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7107 ] [59])
        (nil)))
(insn 9 547 10 2 (set (reg:XF 8 st [orig:61 D.7108 ] [61])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:329 131 {*movxf_internal_rex64}
     (nil))
(insn 10 9 553 2 (set (reg:XF 8 st [orig:62 D.7108 ] [62])
        (mult:XF (reg:XF 8 st [orig:61 D.7108 ] [61])
            (reg:XF 9 st(1) [orig:60 D.7108 ] [60]))) mABM.c:329 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.7108 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.7108 ] [60])
            (nil))))
(insn 553 10 554 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -50 [0xffffffffffffffce])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:329 199 {x86_fnstcw_1}
     (nil))
(insn 554 553 555 2 (set (reg:HI 0 ax [392])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -50 [0xffffffffffffffce])) [0  S2 A16])) mABM.c:329 90 {*movhi_internal}
     (nil))
(insn 555 554 556 2 (parallel [
            (set (reg:HI 0 ax [392])
                (ior:HI (reg:HI 0 ax [392])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:329 410 {*iorhi_1}
     (nil))
(insn 556 555 548 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0  S2 A16])
        (reg:HI 0 ax [392])) mABM.c:329 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [392])
        (nil)))
(insn 548 556 12 2 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])
                (fix:SI (reg:XF 8 st [orig:62 D.7108 ] [62])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50 [0xffffffffffffffce])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0  S2 A16]))
        ]) mABM.c:329 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.7108 ] [62])
        (nil)))
(insn 12 548 541 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:330 89 {*movsi_internal}
     (nil))
(jump_insn 541 12 542 2 (set (pc)
        (label_ref 513)) mABM.c:330 650 {jump}
     (nil)
 -> 513)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 542 541 515)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64 65 66 67 241 242 243 244
(code_label 515 542 15 4 115 "" [1 uses])
(note 15 515 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:330 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 4 (set (reg/f:DI 2 cx [orig:63 D.7109 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [241]) [0 *f_9(D)+0 S8 A64])) mABM.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [241])
        (nil)))
(insn 18 17 19 4 (set (reg:SI 0 ax [242])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:330 89 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 1 dx [orig:64 D.7110 ] [64])
        (sign_extend:DI (reg:SI 0 ax [242]))) mABM.c:330 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [242])
        (nil)))
(insn 20 19 21 4 (set (reg:DI 0 ax [243])
        (reg:DI 1 dx [orig:64 D.7110 ] [64])) mABM.c:330 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 0 ax [243])
                (ashift:DI (reg:DI 0 ax [243])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:330 513 {*ashldi3_1}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 0 ax [243])
                (plus:DI (reg:DI 0 ax [243])
                    (reg:DI 1 dx [orig:64 D.7110 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:330 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7110 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.7110 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 0 ax [244])
                (ashift:DI (reg:DI 0 ax [243])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:330 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [243])
        (nil)))
(insn 24 23 25 4 (set (reg:DI 0 ax [243])
        (reg:DI 0 ax [244])) mABM.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [244])
        (nil)))
(insn 25 24 26 4 (set (reg:DI 0 ax [orig:65 D.7110 ] [65])
        (reg:DI 0 ax [243])) mABM.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [243])
        (nil)))
(insn 26 25 27 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.7109 ] [66])
                (plus:DI (reg:DI 0 ax [orig:65 D.7110 ] [65])
                    (reg/f:DI 2 cx [orig:63 D.7109 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:330 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.7110 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:63 D.7109 ] [63])
            (nil))))
(insn 27 26 28 4 (set (reg:SI 0 ax [orig:67 D.7107 ] [67])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:66 D.7109 ] [66])
                (const_int 40 [0x28])) [0 _13->ready+0 S4 A64])) mABM.c:330 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7109 ] [66])
        (nil)))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:67 D.7107 ] [67])
            (const_int 0 [0]))) mABM.c:330 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7107 ] [67])
        (nil)))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) mABM.c:330 612 {*jcc_1}
     (nil)
 -> 510)
;;  succ:       5 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 69 70 71 72 73 74 75 76 77 78 245 246 247 248 249 250
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:331 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 5 (set (reg/f:DI 2 cx [orig:68 D.7109 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [245]) [0 *f_9(D)+0 S8 A64])) mABM.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [245])
        (nil)))
(insn 33 32 34 5 (set (reg:SI 0 ax [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:331 89 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 1 dx [orig:69 D.7110 ] [69])
        (sign_extend:DI (reg:SI 0 ax [246]))) mABM.c:331 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [246])
        (nil)))
(insn 35 34 36 5 (set (reg:DI 0 ax [247])
        (reg:DI 1 dx [orig:69 D.7110 ] [69])) mABM.c:331 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg:DI 0 ax [247])
                (ashift:DI (reg:DI 0 ax [247])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 513 {*ashldi3_1}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg:DI 0 ax [247])
                (plus:DI (reg:DI 0 ax [247])
                    (reg:DI 1 dx [orig:69 D.7110 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.7110 ] [69])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:69 D.7110 ] [69])
                (const_int 5 [0x5]))
            (nil))))
(insn 38 37 39 5 (parallel [
            (set (reg:DI 0 ax [248])
                (ashift:DI (reg:DI 0 ax [247])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [247])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 0 ax [247])
        (reg:DI 0 ax [248])) mABM.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [248])
        (nil)))
(insn 40 39 41 5 (set (reg:DI 0 ax [orig:70 D.7110 ] [70])
        (reg:DI 0 ax [247])) mABM.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [247])
        (nil)))
(insn 41 40 42 5 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7109 ] [71])
                (plus:DI (reg:DI 0 ax [orig:70 D.7110 ] [70])
                    (reg/f:DI 2 cx [orig:68 D.7109 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.7110 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:68 D.7109 ] [68])
            (nil))))
(insn 42 41 43 5 (set (reg/f:DI 0 ax [orig:72 D.7111 ] [72])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:71 D.7109 ] [71])
                (const_int 32 [0x20])) [0 _18->pos+0 S8 A128])) mABM.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7109 ] [71])
        (nil)))
(insn 43 42 44 5 (set (reg:SI 1 dx [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])) mABM.c:331 89 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 1 dx [orig:73 D.7110 ] [73])
        (sign_extend:DI (reg:SI 1 dx [249]))) mABM.c:331 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [249])
        (nil)))
(insn 45 44 46 5 (parallel [
            (set (reg:DI 1 dx [orig:74 D.7110 ] [74])
                (ashift:DI (reg:DI 1 dx [orig:73 D.7110 ] [73])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.7110 ] [73])
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 1 dx [orig:75 D.7112 ] [75])
                (plus:DI (reg:DI 1 dx [orig:74 D.7110 ] [74])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7110 ] [74])
        (nil)))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7111 ] [76])
                (plus:DI (reg/f:DI 0 ax [orig:72 D.7111 ] [72])
                    (reg:DI 1 dx [orig:75 D.7112 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:331 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.7112 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7111 ] [72])
            (nil))))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [orig:77 D.7113 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [orig:76 D.7111 ] [76]) [0 *_23+0 S8 A64])) mABM.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7111 ] [76])
        (nil)))
(insn 49 48 50 5 (set (reg:XF 8 st [orig:78 D.7108 ] [78])
        (mem:XF (reg/f:DI 0 ax [orig:77 D.7113 ] [77]) [0 *_24+0 S16 A128])) mABM.c:331 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7113 ] [77])
        (nil)))
(insn 50 49 51 5 (set (reg:XF 9 st(1) [250])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:331 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 51 50 52 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:78 D.7108 ] [78])
            (reg:XF 9 st(1) [250]))) mABM.c:331 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [250])
        (nil)))
(jump_insn 52 51 532 5 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) mABM.c:331 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       8
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78
;; lr  def 	 17 [flags] 251
(note 532 52 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 532 54 6 (set (reg:XF 9 st(1) [251])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:331 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 54 53 55 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:78 D.7108 ] [78])
            (reg:XF 9 st(1) [251]))) mABM.c:331 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [251])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.7108 ] [78])
            (nil))))
(jump_insn 55 54 59 6 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 74)
            (pc))) mABM.c:331 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 81 82 252 253 254 255
(note 59 55 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:332 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 7 (set (reg/f:DI 2 cx [orig:79 D.7109 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [252]) [0 *f_9(D)+0 S8 A64])) mABM.c:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [252])
        (nil)))
(insn 62 61 63 7 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:332 89 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 1 dx [orig:80 D.7110 ] [80])
        (sign_extend:DI (reg:SI 0 ax [253]))) mABM.c:332 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [253])
        (nil)))
(insn 64 63 65 7 (set (reg:DI 0 ax [254])
        (reg:DI 1 dx [orig:80 D.7110 ] [80])) mABM.c:332 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 0 ax [254])
                (ashift:DI (reg:DI 0 ax [254])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:332 513 {*ashldi3_1}
     (nil))
(insn 66 65 67 7 (parallel [
            (set (reg:DI 0 ax [254])
                (plus:DI (reg:DI 0 ax [254])
                    (reg:DI 1 dx [orig:80 D.7110 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:332 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7110 ] [80])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:80 D.7110 ] [80])
                (const_int 5 [0x5]))
            (nil))))
(insn 67 66 68 7 (parallel [
            (set (reg:DI 0 ax [255])
                (ashift:DI (reg:DI 0 ax [254])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:332 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [254])
        (nil)))
(insn 68 67 69 7 (set (reg:DI 0 ax [254])
        (reg:DI 0 ax [255])) mABM.c:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [255])
        (nil)))
(insn 69 68 70 7 (set (reg:DI 0 ax [orig:81 D.7110 ] [81])
        (reg:DI 0 ax [254])) mABM.c:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [254])
        (nil)))
(insn 70 69 71 7 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.7109 ] [82])
                (plus:DI (reg:DI 0 ax [orig:81 D.7110 ] [81])
                    (reg/f:DI 2 cx [orig:79 D.7109 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:332 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:81 D.7110 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:79 D.7109 ] [79])
            (nil))))
(insn 71 70 543 7 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:82 D.7109 ] [82])
                (const_int 40 [0x28])) [0 _29->ready+0 S4 A64])
        (const_int 0 [0])) mABM.c:332 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7109 ] [82])
        (nil)))
(jump_insn 543 71 544 7 (set (pc)
        (label_ref 510)) mABM.c:333 650 {jump}
     (nil)
 -> 510)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 544 543 74)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301
(code_label 74 544 75 8 109 "" [2 uses])
(note 75 74 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 8 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:335 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 8 (set (reg/f:DI 2 cx [orig:83 D.7109 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [256]) [0 *f_9(D)+0 S8 A64])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [256])
        (nil)))
(insn 78 77 79 8 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:335 89 {*movsi_internal}
     (nil))
(insn 79 78 80 8 (set (reg:DI 1 dx [orig:84 D.7110 ] [84])
        (sign_extend:DI (reg:SI 0 ax [257]))) mABM.c:335 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [257])
        (nil)))
(insn 80 79 81 8 (set (reg:DI 0 ax [258])
        (reg:DI 1 dx [orig:84 D.7110 ] [84])) mABM.c:335 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg:DI 0 ax [258])
                (ashift:DI (reg:DI 0 ax [258])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 513 {*ashldi3_1}
     (nil))
(insn 82 81 83 8 (parallel [
            (set (reg:DI 0 ax [258])
                (plus:DI (reg:DI 0 ax [258])
                    (reg:DI 1 dx [orig:84 D.7110 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7110 ] [84])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.7110 ] [84])
                (const_int 5 [0x5]))
            (nil))))
(insn 83 82 84 8 (parallel [
            (set (reg:DI 0 ax [259])
                (ashift:DI (reg:DI 0 ax [258])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [258])
        (nil)))
(insn 84 83 85 8 (set (reg:DI 0 ax [258])
        (reg:DI 0 ax [259])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [259])
        (nil)))
(insn 85 84 86 8 (set (reg:DI 0 ax [orig:85 D.7110 ] [85])
        (reg:DI 0 ax [258])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [258])
        (nil)))
(insn 86 85 87 8 (parallel [
            (set (reg/f:DI 2 cx [orig:86 D.7109 ] [86])
                (plus:DI (reg/f:DI 2 cx [orig:83 D.7109 ] [83])
                    (reg:DI 0 ax [orig:85 D.7110 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.7110 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:83 D.7109 ] [83])
            (nil))))
(insn 87 86 88 8 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:335 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 8 (set (reg/f:DI 4 si [orig:87 D.7109 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [260]) [0 *f_9(D)+0 S8 A64])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [260])
        (nil)))
(insn 89 88 90 8 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:335 89 {*movsi_internal}
     (nil))
(insn 90 89 91 8 (set (reg:DI 1 dx [orig:88 D.7110 ] [88])
        (sign_extend:DI (reg:SI 0 ax [261]))) mABM.c:335 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [261])
        (nil)))
(insn 91 90 92 8 (set (reg:DI 0 ax [262])
        (reg:DI 1 dx [orig:88 D.7110 ] [88])) mABM.c:335 87 {*movdi_internal_rex64}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 0 ax [262])
                (ashift:DI (reg:DI 0 ax [262])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 513 {*ashldi3_1}
     (nil))
(insn 93 92 94 8 (parallel [
            (set (reg:DI 0 ax [262])
                (plus:DI (reg:DI 0 ax [262])
                    (reg:DI 1 dx [orig:88 D.7110 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.7110 ] [88])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.7110 ] [88])
                (const_int 5 [0x5]))
            (nil))))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 0 ax [263])
                (ashift:DI (reg:DI 0 ax [262])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [262])
        (nil)))
(insn 95 94 96 8 (set (reg:DI 0 ax [262])
        (reg:DI 0 ax [263])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [263])
        (nil)))
(insn 96 95 97 8 (set (reg:DI 0 ax [orig:89 D.7110 ] [89])
        (reg:DI 0 ax [262])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [262])
        (nil)))
(insn 97 96 98 8 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.7109 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 D.7110 ] [89])
                    (reg/f:DI 4 si [orig:87 D.7109 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.7110 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:87 D.7109 ] [87])
            (nil))))
(insn 98 97 99 8 (set (reg/f:DI 0 ax [orig:91 D.7111 ] [91])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:90 D.7109 ] [90])
                (const_int 32 [0x20])) [0 _37->pos+0 S8 A128])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.7109 ] [90])
        (nil)))
(insn 99 98 100 8 (set (reg:SI 1 dx [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])) mABM.c:335 89 {*movsi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:DI 1 dx [orig:92 D.7110 ] [92])
        (sign_extend:DI (reg:SI 1 dx [264]))) mABM.c:335 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [264])
        (nil)))
(insn 101 100 102 8 (parallel [
            (set (reg:DI 1 dx [orig:93 D.7110 ] [93])
                (ashift:DI (reg:DI 1 dx [orig:92 D.7110 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.7110 ] [92])
        (nil)))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:94 D.7112 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 D.7110 ] [93])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.7110 ] [93])
        (nil)))
(insn 103 102 104 8 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.7111 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:91 D.7111 ] [91])
                    (reg:DI 1 dx [orig:94 D.7112 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:335 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:94 D.7112 ] [94])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7111 ] [91])
            (nil))))
(insn 104 103 105 8 (set (reg/f:DI 0 ax [orig:96 D.7113 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 D.7111 ] [95]) [0 *_42+0 S8 A64])) mABM.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.7111 ] [95])
        (nil)))
(insn 105 104 106 8 (set (reg:XF 0 ax [orig:97 D.7108 ] [97])
        (mem:XF (reg/f:DI 0 ax [orig:96 D.7113 ] [96]) [0 *_43+0 S16 A128])) mABM.c:335 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.7113 ] [96])
        (nil)))
(insn 106 105 107 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:86 D.7109 ] [86])
                (const_int 48 [0x30])) [0 _33->st_point+0 S16 A128])
        (reg:XF 0 ax [orig:97 D.7108 ] [97])) mABM.c:335 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:97 D.7108 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:86 D.7109 ] [86])
            (nil))))
(insn 107 106 108 8 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:336 87 {*movdi_internal_rex64}
     (nil))
(insn 108 107 109 8 (set (reg/f:DI 2 cx [orig:98 D.7109 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [265]) [0 *f_9(D)+0 S8 A64])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [265])
        (nil)))
(insn 109 108 110 8 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:336 89 {*movsi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:DI 1 dx [orig:99 D.7110 ] [99])
        (sign_extend:DI (reg:SI 0 ax [266]))) mABM.c:336 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [266])
        (nil)))
(insn 111 110 112 8 (set (reg:DI 0 ax [267])
        (reg:DI 1 dx [orig:99 D.7110 ] [99])) mABM.c:336 87 {*movdi_internal_rex64}
     (nil))
(insn 112 111 113 8 (parallel [
            (set (reg:DI 0 ax [267])
                (ashift:DI (reg:DI 0 ax [267])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 513 {*ashldi3_1}
     (nil))
(insn 113 112 114 8 (parallel [
            (set (reg:DI 0 ax [267])
                (plus:DI (reg:DI 0 ax [267])
                    (reg:DI 1 dx [orig:99 D.7110 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:99 D.7110 ] [99])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:99 D.7110 ] [99])
                (const_int 5 [0x5]))
            (nil))))
(insn 114 113 115 8 (parallel [
            (set (reg:DI 0 ax [268])
                (ashift:DI (reg:DI 0 ax [267])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [267])
        (nil)))
(insn 115 114 116 8 (set (reg:DI 0 ax [267])
        (reg:DI 0 ax [268])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [268])
        (nil)))
(insn 116 115 117 8 (set (reg:DI 0 ax [orig:100 D.7110 ] [100])
        (reg:DI 0 ax [267])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [267])
        (nil)))
(insn 117 116 118 8 (parallel [
            (set (reg/f:DI 2 cx [orig:101 D.7109 ] [101])
                (plus:DI (reg/f:DI 2 cx [orig:98 D.7109 ] [98])
                    (reg:DI 0 ax [orig:100 D.7110 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:100 D.7110 ] [100])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:98 D.7109 ] [98])
            (nil))))
(insn 118 117 119 8 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:336 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 8 (set (reg/f:DI 4 si [orig:102 D.7109 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [269]) [0 *f_9(D)+0 S8 A64])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [269])
        (nil)))
(insn 120 119 121 8 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:336 89 {*movsi_internal}
     (nil))
(insn 121 120 122 8 (set (reg:DI 1 dx [orig:103 D.7110 ] [103])
        (sign_extend:DI (reg:SI 0 ax [270]))) mABM.c:336 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [270])
        (nil)))
(insn 122 121 123 8 (set (reg:DI 0 ax [271])
        (reg:DI 1 dx [orig:103 D.7110 ] [103])) mABM.c:336 87 {*movdi_internal_rex64}
     (nil))
(insn 123 122 124 8 (parallel [
            (set (reg:DI 0 ax [271])
                (ashift:DI (reg:DI 0 ax [271])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 513 {*ashldi3_1}
     (nil))
(insn 124 123 125 8 (parallel [
            (set (reg:DI 0 ax [271])
                (plus:DI (reg:DI 0 ax [271])
                    (reg:DI 1 dx [orig:103 D.7110 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:103 D.7110 ] [103])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:103 D.7110 ] [103])
                (const_int 5 [0x5]))
            (nil))))
(insn 125 124 126 8 (parallel [
            (set (reg:DI 0 ax [272])
                (ashift:DI (reg:DI 0 ax [271])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [271])
        (nil)))
(insn 126 125 127 8 (set (reg:DI 0 ax [271])
        (reg:DI 0 ax [272])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [272])
        (nil)))
(insn 127 126 128 8 (set (reg:DI 0 ax [orig:104 D.7110 ] [104])
        (reg:DI 0 ax [271])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [271])
        (nil)))
(insn 128 127 129 8 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.7109 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 D.7110 ] [104])
                    (reg/f:DI 4 si [orig:102 D.7109 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:104 D.7110 ] [104])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:102 D.7109 ] [102])
            (nil))))
(insn 129 128 130 8 (set (reg/f:DI 0 ax [orig:106 D.7111 ] [106])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:105 D.7109 ] [105])
                (const_int 32 [0x20])) [0 _52->pos+0 S8 A128])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:105 D.7109 ] [105])
        (nil)))
(insn 130 129 131 8 (set (reg:SI 1 dx [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])) mABM.c:336 89 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (set (reg:DI 1 dx [orig:107 D.7110 ] [107])
        (sign_extend:DI (reg:SI 1 dx [273]))) mABM.c:336 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [273])
        (nil)))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 1 dx [orig:108 D.7110 ] [108])
                (ashift:DI (reg:DI 1 dx [orig:107 D.7110 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.7110 ] [107])
        (nil)))
(insn 133 132 134 8 (parallel [
            (set (reg:DI 1 dx [orig:109 D.7112 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.7110 ] [108])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:108 D.7110 ] [108])
        (nil)))
(insn 134 133 135 8 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.7111 ] [110])
                (plus:DI (reg/f:DI 0 ax [orig:106 D.7111 ] [106])
                    (reg:DI 1 dx [orig:109 D.7112 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:336 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:109 D.7112 ] [109])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:106 D.7111 ] [106])
            (nil))))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [orig:111 D.7113 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:110 D.7111 ] [110]) [0 *_57+0 S8 A64])) mABM.c:336 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.7111 ] [110])
        (nil)))
(insn 136 135 137 8 (set (reg:XF 0 ax [orig:112 D.7108 ] [112])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:111 D.7113 ] [111])
                (const_int 16 [0x10])) [0 MEM[(long double *)_58 + 16B]+0 S16 A128])) mABM.c:336 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:111 D.7113 ] [111])
        (nil)))
(insn 137 136 138 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:101 D.7109 ] [101])
                (const_int 64 [0x40])) [0 _48->st_point+16 S16 A128])
        (reg:XF 0 ax [orig:112 D.7108 ] [112])) mABM.c:336 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:112 D.7108 ] [112])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:101 D.7109 ] [101])
            (nil))))
(insn 138 137 139 8 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 139 138 140 8 (set (reg/f:DI 2 cx [orig:113 D.7109 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [274]) [0 *f_9(D)+0 S8 A64])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [274])
        (nil)))
(insn 140 139 141 8 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:337 89 {*movsi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:DI 1 dx [orig:114 D.7110 ] [114])
        (sign_extend:DI (reg:SI 0 ax [275]))) mABM.c:337 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [275])
        (nil)))
(insn 142 141 143 8 (set (reg:DI 0 ax [276])
        (reg:DI 1 dx [orig:114 D.7110 ] [114])) mABM.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 8 (parallel [
            (set (reg:DI 0 ax [276])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 513 {*ashldi3_1}
     (nil))
(insn 144 143 145 8 (parallel [
            (set (reg:DI 0 ax [276])
                (plus:DI (reg:DI 0 ax [276])
                    (reg:DI 1 dx [orig:114 D.7110 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:114 D.7110 ] [114])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:114 D.7110 ] [114])
                (const_int 5 [0x5]))
            (nil))))
(insn 145 144 146 8 (parallel [
            (set (reg:DI 0 ax [277])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 146 145 147 8 (set (reg:DI 0 ax [276])
        (reg:DI 0 ax [277])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [277])
        (nil)))
(insn 147 146 148 8 (set (reg:DI 0 ax [orig:115 D.7110 ] [115])
        (reg:DI 0 ax [276])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 148 147 149 8 (parallel [
            (set (reg/f:DI 2 cx [orig:116 D.7109 ] [116])
                (plus:DI (reg/f:DI 2 cx [orig:113 D.7109 ] [113])
                    (reg:DI 0 ax [orig:115 D.7110 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:115 D.7110 ] [115])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:113 D.7109 ] [113])
            (nil))))
(insn 149 148 150 8 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 150 149 151 8 (set (reg/f:DI 4 si [orig:117 D.7109 ] [117])
        (mem/f:DI (reg/f:DI 0 ax [278]) [0 *f_9(D)+0 S8 A64])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [278])
        (nil)))
(insn 151 150 152 8 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:337 89 {*movsi_internal}
     (nil))
(insn 152 151 153 8 (set (reg:DI 1 dx [orig:118 D.7110 ] [118])
        (sign_extend:DI (reg:SI 0 ax [279]))) mABM.c:337 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [279])
        (nil)))
(insn 153 152 154 8 (set (reg:DI 0 ax [280])
        (reg:DI 1 dx [orig:118 D.7110 ] [118])) mABM.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 8 (parallel [
            (set (reg:DI 0 ax [280])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 513 {*ashldi3_1}
     (nil))
(insn 155 154 156 8 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg:DI 0 ax [280])
                    (reg:DI 1 dx [orig:118 D.7110 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:118 D.7110 ] [118])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:118 D.7110 ] [118])
                (const_int 5 [0x5]))
            (nil))))
(insn 156 155 157 8 (parallel [
            (set (reg:DI 0 ax [281])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [280])
        (nil)))
(insn 157 156 158 8 (set (reg:DI 0 ax [280])
        (reg:DI 0 ax [281])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [281])
        (nil)))
(insn 158 157 159 8 (set (reg:DI 0 ax [orig:119 D.7110 ] [119])
        (reg:DI 0 ax [280])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [280])
        (nil)))
(insn 159 158 160 8 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.7109 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.7110 ] [119])
                    (reg/f:DI 4 si [orig:117 D.7109 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 D.7110 ] [119])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:117 D.7109 ] [117])
            (nil))))
(insn 160 159 161 8 (set (reg/f:DI 0 ax [orig:121 D.7111 ] [121])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:120 D.7109 ] [120])
                (const_int 32 [0x20])) [0 _67->pos+0 S8 A128])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:120 D.7109 ] [120])
        (nil)))
(insn 161 160 162 8 (set (reg:SI 1 dx [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])) mABM.c:337 89 {*movsi_internal}
     (nil))
(insn 162 161 163 8 (set (reg:DI 1 dx [orig:122 D.7110 ] [122])
        (sign_extend:DI (reg:SI 1 dx [282]))) mABM.c:337 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [282])
        (nil)))
(insn 163 162 164 8 (parallel [
            (set (reg:DI 1 dx [orig:123 D.7110 ] [123])
                (ashift:DI (reg:DI 1 dx [orig:122 D.7110 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:122 D.7110 ] [122])
        (nil)))
(insn 164 163 165 8 (parallel [
            (set (reg:DI 1 dx [orig:124 D.7112 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.7110 ] [123])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:123 D.7110 ] [123])
        (nil)))
(insn 165 164 166 8 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.7111 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:121 D.7111 ] [121])
                    (reg:DI 1 dx [orig:124 D.7112 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:124 D.7112 ] [124])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:121 D.7111 ] [121])
            (nil))))
(insn 166 165 167 8 (set (reg/f:DI 0 ax [orig:126 D.7113 ] [126])
        (mem/f:DI (reg/f:DI 0 ax [orig:125 D.7111 ] [125]) [0 *_72+0 S8 A64])) mABM.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.7111 ] [125])
        (nil)))
(insn 167 166 168 8 (set (reg:XF 0 ax [orig:127 D.7108 ] [127])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:126 D.7113 ] [126])
                (const_int 32 [0x20])) [0 MEM[(long double *)_73 + 32B]+0 S16 A128])) mABM.c:337 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:126 D.7113 ] [126])
        (nil)))
(insn 168 167 169 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:116 D.7109 ] [116])
                (const_int 80 [0x50])) [0 _63->st_point+32 S16 A128])
        (reg:XF 0 ax [orig:127 D.7108 ] [127])) mABM.c:337 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:127 D.7108 ] [127])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:116 D.7109 ] [116])
            (nil))))
(insn 169 168 170 8 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:338 87 {*movdi_internal_rex64}
     (nil))
(insn 170 169 171 8 (set (reg/f:DI 2 cx [orig:128 D.7109 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [283]) [0 *f_9(D)+0 S8 A64])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [283])
        (nil)))
(insn 171 170 172 8 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:338 89 {*movsi_internal}
     (nil))
(insn 172 171 173 8 (set (reg:DI 1 dx [orig:129 D.7110 ] [129])
        (sign_extend:DI (reg:SI 0 ax [284]))) mABM.c:338 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [284])
        (nil)))
(insn 173 172 174 8 (set (reg:DI 0 ax [285])
        (reg:DI 1 dx [orig:129 D.7110 ] [129])) mABM.c:338 87 {*movdi_internal_rex64}
     (nil))
(insn 174 173 175 8 (parallel [
            (set (reg:DI 0 ax [285])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 513 {*ashldi3_1}
     (nil))
(insn 175 174 176 8 (parallel [
            (set (reg:DI 0 ax [285])
                (plus:DI (reg:DI 0 ax [285])
                    (reg:DI 1 dx [orig:129 D.7110 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:129 D.7110 ] [129])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:129 D.7110 ] [129])
                (const_int 5 [0x5]))
            (nil))))
(insn 176 175 177 8 (parallel [
            (set (reg:DI 0 ax [286])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 177 176 178 8 (set (reg:DI 0 ax [285])
        (reg:DI 0 ax [286])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [286])
        (nil)))
(insn 178 177 179 8 (set (reg:DI 0 ax [orig:130 D.7110 ] [130])
        (reg:DI 0 ax [285])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [285])
        (nil)))
(insn 179 178 180 8 (parallel [
            (set (reg/f:DI 2 cx [orig:131 D.7109 ] [131])
                (plus:DI (reg/f:DI 2 cx [orig:128 D.7109 ] [128])
                    (reg:DI 0 ax [orig:130 D.7110 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:130 D.7110 ] [130])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:128 D.7109 ] [128])
            (nil))))
(insn 180 179 181 8 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:338 87 {*movdi_internal_rex64}
     (nil))
(insn 181 180 182 8 (set (reg/f:DI 4 si [orig:132 D.7109 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [287]) [0 *f_9(D)+0 S8 A64])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [287])
        (nil)))
(insn 182 181 183 8 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:338 89 {*movsi_internal}
     (nil))
(insn 183 182 184 8 (set (reg:DI 1 dx [orig:133 D.7110 ] [133])
        (sign_extend:DI (reg:SI 0 ax [288]))) mABM.c:338 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [288])
        (nil)))
(insn 184 183 185 8 (set (reg:DI 0 ax [289])
        (reg:DI 1 dx [orig:133 D.7110 ] [133])) mABM.c:338 87 {*movdi_internal_rex64}
     (nil))
(insn 185 184 186 8 (parallel [
            (set (reg:DI 0 ax [289])
                (ashift:DI (reg:DI 0 ax [289])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 513 {*ashldi3_1}
     (nil))
(insn 186 185 187 8 (parallel [
            (set (reg:DI 0 ax [289])
                (plus:DI (reg:DI 0 ax [289])
                    (reg:DI 1 dx [orig:133 D.7110 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:133 D.7110 ] [133])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:133 D.7110 ] [133])
                (const_int 5 [0x5]))
            (nil))))
(insn 187 186 188 8 (parallel [
            (set (reg:DI 0 ax [290])
                (ashift:DI (reg:DI 0 ax [289])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [289])
        (nil)))
(insn 188 187 189 8 (set (reg:DI 0 ax [289])
        (reg:DI 0 ax [290])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [290])
        (nil)))
(insn 189 188 190 8 (set (reg:DI 0 ax [orig:134 D.7110 ] [134])
        (reg:DI 0 ax [289])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [289])
        (nil)))
(insn 190 189 191 8 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.7109 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 D.7110 ] [134])
                    (reg/f:DI 4 si [orig:132 D.7109 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:134 D.7110 ] [134])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:132 D.7109 ] [132])
            (nil))))
(insn 191 190 192 8 (set (reg/f:DI 0 ax [orig:136 D.7111 ] [136])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:135 D.7109 ] [135])
                (const_int 32 [0x20])) [0 _82->pos+0 S8 A128])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:135 D.7109 ] [135])
        (nil)))
(insn 192 191 193 8 (set (reg:SI 1 dx [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 t_x+0 S4 A32])) mABM.c:338 89 {*movsi_internal}
     (nil))
(insn 193 192 194 8 (set (reg:DI 1 dx [orig:137 D.7110 ] [137])
        (sign_extend:DI (reg:SI 1 dx [291]))) mABM.c:338 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [291])
        (nil)))
(insn 194 193 195 8 (parallel [
            (set (reg:DI 1 dx [orig:138 D.7110 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.7110 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:137 D.7110 ] [137])
        (nil)))
(insn 195 194 196 8 (parallel [
            (set (reg:DI 1 dx [orig:139 D.7112 ] [139])
                (plus:DI (reg:DI 1 dx [orig:138 D.7110 ] [138])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:138 D.7110 ] [138])
        (nil)))
(insn 196 195 197 8 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.7111 ] [140])
                (plus:DI (reg/f:DI 0 ax [orig:136 D.7111 ] [136])
                    (reg:DI 1 dx [orig:139 D.7112 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:338 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.7112 ] [139])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:136 D.7111 ] [136])
            (nil))))
(insn 197 196 198 8 (set (reg/f:DI 0 ax [orig:141 D.7113 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [orig:140 D.7111 ] [140]) [0 *_87+0 S8 A64])) mABM.c:338 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:140 D.7111 ] [140])
        (nil)))
(insn 198 197 199 8 (set (reg:XF 0 ax [orig:142 D.7108 ] [142])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:141 D.7113 ] [141])
                (const_int 48 [0x30])) [0 MEM[(long double *)_88 + 48B]+0 S16 A128])) mABM.c:338 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:141 D.7113 ] [141])
        (nil)))
(insn 199 198 200 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [orig:131 D.7109 ] [131])
                (const_int 96 [0x60])) [0 _78->st_point+48 S16 A128])
        (reg:XF 0 ax [orig:142 D.7108 ] [142])) mABM.c:338 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:142 D.7108 ] [142])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:131 D.7109 ] [131])
            (nil))))
(insn 200 199 201 8 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:340 87 {*movdi_internal_rex64}
     (nil))
(insn 201 200 202 8 (set (reg/f:DI 2 cx [orig:143 D.7109 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [292]) [0 *f_9(D)+0 S8 A64])) mABM.c:340 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [292])
        (nil)))
(insn 202 201 203 8 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:340 89 {*movsi_internal}
     (nil))
(insn 203 202 204 8 (set (reg:DI 1 dx [orig:144 D.7110 ] [144])
        (sign_extend:DI (reg:SI 0 ax [293]))) mABM.c:340 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [293])
        (nil)))
(insn 204 203 205 8 (set (reg:DI 0 ax [294])
        (reg:DI 1 dx [orig:144 D.7110 ] [144])) mABM.c:340 87 {*movdi_internal_rex64}
     (nil))
(insn 205 204 206 8 (parallel [
            (set (reg:DI 0 ax [294])
                (ashift:DI (reg:DI 0 ax [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:340 513 {*ashldi3_1}
     (nil))
(insn 206 205 207 8 (parallel [
            (set (reg:DI 0 ax [294])
                (plus:DI (reg:DI 0 ax [294])
                    (reg:DI 1 dx [orig:144 D.7110 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:340 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:144 D.7110 ] [144])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:144 D.7110 ] [144])
                (const_int 5 [0x5]))
            (nil))))
(insn 207 206 208 8 (parallel [
            (set (reg:DI 0 ax [295])
                (ashift:DI (reg:DI 0 ax [294])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:340 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [294])
        (nil)))
(insn 208 207 209 8 (set (reg:DI 0 ax [294])
        (reg:DI 0 ax [295])) mABM.c:340 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [295])
        (nil)))
(insn 209 208 210 8 (set (reg:DI 0 ax [orig:145 D.7110 ] [145])
        (reg:DI 0 ax [294])) mABM.c:340 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [294])
        (nil)))
(insn 210 209 211 8 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.7109 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 D.7110 ] [145])
                    (reg/f:DI 2 cx [orig:143 D.7109 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:340 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:145 D.7110 ] [145])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:143 D.7109 ] [143])
            (nil))))
(insn 211 210 212 8 (set (reg:SI 0 ax [296])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:146 D.7109 ] [146])
                (const_int 44 [0x2c])) [0 _93->st_indx+0 S4 A32])) mABM.c:340 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:146 D.7109 ] [146])
        (nil)))
(insn 212 211 213 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 old_st+0 S4 A32])
        (reg:SI 0 ax [296])) mABM.c:340 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [296])
        (nil)))
(insn 213 212 214 8 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 214 213 215 8 (set (reg/f:DI 2 cx [orig:147 D.7109 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [297]) [0 *f_9(D)+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [297])
        (nil)))
(insn 215 214 216 8 (set (reg:SI 0 ax [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:341 89 {*movsi_internal}
     (nil))
(insn 216 215 217 8 (set (reg:DI 1 dx [orig:148 D.7110 ] [148])
        (sign_extend:DI (reg:SI 0 ax [298]))) mABM.c:341 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [298])
        (nil)))
(insn 217 216 218 8 (set (reg:DI 0 ax [299])
        (reg:DI 1 dx [orig:148 D.7110 ] [148])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 218 217 219 8 (parallel [
            (set (reg:DI 0 ax [299])
                (ashift:DI (reg:DI 0 ax [299])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (nil))
(insn 219 218 220 8 (parallel [
            (set (reg:DI 0 ax [299])
                (plus:DI (reg:DI 0 ax [299])
                    (reg:DI 1 dx [orig:148 D.7110 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:148 D.7110 ] [148])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:148 D.7110 ] [148])
                (const_int 5 [0x5]))
            (nil))))
(insn 220 219 221 8 (parallel [
            (set (reg:DI 0 ax [300])
                (ashift:DI (reg:DI 0 ax [299])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [299])
        (nil)))
(insn 221 220 222 8 (set (reg:DI 0 ax [299])
        (reg:DI 0 ax [300])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (nil)))
(insn 222 221 223 8 (set (reg:DI 0 ax [orig:149 D.7110 ] [149])
        (reg:DI 0 ax [299])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [299])
        (nil)))
(insn 223 222 224 8 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.7109 ] [150])
                (plus:DI (reg:DI 0 ax [orig:149 D.7110 ] [149])
                    (reg/f:DI 2 cx [orig:147 D.7109 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:149 D.7110 ] [149])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:147 D.7109 ] [147])
            (nil))))
(insn 224 223 225 8 (set (reg:XF 8 st [orig:151 D.7108 ] [151])
        (mem/j:XF (plus:DI (reg/f:DI 0 ax [orig:150 D.7109 ] [150])
                (const_int 48 [0x30])) [0 _98->st_point+0 S16 A128])) mABM.c:341 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:150 D.7109 ] [150])
        (nil)))
(insn 225 224 226 8 (set (reg:XF 9 st(1) [301])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:341 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 226 225 227 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:151 D.7108 ] [151])
            (reg:XF 9 st(1) [301]))) mABM.c:341 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [301])
        (nil)))
(jump_insn 227 226 535 8 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) mABM.c:341 612 {*jcc_1}
     (nil)
 -> 261)
;;  succ:       11
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 17 [flags] 302
(note 535 227 228 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 228 535 229 9 (set (reg:XF 9 st(1) [302])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:341 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 229 228 230 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:151 D.7108 ] [151])
            (reg:XF 9 st(1) [302]))) mABM.c:341 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [302])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:151 D.7108 ] [151])
            (nil))))
(jump_insn 230 229 234 9 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 261)
            (pc))) mABM.c:341 612 {*jcc_1}
     (nil)
 -> 261)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 156 157 158 159 160 303 304 305 306 307 308 309 310
(note 234 230 235 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 10 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 236 235 237 10 (set (reg/f:DI 2 cx [orig:152 D.7109 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [303]) [0 *f_9(D)+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [303])
        (nil)))
(insn 237 236 238 10 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:341 89 {*movsi_internal}
     (nil))
(insn 238 237 239 10 (set (reg:DI 1 dx [orig:153 D.7110 ] [153])
        (sign_extend:DI (reg:SI 0 ax [304]))) mABM.c:341 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [304])
        (nil)))
(insn 239 238 240 10 (set (reg:DI 0 ax [305])
        (reg:DI 1 dx [orig:153 D.7110 ] [153])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 240 239 241 10 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [305])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (nil))
(insn 241 240 242 10 (parallel [
            (set (reg:DI 0 ax [305])
                (plus:DI (reg:DI 0 ax [305])
                    (reg:DI 1 dx [orig:153 D.7110 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:153 D.7110 ] [153])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:153 D.7110 ] [153])
                (const_int 5 [0x5]))
            (nil))))
(insn 242 241 243 10 (parallel [
            (set (reg:DI 0 ax [306])
                (ashift:DI (reg:DI 0 ax [305])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [305])
        (nil)))
(insn 243 242 244 10 (set (reg:DI 0 ax [305])
        (reg:DI 0 ax [306])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [306])
        (nil)))
(insn 244 243 245 10 (set (reg:DI 0 ax [orig:154 D.7110 ] [154])
        (reg:DI 0 ax [305])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [305])
        (nil)))
(insn 245 244 246 10 (parallel [
            (set (reg/f:DI 2 cx [orig:155 D.7109 ] [155])
                (plus:DI (reg/f:DI 2 cx [orig:152 D.7109 ] [152])
                    (reg:DI 0 ax [orig:154 D.7110 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:154 D.7110 ] [154])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:152 D.7109 ] [152])
            (nil))))
(insn 246 245 247 10 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 247 246 248 10 (set (reg/f:DI 4 si [orig:156 D.7109 ] [156])
        (mem/f:DI (reg/f:DI 0 ax [307]) [0 *f_9(D)+0 S8 A64])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [307])
        (nil)))
(insn 248 247 249 10 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:341 89 {*movsi_internal}
     (nil))
(insn 249 248 250 10 (set (reg:DI 1 dx [orig:157 D.7110 ] [157])
        (sign_extend:DI (reg:SI 0 ax [308]))) mABM.c:341 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [308])
        (nil)))
(insn 250 249 251 10 (set (reg:DI 0 ax [309])
        (reg:DI 1 dx [orig:157 D.7110 ] [157])) mABM.c:341 87 {*movdi_internal_rex64}
     (nil))
(insn 251 250 252 10 (parallel [
            (set (reg:DI 0 ax [309])
                (ashift:DI (reg:DI 0 ax [309])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (nil))
(insn 252 251 253 10 (parallel [
            (set (reg:DI 0 ax [309])
                (plus:DI (reg:DI 0 ax [309])
                    (reg:DI 1 dx [orig:157 D.7110 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:157 D.7110 ] [157])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:157 D.7110 ] [157])
                (const_int 5 [0x5]))
            (nil))))
(insn 253 252 254 10 (parallel [
            (set (reg:DI 0 ax [310])
                (ashift:DI (reg:DI 0 ax [309])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [309])
        (nil)))
(insn 254 253 255 10 (set (reg:DI 0 ax [309])
        (reg:DI 0 ax [310])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [310])
        (nil)))
(insn 255 254 256 10 (set (reg:DI 0 ax [orig:158 D.7110 ] [158])
        (reg:DI 0 ax [309])) mABM.c:341 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [309])
        (nil)))
(insn 256 255 257 10 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.7109 ] [159])
                (plus:DI (reg:DI 0 ax [orig:158 D.7110 ] [158])
                    (reg/f:DI 4 si [orig:156 D.7109 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:341 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:158 D.7110 ] [158])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:156 D.7109 ] [156])
            (nil))))
(insn 257 256 258 10 (set (reg:SI 0 ax [orig:160 D.7107 ] [160])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:159 D.7109 ] [159])
                (const_int 4 [0x4])) [0 _107->n_nvp+0 S4 A32])) mABM.c:341 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.7109 ] [159])
        (nil)))
(insn 258 257 545 10 (set (mem/j:SI (plus:DI (reg/f:DI 2 cx [orig:155 D.7109 ] [155])
                (const_int 44 [0x2c])) [0 _103->st_indx+0 S4 A32])
        (reg:SI 0 ax [orig:160 D.7107 ] [160])) mABM.c:341 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:160 D.7107 ] [160])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:155 D.7109 ] [155])
            (nil))))
(jump_insn 545 258 546 10 (set (pc)
        (label_ref 343)) 650 {jump}
     (nil)
 -> 343)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 546 545 261)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334
(code_label 261 546 262 11 111 "" [2 uses])
(note 262 261 263 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 11 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 264 263 265 11 (set (reg/f:DI 2 cx [orig:161 D.7109 ] [161])
        (mem/f:DI (reg/f:DI 0 ax [311]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [311])
        (nil)))
(insn 265 264 266 11 (set (reg:SI 0 ax [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 266 265 267 11 (set (reg:DI 1 dx [orig:162 D.7110 ] [162])
        (sign_extend:DI (reg:SI 0 ax [312]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [312])
        (nil)))
(insn 267 266 268 11 (set (reg:DI 0 ax [313])
        (reg:DI 1 dx [orig:162 D.7110 ] [162])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 268 267 269 11 (parallel [
            (set (reg:DI 0 ax [313])
                (ashift:DI (reg:DI 0 ax [313])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 269 268 270 11 (parallel [
            (set (reg:DI 0 ax [313])
                (plus:DI (reg:DI 0 ax [313])
                    (reg:DI 1 dx [orig:162 D.7110 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:162 D.7110 ] [162])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:162 D.7110 ] [162])
                (const_int 5 [0x5]))
            (nil))))
(insn 270 269 271 11 (parallel [
            (set (reg:DI 0 ax [314])
                (ashift:DI (reg:DI 0 ax [313])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [313])
        (nil)))
(insn 271 270 272 11 (set (reg:DI 0 ax [313])
        (reg:DI 0 ax [314])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [314])
        (nil)))
(insn 272 271 273 11 (set (reg:DI 0 ax [orig:163 D.7110 ] [163])
        (reg:DI 0 ax [313])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [313])
        (nil)))
(insn 273 272 274 11 (parallel [
            (set (reg/f:DI 3 bx [orig:164 D.7109 ] [164])
                (plus:DI (reg/f:DI 2 cx [orig:161 D.7109 ] [161])
                    (reg:DI 0 ax [orig:163 D.7110 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:163 D.7110 ] [163])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:161 D.7109 ] [161])
            (nil))))
(insn 274 273 275 11 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 275 274 276 11 (set (reg/f:DI 2 cx [orig:165 D.7109 ] [165])
        (mem/f:DI (reg/f:DI 0 ax [315]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [315])
        (nil)))
(insn 276 275 277 11 (set (reg:SI 0 ax [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 277 276 278 11 (set (reg:DI 1 dx [orig:166 D.7110 ] [166])
        (sign_extend:DI (reg:SI 0 ax [316]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [316])
        (nil)))
(insn 278 277 279 11 (set (reg:DI 0 ax [317])
        (reg:DI 1 dx [orig:166 D.7110 ] [166])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 279 278 280 11 (parallel [
            (set (reg:DI 0 ax [317])
                (ashift:DI (reg:DI 0 ax [317])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 280 279 281 11 (parallel [
            (set (reg:DI 0 ax [317])
                (plus:DI (reg:DI 0 ax [317])
                    (reg:DI 1 dx [orig:166 D.7110 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:166 D.7110 ] [166])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.7110 ] [166])
                (const_int 5 [0x5]))
            (nil))))
(insn 281 280 282 11 (parallel [
            (set (reg:DI 0 ax [318])
                (ashift:DI (reg:DI 0 ax [317])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [317])
        (nil)))
(insn 282 281 283 11 (set (reg:DI 0 ax [317])
        (reg:DI 0 ax [318])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [318])
        (nil)))
(insn 283 282 284 11 (set (reg:DI 0 ax [orig:167 D.7110 ] [167])
        (reg:DI 0 ax [317])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [317])
        (nil)))
(insn 284 283 285 11 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.7109 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 D.7110 ] [167])
                    (reg/f:DI 2 cx [orig:165 D.7109 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:167 D.7110 ] [167])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:165 D.7109 ] [165])
            (nil))))
(insn 285 284 286 11 (set (reg/f:DI 0 ax [orig:169 D.7111 ] [169])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:168 D.7109 ] [168])
                (const_int 32 [0x20])) [0 _116->pos+0 S8 A128])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:168 D.7109 ] [168])
        (nil)))
(insn 286 285 287 11 (set (reg/f:DI 37 r8 [orig:170 D.7113 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 D.7111 ] [169]) [0 *_117+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:169 D.7111 ] [169])
        (nil)))
(insn 287 286 288 11 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 288 287 289 11 (set (reg/f:DI 2 cx [orig:171 D.7109 ] [171])
        (mem/f:DI (reg/f:DI 0 ax [319]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [319])
        (nil)))
(insn 289 288 290 11 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 290 289 291 11 (set (reg:DI 1 dx [orig:172 D.7110 ] [172])
        (sign_extend:DI (reg:SI 0 ax [320]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [320])
        (nil)))
(insn 291 290 292 11 (set (reg:DI 0 ax [321])
        (reg:DI 1 dx [orig:172 D.7110 ] [172])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 292 291 293 11 (parallel [
            (set (reg:DI 0 ax [321])
                (ashift:DI (reg:DI 0 ax [321])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 293 292 294 11 (parallel [
            (set (reg:DI 0 ax [321])
                (plus:DI (reg:DI 0 ax [321])
                    (reg:DI 1 dx [orig:172 D.7110 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:172 D.7110 ] [172])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:172 D.7110 ] [172])
                (const_int 5 [0x5]))
            (nil))))
(insn 294 293 295 11 (parallel [
            (set (reg:DI 0 ax [322])
                (ashift:DI (reg:DI 0 ax [321])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [321])
        (nil)))
(insn 295 294 296 11 (set (reg:DI 0 ax [321])
        (reg:DI 0 ax [322])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [322])
        (nil)))
(insn 296 295 297 11 (set (reg:DI 0 ax [orig:173 D.7110 ] [173])
        (reg:DI 0 ax [321])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [321])
        (nil)))
(insn 297 296 298 11 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.7109 ] [174])
                (plus:DI (reg:DI 0 ax [orig:173 D.7110 ] [173])
                    (reg/f:DI 2 cx [orig:171 D.7109 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:173 D.7110 ] [173])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:171 D.7109 ] [171])
            (nil))))
(insn 298 297 299 11 (set (reg:SI 2 cx [orig:175 D.7107 ] [175])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:174 D.7109 ] [174])
                (const_int 44 [0x2c])) [0 _122->st_indx+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:174 D.7109 ] [174])
        (nil)))
(insn 299 298 300 11 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 300 299 301 11 (set (reg/f:DI 4 si [orig:176 D.7109 ] [176])
        (mem/f:DI (reg/f:DI 0 ax [323]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [323])
        (nil)))
(insn 301 300 302 11 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 302 301 303 11 (set (reg:DI 1 dx [orig:177 D.7110 ] [177])
        (sign_extend:DI (reg:SI 0 ax [324]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [324])
        (nil)))
(insn 303 302 304 11 (set (reg:DI 0 ax [325])
        (reg:DI 1 dx [orig:177 D.7110 ] [177])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 304 303 305 11 (parallel [
            (set (reg:DI 0 ax [325])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 305 304 306 11 (parallel [
            (set (reg:DI 0 ax [325])
                (plus:DI (reg:DI 0 ax [325])
                    (reg:DI 1 dx [orig:177 D.7110 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:177 D.7110 ] [177])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:177 D.7110 ] [177])
                (const_int 5 [0x5]))
            (nil))))
(insn 306 305 307 11 (parallel [
            (set (reg:DI 0 ax [326])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [325])
        (nil)))
(insn 307 306 308 11 (set (reg:DI 0 ax [325])
        (reg:DI 0 ax [326])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [326])
        (nil)))
(insn 308 307 309 11 (set (reg:DI 0 ax [orig:178 D.7110 ] [178])
        (reg:DI 0 ax [325])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [325])
        (nil)))
(insn 309 308 310 11 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.7109 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.7110 ] [178])
                    (reg/f:DI 4 si [orig:176 D.7109 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:178 D.7110 ] [178])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:176 D.7109 ] [176])
            (nil))))
(insn 310 309 311 11 (parallel [
            (set (reg/f:DI 5 di [orig:180 D.7114 ] [180])
                (plus:DI (reg/f:DI 0 ax [orig:179 D.7109 ] [179])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:179 D.7109 ] [179])
        (nil)))
(insn 311 310 312 11 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 312 311 313 11 (set (reg/f:DI 4 si [orig:181 D.7109 ] [181])
        (mem/f:DI (reg/f:DI 0 ax [327]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [327])
        (nil)))
(insn 313 312 314 11 (set (reg:SI 0 ax [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 314 313 315 11 (set (reg:DI 1 dx [orig:182 D.7110 ] [182])
        (sign_extend:DI (reg:SI 0 ax [328]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [328])
        (nil)))
(insn 315 314 316 11 (set (reg:DI 0 ax [329])
        (reg:DI 1 dx [orig:182 D.7110 ] [182])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 316 315 317 11 (parallel [
            (set (reg:DI 0 ax [329])
                (ashift:DI (reg:DI 0 ax [329])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 317 316 318 11 (parallel [
            (set (reg:DI 0 ax [329])
                (plus:DI (reg:DI 0 ax [329])
                    (reg:DI 1 dx [orig:182 D.7110 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:182 D.7110 ] [182])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:182 D.7110 ] [182])
                (const_int 5 [0x5]))
            (nil))))
(insn 318 317 319 11 (parallel [
            (set (reg:DI 0 ax [330])
                (ashift:DI (reg:DI 0 ax [329])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [329])
        (nil)))
(insn 319 318 320 11 (set (reg:DI 0 ax [329])
        (reg:DI 0 ax [330])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [330])
        (nil)))
(insn 320 319 321 11 (set (reg:DI 0 ax [orig:183 D.7110 ] [183])
        (reg:DI 0 ax [329])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [329])
        (nil)))
(insn 321 320 322 11 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.7109 ] [184])
                (plus:DI (reg:DI 0 ax [orig:183 D.7110 ] [183])
                    (reg/f:DI 4 si [orig:181 D.7109 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:183 D.7110 ] [183])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:181 D.7109 ] [181])
            (nil))))
(insn 322 321 323 11 (set (reg:SI 4 si [orig:185 D.7107 ] [185])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:184 D.7109 ] [184])
                (const_int 4 [0x4])) [0 _132->n_nvp+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:184 D.7109 ] [184])
        (nil)))
(insn 323 322 324 11 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 324 323 325 11 (set (reg/f:DI 38 r9 [orig:186 D.7109 ] [186])
        (mem/f:DI (reg/f:DI 0 ax [331]) [0 *f_9(D)+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [331])
        (nil)))
(insn 325 324 326 11 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:342 89 {*movsi_internal}
     (nil))
(insn 326 325 327 11 (set (reg:DI 1 dx [orig:187 D.7110 ] [187])
        (sign_extend:DI (reg:SI 0 ax [332]))) mABM.c:342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [332])
        (nil)))
(insn 327 326 328 11 (set (reg:DI 0 ax [333])
        (reg:DI 1 dx [orig:187 D.7110 ] [187])) mABM.c:342 87 {*movdi_internal_rex64}
     (nil))
(insn 328 327 329 11 (parallel [
            (set (reg:DI 0 ax [333])
                (ashift:DI (reg:DI 0 ax [333])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (nil))
(insn 329 328 330 11 (parallel [
            (set (reg:DI 0 ax [333])
                (plus:DI (reg:DI 0 ax [333])
                    (reg:DI 1 dx [orig:187 D.7110 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:187 D.7110 ] [187])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:187 D.7110 ] [187])
                (const_int 5 [0x5]))
            (nil))))
(insn 330 329 331 11 (parallel [
            (set (reg:DI 0 ax [334])
                (ashift:DI (reg:DI 0 ax [333])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [333])
        (nil)))
(insn 331 330 332 11 (set (reg:DI 0 ax [333])
        (reg:DI 0 ax [334])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [334])
        (nil)))
(insn 332 331 333 11 (set (reg:DI 0 ax [orig:188 D.7110 ] [188])
        (reg:DI 0 ax [333])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [333])
        (nil)))
(insn 333 332 334 11 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.7109 ] [189])
                (plus:DI (reg:DI 0 ax [orig:188 D.7110 ] [188])
                    (reg/f:DI 38 r9 [orig:186 D.7109 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:342 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:188 D.7110 ] [188])
        (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:186 D.7109 ] [186])
            (nil))))
(insn 334 333 335 11 (set (reg/f:DI 0 ax [orig:190 D.7111 ] [190])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:189 D.7109 ] [189])
                (const_int 8 [0x8])) [0 _137->nvp+0 S8 A64])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:189 D.7109 ] [189])
        (nil)))
(insn 335 334 336 11 (set (reg:DI 37 r8)
        (reg/f:DI 37 r8 [orig:170 D.7113 ] [170])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:170 D.7113 ] [170])
        (nil)))
(insn 336 335 337 11 (set (reg:SI 2 cx)
        (reg:SI 2 cx [orig:175 D.7107 ] [175])) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:175 D.7107 ] [175])
        (nil)))
(insn 337 336 338 11 (set (reg:DI 1 dx)
        (reg/f:DI 5 di [orig:180 D.7114 ] [180])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:180 D.7114 ] [180])
        (nil)))
(insn 338 337 339 11 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:185 D.7107 ] [185])) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:185 D.7107 ] [185])
        (nil)))
(insn 339 338 340 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:190 D.7111 ] [190])) mABM.c:342 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:190 D.7111 ] [190])
        (nil)))
(call_insn 340 339 341 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_st_indx") [flags 0x41]  <function_decl 0x7f05a595e500 find_st_indx>) [0 find_st_indx S1 A8])
            (const_int 0 [0]))) mABM.c:342 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 341 340 342 11 (set (reg:SI 0 ax [orig:191 D.7107 ] [191])
        (reg:SI 0 ax)) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 342 341 343 11 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:164 D.7109 ] [164])
                (const_int 44 [0x2c])) [0 _112->st_indx+0 S4 A32])
        (reg:SI 0 ax [orig:191 D.7107 ] [191])) mABM.c:342 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:191 D.7107 ] [191])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:164 D.7109 ] [164])
            (nil))))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192 193 194 195 196 335 336 337 338
(code_label 343 342 344 12 113 "" [1 uses])
(note 344 343 345 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 345 344 346 12 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:345 87 {*movdi_internal_rex64}
     (nil))
(insn 346 345 347 12 (set (reg/f:DI 2 cx [orig:192 D.7109 ] [192])
        (mem/f:DI (reg/f:DI 0 ax [335]) [0 *f_9(D)+0 S8 A64])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [335])
        (nil)))
(insn 347 346 348 12 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:345 89 {*movsi_internal}
     (nil))
(insn 348 347 349 12 (set (reg:DI 1 dx [orig:193 D.7110 ] [193])
        (sign_extend:DI (reg:SI 0 ax [336]))) mABM.c:345 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [336])
        (nil)))
(insn 349 348 350 12 (set (reg:DI 0 ax [337])
        (reg:DI 1 dx [orig:193 D.7110 ] [193])) mABM.c:345 87 {*movdi_internal_rex64}
     (nil))
(insn 350 349 351 12 (parallel [
            (set (reg:DI 0 ax [337])
                (ashift:DI (reg:DI 0 ax [337])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 513 {*ashldi3_1}
     (nil))
(insn 351 350 352 12 (parallel [
            (set (reg:DI 0 ax [337])
                (plus:DI (reg:DI 0 ax [337])
                    (reg:DI 1 dx [orig:193 D.7110 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:193 D.7110 ] [193])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:193 D.7110 ] [193])
                (const_int 5 [0x5]))
            (nil))))
(insn 352 351 353 12 (parallel [
            (set (reg:DI 0 ax [338])
                (ashift:DI (reg:DI 0 ax [337])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [337])
        (nil)))
(insn 353 352 354 12 (set (reg:DI 0 ax [337])
        (reg:DI 0 ax [338])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [338])
        (nil)))
(insn 354 353 355 12 (set (reg:DI 0 ax [orig:194 D.7110 ] [194])
        (reg:DI 0 ax [337])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [337])
        (nil)))
(insn 355 354 356 12 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.7109 ] [195])
                (plus:DI (reg:DI 0 ax [orig:194 D.7110 ] [194])
                    (reg/f:DI 2 cx [orig:192 D.7109 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:194 D.7110 ] [194])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:192 D.7109 ] [192])
            (nil))))
(insn 356 355 357 12 (set (reg:SI 0 ax [orig:196 D.7107 ] [196])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:195 D.7109 ] [195])
                (const_int 40 [0x28])) [0 _143->ready+0 S4 A64])) mABM.c:345 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:195 D.7109 ] [195])
        (nil)))
(insn 357 356 358 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:196 D.7107 ] [196])
            (const_int 0 [0]))) mABM.c:345 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:196 D.7107 ] [196])
        (nil)))
(jump_insn 358 357 359 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 468)
            (pc))) mABM.c:345 612 {*jcc_1}
     (nil)
 -> 468)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 197 198 199 200 201 339 340 341 342
(note 359 358 360 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 13 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:345 87 {*movdi_internal_rex64}
     (nil))
(insn 361 360 362 13 (set (reg/f:DI 2 cx [orig:197 D.7109 ] [197])
        (mem/f:DI (reg/f:DI 0 ax [339]) [0 *f_9(D)+0 S8 A64])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [339])
        (nil)))
(insn 362 361 363 13 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:345 89 {*movsi_internal}
     (nil))
(insn 363 362 364 13 (set (reg:DI 1 dx [orig:198 D.7110 ] [198])
        (sign_extend:DI (reg:SI 0 ax [340]))) mABM.c:345 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [340])
        (nil)))
(insn 364 363 365 13 (set (reg:DI 0 ax [341])
        (reg:DI 1 dx [orig:198 D.7110 ] [198])) mABM.c:345 87 {*movdi_internal_rex64}
     (nil))
(insn 365 364 366 13 (parallel [
            (set (reg:DI 0 ax [341])
                (ashift:DI (reg:DI 0 ax [341])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 513 {*ashldi3_1}
     (nil))
(insn 366 365 367 13 (parallel [
            (set (reg:DI 0 ax [341])
                (plus:DI (reg:DI 0 ax [341])
                    (reg:DI 1 dx [orig:198 D.7110 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:198 D.7110 ] [198])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:198 D.7110 ] [198])
                (const_int 5 [0x5]))
            (nil))))
(insn 367 366 368 13 (parallel [
            (set (reg:DI 0 ax [342])
                (ashift:DI (reg:DI 0 ax [341])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [341])
        (nil)))
(insn 368 367 369 13 (set (reg:DI 0 ax [341])
        (reg:DI 0 ax [342])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [342])
        (nil)))
(insn 369 368 370 13 (set (reg:DI 0 ax [orig:199 D.7110 ] [199])
        (reg:DI 0 ax [341])) mABM.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [341])
        (nil)))
(insn 370 369 371 13 (parallel [
            (set (reg/f:DI 0 ax [orig:200 D.7109 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 D.7110 ] [199])
                    (reg/f:DI 2 cx [orig:197 D.7109 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:345 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:199 D.7110 ] [199])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:197 D.7109 ] [197])
            (nil))))
(insn 371 370 372 13 (set (reg:SI 0 ax [orig:201 D.7107 ] [201])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:200 D.7109 ] [200])
                (const_int 44 [0x2c])) [0 _148->st_indx+0 S4 A32])) mABM.c:345 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:200 D.7109 ] [200])
        (nil)))
(insn 372 371 373 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:201 D.7107 ] [201])
            (const_int -1 [0xffffffffffffffff]))) mABM.c:345 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:201 D.7107 ] [201])
        (nil)))
(jump_insn 373 372 374 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 468)
            (pc))) mABM.c:345 612 {*jcc_1}
     (nil)
 -> 468)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
(note 374 373 375 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 14 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:346 87 {*movdi_internal_rex64}
     (nil))
(insn 376 375 377 14 (set (reg/f:DI 2 cx [orig:202 D.7109 ] [202])
        (mem/f:DI (reg/f:DI 0 ax [343]) [0 *f_9(D)+0 S8 A64])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [343])
        (nil)))
(insn 377 376 378 14 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:346 89 {*movsi_internal}
     (nil))
(insn 378 377 379 14 (set (reg:DI 1 dx [orig:203 D.7110 ] [203])
        (sign_extend:DI (reg:SI 0 ax [344]))) mABM.c:346 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [344])
        (nil)))
(insn 379 378 380 14 (set (reg:DI 0 ax [345])
        (reg:DI 1 dx [orig:203 D.7110 ] [203])) mABM.c:346 87 {*movdi_internal_rex64}
     (nil))
(insn 380 379 381 14 (parallel [
            (set (reg:DI 0 ax [345])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:346 513 {*ashldi3_1}
     (nil))
(insn 381 380 382 14 (parallel [
            (set (reg:DI 0 ax [345])
                (plus:DI (reg:DI 0 ax [345])
                    (reg:DI 1 dx [orig:203 D.7110 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:346 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:203 D.7110 ] [203])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.7110 ] [203])
                (const_int 5 [0x5]))
            (nil))))
(insn 382 381 383 14 (parallel [
            (set (reg:DI 0 ax [346])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:346 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [345])
        (nil)))
(insn 383 382 384 14 (set (reg:DI 0 ax [345])
        (reg:DI 0 ax [346])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [346])
        (nil)))
(insn 384 383 385 14 (set (reg:DI 0 ax [orig:204 D.7110 ] [204])
        (reg:DI 0 ax [345])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [345])
        (nil)))
(insn 385 384 386 14 (parallel [
            (set (reg/f:DI 37 r8 [orig:205 D.7109 ] [205])
                (plus:DI (reg/f:DI 2 cx [orig:202 D.7109 ] [202])
                    (reg:DI 0 ax [orig:204 D.7110 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:346 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:204 D.7110 ] [204])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:202 D.7109 ] [202])
            (nil))))
(insn 386 385 387 14 (parallel [
            (set (reg:DI 1 dx [347])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:346 274 {*adddi_1}
     (nil))
(insn 387 386 388 14 (set (reg:DI 4 si [348])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:346 267 {*leadi}
     (nil))
(insn 388 387 557 14 (set (reg:DI 0 ax [349])
        (const_int 38 [0x26])) mABM.c:346 87 {*movdi_internal_rex64}
     (nil))
(insn 557 388 558 14 (set (reg:DI 5 di [347])
        (reg:DI 1 dx [347])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [347])
        (nil)))
(insn 558 557 389 14 (set (reg:DI 2 cx [349])
        (reg:DI 0 ax [349])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [349])
        (nil)))
(insn 389 558 390 14 (parallel [
            (set (reg:DI 2 cx [349])
                (const_int 0 [0]))
            (set (reg:DI 5 di [347])
                (plus:DI (ashift:DI (reg:DI 2 cx [349])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [347])))
            (set (reg:DI 4 si [348])
                (plus:DI (ashift:DI (reg:DI 2 cx [349])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [348])))
            (set (mem:BLK (reg:DI 5 di [347]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [348]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [349]))
        ]) mABM.c:346 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [349])
        (expr_list:REG_UNUSED (reg:DI 5 di [347])
            (expr_list:REG_UNUSED (reg:DI 4 si [348])
                (nil)))))
(insn 390 389 391 14 (set (reg:DI 1 dx [350])
        (reg/f:DI 7 sp)) mABM.c:346 87 {*movdi_internal_rex64}
     (nil))
(insn 391 390 392 14 (set (reg:DI 4 si [351])
        (reg/f:DI 37 r8 [orig:205 D.7109 ] [205])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:205 D.7109 ] [205])
        (nil)))
(insn 392 391 559 14 (set (reg:DI 0 ax [352])
        (const_int 20 [0x14])) mABM.c:346 87 {*movdi_internal_rex64}
     (nil))
(insn 559 392 560 14 (set (reg:DI 5 di [350])
        (reg:DI 1 dx [350])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [350])
        (nil)))
(insn 560 559 393 14 (set (reg:DI 2 cx [352])
        (reg:DI 0 ax [352])) mABM.c:346 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [352])
        (nil)))
(insn 393 560 394 14 (parallel [
            (set (reg:DI 2 cx [352])
                (const_int 0 [0]))
            (set (reg:DI 5 di [350])
                (plus:DI (ashift:DI (reg:DI 2 cx [352])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [350])))
            (set (reg:DI 4 si [351])
                (plus:DI (ashift:DI (reg:DI 2 cx [352])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [351])))
            (set (mem:BLK (reg:DI 5 di [350]) [0  S160 A128])
                (mem:BLK (reg:DI 4 si [351]) [0 *_153+0 S160 A128]))
            (use (reg:DI 2 cx [352]))
        ]) mABM.c:346 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [352])
        (expr_list:REG_UNUSED (reg:DI 5 di [350])
            (expr_list:REG_UNUSED (reg:DI 4 si [351])
                (nil)))))
(call_insn 394 393 395 14 (call (mem:QI (symbol_ref:DI ("plot_pos") [flags 0x41]  <function_decl 0x7f05a596b000 plot_pos>) [0 plot_pos S1 A8])
        (const_int 464 [0x1d0])) mABM.c:346 656 {*call}
     (nil)
    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S160 A128]))
        (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                        (const_int 160 [0xa0])) [0  S304 A128]))
            (nil))))
(insn 395 394 396 14 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(insn 396 395 397 14 (set (reg/f:DI 2 cx [orig:206 D.7109 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [353]) [0 *f_9(D)+0 S8 A64])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [353])
        (nil)))
(insn 397 396 398 14 (set (reg:SI 0 ax [354])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:347 89 {*movsi_internal}
     (nil))
(insn 398 397 399 14 (set (reg:DI 1 dx [orig:207 D.7110 ] [207])
        (sign_extend:DI (reg:SI 0 ax [354]))) mABM.c:347 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [354])
        (nil)))
(insn 399 398 400 14 (set (reg:DI 0 ax [355])
        (reg:DI 1 dx [orig:207 D.7110 ] [207])) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(insn 400 399 401 14 (parallel [
            (set (reg:DI 0 ax [355])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:347 513 {*ashldi3_1}
     (nil))
(insn 401 400 402 14 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg:DI 0 ax [355])
                    (reg:DI 1 dx [orig:207 D.7110 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:347 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:207 D.7110 ] [207])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:207 D.7110 ] [207])
                (const_int 5 [0x5]))
            (nil))))
(insn 402 401 403 14 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:347 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [355])
        (nil)))
(insn 403 402 404 14 (set (reg:DI 0 ax [355])
        (reg:DI 0 ax [356])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [356])
        (nil)))
(insn 404 403 405 14 (set (reg:DI 0 ax [orig:208 D.7110 ] [208])
        (reg:DI 0 ax [355])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [355])
        (nil)))
(insn 405 404 406 14 (parallel [
            (set (reg/f:DI 37 r8 [orig:209 D.7109 ] [209])
                (plus:DI (reg/f:DI 2 cx [orig:206 D.7109 ] [206])
                    (reg:DI 0 ax [orig:208 D.7110 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:347 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:208 D.7110 ] [208])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:206 D.7109 ] [206])
            (nil))))
(insn 406 405 407 14 (parallel [
            (set (reg:DI 1 dx [357])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:347 274 {*adddi_1}
     (nil))
(insn 407 406 408 14 (set (reg:DI 4 si [358])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:347 267 {*leadi}
     (nil))
(insn 408 407 561 14 (set (reg:DI 0 ax [359])
        (const_int 38 [0x26])) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(insn 561 408 562 14 (set (reg:DI 5 di [357])
        (reg:DI 1 dx [357])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [357])
        (nil)))
(insn 562 561 409 14 (set (reg:DI 2 cx [359])
        (reg:DI 0 ax [359])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [359])
        (nil)))
(insn 409 562 410 14 (parallel [
            (set (reg:DI 2 cx [359])
                (const_int 0 [0]))
            (set (reg:DI 5 di [357])
                (plus:DI (ashift:DI (reg:DI 2 cx [359])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [357])))
            (set (reg:DI 4 si [358])
                (plus:DI (ashift:DI (reg:DI 2 cx [359])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [358])))
            (set (mem:BLK (reg:DI 5 di [357]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [358]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [359]))
        ]) mABM.c:347 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [359])
        (expr_list:REG_UNUSED (reg:DI 5 di [357])
            (expr_list:REG_UNUSED (reg:DI 4 si [358])
                (nil)))))
(insn 410 409 411 14 (set (reg:DI 1 dx [360])
        (reg/f:DI 7 sp)) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(insn 411 410 412 14 (set (reg:DI 4 si [361])
        (reg/f:DI 37 r8 [orig:209 D.7109 ] [209])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:209 D.7109 ] [209])
        (nil)))
(insn 412 411 563 14 (set (reg:DI 0 ax [362])
        (const_int 20 [0x14])) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(insn 563 412 564 14 (set (reg:DI 5 di [360])
        (reg:DI 1 dx [360])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [360])
        (nil)))
(insn 564 563 413 14 (set (reg:DI 2 cx [362])
        (reg:DI 0 ax [362])) mABM.c:347 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [362])
        (nil)))
(insn 413 564 414 14 (parallel [
            (set (reg:DI 2 cx [362])
                (const_int 0 [0]))
            (set (reg:DI 5 di [360])
                (plus:DI (ashift:DI (reg:DI 2 cx [362])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [360])))
            (set (reg:DI 4 si [361])
                (plus:DI (ashift:DI (reg:DI 2 cx [362])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [361])))
            (set (mem:BLK (reg:DI 5 di [360]) [0  S160 A128])
                (mem:BLK (reg:DI 4 si [361]) [0 *_157+0 S160 A128]))
            (use (reg:DI 2 cx [362]))
        ]) mABM.c:347 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [362])
        (expr_list:REG_UNUSED (reg:DI 5 di [360])
            (expr_list:REG_UNUSED (reg:DI 4 si [361])
                (nil)))))
(insn 414 413 415 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f05a55ad8e8 *.LC20>)) mABM.c:347 87 {*movdi_internal_rex64}
     (nil))
(call_insn 415 414 416 14 (call (mem:QI (symbol_ref:DI ("plot") [flags 0x41]  <function_decl 0x7f05a5963d00 plot>) [0 plot S1 A8])
        (const_int 464 [0x1d0])) mABM.c:347 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S160 A128]))
            (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                            (const_int 160 [0xa0])) [0  S304 A128]))
                (nil)))))
(insn 416 415 417 14 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:348 87 {*movdi_internal_rex64}
     (nil))
(insn 417 416 418 14 (set (reg/f:DI 2 cx [orig:210 D.7109 ] [210])
        (mem/f:DI (reg/f:DI 0 ax [363]) [0 *f_9(D)+0 S8 A64])) mABM.c:348 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [363])
        (nil)))
(insn 418 417 419 14 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:348 89 {*movsi_internal}
     (nil))
(insn 419 418 420 14 (set (reg:DI 1 dx [orig:211 D.7110 ] [211])
        (sign_extend:DI (reg:SI 0 ax [364]))) mABM.c:348 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [364])
        (nil)))
(insn 420 419 421 14 (set (reg:DI 0 ax [365])
        (reg:DI 1 dx [orig:211 D.7110 ] [211])) mABM.c:348 87 {*movdi_internal_rex64}
     (nil))
(insn 421 420 422 14 (parallel [
            (set (reg:DI 0 ax [365])
                (ashift:DI (reg:DI 0 ax [365])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:348 513 {*ashldi3_1}
     (nil))
(insn 422 421 423 14 (parallel [
            (set (reg:DI 0 ax [365])
                (plus:DI (reg:DI 0 ax [365])
                    (reg:DI 1 dx [orig:211 D.7110 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:348 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:211 D.7110 ] [211])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:211 D.7110 ] [211])
                (const_int 5 [0x5]))
            (nil))))
(insn 423 422 424 14 (parallel [
            (set (reg:DI 0 ax [366])
                (ashift:DI (reg:DI 0 ax [365])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:348 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [365])
        (nil)))
(insn 424 423 425 14 (set (reg:DI 0 ax [365])
        (reg:DI 0 ax [366])) mABM.c:348 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [366])
        (nil)))
(insn 425 424 426 14 (set (reg:DI 0 ax [orig:212 D.7110 ] [212])
        (reg:DI 0 ax [365])) mABM.c:348 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [365])
        (nil)))
(insn 426 425 427 14 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.7109 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 D.7110 ] [212])
                    (reg/f:DI 2 cx [orig:210 D.7109 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:348 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:212 D.7110 ] [212])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:210 D.7109 ] [210])
            (nil))))
(insn 427 426 428 14 (set (reg:SI 0 ax [orig:214 D.7107 ] [214])
        (mem/j:SI (reg/f:DI 0 ax [orig:213 D.7109 ] [213]) [0 _161->ID+0 S4 A128])) mABM.c:348 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:213 D.7109 ] [213])
        (nil)))
(insn 428 427 429 14 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:214 D.7107 ] [214])) mABM.c:348 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:214 D.7107 ] [214])
        (nil)))
(insn 429 428 430 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f05a55ad980 *.LC21>)) mABM.c:348 87 {*movdi_internal_rex64}
     (nil))
(insn 430 429 431 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:348 91 {*movqi_internal}
     (nil))
(call_insn 431 430 432 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f05a58b2f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mABM.c:348 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
(insn 432 431 433 14 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:349 87 {*movdi_internal_rex64}
     (nil))
(insn 433 432 434 14 (set (reg/f:DI 2 cx [orig:215 D.7109 ] [215])
        (mem/f:DI (reg/f:DI 0 ax [367]) [0 *f_9(D)+0 S8 A64])) mABM.c:349 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [367])
        (nil)))
(insn 434 433 435 14 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:349 89 {*movsi_internal}
     (nil))
(insn 435 434 436 14 (set (reg:DI 1 dx [orig:216 D.7110 ] [216])
        (sign_extend:DI (reg:SI 0 ax [368]))) mABM.c:349 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [368])
        (nil)))
(insn 436 435 437 14 (set (reg:DI 0 ax [369])
        (reg:DI 1 dx [orig:216 D.7110 ] [216])) mABM.c:349 87 {*movdi_internal_rex64}
     (nil))
(insn 437 436 438 14 (parallel [
            (set (reg:DI 0 ax [369])
                (ashift:DI (reg:DI 0 ax [369])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:349 513 {*ashldi3_1}
     (nil))
(insn 438 437 439 14 (parallel [
            (set (reg:DI 0 ax [369])
                (plus:DI (reg:DI 0 ax [369])
                    (reg:DI 1 dx [orig:216 D.7110 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:349 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:216 D.7110 ] [216])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:216 D.7110 ] [216])
                (const_int 5 [0x5]))
            (nil))))
(insn 439 438 440 14 (parallel [
            (set (reg:DI 0 ax [370])
                (ashift:DI (reg:DI 0 ax [369])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:349 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [369])
        (nil)))
(insn 440 439 441 14 (set (reg:DI 0 ax [369])
        (reg:DI 0 ax [370])) mABM.c:349 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [370])
        (nil)))
(insn 441 440 442 14 (set (reg:DI 0 ax [orig:217 D.7110 ] [217])
        (reg:DI 0 ax [369])) mABM.c:349 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [369])
        (nil)))
(insn 442 441 443 14 (parallel [
            (set (reg/f:DI 1 dx [orig:218 D.7109 ] [218])
                (plus:DI (reg/f:DI 2 cx [orig:215 D.7109 ] [215])
                    (reg:DI 0 ax [orig:217 D.7110 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:349 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:217 D.7110 ] [217])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:215 D.7109 ] [215])
            (nil))))
(insn 443 442 444 14 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 old_st+0 S4 A32])) mABM.c:349 89 {*movsi_internal}
     (nil))
(insn 444 443 445 14 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:218 D.7109 ] [218])
                (const_int 44 [0x2c])) [0 _166->st_indx+0 S4 A32])
        (reg:SI 0 ax [371])) mABM.c:349 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [371])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:218 D.7109 ] [218])
            (nil))))
(insn 445 444 446 14 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:350 87 {*movdi_internal_rex64}
     (nil))
(insn 446 445 447 14 (set (reg/f:DI 2 cx [orig:219 D.7109 ] [219])
        (mem/f:DI (reg/f:DI 0 ax [372]) [0 *f_9(D)+0 S8 A64])) mABM.c:350 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [372])
        (nil)))
(insn 447 446 448 14 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:350 89 {*movsi_internal}
     (nil))
(insn 448 447 449 14 (set (reg:DI 1 dx [orig:220 D.7110 ] [220])
        (sign_extend:DI (reg:SI 0 ax [373]))) mABM.c:350 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [373])
        (nil)))
(insn 449 448 450 14 (set (reg:DI 0 ax [374])
        (reg:DI 1 dx [orig:220 D.7110 ] [220])) mABM.c:350 87 {*movdi_internal_rex64}
     (nil))
(insn 450 449 451 14 (parallel [
            (set (reg:DI 0 ax [374])
                (ashift:DI (reg:DI 0 ax [374])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:350 513 {*ashldi3_1}
     (nil))
(insn 451 450 452 14 (parallel [
            (set (reg:DI 0 ax [374])
                (plus:DI (reg:DI 0 ax [374])
                    (reg:DI 1 dx [orig:220 D.7110 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:350 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:220 D.7110 ] [220])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:220 D.7110 ] [220])
                (const_int 5 [0x5]))
            (nil))))
(insn 452 451 453 14 (parallel [
            (set (reg:DI 0 ax [375])
                (ashift:DI (reg:DI 0 ax [374])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:350 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [374])
        (nil)))
(insn 453 452 454 14 (set (reg:DI 0 ax [374])
        (reg:DI 0 ax [375])) mABM.c:350 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [375])
        (nil)))
(insn 454 453 455 14 (set (reg:DI 0 ax [orig:221 D.7110 ] [221])
        (reg:DI 0 ax [374])) mABM.c:350 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [374])
        (nil)))
(insn 455 454 456 14 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.7109 ] [222])
                (plus:DI (reg:DI 0 ax [orig:221 D.7110 ] [221])
                    (reg/f:DI 2 cx [orig:219 D.7109 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:350 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:221 D.7110 ] [221])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:219 D.7109 ] [219])
            (nil))))
(insn 456 455 457 14 (set (reg:SI 1 dx [orig:223 D.7107 ] [223])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:222 D.7109 ] [222])
                (const_int 4 [0x4])) [0 _170->n_nvp+0 S4 A32])) mABM.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:222 D.7109 ] [222])
        (nil)))
(insn 457 456 458 14 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 old_st+0 S4 A32])) mABM.c:350 89 {*movsi_internal}
     (nil))
(insn 458 457 459 14 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:223 D.7107 ] [223])) mABM.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:223 D.7107 ] [223])
        (nil)))
(insn 459 458 460 14 (set (reg:SI 4 si)
        (reg:SI 0 ax [376])) mABM.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [376])
        (nil)))
(insn 460 459 461 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f05a55ada18 *.LC22>)) mABM.c:350 87 {*movdi_internal_rex64}
     (nil))
(insn 461 460 462 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:350 91 {*movqi_internal}
     (nil))
(call_insn 462 461 463 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f05a58b2f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mABM.c:350 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn 463 462 464 14 (parallel [
            (set (reg:DI 0 ax [377])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:351 274 {*adddi_1}
     (nil))
(insn 464 463 465 14 (set (reg:DI 4 si)
        (reg:DI 0 ax [377])) mABM.c:351 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [377])
        (nil)))
(insn 465 464 466 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f05a55adab0 *.LC23>)) mABM.c:351 87 {*movdi_internal_rex64}
     (nil))
(insn 466 465 467 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:351 91 {*movqi_internal}
     (nil))
(call_insn 467 466 468 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7f05a58b4b00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) mABM.c:351 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 226 227 228 229 230 231 232 233 234 378 379 380 381 382 383 384 385
(code_label 468 467 469 15 114 "" [2 uses])
(note 469 468 470 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 15 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 471 470 472 15 (set (reg/f:DI 2 cx [orig:224 D.7109 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [378]) [0 *f_9(D)+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [378])
        (nil)))
(insn 472 471 473 15 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:355 89 {*movsi_internal}
     (nil))
(insn 473 472 474 15 (set (reg:DI 1 dx [orig:225 D.7110 ] [225])
        (sign_extend:DI (reg:SI 0 ax [379]))) mABM.c:355 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [379])
        (nil)))
(insn 474 473 475 15 (set (reg:DI 0 ax [380])
        (reg:DI 1 dx [orig:225 D.7110 ] [225])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 475 474 476 15 (parallel [
            (set (reg:DI 0 ax [380])
                (ashift:DI (reg:DI 0 ax [380])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (nil))
(insn 476 475 477 15 (parallel [
            (set (reg:DI 0 ax [380])
                (plus:DI (reg:DI 0 ax [380])
                    (reg:DI 1 dx [orig:225 D.7110 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:225 D.7110 ] [225])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:225 D.7110 ] [225])
                (const_int 5 [0x5]))
            (nil))))
(insn 477 476 478 15 (parallel [
            (set (reg:DI 0 ax [381])
                (ashift:DI (reg:DI 0 ax [380])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [380])
        (nil)))
(insn 478 477 479 15 (set (reg:DI 0 ax [380])
        (reg:DI 0 ax [381])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [381])
        (nil)))
(insn 479 478 480 15 (set (reg:DI 0 ax [orig:226 D.7110 ] [226])
        (reg:DI 0 ax [380])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [380])
        (nil)))
(insn 480 479 481 15 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.7109 ] [227])
                (plus:DI (reg:DI 0 ax [orig:226 D.7110 ] [226])
                    (reg/f:DI 2 cx [orig:224 D.7109 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:226 D.7110 ] [226])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:224 D.7109 ] [224])
            (nil))))
(insn 481 480 482 15 (set (reg:SI 2 cx [orig:228 D.7107 ] [228])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:227 D.7109 ] [227])
                (const_int 44 [0x2c])) [0 _175->st_indx+0 S4 A32])) mABM.c:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:227 D.7109 ] [227])
        (nil)))
(insn 482 481 483 15 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 483 482 484 15 (set (reg/f:DI 4 si [orig:229 D.7109 ] [229])
        (mem/f:DI (reg/f:DI 0 ax [382]) [0 *f_9(D)+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [382])
        (nil)))
(insn 484 483 485 15 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:355 89 {*movsi_internal}
     (nil))
(insn 485 484 486 15 (set (reg:DI 1 dx [orig:230 D.7110 ] [230])
        (sign_extend:DI (reg:SI 0 ax [383]))) mABM.c:355 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [383])
        (nil)))
(insn 486 485 487 15 (set (reg:DI 0 ax [384])
        (reg:DI 1 dx [orig:230 D.7110 ] [230])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 487 486 488 15 (parallel [
            (set (reg:DI 0 ax [384])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (nil))
(insn 488 487 489 15 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg:DI 0 ax [384])
                    (reg:DI 1 dx [orig:230 D.7110 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:230 D.7110 ] [230])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:230 D.7110 ] [230])
                (const_int 5 [0x5]))
            (nil))))
(insn 489 488 490 15 (parallel [
            (set (reg:DI 0 ax [385])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [384])
        (nil)))
(insn 490 489 491 15 (set (reg:DI 0 ax [384])
        (reg:DI 0 ax [385])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [385])
        (nil)))
(insn 491 490 492 15 (set (reg:DI 0 ax [orig:231 D.7110 ] [231])
        (reg:DI 0 ax [384])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [384])
        (nil)))
(insn 492 491 493 15 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.7109 ] [232])
                (plus:DI (reg:DI 0 ax [orig:231 D.7110 ] [231])
                    (reg/f:DI 4 si [orig:229 D.7109 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:231 D.7110 ] [231])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:229 D.7109 ] [229])
            (nil))))
(insn 493 492 494 15 (set (reg:SI 0 ax [orig:233 D.7107 ] [233])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:232 D.7109 ] [232])
                (const_int 4 [0x4])) [0 _180->n_nvp+0 S4 A32])) mABM.c:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:232 D.7109 ] [232])
        (nil)))
(insn 494 493 495 15 (parallel [
            (set (reg:SI 0 ax [orig:234 D.7107 ] [234])
                (plus:SI (reg:SI 0 ax [orig:233 D.7107 ] [233])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:233 D.7107 ] [233])
        (nil)))
(insn 495 494 496 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 2 cx [orig:228 D.7107 ] [228])
            (reg:SI 0 ax [orig:234 D.7107 ] [234]))) mABM.c:355 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:234 D.7107 ] [234])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:228 D.7107 ] [228])
            (nil))))
(jump_insn 496 495 497 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) mABM.c:355 612 {*jcc_1}
     (nil)
 -> 510)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 235 236 237 238 386 387 388 389
(note 497 496 498 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 498 497 499 16 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 499 498 500 16 (set (reg/f:DI 2 cx [orig:235 D.7109 ] [235])
        (mem/f:DI (reg/f:DI 0 ax [386]) [0 *f_9(D)+0 S8 A64])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [386])
        (nil)))
(insn 500 499 501 16 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:355 89 {*movsi_internal}
     (nil))
(insn 501 500 502 16 (set (reg:DI 1 dx [orig:236 D.7110 ] [236])
        (sign_extend:DI (reg:SI 0 ax [387]))) mABM.c:355 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [387])
        (nil)))
(insn 502 501 503 16 (set (reg:DI 0 ax [388])
        (reg:DI 1 dx [orig:236 D.7110 ] [236])) mABM.c:355 87 {*movdi_internal_rex64}
     (nil))
(insn 503 502 504 16 (parallel [
            (set (reg:DI 0 ax [388])
                (ashift:DI (reg:DI 0 ax [388])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (nil))
(insn 504 503 505 16 (parallel [
            (set (reg:DI 0 ax [388])
                (plus:DI (reg:DI 0 ax [388])
                    (reg:DI 1 dx [orig:236 D.7110 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:236 D.7110 ] [236])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:236 D.7110 ] [236])
                (const_int 5 [0x5]))
            (nil))))
(insn 505 504 506 16 (parallel [
            (set (reg:DI 0 ax [389])
                (ashift:DI (reg:DI 0 ax [388])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [388])
        (nil)))
(insn 506 505 507 16 (set (reg:DI 0 ax [388])
        (reg:DI 0 ax [389])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [389])
        (nil)))
(insn 507 506 508 16 (set (reg:DI 0 ax [orig:237 D.7110 ] [237])
        (reg:DI 0 ax [388])) mABM.c:355 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [388])
        (nil)))
(insn 508 507 509 16 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.7109 ] [238])
                (plus:DI (reg:DI 0 ax [orig:237 D.7110 ] [237])
                    (reg/f:DI 2 cx [orig:235 D.7109 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:355 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:237 D.7110 ] [237])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:235 D.7109 ] [235])
            (nil))))
(insn 509 508 510 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.7109 ] [238])
                (const_int 40 [0x28])) [0 _186->ready+0 S4 A64])
        (const_int 0 [0])) mABM.c:355 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:238 D.7109 ] [238])
        (nil)))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              16 (FALLTHRU)
;;              15
;;              7 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 510 509 511 17 108 "" [3 uses])
(note 511 510 512 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:330 273 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 390
(code_label 513 512 514 18 107 "" [1 uses])
(note 514 513 516 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 516 514 517 18 (set (reg:SI 0 ax [390])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mABM.c:330 89 {*movsi_internal}
     (nil))
(insn 517 516 518 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [390])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:330 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [390])
        (nil)))
(jump_insn 518 517 519 18 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 515)
            (pc))) mABM.c:330 612 {*jcc_1}
     (nil)
 -> 515)
;;  succ:       4
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 239 240
(note 519 518 520 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 520 519 523 19 (set (reg:SI 0 ax [orig:239 D.7107 ] [239])
        (const_int 1 [0x1])) mABM.c:357 89 {*movsi_internal}
     (nil))
(insn 523 520 550 19 (set (reg:SI 0 ax [orig:240 <retval> ] [240])
        (reg:SI 0 ax [orig:239 D.7107 ] [239])) mABM.c:357 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:239 D.7107 ] [239])
        (nil)))
(note 550 523 527 19 NOTE_INSN_DELETED)
(insn 527 550 530 19 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:240 <retval> ] [240])) mABM.c:358 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:240 <retval> ] [240])
        (nil)))
(insn 530 527 0 19 (use (reg/i:SI 0 ax)) mABM.c:358 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _calculate_st_point (_calculate_st_point, funcdef_no=16, decl_uid=4234, cgraph_uid=16)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 41:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 135: point = 0
   Insn 132: point = 0
   Insn 128: point = 1
  BB 4
   Insn 138: point = 4
   Insn 29: point = 4
   Insn 28: point = 5
   Insn 27: point = 6
  BB 8
   Insn 125: point = 7
   Insn 124: point = 8
   Insn 123: point = 9
   Insn 122: point = 10
   Insn 121: point = 11
   Insn 120: point = 11
   Insn 119: point = 12
   Insn 118: point = 13
   Insn 117: point = 14
   Insn 116: point = 14
   Insn 115: point = 15
   Insn 114: point = 17
   Insn 113: point = 18
   Insn 112: point = 20
   Insn 111: point = 21
   Insn 110: point = 23
   Insn 109: point = 24
   Insn 108: point = 26
   Insn 107: point = 27
   Insn 106: point = 28
   Insn 105: point = 29
   Insn 104: point = 31
   Insn 103: point = 33
   Insn 102: point = 35
   Insn 101: point = 37
   Insn 100: point = 39
   Insn 99: point = 40
   Insn 98: point = 42
   Insn 97: point = 43
   Insn 96: point = 44
   Insn 95: point = 45
   Insn 94: point = 47
   Insn 93: point = 49
   Insn 92: point = 51
   Insn 91: point = 53
   Insn 90: point = 55
   Insn 89: point = 56
   Insn 88: point = 58
   Insn 87: point = 59
   Insn 86: point = 60
   Insn 85: point = 61
   Insn 84: point = 63
   Insn 83: point = 65
   Insn 82: point = 67
   Insn 81: point = 69
   Insn 80: point = 71
   Insn 79: point = 72
   Insn 78: point = 74
   Insn 77: point = 75
   Insn 76: point = 76
   Insn 75: point = 77
   Insn 74: point = 79
   Insn 73: point = 81
   Insn 72: point = 83
   Insn 71: point = 85
   Insn 70: point = 87
   Insn 69: point = 88
   Insn 68: point = 90
  BB 7
   Insn 65: point = 91
   Insn 64: point = 91
   Insn 63: point = 91
   Insn 62: point = 91
   Insn 61: point = 92
  BB 6
   Insn 58: point = 93
   Insn 57: point = 93
  BB 5
   Insn 55: point = 93
   Insn 54: point = 93
   Insn 53: point = 94
   Insn 143: point = 95
   Insn 51: point = 96
   Insn 50: point = 98
   Insn 142: point = 99
   Insn 141: point = 101
   Insn 151: point = 103
   Insn 150: point = 104
   Insn 149: point = 104
   Insn 148: point = 105
   Insn 47: point = 105
   Insn 46: point = 107
   Insn 45: point = 109
   Insn 44: point = 110
   Insn 43: point = 112
   Insn 42: point = 114
   Insn 41: point = 115
   Insn 40: point = 117
   Insn 140: point = 118
   Insn 38: point = 120
   Insn 37: point = 121
   Insn 36: point = 122
   Insn 35: point = 124
   Insn 34: point = 126
  BB 2
   Insn 25: point = 127
   Insn 24: point = 127
   Insn 23: point = 128
   Insn 22: point = 129
   Insn 21: point = 129
   Insn 20: point = 130
   Insn 19: point = 131
   Insn 18: point = 132
   Insn 17: point = 133
   Insn 16: point = 134
   Insn 15: point = 135
   Insn 14: point = 136
   Insn 13: point = 137
   Insn 12: point = 139
   Insn 11: point = 141
   Insn 10: point = 142
   Insn 9: point = 143
   Insn 8: point = 144
   Insn 7: point = 145
   Insn 6: point = 146
   Insn 2: point = 147
 r59: [7..7] [2..4]
 r60: [133..144]
 r61: [132..143]
 r62: [131..142]
 r63: [138..139]
 r64: [130..137]
 r65: [127..128]
 r66: [123..124]
 r67: [106..122]
 r68: [111..121]
 r69: [119..120]
 r70: [116..118]
 r71: [116..117]
 r72: [113..115]
 r73: [111..112]
 r74: [108..110]
 r75: [106..107]
 r76: [102..105]
 r77: [100..101]
 r78: [97..99]
 r79: [97..98]
 r80: [95..96]
 r81: [93..94]
 r82: [82..88]
 r83: [84..85]
 r84: [82..83]
 r85: [80..81]
 r86: [78..79]
 r87: [75..77]
 r88: [66..72]
 r89: [68..69]
 r90: [66..67]
 r91: [64..65]
 r92: [62..63]
 r93: [59..61]
 r94: [50..56]
 r95: [52..53]
 r96: [50..51]
 r97: [48..49]
 r98: [46..47]
 r99: [43..45]
 r100: [34..40]
 r101: [36..37]
 r102: [34..35]
 r103: [32..33]
 r104: [30..31]
 r105: [27..29]
 r106: [14..24]
 r107: [13..21]
 r108: [12..18]
 r109: [11..15]
 r110: [8..10]
 r111: [0..1]
 r112: [145..146]
 r113: [140..141]
 r114: [129..136]
 r115: [134..135]
 r116: [5..6]
 r117: [125..126]
 r118: [113..114]
 r119: [108..109]
 r120: [91..92]
 r121: [89..90]
 r122: [86..87]
 r123: [75..76]
 r124: [73..74]
 r125: [70..71]
 r126: [59..60]
 r127: [57..58]
 r128: [54..55]
 r129: [43..44]
 r130: [41..42]
 r131: [38..39]
 r132: [27..28]
 r133: [25..26]
 r134: [22..23]
 r135: [19..20]
 r136: [16..17]
 r137: [8..9]
 r139: [103..104]
Compressing live ranges: from 147 to 113 - 76%
Ranges after the compression:
 r59: [6..6] [2..3]
 r60: [105..110]
 r61: [105..110]
 r62: [105..110]
 r63: [107..108]
 r64: [105..106]
 r65: [103..104]
 r66: [99..100]
 r67: [87..98]
 r68: [91..98]
 r69: [97..98]
 r70: [95..96]
 r71: [95..96]
 r72: [93..94]
 r73: [91..92]
 r74: [89..90]
 r75: [87..88]
 r76: [85..86]
 r77: [83..84]
 r78: [81..82]
 r79: [81..82]
 r80: [79..80]
 r81: [77..78]
 r82: [67..72]
 r83: [69..70]
 r84: [67..68]
 r85: [65..66]
 r86: [63..64]
 r87: [61..62]
 r88: [53..58]
 r89: [55..56]
 r90: [53..54]
 r91: [51..52]
 r92: [49..50]
 r93: [47..48]
 r94: [39..44]
 r95: [41..42]
 r96: [39..40]
 r97: [37..38]
 r98: [35..36]
 r99: [33..34]
 r100: [25..30]
 r101: [27..28]
 r102: [25..26]
 r103: [23..24]
 r104: [21..22]
 r105: [19..20]
 r106: [9..16]
 r107: [9..14]
 r108: [9..12]
 r109: [9..10]
 r110: [7..8]
 r111: [0..1]
 r112: [111..112]
 r113: [109..110]
 r114: [105..106]
 r115: [105..106]
 r116: [4..5]
 r117: [101..102]
 r118: [93..94]
 r119: [89..90]
 r120: [75..76]
 r121: [73..74]
 r122: [71..72]
 r123: [61..62]
 r124: [59..60]
 r125: [57..58]
 r126: [47..48]
 r127: [45..46]
 r128: [43..44]
 r129: [33..34]
 r130: [31..32]
 r131: [29..30]
 r132: [19..20]
 r133: [17..18]
 r134: [15..16]
 r135: [13..14]
 r136: [11..12]
 r137: [7..8]
 r139: [85..86]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 125
changing reg in insn 29
changing reg in insn 128
changing reg in insn 8
changing reg in insn 17
changing reg in insn 9
changing reg in insn 18
changing reg in insn 10
changing reg in insn 19
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 47
changing reg in insn 37
changing reg in insn 38
changing reg in insn 140
changing reg in insn 140
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 51
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 143
changing reg in insn 53
changing reg in insn 54
changing reg in insn 69
changing reg in insn 73
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 93
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 99
changing reg in insn 103
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 109
changing reg in insn 116
changing reg in insn 111
changing reg in insn 118
changing reg in insn 113
changing reg in insn 119
changing reg in insn 115
changing reg in insn 120
changing reg in insn 122
changing reg in insn 124
changing reg in insn 128
changing reg in insn 132
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 21
changing reg in insn 15
changing reg in insn 16
changing reg in insn 27
changing reg in insn 28
changing reg in insn 34
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 61
changing reg in insn 62
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 123
changing reg in insn 124
changing reg in insn 150
changing reg in insn 149
changing reg in insn 151
changing reg in insn 150
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 121.


_calculate_st_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 17[flags] 19[fpcr] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={47d,45u} r1={25d,21u} r2={11d,7u} r3={1d,1u} r4={11d,7u} r5={8d,5u} r6={1d,54u} r7={1d,17u} r8={11d,8u} r9={5d,2u} r10={5d,2u} r11={5d,2u} r12={3d} r13={3d} r14={3d} r15={3d} r17={17d,3u} r18={3d} r19={3d,1u} r20={1d,1u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={6d,2u} r38={5d,1u} r39={4d,1u} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 447{265d,180u,2e} in 119{116 regular + 3 call} insns.
(note 1 0 144 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 112 113 114 115
(note 144 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 144 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:361 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [112])
                (const_int 44 [0x2c])) [0 f_2(D)->st_indx+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:361 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [112])
        (nil)))
(insn 8 7 9 2 (set (reg:XF 2 cx [orig:60 D.7121 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:363 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 0 ax [orig:61 D.7121 ] [61])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:363 131 {*movxf_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:SI 39 r10 [orig:62 D.7120 ] [62])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:363 89 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 4 si [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:363 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 4 si [orig:63 D.7122 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 4 si [113])
                (const_int 8 [0x8])) [0 f_2(D)->nvp+0 S8 A64])) mABM.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [113])
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 38 r9 [orig:64 D.7123 ] [64])
        (mem/f:DI (reg/f:DI 4 si [orig:63 D.7122 ] [63]) [0 *_6+0 S8 A64])) mABM.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:63 D.7122 ] [63])
        (nil)))
(insn 14 13 15 2 (set (reg:DI 37 r8 [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:363 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:XF 4 si [115])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:363 131 {*movxf_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [115])) mABM.c:363 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [115])
        (nil)))
(insn 17 16 18 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:60 D.7121 ] [60])) mABM.c:363 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:60 D.7121 ] [60])
        (nil)))
(insn 18 17 19 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:61 D.7121 ] [61])) mABM.c:363 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:61 D.7121 ] [61])
        (nil)))
(insn 19 18 20 2 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:62 D.7120 ] [62])) mABM.c:363 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:62 D.7120 ] [62])
        (nil)))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:64 D.7123 ] [64])) mABM.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:64 D.7123 ] [64])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [114])) mABM.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [114])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:363 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 23 22 24 2 (set (reg:SI 0 ax [orig:65 D.7120 ] [65])
        (reg:SI 0 ax)) mABM.c:363 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:65 D.7120 ] [65])
            (const_int 0 [0]))) mABM.c:363 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.7120 ] [65])
        (nil)))
(jump_insn 25 24 26 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) mABM.c:363 612 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 116
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:364 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 40 [0x28])) [0 f_2(D)->ready+0 S4 A64])
        (const_int 0 [0])) mABM.c:364 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (nil)))
(insn 29 28 138 4 (set (reg:SI 0 ax [orig:59 D.7120 ] [59])
        (const_int 0 [0])) mABM.c:365 89 {*movsi_internal}
     (nil))
(jump_insn 138 29 139 4 (set (pc)
        (label_ref 126)) mABM.c:365 650 {jump}
     (nil)
 -> 126)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 139 138 32)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 117 118 119 139
(code_label 32 139 33 5 122 "" [1 uses])
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:369 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 5 (set (reg/f:DI 0 ax [orig:66 D.7123 ] [66])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 16 [0x10])) [0 f_2(D)->time+0 S8 A128])) mABM.c:369 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 36 35 37 5 (set (reg:XF 9 st(1) [orig:67 D.7121 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.7123 ] [66]) [0 *_10+0 S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7123 ] [66])
        (nil)))
(insn 37 36 38 5 (set (reg:XF 10 st(2) [orig:68 D.7121 ] [68])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 38 37 140 5 (set (reg:SI 0 ax [orig:69 D.7120 ] [69])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:369 89 {*movsi_internal}
     (nil))
(insn 140 38 40 5 (parallel [
            (set (reg:XF 11 st(3) [orig:70 D.7121 ] [70])
                (float:XF (reg:SI 0 ax [orig:69 D.7120 ] [69])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:369 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7120 ] [69])
        (nil)))
(insn 40 140 41 5 (set (reg:XF 8 st [orig:71 D.7121 ] [71])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 41 40 42 5 (set (reg:XF 11 st(3) [orig:72 D.7121 ] [72])
        (mult:XF (reg:XF 11 st(3) [orig:70 D.7121 ] [70])
            (reg:XF 8 st [orig:71 D.7121 ] [71]))) mABM.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.7121 ] [71])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:70 D.7121 ] [70])
            (nil))))
(insn 42 41 43 5 (set (reg:XF 8 st [118])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 43 42 44 5 (set (reg:XF 8 st [orig:73 D.7121 ] [73])
        (minus:XF (reg:XF 11 st(3) [orig:72 D.7121 ] [72])
            (reg:XF 8 st [118]))) mABM.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [118])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:72 D.7121 ] [72])
            (nil))))
(insn 44 43 45 5 (set (reg:XF 8 st [orig:74 D.7121 ] [74])
        (mult:XF (reg:XF 8 st [orig:73 D.7121 ] [73])
            (reg:XF 10 st(2) [orig:68 D.7121 ] [68]))) mABM.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.7121 ] [73])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:68 D.7121 ] [68])
            (nil))))
(insn 45 44 46 5 (set (reg:XF 10 st(2) [119])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 t+0 S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 46 45 47 5 (set (reg:XF 8 st [orig:75 D.7121 ] [75])
        (minus:XF (reg:XF 10 st(2) [119])
            (reg:XF 8 st [orig:74 D.7121 ] [74]))) mABM.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [119])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.7121 ] [74])
            (nil))))
(insn 47 46 148 5 (set (reg:XF 8 st [orig:76 D.7121 ] [76])
        (minus:XF (reg:XF 9 st(1) [orig:67 D.7121 ] [67])
            (reg:XF 8 st [orig:75 D.7121 ] [75]))) mABM.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.7121 ] [75])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.7121 ] [67])
            (nil))))
(insn 148 47 149 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:369 199 {x86_fnstcw_1}
     (nil))
(insn 149 148 150 5 (set (reg:HI 0 ax [139])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0  S2 A16])) mABM.c:369 90 {*movhi_internal}
     (nil))
(insn 150 149 151 5 (parallel [
            (set (reg:HI 0 ax [139])
                (ior:HI (reg:HI 0 ax [139])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:369 410 {*iorhi_1}
     (nil))
(insn 151 150 141 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0  S2 A16])
        (reg:HI 0 ax [139])) mABM.c:369 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [139])
        (nil)))
(insn 141 151 142 5 (parallel [
            (set (reg:SI 0 ax [orig:77 D.7120 ] [77])
                (fix:SI (reg:XF 8 st [orig:76 D.7121 ] [76])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -46 [0xffffffffffffffd2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:369 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.7121 ] [76])
        (nil)))
(insn 142 141 50 5 (parallel [
            (set (reg:XF 9 st(1) [orig:78 D.7121 ] [78])
                (float:XF (reg:SI 0 ax [orig:77 D.7120 ] [77])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0  S4 A32]))
        ]) mABM.c:369 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.7120 ] [77])
        (nil)))
(insn 50 142 51 5 (set (reg:XF 8 st [orig:79 D.7121 ] [79])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 143 5 (set (reg:XF 8 st [orig:80 D.7121 ] [80])
        (div:XF (reg:XF 9 st(1) [orig:78 D.7121 ] [78])
            (reg:XF 8 st [orig:79 D.7121 ] [79]))) mABM.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.7121 ] [79])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:78 D.7121 ] [78])
            (nil))))
(insn 143 51 53 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])
                (fix:SI (reg:XF 8 st [orig:80 D.7121 ] [80])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -46 [0xffffffffffffffd2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S2 A16]))
        ]) mABM.c:369 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.7121 ] [80])
        (nil)))
(insn 53 143 54 5 (set (reg:SI 0 ax [orig:81 D.7120 ] [81])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:371 89 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:81 D.7120 ] [81])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32]))) mABM.c:371 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.7120 ] [81])
        (nil)))
(jump_insn 55 54 56 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) mABM.c:371 612 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 6 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])
            (const_int 0 [0]))) mABM.c:371 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 58 57 59 6 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) mABM.c:371 612 {*jcc_1}
     (nil)
 -> 66)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 120
(code_label 59 58 60 7 124 "" [1 uses])
(note 60 59 61 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 7 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])) mABM.c:372 89 {*movsi_internal}
     (nil))
(insn 62 61 63 7 (set (reg:SI 4 si)
        (reg:SI 0 ax [120])) mABM.c:372 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [120])
        (nil)))
(insn 63 62 64 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f05a55d7d10 *.LC24>)) mABM.c:372 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) mABM.c:372 91 {*movqi_internal}
     (nil))
(call_insn 65 64 66 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f05a58b2f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mABM.c:372 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137
(code_label 66 65 67 8 125 "" [1 uses])
(note 67 66 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 8 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:375 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 8 (set (reg/f:DI 0 ax [orig:82 D.7122 ] [82])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 32 [0x20])) [0 f_2(D)->pos+0 S8 A128])) mABM.c:375 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (nil)))
(insn 70 69 71 8 (set (reg:SI 1 dx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])) mABM.c:375 89 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (set (reg:DI 1 dx [orig:83 D.7124 ] [83])
        (sign_extend:DI (reg:SI 1 dx [122]))) mABM.c:375 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [122])
        (nil)))
(insn 72 71 73 8 (parallel [
            (set (reg:DI 1 dx [orig:84 D.7124 ] [84])
                (ashift:DI (reg:DI 1 dx [orig:83 D.7124 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:375 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7124 ] [83])
        (nil)))
(insn 73 72 74 8 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7122 ] [85])
                (plus:DI (reg/f:DI 0 ax [orig:82 D.7122 ] [82])
                    (reg:DI 1 dx [orig:84 D.7124 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:375 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7124 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7122 ] [82])
            (nil))))
(insn 74 73 75 8 (set (reg/f:DI 0 ax [orig:86 D.7123 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.7122 ] [85]) [0 *_31+0 S8 A64])) mABM.c:375 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7122 ] [85])
        (nil)))
(insn 75 74 76 8 (set (reg:XF 0 ax [orig:87 D.7121 ] [87])
        (mem:XF (reg/f:DI 0 ax [orig:86 D.7123 ] [86]) [0 *_32+0 S16 A128])) mABM.c:375 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7123 ] [86])
        (nil)))
(insn 76 75 77 8 (set (reg/f:DI 2 cx [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:375 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [123])
                (const_int 48 [0x30])) [0 f_2(D)->st_point+0 S16 A128])
        (reg:XF 0 ax [orig:87 D.7121 ] [87])) mABM.c:375 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [123])
        (expr_list:REG_DEAD (reg:XF 0 ax [orig:87 D.7121 ] [87])
            (nil))))
(insn 78 77 79 8 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:376 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 8 (set (reg/f:DI 0 ax [orig:88 D.7122 ] [88])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 32 [0x20])) [0 f_2(D)->pos+0 S8 A128])) mABM.c:376 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (nil)))
(insn 80 79 81 8 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])) mABM.c:376 89 {*movsi_internal}
     (nil))
(insn 81 80 82 8 (set (reg:DI 1 dx [orig:89 D.7124 ] [89])
        (sign_extend:DI (reg:SI 1 dx [125]))) mABM.c:376 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [125])
        (nil)))
(insn 82 81 83 8 (parallel [
            (set (reg:DI 1 dx [orig:90 D.7124 ] [90])
                (ashift:DI (reg:DI 1 dx [orig:89 D.7124 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:376 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.7124 ] [89])
        (nil)))
(insn 83 82 84 8 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.7122 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:88 D.7122 ] [88])
                    (reg:DI 1 dx [orig:90 D.7124 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:376 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.7124 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7122 ] [88])
            (nil))))
(insn 84 83 85 8 (set (reg/f:DI 0 ax [orig:92 D.7123 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.7122 ] [91]) [0 *_37+0 S8 A64])) mABM.c:376 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7122 ] [91])
        (nil)))
(insn 85 84 86 8 (set (reg:XF 0 ax [orig:93 D.7121 ] [93])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:92 D.7123 ] [92])
                (const_int 16 [0x10])) [0 MEM[(long double *)_38 + 16B]+0 S16 A128])) mABM.c:376 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.7123 ] [92])
        (nil)))
(insn 86 85 87 8 (set (reg/f:DI 2 cx [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:376 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [126])
                (const_int 64 [0x40])) [0 f_2(D)->st_point+16 S16 A128])
        (reg:XF 0 ax [orig:93 D.7121 ] [93])) mABM.c:376 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [126])
        (expr_list:REG_DEAD (reg:XF 0 ax [orig:93 D.7121 ] [93])
            (nil))))
(insn 88 87 89 8 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:377 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 8 (set (reg/f:DI 0 ax [orig:94 D.7122 ] [94])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [127])
                (const_int 32 [0x20])) [0 f_2(D)->pos+0 S8 A128])) mABM.c:377 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [127])
        (nil)))
(insn 90 89 91 8 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])) mABM.c:377 89 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 1 dx [orig:95 D.7124 ] [95])
        (sign_extend:DI (reg:SI 1 dx [128]))) mABM.c:377 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [128])
        (nil)))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 1 dx [orig:96 D.7124 ] [96])
                (ashift:DI (reg:DI 1 dx [orig:95 D.7124 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:377 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7124 ] [95])
        (nil)))
(insn 93 92 94 8 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.7122 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:94 D.7122 ] [94])
                    (reg:DI 1 dx [orig:96 D.7124 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:377 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.7124 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.7122 ] [94])
            (nil))))
(insn 94 93 95 8 (set (reg/f:DI 0 ax [orig:98 D.7123 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 D.7122 ] [97]) [0 *_43+0 S8 A64])) mABM.c:377 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7122 ] [97])
        (nil)))
(insn 95 94 96 8 (set (reg:XF 0 ax [orig:99 D.7121 ] [99])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:98 D.7123 ] [98])
                (const_int 32 [0x20])) [0 MEM[(long double *)_44 + 32B]+0 S16 A128])) mABM.c:377 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.7123 ] [98])
        (nil)))
(insn 96 95 97 8 (set (reg/f:DI 2 cx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:377 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [129])
                (const_int 80 [0x50])) [0 f_2(D)->st_point+32 S16 A128])
        (reg:XF 0 ax [orig:99 D.7121 ] [99])) mABM.c:377 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [129])
        (expr_list:REG_DEAD (reg:XF 0 ax [orig:99 D.7121 ] [99])
            (nil))))
(insn 98 97 99 8 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:378 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 8 (set (reg/f:DI 0 ax [orig:100 D.7122 ] [100])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 32 [0x20])) [0 f_2(D)->pos+0 S8 A128])) mABM.c:378 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [130])
        (nil)))
(insn 100 99 101 8 (set (reg:SI 1 dx [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t_x+0 S4 A32])) mABM.c:378 89 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 1 dx [orig:101 D.7124 ] [101])
        (sign_extend:DI (reg:SI 1 dx [131]))) mABM.c:378 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [131])
        (nil)))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:102 D.7124 ] [102])
                (ashift:DI (reg:DI 1 dx [orig:101 D.7124 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:378 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:101 D.7124 ] [101])
        (nil)))
(insn 103 102 104 8 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.7122 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.7122 ] [100])
                    (reg:DI 1 dx [orig:102 D.7124 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:378 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:102 D.7124 ] [102])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.7122 ] [100])
            (nil))))
(insn 104 103 105 8 (set (reg/f:DI 0 ax [orig:104 D.7123 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.7122 ] [103]) [0 *_49+0 S8 A64])) mABM.c:378 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.7122 ] [103])
        (nil)))
(insn 105 104 106 8 (set (reg:XF 0 ax [orig:105 D.7121 ] [105])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:104 D.7123 ] [104])
                (const_int 48 [0x30])) [0 MEM[(long double *)_50 + 48B]+0 S16 A128])) mABM.c:378 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.7123 ] [104])
        (nil)))
(insn 106 105 107 8 (set (reg/f:DI 2 cx [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:378 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 8 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [132])
                (const_int 96 [0x60])) [0 f_2(D)->st_point+48 S16 A128])
        (reg:XF 0 ax [orig:105 D.7121 ] [105])) mABM.c:378 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [132])
        (expr_list:REG_DEAD (reg:XF 0 ax [orig:105 D.7121 ] [105])
            (nil))))
(insn 108 107 109 8 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 8 (parallel [
            (set (reg/f:DI 2 cx [orig:106 D.7125 ] [106])
                (plus:DI (reg/f:DI 0 ax [133])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:380 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 110 109 111 8 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 8 (parallel [
            (set (reg/f:DI 1 dx [orig:107 D.7125 ] [107])
                (plus:DI (reg/f:DI 0 ax [134])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:380 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [134])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 112 111 113 8 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (nil))
(insn 113 112 114 8 (set (reg:SI 4 si [orig:108 D.7120 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [135])
                (const_int 4 [0x4])) [0 f_2(D)->n_nvp+0 S4 A32])) mABM.c:380 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [135])
        (nil)))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 8 (set (reg/f:DI 0 ax [orig:109 D.7122 ] [109])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 8 [0x8])) [0 f_2(D)->nvp+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (nil)))
(insn 116 115 117 8 (set (reg:DI 37 r8)
        (reg/f:DI 2 cx [orig:106 D.7125 ] [106])) mABM.c:380 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:106 D.7125 ] [106])
        (nil)))
(insn 117 116 118 8 (set (reg:SI 2 cx)
        (const_int 0 [0])) mABM.c:380 89 {*movsi_internal}
     (nil))
(insn 118 117 119 8 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:107 D.7125 ] [107])) mABM.c:380 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:107 D.7125 ] [107])
        (nil)))
(insn 119 118 120 8 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:108 D.7120 ] [108])) mABM.c:380 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:108 D.7120 ] [108])
        (nil)))
(insn 120 119 121 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:109 D.7122 ] [109])) mABM.c:380 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.7122 ] [109])
        (nil)))
(call_insn 121 120 122 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_st_indx") [flags 0x41]  <function_decl 0x7f05a595e500 find_st_indx>) [0 find_st_indx S1 A8])
            (const_int 0 [0]))) mABM.c:380 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 122 121 123 8 (set (reg:SI 0 ax [orig:110 D.7120 ] [110])
        (reg:SI 0 ax)) mABM.c:380 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 123 122 124 8 (set (reg/f:DI 1 dx [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:380 87 {*movdi_internal_rex64}
     (nil))
(insn 124 123 125 8 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [137])
                (const_int 44 [0x2c])) [0 f_2(D)->st_indx+0 S4 A32])
        (reg:SI 0 ax [orig:110 D.7120 ] [110])) mABM.c:380 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [137])
        (expr_list:REG_DEAD (reg:SI 0 ax [orig:110 D.7120 ] [110])
            (nil))))
(insn 125 124 126 8 (set (reg:SI 0 ax [orig:59 D.7120 ] [59])
        (const_int 1 [0x1])) mABM.c:396 89 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 111
(code_label 126 125 127 9 123 "" [1 uses])
(note 127 126 128 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 145 9 (set (reg:SI 0 ax [orig:111 <retval> ] [111])
        (reg:SI 0 ax [orig:59 D.7120 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7120 ] [59])
        (nil)))
(note 145 128 132 9 NOTE_INSN_DELETED)
(insn 132 145 135 9 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:111 <retval> ] [111])) mABM.c:397 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:111 <retval> ] [111])
        (nil)))
(insn 135 132 0 9 (use (reg/i:SI 0 ax)) mABM.c:397 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _get_ready (_get_ready, funcdef_no=17, decl_uid=4241, cgraph_uid=17)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=384, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=368, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 88:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=134 from oldreg=118, assigning class DIREG to r134
      Creating newreg=135 from oldreg=120, assigning class CREG to r135
   88: {r135:DI=0;r134:DI=r135:DI<<0x3+r134:DI;r119:DI=r135:DI<<0x3+r119:DI;[r134:DI]=[r119:DI];use r135:DI;}
      REG_UNUSED r120:DI
      REG_UNUSED r119:DI
      REG_UNUSED r118:DI
    Inserting insn reload before:
  177: r134:DI=r118:DI
  178: r135:DI=r120:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 109:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 137:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 140:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 163: point = 0
   Insn 160: point = 0
   Insn 156: point = 1
   Insn 153: point = 3
   Insn 152: point = 4
   Insn 151: point = 4
   Insn 150: point = 5
   Insn 149: point = 6
   Insn 148: point = 7
  BB 13
   Insn 146: point = 8
   Insn 145: point = 8
   Insn 144: point = 9
  BB 9
   Insn 174: point = 10
   Insn 118: point = 10
   Insn 117: point = 10
  BB 8
   Insn 115: point = 10
   Insn 114: point = 10
   Insn 113: point = 11
  BB 2
   Insn 172: point = 12
   Insn 14: point = 12
   Insn 13: point = 12
   Insn 12: point = 13
   Insn 11: point = 15
   Insn 10: point = 16
   Insn 176: point = 18
   Insn 8: point = 20
   Insn 7: point = 21
   Insn 3: point = 22
   Insn 2: point = 22
  BB 7
   Insn 109: point = 22
  BB 6
   Insn 106: point = 22
   Insn 105: point = 23
   Insn 104: point = 25
   Insn 103: point = 27
   Insn 102: point = 29
   Insn 101: point = 31
   Insn 100: point = 32
   Insn 99: point = 32
   Insn 98: point = 33
   Insn 97: point = 35
   Insn 96: point = 36
   Insn 95: point = 38
  BB 5
   Insn 93: point = 39
   Insn 92: point = 39
   Insn 91: point = 40
   Insn 90: point = 41
   Insn 89: point = 41
   Insn 88: point = 42
   Insn 178: point = 43
	Hard reg 0 is preferable by r135 with profit 1
   Insn 177: point = 45
	Hard reg 1 is preferable by r134 with profit 1
   Insn 87: point = 47
   Insn 86: point = 48
   Insn 85: point = 49
   Insn 84: point = 50
   Insn 83: point = 51
   Insn 82: point = 52
   Insn 81: point = 54
   Insn 80: point = 56
   Insn 79: point = 58
   Insn 78: point = 60
   Insn 77: point = 61
   Insn 76: point = 61
   Insn 75: point = 62
   Insn 74: point = 64
   Insn 73: point = 65
   Insn 72: point = 67
   Insn 71: point = 68
   Insn 70: point = 69
   Insn 69: point = 71
   Insn 68: point = 73
   Insn 67: point = 75
   Insn 66: point = 77
   Insn 65: point = 78
   Insn 64: point = 78
   Insn 63: point = 79
   Insn 62: point = 81
   Insn 61: point = 82
   Insn 60: point = 84
  BB 4
   Insn 55: point = 85
   Insn 54: point = 85
   Insn 53: point = 86
   Insn 52: point = 88
   Insn 51: point = 89
   Insn 50: point = 90
   Insn 49: point = 92
   Insn 48: point = 94
   Insn 47: point = 96
   Insn 46: point = 98
   Insn 45: point = 100
   Insn 44: point = 102
   Insn 43: point = 103
   Insn 42: point = 103
   Insn 41: point = 104
   Insn 40: point = 106
   Insn 39: point = 107
   Insn 38: point = 109
  BB 3
   Insn 33: point = 110
   Insn 32: point = 110
   Insn 31: point = 111
   Insn 30: point = 112
   Insn 29: point = 114
   Insn 28: point = 116
   Insn 27: point = 118
   Insn 26: point = 120
   Insn 25: point = 122
   Insn 24: point = 124
   Insn 23: point = 125
   Insn 22: point = 125
   Insn 21: point = 126
   Insn 20: point = 128
   Insn 19: point = 129
   Insn 18: point = 131
  BB 12
   Insn 140: point = 132
  BB 11
   Insn 137: point = 132
  BB 10
   Insn 135: point = 132
   Insn 134: point = 132
   Insn 133: point = 133
   Insn 132: point = 135
   Insn 131: point = 137
   Insn 130: point = 139
   Insn 129: point = 141
   Insn 128: point = 143
   Insn 127: point = 144
   Insn 126: point = 144
   Insn 125: point = 145
   Insn 124: point = 147
   Insn 123: point = 148
   Insn 122: point = 150
 r59: [17..21]
 r60: [19..20]
 r61: [17..18]
 r62: [14..16]
 r63: [14..15]
 r64: [117..129]
 r65: [124..126]
 r66: [117..118]
 r67: [115..116]
 r68: [113..114]
 r69: [110..112]
 r70: [95..107]
 r71: [102..104]
 r72: [95..96]
 r73: [93..94]
 r74: [91..92]
 r75: [85..90]
 r76: [85..86]
 r77: [70..82]
 r78: [77..79]
 r79: [70..71]
 r80: [68..69]
 r81: [53..65]
 r82: [60..62]
 r83: [53..54]
 r84: [41..52]
 r85: [39..40]
 r86: [24..36]
 r87: [31..33]
 r88: [24..25]
 r89: [22..23]
 r90: [136..148]
 r91: [143..145]
 r92: [136..137]
 r93: [134..135]
 r94: [132..133]
 r95: [2..3]
 r96: [0..1]
 r97: [12..13]
 r98: [130..131]
 r99: [127..128]
 r100: [123..125] [119..120]
 r101: [121..122]
 r102: [110..111]
 r103: [108..109]
 r104: [105..106]
 r105: [101..103] [97..98]
 r106: [99..100]
 r107: [87..89]
 r108: [87..88]
 r109: [83..84]
 r110: [80..81]
 r111: [76..78] [72..73]
 r112: [74..75]
 r113: [66..67]
 r114: [63..64]
 r115: [59..61] [55..56]
 r116: [57..58]
 r117: [50..51]
 r118: [46..49]
 r119: [42..48]
 r120: [44..47]
 r121: [37..38]
 r122: [34..35]
 r123: [30..32] [26..27]
 r124: [28..29]
 r125: [10..11]
 r126: [149..150]
 r127: [146..147]
 r128: [142..144] [138..139]
 r129: [140..141]
 r130: [8..9]
 r131: [5..7]
 r132: [4..6]
 r134: [42..45]
 r135: [42..43]
Compressing live ranges: from 151 to 122 - 80%
Ranges after the compression:
 r59: [14..17]
 r60: [16..17]
 r61: [14..15]
 r62: [12..13]
 r63: [12..13]
 r64: [94..103]
 r65: [100..101]
 r66: [94..95]
 r67: [92..93]
 r68: [90..91]
 r69: [88..89]
 r70: [76..85]
 r71: [82..83]
 r72: [76..77]
 r73: [74..75]
 r74: [72..73]
 r75: [68..71]
 r76: [68..69]
 r77: [56..65]
 r78: [62..63]
 r79: [56..57]
 r80: [54..55]
 r81: [42..51]
 r82: [48..49]
 r83: [42..43]
 r84: [34..41]
 r85: [32..33]
 r86: [20..29]
 r87: [26..27]
 r88: [20..21]
 r89: [18..19]
 r90: [110..119]
 r91: [116..117]
 r92: [110..111]
 r93: [108..109]
 r94: [106..107]
 r95: [2..3]
 r96: [0..1]
 r97: [10..11]
 r98: [104..105]
 r99: [102..103]
 r100: [100..101] [96..97]
 r101: [98..99]
 r102: [88..89]
 r103: [86..87]
 r104: [84..85]
 r105: [82..83] [78..79]
 r106: [80..81]
 r107: [70..71]
 r108: [70..71]
 r109: [66..67]
 r110: [64..65]
 r111: [62..63] [58..59]
 r112: [60..61]
 r113: [52..53]
 r114: [50..51]
 r115: [48..49] [44..45]
 r116: [46..47]
 r117: [40..41]
 r118: [38..39]
 r119: [34..39]
 r120: [36..39]
 r121: [30..31]
 r122: [28..29]
 r123: [26..27] [22..23]
 r124: [24..25]
 r125: [8..9]
 r126: [120..121]
 r127: [118..119]
 r128: [116..117] [112..113]
 r129: [114..115]
 r130: [6..7]
 r131: [4..5]
 r132: [4..5]
 r134: [34..37]
 r135: [34..35]
	 Assigning to 134 (cl=DIREG, orig=118, freq=2, tfirst=134, tfreq=2)...
	   Assign 5 to reload r134 (freq=2)
	 Assigning to 135 (cl=CREG, orig=120, freq=2, tfirst=135, tfreq=2)...
	   Assign 2 to reload r135 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=384, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=368, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 176
changing reg in insn 176
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 21
changing reg in insn 24
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 54
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 82
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 99
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 123
changing reg in insn 125
changing reg in insn 128
changing reg in insn 126
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 153
changing reg in insn 156
changing reg in insn 156
changing reg in insn 160
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 24
changing reg in insn 23
changing reg in insn 22
changing reg in insn 27
changing reg in insn 25
changing reg in insn 24
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 81
changing reg in insn 79
changing reg in insn 78
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 87
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 104
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 113
changing reg in insn 114
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 128
changing reg in insn 127
changing reg in insn 126
changing reg in insn 131
changing reg in insn 129
changing reg in insn 128
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 150
changing reg in insn 149
changing reg in insn 151
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 152.


_get_ready

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 37[r8]
;;  ref usage 	r0={69d,68u} r1={12d,15u,6e} r2={11d,9u} r4={6d,4u} r5={7d,5u} r6={1d,54u} r7={1d,20u} r8={8d,6u} r9={6d,4u} r10={3d,1u} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={36d,6u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 442{242d,194u,6e} in 128{126 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 60 61 62 63 97
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:401 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:401 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:XF 9 st(1) [orig:59 D.7127 ] [59])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 256 [0x100])) [0 conf.t_r+0 S16 A128])) mABM.c:403 131 {*movxf_internal_rex64}
     (nil))
(insn 8 7 176 2 (set (reg:SI 0 ax [orig:60 D.7128 ] [60])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_w+0 S4 A128])) mABM.c:403 89 {*movsi_internal}
     (nil))
(insn 176 8 10 2 (parallel [
            (set (reg:XF 8 st [orig:61 D.7127 ] [61])
                (float:XF (reg:SI 0 ax [orig:60 D.7128 ] [60])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0  S4 A32]))
        ]) mABM.c:403 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.7128 ] [60])
        (nil)))
(insn 10 176 11 2 (set (reg:XF 9 st(1) [orig:62 D.7127 ] [62])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.7127 ] [59])
            (reg:XF 8 st [orig:61 D.7127 ] [61]))) mABM.c:403 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.7127 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.7127 ] [59])
            (nil))))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:63 D.7127 ] [63])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_i+0 S16 A128])) mABM.c:403 131 {*movxf_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:XF 8 st [97])
        (mult:XF (reg:XF 8 st [orig:63 D.7127 ] [63])
            (reg:XF 9 st(1) [orig:62 D.7127 ] [62]))) mABM.c:403 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.7127 ] [63])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.7127 ] [62])
            (nil))))
(insn 13 12 14 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_stp+0 S16 A128])
        (reg:XF 8 st [97])) mABM.c:403 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [97])
        (nil)))
(insn 14 13 172 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:405 89 {*movsi_internal}
     (nil))
(jump_insn 172 14 173 2 (set (pc)
        (label_ref 110)) mABM.c:405 650 {jump}
     (nil)
 -> 110)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 173 172 112)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 98 99 100 101 102
(code_label 112 173 17 3 131 "" [1 uses])
(note 17 112 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:405 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 2 cx [orig:64 D.7129 ] [64])
        (mem/f:DI (reg/f:DI 0 ax [98]) [0 *f_13(D)+0 S8 A64])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 20 19 21 3 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:405 89 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 1 dx [orig:65 D.7130 ] [65])
        (sign_extend:DI (reg:SI 0 ax [99]))) mABM.c:405 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(insn 22 21 23 3 (set (reg:DI 0 ax [100])
        (reg:DI 1 dx [orig:65 D.7130 ] [65])) mABM.c:405 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 0 ax [100])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 513 {*ashldi3_1}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 0 ax [100])
                (plus:DI (reg:DI 0 ax [100])
                    (reg:DI 1 dx [orig:65 D.7130 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7130 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.7130 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 26 25 27 3 (set (reg:DI 0 ax [100])
        (reg:DI 0 ax [101])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 27 26 28 3 (set (reg:DI 0 ax [orig:66 D.7130 ] [66])
        (reg:DI 0 ax [100])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.7129 ] [67])
                (plus:DI (reg:DI 0 ax [orig:66 D.7130 ] [66])
                    (reg/f:DI 2 cx [orig:64 D.7129 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.7130 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:64 D.7129 ] [64])
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [orig:68 D.7131 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:67 D.7129 ] [67])
                (const_int 16 [0x10])) [0 _17->time+0 S8 A128])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7129 ] [67])
        (nil)))
(insn 30 29 31 3 (set (reg:XF 8 st [orig:69 D.7127 ] [69])
        (mem:XF (reg/f:DI 0 ax [orig:68 D.7131 ] [68]) [0 *_18+0 S16 A128])) mABM.c:405 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7131 ] [68])
        (nil)))
(insn 31 30 32 3 (set (reg:XF 9 st(1) [102])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 t+0 S16 A128])) mABM.c:405 131 {*movxf_internal_rex64}
     (nil))
(insn 32 31 33 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [102])
            (reg:XF 8 st [orig:69 D.7127 ] [69]))) mABM.c:405 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [102])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.7127 ] [69])
            (nil))))
(jump_insn 33 32 37 3 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 107)
            (pc))) mABM.c:405 612 {*jcc_1}
     (nil)
 -> 107)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 71 72 73 74 75 76 103 104 105 106 107 108
(note 37 33 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:405 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 2 cx [orig:70 D.7129 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [103]) [0 *f_13(D)+0 S8 A64])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (nil)))
(insn 40 39 41 4 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:405 89 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 1 dx [orig:71 D.7130 ] [71])
        (sign_extend:DI (reg:SI 0 ax [104]))) mABM.c:405 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [104])
        (nil)))
(insn 42 41 43 4 (set (reg:DI 0 ax [105])
        (reg:DI 1 dx [orig:71 D.7130 ] [71])) mABM.c:405 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [105])
                (ashift:DI (reg:DI 0 ax [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 513 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg:DI 0 ax [105])
                    (reg:DI 1 dx [orig:71 D.7130 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.7130 ] [71])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:71 D.7130 ] [71])
                (const_int 5 [0x5]))
            (nil))))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 0 ax [106])
                (ashift:DI (reg:DI 0 ax [105])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 46 45 47 4 (set (reg:DI 0 ax [105])
        (reg:DI 0 ax [106])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:72 D.7130 ] [72])
        (reg:DI 0 ax [105])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.7129 ] [73])
                (plus:DI (reg:DI 0 ax [orig:72 D.7130 ] [72])
                    (reg/f:DI 2 cx [orig:70 D.7129 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:72 D.7130 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:70 D.7129 ] [70])
            (nil))))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [orig:74 D.7131 ] [74])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:73 D.7129 ] [73])
                (const_int 16 [0x10])) [0 _24->time+0 S8 A128])) mABM.c:405 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7129 ] [73])
        (nil)))
(insn 50 49 51 4 (set (reg:XF 9 st(1) [orig:75 D.7127 ] [75])
        (mem:XF (reg/f:DI 0 ax [orig:74 D.7131 ] [74]) [0 *_25+0 S16 A128])) mABM.c:405 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.7131 ] [74])
        (nil)))
(insn 51 50 52 4 (set (reg:XF 10 st(2) [107])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 t+0 S16 A128])) mABM.c:405 131 {*movxf_internal_rex64}
     (nil))
(insn 52 51 53 4 (set (reg:XF 8 st [108])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 t_stp+0 S16 A128])) mABM.c:405 131 {*movxf_internal_rex64}
     (nil))
(insn 53 52 54 4 (set (reg:XF 8 st [orig:76 D.7127 ] [76])
        (minus:XF (reg:XF 10 st(2) [107])
            (reg:XF 8 st [108]))) mABM.c:405 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [108])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [107])
            (nil))))
(insn 54 53 55 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:75 D.7127 ] [75])
            (reg:XF 8 st [orig:76 D.7127 ] [76]))) mABM.c:405 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.7127 ] [76])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:75 D.7127 ] [75])
            (nil))))
(jump_insn 55 54 59 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 107)
            (pc))) mABM.c:405 612 {*jcc_1}
     (nil)
 -> 107)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 77 78 79 80 81 82 83 84 85 109 110 111 112 113 114 115 116 117 118 119 120
(note 59 55 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 5 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:406 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 5 (set (reg/f:DI 2 cx [orig:77 D.7129 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [109]) [0 *f_13(D)+0 S8 A64])) mABM.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 62 61 63 5 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:406 89 {*movsi_internal}
     (nil))
(insn 63 62 64 5 (set (reg:DI 1 dx [orig:78 D.7130 ] [78])
        (sign_extend:DI (reg:SI 0 ax [110]))) mABM.c:406 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [110])
        (nil)))
(insn 64 63 65 5 (set (reg:DI 0 ax [111])
        (reg:DI 1 dx [orig:78 D.7130 ] [78])) mABM.c:406 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 5 (parallel [
            (set (reg:DI 0 ax [111])
                (ashift:DI (reg:DI 0 ax [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:406 513 {*ashldi3_1}
     (nil))
(insn 66 65 67 5 (parallel [
            (set (reg:DI 0 ax [111])
                (plus:DI (reg:DI 0 ax [111])
                    (reg:DI 1 dx [orig:78 D.7130 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:406 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.7130 ] [78])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:78 D.7130 ] [78])
                (const_int 5 [0x5]))
            (nil))))
(insn 67 66 68 5 (parallel [
            (set (reg:DI 0 ax [112])
                (ashift:DI (reg:DI 0 ax [111])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:406 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 68 67 69 5 (set (reg:DI 0 ax [111])
        (reg:DI 0 ax [112])) mABM.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 69 68 70 5 (set (reg:DI 0 ax [orig:79 D.7130 ] [79])
        (reg:DI 0 ax [111])) mABM.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 70 69 71 5 (parallel [
            (set (reg/f:DI 0 ax [orig:80 D.7129 ] [80])
                (plus:DI (reg:DI 0 ax [orig:79 D.7130 ] [79])
                    (reg/f:DI 2 cx [orig:77 D.7129 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:406 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.7130 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:77 D.7129 ] [77])
            (nil))))
(insn 71 70 72 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:80 D.7129 ] [80])
                (const_int 40 [0x28])) [0 _31->ready+0 S4 A64])
        (const_int 1 [0x1])) mABM.c:406 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.7129 ] [80])
        (nil)))
(insn 72 71 73 5 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 5 (set (reg/f:DI 2 cx [orig:81 D.7129 ] [81])
        (mem/f:DI (reg/f:DI 0 ax [113]) [0 *f_13(D)+0 S8 A64])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [113])
        (nil)))
(insn 74 73 75 5 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:407 89 {*movsi_internal}
     (nil))
(insn 75 74 76 5 (set (reg:DI 1 dx [orig:82 D.7130 ] [82])
        (sign_extend:DI (reg:SI 0 ax [114]))) mABM.c:407 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [114])
        (nil)))
(insn 76 75 77 5 (set (reg:DI 0 ax [115])
        (reg:DI 1 dx [orig:82 D.7130 ] [82])) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 0 ax [115])
                (ashift:DI (reg:DI 0 ax [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 513 {*ashldi3_1}
     (nil))
(insn 78 77 79 5 (parallel [
            (set (reg:DI 0 ax [115])
                (plus:DI (reg:DI 0 ax [115])
                    (reg:DI 1 dx [orig:82 D.7130 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.7130 ] [82])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:82 D.7130 ] [82])
                (const_int 5 [0x5]))
            (nil))))
(insn 79 78 80 5 (parallel [
            (set (reg:DI 0 ax [116])
                (ashift:DI (reg:DI 0 ax [115])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [115])
        (nil)))
(insn 80 79 81 5 (set (reg:DI 0 ax [115])
        (reg:DI 0 ax [116])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(insn 81 80 82 5 (set (reg:DI 0 ax [orig:83 D.7130 ] [83])
        (reg:DI 0 ax [115])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [115])
        (nil)))
(insn 82 81 83 5 (parallel [
            (set (reg/f:DI 37 r8 [orig:84 D.7129 ] [84])
                (plus:DI (reg/f:DI 2 cx [orig:81 D.7129 ] [81])
                    (reg:DI 0 ax [orig:83 D.7130 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:83 D.7130 ] [83])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:81 D.7129 ] [81])
            (nil))))
(insn 83 82 84 5 (set (reg:XF 0 ax [117])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 t+0 S16 A128])) mABM.c:407 131 {*movxf_internal_rex64}
     (nil))
(insn 84 83 85 5 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S16 A128])
        (reg:XF 0 ax [117])) mABM.c:407 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [117])
        (nil)))
(insn 85 84 86 5 (set (reg:DI 1 dx [118])
        (reg/f:DI 7 sp)) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 5 (parallel [
            (set (reg:DI 4 si [119])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 274 {*adddi_1}
     (nil))
(insn 87 86 177 5 (set (reg:DI 0 ax [120])
        (const_int 38 [0x26])) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 177 87 178 5 (set (reg:DI 5 di [118])
        (reg:DI 1 dx [118])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [118])
        (nil)))
(insn 178 177 88 5 (set (reg:DI 2 cx [120])
        (reg:DI 0 ax [120])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [120])
        (nil)))
(insn 88 178 89 5 (parallel [
            (set (reg:DI 2 cx [120])
                (const_int 0 [0]))
            (set (reg:DI 5 di [118])
                (plus:DI (ashift:DI (reg:DI 2 cx [120])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [118])))
            (set (reg:DI 4 si [119])
                (plus:DI (ashift:DI (reg:DI 2 cx [120])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [119])))
            (set (mem:BLK (reg:DI 5 di [118]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [119]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [120]))
        ]) mABM.c:407 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [120])
        (expr_list:REG_UNUSED (reg:DI 5 di [118])
            (expr_list:REG_UNUSED (reg:DI 4 si [119])
                (nil)))))
(insn 89 88 90 5 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:84 D.7129 ] [84])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:84 D.7129 ] [84])
        (nil)))
(call_insn 90 89 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_calculate_st_point") [flags 0x3]  <function_decl 0x7f05a571f000 _calculate_st_point>) [0 _calculate_st_point S1 A8])
            (const_int 320 [0x140]))) mABM.c:407 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                            (const_int 304 [0x130])) [0  S16 A128]))
                (nil)))))
(insn 91 90 92 5 (set (reg:SI 0 ax [orig:85 D.7128 ] [85])
        (reg:SI 0 ax)) mABM.c:407 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 92 91 93 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 D.7128 ] [85])
            (const_int 0 [0]))) mABM.c:407 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.7128 ] [85])
        (nil)))
(jump_insn 93 92 94 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) mABM.c:407 612 {*jcc_1}
     (nil)
 -> 107)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 121 122 123 124
(note 94 93 95 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 6 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 6 (set (reg/f:DI 2 cx [orig:86 D.7129 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [121]) [0 *f_13(D)+0 S8 A64])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (nil)))
(insn 97 96 98 6 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:407 89 {*movsi_internal}
     (nil))
(insn 98 97 99 6 (set (reg:DI 1 dx [orig:87 D.7130 ] [87])
        (sign_extend:DI (reg:SI 0 ax [122]))) mABM.c:407 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [122])
        (nil)))
(insn 99 98 100 6 (set (reg:DI 0 ax [123])
        (reg:DI 1 dx [orig:87 D.7130 ] [87])) mABM.c:407 87 {*movdi_internal_rex64}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg:DI 0 ax [123])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 513 {*ashldi3_1}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg:DI 0 ax [123])
                    (reg:DI 1 dx [orig:87 D.7130 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:87 D.7130 ] [87])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:87 D.7130 ] [87])
                (const_int 5 [0x5]))
            (nil))))
(insn 102 101 103 6 (parallel [
            (set (reg:DI 0 ax [124])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 103 102 104 6 (set (reg:DI 0 ax [123])
        (reg:DI 0 ax [124])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [124])
        (nil)))
(insn 104 103 105 6 (set (reg:DI 0 ax [orig:88 D.7130 ] [88])
        (reg:DI 0 ax [123])) mABM.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 105 104 106 6 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.7129 ] [89])
                (plus:DI (reg:DI 0 ax [orig:88 D.7130 ] [88])
                    (reg/f:DI 2 cx [orig:86 D.7129 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:407 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.7130 ] [88])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:86 D.7129 ] [86])
            (nil))))
(insn 106 105 107 6 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:89 D.7129 ] [89])
                (const_int 40 [0x28])) [0 _40->ready+0 S4 A64])
        (const_int 0 [0])) mABM.c:407 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.7129 ] [89])
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5
;;              3
;;              4
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 107 106 108 7 128 "" [3 uses])
(note 108 107 109 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:405 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125
(code_label 110 109 111 8 127 "" [1 uses])
(note 111 110 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 111 114 8 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:405 89 {*movsi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [125])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:405 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [125])
        (nil)))
(jump_insn 115 114 116 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) mABM.c:405 612 {*jcc_1}
     (nil)
 -> 112)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 116 115 117 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 n_f+0 S4 A32])
        (const_int 0 [0])) mABM.c:410 89 {*movsi_internal}
     (nil))
(insn 118 117 174 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:411 89 {*movsi_internal}
     (nil))
(jump_insn 174 118 175 9 (set (pc)
        (label_ref 141)) mABM.c:411 650 {jump}
     (nil)
 -> 141)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 143)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 126 127 128 129
(code_label 143 175 121 10 134 "" [1 uses])
(note 121 143 122 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 10 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:411 87 {*movdi_internal_rex64}
     (nil))
(insn 123 122 124 10 (set (reg/f:DI 2 cx [orig:90 D.7129 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [126]) [0 *f_13(D)+0 S8 A64])) mABM.c:411 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [126])
        (nil)))
(insn 124 123 125 10 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:411 89 {*movsi_internal}
     (nil))
(insn 125 124 126 10 (set (reg:DI 1 dx [orig:91 D.7130 ] [91])
        (sign_extend:DI (reg:SI 0 ax [127]))) mABM.c:411 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [127])
        (nil)))
(insn 126 125 127 10 (set (reg:DI 0 ax [128])
        (reg:DI 1 dx [orig:91 D.7130 ] [91])) mABM.c:411 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 10 (parallel [
            (set (reg:DI 0 ax [128])
                (ashift:DI (reg:DI 0 ax [128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 513 {*ashldi3_1}
     (nil))
(insn 128 127 129 10 (parallel [
            (set (reg:DI 0 ax [128])
                (plus:DI (reg:DI 0 ax [128])
                    (reg:DI 1 dx [orig:91 D.7130 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:91 D.7130 ] [91])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:91 D.7130 ] [91])
                (const_int 5 [0x5]))
            (nil))))
(insn 129 128 130 10 (parallel [
            (set (reg:DI 0 ax [129])
                (ashift:DI (reg:DI 0 ax [128])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [128])
        (nil)))
(insn 130 129 131 10 (set (reg:DI 0 ax [128])
        (reg:DI 0 ax [129])) mABM.c:411 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [129])
        (nil)))
(insn 131 130 132 10 (set (reg:DI 0 ax [orig:92 D.7130 ] [92])
        (reg:DI 0 ax [128])) mABM.c:411 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [128])
        (nil)))
(insn 132 131 133 10 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.7129 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 D.7130 ] [92])
                    (reg/f:DI 2 cx [orig:90 D.7129 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:92 D.7130 ] [92])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:90 D.7129 ] [90])
            (nil))))
(insn 133 132 134 10 (set (reg:SI 0 ax [orig:94 D.7128 ] [94])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:93 D.7129 ] [93])
                (const_int 40 [0x28])) [0 _47->ready+0 S4 A64])) mABM.c:411 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.7129 ] [93])
        (nil)))
(insn 134 133 135 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 D.7128 ] [94])
            (const_int 0 [0]))) mABM.c:411 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 D.7128 ] [94])
        (nil)))
(jump_insn 135 134 136 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) mABM.c:411 612 {*jcc_1}
     (nil)
 -> 138)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 136 135 137 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 n_f+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 n_f+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 273 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 138 137 139 12 133 "" [1 uses])
(note 139 138 140 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:411 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130
(code_label 141 140 142 13 132 "" [1 uses])
(note 142 141 144 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 144 142 145 13 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:411 89 {*movsi_internal}
     (nil))
(insn 145 144 146 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [130])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:411 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [130])
        (nil)))
(jump_insn 146 145 147 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) mABM.c:411 612 {*jcc_1}
     (nil)
 -> 143)
;;  succ:       10
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 95 96 131 132
(note 147 146 148 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 14 (set (reg:SI 1 dx [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])) mABM.c:413 89 {*movsi_internal}
     (nil))
(insn 149 148 150 14 (set (reg:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:413 87 {*movdi_internal_rex64}
     (nil))
(insn 150 149 151 14 (set (reg:SI 4 si)
        (reg:SI 1 dx [131])) mABM.c:413 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [131])
        (nil)))
(insn 151 150 152 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) mABM.c:413 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [132])
        (nil)))
(call_insn 152 151 153 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_sort_ready") [flags 0x3]  <function_decl 0x7f05a56eae00 _sort_ready>) [0 _sort_ready S1 A8])
            (const_int 0 [0]))) mABM.c:413 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 153 152 156 14 (set (reg:SI 0 ax [orig:95 D.7128 ] [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 n_f+0 S4 A32])) mABM.c:415 89 {*movsi_internal}
     (nil))
(insn 156 153 160 14 (set (reg:SI 0 ax [orig:96 <retval> ] [96])
        (reg:SI 0 ax [orig:95 D.7128 ] [95])) mABM.c:415 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:95 D.7128 ] [95])
        (nil)))
(insn 160 156 163 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:96 <retval> ] [96])) mABM.c:416 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:96 <retval> ] [96])
        (nil)))
(insn 163 160 0 14 (use (reg/i:SI 0 ax)) mABM.c:416 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _mix_flight (_mix_flight, funcdef_no=18, decl_uid=4255, cgraph_uid=18)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 28:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 31:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=115 from oldreg=91, assigning class DIREG to r115
      Creating newreg=116 from oldreg=93, assigning class CREG to r116
   31: {r116:DI=0;r115:DI=r116:DI<<0x3+r115:DI;r92:DI=r116:DI<<0x3+r92:DI;[r115:DI]=[r92:DI];use r116:DI;}
      REG_UNUSED r93:DI
      REG_UNUSED r92:DI
      REG_UNUSED r91:DI
    Inserting insn reload before:
  102: r115:DI=r91:DI
  103: r116:DI=r93:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 62:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=117 from oldreg=103, assigning class DIREG to r117
      Creating newreg=118 from oldreg=105, assigning class CREG to r118
   62: {r118:DI=0;r117:DI=r118:DI<<0x3+r117:DI;r104:DI=r118:DI<<0x3+r104:DI;[r117:DI]=[r104:DI];use r118:DI;}
      REG_UNUSED r105:DI
      REG_UNUSED r104:DI
      REG_UNUSED r103:DI
    Inserting insn reload before:
  104: r117:DI=r103:DI
  105: r118:DI=r105:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 77:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=119 from oldreg=110, assigning class DIREG to r119
      Creating newreg=120 from oldreg=112, assigning class CREG to r120
   77: {r120:DI=0;r119:DI=r120:DI<<0x3+r119:DI;r111:DI=r120:DI<<0x3+r111:DI;[r119:DI]=[r111:DI];use r120:DI;}
      REG_UNUSED r112:DI
      REG_UNUSED r111:DI
      REG_UNUSED r110:DI
    Inserting insn reload before:
  106: r119:DI=r110:DI
  107: r120:DI=r112:DI

          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 78:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 97: point = 0
   Insn 94: point = 0
   Insn 90: point = 1
   Insn 87: point = 3
  BB 4
   Insn 85: point = 4
   Insn 84: point = 4
   Insn 82: point = 5
   Insn 81: point = 7
  BB 2
   Insn 100: point = 8
   Insn 8: point = 8
   Insn 4: point = 8
   Insn 3: point = 8
   Insn 2: point = 8
  BB 3
   Insn 78: point = 8
   Insn 77: point = 8
   Insn 107: point = 9
	Hard reg 0 is preferable by r120 with profit 1
   Insn 106: point = 11
	Hard reg 1 is preferable by r119 with profit 1
   Insn 76: point = 13
   Insn 75: point = 14
   Insn 74: point = 15
   Insn 73: point = 17
   Insn 72: point = 19
   Insn 71: point = 21
   Insn 70: point = 23
   Insn 69: point = 25
   Insn 68: point = 26
   Insn 67: point = 26
   Insn 66: point = 27
   Insn 65: point = 29
   Insn 64: point = 30
   Insn 63: point = 32
   Insn 62: point = 33
   Insn 105: point = 34
	Hard reg 0 is preferable by r118 with profit 1
   Insn 104: point = 36
	Hard reg 1 is preferable by r117 with profit 1
   Insn 61: point = 38
   Insn 60: point = 39
   Insn 59: point = 41
   Insn 58: point = 43
   Insn 57: point = 45
   Insn 56: point = 47
   Insn 55: point = 49
   Insn 54: point = 51
   Insn 53: point = 52
   Insn 52: point = 52
   Insn 51: point = 53
   Insn 50: point = 55
   Insn 49: point = 56
   Insn 48: point = 58
   Insn 47: point = 59
   Insn 46: point = 61
   Insn 45: point = 63
   Insn 44: point = 65
   Insn 43: point = 67
   Insn 42: point = 68
   Insn 41: point = 68
   Insn 40: point = 69
   Insn 39: point = 71
   Insn 38: point = 73
   Insn 37: point = 75
   Insn 36: point = 76
   Insn 35: point = 78
   Insn 34: point = 80
   Insn 33: point = 81
   Insn 32: point = 83
   Insn 31: point = 84
   Insn 103: point = 85
	Hard reg 0 is preferable by r116 with profit 1
   Insn 102: point = 87
	Hard reg 1 is preferable by r115 with profit 1
   Insn 30: point = 89
   Insn 29: point = 90
   Insn 28: point = 92
   Insn 27: point = 93
   Insn 26: point = 95
   Insn 25: point = 97
   Insn 24: point = 99
   Insn 23: point = 101
   Insn 22: point = 102
   Insn 21: point = 102
   Insn 20: point = 103
   Insn 19: point = 105
   Insn 18: point = 107
   Insn 17: point = 109
   Insn 16: point = 110
   Insn 15: point = 112
   Insn 14: point = 114
   Insn 13: point = 115
   Insn 12: point = 117
 r59: [4..5]
 r60: [94..115]
 r61: [111..112]
 r62: [108..110]
 r63: [106..107]
 r64: [104..105]
 r65: [101..103]
 r66: [94..95]
 r67: [91..93]
 r68: [60..81]
 r69: [77..78]
 r70: [74..76]
 r71: [72..73]
 r72: [70..71]
 r73: [67..69]
 r74: [60..61]
 r75: [42..59]
 r76: [44..56]
 r77: [51..53]
 r78: [44..45]
 r79: [40..43]
 r80: [18..30]
 r81: [25..27]
 r82: [18..19]
 r83: [16..17]
 r84: [2..3]
 r85: [0..1]
 r86: [116..117]
 r87: [113..114]
 r88: [108..109]
 r89: [100..102] [96..97]
 r90: [98..99]
 r91: [88..92]
 r92: [84..90]
 r93: [86..89]
 r94: [82..83]
 r95: [79..80]
 r96: [74..75]
 r97: [66..68] [62..63]
 r98: [64..65]
 r99: [57..58]
 r100: [54..55]
 r101: [50..52] [46..47]
 r102: [48..49]
 r103: [37..41]
 r104: [33..39]
 r105: [35..38]
 r106: [31..32]
 r107: [28..29]
 r108: [24..26] [20..21]
 r109: [22..23]
 r110: [12..15]
 r111: [8..14]
 r112: [10..13]
 r113: [6..7]
 r115: [84..87]
 r116: [84..85]
 r117: [33..36]
 r118: [33..34]
 r119: [8..11]
 r120: [8..9]
Compressing live ranges: from 118 to 98 - 83%
Ranges after the compression:
 r59: [4..5]
 r60: [78..95]
 r61: [92..93]
 r62: [90..91]
 r63: [88..89]
 r64: [86..87]
 r65: [84..85]
 r66: [78..79]
 r67: [76..77]
 r68: [50..67]
 r69: [64..65]
 r70: [62..63]
 r71: [60..61]
 r72: [58..59]
 r73: [56..57]
 r74: [50..51]
 r75: [36..49]
 r76: [38..47]
 r77: [44..45]
 r78: [38..39]
 r79: [34..37]
 r80: [16..25]
 r81: [22..23]
 r82: [16..17]
 r83: [14..15]
 r84: [2..3]
 r85: [0..1]
 r86: [96..97]
 r87: [94..95]
 r88: [90..91]
 r89: [84..85] [80..81]
 r90: [82..83]
 r91: [74..77]
 r92: [70..75]
 r93: [72..75]
 r94: [68..69]
 r95: [66..67]
 r96: [62..63]
 r97: [56..57] [52..53]
 r98: [54..55]
 r99: [48..49]
 r100: [46..47]
 r101: [44..45] [40..41]
 r102: [42..43]
 r103: [32..35]
 r104: [28..33]
 r105: [30..33]
 r106: [26..27]
 r107: [24..25]
 r108: [22..23] [18..19]
 r109: [20..21]
 r110: [12..13]
 r111: [8..13]
 r112: [10..13]
 r113: [6..7]
 r115: [70..73]
 r116: [70..71]
 r117: [28..31]
 r118: [28..29]
 r119: [8..11]
 r120: [8..9]
	 Assigning to 115 (cl=DIREG, orig=91, freq=2, tfirst=115, tfreq=2)...
	   Assign 5 to reload r115 (freq=2)
	 Assigning to 116 (cl=CREG, orig=93, freq=2, tfirst=116, tfreq=2)...
	   Assign 2 to reload r116 (freq=2)
	 Assigning to 117 (cl=DIREG, orig=103, freq=2, tfirst=117, tfreq=2)...
	   Assign 5 to reload r117 (freq=2)
	 Assigning to 118 (cl=CREG, orig=105, freq=2, tfirst=118, tfreq=2)...
	   Assign 2 to reload r118 (freq=2)
	 Assigning to 119 (cl=DIREG, orig=110, freq=2, tfirst=119, tfreq=2)...
	   Assign 5 to reload r119 (freq=2)
	 Assigning to 120 (cl=CREG, orig=112, freq=2, tfirst=120, tfreq=2)...
	   Assign 2 to reload r120 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=92, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=76, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 82
changing reg in insn 84
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 33
changing reg in insn 47
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 59
changing reg in insn 49
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 67
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 87
changing reg in insn 90
changing reg in insn 90
changing reg in insn 94
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 26
changing reg in insn 24
changing reg in insn 23
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 56
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 62
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 69
changing reg in insn 68
changing reg in insn 67
changing reg in insn 72
changing reg in insn 70
changing reg in insn 69
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
starting the processing of deferred insns
ending the processing of deferred insns


_mix_flight

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={52d,52u} r1={10d,14u,6e} r2={11d,13u} r4={8d,8u} r5={7d,7u} r6={1d,25u} r7={1d,5u} r17={25d,1u} r20={1d,1u,3e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 261{126d,126u,9e} in 86{86 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) mABM.c:418 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 list+0 S8 A64])
        (reg:DI 4 si [ list ])) mABM.c:418 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ list ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [0 N+0 S4 A32])
        (reg:SI 1 dx [ N ])) mABM.c:418 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 100 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:422 89 {*movsi_internal}
     (nil))
(jump_insn 100 8 101 2 (set (pc)
        (label_ref 79)) mABM.c:422 650 {jump}
     (nil)
 -> 79)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 101 100 83)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
(code_label 83 101 11 3 140 "" [1 uses])
(note 11 83 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 x+0 S8 A64])) mABM.c:423 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 2 cx [orig:60 D.7133 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [86]) [0 *x_5(D)+0 S8 A64])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [86])
        (nil)))
(insn 14 13 15 3 (set (reg:SI 0 ax [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])) mABM.c:423 89 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 0 ax [orig:61 D.7134 ] [61])
        (sign_extend:DI (reg:SI 0 ax [87]))) mABM.c:423 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [87])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.7134 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:61 D.7134 ] [61])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7134 ] [61])
        (nil)))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 list+0 S8 A64])) mABM.c:423 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.7135 ] [63])
                (plus:DI (reg/f:DI 0 ax [88])
                    (reg:DI 1 dx [orig:62 D.7134 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7134 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -192 [0xffffffffffffff40])) [0 list+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.7134 ] [62]))
                (nil)))))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:64 D.7132 ] [64])
        (mem:SI (reg/f:DI 0 ax [orig:63 D.7135 ] [63]) [0 *_10+0 S4 A32])) mABM.c:423 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7135 ] [63])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 1 dx [orig:65 D.7134 ] [65])
        (sign_extend:DI (reg:SI 0 ax [orig:64 D.7132 ] [64]))) mABM.c:423 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7132 ] [64])
        (nil)))
(insn 21 20 22 3 (set (reg:DI 0 ax [89])
        (reg:DI 1 dx [orig:65 D.7134 ] [65])) mABM.c:423 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [89])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 513 {*ashldi3_1}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 0 ax [89])
                (plus:DI (reg:DI 0 ax [89])
                    (reg:DI 1 dx [orig:65 D.7134 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7134 ] [65])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:65 D.7134 ] [65])
                (const_int 5 [0x5]))
            (nil))))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 0 ax [90])
                (ashift:DI (reg:DI 0 ax [89])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 25 24 26 3 (set (reg:DI 0 ax [89])
        (reg:DI 0 ax [90])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(insn 26 25 27 3 (set (reg:DI 0 ax [orig:66 D.7134 ] [66])
        (reg:DI 0 ax [89])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.7133 ] [67])
                (plus:DI (reg:DI 0 ax [orig:66 D.7134 ] [66])
                    (reg/f:DI 2 cx [orig:60 D.7133 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.7134 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:60 D.7133 ] [60])
            (nil))))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 1 dx [91])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:423 274 {*adddi_1}
     (nil))
(insn 29 28 30 3 (set (reg:DI 4 si [92])
        (reg/f:DI 0 ax [orig:67 D.7133 ] [67])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7133 ] [67])
        (nil)))
(insn 30 29 102 3 (set (reg:DI 0 ax [93])
        (const_int 20 [0x14])) mABM.c:423 87 {*movdi_internal_rex64}
     (nil))
(insn 102 30 103 3 (set (reg:DI 5 di [91])
        (reg:DI 1 dx [91])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [91])
        (nil)))
(insn 103 102 31 3 (set (reg:DI 2 cx [93])
        (reg:DI 0 ax [93])) mABM.c:423 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (nil)))
(insn 31 103 32 3 (parallel [
            (set (reg:DI 2 cx [93])
                (const_int 0 [0]))
            (set (reg:DI 5 di [91])
                (plus:DI (ashift:DI (reg:DI 2 cx [93])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [91])))
            (set (reg:DI 4 si [92])
                (plus:DI (ashift:DI (reg:DI 2 cx [93])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [92])))
            (set (mem/c:BLK (reg:DI 5 di [91]) [0 comodo+0 S160 A128])
                (mem:BLK (reg:DI 4 si [92]) [0 *_14+0 S160 A128]))
            (use (reg:DI 2 cx [93]))
        ]) mABM.c:423 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [93])
        (expr_list:REG_UNUSED (reg:DI 5 di [91])
            (expr_list:REG_UNUSED (reg:DI 4 si [92])
                (nil)))))
(insn 32 31 33 3 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 x+0 S8 A64])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 2 cx [orig:68 D.7133 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [94]) [0 *x_5(D)+0 S8 A64])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 34 33 35 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])) mABM.c:424 89 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 0 ax [orig:69 D.7134 ] [69])
        (sign_extend:DI (reg:SI 0 ax [95]))) mABM.c:424 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 36 35 37 3 (parallel [
            (set (reg:DI 1 dx [orig:70 D.7134 ] [70])
                (ashift:DI (reg:DI 0 ax [orig:69 D.7134 ] [69])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.7134 ] [69])
        (nil)))
(insn 37 36 38 3 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 list+0 S8 A64])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 3 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7135 ] [71])
                (plus:DI (reg/f:DI 0 ax [96])
                    (reg:DI 1 dx [orig:70 D.7134 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.7134 ] [70])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -192 [0xffffffffffffff40])) [0 list+0 S8 A64])
                    (reg:DI 1 dx [orig:70 D.7134 ] [70]))
                (nil)))))
(insn 39 38 40 3 (set (reg:SI 0 ax [orig:72 D.7132 ] [72])
        (mem:SI (reg/f:DI 0 ax [orig:71 D.7135 ] [71]) [0 *_18+0 S4 A32])) mABM.c:424 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7135 ] [71])
        (nil)))
(insn 40 39 41 3 (set (reg:DI 1 dx [orig:73 D.7134 ] [73])
        (sign_extend:DI (reg:SI 0 ax [orig:72 D.7132 ] [72]))) mABM.c:424 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.7132 ] [72])
        (nil)))
(insn 41 40 42 3 (set (reg:DI 0 ax [97])
        (reg:DI 1 dx [orig:73 D.7134 ] [73])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 513 {*ashldi3_1}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg:DI 0 ax [97])
                    (reg:DI 1 dx [orig:73 D.7134 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.7134 ] [73])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:73 D.7134 ] [73])
                (const_int 5 [0x5]))
            (nil))))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 0 ax [98])
                (ashift:DI (reg:DI 0 ax [97])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 45 44 46 3 (set (reg:DI 0 ax [97])
        (reg:DI 0 ax [98])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 46 45 47 3 (set (reg:DI 0 ax [orig:74 D.7134 ] [74])
        (reg:DI 0 ax [97])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg/f:DI 4 si [orig:75 D.7133 ] [75])
                (plus:DI (reg/f:DI 2 cx [orig:68 D.7133 ] [68])
                    (reg:DI 0 ax [orig:74 D.7134 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.7134 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:68 D.7133 ] [68])
            (nil))))
(insn 48 47 49 3 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 x+0 S8 A64])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 3 (set (reg/f:DI 2 cx [orig:76 D.7133 ] [76])
        (mem/f:DI (reg/f:DI 0 ax [99]) [0 *x_5(D)+0 S8 A64])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 50 49 51 3 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])) mABM.c:424 89 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 1 dx [orig:77 D.7134 ] [77])
        (sign_extend:DI (reg:SI 0 ax [100]))) mABM.c:424 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [100])
        (nil)))
(insn 52 51 53 3 (set (reg:DI 0 ax [101])
        (reg:DI 1 dx [orig:77 D.7134 ] [77])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 513 {*ashldi3_1}
     (nil))
(insn 54 53 55 3 (parallel [
            (set (reg:DI 0 ax [101])
                (plus:DI (reg:DI 0 ax [101])
                    (reg:DI 1 dx [orig:77 D.7134 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.7134 ] [77])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:77 D.7134 ] [77])
                (const_int 5 [0x5]))
            (nil))))
(insn 55 54 56 3 (parallel [
            (set (reg:DI 0 ax [102])
                (ashift:DI (reg:DI 0 ax [101])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 56 55 57 3 (set (reg:DI 0 ax [101])
        (reg:DI 0 ax [102])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 57 56 58 3 (set (reg:DI 0 ax [orig:78 D.7134 ] [78])
        (reg:DI 0 ax [101])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 58 57 59 3 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.7133 ] [79])
                (plus:DI (reg:DI 0 ax [orig:78 D.7134 ] [78])
                    (reg/f:DI 2 cx [orig:76 D.7133 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:424 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:78 D.7134 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:76 D.7133 ] [76])
            (nil))))
(insn 59 58 60 3 (set (reg:DI 1 dx [103])
        (reg/f:DI 4 si [orig:75 D.7133 ] [75])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 4 si [orig:75 D.7133 ] [75])
        (nil)))
(insn 60 59 61 3 (set (reg:DI 4 si [104])
        (reg/f:DI 0 ax [orig:79 D.7133 ] [79])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7133 ] [79])
        (nil)))
(insn 61 60 104 3 (set (reg:DI 0 ax [105])
        (const_int 20 [0x14])) mABM.c:424 87 {*movdi_internal_rex64}
     (nil))
(insn 104 61 105 3 (set (reg:DI 5 di [103])
        (reg:DI 1 dx [103])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [103])
        (nil)))
(insn 105 104 62 3 (set (reg:DI 2 cx [105])
        (reg:DI 0 ax [105])) mABM.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 62 105 63 3 (parallel [
            (set (reg:DI 2 cx [105])
                (const_int 0 [0]))
            (set (reg:DI 5 di [103])
                (plus:DI (ashift:DI (reg:DI 2 cx [105])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [103])))
            (set (reg:DI 4 si [104])
                (plus:DI (ashift:DI (reg:DI 2 cx [105])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [104])))
            (set (mem:BLK (reg:DI 5 di [103]) [0 *_22+0 S160 A128])
                (mem:BLK (reg:DI 4 si [104]) [0 *_26+0 S160 A128]))
            (use (reg:DI 2 cx [105]))
        ]) mABM.c:424 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [105])
        (expr_list:REG_UNUSED (reg:DI 5 di [103])
            (expr_list:REG_UNUSED (reg:DI 4 si [104])
                (nil)))))
(insn 63 62 64 3 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 x+0 S8 A64])) mABM.c:425 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 3 (set (reg/f:DI 2 cx [orig:80 D.7133 ] [80])
        (mem/f:DI (reg/f:DI 0 ax [106]) [0 *x_5(D)+0 S8 A64])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 65 64 66 3 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])) mABM.c:425 89 {*movsi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 1 dx [orig:81 D.7134 ] [81])
        (sign_extend:DI (reg:SI 0 ax [107]))) mABM.c:425 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 67 66 68 3 (set (reg:DI 0 ax [108])
        (reg:DI 1 dx [orig:81 D.7134 ] [81])) mABM.c:425 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 3 (parallel [
            (set (reg:DI 0 ax [108])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:425 513 {*ashldi3_1}
     (nil))
(insn 69 68 70 3 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg:DI 0 ax [108])
                    (reg:DI 1 dx [orig:81 D.7134 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:425 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.7134 ] [81])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:81 D.7134 ] [81])
                (const_int 5 [0x5]))
            (nil))))
(insn 70 69 71 3 (parallel [
            (set (reg:DI 0 ax [109])
                (ashift:DI (reg:DI 0 ax [108])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:425 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 71 70 72 3 (set (reg:DI 0 ax [108])
        (reg:DI 0 ax [109])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(insn 72 71 73 3 (set (reg:DI 0 ax [orig:82 D.7134 ] [82])
        (reg:DI 0 ax [108])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(insn 73 72 74 3 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.7133 ] [83])
                (plus:DI (reg:DI 0 ax [orig:82 D.7134 ] [82])
                    (reg/f:DI 2 cx [orig:80 D.7133 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:425 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:82 D.7134 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:80 D.7133 ] [80])
            (nil))))
(insn 74 73 75 3 (set (reg:DI 1 dx [110])
        (reg/f:DI 0 ax [orig:83 D.7133 ] [83])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.7133 ] [83])
        (nil)))
(insn 75 74 76 3 (parallel [
            (set (reg:DI 4 si [111])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:425 274 {*adddi_1}
     (nil))
(insn 76 75 106 3 (set (reg:DI 0 ax [112])
        (const_int 20 [0x14])) mABM.c:425 87 {*movdi_internal_rex64}
     (nil))
(insn 106 76 107 3 (set (reg:DI 5 di [110])
        (reg:DI 1 dx [110])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [110])
        (nil)))
(insn 107 106 77 3 (set (reg:DI 2 cx [112])
        (reg:DI 0 ax [112])) mABM.c:425 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 77 107 78 3 (parallel [
            (set (reg:DI 2 cx [112])
                (const_int 0 [0]))
            (set (reg:DI 5 di [110])
                (plus:DI (ashift:DI (reg:DI 2 cx [112])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [110])))
            (set (reg:DI 4 si [111])
                (plus:DI (ashift:DI (reg:DI 2 cx [112])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [111])))
            (set (mem:BLK (reg:DI 5 di [110]) [0 *_30+0 S160 A128])
                (mem/c:BLK (reg:DI 4 si [111]) [0 comodo+0 S160 A128]))
            (use (reg:DI 2 cx [112]))
        ]) mABM.c:425 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [112])
        (expr_list:REG_UNUSED (reg:DI 5 di [110])
            (expr_list:REG_UNUSED (reg:DI 4 si [111])
                (nil)))))
(insn 78 77 79 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:422 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 113
(code_label 79 78 80 4 139 "" [1 uses])
(note 80 79 81 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 4 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [0 N+0 S4 A32])) mABM.c:422 89 {*movsi_internal}
     (nil))
(insn 82 81 84 4 (parallel [
            (set (reg:SI 0 ax [orig:59 D.7132 ] [59])
                (plus:SI (reg:SI 0 ax [113])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:422 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [113])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -196 [0xffffffffffffff3c])) [0 N+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 84 82 85 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.7132 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -164 [0xffffffffffffff5c])) [0 i+0 S4 A32]))) mABM.c:422 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7132 ] [59])
        (nil)))
(jump_insn 85 84 86 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) mABM.c:422 612 {*jcc_1}
     (nil)
 -> 83)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 84 85
(note 86 85 87 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 90 5 (set (reg:SI 0 ax [orig:84 D.7132 ] [84])
        (const_int 1 [0x1])) mABM.c:428 89 {*movsi_internal}
     (nil))
(insn 90 87 94 5 (set (reg:SI 0 ax [orig:85 <retval> ] [85])
        (reg:SI 0 ax [orig:84 D.7132 ] [84])) mABM.c:428 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.7132 ] [84])
        (nil)))
(insn 94 90 97 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:85 <retval> ] [85])) mABM.c:429 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 <retval> ] [85])
        (nil)))
(insn 97 94 0 5 (use (reg/i:SI 0 ax)) mABM.c:429 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _suffle_list (_suffle_list, funcdef_no=19, decl_uid=4265, cgraph_uid=19)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 30:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 48: point = 0
   Insn 45: point = 0
   Insn 41: point = 1
   Insn 38: point = 3
  BB 4
   Insn 36: point = 4
   Insn 35: point = 4
   Insn 34: point = 5
  BB 2
   Insn 51: point = 6
   Insn 19: point = 6
   Insn 18: point = 6
   Insn 17: point = 6
   Insn 16: point = 7
   Insn 15: point = 8
   Insn 14: point = 9
   Insn 13: point = 10
   Insn 12: point = 11
   Insn 11: point = 12
   Insn 10: point = 12
   Insn 9: point = 13
   Insn 8: point = 14
   Insn 7: point = 15
   Insn 3: point = 16
   Insn 2: point = 16
  BB 3
   Insn 30: point = 16
   Insn 29: point = 16
   Insn 28: point = 17
   Insn 27: point = 18
   Insn 26: point = 20
   Insn 25: point = 22
   Insn 24: point = 24
   Insn 23: point = 25
 r59: [12..15]
 r60: [7..11]
 r61: [19..25]
 r62: [21..22]
 r63: [19..20]
 r64: [16..18]
 r65: [2..3]
 r66: [0..1]
 r67: [13..14]
 r68: [8..10]
 r69: [6..9]
 r70: [23..24]
 r71: [16..17]
 r72: [4..5]
Compressing live ranges: from 26 to 18 - 69%
Ranges after the compression:
 r59: [8..9]
 r60: [6..7]
 r61: [12..17]
 r62: [14..15]
 r63: [12..13]
 r64: [10..11]
 r65: [2..3]
 r66: [0..1]
 r67: [8..9]
 r68: [6..7]
 r69: [6..7]
 r70: [16..17]
 r71: [10..11]
 r72: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 12
changing reg in insn 16
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 45
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.


_suffle_list

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,9u} r1={10d,7u} r2={4d,1u} r4={5d,3u} r5={5d,3u} r6={1d,20u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 182{130d,52u,0e} in 31{29 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 67 68 69
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:431 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32])
        (reg:SI 4 si [ n_f ])) mABM.c:431 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ n_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [orig:59 D.7136 ] [59])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tool.lista+0 S8 A64])) mABM.c:433 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:SI 1 dx [67])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32])) mABM.c:433 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [67])) mABM.c:433 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [67])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 D.7136 ] [59])) mABM.c:433 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.7136 ] [59])
        (nil)))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("mischia") [flags 0x41]  <function_decl 0x7f05a595e600 mischia>) [0 mischia S1 A8])
        (const_int 0 [0])) mABM.c:433 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 2 cx [orig:60 D.7136 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tool.lista+0 S8 A64])) mABM.c:434 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx [68])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32])) mABM.c:434 89 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:434 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (reg:SI 1 dx [68])) mABM.c:434 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [68])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:60 D.7136 ] [60])) mABM.c:434 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:60 D.7136 ] [60])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [69])) mABM.c:434 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [69])
        (nil)))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_mix_flight") [flags 0x3]  <function_decl 0x7f05a571f200 _mix_flight>) [0 _mix_flight S1 A8])
            (const_int 0 [0]))) mABM.c:434 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 19 18 51 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:437 89 {*movsi_internal}
     (nil))
(jump_insn 51 19 52 2 (set (pc)
        (label_ref 31)) mABM.c:437 650 {jump}
     (nil)
 -> 31)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 33)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64 70 71
(code_label 33 52 22 3 144 "" [1 uses])
(note 22 33 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg/f:DI 0 ax [orig:61 D.7136 ] [61])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tool.lista+0 S8 A64])) mABM.c:437 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg:SI 1 dx [70])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:437 89 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 1 dx [orig:62 D.7137 ] [62])
        (sign_extend:DI (reg:SI 1 dx [70]))) mABM.c:437 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [70])
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 1 dx [orig:63 D.7137 ] [63])
                (ashift:DI (reg:DI 1 dx [orig:62 D.7137 ] [62])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:437 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7137 ] [62])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 1 dx [orig:64 D.7136 ] [64])
                (plus:DI (reg:DI 1 dx [orig:63 D.7137 ] [63])
                    (reg/f:DI 0 ax [orig:61 D.7136 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:437 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.7137 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7136 ] [61])
            (nil))))
(insn 28 27 29 3 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:437 89 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (mem:SI (reg/f:DI 1 dx [orig:64 D.7136 ] [64]) [0 *_10+0 S4 A32])
        (reg:SI 0 ax [71])) mABM.c:437 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:64 D.7136 ] [64])
            (nil))))
(insn 30 29 31 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:437 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72
(code_label 31 30 32 4 143 "" [1 uses])
(note 32 31 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 32 35 4 (set (reg:SI 0 ax [72])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:437 89 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [72])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 n_f+0 S4 A32]))) mABM.c:437 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [72])
        (nil)))
(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mABM.c:437 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 65 66
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 41 5 (set (reg:SI 0 ax [orig:65 D.7138 ] [65])
        (const_int 1 [0x1])) mABM.c:439 89 {*movsi_internal}
     (nil))
(insn 41 38 45 5 (set (reg:SI 0 ax [orig:66 <retval> ] [66])
        (reg:SI 0 ax [orig:65 D.7138 ] [65])) mABM.c:439 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.7138 ] [65])
        (nil)))
(insn 45 41 48 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:66 <retval> ] [66])) mABM.c:440 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 <retval> ] [66])
        (nil)))
(insn 48 45 0 5 (use (reg/i:SI 0 ax)) mABM.c:440 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _checkFlightsCollision (_checkFlightsCollision, funcdef_no=20, decl_uid=4274, cgraph_uid=20)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=119 from oldreg=62, assigning class GENERAL_REGS to r119
   13: {r119:DI=r119:DI<<0x4;clobber flags:CC;}
      REG_DEAD r61:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  158: r119:DI=r61:DI
    Inserting insn reload after:
  159: r62:DI=r119:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 28:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 119:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
   Insn 139: point = 0
   Insn 136: point = 0
   Insn 132: point = 1
  BB 13
   Insn 156: point = 4
   Insn 114: point = 4
   Insn 113: point = 6
  BB 10
   Insn 152: point = 7
   Insn 72: point = 7
   Insn 71: point = 9
  BB 8
   Insn 150: point = 10
   Insn 41: point = 10
  BB 16
   Insn 129: point = 11
  BB 15
   Insn 127: point = 12
   Insn 126: point = 12
   Insn 124: point = 13
   Insn 123: point = 15
   Insn 122: point = 17
  BB 11
   Insn 154: point = 18
   Insn 79: point = 18
   Insn 78: point = 19
   Insn 77: point = 21
  BB 9
   Insn 69: point = 22
   Insn 68: point = 22
   Insn 67: point = 23
   Insn 66: point = 24
   Insn 65: point = 24
   Insn 64: point = 25
   Insn 63: point = 26
   Insn 62: point = 27
   Insn 61: point = 29
   Insn 60: point = 30
   Insn 59: point = 32
   Insn 58: point = 34
   Insn 57: point = 36
   Insn 56: point = 38
   Insn 55: point = 40
   Insn 54: point = 41
   Insn 53: point = 43
   Insn 52: point = 44
   Insn 51: point = 46
   Insn 50: point = 48
   Insn 49: point = 50
   Insn 48: point = 52
   Insn 47: point = 53
   Insn 46: point = 55
  BB 7
   Insn 39: point = 56
   Insn 38: point = 56
   Insn 37: point = 57
  BB 4
   Insn 148: point = 58
  BB 6
   Insn 34: point = 58
   Insn 33: point = 58
   Insn 31: point = 59
  BB 2
   Insn 145: point = 60
   Insn 7: point = 60
   Insn 3: point = 60
   Insn 2: point = 60
  BB 5
   Insn 28: point = 60
  BB 3
   Insn 19: point = 60
   Insn 18: point = 60
   Insn 17: point = 61
   Insn 16: point = 62
   Insn 15: point = 64
   Insn 14: point = 66
   Insn 159: point = 67
	Hard reg 1 is preferable by r119 with profit 1
   Insn 13: point = 69
   Insn 158: point = 69
	Hard reg 1 is preferable by r119 with profit 1
	Hard reg 0 is preferable by r119 with profit 1
   Insn 12: point = 71
   Insn 11: point = 73
  BB 14
   Insn 119: point = 74
  BB 12
   Insn 111: point = 74
   Insn 110: point = 74
   Insn 109: point = 75
   Insn 108: point = 76
   Insn 107: point = 76
   Insn 106: point = 77
   Insn 105: point = 78
   Insn 104: point = 79
   Insn 103: point = 81
   Insn 102: point = 83
   Insn 101: point = 85
   Insn 100: point = 87
   Insn 99: point = 88
   Insn 98: point = 90
   Insn 97: point = 91
   Insn 96: point = 93
   Insn 95: point = 95
   Insn 94: point = 97
   Insn 93: point = 99
   Insn 92: point = 101
   Insn 91: point = 102
   Insn 90: point = 104
   Insn 89: point = 105
   Insn 88: point = 107
   Insn 87: point = 109
   Insn 86: point = 111
   Insn 85: point = 113
   Insn 84: point = 114
   Insn 83: point = 116
 r59: [10..11] [7..7] [2..4]
 r60: [58..59]
 r61: [70..71]
 r62: [65..67]
 r63: [63..64]
 r64: [60..62]
 r65: [60..61]
 r66: [56..57]
 r67: [47..53]
 r68: [49..50]
 r69: [47..48]
 r70: [45..46]
 r71: [26..44]
 r72: [33..41]
 r73: [37..38]
 r74: [35..36]
 r75: [33..34]
 r76: [31..32]
 r77: [25..30]
 r78: [24..27]
 r79: [22..23]
 r80: [14..15]
 r81: [12..13]
 r82: [108..114]
 r83: [110..111]
 r84: [108..109]
 r85: [106..107]
 r86: [78..105]
 r87: [94..102]
 r88: [98..99]
 r89: [96..97]
 r90: [94..95]
 r91: [92..93]
 r92: [77..91]
 r93: [82..88]
 r94: [84..85]
 r95: [82..83]
 r96: [80..81]
 r97: [76..79]
 r98: [74..75]
 r99: [0..1]
 r100: [72..73]
 r101: [65..66]
 r102: [54..55]
 r103: [51..52]
 r104: [42..43]
 r105: [39..40]
 r106: [28..29]
 r107: [8..9]
 r108: [20..21]
 r109: [18..19]
 r110: [115..116]
 r111: [112..113]
 r112: [103..104]
 r113: [100..101]
 r114: [89..90]
 r115: [86..87]
 r116: [5..6]
 r117: [16..17]
 r119: [68..69]
Compressing live ranges: from 117 to 101 - 86%
Ranges after the compression:
 r59: [9..10] [6..6] [2..3]
 r60: [51..52]
 r61: [61..62]
 r62: [57..58]
 r63: [55..56]
 r64: [53..54]
 r65: [53..54]
 r66: [49..50]
 r67: [41..46]
 r68: [43..44]
 r69: [41..42]
 r70: [39..40]
 r71: [23..38]
 r72: [29..36]
 r73: [33..34]
 r74: [31..32]
 r75: [29..30]
 r76: [27..28]
 r77: [23..26]
 r78: [23..24]
 r79: [21..22]
 r80: [13..14]
 r81: [11..12]
 r82: [93..98]
 r83: [95..96]
 r84: [93..94]
 r85: [91..92]
 r86: [67..90]
 r87: [81..88]
 r88: [85..86]
 r89: [83..84]
 r90: [81..82]
 r91: [79..80]
 r92: [67..78]
 r93: [71..76]
 r94: [73..74]
 r95: [71..72]
 r96: [69..70]
 r97: [67..68]
 r98: [65..66]
 r99: [0..1]
 r100: [63..64]
 r101: [57..58]
 r102: [47..48]
 r103: [45..46]
 r104: [37..38]
 r105: [35..36]
 r106: [25..26]
 r107: [7..8]
 r108: [19..20]
 r109: [17..18]
 r110: [99..100]
 r111: [97..98]
 r112: [89..90]
 r113: [87..88]
 r114: [77..78]
 r115: [75..76]
 r116: [4..5]
 r117: [15..16]
 r119: [59..60]
	 Assigning to 119 (cl=GENERAL_REGS, orig=62, freq=3, tfirst=119, tfreq=3)...
	   Assign 0 to reload r119 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 129
changing reg in insn 114
changing reg in insn 72
changing reg in insn 41
changing reg in insn 132
changing reg in insn 31
changing reg in insn 33
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 37
changing reg in insn 38
changing reg in insn 47
changing reg in insn 51
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 63
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 84
changing reg in insn 88
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 105
changing reg in insn 91
changing reg in insn 96
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 106
changing reg in insn 99
changing reg in insn 103
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 132
changing reg in insn 136
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 113
changing reg in insn 114
changing reg in insn 122
changing reg in insn 123
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 108.


_checkFlightsCollision

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={46d,43u} r1={14d,11u,1e} r2={11d,8u} r4={8d,6u} r5={5d,3u} r6={1d,48u} r7={1d,19u} r8={3d,1u} r9={3d,1u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={26d,6u} r18={2d} r19={2d} r20={1d,1u,3e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 352{201d,147u,4e} in 98{96 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])
        (reg:DI 5 di [ d ])) mABM.c:444 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ d ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])
        (reg:DI 4 si [ f ])) mABM.c:444 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 145 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:447 89 {*movsi_internal}
     (nil))
(jump_insn 145 7 146 2 (set (pc)
        (label_ref 29)) mABM.c:447 650 {jump}
     (nil)
 -> 29)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 146 145 32)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64 65 100 101
(code_label 32 146 10 3 151 "" [1 uses])
(note 10 32 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])) mABM.c:447 89 {*movsi_internal}
     (nil))
(insn 12 11 158 3 (set (reg:DI 0 ax [orig:61 D.7140 ] [61])
        (sign_extend:DI (reg:SI 0 ax [100]))) mABM.c:447 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [100])
        (nil)))
(insn 158 12 13 3 (set (reg:DI 0 ax [orig:62 D.7140 ] [62])
        (reg:DI 0 ax [orig:61 D.7140 ] [61])) mABM.c:447 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7140 ] [61])
        (nil)))
(insn 13 158 159 3 (parallel [
            (set (reg:DI 0 ax [orig:62 D.7140 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:62 D.7140 ] [62])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:447 513 {*ashldi3_1}
     (nil))
(insn 159 13 14 3 (set (reg:DI 1 dx [orig:62 D.7140 ] [62])
        (reg:DI 0 ax [orig:62 D.7140 ] [62])) mABM.c:447 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.7140 ] [62])
        (nil)))
(insn 14 159 15 3 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])) mABM.c:447 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.7141 ] [63])
                (plus:DI (reg/f:DI 0 ax [101])
                    (reg:DI 1 dx [orig:62 D.7140 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:447 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7140 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.7140 ] [62]))
                (nil)))))
(insn 16 15 17 3 (set (reg:XF 8 st [orig:64 D.7142 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.7141 ] [63]) [0 *_9+0 S16 A128])) mABM.c:447 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7141 ] [63])
        (nil)))
(insn 17 16 18 3 (set (reg:XF 9 st(1) [orig:65 D.7142 ] [65])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 272 [0x110])) [0 conf.d_thr+0 S16 A128])) mABM.c:447 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:65 D.7142 ] [65])
            (reg:XF 8 st [orig:64 D.7142 ] [64]))) mABM.c:447 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.7142 ] [65])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7142 ] [64])
            (nil))))
(jump_insn 19 18 23 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 147)
            (pc))) mABM.c:447 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 23 19 148 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 23 149 4 (set (pc)
        (label_ref 35)) mABM.c:447 650 {jump}
     (nil)
 -> 35)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 149 148 147)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 147 149 27 5 159 "" [1 uses])
(note 27 147 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:447 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60
(code_label 29 28 30 6 147 "" [1 uses])
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 33 6 (set (reg:SI 0 ax [orig:60 D.7139 ] [60])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:447 89 {*movsi_internal}
     (nil))
(insn 33 31 34 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:60 D.7139 ] [60])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32]))) mABM.c:447 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.7139 ] [60])
        (nil)))
(jump_insn 34 33 35 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) mABM.c:447 612 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66
(code_label 35 34 36 7 150 "" [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:SI 0 ax [orig:66 D.7139 ] [66])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:448 89 {*movsi_internal}
     (nil))
(insn 38 37 39 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:66 D.7139 ] [66])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32]))) mABM.c:448 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.7139 ] [66])
        (nil)))
(jump_insn 39 38 40 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) mABM.c:448 612 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 150 8 (set (reg:SI 0 ax [orig:59 D.7139 ] [59])
        (const_int 0 [0])) mABM.c:448 89 {*movsi_internal}
     (nil))
(jump_insn 150 41 151 8 (set (pc)
        (label_ref 130)) mABM.c:448 650 {jump}
     (nil)
 -> 130)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 151 150 44)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 71 72 73 74 75 76 77 78 79 102 103 104 105 106
(code_label 44 151 45 9 152 "" [1 uses])
(note 45 44 46 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 9 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 9 (set (reg/f:DI 0 ax [orig:67 D.7143 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 32 [0x20])) [0 f_15(D)->pos+0 S8 A128])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (nil)))
(insn 48 47 49 9 (set (reg:SI 1 dx [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])) mABM.c:451 89 {*movsi_internal}
     (nil))
(insn 49 48 50 9 (set (reg:DI 1 dx [orig:68 D.7140 ] [68])
        (sign_extend:DI (reg:SI 1 dx [103]))) mABM.c:451 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [103])
        (nil)))
(insn 50 49 51 9 (parallel [
            (set (reg:DI 1 dx [orig:69 D.7140 ] [69])
                (ashift:DI (reg:DI 1 dx [orig:68 D.7140 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:451 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.7140 ] [68])
        (nil)))
(insn 51 50 52 9 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.7143 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.7143 ] [67])
                    (reg:DI 1 dx [orig:69 D.7140 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:451 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.7140 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7143 ] [67])
            (nil))))
(insn 52 51 53 9 (set (reg/f:DI 1 dx [orig:71 D.7141 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.7143 ] [70]) [0 *_19+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7143 ] [70])
        (nil)))
(insn 53 52 54 9 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 9 (set (reg/f:DI 2 cx [orig:72 D.7143 ] [72])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 8 [0x8])) [0 f_15(D)->nvp+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 55 54 56 9 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 9 (set (reg:SI 0 ax [orig:73 D.7139 ] [73])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 44 [0x2c])) [0 f_15(D)->st_indx+0 S4 A32])) mABM.c:451 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (nil)))
(insn 57 56 58 9 (set (reg:DI 0 ax [orig:74 D.7140 ] [74])
        (sign_extend:DI (reg:SI 0 ax [orig:73 D.7139 ] [73]))) mABM.c:451 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 D.7139 ] [73])
        (nil)))
(insn 58 57 59 9 (parallel [
            (set (reg:DI 0 ax [orig:75 D.7140 ] [75])
                (ashift:DI (reg:DI 0 ax [orig:74 D.7140 ] [74])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:451 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.7140 ] [74])
        (nil)))
(insn 59 58 60 9 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7143 ] [76])
                (plus:DI (reg:DI 0 ax [orig:75 D.7140 ] [75])
                    (reg/f:DI 2 cx [orig:72 D.7143 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:451 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.7140 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:72 D.7143 ] [72])
            (nil))))
(insn 60 59 61 9 (set (reg/f:DI 0 ax [orig:77 D.7141 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [orig:76 D.7143 ] [76]) [0 *_25+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7143 ] [76])
        (nil)))
(insn 61 60 62 9 (set (reg/f:DI 2 cx [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 9 (parallel [
            (set (reg/f:DI 2 cx [orig:78 D.7144 ] [78])
                (plus:DI (reg/f:DI 2 cx [106])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:451 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [106])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 63 62 64 9 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:71 D.7141 ] [71])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:71 D.7141 ] [71])
        (nil)))
(insn 64 63 65 9 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:77 D.7141 ] [77])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7141 ] [77])
        (nil)))
(insn 65 64 66 9 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:78 D.7144 ] [78])) mABM.c:451 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:78 D.7144 ] [78])
        (nil)))
(call_insn 66 65 67 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f05a595e100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mABM.c:451 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 67 66 68 9 (set (reg:SI 0 ax [orig:79 D.7139 ] [79])
        (reg:SI 0 ax)) mABM.c:451 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 68 67 69 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:79 D.7139 ] [79])
            (const_int 0 [0]))) mABM.c:451 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:79 D.7139 ] [79])
        (nil)))
(jump_insn 69 68 70 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) mABM.c:451 612 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 107
(note 70 69 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 10 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:451 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 152 10 (set (reg:SI 0 ax [orig:59 D.7139 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 44 [0x2c])) [0 f_15(D)->st_indx+0 S4 A32])) mABM.c:451 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (nil)))
(jump_insn 152 72 153 10 (set (pc)
        (label_ref 130)) mABM.c:451 650 {jump}
     (nil)
 -> 130)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 153 152 75)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 108 109
(code_label 75 153 76 11 154 "" [1 uses])
(note 76 75 77 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 11 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:452 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 11 (set (reg:SI 0 ax [109])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [108])
                (const_int 44 [0x2c])) [0 f_15(D)->st_indx+0 S4 A32])) mABM.c:452 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 79 78 154 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (reg:SI 0 ax [109])) mABM.c:452 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [109])
        (nil)))
(jump_insn 154 79 155 11 (set (pc)
        (label_ref 120)) mABM.c:452 650 {jump}
     (nil)
 -> 120)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 155 154 125)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 110 111 112 113 114 115
(code_label 125 155 82 12 157 "" [1 uses])
(note 82 125 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 12 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 12 (set (reg/f:DI 0 ax [orig:82 D.7143 ] [82])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 32 [0x20])) [0 f_15(D)->pos+0 S8 A128])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 85 84 86 12 (set (reg:SI 1 dx [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 indx+0 S4 A32])) mABM.c:453 89 {*movsi_internal}
     (nil))
(insn 86 85 87 12 (set (reg:DI 1 dx [orig:83 D.7140 ] [83])
        (sign_extend:DI (reg:SI 1 dx [111]))) mABM.c:453 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [111])
        (nil)))
(insn 87 86 88 12 (parallel [
            (set (reg:DI 1 dx [orig:84 D.7140 ] [84])
                (ashift:DI (reg:DI 1 dx [orig:83 D.7140 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7140 ] [83])
        (nil)))
(insn 88 87 89 12 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7143 ] [85])
                (plus:DI (reg/f:DI 0 ax [orig:82 D.7143 ] [82])
                    (reg:DI 1 dx [orig:84 D.7140 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7140 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7143 ] [82])
            (nil))))
(insn 89 88 90 12 (set (reg/f:DI 1 dx [orig:86 D.7141 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.7143 ] [85]) [0 *_36+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7143 ] [85])
        (nil)))
(insn 90 89 91 12 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (nil))
(insn 91 90 92 12 (set (reg/f:DI 0 ax [orig:87 D.7143 ] [87])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [112])
                (const_int 8 [0x8])) [0 f_15(D)->nvp+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [112])
        (nil)))
(insn 92 91 93 12 (set (reg:SI 2 cx [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:453 89 {*movsi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:DI 2 cx [orig:88 D.7145 ] [88])
        (sign_extend:DI (reg:SI 2 cx [113]))) mABM.c:453 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [113])
        (nil)))
(insn 94 93 95 12 (parallel [
            (set (reg:DI 2 cx [orig:89 D.7145 ] [89])
                (plus:DI (reg:DI 2 cx [orig:88 D.7145 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:88 D.7145 ] [88])
        (nil)))
(insn 95 94 96 12 (parallel [
            (set (reg:DI 2 cx [orig:90 D.7145 ] [90])
                (ashift:DI (reg:DI 2 cx [orig:89 D.7145 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:89 D.7145 ] [89])
        (nil)))
(insn 96 95 97 12 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.7143 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:87 D.7143 ] [87])
                    (reg:DI 2 cx [orig:90 D.7145 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:90 D.7145 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7143 ] [87])
            (nil))))
(insn 97 96 98 12 (set (reg/f:DI 2 cx [orig:92 D.7141 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.7143 ] [91]) [0 *_42+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7143 ] [91])
        (nil)))
(insn 98 97 99 12 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 0 ax [orig:93 D.7143 ] [93])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 8 [0x8])) [0 f_15(D)->nvp+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (nil)))
(insn 100 99 101 12 (set (reg:SI 4 si [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:453 89 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:DI 4 si [orig:94 D.7140 ] [94])
        (sign_extend:DI (reg:SI 4 si [115]))) mABM.c:453 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [115])
        (nil)))
(insn 102 101 103 12 (parallel [
            (set (reg:DI 4 si [orig:95 D.7140 ] [95])
                (ashift:DI (reg:DI 4 si [orig:94 D.7140 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:94 D.7140 ] [94])
        (nil)))
(insn 103 102 104 12 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.7143 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:93 D.7143 ] [93])
                    (reg:DI 4 si [orig:95 D.7140 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:453 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:95 D.7140 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.7143 ] [93])
            (nil))))
(insn 104 103 105 12 (set (reg/f:DI 0 ax [orig:97 D.7141 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.7143 ] [96]) [0 *_47+0 S8 A64])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.7143 ] [96])
        (nil)))
(insn 105 104 106 12 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:86 D.7141 ] [86])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:86 D.7141 ] [86])
        (nil)))
(insn 106 105 107 12 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:92 D.7141 ] [92])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:92 D.7141 ] [92])
        (nil)))
(insn 107 106 108 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:97 D.7141 ] [97])) mABM.c:453 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7141 ] [97])
        (nil)))
(call_insn 108 107 109 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f05a595e100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mABM.c:453 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 109 108 110 12 (set (reg:SI 0 ax [orig:98 D.7139 ] [98])
        (reg:SI 0 ax)) mABM.c:453 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 110 109 111 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.7139 ] [98])
            (const_int 0 [0]))) mABM.c:453 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:98 D.7139 ] [98])
        (nil)))
(jump_insn 111 110 112 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) mABM.c:453 612 {*jcc_1}
     (nil)
 -> 117)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 116
(note 112 111 113 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 13 (set (reg:SI 0 ax [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:454 89 {*movsi_internal}
     (nil))
(insn 114 113 156 13 (parallel [
            (set (reg:SI 0 ax [orig:59 D.7139 ] [59])
                (plus:SI (reg:SI 0 ax [116])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:454 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [116])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(jump_insn 156 114 157 13 (set (pc)
        (label_ref 130)) mABM.c:454 650 {jump}
     (nil)
 -> 130)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 157 156 117)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 117 157 118 14 156 "" [1 uses])
(note 118 117 119 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:452 273 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 80 81 117
(code_label 120 119 121 15 155 "" [1 uses])
(note 121 120 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 15 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f+0 S8 A64])) mABM.c:452 87 {*movdi_internal_rex64}
     (nil))
(insn 123 122 124 15 (set (reg:SI 0 ax [orig:80 D.7139 ] [80])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 4 [0x4])) [0 f_15(D)->n_nvp+0 S4 A32])) mABM.c:452 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 124 123 126 15 (parallel [
            (set (reg:SI 0 ax [orig:81 D.7139 ] [81])
                (plus:SI (reg:SI 0 ax [orig:80 D.7139 ] [80])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:452 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.7139 ] [80])
        (nil)))
(insn 126 124 127 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:81 D.7139 ] [81])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mABM.c:452 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.7139 ] [81])
        (nil)))
(jump_insn 127 126 128 15 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) mABM.c:452 612 {*jcc_1}
     (nil)
 -> 125)
;;  succ:       12
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 128 127 129 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 16 (set (reg:SI 0 ax [orig:59 D.7139 ] [59])
        (const_int -1 [0xffffffffffffffff])) mABM.c:457 89 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              8 [100.0%] 
;;              10 [100.0%] 
;;              13 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 99
(code_label 130 129 131 17 153 "" [3 uses])
(note 131 130 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 136 17 (set (reg:SI 0 ax [orig:99 <retval> ] [99])
        (reg:SI 0 ax [orig:59 D.7139 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7139 ] [59])
        (nil)))
(insn 136 132 139 17 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:99 <retval> ] [99])) mABM.c:458 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:99 <retval> ] [99])
        (nil)))
(insn 139 136 0 17 (use (reg/i:SI 0 ax)) mABM.c:458 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _minimum_flight_distance (_minimum_flight_distance, funcdef_no=21, decl_uid=4289, cgraph_uid=21)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 294:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 281:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 290:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 126:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=220 from oldreg=120, assigning class GENERAL_REGS to r220
  126: {r220:SI=r220:SI-r119:SI;clobber flags:CC;}
      REG_DEAD r119:SI
      REG_DEAD r107:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  297: r220:SI=r107:SI
    Inserting insn reload after:
  298: r120:SI=r220:SI

          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 211:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 214:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 228:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 239:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 242:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 21
   Insn 260: point = 0
   Insn 257: point = 0
   Insn 253: point = 1
   Insn 250: point = 3
  BB 20
   Insn 248: point = 4
   Insn 247: point = 4
   Insn 246: point = 5
  BB 2
   Insn 269: point = 6
   Insn 9: point = 6
   Insn 5: point = 6
   Insn 4: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 19
   Insn 242: point = 6
  BB 17
   Insn 275: point = 6
   Insn 228: point = 6
   Insn 227: point = 7
   Insn 226: point = 8
   Insn 225: point = 10
   Insn 224: point = 12
   Insn 223: point = 14
   Insn 222: point = 15
  BB 16
   Insn 220: point = 16
   Insn 219: point = 16
   Insn 218: point = 17
  BB 10
   Insn 273: point = 18
   Insn 93: point = 18
  BB 8
   Insn 271: point = 18
   Insn 67: point = 18
   Insn 66: point = 19
  BB 9
   Insn 90: point = 20
   Insn 89: point = 21
   Insn 88: point = 22
   Insn 87: point = 22
   Insn 86: point = 23
   Insn 85: point = 24
   Insn 84: point = 26
   Insn 83: point = 28
   Insn 82: point = 29
   Insn 81: point = 31
   Insn 80: point = 33
   Insn 79: point = 34
   Insn 78: point = 36
   Insn 77: point = 38
   Insn 76: point = 40
   Insn 75: point = 42
   Insn 74: point = 43
   Insn 73: point = 45
   Insn 72: point = 47
  BB 7
   Insn 63: point = 48
   Insn 62: point = 48
   Insn 281: point = 49
   Insn 60: point = 51
   Insn 59: point = 53
   Insn 58: point = 55
   Insn 57: point = 57
   Insn 56: point = 59
   Insn 55: point = 61
   Insn 54: point = 63
   Insn 53: point = 64
   Insn 52: point = 66
   Insn 51: point = 68
  BB 6
   Insn 49: point = 69
   Insn 48: point = 69
   Insn 283: point = 70
   Insn 46: point = 72
   Insn 45: point = 74
   Insn 44: point = 76
   Insn 43: point = 78
   Insn 42: point = 80
   Insn 41: point = 82
   Insn 40: point = 84
   Insn 39: point = 85
   Insn 38: point = 87
   Insn 37: point = 89
   Insn 282: point = 90
   Insn 35: point = 92
   Insn 34: point = 94
   Insn 33: point = 96
   Insn 32: point = 98
   Insn 31: point = 100
   Insn 30: point = 101
   Insn 29: point = 103
   Insn 28: point = 105
  BB 15
   Insn 214: point = 106
  BB 14
   Insn 211: point = 106
   Insn 210: point = 107
   Insn 209: point = 109
   Insn 208: point = 111
   Insn 207: point = 113
   Insn 206: point = 115
   Insn 205: point = 116
  BB 13
   Insn 200: point = 117
   Insn 199: point = 117
   Insn 198: point = 118
   Insn 197: point = 119
   Insn 196: point = 121
   Insn 195: point = 123
   Insn 194: point = 125
   Insn 193: point = 127
   Insn 192: point = 128
   Insn 191: point = 129
   Insn 190: point = 130
   Insn 189: point = 131
   Insn 188: point = 131
   Insn 187: point = 132
   Insn 186: point = 133
   Insn 185: point = 135
   Insn 184: point = 137
   Insn 183: point = 138
   Insn 182: point = 140
   Insn 181: point = 142
   Insn 180: point = 143
   Insn 179: point = 145
   Insn 178: point = 147
   Insn 177: point = 149
   Insn 176: point = 151
   Insn 175: point = 152
   Insn 174: point = 154
   Insn 173: point = 156
   Insn 172: point = 158
   Insn 171: point = 160
   Insn 170: point = 162
   Insn 169: point = 163
   Insn 168: point = 163
   Insn 167: point = 164
   Insn 166: point = 166
   Insn 165: point = 167
   Insn 164: point = 169
   Insn 163: point = 170
   Insn 162: point = 172
   Insn 161: point = 174
   Insn 160: point = 176
   Insn 159: point = 177
  BB 12
   Insn 157: point = 178
   Insn 156: point = 178
   Insn 277: point = 179
   Insn 154: point = 181
   Insn 153: point = 183
   Insn 152: point = 185
   Insn 151: point = 187
   Insn 150: point = 189
   Insn 149: point = 191
   Insn 148: point = 193
   Insn 147: point = 194
   Insn 146: point = 196
   Insn 145: point = 198
   Insn 144: point = 200
   Insn 143: point = 202
   Insn 142: point = 204
   Insn 141: point = 205
   Insn 140: point = 205
   Insn 139: point = 206
   Insn 138: point = 208
   Insn 137: point = 209
   Insn 136: point = 211
  BB 11
   Insn 131: point = 212
   Insn 130: point = 212
   Insn 129: point = 213
   Insn 128: point = 214
   Insn 280: point = 216
   Insn 298: point = 218
	Hard reg 0 is preferable by r220 with profit 1
   Insn 126: point = 220
   Insn 297: point = 221
	Hard reg 0 is preferable by r220 with profit 1
	Hard reg 2 is preferable by r220 with profit 1
   Insn 279: point = 223
   Insn 124: point = 225
   Insn 123: point = 227
   Insn 122: point = 229
   Insn 121: point = 231
   Insn 120: point = 233
   Insn 119: point = 235
   Insn 118: point = 237
   Insn 117: point = 238
   Insn 116: point = 240
   Insn 115: point = 242
   Insn 114: point = 244
   Insn 113: point = 246
   Insn 112: point = 248
   Insn 111: point = 249
   Insn 110: point = 249
   Insn 109: point = 250
   Insn 108: point = 252
   Insn 107: point = 253
   Insn 106: point = 255
   Insn 278: point = 256
   Insn 292: point = 258
   Insn 291: point = 259
   Insn 290: point = 259
   Insn 289: point = 260
   Insn 104: point = 260
   Insn 103: point = 262
   Insn 102: point = 264
   Insn 101: point = 266
   Insn 100: point = 268
   Insn 99: point = 269
   Insn 98: point = 271
   Insn 97: point = 273
  BB 18
   Insn 239: point = 274
   Insn 238: point = 275
   Insn 237: point = 276
   Insn 236: point = 278
   Insn 235: point = 280
   Insn 234: point = 282
   Insn 233: point = 283
  BB 5
   Insn 26: point = 284
   Insn 25: point = 284
  BB 4
   Insn 23: point = 284
   Insn 22: point = 284
   Insn 284: point = 285
   Insn 296: point = 287
   Insn 295: point = 288
   Insn 294: point = 288
   Insn 293: point = 289
   Insn 20: point = 289
   Insn 19: point = 291
   Insn 18: point = 293
   Insn 17: point = 295
   Insn 16: point = 297
   Insn 15: point = 298
   Insn 14: point = 300
   Insn 13: point = 302
 r59: [299..300]
 r60: [296..298]
 r61: [294..295]
 r62: [292..293]
 r63: [290..291]
 r64: [286..289]
 r65: [284..285]
 r66: [102..103]
 r67: [99..101]
 r68: [97..98]
 r69: [95..96]
 r70: [93..94]
 r71: [91..92]
 r72: [69..90]
 r73: [86..87]
 r74: [79..85]
 r75: [81..82]
 r76: [79..80]
 r77: [77..78]
 r78: [75..76]
 r79: [73..74]
 r80: [71..72]
 r81: [69..70]
 r82: [65..66]
 r83: [58..64]
 r84: [60..61]
 r85: [58..59]
 r86: [56..57]
 r87: [54..55]
 r88: [52..53]
 r89: [50..51]
 r90: [48..49]
 r91: [44..45]
 r92: [37..43]
 r93: [39..40]
 r94: [37..38]
 r95: [35..36]
 r96: [23..34]
 r97: [30..31]
 r98: [27..29]
 r99: [25..26]
 r100: [22..24]
 r101: [270..271]
 r102: [267..269]
 r103: [265..266]
 r104: [263..264]
 r105: [261..262]
 r106: [257..260]
 r107: [222..256]
 r108: [241..253]
 r109: [248..250]
 r110: [241..242]
 r111: [239..240]
 r112: [232..238]
 r113: [234..235]
 r114: [232..233]
 r115: [230..231]
 r116: [228..229]
 r117: [226..227]
 r118: [224..225]
 r119: [220..223]
 r120: [217..218]
 r121: [215..216]
 r122: [212..214]
 r123: [197..209]
 r124: [204..206]
 r125: [197..198]
 r126: [195..196]
 r127: [188..194]
 r128: [190..191]
 r129: [188..189]
 r130: [186..187]
 r131: [184..185]
 r132: [182..183]
 r133: [180..181]
 r134: [178..179]
 r135: [171..177]
 r136: [173..174]
 r137: [171..172]
 r138: [129..170]
 r139: [155..167]
 r140: [162..164]
 r141: [155..156]
 r142: [153..154]
 r143: [146..152]
 r144: [148..149]
 r145: [146..147]
 r146: [144..145]
 r147: [132..143]
 r148: [139..140]
 r149: [136..138]
 r150: [134..135]
 r151: [131..133]
 r152: [129..130]
 r153: [122..128]
 r154: [124..125]
 r155: [122..123]
 r156: [120..121]
 r157: [117..119]
 r158: [110..116]
 r159: [112..113]
 r160: [110..111]
 r161: [108..109]
 r162: [9..15]
 r163: [11..12]
 r164: [9..10]
 r165: [6..8]
 r166: [277..283]
 r167: [279..280]
 r168: [277..278]
 r169: [274..276]
 r170: [2..3]
 r171: [0..1]
 r172: [301..302]
 r173: [296..297]
 r174: [104..105]
 r175: [99..100]
 r176: [88..89]
 r177: [83..84]
 r178: [67..68]
 r179: [62..63]
 r180: [18..19]
 r181: [46..47]
 r182: [41..42]
 r183: [32..33]
 r184: [27..28]
 r185: [20..21]
 r186: [272..273]
 r187: [267..268]
 r188: [254..255]
 r189: [251..252]
 r190: [247..249] [243..244]
 r191: [245..246]
 r192: [236..237]
 r193: [212..213]
 r194: [210..211]
 r195: [207..208]
 r196: [203..205] [199..200]
 r197: [201..202]
 r198: [192..193]
 r199: [175..176]
 r200: [168..169]
 r201: [165..166]
 r202: [161..163] [157..158]
 r203: [159..160]
 r204: [150..151]
 r205: [141..142]
 r206: [136..137]
 r207: [126..127]
 r208: [117..118]
 r209: [114..115]
 r210: [106..107]
 r211: [16..17]
 r212: [13..14]
 r213: [6..7]
 r214: [281..282]
 r215: [274..275]
 r216: [4..5]
 r218: [258..259]
 r219: [287..288]
 r220: [219..221]
Compressing live ranges: from 303 to 262 - 86%
Ranges after the compression:
 r59: [258..259]
 r60: [256..257]
 r61: [254..255]
 r62: [252..253]
 r63: [250..251]
 r64: [248..249]
 r65: [246..247]
 r66: [92..93]
 r67: [90..91]
 r68: [88..89]
 r69: [86..87]
 r70: [84..85]
 r71: [82..83]
 r72: [62..81]
 r73: [78..79]
 r74: [72..77]
 r75: [74..75]
 r76: [72..73]
 r77: [70..71]
 r78: [68..69]
 r79: [66..67]
 r80: [64..65]
 r81: [62..63]
 r82: [58..59]
 r83: [52..57]
 r84: [54..55]
 r85: [52..53]
 r86: [50..51]
 r87: [48..49]
 r88: [46..47]
 r89: [44..45]
 r90: [42..43]
 r91: [38..39]
 r92: [32..37]
 r93: [34..35]
 r94: [32..33]
 r95: [30..31]
 r96: [20..29]
 r97: [26..27]
 r98: [24..25]
 r99: [22..23]
 r100: [20..21]
 r101: [234..235]
 r102: [232..233]
 r103: [230..231]
 r104: [228..229]
 r105: [226..227]
 r106: [224..225]
 r107: [194..223]
 r108: [212..221]
 r109: [218..219]
 r110: [212..213]
 r111: [210..211]
 r112: [204..209]
 r113: [206..207]
 r114: [204..205]
 r115: [202..203]
 r116: [200..201]
 r117: [198..199]
 r118: [196..197]
 r119: [192..195]
 r120: [190..191]
 r121: [188..189]
 r122: [186..187]
 r123: [174..183]
 r124: [180..181]
 r125: [174..175]
 r126: [172..173]
 r127: [166..171]
 r128: [168..169]
 r129: [166..167]
 r130: [164..165]
 r131: [162..163]
 r132: [160..161]
 r133: [158..159]
 r134: [156..157]
 r135: [150..155]
 r136: [152..153]
 r137: [150..151]
 r138: [116..149]
 r139: [138..147]
 r140: [144..145]
 r141: [138..139]
 r142: [136..137]
 r143: [130..135]
 r144: [132..133]
 r145: [130..131]
 r146: [128..129]
 r147: [118..127]
 r148: [124..125]
 r149: [122..123]
 r150: [120..121]
 r151: [118..119]
 r152: [116..117]
 r153: [110..115]
 r154: [112..113]
 r155: [110..111]
 r156: [108..109]
 r157: [106..107]
 r158: [100..105]
 r159: [102..103]
 r160: [100..101]
 r161: [98..99]
 r162: [8..13]
 r163: [10..11]
 r164: [8..9]
 r165: [6..7]
 r166: [240..245]
 r167: [242..243]
 r168: [240..241]
 r169: [238..239]
 r170: [2..3]
 r171: [0..1]
 r172: [260..261]
 r173: [256..257]
 r174: [94..95]
 r175: [90..91]
 r176: [80..81]
 r177: [76..77]
 r178: [60..61]
 r179: [56..57]
 r180: [16..17]
 r181: [40..41]
 r182: [36..37]
 r183: [28..29]
 r184: [24..25]
 r185: [18..19]
 r186: [236..237]
 r187: [232..233]
 r188: [222..223]
 r189: [220..221]
 r190: [218..219] [214..215]
 r191: [216..217]
 r192: [208..209]
 r193: [186..187]
 r194: [184..185]
 r195: [182..183]
 r196: [180..181] [176..177]
 r197: [178..179]
 r198: [170..171]
 r199: [154..155]
 r200: [148..149]
 r201: [146..147]
 r202: [144..145] [140..141]
 r203: [142..143]
 r204: [134..135]
 r205: [126..127]
 r206: [122..123]
 r207: [114..115]
 r208: [106..107]
 r209: [104..105]
 r210: [96..97]
 r211: [14..15]
 r212: [12..13]
 r213: [6..7]
 r214: [244..245]
 r215: [238..239]
 r216: [4..5]
 r218: [224..225]
 r219: [248..249]
 r220: [192..193]
	 Assigning to 220 (cl=GENERAL_REGS, orig=120, freq=3, tfirst=220, tfreq=3)...
	   Assign 2 to reload r220 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 284
changing reg in insn 284
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 282
changing reg in insn 282
changing reg in insn 48
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 283
changing reg in insn 283
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 281
changing reg in insn 281
changing reg in insn 62
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 78
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 86
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 278
changing reg in insn 278
changing reg in insn 107
changing reg in insn 109
changing reg in insn 112
changing reg in insn 110
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 121
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 279
changing reg in insn 279
changing reg in insn 126
changing reg in insn 280
changing reg in insn 280
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 137
changing reg in insn 139
changing reg in insn 142
changing reg in insn 140
changing reg in insn 142
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 277
changing reg in insn 277
changing reg in insn 156
changing reg in insn 159
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 191
changing reg in insn 165
changing reg in insn 167
changing reg in insn 170
changing reg in insn 168
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 187
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 196
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 205
changing reg in insn 209
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 222
changing reg in insn 226
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 228
changing reg in insn 233
changing reg in insn 237
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 239
changing reg in insn 250
changing reg in insn 253
changing reg in insn 253
changing reg in insn 257
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 89
changing reg in insn 90
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 114
changing reg in insn 112
changing reg in insn 111
changing reg in insn 110
changing reg in insn 115
changing reg in insn 113
changing reg in insn 112
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 118
changing reg in insn 119
changing reg in insn 129
changing reg in insn 130
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 144
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 145
changing reg in insn 143
changing reg in insn 142
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 148
changing reg in insn 149
changing reg in insn 160
changing reg in insn 161
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 172
changing reg in insn 170
changing reg in insn 169
changing reg in insn 168
changing reg in insn 173
changing reg in insn 171
changing reg in insn 170
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 193
changing reg in insn 194
changing reg in insn 198
changing reg in insn 199
changing reg in insn 206
changing reg in insn 207
changing reg in insn 210
changing reg in insn 211
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 234
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 246
changing reg in insn 247
changing reg in insn 291
changing reg in insn 290
changing reg in insn 292
changing reg in insn 291
changing reg in insn 295
changing reg in insn 294
changing reg in insn 296
changing reg in insn 295
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 189.


_minimum_flight_distance

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 19[fpcr]
;;  ref usage 	r0={110d,108u} r1={46d,47u,6e} r2={15d,13u,2e} r3={1d,1u} r4={6d,4u} r5={5d,3u} r6={1d,103u} r7={1d,22u} r8={14d,14u} r9={4d,2u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={67d,9u} r18={2d} r19={2d,2u} r20={1d,1u,5e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 695{353d,329u,13e} in 221{219 regular + 2 call} insns.
(note 1 0 285 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 285 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 285 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])
        (reg:DI 5 di [ pos ])) mABM.c:460 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ pos ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])
        (reg:DI 4 si [ f ])) mABM.c:460 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ f ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])
        (reg:SI 1 dx [ N_f ])) mABM.c:460 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N_f ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 N+0 S4 A32])
        (reg:SI 2 cx [ N ])) mABM.c:460 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ N ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 269 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:464 89 {*movsi_internal}
     (nil))
(jump_insn 269 9 270 2 (set (pc)
        (label_ref 243)) mABM.c:464 650 {jump}
     (nil)
 -> 243)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 270 269 245)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 172 173 219
(code_label 245 270 12 4 172 "" [1 uses])
(note 12 245 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:465 89 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (set (reg:DI 0 ax [orig:59 D.7146 ] [59])
        (sign_extend:DI (reg:SI 0 ax [172]))) mABM.c:465 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [172])
        (nil)))
(insn 15 14 16 4 (parallel [
            (set (reg:DI 1 dx [orig:60 D.7146 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.7146 ] [59])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:465 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.7146 ] [59])
        (nil)))
(insn 16 15 17 4 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])) mABM.c:465 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 4 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.7147 ] [61])
                (plus:DI (reg/f:DI 0 ax [173])
                    (reg:DI 1 dx [orig:60 D.7146 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:465 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [173])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7146 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.7146 ] [60]))
                (nil)))))
(insn 18 17 19 4 (set (reg/f:DI 0 ax [orig:62 D.7148 ] [62])
        (mem/f:DI (reg/f:DI 0 ax [orig:61 D.7147 ] [61]) [0 *_11+0 S8 A64])) mABM.c:465 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7147 ] [61])
        (nil)))
(insn 19 18 20 4 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.7148 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:62 D.7148 ] [62])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:465 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7148 ] [62])
        (nil)))
(insn 20 19 293 4 (set (reg:XF 8 st [orig:64 D.7149 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.7148 ] [63]) [0 *_13+0 S16 A128])) mABM.c:465 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7148 ] [63])
        (nil)))
(insn 293 20 294 4 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -74 [0xffffffffffffffb6])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:465 199 {x86_fnstcw_1}
     (nil))
(insn 294 293 295 4 (set (reg:HI 0 ax [219])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -74 [0xffffffffffffffb6])) [0  S2 A16])) mABM.c:465 90 {*movhi_internal}
     (nil))
(insn 295 294 296 4 (parallel [
            (set (reg:HI 0 ax [219])
                (ior:HI (reg:HI 0 ax [219])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:465 410 {*iorhi_1}
     (nil))
(insn 296 295 284 4 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0  S2 A16])
        (reg:HI 0 ax [219])) mABM.c:465 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [219])
        (nil)))
(insn 284 296 22 4 (parallel [
            (set (reg:SI 0 ax [orig:65 D.7150 ] [65])
                (fix:SI (reg:XF 8 st [orig:64 D.7149 ] [64])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:465 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7149 ] [64])
        (nil)))
(insn 22 284 23 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:65 D.7150 ] [65])
            (const_int 0 [0]))) mABM.c:465 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.7150 ] [65])
        (nil)))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 231)
            (pc))) mABM.c:465 612 {*jcc_1}
     (nil)
 -> 231)
;;  succ:       5 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])
            (const_int 0 [0]))) mABM.c:465 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 231)
            (pc))) mABM.c:465 612 {*jcc_1}
     (nil)
 -> 231)
;;  succ:       6 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 174 175 176 177
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:466 89 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:DI 0 ax [orig:66 D.7146 ] [66])
        (sign_extend:DI (reg:SI 0 ax [174]))) mABM.c:466 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [174])
        (nil)))
(insn 30 29 31 6 (parallel [
            (set (reg:DI 1 dx [orig:67 D.7146 ] [67])
                (ashift:DI (reg:DI 0 ax [orig:66 D.7146 ] [66])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.7146 ] [66])
        (nil)))
(insn 31 30 32 6 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 6 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.7147 ] [68])
                (plus:DI (reg/f:DI 0 ax [175])
                    (reg:DI 1 dx [orig:67 D.7146 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [175])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7146 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:67 D.7146 ] [67]))
                (nil)))))
(insn 33 32 34 6 (set (reg/f:DI 0 ax [orig:69 D.7148 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [orig:68 D.7147 ] [68]) [0 *_19+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7147 ] [68])
        (nil)))
(insn 34 33 35 6 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.7148 ] [70])
                (plus:DI (reg/f:DI 0 ax [orig:69 D.7148 ] [69])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7148 ] [69])
        (nil)))
(insn 35 34 282 6 (set (reg:XF 8 st [orig:71 D.7149 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.7148 ] [70]) [0 *_21+0 S16 A128])) mABM.c:466 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7148 ] [70])
        (nil)))
(insn 282 35 37 6 (parallel [
            (set (reg:SI 1 dx [orig:72 D.7150 ] [72])
                (fix:SI (reg:XF 8 st [orig:71 D.7149 ] [71])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:466 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.7149 ] [71])
        (nil)))
(insn 37 282 38 6 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [orig:73 D.7151 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [176]) [0 *f_24(D)+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [176])
        (nil)))
(insn 39 38 40 6 (set (reg/f:DI 0 ax [orig:74 D.7147 ] [74])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:73 D.7151 ] [73])
                (const_int 32 [0x20])) [0 _25->pos+0 S8 A128])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7151 ] [73])
        (nil)))
(insn 40 39 41 6 (set (reg:SI 2 cx [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:466 89 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:DI 2 cx [orig:75 D.7146 ] [75])
        (sign_extend:DI (reg:SI 2 cx [177]))) mABM.c:466 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [177])
        (nil)))
(insn 42 41 43 6 (parallel [
            (set (reg:DI 2 cx [orig:76 D.7146 ] [76])
                (ashift:DI (reg:DI 2 cx [orig:75 D.7146 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:75 D.7146 ] [75])
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.7147 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:74 D.7147 ] [74])
                    (reg:DI 2 cx [orig:76 D.7146 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:76 D.7146 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.7147 ] [74])
            (nil))))
(insn 44 43 45 6 (set (reg/f:DI 0 ax [orig:78 D.7148 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.7147 ] [77]) [0 *_29+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7147 ] [77])
        (nil)))
(insn 45 44 46 6 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.7148 ] [79])
                (plus:DI (reg/f:DI 0 ax [orig:78 D.7148 ] [78])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.7148 ] [78])
        (nil)))
(insn 46 45 283 6 (set (reg:XF 8 st [orig:80 D.7149 ] [80])
        (mem:XF (reg/f:DI 0 ax [orig:79 D.7148 ] [79]) [0 *_31+0 S16 A128])) mABM.c:466 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7148 ] [79])
        (nil)))
(insn 283 46 48 6 (parallel [
            (set (reg:SI 0 ax [orig:81 D.7150 ] [81])
                (fix:SI (reg:XF 8 st [orig:80 D.7149 ] [80])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:466 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.7149 ] [80])
        (nil)))
(insn 48 283 49 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:72 D.7150 ] [72])
            (reg:SI 0 ax [orig:81 D.7150 ] [81]))) mABM.c:466 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.7150 ] [81])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:72 D.7150 ] [72])
            (nil))))
(jump_insn 49 48 50 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) mABM.c:466 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88 89 90 178 179
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 0 ax [orig:82 D.7151 ] [82])
        (mem/f:DI (reg/f:DI 0 ax [178]) [0 *f_24(D)+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [178])
        (nil)))
(insn 53 52 54 7 (set (reg/f:DI 0 ax [orig:83 D.7147 ] [83])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:82 D.7151 ] [82])
                (const_int 32 [0x20])) [0 _34->pos+0 S8 A128])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7151 ] [82])
        (nil)))
(insn 54 53 55 7 (set (reg:SI 1 dx [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:466 89 {*movsi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:DI 1 dx [orig:84 D.7146 ] [84])
        (sign_extend:DI (reg:SI 1 dx [179]))) mABM.c:466 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [179])
        (nil)))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 1 dx [orig:85 D.7146 ] [85])
                (ashift:DI (reg:DI 1 dx [orig:84 D.7146 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7146 ] [84])
        (nil)))
(insn 57 56 58 7 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.7147 ] [86])
                (plus:DI (reg/f:DI 0 ax [orig:83 D.7147 ] [83])
                    (reg:DI 1 dx [orig:85 D.7146 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:85 D.7146 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.7147 ] [83])
            (nil))))
(insn 58 57 59 7 (set (reg/f:DI 0 ax [orig:87 D.7148 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 D.7147 ] [86]) [0 *_38+0 S8 A64])) mABM.c:466 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7147 ] [86])
        (nil)))
(insn 59 58 60 7 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.7148 ] [88])
                (plus:DI (reg/f:DI 0 ax [orig:87 D.7148 ] [87])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:466 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7148 ] [87])
        (nil)))
(insn 60 59 281 7 (set (reg:XF 8 st [orig:89 D.7149 ] [89])
        (mem:XF (reg/f:DI 0 ax [orig:88 D.7148 ] [88]) [0 *_40+0 S16 A128])) mABM.c:466 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7148 ] [88])
        (nil)))
(insn 281 60 62 7 (parallel [
            (set (reg:SI 0 ax [orig:90 D.7150 ] [90])
                (fix:SI (reg:XF 8 st [orig:89 D.7149 ] [89])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:466 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.7149 ] [89])
        (nil)))
(insn 62 281 63 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.7150 ] [90])
            (const_int 0 [0]))) mABM.c:466 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 D.7150 ] [90])
        (nil)))
(jump_insn 63 62 64 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) mABM.c:466 612 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 180
(code_label 64 63 65 8 163 "" [1 uses])
(note 65 64 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 8 (set (reg:XF 0 ax [180])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:466 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 271 8 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S16 A128])
        (reg:XF 0 ax [180])) mABM.c:466 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [180])
        (nil)))
(jump_insn 271 67 272 8 (set (pc)
        (label_ref 91)) mABM.c:466 650 {jump}
     (nil)
 -> 91)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 272 271 70)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 91 92 93 94 95 96 97 98 99 100 181 182 183 184 185
(code_label 70 272 71 9 164 "" [1 uses])
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:467 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 9 (set (reg/f:DI 0 ax [orig:91 D.7151 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [181]) [0 *f_24(D)+0 S8 A64])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [181])
        (nil)))
(insn 74 73 75 9 (set (reg/f:DI 0 ax [orig:92 D.7147 ] [92])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:91 D.7151 ] [91])
                (const_int 32 [0x20])) [0 _43->pos+0 S8 A128])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7151 ] [91])
        (nil)))
(insn 75 74 76 9 (set (reg:SI 1 dx [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:467 89 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:DI 1 dx [orig:93 D.7146 ] [93])
        (sign_extend:DI (reg:SI 1 dx [182]))) mABM.c:467 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [182])
        (nil)))
(insn 77 76 78 9 (parallel [
            (set (reg:DI 1 dx [orig:94 D.7146 ] [94])
                (ashift:DI (reg:DI 1 dx [orig:93 D.7146 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:467 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.7146 ] [93])
        (nil)))
(insn 78 77 79 9 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.7147 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:92 D.7147 ] [92])
                    (reg:DI 1 dx [orig:94 D.7146 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:467 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:94 D.7146 ] [94])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.7147 ] [92])
            (nil))))
(insn 79 78 80 9 (set (reg/f:DI 1 dx [orig:96 D.7148 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 D.7147 ] [95]) [0 *_47+0 S8 A64])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.7147 ] [95])
        (nil)))
(insn 80 79 81 9 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:467 89 {*movsi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 0 ax [orig:97 D.7146 ] [97])
        (sign_extend:DI (reg:SI 0 ax [183]))) mABM.c:467 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [183])
        (nil)))
(insn 82 81 83 9 (parallel [
            (set (reg:DI 2 cx [orig:98 D.7146 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.7146 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:467 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.7146 ] [97])
        (nil)))
(insn 83 82 84 9 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])) mABM.c:467 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 9 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.7147 ] [99])
                (plus:DI (reg/f:DI 0 ax [184])
                    (reg:DI 2 cx [orig:98 D.7146 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:467 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [184])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:98 D.7146 ] [98])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 pos+0 S8 A64])
                    (reg:DI 2 cx [orig:98 D.7146 ] [98]))
                (nil)))))
(insn 85 84 86 9 (set (reg/f:DI 0 ax [orig:100 D.7148 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.7147 ] [99]) [0 *_51+0 S8 A64])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.7147 ] [99])
        (nil)))
(insn 86 85 87 9 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:96 D.7148 ] [96])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:96 D.7148 ] [96])
        (nil)))
(insn 87 86 88 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 D.7148 ] [100])) mABM.c:467 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.7148 ] [100])
        (nil)))
(call_insn 88 87 89 9 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:467 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 89 88 90 9 (set (reg:XF 8 st [185])
        (reg:XF 8 st)) mABM.c:467 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 90 89 91 9 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S16 A128])
        (reg:XF 8 st [185])) mABM.c:467 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [185])
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 91 90 92 10 165 "" [1 uses])
(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 273 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:469 89 {*movsi_internal}
     (nil))
(jump_insn 273 93 274 10 (set (pc)
        (label_ref 215)) mABM.c:469 650 {jump}
     (nil)
 -> 215)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 274 273 217)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 186 187 188 189 190 191 192 193 218
(code_label 217 274 96 11 170 "" [1 uses])
(note 96 217 97 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 11 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:470 89 {*movsi_internal}
     (nil))
(insn 98 97 99 11 (set (reg:DI 0 ax [orig:101 D.7146 ] [101])
        (sign_extend:DI (reg:SI 0 ax [186]))) mABM.c:470 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [186])
        (nil)))
(insn 99 98 100 11 (parallel [
            (set (reg:DI 1 dx [orig:102 D.7146 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.7146 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.7146 ] [101])
        (nil)))
(insn 100 99 101 11 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 11 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.7147 ] [103])
                (plus:DI (reg/f:DI 0 ax [187])
                    (reg:DI 1 dx [orig:102 D.7146 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [187])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:102 D.7146 ] [102])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:102 D.7146 ] [102]))
                (nil)))))
(insn 102 101 103 11 (set (reg/f:DI 0 ax [orig:104 D.7148 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.7147 ] [103]) [0 *_58+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.7147 ] [103])
        (nil)))
(insn 103 102 104 11 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.7148 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.7148 ] [104])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.7148 ] [104])
        (nil)))
(insn 104 103 289 11 (set (reg:XF 8 st [orig:106 D.7149 ] [106])
        (mem:XF (reg/f:DI 0 ax [orig:105 D.7148 ] [105]) [0 *_60+0 S16 A128])) mABM.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:105 D.7148 ] [105])
        (nil)))
(insn 289 104 290 11 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -74 [0xffffffffffffffb6])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:470 199 {x86_fnstcw_1}
     (nil))
(insn 290 289 291 11 (set (reg:HI 0 ax [218])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -74 [0xffffffffffffffb6])) [0  S2 A16])) mABM.c:470 90 {*movhi_internal}
     (nil))
(insn 291 290 292 11 (parallel [
            (set (reg:HI 0 ax [218])
                (ior:HI (reg:HI 0 ax [218])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 410 {*iorhi_1}
     (nil))
(insn 292 291 278 11 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0  S2 A16])
        (reg:HI 0 ax [218])) mABM.c:470 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [218])
        (nil)))
(insn 278 292 106 11 (parallel [
            (set (reg:SI 2 cx [orig:107 D.7150 ] [107])
                (fix:SI (reg:XF 8 st [orig:106 D.7149 ] [106])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:470 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:106 D.7149 ] [106])
        (nil)))
(insn 106 278 107 11 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 11 (set (reg/f:DI 4 si [orig:108 D.7151 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [188]) [0 *f_24(D)+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [188])
        (nil)))
(insn 108 107 109 11 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mABM.c:470 89 {*movsi_internal}
     (nil))
(insn 109 108 110 11 (set (reg:DI 1 dx [orig:109 D.7146 ] [109])
        (sign_extend:DI (reg:SI 0 ax [189]))) mABM.c:470 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [189])
        (nil)))
(insn 110 109 111 11 (set (reg:DI 0 ax [190])
        (reg:DI 1 dx [orig:109 D.7146 ] [109])) mABM.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 11 (parallel [
            (set (reg:DI 0 ax [190])
                (ashift:DI (reg:DI 0 ax [190])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (nil))
(insn 112 111 113 11 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg:DI 0 ax [190])
                    (reg:DI 1 dx [orig:109 D.7146 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:109 D.7146 ] [109])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:109 D.7146 ] [109])
                (const_int 5 [0x5]))
            (nil))))
(insn 113 112 114 11 (parallel [
            (set (reg:DI 0 ax [191])
                (ashift:DI (reg:DI 0 ax [190])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [190])
        (nil)))
(insn 114 113 115 11 (set (reg:DI 0 ax [190])
        (reg:DI 0 ax [191])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [191])
        (nil)))
(insn 115 114 116 11 (set (reg:DI 0 ax [orig:110 D.7146 ] [110])
        (reg:DI 0 ax [190])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [190])
        (nil)))
(insn 116 115 117 11 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.7151 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 D.7146 ] [110])
                    (reg/f:DI 4 si [orig:108 D.7151 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:110 D.7146 ] [110])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:108 D.7151 ] [108])
            (nil))))
(insn 117 116 118 11 (set (reg/f:DI 0 ax [orig:112 D.7147 ] [112])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:111 D.7151 ] [111])
                (const_int 32 [0x20])) [0 _66->pos+0 S8 A128])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:111 D.7151 ] [111])
        (nil)))
(insn 118 117 119 11 (set (reg:SI 1 dx [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:470 89 {*movsi_internal}
     (nil))
(insn 119 118 120 11 (set (reg:DI 1 dx [orig:113 D.7146 ] [113])
        (sign_extend:DI (reg:SI 1 dx [192]))) mABM.c:470 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [192])
        (nil)))
(insn 120 119 121 11 (parallel [
            (set (reg:DI 1 dx [orig:114 D.7146 ] [114])
                (ashift:DI (reg:DI 1 dx [orig:113 D.7146 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:113 D.7146 ] [113])
        (nil)))
(insn 121 120 122 11 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.7147 ] [115])
                (plus:DI (reg/f:DI 0 ax [orig:112 D.7147 ] [112])
                    (reg:DI 1 dx [orig:114 D.7146 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:114 D.7146 ] [114])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:112 D.7147 ] [112])
            (nil))))
(insn 122 121 123 11 (set (reg/f:DI 0 ax [orig:116 D.7148 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 D.7147 ] [115]) [0 *_70+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:115 D.7147 ] [115])
        (nil)))
(insn 123 122 124 11 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.7148 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:116 D.7148 ] [116])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:116 D.7148 ] [116])
        (nil)))
(insn 124 123 279 11 (set (reg:XF 8 st [orig:118 D.7149 ] [118])
        (mem:XF (reg/f:DI 0 ax [orig:117 D.7148 ] [117]) [0 *_72+0 S16 A128])) mABM.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:117 D.7148 ] [117])
        (nil)))
(insn 279 124 297 11 (parallel [
            (set (reg:SI 0 ax [orig:119 D.7150 ] [119])
                (fix:SI (reg:XF 8 st [orig:118 D.7149 ] [118])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:470 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:118 D.7149 ] [118])
        (nil)))
(insn 297 279 126 11 (set (reg:SI 2 cx [orig:120 D.7150 ] [120])
        (reg:SI 2 cx [orig:107 D.7150 ] [107])) mABM.c:470 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:107 D.7150 ] [107])
        (nil)))
(insn 126 297 298 11 (parallel [
            (set (reg:SI 2 cx [orig:120 D.7150 ] [120])
                (minus:SI (reg:SI 2 cx [orig:120 D.7150 ] [120])
                    (reg:SI 0 ax [orig:119 D.7150 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:119 D.7150 ] [119])
        (nil)))
(insn 298 126 280 11 (set (reg:SI 0 ax [orig:120 D.7150 ] [120])
        (reg:SI 2 cx [orig:120 D.7150 ] [120])) mABM.c:470 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:120 D.7150 ] [120])
        (nil)))
(insn 280 298 128 11 (parallel [
            (set (reg:XF 8 st [orig:121 D.7149 ] [121])
                (float:XF (reg:SI 0 ax [orig:120 D.7150 ] [120])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:470 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:120 D.7150 ] [120])
        (nil)))
(insn 128 280 129 11 (set (reg:XF 8 st [orig:122 D.7149 ] [122])
        (abs:XF (reg:XF 8 st [orig:121 D.7149 ] [121]))) mABM.c:470 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:121 D.7149 ] [121])
        (nil)))
(insn 129 128 130 11 (set (reg:XF 9 st(1) [193])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC25") [flags 0x2]) [0  S16 A128])) mABM.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9900000000000002131628207280300557613372802734375e+0 [0x0.9fd70a3d70a3d8p+4])
        (nil)))
(insn 130 129 131 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [193])
            (reg:XF 8 st [orig:122 D.7149 ] [122]))) mABM.c:470 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [193])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:122 D.7149 ] [122])
            (nil))))
(jump_insn 131 130 135 11 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 212)
            (pc))) mABM.c:470 612 {*jcc_1}
     (nil)
 -> 212)
;;  succ:       12 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 126 127 128 129 130 131 132 133 134 194 195 196 197 198
(note 135 131 136 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 12 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 137 136 138 12 (set (reg/f:DI 2 cx [orig:123 D.7151 ] [123])
        (mem/f:DI (reg/f:DI 0 ax [194]) [0 *f_24(D)+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [194])
        (nil)))
(insn 138 137 139 12 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mABM.c:470 89 {*movsi_internal}
     (nil))
(insn 139 138 140 12 (set (reg:DI 1 dx [orig:124 D.7146 ] [124])
        (sign_extend:DI (reg:SI 0 ax [195]))) mABM.c:470 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [195])
        (nil)))
(insn 140 139 141 12 (set (reg:DI 0 ax [196])
        (reg:DI 1 dx [orig:124 D.7146 ] [124])) mABM.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (nil))
(insn 142 141 143 12 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [orig:124 D.7146 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:124 D.7146 ] [124])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:124 D.7146 ] [124])
                (const_int 5 [0x5]))
            (nil))))
(insn 143 142 144 12 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(insn 144 143 145 12 (set (reg:DI 0 ax [196])
        (reg:DI 0 ax [197])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [197])
        (nil)))
(insn 145 144 146 12 (set (reg:DI 0 ax [orig:125 D.7146 ] [125])
        (reg:DI 0 ax [196])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(insn 146 145 147 12 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.7151 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 D.7146 ] [125])
                    (reg/f:DI 2 cx [orig:123 D.7151 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:125 D.7146 ] [125])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:123 D.7151 ] [123])
            (nil))))
(insn 147 146 148 12 (set (reg/f:DI 0 ax [orig:127 D.7147 ] [127])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:126 D.7151 ] [126])
                (const_int 32 [0x20])) [0 _81->pos+0 S8 A128])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:126 D.7151 ] [126])
        (nil)))
(insn 148 147 149 12 (set (reg:SI 1 dx [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:470 89 {*movsi_internal}
     (nil))
(insn 149 148 150 12 (set (reg:DI 1 dx [orig:128 D.7146 ] [128])
        (sign_extend:DI (reg:SI 1 dx [198]))) mABM.c:470 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [198])
        (nil)))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 1 dx [orig:129 D.7146 ] [129])
                (ashift:DI (reg:DI 1 dx [orig:128 D.7146 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:128 D.7146 ] [128])
        (nil)))
(insn 151 150 152 12 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.7147 ] [130])
                (plus:DI (reg/f:DI 0 ax [orig:127 D.7147 ] [127])
                    (reg:DI 1 dx [orig:129 D.7146 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:129 D.7146 ] [129])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:127 D.7147 ] [127])
            (nil))))
(insn 152 151 153 12 (set (reg/f:DI 0 ax [orig:131 D.7148 ] [131])
        (mem/f:DI (reg/f:DI 0 ax [orig:130 D.7147 ] [130]) [0 *_85+0 S8 A64])) mABM.c:470 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:130 D.7147 ] [130])
        (nil)))
(insn 153 152 154 12 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.7148 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:131 D.7148 ] [131])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:131 D.7148 ] [131])
        (nil)))
(insn 154 153 277 12 (set (reg:XF 8 st [orig:133 D.7149 ] [133])
        (mem:XF (reg/f:DI 0 ax [orig:132 D.7148 ] [132]) [0 *_87+0 S16 A128])) mABM.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:132 D.7148 ] [132])
        (nil)))
(insn 277 154 156 12 (parallel [
            (set (reg:SI 0 ax [orig:134 D.7150 ] [134])
                (fix:SI (reg:XF 8 st [orig:133 D.7149 ] [133])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -74 [0xffffffffffffffb6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0  S4 A32]))
        ]) mABM.c:470 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:133 D.7149 ] [133])
        (nil)))
(insn 156 277 157 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:134 D.7150 ] [134])
            (const_int 1 [0x1]))) mABM.c:470 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 D.7150 ] [134])
        (nil)))
(jump_insn 157 156 158 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) mABM.c:470 612 {*jcc_1}
     (nil)
 -> 212)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 199 200 201 202 203 204 205 206 207 208
(note 158 157 159 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 13 (set (reg/f:DI 0 ax [orig:135 D.7148 ] [135])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (nil))
(insn 160 159 161 13 (set (reg:SI 1 dx [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:471 89 {*movsi_internal}
     (nil))
(insn 161 160 162 13 (set (reg:DI 1 dx [orig:136 D.7146 ] [136])
        (sign_extend:DI (reg:SI 1 dx [199]))) mABM.c:471 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [199])
        (nil)))
(insn 162 161 163 13 (parallel [
            (set (reg:DI 1 dx [orig:137 D.7146 ] [137])
                (ashift:DI (reg:DI 1 dx [orig:136 D.7146 ] [136])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:136 D.7146 ] [136])
        (nil)))
(insn 163 162 164 13 (parallel [
            (set (reg/f:DI 3 bx [orig:138 D.7148 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:135 D.7148 ] [135])
                    (reg:DI 1 dx [orig:137 D.7146 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:137 D.7146 ] [137])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:135 D.7148 ] [135])
            (nil))))
(insn 164 163 165 13 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 f+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (nil))
(insn 165 164 166 13 (set (reg/f:DI 2 cx [orig:139 D.7151 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [200]) [0 *f_24(D)+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [200])
        (nil)))
(insn 166 165 167 13 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mABM.c:471 89 {*movsi_internal}
     (nil))
(insn 167 166 168 13 (set (reg:DI 1 dx [orig:140 D.7146 ] [140])
        (sign_extend:DI (reg:SI 0 ax [201]))) mABM.c:471 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [201])
        (nil)))
(insn 168 167 169 13 (set (reg:DI 0 ax [202])
        (reg:DI 1 dx [orig:140 D.7146 ] [140])) mABM.c:471 87 {*movdi_internal_rex64}
     (nil))
(insn 169 168 170 13 (parallel [
            (set (reg:DI 0 ax [202])
                (ashift:DI (reg:DI 0 ax [202])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 513 {*ashldi3_1}
     (nil))
(insn 170 169 171 13 (parallel [
            (set (reg:DI 0 ax [202])
                (plus:DI (reg:DI 0 ax [202])
                    (reg:DI 1 dx [orig:140 D.7146 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:140 D.7146 ] [140])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:140 D.7146 ] [140])
                (const_int 5 [0x5]))
            (nil))))
(insn 171 170 172 13 (parallel [
            (set (reg:DI 0 ax [203])
                (ashift:DI (reg:DI 0 ax [202])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [202])
        (nil)))
(insn 172 171 173 13 (set (reg:DI 0 ax [202])
        (reg:DI 0 ax [203])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [203])
        (nil)))
(insn 173 172 174 13 (set (reg:DI 0 ax [orig:141 D.7146 ] [141])
        (reg:DI 0 ax [202])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [202])
        (nil)))
(insn 174 173 175 13 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.7151 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 D.7146 ] [141])
                    (reg/f:DI 2 cx [orig:139 D.7151 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:141 D.7146 ] [141])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:139 D.7151 ] [139])
            (nil))))
(insn 175 174 176 13 (set (reg/f:DI 0 ax [orig:143 D.7147 ] [143])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:142 D.7151 ] [142])
                (const_int 32 [0x20])) [0 _97->pos+0 S8 A128])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:142 D.7151 ] [142])
        (nil)))
(insn 176 175 177 13 (set (reg:SI 1 dx [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:471 89 {*movsi_internal}
     (nil))
(insn 177 176 178 13 (set (reg:DI 1 dx [orig:144 D.7146 ] [144])
        (sign_extend:DI (reg:SI 1 dx [204]))) mABM.c:471 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [204])
        (nil)))
(insn 178 177 179 13 (parallel [
            (set (reg:DI 1 dx [orig:145 D.7146 ] [145])
                (ashift:DI (reg:DI 1 dx [orig:144 D.7146 ] [144])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:144 D.7146 ] [144])
        (nil)))
(insn 179 178 180 13 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.7147 ] [146])
                (plus:DI (reg/f:DI 0 ax [orig:143 D.7147 ] [143])
                    (reg:DI 1 dx [orig:145 D.7146 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:145 D.7146 ] [145])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:143 D.7147 ] [143])
            (nil))))
(insn 180 179 181 13 (set (reg/f:DI 1 dx [orig:147 D.7148 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [orig:146 D.7147 ] [146]) [0 *_101+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:146 D.7147 ] [146])
        (nil)))
(insn 181 180 182 13 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:471 89 {*movsi_internal}
     (nil))
(insn 182 181 183 13 (set (reg:DI 0 ax [orig:148 D.7146 ] [148])
        (sign_extend:DI (reg:SI 0 ax [205]))) mABM.c:471 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [205])
        (nil)))
(insn 183 182 184 13 (parallel [
            (set (reg:DI 2 cx [orig:149 D.7146 ] [149])
                (ashift:DI (reg:DI 0 ax [orig:148 D.7146 ] [148])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:148 D.7146 ] [148])
        (nil)))
(insn 184 183 185 13 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (nil))
(insn 185 184 186 13 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.7147 ] [150])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 2 cx [orig:149 D.7146 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:471 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [206])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:149 D.7146 ] [149])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 pos+0 S8 A64])
                    (reg:DI 2 cx [orig:149 D.7146 ] [149]))
                (nil)))))
(insn 186 185 187 13 (set (reg/f:DI 0 ax [orig:151 D.7148 ] [151])
        (mem/f:DI (reg/f:DI 0 ax [orig:150 D.7147 ] [150]) [0 *_105+0 S8 A64])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:150 D.7147 ] [150])
        (nil)))
(insn 187 186 188 13 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:147 D.7148 ] [147])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:147 D.7148 ] [147])
        (nil)))
(insn 188 187 189 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 D.7148 ] [151])) mABM.c:471 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:151 D.7148 ] [151])
        (nil)))
(call_insn 189 188 190 13 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:471 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 190 189 191 13 (set (reg:XF 8 st [orig:152 D.7149 ] [152])
        (reg:XF 8 st)) mABM.c:471 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 191 190 192 13 (set (mem:XF (reg/f:DI 3 bx [orig:138 D.7148 ] [138]) [0 *_93+0 S16 A128])
        (reg:XF 8 st [orig:152 D.7149 ] [152])) mABM.c:471 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:152 D.7149 ] [152])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:138 D.7148 ] [138])
            (nil))))
(insn 192 191 193 13 (set (reg/f:DI 0 ax [orig:153 D.7148 ] [153])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:472 87 {*movdi_internal_rex64}
     (nil))
(insn 193 192 194 13 (set (reg:SI 1 dx [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:472 89 {*movsi_internal}
     (nil))
(insn 194 193 195 13 (set (reg:DI 1 dx [orig:154 D.7146 ] [154])
        (sign_extend:DI (reg:SI 1 dx [207]))) mABM.c:472 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [207])
        (nil)))
(insn 195 194 196 13 (parallel [
            (set (reg:DI 1 dx [orig:155 D.7146 ] [155])
                (ashift:DI (reg:DI 1 dx [orig:154 D.7146 ] [154])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:472 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:154 D.7146 ] [154])
        (nil)))
(insn 196 195 197 13 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.7148 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:153 D.7148 ] [153])
                    (reg:DI 1 dx [orig:155 D.7146 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:472 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:155 D.7146 ] [155])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.7148 ] [153])
            (nil))))
(insn 197 196 198 13 (set (reg:XF 8 st [orig:157 D.7149 ] [157])
        (mem:XF (reg/f:DI 0 ax [orig:156 D.7148 ] [156]) [0 *_111+0 S16 A128])) mABM.c:472 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:156 D.7148 ] [156])
        (nil)))
(insn 198 197 199 13 (set (reg:XF 9 st(1) [208])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S16 A128])) mABM.c:472 131 {*movxf_internal_rex64}
     (nil))
(insn 199 198 200 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [208])
            (reg:XF 8 st [orig:157 D.7149 ] [157]))) mABM.c:472 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [208])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:157 D.7149 ] [157])
            (nil))))
(jump_insn 200 199 204 13 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 212)
            (pc))) mABM.c:472 612 {*jcc_1}
     (nil)
 -> 212)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 209 210
(note 204 200 205 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 14 (set (reg/f:DI 0 ax [orig:158 D.7148 ] [158])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:472 87 {*movdi_internal_rex64}
     (nil))
(insn 206 205 207 14 (set (reg:SI 1 dx [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:472 89 {*movsi_internal}
     (nil))
(insn 207 206 208 14 (set (reg:DI 1 dx [orig:159 D.7146 ] [159])
        (sign_extend:DI (reg:SI 1 dx [209]))) mABM.c:472 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [209])
        (nil)))
(insn 208 207 209 14 (parallel [
            (set (reg:DI 1 dx [orig:160 D.7146 ] [160])
                (ashift:DI (reg:DI 1 dx [orig:159 D.7146 ] [159])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:472 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:159 D.7146 ] [159])
        (nil)))
(insn 209 208 210 14 (parallel [
            (set (reg/f:DI 0 ax [orig:161 D.7148 ] [161])
                (plus:DI (reg/f:DI 0 ax [orig:158 D.7148 ] [158])
                    (reg:DI 1 dx [orig:160 D.7146 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:472 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:160 D.7146 ] [160])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:158 D.7148 ] [158])
            (nil))))
(insn 210 209 211 14 (set (reg:XF 0 ax [210])
        (mem:XF (reg/f:DI 0 ax [orig:161 D.7148 ] [161]) [0 *_116+0 S16 A128])) mABM.c:472 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:161 D.7148 ] [161])
        (nil)))
(insn 211 210 212 14 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S16 A128])
        (reg:XF 0 ax [210])) mABM.c:472 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [210])
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              12
;;              11
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 212 211 213 15 167 "" [3 uses])
(note 213 212 214 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:469 273 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211
(code_label 215 214 216 16 166 "" [1 uses])
(note 216 215 218 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 218 216 219 16 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mABM.c:469 89 {*movsi_internal}
     (nil))
(insn 219 218 220 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [211])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32]))) mABM.c:469 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [211])
        (nil)))
(jump_insn 220 219 221 16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) mABM.c:469 612 {*jcc_1}
     (nil)
 -> 217)
;;  succ:       11
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 163 164 165 212 213
(note 221 220 222 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 17 (set (reg/f:DI 0 ax [orig:162 D.7148 ] [162])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:475 87 {*movdi_internal_rex64}
     (nil))
(insn 223 222 224 17 (set (reg:SI 1 dx [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:475 89 {*movsi_internal}
     (nil))
(insn 224 223 225 17 (set (reg:DI 1 dx [orig:163 D.7146 ] [163])
        (sign_extend:DI (reg:SI 1 dx [212]))) mABM.c:475 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [212])
        (nil)))
(insn 225 224 226 17 (parallel [
            (set (reg:DI 1 dx [orig:164 D.7146 ] [164])
                (ashift:DI (reg:DI 1 dx [orig:163 D.7146 ] [163])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:475 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:163 D.7146 ] [163])
        (nil)))
(insn 226 225 227 17 (parallel [
            (set (reg/f:DI 2 cx [orig:165 D.7148 ] [165])
                (plus:DI (reg/f:DI 0 ax [orig:162 D.7148 ] [162])
                    (reg:DI 1 dx [orig:164 D.7146 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:475 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:164 D.7146 ] [164])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:162 D.7148 ] [162])
            (nil))))
(insn 227 226 228 17 (set (reg:XF 0 ax [213])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S16 A128])) mABM.c:475 131 {*movxf_internal_rex64}
     (nil))
(insn 228 227 275 17 (set (mem:XF (reg/f:DI 2 cx [orig:165 D.7148 ] [165]) [0 *_122+0 S16 A128])
        (reg:XF 0 ax [213])) mABM.c:475 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [213])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:165 D.7148 ] [165])
            (nil))))
(jump_insn 275 228 276 17 (set (pc)
        (label_ref 240)) mABM.c:475 650 {jump}
     (nil)
 -> 240)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 276 275 231)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 169 214 215
(code_label 231 276 232 18 162 "" [2 uses])
(note 232 231 233 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 18 (set (reg/f:DI 0 ax [orig:166 D.7148 ] [166])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:477 87 {*movdi_internal_rex64}
     (nil))
(insn 234 233 235 18 (set (reg:SI 1 dx [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:477 89 {*movsi_internal}
     (nil))
(insn 235 234 236 18 (set (reg:DI 1 dx [orig:167 D.7146 ] [167])
        (sign_extend:DI (reg:SI 1 dx [214]))) mABM.c:477 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [214])
        (nil)))
(insn 236 235 237 18 (parallel [
            (set (reg:DI 1 dx [orig:168 D.7146 ] [168])
                (ashift:DI (reg:DI 1 dx [orig:167 D.7146 ] [167])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:477 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:167 D.7146 ] [167])
        (nil)))
(insn 237 236 238 18 (parallel [
            (set (reg/f:DI 2 cx [orig:169 D.7148 ] [169])
                (plus:DI (reg/f:DI 0 ax [orig:166 D.7148 ] [166])
                    (reg:DI 1 dx [orig:168 D.7146 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:477 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:168 D.7146 ] [168])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:166 D.7148 ] [166])
            (nil))))
(insn 238 237 239 18 (set (reg:XF 0 ax [215])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:477 131 {*movxf_internal_rex64}
     (nil))
(insn 239 238 240 18 (set (mem:XF (reg/f:DI 2 cx [orig:169 D.7148 ] [169]) [0 *_126+0 S16 A128])
        (reg:XF 0 ax [215])) mABM.c:477 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [215])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:169 D.7148 ] [169])
            (nil))))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 240 239 241 19 171 "" [1 uses])
(note 241 240 242 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:464 273 {*addsi_1}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216
(code_label 243 242 244 20 161 "" [1 uses])
(note 244 243 246 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 246 244 247 20 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mABM.c:464 89 {*movsi_internal}
     (nil))
(insn 247 246 248 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [216])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 N+0 S4 A32]))) mABM.c:464 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [216])
        (nil)))
(jump_insn 248 247 249 20 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 245)
            (pc))) mABM.c:464 612 {*jcc_1}
     (nil)
 -> 245)
;;  succ:       4
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 170 171
(note 249 248 250 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 253 21 (set (reg:SI 0 ax [orig:170 D.7150 ] [170])
        (const_int 1 [0x1])) mABM.c:479 89 {*movsi_internal}
     (nil))
(insn 253 250 286 21 (set (reg:SI 0 ax [orig:171 <retval> ] [171])
        (reg:SI 0 ax [orig:170 D.7150 ] [170])) mABM.c:479 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:170 D.7150 ] [170])
        (nil)))
(note 286 253 257 21 NOTE_INSN_DELETED)
(insn 257 286 260 21 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:171 <retval> ] [171])) mABM.c:480 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:171 <retval> ] [171])
        (nil)))
(insn 260 257 0 21 (use (reg/i:SI 0 ax)) mABM.c:480 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _isInsideCircle (_isInsideCircle, funcdef_no=22, decl_uid=4302, cgraph_uid=22)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {*zero_extendqisi2}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


_isInsideCircle

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={2d,2u} r9={2d,1u} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d,1u} r18={1d} r19={1d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 105{76d,28u,1e} in 17{16 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mABM.c:482 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 shock+0 S8 A64])
        (reg:DI 4 si [ shock ])) mABM.c:482 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ shock ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 shock+0 S8 A64])) mABM.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mABM.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [65])) mABM.c:483 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [65])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [66])) mABM.c:483 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [66])
        (nil)))
(call_insn 11 10 12 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:483 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:XF 8 st [orig:59 D.7152 ] [59])
        (reg:XF 8 st)) mABM.c:483 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [67])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 shock+0 S8 A64])) mABM.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:60 D.7153 ] [60])
                (plus:DI (reg/f:DI 0 ax [67])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:483 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [67])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 shock+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 15 14 16 2 (set (reg:XF 9 st(1) [orig:61 D.7152 ] [61])
        (mem:XF (reg/f:DI 0 ax [orig:60 D.7153 ] [60]) [0 *_4+0 S16 A128])) mABM.c:483 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7153 ] [60])
        (nil)))
(insn 16 15 17 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:61 D.7152 ] [61])
            (reg:XF 8 st [orig:59 D.7152 ] [59]))) mABM.c:483 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.7152 ] [61])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.7152 ] [59])
            (nil))))
(insn 17 16 18 2 (set (reg:QI 0 ax [orig:62 D.7154 ] [62])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) mABM.c:483 608 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
(insn 18 17 21 2 (set (reg:SI 0 ax [orig:63 D.7155 ] [63])
        (zero_extend:SI (reg:QI 0 ax [orig:62 D.7154 ] [62]))) mABM.c:483 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:62 D.7154 ] [62])
        (nil)))
(insn 21 18 25 2 (set (reg:SI 0 ax [orig:64 <retval> ] [64])
        (reg:SI 0 ax [orig:63 D.7155 ] [63])) mABM.c:483 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.7155 ] [63])
        (nil)))
(insn 25 21 28 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:64 <retval> ] [64])) mABM.c:484 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 <retval> ] [64])
        (nil)))
(insn 28 25 0 2 (use (reg/i:SI 0 ax)) mABM.c:484 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _checkShockareaRoute (_checkShockareaRoute, funcdef_no=23, decl_uid=4308, cgraph_uid=23)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) o  (1) re {*movti_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=112 from oldreg=90, assigning class GENERAL_REGS to r112
   84: {r112:DI=r112:DI<<0x4;clobber flags:CC;}
      REG_DEAD r89:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  132: r112:DI=r89:DI
    Inserting insn reload after:
  133: r90:DI=r112:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 91:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 99:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 117: point = 0
   Insn 114: point = 0
   Insn 110: point = 1
   Insn 107: point = 3
  BB 13
   Insn 105: point = 4
   Insn 104: point = 4
   Insn 103: point = 5
  BB 2
   Insn 128: point = 6
   Insn 13: point = 6
   Insn 9: point = 6
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 6: point = 8
   Insn 5: point = 10
   Insn 4: point = 11
   Insn 3: point = 12
   Insn 2: point = 12
  BB 12
   Insn 99: point = 12
  BB 11
   Insn 97: point = 12
   Insn 96: point = 12
   Insn 94: point = 13
  BB 3
   Insn 130: point = 14
   Insn 17: point = 14
  BB 10
   Insn 91: point = 14
  BB 9
   Insn 88: point = 14
   Insn 87: point = 15
   Insn 86: point = 16
   Insn 85: point = 18
   Insn 133: point = 19
	Hard reg 1 is preferable by r112 with profit 1
   Insn 84: point = 21
   Insn 132: point = 21
	Hard reg 1 is preferable by r112 with profit 1
	Hard reg 0 is preferable by r112 with profit 1
   Insn 83: point = 23
   Insn 82: point = 25
  BB 8
   Insn 80: point = 26
   Insn 79: point = 26
   Insn 78: point = 27
   Insn 77: point = 28
   Insn 76: point = 28
   Insn 75: point = 29
   Insn 74: point = 30
   Insn 73: point = 32
   Insn 72: point = 34
   Insn 71: point = 35
   Insn 70: point = 37
   Insn 69: point = 39
   Insn 68: point = 40
   Insn 67: point = 42
   Insn 66: point = 44
   Insn 65: point = 46
   Insn 64: point = 48
   Insn 63: point = 49
  BB 7
   Insn 58: point = 50
   Insn 57: point = 50
   Insn 56: point = 51
  BB 6
   Insn 55: point = 53
   Insn 54: point = 53
   Insn 53: point = 54
   Insn 52: point = 55
   Insn 51: point = 57
   Insn 50: point = 59
   Insn 49: point = 61
   Insn 48: point = 63
   Insn 47: point = 64
   Insn 46: point = 66
   Insn 45: point = 68
  BB 5
   Insn 40: point = 69
   Insn 39: point = 69
  BB 4
   Insn 38: point = 71
   Insn 37: point = 71
   Insn 36: point = 71
   Insn 35: point = 73
   Insn 34: point = 75
   Insn 33: point = 77
   Insn 32: point = 79
   Insn 31: point = 81
   Insn 30: point = 83
   Insn 29: point = 84
   Insn 28: point = 85
   Insn 27: point = 87
   Insn 26: point = 89
   Insn 25: point = 91
   Insn 24: point = 93
   Insn 23: point = 94
   Insn 22: point = 96
   Insn 21: point = 98
 r59: [12..13]
 r60: [95..96]
 r61: [92..94]
 r62: [90..91]
 r63: [88..89]
 r64: [86..87]
 r65: [69..85]
 r66: [78..84]
 r67: [80..81]
 r68: [78..79]
 r69: [76..77]
 r70: [74..75]
 r71: [72..73]
 r72: [69..71]
 r73: [65..66]
 r74: [62..64]
 r75: [60..61]
 r76: [58..59]
 r77: [56..57]
 r78: [50..55]
 r79: [43..49]
 r80: [45..46]
 r81: [43..44]
 r82: [41..42]
 r83: [29..40]
 r84: [36..37]
 r85: [33..35]
 r86: [31..32]
 r87: [28..30]
 r88: [26..27]
 r89: [22..23]
 r90: [17..19]
 r91: [14..16]
 r92: [2..3]
 r93: [0..1]
 r94: [6..8]
 r95: [9..11]
 r96: [7..10]
 r97: [97..98]
 r98: [92..93]
 r99: [82..83]
 r100: [67..68]
 r101: [62..63]
 r102: [53..54]
 r103: [50..51]
 r104: [47..48]
 r105: [38..39]
 r106: [33..34]
 r107: [24..25]
 r108: [17..18]
 r109: [14..15]
 r110: [4..5]
 r112: [20..21]
Compressing live ranges: from 99 to 84 - 84%
Ranges after the compression:
 r59: [10..11]
 r60: [80..81]
 r61: [78..79]
 r62: [76..77]
 r63: [74..75]
 r64: [72..73]
 r65: [58..71]
 r66: [66..71]
 r67: [68..69]
 r68: [66..67]
 r69: [64..65]
 r70: [62..63]
 r71: [60..61]
 r72: [58..59]
 r73: [54..55]
 r74: [52..53]
 r75: [50..51]
 r76: [48..49]
 r77: [46..47]
 r78: [42..45]
 r79: [36..41]
 r80: [38..39]
 r81: [36..37]
 r82: [34..35]
 r83: [24..33]
 r84: [30..31]
 r85: [28..29]
 r86: [26..27]
 r87: [24..25]
 r88: [22..23]
 r89: [18..19]
 r90: [14..15]
 r91: [12..13]
 r92: [2..3]
 r93: [0..1]
 r94: [6..7]
 r95: [8..9]
 r96: [6..9]
 r97: [82..83]
 r98: [78..79]
 r99: [70..71]
 r100: [56..57]
 r101: [52..53]
 r102: [44..45]
 r103: [42..43]
 r104: [40..41]
 r105: [32..33]
 r106: [28..29]
 r107: [20..21]
 r108: [14..15]
 r109: [12..13]
 r110: [4..5]
 r112: [16..17]
	 Assigning to 112 (cl=GENERAL_REGS, orig=90, freq=3, tfirst=112, tfreq=3)...
	   Assign 0 to reload r112 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 94
changing reg in insn 96
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 39
changing reg in insn 37
changing reg in insn 29
changing reg in insn 33
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 39
changing reg in insn 37
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 57
changing reg in insn 54
changing reg in insn 63
changing reg in insn 67
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 86
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 107
changing reg in insn 110
changing reg in insn 110
changing reg in insn 114
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 4
changing reg in insn 5
changing reg in insn 7
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 103
changing reg in insn 104
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 77.


_checkShockareaRoute

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 37[r8]
;;  ref usage 	r0={39d,39u} r1={15d,14u,3e} r2={5d,4u,1e} r4={3d,2u} r5={3d,2u} r6={1d,40u} r7={1d,15u} r8={3d,4u} r9={4d,4u} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={25d,7u} r18={1d} r19={1d} r20={1d,1u,4e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 287{146d,133u,8e} in 85{84 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 94 95 96
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])
        (reg:DI 5 di [ pos ])) mABM.c:486 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ pos ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mABM.c:486 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(insn 4 3 5 2 (set (reg:SI 0 ax [95])
        (reg:SI 1 dx [ shock ])) mABM.c:486 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ shock ])
        (nil)))
(insn 5 4 6 2 (set (reg:DI 2 cx [96])
        (reg:DI 2 cx [ shock+8 ])) mABM.c:486 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ shock+8 ])
        (nil)))
(insn 6 5 7 2 (set (reg:TI 0 ax [94])
        (reg:TI 0 ax [95])) mABM.c:486 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 7 6 8 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [96])) mABM.c:486 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [96])
        (nil)))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 shock+0 S16 A64])
        (reg:TI 0 ax [94])) mABM.c:486 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [94])
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 d+0 S8 A64])
        (reg:DI 37 r8 [ d ])) mABM.c:486 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ d ])
        (nil)))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 128 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:489 89 {*movsi_internal}
     (nil))
(jump_insn 128 13 129 2 (set (pc)
        (label_ref 100)) mABM.c:489 650 {jump}
     (nil)
 -> 100)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 102)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 102 129 16 3 185 "" [1 uses])
(note 16 102 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 130 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:490 89 {*movsi_internal}
     (nil))
(jump_insn 130 17 131 3 (set (pc)
        (label_ref 92)) mABM.c:490 650 {jump}
     (nil)
 -> 92)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 131 130 95)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 67 68 69 70 71 72 97 98 99
(code_label 95 131 20 4 184 "" [1 uses])
(note 20 95 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 0 ax [orig:60 D.7157 ] [60])
        (sign_extend:DI (reg:SI 0 ax [97]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [97])
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 1 dx [orig:61 D.7157 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:60 D.7157 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.7157 ] [60])
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7158 ] [62])
                (plus:DI (reg/f:DI 0 ax [98])
                    (reg:DI 1 dx [orig:61 D.7157 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7157 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.7157 ] [61]))
                (nil)))))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:63 D.7159 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.7158 ] [62]) [0 *_10+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7158 ] [62])
        (nil)))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7159 ] [64])
                (plus:DI (reg/f:DI 0 ax [orig:63 D.7159 ] [63])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7159 ] [63])
        (nil)))
(insn 28 27 29 4 (set (reg:XF 9 st(1) [orig:65 D.7160 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.7159 ] [64]) [0 *_12+0 S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7159 ] [64])
        (nil)))
(insn 29 28 30 4 (set (reg/f:DI 0 ax [orig:66 D.7158 ] [66])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 shock.shock+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 4 (set (reg:SI 1 dx [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 1 dx [orig:67 D.7157 ] [67])
        (sign_extend:DI (reg:SI 1 dx [99]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [99])
        (nil)))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 1 dx [orig:68 D.7157 ] [68])
                (ashift:DI (reg:DI 1 dx [orig:67 D.7157 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7157 ] [67])
        (nil)))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.7158 ] [69])
                (plus:DI (reg/f:DI 0 ax [orig:66 D.7158 ] [66])
                    (reg:DI 1 dx [orig:68 D.7157 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.7157 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7158 ] [66])
            (nil))))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [orig:70 D.7159 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [orig:69 D.7158 ] [69]) [0 *_17+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7158 ] [69])
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7159 ] [71])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.7159 ] [70])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7159 ] [70])
        (nil)))
(insn 36 35 37 4 (set (reg:XF 8 st [orig:72 D.7160 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.7159 ] [71]) [0 *_19+0 S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7159 ] [71])
        (nil)))
(insn 37 36 38 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:65 D.7160 ] [65])
            (reg:XF 8 st [orig:72 D.7160 ] [72]))) mABM.c:491 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 38 37 119 4 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) mABM.c:491 612 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       10
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 72

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 72
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 72
;; lr  def 	 17 [flags]
(note 119 38 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 119 40 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:65 D.7160 ] [65])
            (reg:XF 8 st [orig:72 D.7160 ] [72]))) mABM.c:491 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.7160 ] [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.7160 ] [65])
            (nil))))
(jump_insn 40 39 44 5 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 89)
            (pc))) mABM.c:491 612 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       6 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74 75 76 77 78 100 101 102
(note 44 40 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:DI 0 ax [orig:73 D.7157 ] [73])
        (sign_extend:DI (reg:SI 0 ax [100]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [100])
        (nil)))
(insn 47 46 48 6 (parallel [
            (set (reg:DI 1 dx [orig:74 D.7157 ] [74])
                (ashift:DI (reg:DI 0 ax [orig:73 D.7157 ] [73])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:73 D.7157 ] [73])
        (nil)))
(insn 48 47 49 6 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.7158 ] [75])
                (plus:DI (reg/f:DI 0 ax [101])
                    (reg:DI 1 dx [orig:74 D.7157 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7157 ] [74])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])
                    (reg:DI 1 dx [orig:74 D.7157 ] [74]))
                (nil)))))
(insn 50 49 51 6 (set (reg/f:DI 0 ax [orig:76 D.7159 ] [76])
        (mem/f:DI (reg/f:DI 0 ax [orig:75 D.7158 ] [75]) [0 *_23+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7158 ] [75])
        (nil)))
(insn 51 50 52 6 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.7159 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:76 D.7159 ] [76])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7159 ] [76])
        (nil)))
(insn 52 51 53 6 (set (reg:XF 8 st [orig:78 D.7160 ] [78])
        (mem:XF (reg/f:DI 0 ax [orig:77 D.7159 ] [77]) [0 *_25+0 S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7159 ] [77])
        (nil)))
(insn 53 52 54 6 (set (reg:XF 9 st(1) [102])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 54 53 55 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:78 D.7160 ] [78])
            (reg:XF 9 st(1) [102]))) mABM.c:491 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [102])
        (nil)))
(jump_insn 55 54 122 6 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) mABM.c:491 612 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 78
;; lr  def 	 17 [flags] 103
(note 122 55 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 56 122 57 7 (set (reg:XF 9 st(1) [103])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 57 56 58 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:78 D.7160 ] [78])
            (reg:XF 9 st(1) [103]))) mABM.c:491 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [103])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.7160 ] [78])
            (nil))))
(jump_insn 58 57 62 7 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 89)
            (pc))) mABM.c:491 612 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 83 84 85 86 87 88 104 105 106
(note 62 58 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 8 (set (reg/f:DI 0 ax [orig:79 D.7158 ] [79])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 shock.shock+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 8 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 1 dx [orig:80 D.7157 ] [80])
        (sign_extend:DI (reg:SI 1 dx [104]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [104])
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 1 dx [orig:81 D.7157 ] [81])
                (ashift:DI (reg:DI 1 dx [orig:80 D.7157 ] [80])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7157 ] [80])
        (nil)))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.7158 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:79 D.7158 ] [79])
                    (reg:DI 1 dx [orig:81 D.7157 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.7157 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7158 ] [79])
            (nil))))
(insn 68 67 69 8 (set (reg/f:DI 1 dx [orig:83 D.7159 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 D.7158 ] [82]) [0 *_30+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7158 ] [82])
        (nil)))
(insn 69 68 70 8 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (set (reg:DI 0 ax [orig:84 D.7157 ] [84])
        (sign_extend:DI (reg:SI 0 ax [105]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [105])
        (nil)))
(insn 71 70 72 8 (parallel [
            (set (reg:DI 2 cx [orig:85 D.7157 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.7157 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:84 D.7157 ] [84])
        (nil)))
(insn 72 71 73 8 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 8 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.7158 ] [86])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 2 cx [orig:85 D.7157 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:85 D.7157 ] [85])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 pos+0 S8 A64])
                    (reg:DI 2 cx [orig:85 D.7157 ] [85]))
                (nil)))))
(insn 74 73 75 8 (set (reg/f:DI 0 ax [orig:87 D.7159 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 D.7158 ] [86]) [0 *_34+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7158 ] [86])
        (nil)))
(insn 75 74 76 8 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:83 D.7159 ] [83])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:83 D.7159 ] [83])
        (nil)))
(insn 76 75 77 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.7159 ] [87])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7159 ] [87])
        (nil)))
(call_insn 77 76 78 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_isInsideCircle") [flags 0x3]  <function_decl 0x7f05a571f600 _isInsideCircle>) [0 _isInsideCircle S1 A8])
            (const_int 0 [0]))) mABM.c:491 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 78 77 79 8 (set (reg:SI 0 ax [orig:88 D.7156 ] [88])
        (reg:SI 0 ax)) mABM.c:491 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 79 78 80 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.7156 ] [88])
            (const_int 0 [0]))) mABM.c:491 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:88 D.7156 ] [88])
        (nil)))
(jump_insn 80 79 81 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) mABM.c:491 612 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 107 108 109
(note 81 80 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 9 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:491 89 {*movsi_internal}
     (nil))
(insn 83 82 132 9 (set (reg:DI 0 ax [orig:89 D.7157 ] [89])
        (sign_extend:DI (reg:SI 0 ax [107]))) mABM.c:491 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 132 83 84 9 (set (reg:DI 0 ax [orig:90 D.7157 ] [90])
        (reg:DI 0 ax [orig:89 D.7157 ] [89])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.7157 ] [89])
        (nil)))
(insn 84 132 133 9 (parallel [
            (set (reg:DI 0 ax [orig:90 D.7157 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:90 D.7157 ] [90])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 513 {*ashldi3_1}
     (nil))
(insn 133 84 85 9 (set (reg:DI 1 dx [orig:90 D.7157 ] [90])
        (reg:DI 0 ax [orig:90 D.7157 ] [90])) mABM.c:491 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:90 D.7157 ] [90])
        (nil)))
(insn 85 133 86 9 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 d+0 S8 A64])) mABM.c:491 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 9 (parallel [
            (set (reg/f:DI 2 cx [orig:91 D.7159 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.7157 ] [90])
                    (reg/f:DI 0 ax [108])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:491 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.7157 ] [90])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 d+0 S8 A64])
                    (reg:DI 1 dx [orig:90 D.7157 ] [90]))
                (nil)))))
(insn 87 86 88 9 (set (reg:XF 0 ax [109])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:491 131 {*movxf_internal_rex64}
     (nil))
(insn 88 87 89 9 (set (mem:XF (reg/f:DI 2 cx [orig:91 D.7159 ] [91]) [0 *_40+0 S16 A128])
        (reg:XF 0 ax [109])) mABM.c:491 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [109])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:91 D.7159 ] [91])
            (nil))))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;;              4
;;              5
;;              6
;;              7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 89 88 90 10 181 "" [5 uses])
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:490 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 92 91 93 11 180 "" [1 uses])
(note 93 92 94 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 96 11 (set (reg:SI 0 ax [orig:59 D.7156 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 shock.Nshock+0 S4 A64])) mABM.c:490 89 {*movsi_internal}
     (nil))
(insn 96 94 97 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.7156 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) mABM.c:490 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7156 ] [59])
        (nil)))
(jump_insn 97 96 98 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) mABM.c:490 612 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       4
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 98 97 99 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:489 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110
(code_label 100 99 101 13 179 "" [1 uses])
(note 101 100 103 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 103 101 104 13 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:489 89 {*movsi_internal}
     (nil))
(insn 104 103 105 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [110])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mABM.c:489 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [110])
        (nil)))
(jump_insn 105 104 106 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) mABM.c:489 612 {*jcc_1}
     (nil)
 -> 102)
;;  succ:       3
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(note 106 105 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 110 14 (set (reg:SI 0 ax [orig:92 D.7156 ] [92])
        (const_int 0 [0])) mABM.c:494 89 {*movsi_internal}
     (nil))
(insn 110 107 114 14 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:92 D.7156 ] [92])) mABM.c:494 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:92 D.7156 ] [92])
        (nil)))
(insn 114 110 117 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) mABM.c:495 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 <retval> ] [93])
        (nil)))
(insn 117 114 0 14 (use (reg/i:SI 0 ax)) mABM.c:495 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _check_risk (_check_risk, funcdef_no=24, decl_uid=4320, cgraph_uid=24)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=78 from oldreg=61, assigning class GENERAL_REGS to r78
   13: {r78:DI=r78:DI<<0x4;clobber flags:CC;}
      REG_DEAD r60:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   73: r78:DI=r60:DI
    Inserting insn reload after:
   74: r61:DI=r78:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=79 from oldreg=65, assigning class GENERAL_REGS to r79
   29: {r79:DI=r79:DI<<0x4;clobber flags:CC;}
      REG_DEAD r64:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   75: r79:DI=r64:DI
    Inserting insn reload after:
   76: r65:DI=r79:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 43:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 61: point = 0
   Insn 58: point = 0
   Insn 54: point = 1
   Insn 51: point = 3
  BB 8
   Insn 49: point = 4
   Insn 48: point = 4
   Insn 46: point = 5
  BB 2
   Insn 71: point = 6
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 2: point = 6
  BB 7
   Insn 43: point = 6
  BB 6
   Insn 40: point = 6
  BB 5
   Insn 35: point = 6
   Insn 34: point = 6
   Insn 33: point = 7
   Insn 32: point = 8
   Insn 31: point = 10
   Insn 30: point = 12
   Insn 76: point = 13
	Hard reg 1 is preferable by r79 with profit 1
   Insn 29: point = 15
   Insn 75: point = 15
	Hard reg 1 is preferable by r79 with profit 1
	Hard reg 0 is preferable by r79 with profit 1
   Insn 28: point = 17
   Insn 27: point = 19
  BB 4
   Insn 22: point = 20
   Insn 21: point = 20
   Insn 20: point = 21
  BB 3
   Insn 19: point = 23
   Insn 18: point = 23
   Insn 17: point = 24
   Insn 16: point = 25
   Insn 15: point = 27
   Insn 14: point = 29
   Insn 74: point = 30
	Hard reg 1 is preferable by r78 with profit 1
   Insn 13: point = 32
   Insn 73: point = 32
	Hard reg 1 is preferable by r78 with profit 1
	Hard reg 0 is preferable by r78 with profit 1
   Insn 12: point = 34
   Insn 11: point = 36
 r59: [4..5]
 r60: [33..34]
 r61: [28..30]
 r62: [26..27]
 r63: [20..25]
 r64: [16..17]
 r65: [11..13]
 r66: [9..10]
 r67: [6..8]
 r68: [6..7]
 r69: [2..3]
 r70: [0..1]
 r71: [35..36]
 r72: [28..29]
 r73: [23..24]
 r74: [20..21]
 r75: [18..19]
 r76: [11..12]
 r78: [31..32]
 r79: [14..15]
Compressing live ranges: from 37 to 32 - 86%
Ranges after the compression:
 r59: [4..5]
 r60: [28..29]
 r61: [24..25]
 r62: [22..23]
 r63: [18..21]
 r64: [14..15]
 r65: [10..11]
 r66: [8..9]
 r67: [6..7]
 r68: [6..7]
 r69: [2..3]
 r70: [0..1]
 r71: [30..31]
 r72: [24..25]
 r73: [20..21]
 r74: [18..19]
 r75: [16..17]
 r76: [10..11]
 r78: [26..27]
 r79: [12..13]
	 Assigning to 78 (cl=GENERAL_REGS, orig=61, freq=3, tfirst=78, tfreq=3)...
	   Assign 0 to reload r78 (freq=3)
	 Assigning to 79 (cl=GENERAL_REGS, orig=65, freq=3, tfirst=79, tfreq=3)...
	   Assign 0 to reload r79 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 46
changing reg in insn 48
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 21
changing reg in insn 18
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 51
changing reg in insn 54
changing reg in insn 54
changing reg in insn 58
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
starting the processing of deferred insns
ending the processing of deferred insns


_check_risk

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={17d,17u} r1={3d,2u,2e} r2={1d} r4={1d} r5={1d,1u} r6={1d,23u} r7={1d,9u} r8={2d,3u} r9={3d,3u} r17={9d,4u} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 117{50d,63u,4e} in 38{38 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])
        (reg:DI 5 di [ d ])) mABM.c:498 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ d ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:500 89 {*movsi_internal}
     (nil))
(insn 7 6 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 risk+0 S4 A32])
        (const_int 0 [0])) mABM.c:500 89 {*movsi_internal}
     (nil))
(jump_insn 71 7 72 2 (set (pc)
        (label_ref 44)) mABM.c:500 650 {jump}
     (nil)
 -> 44)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 47)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 71 72 73
(code_label 47 72 10 3 196 "" [1 uses])
(note 10 47 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:500 89 {*movsi_internal}
     (nil))
(insn 12 11 73 3 (set (reg:DI 0 ax [orig:60 D.7162 ] [60])
        (sign_extend:DI (reg:SI 0 ax [71]))) mABM.c:500 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(insn 73 12 13 3 (set (reg:DI 0 ax [orig:61 D.7162 ] [61])
        (reg:DI 0 ax [orig:60 D.7162 ] [60])) mABM.c:500 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.7162 ] [60])
        (nil)))
(insn 13 73 74 3 (parallel [
            (set (reg:DI 0 ax [orig:61 D.7162 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:61 D.7162 ] [61])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:500 513 {*ashldi3_1}
     (nil))
(insn 74 13 14 3 (set (reg:DI 1 dx [orig:61 D.7162 ] [61])
        (reg:DI 0 ax [orig:61 D.7162 ] [61])) mABM.c:500 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7162 ] [61])
        (nil)))
(insn 14 74 15 3 (set (reg/f:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])) mABM.c:500 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7163 ] [62])
                (plus:DI (reg/f:DI 0 ax [72])
                    (reg:DI 1 dx [orig:61 D.7162 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:500 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [72])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7162 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.7162 ] [61]))
                (nil)))))
(insn 16 15 17 3 (set (reg:XF 8 st [orig:63 D.7164 ] [63])
        (mem:XF (reg/f:DI 0 ax [orig:62 D.7163 ] [62]) [0 *_10+0 S16 A128])) mABM.c:500 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7163 ] [62])
        (nil)))
(insn 17 16 18 3 (set (reg:XF 9 st(1) [73])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:500 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 18 17 19 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:63 D.7164 ] [63])
            (reg:XF 9 st(1) [73]))) mABM.c:500 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [73])
        (nil)))
(jump_insn 19 18 63 3 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 69)
            (pc))) mABM.c:500 612 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63
;; lr  def 	 17 [flags] 74
(note 63 19 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 63 21 4 (set (reg:XF 9 st(1) [74])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S16 A128])) mABM.c:500 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+5 [0x0.c35p+17])
        (nil)))
(insn 21 20 22 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:63 D.7164 ] [63])
            (reg:XF 9 st(1) [74]))) mABM.c:500 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [74])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.7164 ] [63])
            (nil))))
(jump_insn 22 21 69 4 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) mABM.c:500 612 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 75 76
(code_label 69 22 26 5 198 "" [1 uses])
(note 26 69 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:SI 0 ax [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:500 89 {*movsi_internal}
     (nil))
(insn 28 27 75 5 (set (reg:DI 0 ax [orig:64 D.7162 ] [64])
        (sign_extend:DI (reg:SI 0 ax [75]))) mABM.c:500 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [75])
        (nil)))
(insn 75 28 29 5 (set (reg:DI 0 ax [orig:65 D.7162 ] [65])
        (reg:DI 0 ax [orig:64 D.7162 ] [64])) mABM.c:500 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.7162 ] [64])
        (nil)))
(insn 29 75 76 5 (parallel [
            (set (reg:DI 0 ax [orig:65 D.7162 ] [65])
                (ashift:DI (reg:DI 0 ax [orig:65 D.7162 ] [65])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:500 513 {*ashldi3_1}
     (nil))
(insn 76 29 30 5 (set (reg:DI 1 dx [orig:65 D.7162 ] [65])
        (reg:DI 0 ax [orig:65 D.7162 ] [65])) mABM.c:500 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.7162 ] [65])
        (nil)))
(insn 30 76 31 5 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])) mABM.c:500 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.7163 ] [66])
                (plus:DI (reg/f:DI 0 ax [76])
                    (reg:DI 1 dx [orig:65 D.7162 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:500 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7162 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 d+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.7162 ] [65]))
                (nil)))))
(insn 32 31 33 5 (set (reg:XF 8 st [orig:67 D.7164 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.7163 ] [66]) [0 *_14+0 S16 A128])) mABM.c:500 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7163 ] [66])
        (nil)))
(insn 33 32 34 5 (set (reg:XF 9 st(1) [orig:68 D.7164 ] [68])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 272 [0x110])) [0 conf.d_thr+0 S16 A128])) mABM.c:500 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:68 D.7164 ] [68])
            (reg:XF 8 st [orig:67 D.7164 ] [67]))) mABM.c:500 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:68 D.7164 ] [68])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.7164 ] [67])
            (nil))))
(jump_insn 35 34 39 5 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) mABM.c:500 612 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 39 35 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 risk+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:500 89 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 41 40 42 7 193 "" [2 uses])
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:500 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 44 43 45 8 192 "" [1 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 48 8 (set (reg:SI 0 ax [orig:59 D.7161 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:500 89 {*movsi_internal}
     (nil))
(insn 48 46 49 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.7161 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mABM.c:500 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7161 ] [59])
        (nil)))
(jump_insn 49 48 50 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) mABM.c:500 612 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 69 70
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 54 9 (set (reg:SI 0 ax [orig:69 D.7161 ] [69])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 risk+0 S4 A32])) mABM.c:502 89 {*movsi_internal}
     (nil))
(insn 54 51 58 9 (set (reg:SI 0 ax [orig:70 <retval> ] [70])
        (reg:SI 0 ax [orig:69 D.7161 ] [69])) mABM.c:502 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7161 ] [69])
        (nil)))
(insn 58 54 61 9 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:70 <retval> ] [70])) mABM.c:503 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 <retval> ] [70])
        (nil)))
(insn 61 58 0 9 (use (reg/i:SI 0 ax)) mABM.c:503 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _add_nvp_inSector (_add_nvp_inSector, funcdef_no=25, decl_uid=4329, cgraph_uid=25)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=87 from oldreg=60, assigning class GENERAL_REGS to r87
   17: {r87:DI=r87:DI<<0x4;clobber flags:CC;}
      REG_DEAD r59:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   68: r87:DI=r59:DI
    Inserting insn reload after:
   69: r60:DI=r87:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 63: point = 0
   Insn 60: point = 0
   Insn 56: point = 1
   Insn 53: point = 3
   Insn 52: point = 4
   Insn 51: point = 5
   Insn 50: point = 6
   Insn 49: point = 8
   Insn 48: point = 10
   Insn 47: point = 11
   Insn 46: point = 12
   Insn 45: point = 13
   Insn 44: point = 15
   Insn 43: point = 17
   Insn 42: point = 18
   Insn 41: point = 18
   Insn 40: point = 19
   Insn 39: point = 20
   Insn 38: point = 21
   Insn 37: point = 22
   Insn 36: point = 23
  BB 4
   Insn 34: point = 24
   Insn 33: point = 24
  BB 2
   Insn 66: point = 24
   Insn 11: point = 24
   Insn 10: point = 24
   Insn 9: point = 25
   Insn 8: point = 26
   Insn 7: point = 26
   Insn 3: point = 26
   Insn 2: point = 26
  BB 3
   Insn 29: point = 26
   Insn 28: point = 26
   Insn 27: point = 27
   Insn 26: point = 29
   Insn 25: point = 31
   Insn 24: point = 33
   Insn 23: point = 35
   Insn 22: point = 36
   Insn 21: point = 38
   Insn 20: point = 40
   Insn 19: point = 41
   Insn 18: point = 43
   Insn 69: point = 44
	Hard reg 1 is preferable by r87 with profit 1
   Insn 17: point = 46
   Insn 68: point = 46
	Hard reg 1 is preferable by r87 with profit 1
	Hard reg 0 is preferable by r87 with profit 1
   Insn 16: point = 48
   Insn 15: point = 50
 r59: [47..48]
 r60: [42..44]
 r61: [26..41]
 r62: [37..38]
 r63: [30..36]
 r64: [32..33]
 r65: [30..31]
 r66: [28..29]
 r67: [26..27]
 r68: [14..15]
 r69: [11..13]
 r70: [7..8]
 r71: [4..6]
 r72: [2..3]
 r73: [0..1]
 r74: [24..25]
 r75: [49..50]
 r76: [42..43]
 r77: [39..40]
 r78: [34..35]
 r79: [20..23]
 r80: [19..22]
 r81: [18..21]
 r82: [16..17]
 r83: [11..12]
 r84: [9..10]
 r85: [4..5]
 r87: [45..46]
Compressing live ranges: from 51 to 42 - 82%
Ranges after the compression:
 r59: [38..39]
 r60: [34..35]
 r61: [20..33]
 r62: [30..31]
 r63: [24..29]
 r64: [26..27]
 r65: [24..25]
 r66: [22..23]
 r67: [20..21]
 r68: [12..13]
 r69: [10..11]
 r70: [6..7]
 r71: [4..5]
 r72: [2..3]
 r73: [0..1]
 r74: [18..19]
 r75: [40..41]
 r76: [34..35]
 r77: [32..33]
 r78: [28..29]
 r79: [16..17]
 r80: [16..17]
 r81: [16..17]
 r82: [14..15]
 r83: [10..11]
 r84: [8..9]
 r85: [4..5]
 r87: [36..37]
	 Assigning to 87 (cl=GENERAL_REGS, orig=60, freq=3, tfirst=87, tfreq=3)...
	   Assign 0 to reload r87 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 28
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 56
changing reg in insn 60
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 36
changing reg in insn 39
changing reg in insn 37
changing reg in insn 40
changing reg in insn 38
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 42.


_add_nvp_inSector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={24d,23u} r1={12d,9u,1e} r2={5d,2u} r4={4d,2u} r5={5d,3u} r6={1d,23u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={11d,1u} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 223{150d,71u,2e} in 48{46 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:505 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])
        (reg:SI 4 si [ safe ])) mABM.c:505 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ safe ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 5 di)
        (const_int 4 [0x4])) mABM.c:508 89 {*movsi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:508 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [74])
        (reg:DI 0 ax)) mABM.c:508 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 st_nvp+0 S8 A64])
        (reg:DI 0 ax [74])) mABM.c:508 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(insn 11 10 66 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:510 89 {*movsi_internal}
     (nil))
(jump_insn 66 11 67 2 (set (pc)
        (label_ref 30)) mABM.c:510 650 {jump}
     (nil)
 -> 30)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 32)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 67 75 76 77 78
(code_label 32 67 14 3 203 "" [1 uses])
(note 14 32 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mABM.c:510 89 {*movsi_internal}
     (nil))
(insn 16 15 68 3 (set (reg:DI 0 ax [orig:59 D.7165 ] [59])
        (sign_extend:DI (reg:SI 0 ax [75]))) mABM.c:510 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [75])
        (nil)))
(insn 68 16 17 3 (set (reg:DI 0 ax [orig:60 D.7165 ] [60])
        (reg:DI 0 ax [orig:59 D.7165 ] [59])) mABM.c:510 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.7165 ] [59])
        (nil)))
(insn 17 68 69 3 (parallel [
            (set (reg:DI 0 ax [orig:60 D.7165 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:60 D.7165 ] [60])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:510 513 {*ashldi3_1}
     (nil))
(insn 69 17 18 3 (set (reg:DI 1 dx [orig:60 D.7165 ] [60])
        (reg:DI 0 ax [orig:60 D.7165 ] [60])) mABM.c:510 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.7165 ] [60])
        (nil)))
(insn 18 69 19 3 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 st_nvp+0 S8 A64])) mABM.c:510 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 2 cx [orig:61 D.7166 ] [61])
                (plus:DI (reg:DI 1 dx [orig:60 D.7165 ] [60])
                    (reg/f:DI 0 ax [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:510 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7165 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 st_nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.7165 ] [60]))
                (nil)))))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:510 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [orig:62 D.7167 ] [62])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [77])
                (const_int 32 [0x20])) [0 f_7(D)->pos+0 S8 A128])) mABM.c:510 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (nil)))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:63 D.7166 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.7167 ] [62]) [0 *_8+0 S8 A64])) mABM.c:510 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7167 ] [62])
        (nil)))
(insn 23 22 24 3 (set (reg:SI 1 dx [78])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mABM.c:510 89 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx [orig:64 D.7165 ] [64])
        (sign_extend:DI (reg:SI 1 dx [78]))) mABM.c:510 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [78])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 1 dx [orig:65 D.7165 ] [65])
                (ashift:DI (reg:DI 1 dx [orig:64 D.7165 ] [64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:510 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7165 ] [64])
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.7166 ] [66])
                (plus:DI (reg/f:DI 0 ax [orig:63 D.7166 ] [63])
                    (reg:DI 1 dx [orig:65 D.7165 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:510 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7165 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7166 ] [63])
            (nil))))
(insn 27 26 28 3 (set (reg:XF 0 ax [orig:67 D.7168 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.7166 ] [66]) [0 *_12+0 S16 A128])) mABM.c:510 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7166 ] [66])
        (nil)))
(insn 28 27 29 3 (set (mem:XF (reg/f:DI 2 cx [orig:61 D.7166 ] [61]) [0 *_6+0 S16 A128])
        (reg:XF 0 ax [orig:67 D.7168 ] [67])) mABM.c:510 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:67 D.7168 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:61 D.7166 ] [61])
            (nil))))
(insn 29 28 30 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:510 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 29 31 4 202 "" [1 uses])
(note 31 30 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:510 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) mABM.c:510 612 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 79 80 81 82 83 84 85
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:DI 1 dx [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 st_nvp+0 S8 A64])) mABM.c:511 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg:DI 2 cx [80])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:511 274 {*adddi_1}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:511 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 5 (set (reg:DI 1 dx)
        (reg:DI 1 dx [79])) mABM.c:511 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [79])
        (nil)))
(insn 40 39 41 5 (set (reg:DI 4 si)
        (reg:DI 2 cx [80])) mABM.c:511 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [80])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [81])) mABM.c:511 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [81])
        (nil)))
(call_insn 42 41 43 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add_nvp") [flags 0x41]  <function_decl 0x7f05a5963300 add_nvp>) [0 add_nvp S1 A8])
            (const_int 0 [0]))) mABM.c:511 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:512 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 5 (set (reg:SI 0 ax [orig:68 D.7169 ] [68])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 116 [0x74])) [0 f_7(D)->bound+4 S4 A32])) mABM.c:512 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 45 44 46 5 (parallel [
            (set (reg:SI 1 dx [orig:69 D.7169 ] [69])
                (plus:SI (reg:SI 0 ax [orig:68 D.7169 ] [68])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:512 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.7169 ] [68])
        (nil)))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:512 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [83])
                (const_int 116 [0x74])) [0 f_7(D)->bound+4 S4 A32])
        (reg:SI 1 dx [orig:69 D.7169 ] [69])) mABM.c:512 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [83])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:69 D.7169 ] [69])
            (nil))))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:513 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 5 (set (reg:SI 0 ax [orig:70 D.7169 ] [70])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [84])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:513 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [84])
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg:SI 1 dx [orig:71 D.7169 ] [71])
                (plus:SI (reg:SI 0 ax [orig:70 D.7169 ] [70])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:513 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.7169 ] [70])
        (nil)))
(insn 51 50 52 5 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:513 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [85])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])
        (reg:SI 1 dx [orig:71 D.7169 ] [71])) mABM.c:513 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:71 D.7169 ] [71])
            (nil))))
(insn 53 52 56 5 (set (reg:SI 0 ax [orig:72 D.7169 ] [72])
        (const_int 1 [0x1])) mABM.c:515 89 {*movsi_internal}
     (nil))
(insn 56 53 60 5 (set (reg:SI 0 ax [orig:73 <retval> ] [73])
        (reg:SI 0 ax [orig:72 D.7169 ] [72])) mABM.c:515 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.7169 ] [72])
        (nil)))
(insn 60 56 63 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:73 <retval> ] [73])) mABM.c:516 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 <retval> ] [73])
        (nil)))
(insn 63 60 0 5 (use (reg/i:SI 0 ax)) mABM.c:516 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _temp_angle_nvp (_temp_angle_nvp, funcdef_no=26, decl_uid=4340, cgraph_uid=26)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 88:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 91
changing reg in insn 93
changing reg in insn 13
changing reg in insn 18
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 28
changing reg in insn 20
changing reg in insn 24
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 27
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 39
changing reg in insn 46
changing reg in insn 50
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 73
changing reg in insn 51
changing reg in insn 55
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 68
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 69
changing reg in insn 61
changing reg in insn 66
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 83
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 96
changing reg in insn 99
changing reg in insn 99
changing reg in insn 103
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 71.


_temp_angle_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={27d,24u} r1={22d,19u} r2={11d,7u} r3={1d,1u} r4={10d,7u} r5={6d,3u} r6={1d,30u} r7={1d,13u} r8={7d,7u} r9={5d,2u} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={21d,2u} r18={3d} r19={3d} r20={1d,1u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 348{231d,116u,1e} in 80{77 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:518 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])
        (reg:DI 4 si [ tl ])) mABM.c:518 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ tl ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 safe+0 S4 A32])
        (reg:SI 1 dx [ safe ])) mABM.c:518 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ safe ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 112 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:524 89 {*movsi_internal}
     (nil))
(jump_insn 112 8 113 2 (set (pc)
        (label_ref 89)) mABM.c:524 650 {jump}
     (nil)
 -> 89)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 92)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 99 100 101 102 103 104
(code_label 92 113 11 3 210 "" [1 uses])
(note 11 92 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [orig:60 D.7171 ] [60])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 8 [0x8])) [0 f_4(D)->nvp+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 14 13 15 3 (set (reg:SI 1 dx [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 safe+0 S4 A32])) mABM.c:525 89 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 1 dx [orig:61 D.7172 ] [61])
        (sign_extend:DI (reg:SI 1 dx [100]))) mABM.c:525 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [100])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.7172 ] [62])
                (plus:DI (reg:DI 1 dx [orig:61 D.7172 ] [61])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7172 ] [61])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:63 D.7172 ] [63])
                (ashift:DI (reg:DI 1 dx [orig:62 D.7172 ] [62])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7172 ] [62])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7171 ] [64])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.7171 ] [60])
                    (reg:DI 1 dx [orig:63 D.7172 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.7172 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7171 ] [60])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 20 3 (set (reg/f:DI 1 dx [orig:65 D.7173 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.7171 ] [64]) [0 *_10+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7171 ] [64])
        (nil)))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [orig:66 D.7171 ] [66])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (set (reg:SI 2 cx [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:525 89 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 2 cx [orig:67 D.7174 ] [67])
        (sign_extend:DI (reg:SI 2 cx [101]))) mABM.c:525 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [101])
        (nil)))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 2 cx [orig:68 D.7174 ] [68])
                (ashift:DI (reg:DI 2 cx [orig:67 D.7174 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:67 D.7174 ] [67])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.7171 ] [69])
                (plus:DI (reg/f:DI 0 ax [orig:66 D.7171 ] [66])
                    (reg:DI 2 cx [orig:68 D.7174 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:68 D.7174 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7171 ] [66])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [orig:70 D.7173 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [orig:69 D.7171 ] [69]) [0 *_15+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7171 ] [69])
        (nil)))
(insn 26 25 27 3 (set (reg/f:DI 2 cx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 2 cx [orig:71 D.7175 ] [71])
                (plus:DI (reg/f:DI 2 cx [102])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [102])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                    (const_int 48 [0x30]))
                (nil)))))
(insn 28 27 29 3 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:65 D.7173 ] [65])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:65 D.7173 ] [65])
        (nil)))
(insn 29 28 30 3 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:70 D.7173 ] [70])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7173 ] [70])
        (nil)))
(insn 30 29 31 3 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:71 D.7175 ] [71])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:71 D.7175 ] [71])
        (nil)))
(call_insn 31 30 32 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_direction") [flags 0x41]  <function_decl 0x7f05a595e900 angle_direction>) [0 angle_direction S1 A8])
            (const_int 0 [0]))) mABM.c:525 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 32 31 33 3 (set (reg:XF 8 st [orig:72 D.7176 ] [72])
        (reg:XF 8 st)) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 33 32 34 3 (set (reg:XF 9 st(1) [103])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC26") [flags 0x2]) [0  S16 A128])) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 34 33 35 3 (set (reg:XF 8 st [orig:73 D.7176 ] [73])
        (minus:XF (reg:XF 9 st(1) [103])
            (reg:XF 8 st [orig:72 D.7176 ] [72]))) mABM.c:525 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [103])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.7176 ] [72])
            (nil))))
(insn 35 34 36 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:73 D.7176 ] [73])) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.7176 ] [73])
        (nil)))
(call_insn 36 35 37 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("deg") [flags 0x41]  <function_decl 0x7f05a595ec00 deg>) [0 deg S1 A8])
            (const_int 16 [0x10]))) mABM.c:525 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 37 36 38 3 (set (reg:XF 8 st [orig:74 D.7176 ] [74])
        (reg:XF 8 st)) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 38 37 39 3 (set (reg:XF 9 st(1) [104])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC27") [flags 0x2]) [0  S16 A128])) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.0e+1 [0x0.b4p+7])
        (nil)))
(insn 39 38 40 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:74 D.7176 ] [74])
            (reg:XF 9 st(1) [104]))) mABM.c:525 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [104])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.7176 ] [74])
            (nil))))
(jump_insn 40 39 44 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 114)
            (pc))) mABM.c:525 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 114)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 105 106 107 108 109 110
(note 44 40 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 4 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [orig:75 D.7173 ] [75])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 32 [0x20])) [0 tl_21(D)->temp_angle+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (nil)))
(insn 47 46 48 4 (set (reg:SI 1 dx [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:525 89 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:DI 1 dx [orig:76 D.7174 ] [76])
        (sign_extend:DI (reg:SI 1 dx [106]))) mABM.c:525 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [106])
        (nil)))
(insn 49 48 50 4 (parallel [
            (set (reg:DI 1 dx [orig:77 D.7174 ] [77])
                (ashift:DI (reg:DI 1 dx [orig:76 D.7174 ] [76])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.7174 ] [76])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 3 bx [orig:78 D.7173 ] [78])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.7173 ] [75])
                    (reg:DI 1 dx [orig:77 D.7174 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.7174 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7173 ] [75])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 51 50 52 4 (set (reg/f:DI 0 ax [orig:79 D.7171 ] [79])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 4 (set (reg:SI 1 dx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:525 89 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 1 dx [orig:80 D.7174 ] [80])
        (sign_extend:DI (reg:SI 1 dx [107]))) mABM.c:525 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [107])
        (nil)))
(insn 54 53 55 4 (parallel [
            (set (reg:DI 1 dx [orig:81 D.7174 ] [81])
                (ashift:DI (reg:DI 1 dx [orig:80 D.7174 ] [80])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.7174 ] [80])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 55 54 56 4 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.7171 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:79 D.7171 ] [79])
                    (reg:DI 1 dx [orig:81 D.7174 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.7174 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7171 ] [79])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 56 55 57 4 (set (reg/f:DI 1 dx [orig:83 D.7173 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 D.7171 ] [82]) [0 *_29+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7171 ] [82])
        (nil)))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [orig:84 D.7171 ] [84])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [108])
                (const_int 32 [0x20])) [0 f_4(D)->pos+0 S8 A128])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 59 58 60 4 (set (reg/f:DI 2 cx [orig:85 D.7173 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 D.7171 ] [84]) [0 *_31+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.7171 ] [84])
        (nil)))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [orig:86 D.7171 ] [86])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 8 [0x8])) [0 f_4(D)->nvp+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 62 61 63 4 (set (reg:SI 4 si [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 safe+0 S4 A32])) mABM.c:525 89 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:DI 4 si [orig:87 D.7174 ] [87])
        (sign_extend:DI (reg:SI 4 si [110]))) mABM.c:525 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [110])
        (nil)))
(insn 64 63 65 4 (parallel [
            (set (reg:DI 4 si [orig:88 D.7174 ] [88])
                (ashift:DI (reg:DI 4 si [orig:87 D.7174 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:87 D.7174 ] [87])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 4 si [orig:89 D.7172 ] [89])
                (plus:DI (reg:DI 4 si [orig:88 D.7174 ] [88])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:88 D.7174 ] [88])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 66 65 67 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.7171 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:86 D.7171 ] [86])
                    (reg:DI 4 si [orig:89 D.7172 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:525 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:89 D.7172 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7171 ] [86])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [orig:91 D.7173 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.7171 ] [90]) [0 *_37+0 S8 A64])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.7171 ] [90])
        (nil)))
(insn 68 67 69 4 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:83 D.7173 ] [83])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:83 D.7173 ] [83])
        (nil)))
(insn 69 68 70 4 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:85 D.7173 ] [85])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:85 D.7173 ] [85])
        (nil)))
(insn 70 69 71 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.7173 ] [91])) mABM.c:525 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7173 ] [91])
        (nil)))
(call_insn 71 70 72 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_direction") [flags 0x41]  <function_decl 0x7f05a595e900 angle_direction>) [0 angle_direction S1 A8])
            (const_int 0 [0]))) mABM.c:525 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 72 71 73 4 (set (reg:XF 8 st [orig:92 D.7176 ] [92])
        (reg:XF 8 st)) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 73 72 115 4 (set (mem:XF (reg/f:DI 3 bx [orig:78 D.7173 ] [78]) [0 *_25+0 S16 A128])
        (reg:XF 8 st [orig:92 D.7176 ] [92])) mABM.c:525 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7176 ] [92])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:78 D.7173 ] [78])
            (nil))))
(jump_insn 115 73 116 4 (set (pc)
        (label_ref 86)) 650 {jump}
     (nil)
 -> 86)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 116 115 114)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 111 112 113
(code_label 114 116 77 5 213 "" [1 uses])
(note 77 114 78 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 5 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:526 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 5 (set (reg/f:DI 0 ax [orig:93 D.7173 ] [93])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [111])
                (const_int 32 [0x20])) [0 tl_21(D)->temp_angle+0 S8 A64])) mABM.c:526 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (nil)))
(insn 80 79 81 5 (set (reg:SI 1 dx [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:526 89 {*movsi_internal}
     (nil))
(insn 81 80 82 5 (set (reg:DI 1 dx [orig:94 D.7174 ] [94])
        (sign_extend:DI (reg:SI 1 dx [112]))) mABM.c:526 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [112])
        (nil)))
(insn 82 81 83 5 (parallel [
            (set (reg:DI 1 dx [orig:95 D.7174 ] [95])
                (ashift:DI (reg:DI 1 dx [orig:94 D.7174 ] [94])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:526 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:94 D.7174 ] [94])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 83 82 84 5 (parallel [
            (set (reg/f:DI 2 cx [orig:96 D.7173 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:93 D.7173 ] [93])
                    (reg:DI 1 dx [orig:95 D.7174 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:526 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7174 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.7173 ] [93])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 84 83 85 5 (set (reg:XF 0 ax [113])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC26") [flags 0x2]) [0  S16 A128])) mABM.c:526 131 {*movxf_internal_rex64}
     (nil))
(insn 85 84 86 5 (set (mem:XF (reg/f:DI 2 cx [orig:96 D.7173 ] [96]) [0 *_43+0 S16 A128])
        (reg:XF 0 ax [113])) mABM.c:526 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [113])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:96 D.7173 ] [96])
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 86 85 87 6 209 "" [1 uses])
(note 87 86 88 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:524 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 89 88 90 7 206 "" [1 uses])
(note 90 89 91 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 93 7 (set (reg:SI 0 ax [orig:59 D.7170 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:524 89 {*movsi_internal}
     (nil))
(insn 93 91 94 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.7170 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mABM.c:524 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7170 ] [59])
        (nil)))
(jump_insn 94 93 95 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) mABM.c:524 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 92)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 97 98
(note 95 94 96 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 99 8 (set (reg:SI 0 ax [orig:97 D.7170 ] [97])
        (const_int 1 [0x1])) mABM.c:529 89 {*movsi_internal}
     (nil))
(insn 99 96 103 8 (set (reg:SI 0 ax [orig:98 <retval> ] [98])
        (reg:SI 0 ax [orig:97 D.7170 ] [97])) mABM.c:529 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:97 D.7170 ] [97])
        (nil)))
(insn 103 99 106 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:98 <retval> ] [98])) mABM.c:530 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:98 <retval> ] [98])
        (nil)))
(insn 106 103 0 8 (use (reg/i:SI 0 ax)) mABM.c:530 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _select_candidate_tmp_nvp_shortpath (_select_candidate_tmp_nvp_shortpath, funcdef_no=27, decl_uid=4350, cgraph_uid=27)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=384, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=352, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 15:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=134 from oldreg=111, assigning class DIREG to r134
      Creating newreg=135 from oldreg=113, assigning class CREG to r135
   15: {r135:DI=0;r134:DI=r135:DI<<0x3+r134:DI;r112:DI=r135:DI<<0x3+r112:DI;[r134:DI]=[r112:DI];use r135:DI;}
      REG_UNUSED r113:DI
      REG_UNUSED r112:DI
      REG_UNUSED r111:DI
    Inserting insn reload before:
  148: r134:DI=r111:DI
  149: r135:DI=r113:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 91:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=136 from oldreg=93, assigning class FLOAT_REGS to r136
   91: r136:XF=r136:XF+r92:XF
      REG_DEAD r92:XF
      REG_DEAD r80:XF
    Inserting insn reload before:
  150: r136:XF=r80:XF
    Inserting insn reload after:
  151: r93:XF=r136:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 111:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=137 from oldreg=80, assigning class FLOAT_REGS to inheritance r137
    Original reg change 80->137 (bb5):
   72: r137:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  152: r80:XF=r137:XF

    Inheritance reuse change 80->137 (bb5):
  150: r136:XF=r137:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   152: r80:XF=r137:XF
deleting insn with uid = 152.
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 137: point = 0
   Insn 134: point = 0
   Insn 130: point = 1
   Insn 127: point = 3
   Insn 126: point = 4
   Insn 125: point = 4
   Insn 124: point = 5
   Insn 123: point = 5
   Insn 122: point = 6
   Insn 121: point = 8
   Insn 120: point = 9
   Insn 119: point = 11
  BB 7
   Insn 117: point = 12
   Insn 116: point = 12
   Insn 114: point = 13
  BB 2
   Insn 146: point = 14
   Insn 22: point = 14
   Insn 21: point = 15
   Insn 20: point = 16
   Insn 19: point = 16
   Insn 18: point = 16
   Insn 17: point = 17
   Insn 16: point = 18
   Insn 15: point = 19
   Insn 149: point = 20
	Hard reg 0 is preferable by r135 with profit 1
   Insn 148: point = 22
	Hard reg 1 is preferable by r134 with profit 1
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 10: point = 28
   Insn 9: point = 29
   Insn 8: point = 31
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 6
   Insn 111: point = 32
  BB 5
   Insn 108: point = 32
   Insn 107: point = 33
   Insn 106: point = 34
   Insn 105: point = 36
   Insn 104: point = 38
   Insn 103: point = 39
   Insn 102: point = 40
   Insn 101: point = 41
   Insn 100: point = 43
   Insn 99: point = 45
   Insn 98: point = 47
   Insn 97: point = 49
   Insn 96: point = 51
   Insn 95: point = 53
   Insn 94: point = 54
   Insn 93: point = 56
   Insn 92: point = 57
   Insn 151: point = 58
	Hard reg 8 is preferable by r136 with profit 1
   Insn 91: point = 60
   Insn 150: point = 61
	   Creating copy r136<-r137@1
   Insn 90: point = 63
   Insn 89: point = 64
   Insn 88: point = 64
   Insn 87: point = 65
   Insn 86: point = 66
   Insn 85: point = 68
   Insn 84: point = 70
   Insn 83: point = 72
   Insn 82: point = 74
   Insn 81: point = 75
   Insn 80: point = 76
   Insn 79: point = 78
   Insn 78: point = 80
   Insn 77: point = 82
   Insn 76: point = 84
   Insn 75: point = 86
   Insn 74: point = 87
   Insn 73: point = 89
   Insn 72: point = 90
	Hard reg 8 is preferable by r137 with profit 1
   Insn 71: point = 91
   Insn 70: point = 91
   Insn 69: point = 92
   Insn 68: point = 93
   Insn 67: point = 95
   Insn 66: point = 96
   Insn 65: point = 98
   Insn 64: point = 100
   Insn 63: point = 102
   Insn 62: point = 104
   Insn 61: point = 105
   Insn 60: point = 106
   Insn 59: point = 108
   Insn 58: point = 110
   Insn 57: point = 112
   Insn 56: point = 114
   Insn 55: point = 116
   Insn 54: point = 117
   Insn 53: point = 119
  BB 4
   Insn 48: point = 120
   Insn 47: point = 120
   Insn 46: point = 121
   Insn 45: point = 122
   Insn 44: point = 123
   Insn 43: point = 123
   Insn 42: point = 124
   Insn 41: point = 125
   Insn 40: point = 126
  BB 3
   Insn 35: point = 127
   Insn 34: point = 127
   Insn 33: point = 128
   Insn 32: point = 129
   Insn 31: point = 131
   Insn 30: point = 133
   Insn 29: point = 135
   Insn 28: point = 137
   Insn 27: point = 138
   Insn 26: point = 140
 r59: [18..29]
 r60: [12..13]
 r61: [132..138]
 r62: [134..135]
 r63: [132..133]
 r64: [130..131]
 r65: [127..129]
 r66: [127..128]
 r67: [120..122]
 r68: [109..117]
 r69: [113..114]
 r70: [111..112]
 r71: [109..110]
 r72: [107..108]
 r73: [57..106]
 r74: [99..105]
 r75: [101..102]
 r76: [99..100]
 r77: [97..98]
 r78: [92..96]
 r79: [91..93]
 r81: [79..87]
 r82: [83..84]
 r83: [81..82]
 r84: [79..80]
 r85: [77..78]
 r86: [65..76]
 r87: [69..75]
 r88: [71..72]
 r89: [69..70]
 r90: [67..68]
 r91: [64..66]
 r92: [60..63]
 r93: [57..58]
 r94: [46..54]
 r95: [50..51]
 r96: [48..49]
 r97: [46..47]
 r98: [44..45]
 r99: [42..43]
 r100: [39..41]
 r101: [39..40]
 r102: [35..36]
 r103: [32..34]
 r104: [5..9]
 r105: [4..6]
 r106: [2..3]
 r107: [0..1]
 r108: [30..31]
 r109: [17..28]
 r110: [16..27]
 r111: [23..26]
 r112: [19..25]
 r113: [21..24]
 r114: [14..15]
 r115: [139..140]
 r116: [136..137]
 r117: [125..126]
 r118: [123..124]
 r119: [120..121]
 r120: [118..119]
 r121: [115..116]
 r122: [103..104]
 r123: [94..95]
 r124: [88..89]
 r125: [85..86]
 r126: [73..74]
 r127: [55..56]
 r128: [52..53]
 r129: [37..38]
 r130: [32..33]
 r131: [10..11]
 r132: [7..8]
 r134: [19..22]
 r135: [19..20]
 r136: [59..61]
 r137: [62..90]
Compressing live ranges: from 141 to 114 - 80%
Ranges after the compression:
 r59: [14..19]
 r60: [10..11]
 r61: [106..111]
 r62: [108..109]
 r63: [106..107]
 r64: [104..105]
 r65: [102..103]
 r66: [102..103]
 r67: [96..97]
 r68: [86..93]
 r69: [90..91]
 r70: [88..89]
 r71: [86..87]
 r72: [84..85]
 r73: [44..83]
 r74: [78..83]
 r75: [80..81]
 r76: [78..79]
 r77: [76..77]
 r78: [72..75]
 r79: [72..73]
 r81: [62..69]
 r82: [66..67]
 r83: [64..65]
 r84: [62..63]
 r85: [60..61]
 r86: [50..59]
 r87: [54..59]
 r88: [56..57]
 r89: [54..55]
 r90: [52..53]
 r91: [50..51]
 r92: [46..49]
 r93: [44..45]
 r94: [34..41]
 r95: [38..39]
 r96: [36..37]
 r97: [34..35]
 r98: [32..33]
 r99: [30..31]
 r100: [28..29]
 r101: [28..29]
 r102: [24..25]
 r103: [22..23]
 r104: [4..7]
 r105: [4..5]
 r106: [2..3]
 r107: [0..1]
 r108: [20..21]
 r109: [14..19]
 r110: [14..19]
 r111: [18..19]
 r112: [14..19]
 r113: [16..19]
 r114: [12..13]
 r115: [112..113]
 r116: [110..111]
 r117: [100..101]
 r118: [98..99]
 r119: [96..97]
 r120: [94..95]
 r121: [92..93]
 r122: [82..83]
 r123: [74..75]
 r124: [70..71]
 r125: [68..69]
 r126: [58..59]
 r127: [42..43]
 r128: [40..41]
 r129: [26..27]
 r130: [22..23]
 r131: [8..9]
 r132: [6..7]
 r134: [14..17]
 r135: [14..15]
 r136: [46..47]
 r137: [48..71]
	 Assigning to 134 (cl=DIREG, orig=111, freq=2, tfirst=134, tfreq=2)...
	   Assign 5 to reload r134 (freq=2)
	 Assigning to 135 (cl=CREG, orig=113, freq=2, tfirst=135, tfreq=2)...
	   Assign 2 to reload r135 (freq=2)
	 Assigning to 136 (cl=FLOAT_REGS, orig=93, freq=3, tfirst=136, tfreq=3)...
	   Assign 10 to reload r136 (freq=3)
	Hard reg 8 is preferable by r137 with profit 1
	Hard reg 10 is preferable by r137 with profit 1
	 Assigning to 137 (cl=FLOAT_REGS, orig=80, freq=2, tfirst=136, tfreq=3)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  150: r136:XF=r80:XF
      REG_DEAD r80:XF
   Insn after restoring regs:
   72: r80:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 8
   Insn 137: point = 0
   Insn 134: point = 0
   Insn 130: point = 1
   Insn 127: point = 3
   Insn 126: point = 4
   Insn 125: point = 4
   Insn 124: point = 5
   Insn 123: point = 5
   Insn 122: point = 6
   Insn 121: point = 8
   Insn 120: point = 9
   Insn 119: point = 11
  BB 7
   Insn 117: point = 12
   Insn 116: point = 12
   Insn 114: point = 13
  BB 2
   Insn 146: point = 14
   Insn 22: point = 14
   Insn 21: point = 15
   Insn 20: point = 16
   Insn 19: point = 16
   Insn 18: point = 16
   Insn 17: point = 17
   Insn 16: point = 18
   Insn 15: point = 19
   Insn 149: point = 20
   Insn 148: point = 22
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 10: point = 28
   Insn 9: point = 29
   Insn 8: point = 31
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 6
   Insn 111: point = 32
  BB 5
   Insn 108: point = 32
   Insn 107: point = 33
   Insn 106: point = 34
   Insn 105: point = 36
   Insn 104: point = 38
   Insn 103: point = 39
   Insn 102: point = 40
   Insn 101: point = 41
   Insn 100: point = 43
   Insn 99: point = 45
   Insn 98: point = 47
   Insn 97: point = 49
   Insn 96: point = 51
   Insn 95: point = 53
   Insn 94: point = 54
   Insn 93: point = 56
   Insn 92: point = 57
   Insn 151: point = 58
   Insn 91: point = 60
   Insn 150: point = 61
   Insn 90: point = 63
   Insn 89: point = 64
   Insn 88: point = 64
   Insn 87: point = 65
   Insn 86: point = 66
   Insn 85: point = 68
   Insn 84: point = 70
   Insn 83: point = 72
   Insn 82: point = 74
   Insn 81: point = 75
   Insn 80: point = 76
   Insn 79: point = 78
   Insn 78: point = 80
   Insn 77: point = 82
   Insn 76: point = 84
   Insn 75: point = 86
   Insn 74: point = 87
   Insn 73: point = 89
   Insn 72: point = 90
   Insn 71: point = 91
   Insn 70: point = 91
   Insn 69: point = 92
   Insn 68: point = 93
   Insn 67: point = 95
   Insn 66: point = 96
   Insn 65: point = 98
   Insn 64: point = 100
   Insn 63: point = 102
   Insn 62: point = 104
   Insn 61: point = 105
   Insn 60: point = 106
   Insn 59: point = 108
   Insn 58: point = 110
   Insn 57: point = 112
   Insn 56: point = 114
   Insn 55: point = 116
   Insn 54: point = 117
   Insn 53: point = 119
  BB 4
   Insn 48: point = 120
   Insn 47: point = 120
   Insn 46: point = 121
   Insn 45: point = 122
   Insn 44: point = 123
   Insn 43: point = 123
   Insn 42: point = 124
   Insn 41: point = 125
   Insn 40: point = 126
  BB 3
   Insn 35: point = 127
   Insn 34: point = 127
   Insn 33: point = 128
   Insn 32: point = 129
   Insn 31: point = 131
   Insn 30: point = 133
   Insn 29: point = 135
   Insn 28: point = 137
   Insn 27: point = 138
   Insn 26: point = 140
 r80: [62..90]
Compressing live ranges: from 141 to 2 - 1%
Ranges after the compression:
 r80: [0..1]
  Slot 0 regnos (width = 16):	 80
Changing spilled pseudos to memory in insn #72
Changing spilled pseudos to memory in insn #150

********** Local #3: **********

Reusing alternative 0 for insn #150
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #72
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=400, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=368, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 9
changing reg in insn 16
changing reg in insn 114
changing reg in insn 116
changing reg in insn 27
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 45
changing reg in insn 47
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 92
changing reg in insn 61
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 69
changing reg in insn 68
changing reg in insn 70
changing reg in insn 74
changing reg in insn 79
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 87
changing reg in insn 81
changing reg in insn 85
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 120
changing reg in insn 123
changing reg in insn 122
changing reg in insn 125
changing reg in insn 127
changing reg in insn 130
changing reg in insn 130
changing reg in insn 134
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 11
changing reg in insn 18
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 82
changing reg in insn 83
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 126.


_select_candidate_tmp_nvp_shortpath

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={47d,42u} r1={28d,23u} r2={11d,6u} r3={1d,1u} r4={12d,7u} r5={12d,7u} r6={1d,42u} r7={1d,19u} r8={10d,8u} r9={7d,2u} r10={7d,2u} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={25d,3u} r18={5d} r19={5d} r20={1d,1u,1e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,1u} r38={7d,1u} r39={6d,1u} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 518{351d,166u,1e} in 114{109 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 108 109 110 111 112 113 114
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:532 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])
        (reg:DI 4 si [ tl ])) mABM.c:532 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ tl ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 safe+0 S4 A32])
        (reg:SI 1 dx [ safe ])) mABM.c:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ safe ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:535 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 39 r10 [orig:59 D.7177 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [108])
                (const_int 44 [0x2c])) [0 f_2(D)->st_indx+0 S4 A32])) mABM.c:535 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 38 r9 [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:535 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 37 r8 [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:535 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx [111])
        (reg/f:DI 7 sp)) mABM.c:535 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si [112])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:535 267 {*leadi}
     (nil))
(insn 14 13 148 2 (set (reg:DI 0 ax [113])
        (const_int 38 [0x26])) mABM.c:535 87 {*movdi_internal_rex64}
     (nil))
(insn 148 14 149 2 (set (reg:DI 5 di [111])
        (reg:DI 1 dx [111])) mABM.c:535 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [111])
        (nil)))
(insn 149 148 15 2 (set (reg:DI 2 cx [113])
        (reg:DI 0 ax [113])) mABM.c:535 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 15 149 16 2 (parallel [
            (set (reg:DI 2 cx [113])
                (const_int 0 [0]))
            (set (reg:DI 5 di [111])
                (plus:DI (ashift:DI (reg:DI 2 cx [113])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [111])))
            (set (reg:DI 4 si [112])
                (plus:DI (ashift:DI (reg:DI 2 cx [113])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [112])))
            (set (mem:BLK (reg:DI 5 di [111]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [112]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [113]))
        ]) mABM.c:535 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [113])
        (expr_list:REG_UNUSED (reg:DI 5 di [111])
            (expr_list:REG_UNUSED (reg:DI 4 si [112])
                (nil)))))
(insn 16 15 17 2 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:59 D.7177 ] [59])) mABM.c:535 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:59 D.7177 ] [59])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg:DI 38 r9 [109])) mABM.c:535 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [109])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [110])) mABM.c:535 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [110])
        (nil)))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_temp_angle_nvp") [flags 0x3]  <function_decl 0x7f05a571fa00 _temp_angle_nvp>) [0 _temp_angle_nvp S1 A8])
            (const_int 304 [0x130]))) mABM.c:535 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                    (nil))))))
(insn 20 19 21 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:536 89 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:536 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 146 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])
        (const_int 0 [0])) mABM.c:536 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (nil)))
(jump_insn 146 22 147 2 (set (pc)
        (label_ref 112)) mABM.c:536 650 {jump}
     (nil)
 -> 112)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 115)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64 65 66 115 116
(code_label 115 147 25 3 219 "" [1 uses])
(note 25 115 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:536 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [orig:61 D.7178 ] [61])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [115])
                (const_int 32 [0x20])) [0 tl_4(D)->temp_angle+0 S8 A64])) mABM.c:536 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (nil)))
(insn 28 27 29 3 (set (reg:SI 1 dx [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:536 89 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:DI 1 dx [orig:62 D.7179 ] [62])
        (sign_extend:DI (reg:SI 1 dx [116]))) mABM.c:536 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [116])
        (nil)))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 1 dx [orig:63 D.7179 ] [63])
                (ashift:DI (reg:DI 1 dx [orig:62 D.7179 ] [62])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:536 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7179 ] [62])
        (nil)))
(insn 31 30 32 3 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7178 ] [64])
                (plus:DI (reg/f:DI 0 ax [orig:61 D.7178 ] [61])
                    (reg:DI 1 dx [orig:63 D.7179 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:536 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.7179 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7178 ] [61])
            (nil))))
(insn 32 31 33 3 (set (reg:XF 8 st [orig:65 D.7180 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.7178 ] [64]) [0 *_10+0 S16 A128])) mABM.c:536 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7178 ] [64])
        (nil)))
(insn 33 32 34 3 (set (reg:XF 9 st(1) [orig:66 D.7180 ] [66])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 conf.max_ang+0 S16 A128])) mABM.c:536 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:66 D.7180 ] [66])
            (reg:XF 8 st [orig:65 D.7180 ] [65]))) mABM.c:536 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:66 D.7180 ] [66])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.7180 ] [65])
            (nil))))
(jump_insn 35 34 39 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) mABM.c:536 612 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 117 118 119
(note 39 35 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:XF 0 ax [117])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC28") [flags 0x2]) [0  S16 A128])) mABM.c:536 131 {*movxf_internal_rex64}
     (nil))
(insn 41 40 42 4 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [117])) mABM.c:536 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [117])
        (nil)))
(insn 42 41 43 4 (set (reg:XF 0 ax [118])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:536 131 {*movxf_internal_rex64}
     (nil))
(insn 43 42 44 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [118])) mABM.c:536 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [118])
        (nil)))
(call_insn 44 43 45 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:536 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 45 44 46 4 (set (reg:XF 8 st [orig:67 D.7180 ] [67])
        (reg:XF 8 st)) mABM.c:536 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 46 45 47 4 (set (reg:XF 9 st(1) [119])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC29") [flags 0x2]) [0  S16 A128])) mABM.c:536 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 5.0e+1 [0x0.c8p+6])
        (nil)))
(insn 47 46 48 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [119])
            (reg:XF 8 st [orig:67 D.7180 ] [67]))) mABM.c:536 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [119])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.7180 ] [67])
            (nil))))
(jump_insn 48 47 52 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) mABM.c:536 612 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 120 121 122 123 124 125 126 127 128 129 130
(note 52 48 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 5 (set (reg/f:DI 1 dx [orig:68 D.7181 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [120])
                (const_int 16 [0x10])) [0 tl_4(D)->sel_nvp_index+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [120])
        (nil)))
(insn 55 54 56 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 5 (set (reg:SI 0 ax [orig:69 D.7177 ] [69])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])) mABM.c:537 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (nil)))
(insn 57 56 58 5 (set (reg:DI 0 ax [orig:70 D.7179 ] [70])
        (sign_extend:DI (reg:SI 0 ax [orig:69 D.7177 ] [69]))) mABM.c:537 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7177 ] [69])
        (nil)))
(insn 58 57 59 5 (parallel [
            (set (reg:DI 0 ax [orig:71 D.7179 ] [71])
                (ashift:DI (reg:DI 0 ax [orig:70 D.7179 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.7179 ] [70])
        (nil)))
(insn 59 58 60 5 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.7181 ] [72])
                (plus:DI (reg:DI 0 ax [orig:71 D.7179 ] [71])
                    (reg/f:DI 1 dx [orig:68 D.7181 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.7179 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.7181 ] [68])
            (nil))))
(insn 60 59 61 5 (set (reg/f:DI 3 bx [orig:73 D.7178 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [orig:72 D.7181 ] [72]) [0 *_18+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7181 ] [72])
        (nil)))
(insn 61 60 62 5 (set (reg/f:DI 0 ax [orig:74 D.7181 ] [74])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 5 (set (reg:SI 1 dx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:537 89 {*movsi_internal}
     (nil))
(insn 63 62 64 5 (set (reg:DI 1 dx [orig:75 D.7179 ] [75])
        (sign_extend:DI (reg:SI 1 dx [122]))) mABM.c:537 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [122])
        (nil)))
(insn 64 63 65 5 (parallel [
            (set (reg:DI 1 dx [orig:76 D.7179 ] [76])
                (ashift:DI (reg:DI 1 dx [orig:75 D.7179 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.7179 ] [75])
        (nil)))
(insn 65 64 66 5 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.7181 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:74 D.7181 ] [74])
                    (reg:DI 1 dx [orig:76 D.7179 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.7179 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.7181 ] [74])
            (nil))))
(insn 66 65 67 5 (set (reg/f:DI 0 ax [orig:78 D.7178 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.7181 ] [77]) [0 *_23+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.7181 ] [77])
        (nil)))
(insn 67 66 68 5 (set (reg/f:DI 1 dx [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 1 dx [orig:79 D.7182 ] [79])
                (plus:DI (reg/f:DI 1 dx [123])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [123])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 69 68 70 5 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:78 D.7178 ] [78])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.7178 ] [78])
        (nil)))
(insn 70 69 71 5 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:79 D.7182 ] [79])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:79 D.7182 ] [79])
        (nil)))
(call_insn 71 70 72 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:537 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 72 71 152 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])
        (reg:XF 8 st)) mABM.c:537 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 152 72 73 5 NOTE_INSN_DELETED)
(insn 73 152 74 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 5 (set (reg/f:DI 0 ax [orig:81 D.7181 ] [81])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 8 [0x8])) [0 f_2(D)->nvp+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (nil)))
(insn 75 74 76 5 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 safe+0 S4 A32])) mABM.c:537 89 {*movsi_internal}
     (nil))
(insn 76 75 77 5 (set (reg:DI 1 dx [orig:82 D.7183 ] [82])
        (sign_extend:DI (reg:SI 1 dx [125]))) mABM.c:537 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [125])
        (nil)))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 1 dx [orig:83 D.7183 ] [83])
                (plus:DI (reg:DI 1 dx [orig:82 D.7183 ] [82])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.7183 ] [82])
        (nil)))
(insn 78 77 79 5 (parallel [
            (set (reg:DI 1 dx [orig:84 D.7183 ] [84])
                (ashift:DI (reg:DI 1 dx [orig:83 D.7183 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7183 ] [83])
        (nil)))
(insn 79 78 80 5 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.7181 ] [85])
                (plus:DI (reg/f:DI 0 ax [orig:81 D.7181 ] [81])
                    (reg:DI 1 dx [orig:84 D.7183 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7183 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7181 ] [81])
            (nil))))
(insn 80 79 81 5 (set (reg/f:DI 1 dx [orig:86 D.7178 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.7181 ] [85]) [0 *_32+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7181 ] [85])
        (nil)))
(insn 81 80 82 5 (set (reg/f:DI 0 ax [orig:87 D.7181 ] [87])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 5 (set (reg:SI 2 cx [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:537 89 {*movsi_internal}
     (nil))
(insn 83 82 84 5 (set (reg:DI 2 cx [orig:88 D.7179 ] [88])
        (sign_extend:DI (reg:SI 2 cx [126]))) mABM.c:537 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [126])
        (nil)))
(insn 84 83 85 5 (parallel [
            (set (reg:DI 2 cx [orig:89 D.7179 ] [89])
                (ashift:DI (reg:DI 2 cx [orig:88 D.7179 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:88 D.7179 ] [88])
        (nil)))
(insn 85 84 86 5 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.7181 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:87 D.7181 ] [87])
                    (reg:DI 2 cx [orig:89 D.7179 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:537 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:89 D.7179 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.7181 ] [87])
            (nil))))
(insn 86 85 87 5 (set (reg/f:DI 0 ax [orig:91 D.7178 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.7181 ] [90]) [0 *_37+0 S8 A64])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.7181 ] [90])
        (nil)))
(insn 87 86 88 5 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:86 D.7178 ] [86])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:86 D.7178 ] [86])
        (nil)))
(insn 88 87 89 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.7178 ] [91])) mABM.c:537 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7178 ] [91])
        (nil)))
(call_insn 89 88 90 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:537 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 90 89 150 5 (set (reg:XF 8 st [orig:92 D.7180 ] [92])
        (reg:XF 8 st)) mABM.c:537 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 150 90 91 5 (set (reg:XF 10 st(2) [orig:93 D.7180 ] [93])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])) mABM.c:537 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 80 [ D.7180 ])
        (nil)))
(insn 91 150 151 5 (set (reg:XF 10 st(2) [orig:93 D.7180 ] [93])
        (plus:XF (reg:XF 10 st(2) [orig:93 D.7180 ] [93])
            (reg:XF 8 st [orig:92 D.7180 ] [92]))) mABM.c:537 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7180 ] [92])
        (nil)))
(insn 151 91 92 5 (set (reg:XF 8 st [orig:93 D.7180 ] [93])
        (reg:XF 10 st(2) [orig:93 D.7180 ] [93])) mABM.c:537 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:93 D.7180 ] [93])
        (nil)))
(insn 92 151 93 5 (set (mem:XF (reg/f:DI 3 bx [orig:73 D.7178 ] [73]) [0 *_19+0 S16 A128])
        (reg:XF 8 st [orig:93 D.7180 ] [93])) mABM.c:537 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:93 D.7180 ] [93])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:73 D.7178 ] [73])
            (nil))))
(insn 93 92 94 5 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:538 87 {*movdi_internal_rex64}
     (nil))
(insn 94 93 95 5 (set (reg/f:DI 1 dx [orig:94 D.7181 ] [94])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [127])
                (const_int 16 [0x10])) [0 tl_4(D)->sel_nvp_index+0 S8 A64])) mABM.c:538 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [127])
        (nil)))
(insn 95 94 96 5 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:538 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 5 (set (reg:SI 0 ax [orig:95 D.7177 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])) mABM.c:538 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [128])
        (nil)))
(insn 97 96 98 5 (set (reg:DI 0 ax [orig:96 D.7179 ] [96])
        (sign_extend:DI (reg:SI 0 ax [orig:95 D.7177 ] [95]))) mABM.c:538 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:95 D.7177 ] [95])
        (nil)))
(insn 98 97 99 5 (parallel [
            (set (reg:DI 0 ax [orig:97 D.7179 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.7179 ] [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:538 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:96 D.7179 ] [96])
        (nil)))
(insn 99 98 100 5 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.7181 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 D.7179 ] [97])
                    (reg/f:DI 1 dx [orig:94 D.7181 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:538 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.7179 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:94 D.7181 ] [94])
            (nil))))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [orig:99 D.7178 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [orig:98 D.7181 ] [98]) [0 *_45+0 S8 A64])) mABM.c:538 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.7181 ] [98])
        (nil)))
(insn 101 100 102 5 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.7178 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:99 D.7178 ] [99])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:538 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.7178 ] [99])
        (nil)))
(insn 102 101 103 5 (set (reg:XF 8 st [orig:101 D.7180 ] [101])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mABM.c:538 256 {*floatsixf2_i387}
     (nil))
(insn 103 102 104 5 (set (mem:XF (reg/f:DI 0 ax [orig:100 D.7178 ] [100]) [0 *_47+0 S16 A128])
        (reg:XF 8 st [orig:101 D.7180 ] [101])) mABM.c:538 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:101 D.7180 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.7178 ] [100])
            (nil))))
(insn 104 103 105 5 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:539 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 5 (set (reg:SI 0 ax [orig:102 D.7177 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])) mABM.c:539 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [129])
        (nil)))
(insn 106 105 107 5 (parallel [
            (set (reg:SI 1 dx [orig:103 D.7177 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.7177 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:539 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:102 D.7177 ] [102])
        (nil)))
(insn 107 106 108 5 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:539 87 {*movdi_internal_rex64}
     (nil))
(insn 108 107 109 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])
        (reg:SI 1 dx [orig:103 D.7177 ] [103])) mABM.c:539 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [130])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:103 D.7177 ] [103])
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              3
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 109 108 110 6 216 "" [2 uses])
(note 110 109 111 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:536 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60
(code_label 112 111 113 7 215 "" [1 uses])
(note 113 112 114 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 116 7 (set (reg:SI 0 ax [orig:60 D.7177 ] [60])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:536 89 {*movsi_internal}
     (nil))
(insn 116 114 117 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:60 D.7177 ] [60])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mABM.c:536 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.7177 ] [60])
        (nil)))
(jump_insn 117 116 118 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) mABM.c:536 612 {*jcc_1}
     (nil)
 -> 115)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 104 105 106 107 131 132
(note 118 117 119 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 8 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:542 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 8 (set (reg:SI 1 dx [orig:104 D.7177 ] [104])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [131])
                (const_int 24 [0x18])) [0 tl_4(D)->n_sel_nvp+0 S4 A64])) mABM.c:542 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [131])
        (nil)))
(insn 121 120 122 8 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:542 87 {*movdi_internal_rex64}
     (nil))
(insn 122 121 123 8 (set (reg/f:DI 0 ax [orig:105 D.7181 ] [105])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 16 [0x10])) [0 tl_4(D)->sel_nvp_index+0 S8 A64])) mABM.c:542 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [132])
        (nil)))
(insn 123 122 124 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:104 D.7177 ] [104])) mABM.c:542 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:104 D.7177 ] [104])
        (nil)))
(insn 124 123 125 8 (set (reg:SI 4 si)
        (const_int 0 [0])) mABM.c:542 89 {*movsi_internal}
     (nil))
(insn 125 124 126 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.7181 ] [105])) mABM.c:542 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:105 D.7181 ] [105])
        (nil)))
(call_insn 126 125 127 8 (call (mem:QI (symbol_ref:DI ("q_sort") [flags 0x41]  <function_decl 0x7f05a5959c00 q_sort>) [0 q_sort S1 A8])
        (const_int 0 [0])) mABM.c:542 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 127 126 130 8 (set (reg:SI 0 ax [orig:106 D.7177 ] [106])
        (const_int 1 [0x1])) mABM.c:544 89 {*movsi_internal}
     (nil))
(insn 130 127 134 8 (set (reg:SI 0 ax [orig:107 <retval> ] [107])
        (reg:SI 0 ax [orig:106 D.7177 ] [106])) mABM.c:544 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:106 D.7177 ] [106])
        (nil)))
(insn 134 130 137 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:107 <retval> ] [107])) mABM.c:545 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:107 <retval> ] [107])
        (nil)))
(insn 137 134 0 8 (use (reg/i:SI 0 ax)) mABM.c:545 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _select_candidate_tmp_nvp (_select_candidate_tmp_nvp, funcdef_no=28, decl_uid=4360, cgraph_uid=28)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=352, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 14:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=111 from oldreg=94, assigning class DIREG to r111
      Creating newreg=112 from oldreg=96, assigning class CREG to r112
   14: {r112:DI=0;r111:DI=r112:DI<<0x3+r111:DI;r95:DI=r112:DI<<0x3+r95:DI;[r111:DI]=[r95:DI];use r112:DI;}
      REG_UNUSED r96:DI
      REG_UNUSED r95:DI
      REG_UNUSED r94:DI
    Inserting insn reload before:
  107: r111:DI=r94:DI
  108: r112:DI=r96:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 68:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 73:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 99: point = 0
   Insn 96: point = 0
   Insn 92: point = 1
   Insn 89: point = 3
   Insn 88: point = 4
   Insn 87: point = 4
   Insn 86: point = 5
   Insn 85: point = 5
   Insn 84: point = 6
   Insn 83: point = 8
   Insn 82: point = 9
   Insn 81: point = 11
  BB 6
   Insn 79: point = 12
   Insn 78: point = 12
   Insn 76: point = 13
  BB 2
   Insn 105: point = 14
   Insn 21: point = 14
   Insn 20: point = 15
   Insn 19: point = 16
   Insn 18: point = 16
   Insn 17: point = 16
   Insn 16: point = 17
   Insn 15: point = 18
   Insn 14: point = 19
   Insn 108: point = 20
	Hard reg 0 is preferable by r112 with profit 1
   Insn 107: point = 22
	Hard reg 1 is preferable by r111 with profit 1
   Insn 13: point = 24
   Insn 12: point = 25
   Insn 11: point = 26
   Insn 10: point = 27
   Insn 9: point = 28
   Insn 8: point = 29
   Insn 4: point = 30
   Insn 3: point = 30
   Insn 2: point = 30
  BB 5
   Insn 73: point = 30
  BB 4
   Insn 70: point = 30
   Insn 69: point = 31
   Insn 68: point = 32
   Insn 67: point = 34
   Insn 66: point = 36
   Insn 65: point = 37
   Insn 64: point = 38
   Insn 63: point = 39
   Insn 62: point = 41
   Insn 61: point = 43
   Insn 60: point = 45
   Insn 59: point = 47
   Insn 58: point = 49
   Insn 57: point = 51
   Insn 56: point = 52
   Insn 55: point = 54
   Insn 54: point = 55
   Insn 53: point = 56
   Insn 52: point = 58
   Insn 51: point = 60
   Insn 50: point = 62
   Insn 49: point = 64
   Insn 48: point = 65
   Insn 47: point = 67
   Insn 46: point = 68
   Insn 45: point = 70
   Insn 44: point = 72
   Insn 43: point = 74
   Insn 42: point = 76
   Insn 41: point = 78
   Insn 40: point = 79
   Insn 39: point = 81
  BB 3
   Insn 34: point = 82
   Insn 33: point = 82
   Insn 32: point = 83
   Insn 31: point = 84
   Insn 30: point = 86
   Insn 29: point = 88
   Insn 28: point = 90
   Insn 27: point = 92
   Insn 26: point = 93
   Insn 25: point = 95
 r59: [12..13]
 r60: [87..93]
 r61: [89..90]
 r62: [87..88]
 r63: [85..86]
 r64: [82..84]
 r65: [82..83]
 r66: [71..79]
 r67: [75..76]
 r68: [73..74]
 r69: [71..72]
 r70: [69..70]
 r71: [55..68]
 r72: [59..65]
 r73: [61..62]
 r74: [59..60]
 r75: [57..58]
 r76: [55..56]
 r77: [44..52]
 r78: [48..49]
 r79: [46..47]
 r80: [44..45]
 r81: [42..43]
 r82: [40..41]
 r83: [37..39]
 r84: [37..38]
 r85: [33..34]
 r86: [30..32]
 r87: [5..9]
 r88: [4..6]
 r89: [2..3]
 r90: [0..1]
 r91: [18..29]
 r92: [17..28]
 r93: [16..27]
 r94: [23..26]
 r95: [19..25]
 r96: [21..24]
 r97: [14..15]
 r98: [94..95]
 r99: [91..92]
 r100: [80..81]
 r101: [77..78]
 r102: [66..67]
 r103: [63..64]
 r104: [53..54]
 r105: [50..51]
 r106: [35..36]
 r107: [30..31]
 r108: [10..11]
 r109: [7..8]
 r111: [19..22]
 r112: [19..20]
Compressing live ranges: from 96 to 78 - 81%
Ranges after the compression:
 r59: [10..11]
 r60: [70..75]
 r61: [72..73]
 r62: [70..71]
 r63: [68..69]
 r64: [66..67]
 r65: [66..67]
 r66: [56..63]
 r67: [60..61]
 r68: [58..59]
 r69: [56..57]
 r70: [54..55]
 r71: [42..53]
 r72: [46..51]
 r73: [48..49]
 r74: [46..47]
 r75: [44..45]
 r76: [42..43]
 r77: [32..39]
 r78: [36..37]
 r79: [34..35]
 r80: [32..33]
 r81: [30..31]
 r82: [28..29]
 r83: [26..27]
 r84: [26..27]
 r85: [22..23]
 r86: [20..21]
 r87: [4..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [14..19]
 r92: [14..19]
 r93: [14..19]
 r94: [18..19]
 r95: [14..19]
 r96: [16..19]
 r97: [12..13]
 r98: [76..77]
 r99: [74..75]
 r100: [64..65]
 r101: [62..63]
 r102: [52..53]
 r103: [50..51]
 r104: [40..41]
 r105: [38..39]
 r106: [24..25]
 r107: [20..21]
 r108: [8..9]
 r109: [6..7]
 r111: [14..17]
 r112: [14..15]
	 Assigning to 111 (cl=DIREG, orig=94, freq=2, tfirst=111, tfreq=2)...
	   Assign 5 to reload r111 (freq=2)
	 Assigning to 112 (cl=CREG, orig=96, freq=2, tfirst=112, tfreq=2)...
	   Assign 2 to reload r112 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=368, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=352, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 76
changing reg in insn 78
changing reg in insn 26
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 33
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 54
changing reg in insn 48
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 82
changing reg in insn 85
changing reg in insn 84
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 92
changing reg in insn 96
changing reg in insn 8
changing reg in insn 15
changing reg in insn 9
changing reg in insn 16
changing reg in insn 10
changing reg in insn 17
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 88.


_select_candidate_tmp_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={36d,34u} r1={17d,15u} r2={6d,4u} r4={7d,5u} r5={7d,5u} r6={1d,34u} r7={1d,11u} r8={4d,2u} r9={3d,1u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={15d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={3d,1u} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 300{183d,117u,0e} in 78{76 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 91 92 93 94 95 96 97
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:547 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])
        (reg:DI 4 si [ tl ])) mABM.c:547 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ tl ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 safe+0 S4 A32])
        (reg:SI 1 dx [ safe ])) mABM.c:547 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ safe ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 39 r10 [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 safe+0 S4 A32])) mABM.c:550 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 38 r9 [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:550 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 37 r8 [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:550 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 1 dx [94])
        (reg/f:DI 7 sp)) mABM.c:550 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si [95])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:550 267 {*leadi}
     (nil))
(insn 13 12 107 2 (set (reg:DI 0 ax [96])
        (const_int 38 [0x26])) mABM.c:550 87 {*movdi_internal_rex64}
     (nil))
(insn 107 13 108 2 (set (reg:DI 5 di [94])
        (reg:DI 1 dx [94])) mABM.c:550 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [94])
        (nil)))
(insn 108 107 14 2 (set (reg:DI 2 cx [96])
        (reg:DI 0 ax [96])) mABM.c:550 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 14 108 15 2 (parallel [
            (set (reg:DI 2 cx [96])
                (const_int 0 [0]))
            (set (reg:DI 5 di [94])
                (plus:DI (ashift:DI (reg:DI 2 cx [96])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [94])))
            (set (reg:DI 4 si [95])
                (plus:DI (ashift:DI (reg:DI 2 cx [96])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [95])))
            (set (mem:BLK (reg:DI 5 di [94]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [95]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [96]))
        ]) mABM.c:550 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [96])
        (expr_list:REG_UNUSED (reg:DI 5 di [94])
            (expr_list:REG_UNUSED (reg:DI 4 si [95])
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [91])) mABM.c:550 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [91])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (reg:DI 38 r9 [92])) mABM.c:550 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [92])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [93])) mABM.c:550 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [93])
        (nil)))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_temp_angle_nvp") [flags 0x3]  <function_decl 0x7f05a571fa00 _temp_angle_nvp>) [0 _temp_angle_nvp S1 A8])
            (const_int 304 [0x130]))) mABM.c:550 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                    (nil))))))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:551 89 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:551 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 105 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])
        (const_int 0 [0])) mABM.c:551 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (nil)))
(jump_insn 105 21 106 2 (set (pc)
        (label_ref 74)) mABM.c:551 650 {jump}
     (nil)
 -> 74)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 77)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 98 99
(code_label 77 106 24 3 227 "" [1 uses])
(note 24 77 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:551 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg/f:DI 0 ax [orig:60 D.7185 ] [60])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 32 [0x20])) [0 tl_3(D)->temp_angle+0 S8 A64])) mABM.c:551 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 27 26 28 3 (set (reg:SI 1 dx [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:551 89 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:DI 1 dx [orig:61 D.7186 ] [61])
        (sign_extend:DI (reg:SI 1 dx [99]))) mABM.c:551 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [99])
        (nil)))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 1 dx [orig:62 D.7186 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.7186 ] [61])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:551 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7186 ] [61])
        (nil)))
(insn 30 29 31 3 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.7185 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.7185 ] [60])
                    (reg:DI 1 dx [orig:62 D.7186 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:551 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7186 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7185 ] [60])
            (nil))))
(insn 31 30 32 3 (set (reg:XF 8 st [orig:64 D.7187 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.7185 ] [63]) [0 *_10+0 S16 A128])) mABM.c:551 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7185 ] [63])
        (nil)))
(insn 32 31 33 3 (set (reg:XF 9 st(1) [orig:65 D.7187 ] [65])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 conf.max_ang+0 S16 A128])) mABM.c:551 131 {*movxf_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:65 D.7187 ] [65])
            (reg:XF 8 st [orig:64 D.7187 ] [64]))) mABM.c:551 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.7187 ] [65])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7187 ] [64])
            (nil))))
(jump_insn 34 33 38 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 71)
            (pc))) mABM.c:551 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 100 101 102 103 104 105 106 107
(note 38 34 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 4 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 4 (set (reg/f:DI 1 dx [orig:66 D.7188 ] [66])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 16 [0x10])) [0 tl_3(D)->sel_nvp_index+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 4 (set (reg:SI 0 ax [orig:67 D.7184 ] [67])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])) mABM.c:553 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (nil)))
(insn 43 42 44 4 (set (reg:DI 0 ax [orig:68 D.7186 ] [68])
        (sign_extend:DI (reg:SI 0 ax [orig:67 D.7184 ] [67]))) mABM.c:553 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7184 ] [67])
        (nil)))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 0 ax [orig:69 D.7186 ] [69])
                (ashift:DI (reg:DI 0 ax [orig:68 D.7186 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:553 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:68 D.7186 ] [68])
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.7188 ] [70])
                (plus:DI (reg:DI 0 ax [orig:69 D.7186 ] [69])
                    (reg/f:DI 1 dx [orig:66 D.7188 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:553 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.7186 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:66 D.7188 ] [66])
            (nil))))
(insn 46 45 47 4 (set (reg/f:DI 2 cx [orig:71 D.7185 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.7188 ] [70]) [0 *_17+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7188 ] [70])
        (nil)))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [orig:72 D.7185 ] [72])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 32 [0x20])) [0 tl_3(D)->temp_angle+0 S8 A64])) mABM.c:553 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (nil)))
(insn 49 48 50 4 (set (reg:SI 1 dx [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mABM.c:553 89 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 1 dx [orig:73 D.7186 ] [73])
        (sign_extend:DI (reg:SI 1 dx [103]))) mABM.c:553 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [103])
        (nil)))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 1 dx [orig:74 D.7186 ] [74])
                (ashift:DI (reg:DI 1 dx [orig:73 D.7186 ] [73])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:553 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.7186 ] [73])
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.7185 ] [75])
                (plus:DI (reg/f:DI 0 ax [orig:72 D.7185 ] [72])
                    (reg:DI 1 dx [orig:74 D.7186 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:553 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7186 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7185 ] [72])
            (nil))))
(insn 53 52 54 4 (set (reg:XF 0 ax [orig:76 D.7187 ] [76])
        (mem:XF (reg/f:DI 0 ax [orig:75 D.7185 ] [75]) [0 *_22+0 S16 A128])) mABM.c:553 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7185 ] [75])
        (nil)))
(insn 54 53 55 4 (set (mem:XF (reg/f:DI 2 cx [orig:71 D.7185 ] [71]) [0 *_18+0 S16 A128])
        (reg:XF 0 ax [orig:76 D.7187 ] [76])) mABM.c:553 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:76 D.7187 ] [76])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:71 D.7185 ] [71])
            (nil))))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:554 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 1 dx [orig:77 D.7188 ] [77])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 16 [0x10])) [0 tl_3(D)->sel_nvp_index+0 S8 A64])) mABM.c:554 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:554 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 4 (set (reg:SI 0 ax [orig:78 D.7184 ] [78])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])) mABM.c:554 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (nil)))
(insn 59 58 60 4 (set (reg:DI 0 ax [orig:79 D.7186 ] [79])
        (sign_extend:DI (reg:SI 0 ax [orig:78 D.7184 ] [78]))) mABM.c:554 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 D.7184 ] [78])
        (nil)))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 0 ax [orig:80 D.7186 ] [80])
                (ashift:DI (reg:DI 0 ax [orig:79 D.7186 ] [79])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:554 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.7186 ] [79])
        (nil)))
(insn 61 60 62 4 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.7188 ] [81])
                (plus:DI (reg:DI 0 ax [orig:80 D.7186 ] [80])
                    (reg/f:DI 1 dx [orig:77 D.7188 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:554 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7186 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:77 D.7188 ] [77])
            (nil))))
(insn 62 61 63 4 (set (reg/f:DI 0 ax [orig:82 D.7185 ] [82])
        (mem/f:DI (reg/f:DI 0 ax [orig:81 D.7188 ] [81]) [0 *_28+0 S8 A64])) mABM.c:554 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7188 ] [81])
        (nil)))
(insn 63 62 64 4 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.7185 ] [83])
                (plus:DI (reg/f:DI 0 ax [orig:82 D.7185 ] [82])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:554 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.7185 ] [82])
        (nil)))
(insn 64 63 65 4 (set (reg:XF 8 st [orig:84 D.7187 ] [84])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mABM.c:554 256 {*floatsixf2_i387}
     (nil))
(insn 65 64 66 4 (set (mem:XF (reg/f:DI 0 ax [orig:83 D.7185 ] [83]) [0 *_30+0 S16 A128])
        (reg:XF 8 st [orig:84 D.7187 ] [84])) mABM.c:554 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.7187 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.7185 ] [83])
            (nil))))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:555 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [orig:85 D.7184 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [106])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])) mABM.c:555 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 68 67 69 4 (parallel [
            (set (reg:SI 1 dx [orig:86 D.7184 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 D.7184 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:555 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 D.7184 ] [85])
        (nil)))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:555 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])
        (reg:SI 1 dx [orig:86 D.7184 ] [86])) mABM.c:555 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:86 D.7184 ] [86])
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 71 70 72 5 225 "" [1 uses])
(note 72 71 73 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:551 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(code_label 74 73 75 6 224 "" [1 uses])
(note 75 74 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 78 6 (set (reg:SI 0 ax [orig:59 D.7184 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 conf.n_tmp_nvp+0 S4 A128])) mABM.c:551 89 {*movsi_internal}
     (nil))
(insn 78 76 79 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.7184 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mABM.c:551 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7184 ] [59])
        (nil)))
(jump_insn 79 78 80 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) mABM.c:551 612 {*jcc_1}
     (nil)
 -> 77)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 87 88 89 90 108 109
(note 80 79 81 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 7 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:558 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 7 (set (reg:SI 1 dx [orig:87 D.7184 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [108])
                (const_int 24 [0x18])) [0 tl_3(D)->n_sel_nvp+0 S4 A64])) mABM.c:558 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (nil)))
(insn 83 82 84 7 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tl+0 S8 A64])) mABM.c:558 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 7 (set (reg/f:DI 0 ax [orig:88 D.7188 ] [88])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 16 [0x10])) [0 tl_3(D)->sel_nvp_index+0 S8 A64])) mABM.c:558 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 85 84 86 7 (set (reg:SI 1 dx)
        (reg:SI 1 dx [orig:87 D.7184 ] [87])) mABM.c:558 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:87 D.7184 ] [87])
        (nil)))
(insn 86 85 87 7 (set (reg:SI 4 si)
        (const_int 0 [0])) mABM.c:558 89 {*movsi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 D.7188 ] [88])) mABM.c:558 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7188 ] [88])
        (nil)))
(call_insn 88 87 89 7 (call (mem:QI (symbol_ref:DI ("q_sort") [flags 0x41]  <function_decl 0x7f05a5959c00 q_sort>) [0 q_sort S1 A8])
        (const_int 0 [0])) mABM.c:558 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 89 88 92 7 (set (reg:SI 0 ax [orig:89 D.7184 ] [89])
        (const_int 1 [0x1])) mABM.c:560 89 {*movsi_internal}
     (nil))
(insn 92 89 96 7 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:89 D.7184 ] [89])) mABM.c:560 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:89 D.7184 ] [89])
        (nil)))
(insn 96 92 99 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) mABM.c:561 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 <retval> ] [90])
        (nil)))
(insn 99 96 0 7 (use (reg/i:SI 0 ax)) mABM.c:561 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _temp_new_nvp (_temp_new_nvp, funcdef_no=29, decl_uid=4370, cgraph_uid=29)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 52:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 83:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 86:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 105:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 140:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 163:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 175:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 178:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 206:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 207:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 238:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25

********** Pseudo live ranges #1: **********

  BB 25
   Insn 253: point = 0
   Insn 250: point = 0
   Insn 246: point = 1
   Insn 243: point = 3
  BB 23
   Insn 264: point = 4
   Insn 231: point = 4
   Insn 230: point = 5
   Insn 229: point = 6
   Insn 228: point = 8
  BB 24
   Insn 240: point = 9
   Insn 239: point = 10
   Insn 238: point = 11
   Insn 237: point = 13
   Insn 236: point = 15
  BB 22
   Insn 226: point = 16
   Insn 225: point = 16
   Insn 224: point = 17
   Insn 223: point = 19
   Insn 222: point = 20
   Insn 221: point = 22
   Insn 220: point = 23
   Insn 219: point = 24
   Insn 218: point = 25
   Insn 217: point = 27
  BB 21
   Insn 215: point = 28
   Insn 214: point = 28
   Insn 212: point = 29
   Insn 211: point = 31
   Insn 210: point = 33
  BB 17
   Insn 262: point = 34
   Insn 178: point = 34
  BB 16
   Insn 175: point = 34
  BB 15
   Insn 173: point = 34
   Insn 172: point = 34
   Insn 171: point = 35
   Insn 170: point = 37
   Insn 169: point = 38
   Insn 168: point = 39
   Insn 167: point = 41
   Insn 163: point = 42
   Insn 162: point = 43
   Insn 161: point = 45
   Insn 160: point = 47
   Insn 159: point = 49
   Insn 158: point = 51
   Insn 157: point = 53
   Insn 156: point = 54
   Insn 155: point = 56
   Insn 154: point = 57
   Insn 153: point = 59
   Insn 152: point = 61
   Insn 151: point = 63
   Insn 150: point = 64
   Insn 149: point = 66
  BB 14
   Insn 147: point = 67
   Insn 146: point = 67
   Insn 144: point = 68
   Insn 143: point = 70
  BB 12
   Insn 260: point = 71
   Insn 122: point = 71
   Insn 121: point = 71
   Insn 120: point = 72
   Insn 119: point = 73
   Insn 118: point = 74
   Insn 117: point = 74
   Insn 116: point = 75
   Insn 115: point = 77
   Insn 114: point = 79
  BB 11
   Insn 112: point = 80
   Insn 111: point = 80
   Insn 109: point = 81
   Insn 108: point = 83
  BB 9
   Insn 258: point = 84
   Insn 86: point = 84
  BB 8
   Insn 83: point = 84
  BB 7
   Insn 81: point = 84
   Insn 80: point = 84
   Insn 79: point = 85
   Insn 78: point = 87
   Insn 77: point = 88
   Insn 76: point = 89
   Insn 75: point = 91
   Insn 71: point = 92
   Insn 70: point = 93
   Insn 69: point = 94
   Insn 68: point = 96
   Insn 67: point = 98
   Insn 66: point = 100
   Insn 65: point = 101
   Insn 64: point = 103
   Insn 63: point = 104
   Insn 62: point = 105
   Insn 61: point = 106
   Insn 60: point = 106
  BB 6
   Insn 58: point = 106
   Insn 57: point = 106
   Insn 56: point = 107
  BB 4
   Insn 256: point = 108
   Insn 34: point = 108
   Insn 33: point = 108
   Insn 32: point = 109
   Insn 31: point = 110
   Insn 30: point = 111
   Insn 29: point = 111
   Insn 28: point = 112
   Insn 27: point = 112
  BB 3
   Insn 24: point = 113
   Insn 23: point = 113
  BB 2
   Insn 21: point = 113
   Insn 20: point = 113
   Insn 19: point = 114
   Insn 18: point = 116
   Insn 17: point = 117
   Insn 16: point = 118
   Insn 15: point = 119
   Insn 14: point = 121
   Insn 13: point = 122
   Insn 12: point = 122
   Insn 11: point = 123
   Insn 10: point = 125
   Insn 9: point = 127
   Insn 8: point = 129
   Insn 4: point = 130
   Insn 3: point = 130
   Insn 2: point = 130
  BB 5
   Insn 52: point = 130
   Insn 51: point = 130
   Insn 50: point = 131
   Insn 49: point = 133
   Insn 48: point = 135
   Insn 47: point = 137
   Insn 46: point = 139
   Insn 45: point = 140
   Insn 44: point = 142
   Insn 43: point = 143
   Insn 42: point = 145
   Insn 41: point = 147
   Insn 40: point = 149
   Insn 39: point = 150
   Insn 38: point = 152
  BB 10
   Insn 105: point = 153
   Insn 104: point = 153
   Insn 103: point = 153
   Insn 102: point = 154
   Insn 101: point = 156
   Insn 100: point = 158
   Insn 99: point = 160
   Insn 98: point = 162
   Insn 97: point = 163
   Insn 96: point = 165
   Insn 95: point = 166
   Insn 94: point = 168
   Insn 93: point = 170
   Insn 92: point = 172
   Insn 91: point = 173
   Insn 90: point = 175
  BB 13
   Insn 140: point = 176
   Insn 139: point = 176
   Insn 138: point = 177
   Insn 137: point = 179
   Insn 136: point = 181
   Insn 135: point = 183
   Insn 134: point = 185
   Insn 133: point = 186
   Insn 132: point = 188
   Insn 131: point = 189
   Insn 130: point = 191
   Insn 129: point = 193
   Insn 128: point = 195
   Insn 127: point = 196
   Insn 126: point = 198
  BB 20
   Insn 207: point = 199
   Insn 206: point = 199
   Insn 205: point = 199
   Insn 204: point = 200
   Insn 203: point = 202
   Insn 202: point = 204
   Insn 201: point = 206
   Insn 200: point = 208
   Insn 199: point = 209
   Insn 198: point = 211
   Insn 197: point = 212
   Insn 196: point = 214
   Insn 195: point = 216
   Insn 194: point = 218
   Insn 193: point = 219
   Insn 192: point = 221
  BB 19
   Insn 189: point = 222
   Insn 188: point = 222
  BB 18
   Insn 186: point = 222
   Insn 185: point = 222
   Insn 184: point = 223
   Insn 183: point = 225
   Insn 182: point = 227
 r59: [126..127]
 r60: [124..125]
 r61: [122..123]
 r62: [117..119]
 r63: [113..114]
 r64: [111..112]
 r65: [108..110]
 r66: [144..150]
 r67: [146..147]
 r68: [144..145]
 r69: [130..143]
 r70: [134..140]
 r71: [136..137]
 r72: [134..135]
 r73: [132..133]
 r74: [130..131]
 r75: [95..101]
 r76: [97..98]
 r77: [95..96]
 r78: [92..94]
 r79: [84..85]
 r80: [80..81]
 r81: [167..173]
 r82: [169..170]
 r83: [167..168]
 r84: [153..166]
 r85: [157..163]
 r86: [159..160]
 r87: [157..158]
 r88: [155..156]
 r89: [153..154]
 r90: [76..77]
 r91: [74..75]
 r92: [71..73]
 r93: [67..68]
 r94: [190..196]
 r95: [192..193]
 r96: [190..191]
 r97: [176..189]
 r98: [180..186]
 r99: [182..183]
 r100: [180..181]
 r101: [178..179]
 r102: [176..177]
 r103: [58..64]
 r104: [60..61]
 r105: [58..59]
 r106: [42..57]
 r107: [46..54]
 r108: [50..51]
 r109: [48..49]
 r110: [46..47]
 r111: [44..45]
 r112: [42..43]
 r113: [34..35]
 r114: [30..31]
 r115: [28..29]
 r116: [224..225]
 r117: [222..223]
 r118: [213..219]
 r119: [215..216]
 r120: [213..214]
 r121: [199..212]
 r122: [203..209]
 r123: [205..206]
 r124: [203..204]
 r125: [201..202]
 r126: [199..200]
 r127: [23..25]
 r128: [16..20]
 r129: [16..17]
 r130: [4..6]
 r131: [12..13]
 r132: [9..11]
 r133: [2..3]
 r134: [0..1]
 r135: [128..129]
 r136: [120..121]
 r137: [117..118]
 r138: [115..116]
 r139: [108..109]
 r140: [151..152]
 r141: [148..149]
 r142: [141..142]
 r143: [138..139]
 r144: [106..107]
 r145: [104..105]
 r146: [102..103]
 r147: [99..100]
 r148: [92..93]
 r151: [88..89]
 r152: [90..91]
 r153: [86..87]
 r154: [174..175]
 r155: [171..172]
 r156: [164..165]
 r157: [161..162]
 r158: [82..83]
 r159: [78..79]
 r160: [71..72]
 r161: [197..198]
 r162: [194..195]
 r163: [187..188]
 r164: [184..185]
 r165: [69..70]
 r166: [65..66]
 r167: [62..63]
 r168: [55..56]
 r169: [52..53]
 r172: [38..39]
 r173: [40..41]
 r174: [36..37]
 r175: [226..227]
 r176: [220..221]
 r177: [217..218]
 r178: [210..211]
 r179: [207..208]
 r180: [32..33]
 r181: [26..27]
 r182: [23..24]
 r183: [21..22]
 r184: [18..19]
 r185: [7..8]
 r186: [4..5]
 r187: [14..15]
 r188: [9..10]
Compressing live ranges: from 228 to 204 - 89%
Ranges after the compression:
 r59: [114..115]
 r60: [112..113]
 r61: [110..111]
 r62: [106..107]
 r63: [102..103]
 r64: [100..101]
 r65: [98..99]
 r66: [130..135]
 r67: [132..133]
 r68: [130..131]
 r69: [118..129]
 r70: [122..127]
 r71: [124..125]
 r72: [122..123]
 r73: [120..121]
 r74: [118..119]
 r75: [86..91]
 r76: [88..89]
 r77: [86..87]
 r78: [84..85]
 r79: [76..77]
 r80: [72..73]
 r81: [150..155]
 r82: [152..153]
 r83: [150..151]
 r84: [138..149]
 r85: [142..147]
 r86: [144..145]
 r87: [142..143]
 r88: [140..141]
 r89: [138..139]
 r90: [68..69]
 r91: [66..67]
 r92: [64..65]
 r93: [60..61]
 r94: [170..175]
 r95: [172..173]
 r96: [170..171]
 r97: [158..169]
 r98: [162..167]
 r99: [164..165]
 r100: [162..163]
 r101: [160..161]
 r102: [158..159]
 r103: [52..57]
 r104: [54..55]
 r105: [52..53]
 r106: [38..51]
 r107: [42..49]
 r108: [46..47]
 r109: [44..45]
 r110: [42..43]
 r111: [40..41]
 r112: [38..39]
 r113: [30..31]
 r114: [26..27]
 r115: [24..25]
 r116: [200..201]
 r117: [198..199]
 r118: [190..195]
 r119: [192..193]
 r120: [190..191]
 r121: [178..189]
 r122: [182..187]
 r123: [184..185]
 r124: [182..183]
 r125: [180..181]
 r126: [178..179]
 r127: [20..21]
 r128: [14..17]
 r129: [14..15]
 r130: [4..5]
 r131: [10..11]
 r132: [8..9]
 r133: [2..3]
 r134: [0..1]
 r135: [116..117]
 r136: [108..109]
 r137: [106..107]
 r138: [104..105]
 r139: [98..99]
 r140: [136..137]
 r141: [134..135]
 r142: [128..129]
 r143: [126..127]
 r144: [96..97]
 r145: [94..95]
 r146: [92..93]
 r147: [90..91]
 r148: [84..85]
 r151: [80..81]
 r152: [82..83]
 r153: [78..79]
 r154: [156..157]
 r155: [154..155]
 r156: [148..149]
 r157: [146..147]
 r158: [74..75]
 r159: [70..71]
 r160: [64..65]
 r161: [176..177]
 r162: [174..175]
 r163: [168..169]
 r164: [166..167]
 r165: [62..63]
 r166: [58..59]
 r167: [56..57]
 r168: [50..51]
 r169: [48..49]
 r172: [34..35]
 r173: [36..37]
 r174: [32..33]
 r175: [202..203]
 r176: [196..197]
 r177: [194..195]
 r178: [188..189]
 r179: [186..187]
 r180: [28..29]
 r181: [22..23]
 r182: [20..21]
 r183: [18..19]
 r184: [16..17]
 r185: [6..7]
 r186: [4..5]
 r187: [12..13]
 r188: [8..9]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 51
changing reg in insn 45
changing reg in insn 49
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 79
changing reg in insn 80
changing reg in insn 109
changing reg in insn 111
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 103
changing reg in insn 97
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 121
changing reg in insn 144
changing reg in insn 146
changing reg in insn 127
changing reg in insn 131
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 139
changing reg in insn 133
changing reg in insn 137
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 150
changing reg in insn 154
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 163
changing reg in insn 156
changing reg in insn 161
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 171
changing reg in insn 172
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 193
changing reg in insn 197
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 205
changing reg in insn 199
changing reg in insn 203
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 218
changing reg in insn 220
changing reg in insn 222
changing reg in insn 225
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 231
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 243
changing reg in insn 246
changing reg in insn 246
changing reg in insn 250
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 108
changing reg in insn 109
changing reg in insn 114
changing reg in insn 115
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 143
changing reg in insn 144
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 168
changing reg in insn 169
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 182
changing reg in insn 183
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 210
changing reg in insn 211
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 189.


_temp_new_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={87d,85u} r1={48d,42u} r2={16d,9u} r4={8d,2u} r5={13d,7u} r6={1d,107u} r7={1d,31u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={57d,9u} r18={6d} r19={6d} r20={1d,1u,4e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 767{470d,293u,4e} in 194{188 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 135 136 137 138
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:564 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])
        (reg:SI 4 si [ safe ])) mABM.c:564 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ safe ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])
        (reg:DI 1 dx [ new_f ])) mABM.c:564 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ new_f ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:568 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:59 D.7189 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [135])
                (const_int 4 [0x4])) [0 new_f_9(D)->n_nvp+0 S4 A32])) mABM.c:568 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [135])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 0 ax [orig:60 D.7190 ] [60])
        (sign_extend:DI (reg:SI 0 ax [orig:59 D.7189 ] [59]))) mABM.c:568 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7189 ] [59])
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 0 ax [orig:61 D.7190 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:60 D.7190 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:568 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.7190 ] [60])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:61 D.7190 ] [61])) mABM.c:568 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7190 ] [61])
        (nil)))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f05a58d2b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mABM.c:568 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [136])
        (reg:DI 0 ax)) mABM.c:568 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [136])
            (nil))))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [orig:62 D.7191 ] [62])
        (reg/f:DI 0 ax [136])) mABM.c:568 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:568 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [137])
                (const_int 8 [0x8])) [0 new_f_9(D)->nvp+0 S8 A64])
        (reg/f:DI 1 dx [orig:62 D.7191 ] [62])) mABM.c:568 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [137])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:62 D.7191 ] [62])
            (nil))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:569 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [orig:63 D.7192 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [138])
                (const_int 8 [0x8])) [0 new_f_9(D)->nvp+0 S8 A64])) mABM.c:569 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [138])
        (nil)))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:63 D.7192 ] [63])
            (const_int 0 [0]))) mABM.c:569 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7192 ] [63])
        (nil)))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) mABM.c:569 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f05a525f7b8 *.LC30>)) mABM.c:569 87 {*movdi_internal_rex64}
     (nil))
(call_insn 24 23 25 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:569 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 139
(code_label 25 24 26 4 231 "" [1 uses])
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:SI 0 ax [orig:64 D.7189 ] [64])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:571 89 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mABM.c:571 89 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:64 D.7189 ] [64])) mABM.c:571 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7189 ] [64])
        (nil)))
(call_insn 30 29 31 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f05a5959600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mABM.c:571 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [orig:65 D.7192 ] [65])
        (reg:DI 0 ax)) mABM.c:571 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 32 31 33 4 (set (reg/f:DI 1 dx [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:571 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 4 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [139])
                (const_int 32 [0x20])) [0 new_f_9(D)->pos+0 S8 A128])
        (reg/f:DI 0 ax [orig:65 D.7192 ] [65])) mABM.c:571 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [139])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7192 ] [65])
            (nil))))
(insn 34 33 256 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:575 89 {*movsi_internal}
     (nil))
(jump_insn 256 34 257 4 (set (pc)
        (label_ref 53)) mABM.c:575 650 {jump}
     (nil)
 -> 53)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 257 256 55)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69 70 71 72 73 74 140 141 142 143
(code_label 55 257 37 5 233 "" [1 uses])
(note 37 55 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:575 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 5 (set (reg/f:DI 0 ax [orig:66 D.7192 ] [66])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 8 [0x8])) [0 new_f_9(D)->nvp+0 S8 A64])) mABM.c:575 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [140])
        (nil)))
(insn 40 39 41 5 (set (reg:SI 1 dx [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:575 89 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 1 dx [orig:67 D.7190 ] [67])
        (sign_extend:DI (reg:SI 1 dx [141]))) mABM.c:575 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [141])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 1 dx [orig:68 D.7190 ] [68])
                (ashift:DI (reg:DI 1 dx [orig:67 D.7190 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:575 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.7190 ] [67])
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg/f:DI 1 dx [orig:69 D.7192 ] [69])
                (plus:DI (reg:DI 1 dx [orig:68 D.7190 ] [68])
                    (reg/f:DI 0 ax [orig:66 D.7192 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:575 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.7190 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7192 ] [66])
            (nil))))
(insn 44 43 45 5 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:575 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg/f:DI 0 ax [orig:70 D.7192 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [142])
                (const_int 8 [0x8])) [0 f_23(D)->nvp+0 S8 A64])) mABM.c:575 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [142])
        (nil)))
(insn 46 45 47 5 (set (reg:SI 2 cx [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:575 89 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 2 cx [orig:71 D.7190 ] [71])
        (sign_extend:DI (reg:SI 2 cx [143]))) mABM.c:575 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [143])
        (nil)))
(insn 48 47 49 5 (parallel [
            (set (reg:DI 2 cx [orig:72 D.7190 ] [72])
                (ashift:DI (reg:DI 2 cx [orig:71 D.7190 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:575 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:71 D.7190 ] [71])
        (nil)))
(insn 49 48 50 5 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.7192 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.7192 ] [70])
                    (reg:DI 2 cx [orig:72 D.7190 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:575 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:72 D.7190 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7192 ] [70])
            (nil))))
(insn 50 49 51 5 (set (reg/f:DI 0 ax [orig:74 D.7193 ] [74])
        (mem/f:DI (reg/f:DI 0 ax [orig:73 D.7192 ] [73]) [0 *_27+0 S8 A64])) mABM.c:575 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7192 ] [73])
        (nil)))
(insn 51 50 52 5 (set (mem/f:DI (reg/f:DI 1 dx [orig:69 D.7192 ] [69]) [0 *_22+0 S8 A64])
        (reg/f:DI 0 ax [orig:74 D.7193 ] [74])) mABM.c:575 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.7193 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:69 D.7192 ] [69])
            (nil))))
(insn 52 51 53 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:575 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144
(code_label 53 52 54 6 232 "" [1 uses])
(note 54 53 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 54 57 6 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:575 89 {*movsi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [144])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32]))) mABM.c:575 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [144])
        (nil)))
(jump_insn 58 57 59 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) mABM.c:575 612 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 76 77 78 79 145 146 147 148 151 152 153
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg:DI 5 di)
        (const_int 64 [0x40])) mABM.c:576 87 {*movdi_internal_rex64}
     (nil))
(call_insn 61 60 62 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f05a58d2b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mABM.c:576 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 62 61 63 7 (set (reg/f:DI 0 ax [145])
        (reg:DI 0 ax)) mABM.c:576 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [145])
            (nil))))
(insn 63 62 64 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])
        (reg/f:DI 0 ax [145])) mABM.c:576 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [145])
        (nil)))
(insn 64 63 65 7 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:577 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 7 (set (reg/f:DI 0 ax [orig:75 D.7192 ] [75])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [146])
                (const_int 8 [0x8])) [0 new_f_9(D)->nvp+0 S8 A64])) mABM.c:577 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [146])
        (nil)))
(insn 66 65 67 7 (set (reg:SI 1 dx [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:577 89 {*movsi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 1 dx [orig:76 D.7190 ] [76])
        (sign_extend:DI (reg:SI 1 dx [147]))) mABM.c:577 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [147])
        (nil)))
(insn 68 67 69 7 (parallel [
            (set (reg:DI 1 dx [orig:77 D.7190 ] [77])
                (ashift:DI (reg:DI 1 dx [orig:76 D.7190 ] [76])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:577 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.7190 ] [76])
        (nil)))
(insn 69 68 70 7 (parallel [
            (set (reg/f:DI 1 dx [orig:78 D.7192 ] [78])
                (plus:DI (reg:DI 1 dx [orig:77 D.7190 ] [77])
                    (reg/f:DI 0 ax [orig:75 D.7192 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:577 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.7190 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7192 ] [75])
            (nil))))
(insn 70 69 71 7 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mABM.c:577 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 75 7 (set (mem/f:DI (reg/f:DI 1 dx [orig:78 D.7192 ] [78]) [0 *_34+0 S8 A64])
        (reg/f:DI 0 ax [148])) mABM.c:577 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [148])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:78 D.7192 ] [78])
            (nil))))
(insn 75 71 76 7 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:578 89 {*movsi_internal}
     (nil))
(insn 76 75 77 7 (parallel [
            (set (reg:SI 0 ax [151])
                (plus:SI (reg:SI 0 ax [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:578 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [152])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (const_int 2 [0x2]))
            (nil))))
(insn 77 76 78 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (reg:SI 0 ax [151])) mABM.c:578 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [151])
        (nil)))
(insn 78 77 79 7 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:579 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 7 (set (reg:SI 0 ax [orig:79 D.7189 ] [79])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [153])
                (const_int 4 [0x4])) [0 f_23(D)->n_nvp+0 S4 A32])) mABM.c:579 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [153])
        (nil)))
(insn 80 79 81 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:79 D.7189 ] [79])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32]))) mABM.c:579 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:79 D.7189 ] [79])
        (nil)))
(jump_insn 81 80 82 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) mABM.c:579 612 {*jcc_1}
     (nil)
 -> 84)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:580 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 84 83 85 9 234 "" [1 uses])
(note 85 84 86 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 258 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 273 {*addsi_1}
     (nil))
(jump_insn 258 86 259 9 (set (pc)
        (label_ref 106)) mABM.c:582 650 {jump}
     (nil)
 -> 106)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 259 258 110)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81 82 83 84 85 86 87 88 89 154 155 156 157
(code_label 110 259 89 10 236 "" [1 uses])
(note 89 110 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 10 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (nil))
(insn 91 90 92 10 (set (reg/f:DI 0 ax [orig:81 D.7192 ] [81])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 8 [0x8])) [0 new_f_9(D)->nvp+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [154])
        (nil)))
(insn 92 91 93 10 (set (reg:SI 1 dx [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:582 89 {*movsi_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 1 dx [orig:82 D.7190 ] [82])
        (sign_extend:DI (reg:SI 1 dx [155]))) mABM.c:582 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [155])
        (nil)))
(insn 94 93 95 10 (parallel [
            (set (reg:DI 1 dx [orig:83 D.7190 ] [83])
                (ashift:DI (reg:DI 1 dx [orig:82 D.7190 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.7190 ] [82])
        (nil)))
(insn 95 94 96 10 (parallel [
            (set (reg/f:DI 1 dx [orig:84 D.7192 ] [84])
                (plus:DI (reg:DI 1 dx [orig:83 D.7190 ] [83])
                    (reg/f:DI 0 ax [orig:81 D.7192 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.7190 ] [83])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7192 ] [81])
            (nil))))
(insn 96 95 97 10 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 10 (set (reg/f:DI 0 ax [orig:85 D.7192 ] [85])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [156])
                (const_int 8 [0x8])) [0 f_23(D)->nvp+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [156])
        (nil)))
(insn 98 97 99 10 (set (reg:SI 2 cx [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])) mABM.c:582 89 {*movsi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 2 cx [orig:86 D.7190 ] [86])
        (sign_extend:DI (reg:SI 2 cx [157]))) mABM.c:582 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [157])
        (nil)))
(insn 100 99 101 10 (parallel [
            (set (reg:DI 2 cx [orig:87 D.7190 ] [87])
                (ashift:DI (reg:DI 2 cx [orig:86 D.7190 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:86 D.7190 ] [86])
        (nil)))
(insn 101 100 102 10 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.7192 ] [88])
                (plus:DI (reg/f:DI 0 ax [orig:85 D.7192 ] [85])
                    (reg:DI 2 cx [orig:87 D.7190 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:87 D.7190 ] [87])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.7192 ] [85])
            (nil))))
(insn 102 101 103 10 (set (reg/f:DI 0 ax [orig:89 D.7193 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [orig:88 D.7192 ] [88]) [0 *_47+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7192 ] [88])
        (nil)))
(insn 103 102 104 10 (set (mem/f:DI (reg/f:DI 1 dx [orig:84 D.7192 ] [84]) [0 *_43+0 S8 A64])
        (reg/f:DI 0 ax [orig:89 D.7193 ] [89])) mABM.c:582 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.7193 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:84 D.7192 ] [84])
            (nil))))
(insn 104 103 105 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 273 {*addsi_1}
     (nil))
(insn 105 104 106 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:582 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 80 158
(code_label 106 105 107 11 235 "" [1 uses])
(note 107 106 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 11 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:582 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 111 11 (set (reg:SI 0 ax [orig:80 D.7189 ] [80])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 4 [0x4])) [0 f_23(D)->n_nvp+0 S4 A32])) mABM.c:582 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [158])
        (nil)))
(insn 111 109 112 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:80 D.7189 ] [80])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32]))) mABM.c:582 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.7189 ] [80])
        (nil)))
(jump_insn 112 111 113 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) mABM.c:582 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 90 91 92 159 160
(note 113 112 114 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 12 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:585 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 12 (set (reg:SI 0 ax [orig:90 D.7189 ] [90])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [159])
                (const_int 4 [0x4])) [0 new_f_9(D)->n_nvp+0 S4 A32])) mABM.c:585 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [159])
        (nil)))
(insn 116 115 117 12 (parallel [
            (set (reg:SI 0 ax [orig:91 D.7189 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 D.7189 ] [90])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:585 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:90 D.7189 ] [90])
        (nil)))
(insn 117 116 118 12 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:91 D.7189 ] [91])) mABM.c:585 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:91 D.7189 ] [91])
        (nil)))
(call_insn 118 117 119 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:585 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 119 118 120 12 (set (reg/f:DI 0 ax [orig:92 D.7193 ] [92])
        (reg:DI 0 ax)) mABM.c:585 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 120 119 121 12 (set (reg/f:DI 1 dx [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:585 87 {*movdi_internal_rex64}
     (nil))
(insn 121 120 122 12 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [160])
                (const_int 24 [0x18])) [0 new_f_9(D)->vel+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 D.7193 ] [92])) mABM.c:585 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [160])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.7193 ] [92])
            (nil))))
(insn 122 121 260 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:586 89 {*movsi_internal}
     (nil))
(jump_insn 260 122 261 12 (set (pc)
        (label_ref 141)) mABM.c:586 650 {jump}
     (nil)
 -> 141)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 261 260 145)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 97 98 99 100 101 102 161 162 163 164
(code_label 145 261 125 13 238 "" [1 uses])
(note 125 145 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 13 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:586 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 13 (set (reg/f:DI 0 ax [orig:94 D.7193 ] [94])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 24 [0x18])) [0 new_f_9(D)->vel+0 S8 A64])) mABM.c:586 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [161])
        (nil)))
(insn 128 127 129 13 (set (reg:SI 1 dx [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:586 89 {*movsi_internal}
     (nil))
(insn 129 128 130 13 (set (reg:DI 1 dx [orig:95 D.7190 ] [95])
        (sign_extend:DI (reg:SI 1 dx [162]))) mABM.c:586 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [162])
        (nil)))
(insn 130 129 131 13 (parallel [
            (set (reg:DI 1 dx [orig:96 D.7190 ] [96])
                (ashift:DI (reg:DI 1 dx [orig:95 D.7190 ] [95])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7190 ] [95])
        (nil)))
(insn 131 130 132 13 (parallel [
            (set (reg/f:DI 2 cx [orig:97 D.7193 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:94 D.7193 ] [94])
                    (reg:DI 1 dx [orig:96 D.7190 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.7190 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.7193 ] [94])
            (nil))))
(insn 132 131 133 13 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:586 87 {*movdi_internal_rex64}
     (nil))
(insn 133 132 134 13 (set (reg/f:DI 0 ax [orig:98 D.7193 ] [98])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 24 [0x18])) [0 f_23(D)->vel+0 S8 A64])) mABM.c:586 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [163])
        (nil)))
(insn 134 133 135 13 (set (reg:SI 1 dx [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:586 89 {*movsi_internal}
     (nil))
(insn 135 134 136 13 (set (reg:DI 1 dx [orig:99 D.7190 ] [99])
        (sign_extend:DI (reg:SI 1 dx [164]))) mABM.c:586 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [164])
        (nil)))
(insn 136 135 137 13 (parallel [
            (set (reg:DI 1 dx [orig:100 D.7190 ] [100])
                (ashift:DI (reg:DI 1 dx [orig:99 D.7190 ] [99])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:99 D.7190 ] [99])
        (nil)))
(insn 137 136 138 13 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.7193 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:98 D.7193 ] [98])
                    (reg:DI 1 dx [orig:100 D.7190 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.7190 ] [100])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.7193 ] [98])
            (nil))))
(insn 138 137 139 13 (set (reg:XF 0 ax [orig:102 D.7194 ] [102])
        (mem:XF (reg/f:DI 0 ax [orig:101 D.7193 ] [101]) [0 *_63+0 S16 A128])) mABM.c:586 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.7193 ] [101])
        (nil)))
(insn 139 138 140 13 (set (mem:XF (reg/f:DI 2 cx [orig:97 D.7193 ] [97]) [0 *_59+0 S16 A128])
        (reg:XF 0 ax [orig:102 D.7194 ] [102])) mABM.c:586 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:102 D.7194 ] [102])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:97 D.7193 ] [97])
            (nil))))
(insn 140 139 141 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 273 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 165
(code_label 141 140 142 14 237 "" [1 uses])
(note 142 141 143 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 14 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])) mABM.c:586 89 {*movsi_internal}
     (nil))
(insn 144 143 146 14 (parallel [
            (set (reg:SI 0 ax [orig:93 D.7189 ] [93])
                (plus:SI (reg:SI 0 ax [165])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:586 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [165])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 146 144 147 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 D.7189 ] [93])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) mABM.c:586 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.7189 ] [93])
        (nil)))
(jump_insn 147 146 148 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) mABM.c:586 612 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       13
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 107 108 109 110 111 112 113 166 167 168 169 172 173 174
(note 148 147 149 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 15 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:587 87 {*movdi_internal_rex64}
     (nil))
(insn 150 149 151 15 (set (reg/f:DI 0 ax [orig:103 D.7193 ] [103])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [166])
                (const_int 24 [0x18])) [0 new_f_9(D)->vel+0 S8 A64])) mABM.c:587 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [166])
        (nil)))
(insn 151 150 152 15 (set (reg:SI 1 dx [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:587 89 {*movsi_internal}
     (nil))
(insn 152 151 153 15 (set (reg:DI 1 dx [orig:104 D.7190 ] [104])
        (sign_extend:DI (reg:SI 1 dx [167]))) mABM.c:587 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [167])
        (nil)))
(insn 153 152 154 15 (parallel [
            (set (reg:DI 1 dx [orig:105 D.7190 ] [105])
                (ashift:DI (reg:DI 1 dx [orig:104 D.7190 ] [104])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:587 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:104 D.7190 ] [104])
        (nil)))
(insn 154 153 155 15 (parallel [
            (set (reg/f:DI 2 cx [orig:106 D.7193 ] [106])
                (plus:DI (reg/f:DI 0 ax [orig:103 D.7193 ] [103])
                    (reg:DI 1 dx [orig:105 D.7190 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:587 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:105 D.7190 ] [105])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.7193 ] [103])
            (nil))))
(insn 155 154 156 15 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:587 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 0 ax [orig:107 D.7193 ] [107])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 24 [0x18])) [0 f_23(D)->vel+0 S8 A64])) mABM.c:587 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [168])
        (nil)))
(insn 157 156 158 15 (set (reg:SI 1 dx [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:587 89 {*movsi_internal}
     (nil))
(insn 158 157 159 15 (set (reg:DI 1 dx [orig:108 D.7190 ] [108])
        (sign_extend:DI (reg:SI 1 dx [169]))) mABM.c:587 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [169])
        (nil)))
(insn 159 158 160 15 (parallel [
            (set (reg:DI 1 dx [orig:109 D.7190 ] [109])
                (ashift:DI (reg:DI 1 dx [orig:108 D.7190 ] [108])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:587 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:108 D.7190 ] [108])
        (nil)))
(insn 160 159 161 15 (parallel [
            (set (reg:DI 1 dx [orig:110 D.7195 ] [110])
                (plus:DI (reg:DI 1 dx [orig:109 D.7190 ] [109])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:587 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:109 D.7190 ] [109])
        (nil)))
(insn 161 160 162 15 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.7193 ] [111])
                (plus:DI (reg/f:DI 0 ax [orig:107 D.7193 ] [107])
                    (reg:DI 1 dx [orig:110 D.7195 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:587 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:110 D.7195 ] [110])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:107 D.7193 ] [107])
            (nil))))
(insn 162 161 163 15 (set (reg:XF 0 ax [orig:112 D.7194 ] [112])
        (mem:XF (reg/f:DI 0 ax [orig:111 D.7193 ] [111]) [0 *_74+0 S16 A128])) mABM.c:587 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:111 D.7193 ] [111])
        (nil)))
(insn 163 162 167 15 (set (mem:XF (reg/f:DI 2 cx [orig:106 D.7193 ] [106]) [0 *_69+0 S16 A128])
        (reg:XF 0 ax [orig:112 D.7194 ] [112])) mABM.c:587 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:112 D.7194 ] [112])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:106 D.7193 ] [106])
            (nil))))
(insn 167 163 168 15 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:588 89 {*movsi_internal}
     (nil))
(insn 168 167 169 15 (parallel [
            (set (reg:SI 0 ax [172])
                (plus:SI (reg:SI 0 ax [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:588 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [173])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (const_int 2 [0x2]))
            (nil))))
(insn 169 168 170 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (reg:SI 0 ax [172])) mABM.c:588 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [172])
        (nil)))
(insn 170 169 171 15 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:589 87 {*movdi_internal_rex64}
     (nil))
(insn 171 170 172 15 (set (reg:SI 0 ax [orig:113 D.7189 ] [113])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [174])
                (const_int 4 [0x4])) [0 f_23(D)->n_nvp+0 S4 A32])) mABM.c:589 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [174])
        (nil)))
(insn 172 171 173 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:113 D.7189 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32]))) mABM.c:589 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:113 D.7189 ] [113])
        (nil)))
(jump_insn 173 172 174 15 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) mABM.c:589 612 {*jcc_1}
     (nil)
 -> 176)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 174 173 175 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:589 273 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 176 175 177 17 239 "" [1 uses])
(note 177 176 178 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 178 177 262 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:590 273 {*addsi_1}
     (nil))
(jump_insn 262 178 263 17 (set (pc)
        (label_ref 208)) mABM.c:590 650 {jump}
     (nil)
 -> 208)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 263 262 213)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 175
(code_label 213 263 181 18 242 "" [1 uses])
(note 181 213 182 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 18 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:591 87 {*movdi_internal_rex64}
     (nil))
(insn 183 182 184 18 (set (reg:SI 0 ax [orig:116 D.7189 ] [116])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [175])
                (const_int 4 [0x4])) [0 new_f_9(D)->n_nvp+0 S4 A32])) mABM.c:591 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [175])
        (nil)))
(insn 184 183 185 18 (parallel [
            (set (reg:SI 0 ax [orig:117 D.7189 ] [117])
                (plus:SI (reg:SI 0 ax [orig:116 D.7189 ] [116])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:591 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:116 D.7189 ] [116])
        (nil)))
(insn 185 184 186 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:117 D.7189 ] [117])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) mABM.c:591 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:117 D.7189 ] [117])
        (nil)))
(jump_insn 186 185 187 18 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) mABM.c:591 612 {*jcc_1}
     (nil)
 -> 190)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 187 186 188 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f05a525f850 *.LC31>)) mABM.c:591 87 {*movdi_internal_rex64}
     (nil))
(call_insn 189 188 190 19 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f05a5959900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mABM.c:591 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 125 126 176 177 178 179
(code_label 190 189 191 20 241 "" [1 uses])
(note 191 190 192 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 20 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:592 87 {*movdi_internal_rex64}
     (nil))
(insn 193 192 194 20 (set (reg/f:DI 0 ax [orig:118 D.7193 ] [118])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [176])
                (const_int 24 [0x18])) [0 new_f_9(D)->vel+0 S8 A64])) mABM.c:592 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [176])
        (nil)))
(insn 194 193 195 20 (set (reg:SI 1 dx [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mABM.c:592 89 {*movsi_internal}
     (nil))
(insn 195 194 196 20 (set (reg:DI 1 dx [orig:119 D.7190 ] [119])
        (sign_extend:DI (reg:SI 1 dx [177]))) mABM.c:592 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [177])
        (nil)))
(insn 196 195 197 20 (parallel [
            (set (reg:DI 1 dx [orig:120 D.7190 ] [120])
                (ashift:DI (reg:DI 1 dx [orig:119 D.7190 ] [119])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:592 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:119 D.7190 ] [119])
        (nil)))
(insn 197 196 198 20 (parallel [
            (set (reg/f:DI 2 cx [orig:121 D.7193 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:118 D.7193 ] [118])
                    (reg:DI 1 dx [orig:120 D.7190 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:592 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:120 D.7190 ] [120])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:118 D.7193 ] [118])
            (nil))))
(insn 198 197 199 20 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:592 87 {*movdi_internal_rex64}
     (nil))
(insn 199 198 200 20 (set (reg/f:DI 0 ax [orig:122 D.7193 ] [122])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 24 [0x18])) [0 f_23(D)->vel+0 S8 A64])) mABM.c:592 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [178])
        (nil)))
(insn 200 199 201 20 (set (reg:SI 1 dx [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])) mABM.c:592 89 {*movsi_internal}
     (nil))
(insn 201 200 202 20 (set (reg:DI 1 dx [orig:123 D.7190 ] [123])
        (sign_extend:DI (reg:SI 1 dx [179]))) mABM.c:592 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [179])
        (nil)))
(insn 202 201 203 20 (parallel [
            (set (reg:DI 1 dx [orig:124 D.7190 ] [124])
                (ashift:DI (reg:DI 1 dx [orig:123 D.7190 ] [123])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:592 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:123 D.7190 ] [123])
        (nil)))
(insn 203 202 204 20 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.7193 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:122 D.7193 ] [122])
                    (reg:DI 1 dx [orig:124 D.7190 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:592 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:124 D.7190 ] [124])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:122 D.7193 ] [122])
            (nil))))
(insn 204 203 205 20 (set (reg:XF 0 ax [orig:126 D.7194 ] [126])
        (mem:XF (reg/f:DI 0 ax [orig:125 D.7193 ] [125]) [0 *_91+0 S16 A128])) mABM.c:592 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.7193 ] [125])
        (nil)))
(insn 205 204 206 20 (set (mem:XF (reg/f:DI 2 cx [orig:121 D.7193 ] [121]) [0 *_87+0 S16 A128])
        (reg:XF 0 ax [orig:126 D.7194 ] [126])) mABM.c:592 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:126 D.7194 ] [126])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:121 D.7193 ] [121])
            (nil))))
(insn 206 205 207 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:590 273 {*addsi_1}
     (nil))
(insn 207 206 208 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:590 273 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              17 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 180
(code_label 208 207 209 21 240 "" [1 uses])
(note 209 208 210 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 21 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:590 87 {*movdi_internal_rex64}
     (nil))
(insn 211 210 212 21 (set (reg:SI 0 ax [orig:114 D.7189 ] [114])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 4 [0x4])) [0 f_23(D)->n_nvp+0 S4 A32])) mABM.c:590 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [180])
        (nil)))
(insn 212 211 214 21 (parallel [
            (set (reg:SI 0 ax [orig:115 D.7189 ] [115])
                (plus:SI (reg:SI 0 ax [orig:114 D.7189 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:590 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:114 D.7189 ] [114])
        (nil)))
(insn 214 212 215 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:115 D.7189 ] [115])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32]))) mABM.c:590 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:115 D.7189 ] [115])
        (nil)))
(jump_insn 215 214 216 21 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 213)
            (pc))) mABM.c:590 612 {*jcc_1}
     (nil)
 -> 213)
;;  succ:       18
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 181 182 183 184
(note 216 215 217 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 217 216 218 22 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:595 87 {*movdi_internal_rex64}
     (nil))
(insn 218 217 219 22 (set (reg:SI 1 dx [orig:127 D.7189 ] [127])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [181])
                (const_int 44 [0x2c])) [0 f_23(D)->st_indx+0 S4 A32])) mABM.c:595 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [181])
        (nil)))
(insn 219 218 220 22 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:595 87 {*movdi_internal_rex64}
     (nil))
(insn 220 219 221 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [182])
                (const_int 44 [0x2c])) [0 new_f_9(D)->st_indx+0 S4 A32])
        (reg:SI 1 dx [orig:127 D.7189 ] [127])) mABM.c:595 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [182])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:127 D.7189 ] [127])
            (nil))))
(insn 221 220 222 22 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])) mABM.c:597 89 {*movsi_internal}
     (nil))
(insn 222 221 223 22 (parallel [
            (set (reg:SI 1 dx [orig:128 D.7189 ] [128])
                (plus:SI (reg:SI 0 ax [183])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:597 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [183])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 safe+0 S4 A32])
                (const_int 2 [0x2]))
            (nil))))
(insn 223 222 224 22 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:597 87 {*movdi_internal_rex64}
     (nil))
(insn 224 223 225 22 (set (reg:SI 0 ax [orig:129 D.7189 ] [129])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [184])
                (const_int 4 [0x4])) [0 f_23(D)->n_nvp+0 S4 A32])) mABM.c:597 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [184])
        (nil)))
(insn 225 224 226 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:128 D.7189 ] [128])
            (reg:SI 0 ax [orig:129 D.7189 ] [129]))) mABM.c:597 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:129 D.7189 ] [129])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:128 D.7189 ] [128])
            (nil))))
(jump_insn 226 225 227 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) mABM.c:597 612 {*jcc_1}
     (nil)
 -> 234)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 130 185 186
(note 227 226 228 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 23 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:597 87 {*movdi_internal_rex64}
     (nil))
(insn 229 228 230 23 (set (reg:SI 1 dx [orig:130 D.7189 ] [130])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 116 [0x74])) [0 f_23(D)->bound+4 S4 A32])) mABM.c:597 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [185])
        (nil)))
(insn 230 229 231 23 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:597 87 {*movdi_internal_rex64}
     (nil))
(insn 231 230 264 23 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [186])
                (const_int 116 [0x74])) [0 new_f_9(D)->bound+4 S4 A32])
        (reg:SI 1 dx [orig:130 D.7189 ] [130])) mABM.c:597 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [186])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:130 D.7189 ] [130])
            (nil))))
(jump_insn 264 231 265 23 (set (pc)
        (label_ref 241)) 650 {jump}
     (nil)
 -> 241)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 265 264 234)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 187 188
(code_label 234 265 235 24 243 "" [1 uses])
(note 235 234 236 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 24 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:598 87 {*movdi_internal_rex64}
     (nil))
(insn 237 236 238 24 (set (reg:SI 0 ax [orig:131 D.7189 ] [131])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 116 [0x74])) [0 f_23(D)->bound+4 S4 A32])) mABM.c:598 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [187])
        (nil)))
(insn 238 237 239 24 (parallel [
            (set (reg:SI 1 dx [orig:132 D.7189 ] [132])
                (plus:SI (reg:SI 0 ax [orig:131 D.7189 ] [131])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:598 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:131 D.7189 ] [131])
        (nil)))
(insn 239 238 240 24 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 new_f+0 S8 A64])) mABM.c:598 87 {*movdi_internal_rex64}
     (nil))
(insn 240 239 241 24 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [188])
                (const_int 116 [0x74])) [0 new_f_9(D)->bound+4 S4 A32])
        (reg:SI 1 dx [orig:132 D.7189 ] [132])) mABM.c:598 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [188])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:132 D.7189 ] [132])
            (nil))))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              23 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 133 134
(code_label 241 240 242 25 244 "" [1 uses])
(note 242 241 243 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 246 25 (set (reg:SI 0 ax [orig:133 D.7189 ] [133])
        (const_int 1 [0x1])) mABM.c:600 89 {*movsi_internal}
     (nil))
(insn 246 243 250 25 (set (reg:SI 0 ax [orig:134 <retval> ] [134])
        (reg:SI 0 ax [orig:133 D.7189 ] [133])) mABM.c:600 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:133 D.7189 ] [133])
        (nil)))
(insn 250 246 253 25 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:134 <retval> ] [134])) mABM.c:601 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 <retval> ] [134])
        (nil)))
(insn 253 250 0 25 (use (reg/i:SI 0 ax)) mABM.c:601 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _reroute (_reroute, funcdef_no=30, decl_uid=4394, cgraph_uid=30)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=480, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 32:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=511 from oldreg=355, assigning class DIREG to r511
      Creating newreg=512 from oldreg=357, assigning class CREG to r512
   32: {r512:DI=0;r511:DI=r512:DI<<0x3+r511:DI;r356:DI=r512:DI<<0x3+r356:DI;[r511:DI]=[r356:DI];use r512:DI;}
      REG_UNUSED r357:DI
      REG_UNUSED r356:DI
      REG_UNUSED r355:DI
    Inserting insn reload before:
  797: r511:DI=r355:DI
  798: r512:DI=r357:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 48:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=513 from oldreg=361, assigning class DIREG to r513
      Creating newreg=514 from oldreg=363, assigning class CREG to r514
   48: {r514:DI=0;r513:DI=r514:DI<<0x3+r513:DI;r362:DI=r514:DI<<0x3+r362:DI;[r513:DI]=[r362:DI];use r514:DI;}
      REG_UNUSED r363:DI
      REG_UNUSED r362:DI
      REG_UNUSED r361:DI
    Inserting insn reload before:
  799: r513:DI=r361:DI
  800: r514:DI=r363:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=515 from oldreg=68, assigning class GENERAL_REGS to r515
   58: {r515:SI=r515:SI-r67:SI;clobber flags:CC;}
      REG_DEAD r365:SI
      REG_DEAD r67:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x88]-r67:SI
    Inserting insn reload before:
  801: r515:SI=r365:SI
    Inserting insn reload after:
  802: r68:SI=r515:SI

          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=516 from oldreg=74, assigning class GENERAL_REGS to r516
   74: {r516:DI=r516:DI<<0x4;clobber flags:CC;}
      REG_DEAD r73:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  803: r516:DI=r73:DI
    Inserting insn reload after:
  804: r74:DI=r516:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 85:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=517 from oldreg=82, assigning class GENERAL_REGS to r517
   98: {r517:SI=r517:SI-r81:SI;clobber flags:CC;}
      REG_DEAD r375:SI
      REG_DEAD r81:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x88]-r81:SI
    Inserting insn reload before:
  805: r517:SI=r375:SI
    Inserting insn reload after:
  806: r82:SI=r517:SI

          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=518 from oldreg=84, assigning class GENERAL_REGS to r518
  104: {r518:SI=r518:SI-r83:SI;clobber flags:CC;}
      REG_DEAD r378:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x88]-r83:SI
    Inserting insn reload before:
  807: r518:SI=r378:SI
    Inserting insn reload after:
  808: r84:SI=r518:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 128:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 160:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 210:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 211:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 218:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 237:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=519 from oldreg=136, assigning class GENERAL_REGS to r519
  245: {r519:SI=r519:SI-r411:SI;clobber flags:CC;}
      REG_DEAD r412:SI
      REG_DEAD r411:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x64]-[frame:DI-0x44]
    Inserting insn reload before:
  809: r519:SI=r412:SI
    Inserting insn reload after:
  810: r136:SI=r519:SI

          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 267:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 268:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 275:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 276:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 285:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 288:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) ?mr {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 311:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 319
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 321:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 322:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =m  (1) f {*truncxfdf2_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 330:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 332:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 340:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 341:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 358
	 Choosing alt 0 in insn 358:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 362
	 Choosing alt 0 in insn 362:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 369:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 370:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 382:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 386:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 391
	 Choosing alt 0 in insn 391:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 394
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 396:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 397:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 398:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 401:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 410:  (0) r  (1) 0  (2) rm {*subsi_1}
      Creating newreg=520 from oldreg=216, assigning class GENERAL_REGS to r520
  410: {r520:SI=r520:SI-[frame:DI-0x60];clobber flags:CC;}
      REG_DEAD r215:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  811: r520:SI=r215:SI
    Inserting insn reload after:
  812: r216:SI=r520:SI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 418:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 423
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 431:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 793:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 794:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 795:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 796:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 786:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 437
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 440:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 441:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 447
	 Choosing alt 0 in insn 447:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 449:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 450:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 457:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 787:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 463:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 465:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 468:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 472
	 Choosing alt 0 in insn 472:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 474:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 478:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 479
	 Choosing alt 0 in insn 479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 480:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 482:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 485:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 489
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 491:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 496
	 Choosing alt 0 in insn 496:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 499:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 508:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 509:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 516:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 522:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 543:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 545:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 546:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 547:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 548:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 554:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 557:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 558:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 560:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 562:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 563:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 564:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 568:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 577:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 578:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 580:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 587:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 591:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=521 from oldreg=480, assigning class DIREG to r521
      Creating newreg=522 from oldreg=482, assigning class CREG to r522
  591: {r522:DI=0;r521:DI=r522:DI<<0x3+r521:DI;r481:DI=r522:DI<<0x3+r481:DI;[r521:DI]=[r481:DI];use r522:DI;}
      REG_UNUSED r482:DI
      REG_UNUSED r481:DI
      REG_UNUSED r480:DI
    Inserting insn reload before:
  813: r521:DI=r480:DI
  814: r522:DI=r482:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 595:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 596:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 600:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 602:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 604:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 605:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 607:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 608:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 609:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 624:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 629:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 632:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 633:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 636:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 640:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 643:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 647:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 651:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 657:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 666
	 Choosing alt 0 in insn 666:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 669:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 672:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 673:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 674:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 681:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 689:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 693:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 701:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=523 from oldreg=339, assigning class GENERAL_REGS to r523
  701: {r523:DI=r523:DI<<0x4;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  815: r523:DI=r338:DI
    Inserting insn reload after:
  816: r339:DI=r523:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 702:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 703
	 Choosing alt 0 in insn 703:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 704:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 705:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 706:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 712:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 715:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 717:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) rzw {*call}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 723:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 724:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 726:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 727:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 729:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 730:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 731:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 732:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52

********** Pseudo live ranges #1: **********

  BB 52
   Insn 747: point = 0
   Insn 744: point = 0
   Insn 740: point = 1
  BB 37
   Insn 778: point = 4
   Insn 619: point = 4
   Insn 618: point = 5
   Insn 617: point = 5
   Insn 616: point = 6
   Insn 615: point = 7
   Insn 614: point = 8
   Insn 613: point = 9
   Insn 612: point = 9
   Insn 611: point = 10
   Insn 610: point = 11
   Insn 609: point = 12
   Insn 608: point = 13
   Insn 607: point = 14
   Insn 606: point = 15
   Insn 605: point = 16
   Insn 604: point = 17
   Insn 603: point = 19
   Insn 602: point = 20
   Insn 601: point = 22
   Insn 600: point = 23
   Insn 599: point = 24
  BB 51
   Insn 737: point = 25
   Insn 736: point = 26
   Insn 735: point = 26
   Insn 734: point = 27
   Insn 733: point = 28
   Insn 732: point = 29
   Insn 731: point = 30
   Insn 730: point = 31
   Insn 729: point = 32
   Insn 728: point = 33
   Insn 727: point = 34
   Insn 726: point = 36
   Insn 725: point = 37
   Insn 724: point = 38
   Insn 723: point = 39
   Insn 722: point = 40
   Insn 721: point = 40
   Insn 720: point = 41
   Insn 719: point = 42
   Insn 718: point = 43
   Insn 717: point = 44
   Insn 716: point = 45
   Insn 715: point = 46
  BB 50
   Insn 713: point = 47
   Insn 712: point = 47
   Insn 710: point = 48
   Insn 709: point = 50
  BB 48
   Insn 784: point = 51
   Insn 689: point = 51
  BB 47
   Insn 687: point = 51
   Insn 686: point = 51
   Insn 685: point = 52
  BB 42
   Insn 780: point = 53
   Insn 643: point = 53
  BB 41
   Insn 641: point = 53
   Insn 640: point = 53
   Insn 638: point = 54
   Insn 637: point = 56
   Insn 636: point = 58
  BB 24
   Insn 767: point = 59
   Insn 295: point = 59
   Insn 294: point = 60
   Insn 293: point = 62
   Insn 292: point = 64
   Insn 291: point = 65
   Insn 290: point = 65
   Insn 289: point = 66
   Insn 288: point = 67
   Insn 287: point = 69
   Insn 286: point = 71
   Insn 285: point = 73
  BB 23
   Insn 283: point = 74
   Insn 282: point = 74
   Insn 280: point = 75
   Insn 279: point = 77
  BB 18
   Insn 763: point = 78
   Insn 233: point = 78
   Insn 232: point = 78
   Insn 231: point = 79
   Insn 230: point = 81
  BB 17
   Insn 225: point = 82
   Insn 224: point = 82
   Insn 222: point = 83
   Insn 221: point = 85
  BB 12
   Insn 759: point = 86
   Insn 180: point = 86
   Insn 179: point = 86
   Insn 178: point = 87
   Insn 177: point = 89
   Insn 176: point = 90
   Insn 175: point = 91
   Insn 174: point = 92
   Insn 173: point = 92
   Insn 172: point = 93
   Insn 171: point = 93
   Insn 170: point = 95
  BB 11
   Insn 168: point = 96
   Insn 167: point = 96
   Insn 165: point = 97
   Insn 164: point = 99
   Insn 163: point = 101
  BB 9
   Insn 757: point = 102
   Insn 141: point = 102
   Insn 140: point = 103
   Insn 139: point = 105
   Insn 138: point = 107
   Insn 137: point = 108
   Insn 136: point = 109
   Insn 135: point = 110
   Insn 134: point = 112
   Insn 133: point = 114
   Insn 132: point = 116
   Insn 131: point = 118
   Insn 130: point = 119
   Insn 129: point = 121
   Insn 128: point = 122
   Insn 127: point = 123
   Insn 126: point = 124
   Insn 125: point = 126
   Insn 124: point = 128
   Insn 123: point = 130
   Insn 122: point = 132
   Insn 121: point = 134
   Insn 120: point = 135
   Insn 119: point = 137
   Insn 118: point = 138
   Insn 117: point = 139
   Insn 116: point = 140
   Insn 115: point = 140
   Insn 114: point = 141
   Insn 113: point = 142
   Insn 112: point = 144
   Insn 111: point = 146
   Insn 110: point = 148
   Insn 109: point = 150
   Insn 108: point = 152
   Insn 107: point = 153
   Insn 106: point = 155
   Insn 105: point = 156
   Insn 808: point = 158
	Hard reg 0 is preferable by r518 with profit 1
   Insn 104: point = 160
   Insn 807: point = 161
	Hard reg 0 is preferable by r518 with profit 1
	Hard reg 1 is preferable by r518 with profit 1
   Insn 103: point = 163
   Insn 102: point = 164
   Insn 101: point = 166
   Insn 100: point = 167
   Insn 99: point = 168
   Insn 806: point = 170
	Hard reg 0 is preferable by r517 with profit 1
   Insn 98: point = 172
   Insn 805: point = 173
	Hard reg 0 is preferable by r517 with profit 1
	Hard reg 1 is preferable by r517 with profit 1
   Insn 97: point = 175
   Insn 96: point = 176
   Insn 95: point = 178
  BB 8
   Insn 93: point = 179
   Insn 92: point = 179
   Insn 90: point = 180
   Insn 89: point = 182
   Insn 88: point = 184
  BB 6
   Insn 755: point = 185
   Insn 68: point = 185
   Insn 67: point = 185
   Insn 66: point = 186
   Insn 65: point = 187
   Insn 64: point = 187
   Insn 63: point = 188
   Insn 62: point = 190
   Insn 61: point = 192
   Insn 60: point = 193
   Insn 59: point = 194
   Insn 802: point = 196
	Hard reg 0 is preferable by r515 with profit 1
   Insn 58: point = 198
   Insn 801: point = 199
	Hard reg 0 is preferable by r515 with profit 1
	Hard reg 1 is preferable by r515 with profit 1
   Insn 57: point = 201
   Insn 56: point = 202
   Insn 55: point = 204
  BB 4
   Insn 753: point = 205
   Insn 36: point = 205
   Insn 35: point = 205
   Insn 34: point = 206
   Insn 33: point = 207
   Insn 32: point = 208
   Insn 798: point = 209
	Hard reg 0 is preferable by r512 with profit 1
   Insn 797: point = 211
	Hard reg 1 is preferable by r511 with profit 1
   Insn 31: point = 213
   Insn 30: point = 214
   Insn 29: point = 215
   Insn 28: point = 216
   Insn 27: point = 217
   Insn 26: point = 218
   Insn 25: point = 220
  BB 5
   Insn 52: point = 221
   Insn 51: point = 221
   Insn 50: point = 222
   Insn 49: point = 223
   Insn 48: point = 224
   Insn 800: point = 225
	Hard reg 0 is preferable by r514 with profit 1
   Insn 799: point = 227
	Hard reg 1 is preferable by r513 with profit 1
   Insn 47: point = 229
   Insn 46: point = 230
   Insn 45: point = 231
   Insn 44: point = 232
   Insn 43: point = 233
   Insn 42: point = 234
   Insn 41: point = 236
  BB 2
   Insn 23: point = 237
   Insn 22: point = 237
   Insn 21: point = 238
   Insn 20: point = 239
   Insn 19: point = 240
   Insn 18: point = 242
   Insn 17: point = 244
   Insn 16: point = 246
   Insn 15: point = 248
   Insn 14: point = 249
   Insn 10: point = 250
   Insn 9: point = 250
   Insn 8: point = 251
   Insn 7: point = 252
   Insn 6: point = 254
   Insn 5: point = 255
   Insn 4: point = 256
   Insn 3: point = 256
   Insn 2: point = 256
  BB 7
   Insn 85: point = 256
   Insn 84: point = 256
   Insn 83: point = 257
   Insn 82: point = 259
   Insn 81: point = 261
   Insn 80: point = 263
   Insn 79: point = 265
   Insn 78: point = 266
   Insn 77: point = 268
   Insn 76: point = 269
   Insn 75: point = 271
   Insn 804: point = 272
	Hard reg 1 is preferable by r516 with profit 1
   Insn 74: point = 274
   Insn 803: point = 274
	Hard reg 1 is preferable by r516 with profit 1
	Hard reg 0 is preferable by r516 with profit 1
   Insn 73: point = 276
   Insn 72: point = 278
  BB 10
   Insn 160: point = 279
   Insn 159: point = 279
   Insn 158: point = 280
   Insn 157: point = 282
   Insn 156: point = 284
   Insn 155: point = 286
   Insn 154: point = 288
   Insn 153: point = 290
   Insn 152: point = 291
   Insn 151: point = 293
   Insn 150: point = 294
   Insn 149: point = 296
   Insn 148: point = 298
   Insn 147: point = 300
   Insn 146: point = 301
   Insn 145: point = 303
  BB 16
   Insn 218: point = 304
  BB 15
   Insn 216: point = 304
   Insn 215: point = 304
  BB 13
   Insn 761: point = 304
   Insn 184: point = 304
  BB 14
   Insn 211: point = 304
   Insn 210: point = 304
   Insn 209: point = 305
   Insn 208: point = 307
   Insn 207: point = 309
   Insn 206: point = 311
   Insn 205: point = 313
   Insn 204: point = 314
   Insn 203: point = 316
   Insn 202: point = 318
   Insn 201: point = 320
   Insn 200: point = 322
   Insn 199: point = 323
   Insn 198: point = 325
   Insn 197: point = 326
   Insn 196: point = 328
   Insn 195: point = 330
   Insn 194: point = 332
   Insn 193: point = 333
   Insn 192: point = 335
   Insn 191: point = 337
   Insn 190: point = 338
   Insn 189: point = 340
   Insn 188: point = 342
  BB 22
   Insn 276: point = 343
   Insn 275: point = 343
  BB 21
   Insn 273: point = 343
   Insn 272: point = 343
  BB 19
   Insn 765: point = 343
   Insn 237: point = 343
  BB 20
   Insn 268: point = 343
   Insn 267: point = 343
   Insn 266: point = 344
   Insn 265: point = 346
   Insn 264: point = 348
   Insn 263: point = 350
   Insn 262: point = 352
   Insn 261: point = 353
   Insn 260: point = 355
   Insn 259: point = 357
   Insn 258: point = 359
   Insn 257: point = 361
   Insn 256: point = 362
   Insn 255: point = 364
   Insn 254: point = 365
   Insn 253: point = 367
   Insn 252: point = 369
   Insn 251: point = 371
   Insn 250: point = 372
   Insn 249: point = 374
   Insn 248: point = 376
   Insn 247: point = 378
   Insn 246: point = 380
   Insn 810: point = 382
	Hard reg 1 is preferable by r519 with profit 1
   Insn 245: point = 384
   Insn 809: point = 385
	Hard reg 1 is preferable by r519 with profit 1
	Hard reg 2 is preferable by r519 with profit 1
   Insn 244: point = 387
   Insn 243: point = 388
   Insn 242: point = 389
   Insn 241: point = 391
  BB 40
   Insn 633: point = 392
   Insn 632: point = 392
  BB 39
   Insn 630: point = 392
   Insn 629: point = 392
   Insn 627: point = 393
  BB 33
   Insn 773: point = 394
   Insn 413: point = 394
   Insn 412: point = 394
   Insn 411: point = 395
   Insn 812: point = 396
	Hard reg 1 is preferable by r520 with profit 1
   Insn 410: point = 398
   Insn 811: point = 398
	Hard reg 1 is preferable by r520 with profit 1
	Hard reg 0 is preferable by r520 with profit 1
   Insn 409: point = 400
   Insn 408: point = 402
  BB 32
   Insn 406: point = 403
   Insn 405: point = 403
   Insn 403: point = 404
   Insn 402: point = 406
   Insn 401: point = 408
  BB 27
   Insn 769: point = 409
   Insn 332: point = 409
   Insn 331: point = 409
   Insn 330: point = 410
   Insn 329: point = 412
   Insn 328: point = 414
  BB 26
   Insn 788: point = 415
   Insn 324: point = 416
   Insn 323: point = 418
   Insn 322: point = 419
   Insn 321: point = 419
   Insn 320: point = 421
   Insn 319: point = 423
   Insn 318: point = 425
   Insn 317: point = 427
   Insn 316: point = 429
   Insn 315: point = 431
   Insn 314: point = 433
   Insn 313: point = 434
   Insn 312: point = 436
   Insn 311: point = 437
   Insn 310: point = 439
   Insn 309: point = 440
   Insn 308: point = 442
   Insn 307: point = 444
   Insn 306: point = 446
   Insn 305: point = 448
   Insn 304: point = 450
   Insn 303: point = 451
   Insn 302: point = 453
  BB 25
   Insn 300: point = 454
   Insn 299: point = 454
  BB 31
   Insn 398: point = 454
   Insn 397: point = 454
   Insn 396: point = 454
   Insn 395: point = 455
   Insn 394: point = 457
   Insn 393: point = 459
   Insn 392: point = 461
   Insn 391: point = 463
   Insn 390: point = 465
   Insn 389: point = 466
   Insn 388: point = 468
   Insn 387: point = 469
   Insn 386: point = 471
   Insn 385: point = 472
   Insn 384: point = 474
   Insn 383: point = 475
   Insn 382: point = 477
   Insn 381: point = 479
   Insn 380: point = 481
   Insn 379: point = 483
   Insn 378: point = 484
   Insn 377: point = 486
  BB 30
   Insn 375: point = 487
   Insn 374: point = 487
  BB 28
   Insn 771: point = 487
   Insn 336: point = 487
  BB 29
   Insn 370: point = 487
   Insn 369: point = 487
   Insn 368: point = 488
   Insn 367: point = 490
   Insn 366: point = 492
   Insn 365: point = 494
   Insn 364: point = 496
   Insn 363: point = 497
   Insn 362: point = 499
   Insn 361: point = 501
   Insn 360: point = 503
   Insn 359: point = 505
   Insn 358: point = 507
   Insn 357: point = 509
   Insn 356: point = 510
   Insn 355: point = 512
   Insn 354: point = 513
   Insn 353: point = 515
   Insn 352: point = 516
   Insn 351: point = 518
   Insn 350: point = 519
   Insn 349: point = 521
   Insn 348: point = 523
   Insn 347: point = 525
   Insn 346: point = 526
   Insn 345: point = 528
   Insn 344: point = 530
   Insn 343: point = 532
   Insn 342: point = 534
   Insn 341: point = 535
   Insn 340: point = 537
  BB 38
   Insn 624: point = 538
  BB 35
   Insn 776: point = 538
  BB 36
   Insn 597: point = 538
   Insn 596: point = 538
   Insn 595: point = 538
   Insn 594: point = 539
   Insn 593: point = 540
   Insn 592: point = 540
   Insn 591: point = 541
   Insn 814: point = 542
	Hard reg 0 is preferable by r522 with profit 1
   Insn 813: point = 544
	Hard reg 1 is preferable by r521 with profit 1
   Insn 590: point = 546
   Insn 589: point = 547
   Insn 588: point = 548
   Insn 587: point = 549
   Insn 586: point = 550
   Insn 585: point = 550
   Insn 584: point = 551
   Insn 583: point = 552
   Insn 582: point = 553
   Insn 581: point = 554
   Insn 580: point = 555
   Insn 579: point = 556
   Insn 578: point = 557
   Insn 577: point = 559
   Insn 576: point = 560
   Insn 575: point = 561
   Insn 574: point = 562
   Insn 573: point = 562
   Insn 572: point = 563
   Insn 571: point = 564
   Insn 570: point = 565
   Insn 569: point = 566
   Insn 568: point = 567
   Insn 567: point = 568
   Insn 566: point = 569
   Insn 565: point = 570
   Insn 564: point = 571
   Insn 563: point = 572
   Insn 562: point = 573
   Insn 561: point = 574
   Insn 560: point = 575
   Insn 559: point = 576
   Insn 558: point = 577
   Insn 557: point = 578
   Insn 556: point = 579
   Insn 555: point = 580
   Insn 554: point = 582
   Insn 553: point = 583
   Insn 552: point = 584
   Insn 551: point = 584
   Insn 550: point = 585
   Insn 549: point = 586
   Insn 548: point = 587
   Insn 547: point = 588
   Insn 546: point = 589
   Insn 545: point = 590
   Insn 544: point = 591
   Insn 543: point = 592
   Insn 542: point = 594
   Insn 541: point = 595
   Insn 540: point = 596
   Insn 539: point = 597
  BB 34
   Insn 530: point = 598
   Insn 529: point = 598
   Insn 528: point = 599
   Insn 527: point = 600
   Insn 526: point = 601
   Insn 525: point = 601
   Insn 524: point = 602
   Insn 523: point = 603
   Insn 522: point = 604
   Insn 521: point = 606
   Insn 520: point = 608
   Insn 519: point = 610
   Insn 518: point = 612
   Insn 517: point = 614
   Insn 516: point = 615
   Insn 515: point = 617
   Insn 514: point = 618
   Insn 513: point = 620
   Insn 512: point = 622
   Insn 511: point = 624
   Insn 510: point = 626
   Insn 509: point = 627
   Insn 508: point = 629
   Insn 507: point = 630
   Insn 506: point = 632
   Insn 505: point = 634
   Insn 504: point = 636
   Insn 503: point = 638
   Insn 502: point = 640
   Insn 501: point = 641
   Insn 500: point = 643
   Insn 499: point = 644
   Insn 498: point = 645
   Insn 497: point = 647
   Insn 496: point = 649
   Insn 495: point = 651
   Insn 494: point = 652
   Insn 493: point = 654
   Insn 492: point = 656
   Insn 491: point = 657
   Insn 490: point = 659
   Insn 489: point = 661
   Insn 488: point = 663
   Insn 487: point = 665
   Insn 486: point = 667
   Insn 485: point = 669
   Insn 484: point = 670
   Insn 483: point = 672
   Insn 482: point = 673
   Insn 481: point = 674
   Insn 480: point = 676
   Insn 479: point = 678
   Insn 478: point = 680
   Insn 477: point = 681
   Insn 476: point = 683
   Insn 475: point = 685
   Insn 474: point = 686
   Insn 473: point = 688
   Insn 472: point = 690
   Insn 471: point = 692
   Insn 470: point = 694
   Insn 469: point = 696
   Insn 468: point = 698
   Insn 467: point = 699
   Insn 466: point = 701
   Insn 465: point = 702
   Insn 464: point = 703
   Insn 463: point = 705
   Insn 462: point = 707
   Insn 461: point = 709
   Insn 460: point = 711
   Insn 787: point = 713
   Insn 458: point = 715
   Insn 457: point = 717
   Insn 456: point = 719
   Insn 455: point = 721
   Insn 454: point = 723
   Insn 453: point = 725
   Insn 452: point = 727
   Insn 451: point = 728
   Insn 450: point = 729
   Insn 449: point = 730
   Insn 448: point = 732
   Insn 447: point = 734
   Insn 446: point = 736
   Insn 445: point = 738
   Insn 444: point = 740
   Insn 443: point = 742
   Insn 442: point = 743
   Insn 441: point = 745
   Insn 440: point = 746
   Insn 439: point = 747
   Insn 438: point = 749
   Insn 437: point = 751
   Insn 436: point = 753
   Insn 435: point = 755
   Insn 786: point = 757
   Insn 796: point = 759
   Insn 795: point = 760
   Insn 794: point = 760
   Insn 793: point = 761
   Insn 433: point = 761
   Insn 432: point = 763
   Insn 431: point = 765
   Insn 430: point = 767
   Insn 429: point = 769
   Insn 428: point = 771
   Insn 427: point = 773
   Insn 426: point = 774
   Insn 425: point = 775
   Insn 424: point = 776
   Insn 423: point = 778
   Insn 422: point = 780
   Insn 421: point = 782
   Insn 420: point = 784
   Insn 419: point = 786
   Insn 418: point = 787
   Insn 417: point = 789
  BB 46
   Insn 681: point = 790
  BB 45
   Insn 679: point = 790
   Insn 678: point = 790
  BB 43
   Insn 782: point = 790
   Insn 647: point = 790
  BB 44
   Insn 674: point = 790
   Insn 673: point = 790
   Insn 672: point = 791
   Insn 671: point = 793
   Insn 670: point = 795
   Insn 669: point = 797
   Insn 668: point = 799
   Insn 667: point = 800
   Insn 666: point = 802
   Insn 665: point = 804
   Insn 664: point = 805
   Insn 663: point = 807
   Insn 662: point = 809
   Insn 661: point = 810
   Insn 660: point = 812
   Insn 659: point = 814
   Insn 658: point = 816
   Insn 657: point = 817
   Insn 656: point = 819
   Insn 655: point = 821
   Insn 654: point = 823
   Insn 653: point = 825
   Insn 652: point = 826
   Insn 651: point = 828
  BB 49
   Insn 706: point = 829
   Insn 705: point = 829
   Insn 704: point = 830
   Insn 703: point = 832
   Insn 702: point = 834
   Insn 816: point = 835
	Hard reg 1 is preferable by r523 with profit 1
   Insn 701: point = 837
   Insn 815: point = 837
	Hard reg 1 is preferable by r523 with profit 1
	Hard reg 0 is preferable by r523 with profit 1
   Insn 700: point = 839
   Insn 699: point = 841
   Insn 698: point = 842
   Insn 697: point = 844
   Insn 696: point = 846
   Insn 695: point = 848
   Insn 694: point = 849
   Insn 693: point = 851
 r59: [25..25] [2..4]
 r60: [243..249]
 r61: [245..246]
 r62: [243..244]
 r63: [241..242]
 r64: [237..238]
 r65: [207..218]
 r66: [223..234]
 r67: [198..202]
 r68: [195..196]
 r69: [189..190]
 r70: [187..188]
 r71: [181..182]
 r72: [179..180]
 r73: [275..276]
 r74: [270..272]
 r75: [256..269]
 r76: [260..266]
 r77: [262..263]
 r78: [260..261]
 r79: [258..259]
 r80: [256..257]
 r81: [172..176]
 r82: [169..170]
 r83: [160..164]
 r84: [157..158]
 r85: [141..156]
 r86: [143..153]
 r87: [149..150]
 r88: [147..148]
 r89: [145..146]
 r90: [143..144]
 r91: [140..142]
 r92: [125..135]
 r93: [131..132]
 r94: [129..130]
 r95: [127..128]
 r96: [125..126]
 r97: [122..124]
 r98: [111..119]
 r99: [115..116]
 r100: [113..114]
 r101: [111..112]
 r102: [108..110]
 r103: [104..105]
 r104: [98..99]
 r105: [96..97]
 r106: [295..301]
 r107: [297..298]
 r108: [295..296]
 r109: [279..294]
 r110: [283..291]
 r111: [287..288]
 r112: [285..286]
 r113: [283..284]
 r114: [281..282]
 r115: [279..280]
 r116: [92..93]
 r117: [82..83]
 r118: [339..340]
 r119: [336..338]
 r120: [334..335]
 r121: [327..333]
 r122: [329..330]
 r123: [327..328]
 r124: [304..326]
 r125: [317..323]
 r126: [319..320]
 r127: [317..318]
 r128: [315..316]
 r129: [308..314]
 r130: [310..311]
 r131: [308..309]
 r132: [306..307]
 r133: [304..305]
 r134: [74..75]
 r135: [375..389]
 r136: [381..382]
 r137: [379..380]
 r138: [377..378]
 r139: [375..376]
 r140: [373..374]
 r141: [366..372]
 r142: [368..369]
 r143: [366..367]
 r144: [343..365]
 r145: [356..362]
 r146: [358..359]
 r147: [356..357]
 r148: [354..355]
 r149: [347..353]
 r150: [349..350]
 r151: [347..348]
 r152: [345..346]
 r153: [343..344]
 r154: [70..71]
 r155: [68..69]
 r156: [65..67]
 r157: [61..62]
 r158: [55..56]
 r159: [53..54]
 r160: [443..451]
 r161: [447..448]
 r162: [445..446]
 r163: [443..444]
 r164: [441..442]
 r165: [438..440]
 r166: [438..439]
 r167: [420..437]
 r168: [424..434]
 r169: [430..431]
 r170: [428..429]
 r171: [426..427]
 r172: [424..425]
 r173: [422..423]
 r174: [420..421]
 r175: [417..419]
 r176: [417..418]
 r177: [415..416]
 r178: [411..412]
 r179: [405..406]
 r180: [403..404]
 r181: [529..535]
 r182: [531..532]
 r183: [529..530]
 r184: [527..528]
 r185: [520..526]
 r186: [522..523]
 r187: [520..521]
 r188: [487..519]
 r189: [500..516]
 r190: [511..513]
 r191: [508..510]
 r192: [506..507]
 r193: [504..505]
 r194: [502..503]
 r195: [500..501]
 r196: [498..499]
 r197: [491..497]
 r198: [493..494]
 r199: [491..492]
 r200: [489..490]
 r201: [487..488]
 r202: [476..484]
 r203: [480..481]
 r204: [478..479]
 r205: [476..477]
 r206: [454..475]
 r207: [458..472]
 r208: [467..469]
 r209: [464..466]
 r210: [462..463]
 r211: [460..461]
 r212: [458..459]
 r213: [456..457]
 r214: [454..455]
 r215: [399..400]
 r216: [394..396]
 r217: [392..393]
 r218: [779..787]
 r219: [783..784]
 r220: [781..782]
 r221: [779..780]
 r222: [777..778]
 r223: [746..776]
 r224: [752..775]
 r225: [768..774]
 r226: [770..771]
 r227: [768..769]
 r228: [766..767]
 r229: [764..765]
 r230: [762..763]
 r231: [758..761]
 r232: [756..757]
 r233: [754..755]
 r234: [752..753]
 r235: [750..751]
 r236: [748..749]
 r237: [746..747]
 r238: [735..743]
 r239: [739..740]
 r240: [737..738]
 r241: [735..736]
 r242: [733..734]
 r243: [731..732]
 r244: [702..730]
 r245: [708..729]
 r246: [722..728]
 r247: [724..725]
 r248: [722..723]
 r249: [720..721]
 r250: [718..719]
 r251: [716..717]
 r252: [714..715]
 r253: [712..713]
 r254: [710..711]
 r255: [708..709]
 r256: [706..707]
 r257: [704..705]
 r258: [702..703]
 r259: [691..699]
 r260: [695..696]
 r261: [693..694]
 r262: [691..692]
 r263: [689..690]
 r264: [687..688]
 r265: [673..686]
 r266: [682..683]
 r267: [679..681]
 r268: [677..678]
 r269: [675..676]
 r270: [673..674]
 r271: [662..670]
 r272: [666..667]
 r273: [664..665]
 r274: [662..663]
 r275: [660..661]
 r276: [658..659]
 r277: [644..657]
 r278: [653..654]
 r279: [650..652]
 r280: [648..649]
 r281: [646..647]
 r282: [644..645]
 r283: [633..641]
 r284: [637..638]
 r285: [635..636]
 r286: [633..634]
 r287: [631..632]
 r288: [603..630]
 r289: [621..627]
 r290: [623..624]
 r291: [621..622]
 r292: [619..620]
 r293: [602..618]
 r294: [607..615]
 r295: [611..612]
 r296: [609..610]
 r297: [607..608]
 r298: [605..606]
 r299: [601..604]
 r300: [598..600]
 r301: [598..599]
 r302: [588..597]
 r303: [587..596]
 r304: [586..595]
 r305: [585..592]
 r306: [565..583]
 r307: [562..580]
 r308: [554..561]
 r309: [551..560]
 r310: [550..557]
 r311: [540..549]
 r312: [13..24]
 r313: [12..23]
 r314: [21..22]
 r315: [11..20]
 r316: [10..17]
 r317: [820..826]
 r318: [822..823]
 r319: [820..821]
 r320: [818..819]
 r321: [811..817]
 r322: [813..814]
 r323: [811..812]
 r324: [790..810]
 r325: [806..807]
 r326: [803..805]
 r327: [801..802]
 r328: [794..800]
 r329: [796..797]
 r330: [794..795]
 r331: [792..793]
 r332: [790..791]
 r333: [47..48]
 r334: [843..849]
 r335: [845..846]
 r336: [843..844]
 r337: [829..842]
 r338: [838..839]
 r339: [833..835]
 r340: [831..832]
 r341: [829..830]
 r342: [30..39]
 r343: [29..38]
 r344: [28..37]
 r345: [27..34]
 r346: [0..1]
 r347: [250..252]
 r348: [253..255]
 r349: [251..254]
 r350: [247..248]
 r351: [239..240]
 r352: [219..220]
 r353: [206..217]
 r354: [205..216]
 r355: [212..215]
 r356: [208..214]
 r357: [210..213]
 r358: [235..236]
 r359: [222..233]
 r360: [221..232]
 r361: [228..231]
 r362: [224..230]
 r363: [226..229]
 r364: [203..204]
 r365: [200..201]
 r366: [193..194]
 r367: [191..192]
 r368: [185..186]
 r369: [277..278]
 r370: [270..271]
 r371: [267..268]
 r372: [264..265]
 r373: [183..184]
 r374: [177..178]
 r375: [174..175]
 r376: [167..168]
 r377: [165..166]
 r378: [162..163]
 r379: [154..155]
 r380: [151..152]
 r381: [138..139]
 r382: [136..137]
 r383: [133..134]
 r384: [122..123]
 r385: [120..121]
 r386: [117..118]
 r387: [108..109]
 r388: [106..107]
 r389: [102..103]
 r390: [302..303]
 r391: [299..300]
 r392: [292..293]
 r393: [289..290]
 r394: [100..101]
 r395: [94..95]
 r396: [90..91]
 r397: [88..89]
 r398: [86..87]
 r399: [341..342]
 r400: [336..337]
 r401: [331..332]
 r402: [324..325]
 r403: [321..322]
 r404: [312..313]
 r405: [84..85]
 r408: [78..79]
 r409: [80..81]
 r410: [390..391]
 r411: [384..388]
 r412: [386..387]
 r413: [370..371]
 r414: [363..364]
 r415: [360..361]
 r416: [351..352]
 r417: [76..77]
 r418: [72..73]
 r419: [65..66]
 r420: [63..64]
 r421: [59..60]
 r422: [452..453]
 r423: [449..450]
 r424: [435..436]
 r425: [432..433]
 r426: [413..414]
 r427: [409..410]
 r428: [536..537]
 r429: [533..534]
 r430: [524..525]
 r431: [517..518]
 r432: [514..515]
 r433: [511..512]
 r434: [508..509]
 r435: [495..496]
 r436: [485..486]
 r437: [482..483]
 r438: [473..474]
 r439: [470..471]
 r440: [467..468]
 r441: [464..465]
 r442: [407..408]
 r443: [401..402]
 r444: [394..395]
 r445: [788..789]
 r446: [785..786]
 r447: [772..773]
 r448: [744..745]
 r449: [741..742]
 r450: [726..727]
 r451: [700..701]
 r452: [697..698]
 r453: [684..685]
 r454: [679..680]
 r455: [671..672]
 r456: [668..669]
 r457: [655..656]
 r458: [650..651]
 r459: [642..643]
 r460: [639..640]
 r461: [628..629]
 r462: [625..626]
 r463: [616..617]
 r464: [613..614]
 r465: [593..594]
 r466: [584..591]
 r467: [589..590]
 r468: [581..582]
 r469: [564..579]
 r470: [563..578]
 r471: [576..577]
 r472: [574..575]
 r473: [572..573]
 r474: [570..571]
 r475: [568..569]
 r476: [566..567]
 r477: [558..559]
 r478: [553..556]
 r479: [552..555]
 r480: [545..548]
 r481: [541..547]
 r482: [543..546]
 r483: [538..539]
 r484: [18..19]
 r485: [9..16]
 r486: [14..15]
 r487: [6..8]
 r488: [5..7]
 r489: [57..58]
 r490: [827..828]
 r491: [824..825]
 r492: [815..816]
 r493: [808..809]
 r494: [803..804]
 r495: [798..799]
 r496: [51..52]
 r497: [850..851]
 r498: [847..848]
 r499: [840..841]
 r500: [833..834]
 r501: [49..50]
 r502: [44..46]
 r503: [44..45]
 r504: [41..43]
 r505: [40..42]
 r506: [35..36]
 r507: [26..33]
 r508: [31..32]
 r510: [759..760]
 r511: [208..211]
 r512: [208..209]
 r513: [224..227]
 r514: [224..225]
 r515: [197..199]
 r516: [273..274]
 r517: [171..173]
 r518: [159..161]
 r519: [383..385]
 r520: [397..398]
 r521: [541..544]
 r522: [541..542]
 r523: [836..837]
Compressing live ranges: from 852 to 695 - 81%
Ranges after the compression:
 r59: [12..12] [2..3]
 r60: [187..192]
 r61: [189..190]
 r62: [187..188]
 r63: [185..186]
 r64: [181..182]
 r65: [165..170]
 r66: [173..178]
 r67: [159..162]
 r68: [157..158]
 r69: [151..152]
 r70: [149..150]
 r71: [143..144]
 r72: [141..142]
 r73: [213..214]
 r74: [209..210]
 r75: [197..208]
 r76: [201..206]
 r77: [203..204]
 r78: [201..202]
 r79: [199..200]
 r80: [197..198]
 r81: [135..138]
 r82: [133..134]
 r83: [125..128]
 r84: [123..124]
 r85: [109..122]
 r86: [111..120]
 r87: [117..118]
 r88: [115..116]
 r89: [113..114]
 r90: [111..112]
 r91: [109..110]
 r92: [95..104]
 r93: [101..102]
 r94: [99..100]
 r95: [97..98]
 r96: [95..96]
 r97: [93..94]
 r98: [83..90]
 r99: [87..88]
 r100: [85..86]
 r101: [83..84]
 r102: [81..82]
 r103: [77..78]
 r104: [71..72]
 r105: [69..70]
 r106: [231..236]
 r107: [233..234]
 r108: [231..232]
 r109: [217..230]
 r110: [221..228]
 r111: [225..226]
 r112: [223..224]
 r113: [221..222]
 r114: [219..220]
 r115: [217..218]
 r116: [65..66]
 r117: [55..56]
 r118: [269..270]
 r119: [267..268]
 r120: [265..266]
 r121: [259..264]
 r122: [261..262]
 r123: [259..260]
 r124: [239..258]
 r125: [251..256]
 r126: [253..254]
 r127: [251..252]
 r128: [249..250]
 r129: [243..248]
 r130: [245..246]
 r131: [243..244]
 r132: [241..242]
 r133: [239..240]
 r134: [47..48]
 r135: [301..312]
 r136: [307..308]
 r137: [305..306]
 r138: [303..304]
 r139: [301..302]
 r140: [299..300]
 r141: [293..298]
 r142: [295..296]
 r143: [293..294]
 r144: [273..292]
 r145: [285..290]
 r146: [287..288]
 r147: [285..286]
 r148: [283..284]
 r149: [277..282]
 r150: [279..280]
 r151: [277..278]
 r152: [275..276]
 r153: [273..274]
 r154: [43..44]
 r155: [41..42]
 r156: [39..40]
 r157: [35..36]
 r158: [29..30]
 r159: [27..28]
 r160: [361..368]
 r161: [365..366]
 r162: [363..364]
 r163: [361..362]
 r164: [359..360]
 r165: [357..358]
 r166: [357..358]
 r167: [341..356]
 r168: [345..354]
 r169: [351..352]
 r170: [349..350]
 r171: [347..348]
 r172: [345..346]
 r173: [343..344]
 r174: [341..342]
 r175: [339..340]
 r176: [339..340]
 r177: [337..338]
 r178: [333..334]
 r179: [327..328]
 r180: [325..326]
 r181: [435..440]
 r182: [437..438]
 r183: [435..436]
 r184: [433..434]
 r185: [427..432]
 r186: [429..430]
 r187: [427..428]
 r188: [399..426]
 r189: [411..424]
 r190: [421..422]
 r191: [419..420]
 r192: [417..418]
 r193: [415..416]
 r194: [413..414]
 r195: [411..412]
 r196: [409..410]
 r197: [403..408]
 r198: [405..406]
 r199: [403..404]
 r200: [401..402]
 r201: [399..400]
 r202: [389..396]
 r203: [393..394]
 r204: [391..392]
 r205: [389..390]
 r206: [371..388]
 r207: [375..386]
 r208: [383..384]
 r209: [381..382]
 r210: [379..380]
 r211: [377..378]
 r212: [375..376]
 r213: [373..374]
 r214: [371..372]
 r215: [321..322]
 r216: [317..318]
 r217: [315..316]
 r218: [631..638]
 r219: [635..636]
 r220: [633..634]
 r221: [631..632]
 r222: [629..630]
 r223: [603..628]
 r224: [609..628]
 r225: [623..628]
 r226: [625..626]
 r227: [623..624]
 r228: [621..622]
 r229: [619..620]
 r230: [617..618]
 r231: [615..616]
 r232: [613..614]
 r233: [611..612]
 r234: [609..610]
 r235: [607..608]
 r236: [605..606]
 r237: [603..604]
 r238: [593..600]
 r239: [597..598]
 r240: [595..596]
 r241: [593..594]
 r242: [591..592]
 r243: [589..590]
 r244: [563..588]
 r245: [569..588]
 r246: [583..588]
 r247: [585..586]
 r248: [583..584]
 r249: [581..582]
 r250: [579..580]
 r251: [577..578]
 r252: [575..576]
 r253: [573..574]
 r254: [571..572]
 r255: [569..570]
 r256: [567..568]
 r257: [565..566]
 r258: [563..564]
 r259: [553..560]
 r260: [557..558]
 r261: [555..556]
 r262: [553..554]
 r263: [551..552]
 r264: [549..550]
 r265: [537..548]
 r266: [545..546]
 r267: [543..544]
 r268: [541..542]
 r269: [539..540]
 r270: [537..538]
 r271: [527..534]
 r272: [531..532]
 r273: [529..530]
 r274: [527..528]
 r275: [525..526]
 r276: [523..524]
 r277: [511..522]
 r278: [519..520]
 r279: [517..518]
 r280: [515..516]
 r281: [513..514]
 r282: [511..512]
 r283: [501..508]
 r284: [505..506]
 r285: [503..504]
 r286: [501..502]
 r287: [499..500]
 r288: [475..498]
 r289: [491..496]
 r290: [493..494]
 r291: [491..492]
 r292: [489..490]
 r293: [475..488]
 r294: [479..486]
 r295: [483..484]
 r296: [481..482]
 r297: [479..480]
 r298: [477..478]
 r299: [475..476]
 r300: [473..474]
 r301: [473..474]
 r302: [469..472]
 r303: [469..472]
 r304: [469..472]
 r305: [469..470]
 r306: [455..468]
 r307: [455..466]
 r308: [451..454]
 r309: [451..454]
 r310: [451..452]
 r311: [445..450]
 r312: [6..11]
 r313: [6..11]
 r314: [10..11]
 r315: [6..9]
 r316: [6..7]
 r317: [667..672]
 r318: [669..670]
 r319: [667..668]
 r320: [665..666]
 r321: [659..664]
 r322: [661..662]
 r323: [659..660]
 r324: [641..658]
 r325: [655..656]
 r326: [653..654]
 r327: [651..652]
 r328: [645..650]
 r329: [647..648]
 r330: [645..646]
 r331: [643..644]
 r332: [641..642]
 r333: [21..22]
 r334: [687..692]
 r335: [689..690]
 r336: [687..688]
 r337: [675..686]
 r338: [683..684]
 r339: [679..680]
 r340: [677..678]
 r341: [675..676]
 r342: [13..16]
 r343: [13..16]
 r344: [13..16]
 r345: [13..14]
 r346: [0..1]
 r347: [193..194]
 r348: [195..196]
 r349: [193..196]
 r350: [191..192]
 r351: [183..184]
 r352: [171..172]
 r353: [165..170]
 r354: [165..170]
 r355: [169..170]
 r356: [165..170]
 r357: [167..170]
 r358: [179..180]
 r359: [173..178]
 r360: [173..178]
 r361: [177..178]
 r362: [173..178]
 r363: [175..178]
 r364: [163..164]
 r365: [161..162]
 r366: [155..156]
 r367: [153..154]
 r368: [147..148]
 r369: [215..216]
 r370: [209..210]
 r371: [207..208]
 r372: [205..206]
 r373: [145..146]
 r374: [139..140]
 r375: [137..138]
 r376: [131..132]
 r377: [129..130]
 r378: [127..128]
 r379: [121..122]
 r380: [119..120]
 r381: [107..108]
 r382: [105..106]
 r383: [103..104]
 r384: [93..94]
 r385: [91..92]
 r386: [89..90]
 r387: [81..82]
 r388: [79..80]
 r389: [75..76]
 r390: [237..238]
 r391: [235..236]
 r392: [229..230]
 r393: [227..228]
 r394: [73..74]
 r395: [67..68]
 r396: [63..64]
 r397: [61..62]
 r398: [59..60]
 r399: [271..272]
 r400: [267..268]
 r401: [263..264]
 r402: [257..258]
 r403: [255..256]
 r404: [247..248]
 r405: [57..58]
 r408: [51..52]
 r409: [53..54]
 r410: [313..314]
 r411: [309..312]
 r412: [311..312]
 r413: [297..298]
 r414: [291..292]
 r415: [289..290]
 r416: [281..282]
 r417: [49..50]
 r418: [45..46]
 r419: [39..40]
 r420: [37..38]
 r421: [33..34]
 r422: [369..370]
 r423: [367..368]
 r424: [355..356]
 r425: [353..354]
 r426: [335..336]
 r427: [331..332]
 r428: [441..442]
 r429: [439..440]
 r430: [431..432]
 r431: [425..426]
 r432: [423..424]
 r433: [421..422]
 r434: [419..420]
 r435: [407..408]
 r436: [397..398]
 r437: [395..396]
 r438: [387..388]
 r439: [385..386]
 r440: [383..384]
 r441: [381..382]
 r442: [329..330]
 r443: [323..324]
 r444: [317..318]
 r445: [639..640]
 r446: [637..638]
 r447: [627..628]
 r448: [601..602]
 r449: [599..600]
 r450: [587..588]
 r451: [561..562]
 r452: [559..560]
 r453: [547..548]
 r454: [543..544]
 r455: [535..536]
 r456: [533..534]
 r457: [521..522]
 r458: [517..518]
 r459: [509..510]
 r460: [507..508]
 r461: [497..498]
 r462: [495..496]
 r463: [487..488]
 r464: [485..486]
 r465: [471..472]
 r466: [469..470]
 r467: [469..470]
 r468: [467..468]
 r469: [455..466]
 r470: [455..466]
 r471: [465..466]
 r472: [463..464]
 r473: [461..462]
 r474: [459..460]
 r475: [457..458]
 r476: [455..456]
 r477: [453..454]
 r478: [451..452]
 r479: [451..452]
 r480: [449..450]
 r481: [445..450]
 r482: [447..450]
 r483: [443..444]
 r484: [8..9]
 r485: [6..7]
 r486: [6..7]
 r487: [4..5]
 r488: [4..5]
 r489: [31..32]
 r490: [673..674]
 r491: [671..672]
 r492: [663..664]
 r493: [657..658]
 r494: [653..654]
 r495: [649..650]
 r496: [25..26]
 r497: [693..694]
 r498: [691..692]
 r499: [685..686]
 r500: [679..680]
 r501: [23..24]
 r502: [19..20]
 r503: [19..20]
 r504: [17..18]
 r505: [17..18]
 r506: [15..16]
 r507: [13..14]
 r508: [13..14]
 r510: [615..616]
 r511: [165..168]
 r512: [165..166]
 r513: [173..176]
 r514: [173..174]
 r515: [159..160]
 r516: [211..212]
 r517: [135..136]
 r518: [125..126]
 r519: [309..310]
 r520: [319..320]
 r521: [445..448]
 r522: [445..446]
 r523: [681..682]
	 Assigning to 511 (cl=DIREG, orig=355, freq=2, tfirst=511, tfreq=2)...
	   Assign 5 to reload r511 (freq=2)
	 Assigning to 512 (cl=CREG, orig=357, freq=2, tfirst=512, tfreq=2)...
	   Assign 2 to reload r512 (freq=2)
	 Assigning to 513 (cl=DIREG, orig=361, freq=2, tfirst=513, tfreq=2)...
	   Assign 5 to reload r513 (freq=2)
	 Assigning to 514 (cl=CREG, orig=363, freq=2, tfirst=514, tfreq=2)...
	   Assign 2 to reload r514 (freq=2)
	 Assigning to 521 (cl=DIREG, orig=480, freq=2, tfirst=521, tfreq=2)...
	   Assign 5 to reload r521 (freq=2)
	 Assigning to 522 (cl=CREG, orig=482, freq=2, tfirst=522, tfreq=2)...
	   Assign 2 to reload r522 (freq=2)
	 Assigning to 515 (cl=GENERAL_REGS, orig=68, freq=3, tfirst=515, tfreq=3)...
	   Assign 1 to reload r515 (freq=3)
	 Assigning to 516 (cl=GENERAL_REGS, orig=74, freq=3, tfirst=516, tfreq=3)...
	   Assign 0 to reload r516 (freq=3)
	 Assigning to 517 (cl=GENERAL_REGS, orig=82, freq=3, tfirst=517, tfreq=3)...
	   Assign 1 to reload r517 (freq=3)
	 Assigning to 518 (cl=GENERAL_REGS, orig=84, freq=3, tfirst=518, tfreq=3)...
	   Assign 1 to reload r518 (freq=3)
	 Assigning to 519 (cl=GENERAL_REGS, orig=136, freq=3, tfirst=519, tfreq=3)...
	   Assign 2 to reload r519 (freq=3)
	 Assigning to 520 (cl=GENERAL_REGS, orig=216, freq=3, tfirst=520, tfreq=3)...
	   Assign 0 to reload r520 (freq=3)
	 Assigning to 523 (cl=GENERAL_REGS, orig=339, freq=3, tfirst=523, tfreq=3)...
	   Assign 0 to reload r523 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=480, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 737
changing reg in insn 619
changing reg in insn 740
changing reg in insn 14
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 33
changing reg in insn 42
changing reg in insn 49
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 73
changing reg in insn 76
changing reg in insn 76
changing reg in insn 76
changing reg in insn 84
changing reg in insn 78
changing reg in insn 82
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 114
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 120
changing reg in insn 126
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 130
changing reg in insn 135
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 167
changing reg in insn 146
changing reg in insn 150
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 159
changing reg in insn 152
changing reg in insn 157
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 171
changing reg in insn 173
changing reg in insn 222
changing reg in insn 224
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 197
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 210
changing reg in insn 199
changing reg in insn 203
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 208
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 280
changing reg in insn 282
changing reg in insn 242
changing reg in insn 249
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 254
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 267
changing reg in insn 256
changing reg in insn 260
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 265
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 290
changing reg in insn 293
changing reg in insn 294
changing reg in insn 637
changing reg in insn 638
changing reg in insn 638
changing reg in insn 640
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 321
changing reg in insn 313
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 321
changing reg in insn 324
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 788
changing reg in insn 329
changing reg in insn 330
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 405
changing reg in insn 341
changing reg in insn 345
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 350
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 369
changing reg in insn 352
changing reg in insn 354
changing reg in insn 356
changing reg in insn 356
changing reg in insn 356
changing reg in insn 358
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 367
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 369
changing reg in insn 378
changing reg in insn 383
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 396
changing reg in insn 385
changing reg in insn 387
changing reg in insn 389
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 409
changing reg in insn 412
changing reg in insn 627
changing reg in insn 629
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 440
changing reg in insn 425
changing reg in insn 426
changing reg in insn 430
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 786
changing reg in insn 786
changing reg in insn 435
changing reg in insn 435
changing reg in insn 436
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 444
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 449
changing reg in insn 449
changing reg in insn 465
changing reg in insn 450
changing reg in insn 462
changing reg in insn 451
changing reg in insn 455
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 787
changing reg in insn 787
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 469
changing reg in insn 470
changing reg in insn 470
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 482
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 479
changing reg in insn 479
changing reg in insn 480
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 491
changing reg in insn 491
changing reg in insn 499
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 496
changing reg in insn 497
changing reg in insn 497
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 506
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 523
changing reg in insn 509
changing reg in insn 513
changing reg in insn 511
changing reg in insn 512
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 524
changing reg in insn 516
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 525
changing reg in insn 527
changing reg in insn 529
changing reg in insn 528
changing reg in insn 529
changing reg in insn 539
changing reg in insn 547
changing reg in insn 540
changing reg in insn 548
changing reg in insn 541
changing reg in insn 549
changing reg in insn 543
changing reg in insn 550
changing reg in insn 553
changing reg in insn 570
changing reg in insn 555
changing reg in insn 573
changing reg in insn 575
changing reg in insn 581
changing reg in insn 576
changing reg in insn 584
changing reg in insn 578
changing reg in insn 585
changing reg in insn 587
changing reg in insn 592
changing reg in insn 599
changing reg in insn 608
changing reg in insn 600
changing reg in insn 609
changing reg in insn 601
changing reg in insn 602
changing reg in insn 602
changing reg in insn 610
changing reg in insn 604
changing reg in insn 611
changing reg in insn 652
changing reg in insn 656
changing reg in insn 654
changing reg in insn 655
changing reg in insn 655
changing reg in insn 656
changing reg in insn 656
changing reg in insn 657
changing reg in insn 657
changing reg in insn 661
changing reg in insn 659
changing reg in insn 660
changing reg in insn 660
changing reg in insn 661
changing reg in insn 661
changing reg in insn 673
changing reg in insn 663
changing reg in insn 664
changing reg in insn 664
changing reg in insn 666
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 671
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 671
changing reg in insn 672
changing reg in insn 672
changing reg in insn 673
changing reg in insn 710
changing reg in insn 712
changing reg in insn 694
changing reg in insn 698
changing reg in insn 696
changing reg in insn 697
changing reg in insn 697
changing reg in insn 698
changing reg in insn 698
changing reg in insn 705
changing reg in insn 700
changing reg in insn 703
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 705
changing reg in insn 723
changing reg in insn 731
changing reg in insn 724
changing reg in insn 732
changing reg in insn 725
changing reg in insn 733
changing reg in insn 727
changing reg in insn 734
changing reg in insn 740
changing reg in insn 744
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 28
changing reg in insn 35
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 31
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 44
changing reg in insn 51
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 88
changing reg in insn 89
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 163
changing reg in insn 164
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 205
changing reg in insn 206
changing reg in insn 221
changing reg in insn 222
changing reg in insn 231
changing reg in insn 232
changing reg in insn 230
changing reg in insn 231
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 244
changing reg in insn 251
changing reg in insn 252
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 262
changing reg in insn 263
changing reg in insn 279
changing reg in insn 280
changing reg in insn 285
changing reg in insn 286
changing reg in insn 289
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 302
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 347
changing reg in insn 348
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 364
changing reg in insn 365
changing reg in insn 377
changing reg in insn 378
changing reg in insn 379
changing reg in insn 380
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 390
changing reg in insn 401
changing reg in insn 402
changing reg in insn 408
changing reg in insn 409
changing reg in insn 411
changing reg in insn 412
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 427
changing reg in insn 428
changing reg in insn 441
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 452
changing reg in insn 453
changing reg in insn 466
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 475
changing reg in insn 476
changing reg in insn 478
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 492
changing reg in insn 493
changing reg in insn 495
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 511
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 551
changing reg in insn 545
changing reg in insn 546
changing reg in insn 554
changing reg in insn 555
changing reg in insn 556
changing reg in insn 571
changing reg in insn 557
changing reg in insn 572
changing reg in insn 558
changing reg in insn 559
changing reg in insn 560
changing reg in insn 561
changing reg in insn 562
changing reg in insn 563
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 567
changing reg in insn 568
changing reg in insn 569
changing reg in insn 577
changing reg in insn 578
changing reg in insn 579
changing reg in insn 582
changing reg in insn 580
changing reg in insn 583
changing reg in insn 588
changing reg in insn 591
changing reg in insn 589
changing reg in insn 591
changing reg in insn 591
changing reg in insn 590
changing reg in insn 594
changing reg in insn 595
changing reg in insn 603
changing reg in insn 604
changing reg in insn 605
changing reg in insn 612
changing reg in insn 606
changing reg in insn 607
changing reg in insn 614
changing reg in insn 616
changing reg in insn 615
changing reg in insn 617
changing reg in insn 636
changing reg in insn 637
changing reg in insn 651
changing reg in insn 652
changing reg in insn 653
changing reg in insn 654
changing reg in insn 658
changing reg in insn 659
changing reg in insn 662
changing reg in insn 663
changing reg in insn 665
changing reg in insn 668
changing reg in insn 669
changing reg in insn 685
changing reg in insn 686
changing reg in insn 693
changing reg in insn 694
changing reg in insn 695
changing reg in insn 696
changing reg in insn 699
changing reg in insn 700
changing reg in insn 702
changing reg in insn 709
changing reg in insn 710
changing reg in insn 715
changing reg in insn 717
changing reg in insn 716
changing reg in insn 717
changing reg in insn 718
changing reg in insn 720
changing reg in insn 719
changing reg in insn 721
changing reg in insn 726
changing reg in insn 727
changing reg in insn 728
changing reg in insn 735
changing reg in insn 729
changing reg in insn 730
changing reg in insn 795
changing reg in insn 794
changing reg in insn 796
changing reg in insn 795
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 174.
verify found no changes in insn with uid = 526.
verify found no changes in insn with uid = 552.
verify found no changes in insn with uid = 574.
verify found no changes in insn with uid = 586.
verify found no changes in insn with uid = 593.
verify found no changes in insn with uid = 613.
verify found no changes in insn with uid = 618.
verify found no changes in insn with uid = 722.
verify found no changes in insn with uid = 736.


_reroute

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 19[fpcr] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={285d,273u,3e} r1={153d,139u,6e} r2={51d,40u} r3={3d,3u} r4={53d,39u,4e} r5={45d,31u} r6={1d,304u} r7={1d,96u} r8={22d,10u} r9={18d,4u} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={179d,17u} r18={14d} r19={14d,1u} r20={1d,1u,20e} r21={15d} r22={15d} r23={15d} r24={15d} r25={15d} r26={15d} r27={15d} r28={15d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={22d,8u} r38={20d,6u} r39={19d,5u} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} 
;;    total ref usage 2353{1343d,977u,33e} in 659{645 regular + 14 call} insns.
(note 1 0 789 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 60 61 62 63 64 347 348 349 350 351
(note 789 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 789 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:604 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mABM.c:604 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 N_f+0 S4 A32])
        (reg:SI 1 dx [ N_f ])) mABM.c:604 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N_f ])
        (nil)))
(insn 5 4 6 2 (set (reg:SI 0 ax [348])
        (reg:SI 2 cx [ sh ])) mABM.c:604 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ sh ])
        (nil)))
(insn 6 5 7 2 (set (reg:DI 2 cx [349])
        (reg:DI 37 r8 [ sh+8 ])) mABM.c:604 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ sh+8 ])
        (nil)))
(insn 7 6 8 2 (set (reg:TI 0 ax [347])
        (reg:TI 0 ax [348])) mABM.c:604 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [348])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [349])) mABM.c:604 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [349])
        (nil)))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [347])) mABM.c:604 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [347])
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])
        (reg:SI 38 r9 [ unsafe ])) mABM.c:604 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ unsafe ])
        (nil)))
(note 11 10 14 2 NOTE_INSN_FUNCTION_BEG)
(insn 14 11 15 2 (set (reg/f:DI 0 ax [orig:60 D.7199 ] [60])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl.dV+0 S8 A64])) mABM.c:606 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:SI 1 dx [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 N_f+0 S4 A32])) mABM.c:606 89 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 1 dx [orig:61 D.7200 ] [61])
        (sign_extend:DI (reg:SI 1 dx [350]))) mABM.c:606 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [350])
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 1 dx [orig:62 D.7200 ] [62])
                (ashift:DI (reg:DI 1 dx [orig:61 D.7200 ] [61])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:606 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7200 ] [61])
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.7199 ] [63])
                (plus:DI (reg/f:DI 0 ax [orig:60 D.7199 ] [60])
                    (reg:DI 1 dx [orig:62 D.7200 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:606 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7200 ] [62])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.7199 ] [60])
            (nil))))
(insn 19 18 20 2 (set (reg:XF 0 ax [351])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.7199 ] [63]) [0 *_24+0 S16 A128])) mABM.c:606 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7199 ] [63])
        (nil)))
(insn 20 19 21 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dV+0 S16 A128])
        (reg:XF 0 ax [351])) mABM.c:606 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [351])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:64 D.7198 ] [64])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 256 [0x100])) [0 conf.shortest_path+0 S4 A128])) mABM.c:607 89 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 D.7198 ] [64])
            (const_int 0 [0]))) mABM.c:607 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.7198 ] [64])
        (nil)))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) mABM.c:607 612 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 352 353 354 355 356 357
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:607 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 4 (set (reg:SI 39 r10 [orig:65 D.7198 ] [65])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [352])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:607 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [352])
        (nil)))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 38 r9 [353])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 320 [0x140])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:607 274 {*adddi_1}
     (nil))
(insn 28 27 29 4 (set (reg:DI 37 r8 [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:607 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 4 (set (reg:DI 1 dx [355])
        (reg/f:DI 7 sp)) mABM.c:607 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 4 (set (reg:DI 4 si [356])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:607 267 {*leadi}
     (nil))
(insn 31 30 797 4 (set (reg:DI 0 ax [357])
        (const_int 38 [0x26])) mABM.c:607 87 {*movdi_internal_rex64}
     (nil))
(insn 797 31 798 4 (set (reg:DI 5 di [355])
        (reg:DI 1 dx [355])) mABM.c:607 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [355])
        (nil)))
(insn 798 797 32 4 (set (reg:DI 2 cx [357])
        (reg:DI 0 ax [357])) mABM.c:607 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [357])
        (nil)))
(insn 32 798 33 4 (parallel [
            (set (reg:DI 2 cx [357])
                (const_int 0 [0]))
            (set (reg:DI 5 di [355])
                (plus:DI (ashift:DI (reg:DI 2 cx [357])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [355])))
            (set (reg:DI 4 si [356])
                (plus:DI (ashift:DI (reg:DI 2 cx [357])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [356])))
            (set (mem:BLK (reg:DI 5 di [355]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [356]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [357]))
        ]) mABM.c:607 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [357])
        (expr_list:REG_UNUSED (reg:DI 5 di [355])
            (expr_list:REG_UNUSED (reg:DI 4 si [356])
                (nil)))))
(insn 33 32 34 4 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:65 D.7198 ] [65])) mABM.c:607 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:65 D.7198 ] [65])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 4 si)
        (reg:DI 38 r9 [353])) mABM.c:607 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [353])
        (nil)))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg:DI 37 r8 [354])) mABM.c:607 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [354])
        (nil)))
(call_insn 36 35 753 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_select_candidate_tmp_nvp_shortpath") [flags 0x3]  <function_decl 0x7f05a571fb00 _select_candidate_tmp_nvp_shortpath>) [0 _select_candidate_tmp_nvp_shortpath S1 A8])
            (const_int 304 [0x130]))) mABM.c:607 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                    (nil))))))
(jump_insn 753 36 754 4 (set (pc)
        (label_ref 53)) 650 {jump}
     (nil)
 -> 53)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 754 753 39)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 358 359 360 361 362 363
(code_label 39 754 40 5 247 "" [1 uses])
(note 40 39 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 5 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:608 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 5 (set (reg:SI 39 r10 [orig:66 D.7198 ] [66])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [358])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:608 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [358])
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg:DI 38 r9 [359])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 320 [0x140])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:608 274 {*adddi_1}
     (nil))
(insn 44 43 45 5 (set (reg:DI 37 r8 [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:608 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:DI 1 dx [361])
        (reg/f:DI 7 sp)) mABM.c:608 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 5 (set (reg:DI 4 si [362])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:608 267 {*leadi}
     (nil))
(insn 47 46 799 5 (set (reg:DI 0 ax [363])
        (const_int 38 [0x26])) mABM.c:608 87 {*movdi_internal_rex64}
     (nil))
(insn 799 47 800 5 (set (reg:DI 5 di [361])
        (reg:DI 1 dx [361])) mABM.c:608 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [361])
        (nil)))
(insn 800 799 48 5 (set (reg:DI 2 cx [363])
        (reg:DI 0 ax [363])) mABM.c:608 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [363])
        (nil)))
(insn 48 800 49 5 (parallel [
            (set (reg:DI 2 cx [363])
                (const_int 0 [0]))
            (set (reg:DI 5 di [361])
                (plus:DI (ashift:DI (reg:DI 2 cx [363])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [361])))
            (set (reg:DI 4 si [362])
                (plus:DI (ashift:DI (reg:DI 2 cx [363])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [362])))
            (set (mem:BLK (reg:DI 5 di [361]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [362]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [363]))
        ]) mABM.c:608 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [363])
        (expr_list:REG_UNUSED (reg:DI 5 di [361])
            (expr_list:REG_UNUSED (reg:DI 4 si [362])
                (nil)))))
(insn 49 48 50 5 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:66 D.7198 ] [66])) mABM.c:608 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:66 D.7198 ] [66])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 4 si)
        (reg:DI 38 r9 [359])) mABM.c:608 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [359])
        (nil)))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg:DI 37 r8 [360])) mABM.c:608 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [360])
        (nil)))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_select_candidate_tmp_nvp") [flags 0x3]  <function_decl 0x7f05a571fc00 _select_candidate_tmp_nvp>) [0 _select_candidate_tmp_nvp S1 A8])
            (const_int 304 [0x130]))) mABM.c:608 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                    (nil))))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 364 365 366 367 368
(code_label 53 52 54 6 248 "" [1 uses])
(note 54 53 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 6 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:611 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 6 (set (reg:SI 0 ax [orig:67 D.7198 ] [67])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [364])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:611 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [364])
        (nil)))
(insn 57 56 801 6 (set (reg:SI 1 dx [365])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:611 89 {*movsi_internal}
     (nil))
(insn 801 57 58 6 (set (reg:SI 1 dx [orig:68 D.7198 ] [68])
        (reg:SI 1 dx [365])) mABM.c:611 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [365])
        (nil)))
(insn 58 801 802 6 (parallel [
            (set (reg:SI 1 dx [orig:68 D.7198 ] [68])
                (minus:SI (reg:SI 1 dx [orig:68 D.7198 ] [68])
                    (reg:SI 0 ax [orig:67 D.7198 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:611 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7198 ] [67])
        (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -136 [0xffffffffffffff78])) [0 unsafe+0 S4 A32])
                (reg:SI 0 ax [orig:67 D.7198 ] [67]))
            (nil))))
(insn 802 58 59 6 (set (reg:SI 0 ax [orig:68 D.7198 ] [68])
        (reg:SI 1 dx [orig:68 D.7198 ] [68])) mABM.c:611 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:68 D.7198 ] [68])
        (nil)))
(insn 59 802 60 6 (parallel [
            (set (reg:SI 0 ax [366])
                (plus:SI (reg:SI 0 ax [orig:68 D.7198 ] [68])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:611 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.7198 ] [68])
        (nil)))
(insn 60 59 61 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 n_old+0 S4 A32])
        (reg:SI 0 ax [366])) mABM.c:611 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [366])
        (nil)))
(insn 61 60 62 6 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:614 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 6 (set (reg:SI 0 ax [orig:69 D.7198 ] [69])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [367])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:614 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [367])
        (nil)))
(insn 63 62 64 6 (parallel [
            (set (reg:SI 0 ax [orig:70 D.7198 ] [70])
                (plus:SI (reg:SI 0 ax [orig:69 D.7198 ] [69])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:614 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7198 ] [69])
        (nil)))
(insn 64 63 65 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:70 D.7198 ] [70])) mABM.c:614 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.7198 ] [70])
        (nil)))
(call_insn 65 64 66 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f05a5959700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mABM.c:614 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 66 65 67 6 (set (reg:DI 0 ax [368])
        (reg:DI 0 ax)) mABM.c:614 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 67 66 68 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 old_vel+0 S8 A64])
        (reg:DI 0 ax [368])) mABM.c:614 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [368])
        (nil)))
(insn 68 67 755 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:615 89 {*movsi_internal}
     (nil))
(jump_insn 755 68 756 6 (set (pc)
        (label_ref 86)) mABM.c:615 650 {jump}
     (nil)
 -> 86)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 756 755 91)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74 75 76 77 78 79 80 369 370 371 372
(code_label 91 756 71 7 250 "" [1 uses])
(note 71 91 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:615 89 {*movsi_internal}
     (nil))
(insn 73 72 803 7 (set (reg:DI 0 ax [orig:73 D.7200 ] [73])
        (sign_extend:DI (reg:SI 0 ax [369]))) mABM.c:615 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [369])
        (nil)))
(insn 803 73 74 7 (set (reg:DI 0 ax [orig:74 D.7200 ] [74])
        (reg:DI 0 ax [orig:73 D.7200 ] [73])) mABM.c:615 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:73 D.7200 ] [73])
        (nil)))
(insn 74 803 804 7 (parallel [
            (set (reg:DI 0 ax [orig:74 D.7200 ] [74])
                (ashift:DI (reg:DI 0 ax [orig:74 D.7200 ] [74])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 513 {*ashldi3_1}
     (nil))
(insn 804 74 75 7 (set (reg:DI 1 dx [orig:74 D.7200 ] [74])
        (reg:DI 0 ax [orig:74 D.7200 ] [74])) mABM.c:615 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.7200 ] [74])
        (nil)))
(insn 75 804 76 7 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 old_vel+0 S8 A64])) mABM.c:615 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 7 (parallel [
            (set (reg/f:DI 2 cx [orig:75 D.7199 ] [75])
                (plus:DI (reg:DI 1 dx [orig:74 D.7200 ] [74])
                    (reg/f:DI 0 ax [370])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [370])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.7200 ] [74])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 old_vel+0 S8 A64])
                    (reg:DI 1 dx [orig:74 D.7200 ] [74]))
                (nil)))))
(insn 77 76 78 7 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:615 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 7 (set (reg/f:DI 0 ax [orig:76 D.7199 ] [76])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [371])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:615 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [371])
        (nil)))
(insn 79 78 80 7 (set (reg:SI 1 dx [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:615 89 {*movsi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 1 dx [orig:77 D.7200 ] [77])
        (sign_extend:DI (reg:SI 1 dx [372]))) mABM.c:615 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [372])
        (nil)))
(insn 81 80 82 7 (parallel [
            (set (reg:DI 1 dx [orig:78 D.7200 ] [78])
                (ashift:DI (reg:DI 1 dx [orig:77 D.7200 ] [77])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.7200 ] [77])
        (nil)))
(insn 82 81 83 7 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.7199 ] [79])
                (plus:DI (reg/f:DI 0 ax [orig:76 D.7199 ] [76])
                    (reg:DI 1 dx [orig:78 D.7200 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.7200 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7199 ] [76])
            (nil))))
(insn 83 82 84 7 (set (reg:XF 0 ax [orig:80 D.7201 ] [80])
        (mem:XF (reg/f:DI 0 ax [orig:79 D.7199 ] [79]) [0 *_46+0 S16 A128])) mABM.c:615 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.7199 ] [79])
        (nil)))
(insn 84 83 85 7 (set (mem:XF (reg/f:DI 2 cx [orig:75 D.7199 ] [75]) [0 *_42+0 S16 A128])
        (reg:XF 0 ax [orig:80 D.7201 ] [80])) mABM.c:615 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:80 D.7201 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:75 D.7199 ] [75])
            (nil))))
(insn 85 84 86 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 71 72 373
(code_label 86 85 87 8 249 "" [1 uses])
(note 87 86 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 8 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:615 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 8 (set (reg:SI 0 ax [orig:71 D.7198 ] [71])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [373])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:615 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [373])
        (nil)))
(insn 90 89 92 8 (parallel [
            (set (reg:SI 0 ax [orig:72 D.7198 ] [72])
                (plus:SI (reg:SI 0 ax [orig:71 D.7198 ] [71])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:615 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 D.7198 ] [71])
        (nil)))
(insn 92 90 93 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:72 D.7198 ] [72])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:615 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.7198 ] [72])
        (nil)))
(jump_insn 93 92 94 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) mABM.c:615 612 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389
(note 94 93 95 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 9 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:618 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 9 (set (reg:SI 0 ax [orig:81 D.7198 ] [81])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [374])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:618 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [374])
        (nil)))
(insn 97 96 805 9 (set (reg:SI 1 dx [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:618 89 {*movsi_internal}
     (nil))
(insn 805 97 98 9 (set (reg:SI 1 dx [orig:82 D.7198 ] [82])
        (reg:SI 1 dx [375])) mABM.c:618 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [375])
        (nil)))
(insn 98 805 806 9 (parallel [
            (set (reg:SI 1 dx [orig:82 D.7198 ] [82])
                (minus:SI (reg:SI 1 dx [orig:82 D.7198 ] [82])
                    (reg:SI 0 ax [orig:81 D.7198 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:618 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.7198 ] [81])
        (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -136 [0xffffffffffffff78])) [0 unsafe+0 S4 A32])
                (reg:SI 0 ax [orig:81 D.7198 ] [81]))
            (nil))))
(insn 806 98 99 9 (set (reg:SI 0 ax [orig:82 D.7198 ] [82])
        (reg:SI 1 dx [orig:82 D.7198 ] [82])) mABM.c:618 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:82 D.7198 ] [82])
        (nil)))
(insn 99 806 100 9 (parallel [
            (set (reg:SI 0 ax [376])
                (plus:SI (reg:SI 0 ax [orig:82 D.7198 ] [82])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:618 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:82 D.7198 ] [82])
        (nil)))
(insn 100 99 101 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 njump+0 S4 A32])
        (reg:SI 0 ax [376])) mABM.c:618 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [376])
        (nil)))
(insn 101 100 102 9 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:620 87 {*movdi_internal_rex64}
     (nil))
(insn 102 101 103 9 (set (reg:SI 0 ax [orig:83 D.7198 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:620 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [377])
        (nil)))
(insn 103 102 807 9 (set (reg:SI 1 dx [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:620 89 {*movsi_internal}
     (nil))
(insn 807 103 104 9 (set (reg:SI 1 dx [orig:84 D.7198 ] [84])
        (reg:SI 1 dx [378])) mABM.c:620 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [378])
        (nil)))
(insn 104 807 808 9 (parallel [
            (set (reg:SI 1 dx [orig:84 D.7198 ] [84])
                (minus:SI (reg:SI 1 dx [orig:84 D.7198 ] [84])
                    (reg:SI 0 ax [orig:83 D.7198 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:620 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 D.7198 ] [83])
        (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -136 [0xffffffffffffff78])) [0 unsafe+0 S4 A32])
                (reg:SI 0 ax [orig:83 D.7198 ] [83]))
            (nil))))
(insn 808 104 105 9 (set (reg:SI 0 ax [orig:84 D.7198 ] [84])
        (reg:SI 1 dx [orig:84 D.7198 ] [84])) mABM.c:620 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:84 D.7198 ] [84])
        (nil)))
(insn 105 808 106 9 (parallel [
            (set (reg:SI 1 dx [orig:85 D.7198 ] [85])
                (plus:SI (reg:SI 0 ax [orig:84 D.7198 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:620 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.7198 ] [84])
        (nil)))
(insn 106 105 107 9 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:620 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 9 (set (reg/f:DI 2 cx [orig:86 D.7199 ] [86])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [379])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:620 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [379])
        (nil)))
(insn 108 107 109 9 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:620 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 9 (set (reg:SI 0 ax [orig:87 D.7198 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [380])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:620 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [380])
        (nil)))
(insn 110 109 111 9 (set (reg:DI 0 ax [orig:88 D.7200 ] [88])
        (sign_extend:DI (reg:SI 0 ax [orig:87 D.7198 ] [87]))) mABM.c:620 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:87 D.7198 ] [87])
        (nil)))
(insn 111 110 112 9 (parallel [
            (set (reg:DI 0 ax [orig:89 D.7200 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.7200 ] [88])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:620 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.7200 ] [88])
        (nil)))
(insn 112 111 113 9 (parallel [
            (set (reg:DI 0 ax [orig:90 D.7202 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 D.7200 ] [89])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:620 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.7200 ] [89])
        (nil)))
(insn 113 112 114 9 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.7199 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 D.7202 ] [90])
                    (reg/f:DI 2 cx [orig:86 D.7199 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:620 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:90 D.7202 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:86 D.7199 ] [86])
            (nil))))
(insn 114 113 115 9 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:85 D.7198 ] [85])) mABM.c:620 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:85 D.7198 ] [85])
        (nil)))
(insn 115 114 116 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.7199 ] [91])) mABM.c:620 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7199 ] [91])
        (nil)))
(call_insn 116 115 117 9 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("mean") [flags 0x41]  <function_decl 0x7f05a595ed00 mean>) [0 mean S1 A8])
            (const_int 0 [0]))) mABM.c:620 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 117 116 118 9 (set (reg:XF 8 st [381])
        (reg:XF 8 st)) mABM.c:620 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 118 117 119 9 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 vm+0 S16 A128])
        (reg:XF 8 st [381])) mABM.c:620 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [381])
        (nil)))
(insn 119 118 120 9 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:621 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 9 (set (reg/f:DI 1 dx [orig:92 D.7199 ] [92])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [382])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:621 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [382])
        (nil)))
(insn 121 120 122 9 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:621 87 {*movdi_internal_rex64}
     (nil))
(insn 122 121 123 9 (set (reg:SI 0 ax [orig:93 D.7198 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [383])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:621 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [383])
        (nil)))
(insn 123 122 124 9 (set (reg:DI 0 ax [orig:94 D.7200 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.7198 ] [93]))) mABM.c:621 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.7198 ] [93])
        (nil)))
(insn 124 123 125 9 (parallel [
            (set (reg:DI 0 ax [orig:95 D.7200 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.7200 ] [94])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:621 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:94 D.7200 ] [94])
        (nil)))
(insn 125 124 126 9 (parallel [
            (set (reg:DI 0 ax [orig:96 D.7202 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.7200 ] [95])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:621 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:95 D.7200 ] [95])
        (nil)))
(insn 126 125 127 9 (parallel [
            (set (reg/f:DI 2 cx [orig:97 D.7199 ] [97])
                (plus:DI (reg/f:DI 1 dx [orig:92 D.7199 ] [92])
                    (reg:DI 0 ax [orig:96 D.7202 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:621 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:96 D.7202 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:92 D.7199 ] [92])
            (nil))))
(insn 127 126 128 9 (set (reg:XF 0 ax [384])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 vm+0 S16 A128])) mABM.c:621 131 {*movxf_internal_rex64}
     (nil))
(insn 128 127 129 9 (set (mem:XF (reg/f:DI 2 cx [orig:97 D.7199 ] [97]) [0 *_67+0 S16 A128])
        (reg:XF 0 ax [384])) mABM.c:621 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [384])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:97 D.7199 ] [97])
            (nil))))
(insn 129 128 130 9 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:622 87 {*movdi_internal_rex64}
     (nil))
(insn 130 129 131 9 (set (reg/f:DI 1 dx [orig:98 D.7199 ] [98])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [385])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:622 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [385])
        (nil)))
(insn 131 130 132 9 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:622 87 {*movdi_internal_rex64}
     (nil))
(insn 132 131 133 9 (set (reg:SI 0 ax [orig:99 D.7198 ] [99])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [386])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:622 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [386])
        (nil)))
(insn 133 132 134 9 (set (reg:DI 0 ax [orig:100 D.7200 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 D.7198 ] [99]))) mABM.c:622 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:99 D.7198 ] [99])
        (nil)))
(insn 134 133 135 9 (parallel [
            (set (reg:DI 0 ax [orig:101 D.7200 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.7200 ] [100])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:622 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:100 D.7200 ] [100])
        (nil)))
(insn 135 134 136 9 (parallel [
            (set (reg/f:DI 2 cx [orig:102 D.7199 ] [102])
                (plus:DI (reg/f:DI 1 dx [orig:98 D.7199 ] [98])
                    (reg:DI 0 ax [orig:101 D.7200 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:622 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.7200 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:98 D.7199 ] [98])
            (nil))))
(insn 136 135 137 9 (set (reg:XF 0 ax [387])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 vm+0 S16 A128])) mABM.c:622 131 {*movxf_internal_rex64}
     (nil))
(insn 137 136 138 9 (set (mem:XF (reg/f:DI 2 cx [orig:102 D.7199 ] [102]) [0 *_72+0 S16 A128])
        (reg:XF 0 ax [387])) mABM.c:622 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [387])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:102 D.7199 ] [102])
            (nil))))
(insn 138 137 139 9 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (nil))
(insn 139 138 140 9 (set (reg:SI 0 ax [orig:103 D.7198 ] [103])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [388])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:624 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [388])
        (nil)))
(insn 140 139 141 9 (parallel [
            (set (reg:SI 0 ax [389])
                (plus:SI (reg:SI 0 ax [orig:103 D.7198 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:103 D.7198 ] [103])
        (nil)))
(insn 141 140 757 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (reg:SI 0 ax [389])) mABM.c:624 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [389])
        (nil)))
(jump_insn 757 141 758 9 (set (pc)
        (label_ref 161)) mABM.c:624 650 {jump}
     (nil)
 -> 161)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 758 757 166)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 113 114 115 390 391 392 393
(code_label 166 758 144 10 252 "" [1 uses])
(note 144 166 145 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 10 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (nil))
(insn 146 145 147 10 (set (reg/f:DI 0 ax [orig:106 D.7199 ] [106])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [390])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [390])
        (nil)))
(insn 147 146 148 10 (set (reg:SI 1 dx [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:624 89 {*movsi_internal}
     (nil))
(insn 148 147 149 10 (set (reg:DI 1 dx [orig:107 D.7200 ] [107])
        (sign_extend:DI (reg:SI 1 dx [391]))) mABM.c:624 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [391])
        (nil)))
(insn 149 148 150 10 (parallel [
            (set (reg:DI 1 dx [orig:108 D.7200 ] [108])
                (ashift:DI (reg:DI 1 dx [orig:107 D.7200 ] [107])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.7200 ] [107])
        (nil)))
(insn 150 149 151 10 (parallel [
            (set (reg/f:DI 2 cx [orig:109 D.7199 ] [109])
                (plus:DI (reg/f:DI 0 ax [orig:106 D.7199 ] [106])
                    (reg:DI 1 dx [orig:108 D.7200 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:108 D.7200 ] [108])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:106 D.7199 ] [106])
            (nil))))
(insn 151 150 152 10 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (nil))
(insn 152 151 153 10 (set (reg/f:DI 0 ax [orig:110 D.7199 ] [110])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [392])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [392])
        (nil)))
(insn 153 152 154 10 (set (reg:SI 1 dx [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:624 89 {*movsi_internal}
     (nil))
(insn 154 153 155 10 (set (reg:DI 1 dx [orig:111 D.7202 ] [111])
        (sign_extend:DI (reg:SI 1 dx [393]))) mABM.c:624 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [393])
        (nil)))
(insn 155 154 156 10 (parallel [
            (set (reg:DI 1 dx [orig:112 D.7202 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 D.7202 ] [111])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:111 D.7202 ] [111])
        (nil)))
(insn 156 155 157 10 (parallel [
            (set (reg:DI 1 dx [orig:113 D.7202 ] [113])
                (ashift:DI (reg:DI 1 dx [orig:112 D.7202 ] [112])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:112 D.7202 ] [112])
        (nil)))
(insn 157 156 158 10 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.7199 ] [114])
                (plus:DI (reg/f:DI 0 ax [orig:110 D.7199 ] [110])
                    (reg:DI 1 dx [orig:113 D.7202 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:113 D.7202 ] [113])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.7199 ] [110])
            (nil))))
(insn 158 157 159 10 (set (reg:XF 0 ax [orig:115 D.7201 ] [115])
        (mem:XF (reg/f:DI 0 ax [orig:114 D.7199 ] [114]) [0 *_85+0 S16 A128])) mABM.c:624 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:114 D.7199 ] [114])
        (nil)))
(insn 159 158 160 10 (set (mem:XF (reg/f:DI 2 cx [orig:109 D.7199 ] [109]) [0 *_80+0 S16 A128])
        (reg:XF 0 ax [orig:115 D.7201 ] [115])) mABM.c:624 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:115 D.7201 ] [115])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:109 D.7199 ] [109])
            (nil))))
(insn 160 159 161 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 394
(code_label 161 160 162 11 251 "" [1 uses])
(note 162 161 163 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 11 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:624 87 {*movdi_internal_rex64}
     (nil))
(insn 164 163 165 11 (set (reg:SI 0 ax [orig:104 D.7198 ] [104])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [394])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:624 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [394])
        (nil)))
(insn 165 164 167 11 (parallel [
            (set (reg:SI 0 ax [orig:105 D.7198 ] [105])
                (plus:SI (reg:SI 0 ax [orig:104 D.7198 ] [104])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:624 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.7198 ] [104])
        (nil)))
(insn 167 165 168 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:105 D.7198 ] [105])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:624 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:105 D.7198 ] [105])
        (nil)))
(jump_insn 168 167 169 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 166)
            (pc))) mABM.c:624 612 {*jcc_1}
     (nil)
 -> 166)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 116 395 396 397 398
(note 169 168 170 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 12 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:627 87 {*movdi_internal_rex64}
     (nil))
(insn 171 170 172 12 (set (reg:SI 0 ax [orig:116 D.7198 ] [116])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [395])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:627 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [395])
        (nil)))
(insn 172 171 173 12 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mABM.c:627 89 {*movsi_internal}
     (nil))
(insn 173 172 174 12 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:116 D.7198 ] [116])) mABM.c:627 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:116 D.7198 ] [116])
        (nil)))
(call_insn 174 173 175 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f05a5959600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mABM.c:627 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 175 174 176 12 (set (reg:DI 0 ax [396])
        (reg:DI 0 ax)) mABM.c:627 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 176 175 177 12 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])
        (reg:DI 0 ax [396])) mABM.c:627 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [396])
        (nil)))
(insn 177 176 178 12 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:628 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 12 (set (reg:SI 0 ax [398])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [397])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:628 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [397])
        (nil)))
(insn 179 178 180 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32])
        (reg:SI 0 ax [398])) mABM.c:628 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [398])
        (nil)))
(insn 180 179 759 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:629 89 {*movsi_internal}
     (nil))
(jump_insn 759 180 760 12 (set (pc)
        (label_ref 219)) mABM.c:629 650 {jump}
     (nil)
 -> 219)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 760 759 223)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 223 760 183 13 256 "" [1 uses])
(note 183 223 184 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 761 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:629 89 {*movsi_internal}
     (nil))
(jump_insn 761 184 762 13 (set (pc)
        (label_ref 212)) mABM.c:629 650 {jump}
     (nil)
 -> 212)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 762 761 214)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 399 400 401 402 403 404
(code_label 214 762 187 14 255 "" [1 uses])
(note 187 214 188 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 14 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:629 89 {*movsi_internal}
     (nil))
(insn 189 188 190 14 (set (reg:DI 0 ax [orig:118 D.7200 ] [118])
        (sign_extend:DI (reg:SI 0 ax [399]))) mABM.c:629 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [399])
        (nil)))
(insn 190 189 191 14 (parallel [
            (set (reg:DI 1 dx [orig:119 D.7200 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 D.7200 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:118 D.7200 ] [118])
        (nil)))
(insn 191 190 192 14 (set (reg/f:DI 0 ax [400])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (nil))
(insn 192 191 193 14 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.7203 ] [120])
                (plus:DI (reg/f:DI 0 ax [400])
                    (reg:DI 1 dx [orig:119 D.7200 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [400])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:119 D.7200 ] [119])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 old_nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:119 D.7200 ] [119]))
                (nil)))))
(insn 193 192 194 14 (set (reg/f:DI 0 ax [orig:121 D.7199 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 D.7203 ] [120]) [0 *_96+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:120 D.7203 ] [120])
        (nil)))
(insn 194 193 195 14 (set (reg:SI 1 dx [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:629 89 {*movsi_internal}
     (nil))
(insn 195 194 196 14 (set (reg:DI 1 dx [orig:122 D.7200 ] [122])
        (sign_extend:DI (reg:SI 1 dx [401]))) mABM.c:629 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [401])
        (nil)))
(insn 196 195 197 14 (parallel [
            (set (reg:DI 1 dx [orig:123 D.7200 ] [123])
                (ashift:DI (reg:DI 1 dx [orig:122 D.7200 ] [122])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:122 D.7200 ] [122])
        (nil)))
(insn 197 196 198 14 (parallel [
            (set (reg/f:DI 2 cx [orig:124 D.7199 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:121 D.7199 ] [121])
                    (reg:DI 1 dx [orig:123 D.7200 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:123 D.7200 ] [123])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:121 D.7199 ] [121])
            (nil))))
(insn 198 197 199 14 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (nil))
(insn 199 198 200 14 (set (reg/f:DI 0 ax [orig:125 D.7203 ] [125])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [402])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [402])
        (nil)))
(insn 200 199 201 14 (set (reg:SI 1 dx [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:629 89 {*movsi_internal}
     (nil))
(insn 201 200 202 14 (set (reg:DI 1 dx [orig:126 D.7200 ] [126])
        (sign_extend:DI (reg:SI 1 dx [403]))) mABM.c:629 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [403])
        (nil)))
(insn 202 201 203 14 (parallel [
            (set (reg:DI 1 dx [orig:127 D.7200 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.7200 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:126 D.7200 ] [126])
        (nil)))
(insn 203 202 204 14 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.7203 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.7203 ] [125])
                    (reg:DI 1 dx [orig:127 D.7200 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:127 D.7200 ] [127])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.7203 ] [125])
            (nil))))
(insn 204 203 205 14 (set (reg/f:DI 0 ax [orig:129 D.7199 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 D.7203 ] [128]) [0 *_104+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:128 D.7203 ] [128])
        (nil)))
(insn 205 204 206 14 (set (reg:SI 1 dx [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:629 89 {*movsi_internal}
     (nil))
(insn 206 205 207 14 (set (reg:DI 1 dx [orig:130 D.7200 ] [130])
        (sign_extend:DI (reg:SI 1 dx [404]))) mABM.c:629 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [404])
        (nil)))
(insn 207 206 208 14 (parallel [
            (set (reg:DI 1 dx [orig:131 D.7200 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.7200 ] [130])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:130 D.7200 ] [130])
        (nil)))
(insn 208 207 209 14 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.7199 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.7199 ] [129])
                    (reg:DI 1 dx [orig:131 D.7200 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:131 D.7200 ] [131])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:129 D.7199 ] [129])
            (nil))))
(insn 209 208 210 14 (set (reg:XF 0 ax [orig:133 D.7201 ] [133])
        (mem:XF (reg/f:DI 0 ax [orig:132 D.7199 ] [132]) [0 *_108+0 S16 A128])) mABM.c:629 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:132 D.7199 ] [132])
        (nil)))
(insn 210 209 211 14 (set (mem:XF (reg/f:DI 2 cx [orig:124 D.7199 ] [124]) [0 *_100+0 S16 A128])
        (reg:XF 0 ax [orig:133 D.7201 ] [133])) mABM.c:629 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:133 D.7201 ] [133])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:124 D.7199 ] [124])
            (nil))))
(insn 211 210 212 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 273 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 212 211 213 15 254 "" [1 uses])
(note 213 212 215 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 215 213 216 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:629 7 {*cmpsi_1}
     (nil))
(jump_insn 216 215 217 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 214)
            (pc))) mABM.c:629 612 {*jcc_1}
     (nil)
 -> 214)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 217 216 218 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:629 273 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 405
(code_label 219 218 220 17 253 "" [1 uses])
(note 220 219 221 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 17 (set (reg/f:DI 0 ax [405])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:629 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 224 17 (set (reg:SI 0 ax [orig:117 D.7198 ] [117])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [405])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:629 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [405])
        (nil)))
(insn 224 222 225 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:117 D.7198 ] [117])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:629 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:117 D.7198 ] [117])
        (nil)))
(jump_insn 225 224 226 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) mABM.c:629 612 {*jcc_1}
     (nil)
 -> 223)
;;  succ:       13
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 408 409
(note 226 225 230 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 230 226 231 18 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:633 89 {*movsi_internal}
     (nil))
(insn 231 230 232 18 (parallel [
            (set (reg:SI 0 ax [408])
                (plus:SI (reg:SI 0 ax [409])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:633 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [409])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -136 [0xffffffffffffff78])) [0 unsafe+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 232 231 233 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (reg:SI 0 ax [408])) mABM.c:633 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [408])
        (nil)))
(insn 233 232 763 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 rp_temp+0 S4 A32])
        (const_int 0 [0])) mABM.c:633 89 {*movsi_internal}
     (nil))
(jump_insn 763 233 764 18 (set (pc)
        (label_ref 277)) mABM.c:633 650 {jump}
     (nil)
 -> 277)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 764 763 281)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 281 764 236 19 260 "" [1 uses])
(note 236 281 237 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 237 236 765 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:634 89 {*movsi_internal}
     (nil))
(jump_insn 765 237 766 19 (set (pc)
        (label_ref 269)) mABM.c:634 650 {jump}
     (nil)
 -> 269)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 766 765 271)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 410 411 412 413 414 415 416
(code_label 271 766 240 20 259 "" [1 uses])
(note 240 271 241 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 20 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (nil))
(insn 242 241 243 20 (set (reg/f:DI 0 ax [orig:135 D.7203 ] [135])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [410])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [410])
        (nil)))
(insn 243 242 244 20 (set (reg:SI 1 dx [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 n_old+0 S4 A32])) mABM.c:634 89 {*movsi_internal}
     (nil))
(insn 244 243 809 20 (set (reg:SI 2 cx [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:634 89 {*movsi_internal}
     (nil))
(insn 809 244 245 20 (set (reg:SI 2 cx [orig:136 D.7198 ] [136])
        (reg:SI 2 cx [412])) mABM.c:634 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [412])
        (nil)))
(insn 245 809 810 20 (parallel [
            (set (reg:SI 2 cx [orig:136 D.7198 ] [136])
                (minus:SI (reg:SI 2 cx [orig:136 D.7198 ] [136])
                    (reg:SI 1 dx [411])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 1 dx [411])
        (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -68 [0xffffffffffffffbc])) [0 n_old+0 S4 A32]))
            (nil))))
(insn 810 245 246 20 (set (reg:SI 1 dx [orig:136 D.7198 ] [136])
        (reg:SI 2 cx [orig:136 D.7198 ] [136])) mABM.c:634 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:136 D.7198 ] [136])
        (nil)))
(insn 246 810 247 20 (set (reg:DI 1 dx [orig:137 D.7202 ] [137])
        (sign_extend:DI (reg:SI 1 dx [orig:136 D.7198 ] [136]))) mABM.c:634 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:136 D.7198 ] [136])
        (nil)))
(insn 247 246 248 20 (parallel [
            (set (reg:DI 1 dx [orig:138 D.7202 ] [138])
                (plus:DI (reg:DI 1 dx [orig:137 D.7202 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:137 D.7202 ] [137])
        (nil)))
(insn 248 247 249 20 (parallel [
            (set (reg:DI 1 dx [orig:139 D.7202 ] [139])
                (ashift:DI (reg:DI 1 dx [orig:138 D.7202 ] [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:138 D.7202 ] [138])
        (nil)))
(insn 249 248 250 20 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.7203 ] [140])
                (plus:DI (reg/f:DI 0 ax [orig:135 D.7203 ] [135])
                    (reg:DI 1 dx [orig:139 D.7202 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.7202 ] [139])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:135 D.7203 ] [135])
            (nil))))
(insn 250 249 251 20 (set (reg/f:DI 0 ax [orig:141 D.7199 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [orig:140 D.7203 ] [140]) [0 *_121+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:140 D.7203 ] [140])
        (nil)))
(insn 251 250 252 20 (set (reg:SI 1 dx [413])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:634 89 {*movsi_internal}
     (nil))
(insn 252 251 253 20 (set (reg:DI 1 dx [orig:142 D.7200 ] [142])
        (sign_extend:DI (reg:SI 1 dx [413]))) mABM.c:634 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [413])
        (nil)))
(insn 253 252 254 20 (parallel [
            (set (reg:DI 1 dx [orig:143 D.7200 ] [143])
                (ashift:DI (reg:DI 1 dx [orig:142 D.7200 ] [142])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:142 D.7200 ] [142])
        (nil)))
(insn 254 253 255 20 (parallel [
            (set (reg/f:DI 2 cx [orig:144 D.7199 ] [144])
                (plus:DI (reg/f:DI 0 ax [orig:141 D.7199 ] [141])
                    (reg:DI 1 dx [orig:143 D.7200 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:143 D.7200 ] [143])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:141 D.7199 ] [141])
            (nil))))
(insn 255 254 256 20 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (nil))
(insn 256 255 257 20 (set (reg/f:DI 0 ax [orig:145 D.7203 ] [145])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [414])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [414])
        (nil)))
(insn 257 256 258 20 (set (reg:SI 1 dx [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:634 89 {*movsi_internal}
     (nil))
(insn 258 257 259 20 (set (reg:DI 1 dx [orig:146 D.7200 ] [146])
        (sign_extend:DI (reg:SI 1 dx [415]))) mABM.c:634 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [415])
        (nil)))
(insn 259 258 260 20 (parallel [
            (set (reg:DI 1 dx [orig:147 D.7200 ] [147])
                (ashift:DI (reg:DI 1 dx [orig:146 D.7200 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:146 D.7200 ] [146])
        (nil)))
(insn 260 259 261 20 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.7203 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.7203 ] [145])
                    (reg:DI 1 dx [orig:147 D.7200 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:147 D.7200 ] [147])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:145 D.7203 ] [145])
            (nil))))
(insn 261 260 262 20 (set (reg/f:DI 0 ax [orig:149 D.7199 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 D.7203 ] [148]) [0 *_129+0 S8 A64])) mABM.c:634 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:148 D.7203 ] [148])
        (nil)))
(insn 262 261 263 20 (set (reg:SI 1 dx [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:634 89 {*movsi_internal}
     (nil))
(insn 263 262 264 20 (set (reg:DI 1 dx [orig:150 D.7200 ] [150])
        (sign_extend:DI (reg:SI 1 dx [416]))) mABM.c:634 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [416])
        (nil)))
(insn 264 263 265 20 (parallel [
            (set (reg:DI 1 dx [orig:151 D.7200 ] [151])
                (ashift:DI (reg:DI 1 dx [orig:150 D.7200 ] [150])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:150 D.7200 ] [150])
        (nil)))
(insn 265 264 266 20 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.7199 ] [152])
                (plus:DI (reg/f:DI 0 ax [orig:149 D.7199 ] [149])
                    (reg:DI 1 dx [orig:151 D.7200 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:151 D.7200 ] [151])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:149 D.7199 ] [149])
            (nil))))
(insn 266 265 267 20 (set (reg:XF 0 ax [orig:153 D.7201 ] [153])
        (mem:XF (reg/f:DI 0 ax [orig:152 D.7199 ] [152]) [0 *_133+0 S16 A128])) mABM.c:634 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:152 D.7199 ] [152])
        (nil)))
(insn 267 266 268 20 (set (mem:XF (reg/f:DI 2 cx [orig:144 D.7199 ] [144]) [0 *_125+0 S16 A128])
        (reg:XF 0 ax [orig:153 D.7201 ] [153])) mABM.c:634 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:153 D.7201 ] [153])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:144 D.7199 ] [144])
            (nil))))
(insn 268 267 269 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:634 273 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 269 268 270 21 258 "" [1 uses])
(note 270 269 272 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 272 270 273 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:634 7 {*cmpsi_1}
     (nil))
(jump_insn 273 272 274 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 271)
            (pc))) mABM.c:634 612 {*jcc_1}
     (nil)
 -> 271)
;;  succ:       20
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 274 273 275 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 275 274 276 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:633 273 {*addsi_1}
     (nil))
(insn 276 275 277 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 rp_temp+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 rp_temp+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:633 273 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 417
(code_label 277 276 278 23 257 "" [1 uses])
(note 278 277 279 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 23 (set (reg/f:DI 0 ax [417])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:633 87 {*movdi_internal_rex64}
     (nil))
(insn 280 279 282 23 (set (reg:SI 0 ax [orig:134 D.7198 ] [134])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [417])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:633 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [417])
        (nil)))
(insn 282 280 283 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:134 D.7198 ] [134])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:633 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 D.7198 ] [134])
        (nil)))
(jump_insn 283 282 284 23 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) mABM.c:633 612 {*jcc_1}
     (nil)
 -> 281)
;;  succ:       19
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 418 419 420 421
(note 284 283 285 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 24 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:637 87 {*movdi_internal_rex64}
     (nil))
(insn 286 285 287 24 (set (reg:SI 0 ax [orig:154 D.7198 ] [154])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [418])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:637 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [418])
        (nil)))
(insn 287 286 288 24 (parallel [
            (set (reg:SI 0 ax [orig:155 D.7198 ] [155])
                (minus:SI (reg:SI 0 ax [orig:154 D.7198 ] [154])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 n_old+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:637 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:154 D.7198 ] [154])
        (nil)))
(insn 288 287 289 24 (parallel [
            (set (reg:SI 1 dx [orig:156 D.7198 ] [156])
                (plus:SI (reg:SI 0 ax [orig:155 D.7198 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:637 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:155 D.7198 ] [155])
        (nil)))
(insn 289 288 290 24 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:637 87 {*movdi_internal_rex64}
     (nil))
(insn 290 289 291 24 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [419])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])
        (reg:SI 1 dx [orig:156 D.7198 ] [156])) mABM.c:637 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [419])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:156 D.7198 ] [156])
            (nil))))
(insn 291 290 292 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])
        (const_int 0 [0])) mABM.c:642 89 {*movsi_internal}
     (nil))
(insn 292 291 293 24 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:642 87 {*movdi_internal_rex64}
     (nil))
(insn 293 292 294 24 (set (reg:SI 0 ax [orig:157 D.7198 ] [157])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [420])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:642 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [420])
        (nil)))
(insn 294 293 295 24 (parallel [
            (set (reg:SI 0 ax [421])
                (plus:SI (reg:SI 0 ax [orig:157 D.7198 ] [157])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:642 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:157 D.7198 ] [157])
        (nil)))
(insn 295 294 767 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
        (reg:SI 0 ax [421])) mABM.c:642 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [421])
        (nil)))
(jump_insn 767 295 768 24 (set (pc)
        (label_ref 634)) mABM.c:642 650 {jump}
     (nil)
 -> 634)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 768 767 639)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 639 768 298 25 273 "" [1 uses])
(note 298 639 299 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 300 25 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])
            (const_int 0 [0]))) mABM.c:643 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 300 299 301 25 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 326)
            (pc))) mABM.c:643 612 {*jcc_1}
     (nil)
 -> 326)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 422 423 424 425
(note 301 300 302 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 26 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (nil))
(insn 303 302 304 26 (set (reg/f:DI 1 dx [orig:160 D.7199 ] [160])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [422])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [422])
        (nil)))
(insn 304 303 305 26 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (nil))
(insn 305 304 306 26 (set (reg:SI 0 ax [orig:161 D.7198 ] [161])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [423])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:643 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [423])
        (nil)))
(insn 306 305 307 26 (set (reg:DI 0 ax [orig:162 D.7200 ] [162])
        (sign_extend:DI (reg:SI 0 ax [orig:161 D.7198 ] [161]))) mABM.c:643 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:161 D.7198 ] [161])
        (nil)))
(insn 307 306 308 26 (parallel [
            (set (reg:DI 0 ax [orig:163 D.7200 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.7200 ] [162])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:162 D.7200 ] [162])
        (nil)))
(insn 308 307 309 26 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.7199 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 D.7200 ] [163])
                    (reg/f:DI 1 dx [orig:160 D.7199 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:163 D.7200 ] [163])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:160 D.7199 ] [160])
            (nil))))
(insn 309 308 310 26 (set (reg:XF 9 st(1) [orig:165 D.7201 ] [165])
        (mem:XF (reg/f:DI 0 ax [orig:164 D.7199 ] [164]) [0 *_150+0 S16 A128])) mABM.c:643 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:164 D.7199 ] [164])
        (nil)))
(insn 310 309 311 26 (set (reg:XF 8 st [orig:166 D.7201 ] [166])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [0 njump+0 S4 A32]))) mABM.c:643 256 {*floatsixf2_i387}
     (nil))
(insn 311 310 312 26 (set (reg:XF 9 st(1) [orig:167 D.7201 ] [167])
        (mult:XF (reg:XF 9 st(1) [orig:165 D.7201 ] [165])
            (reg:XF 8 st [orig:166 D.7201 ] [166]))) mABM.c:643 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:166 D.7201 ] [166])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:165 D.7201 ] [165])
            (nil))))
(insn 312 311 313 26 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (nil))
(insn 313 312 314 26 (set (reg/f:DI 1 dx [orig:168 D.7199 ] [168])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [424])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [424])
        (nil)))
(insn 314 313 315 26 (set (reg/f:DI 0 ax [425])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:643 87 {*movdi_internal_rex64}
     (nil))
(insn 315 314 316 26 (set (reg:SI 0 ax [orig:169 D.7198 ] [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [425])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:643 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [425])
        (nil)))
(insn 316 315 317 26 (set (reg:DI 0 ax [orig:170 D.7202 ] [170])
        (sign_extend:DI (reg:SI 0 ax [orig:169 D.7198 ] [169]))) mABM.c:643 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:169 D.7198 ] [169])
        (nil)))
(insn 317 316 318 26 (parallel [
            (set (reg:DI 0 ax [orig:171 D.7202 ] [171])
                (plus:DI (reg:DI 0 ax [orig:170 D.7202 ] [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:170 D.7202 ] [170])
        (nil)))
(insn 318 317 319 26 (parallel [
            (set (reg:DI 0 ax [orig:172 D.7202 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.7202 ] [171])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:171 D.7202 ] [171])
        (nil)))
(insn 319 318 320 26 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.7199 ] [173])
                (plus:DI (reg:DI 0 ax [orig:172 D.7202 ] [172])
                    (reg/f:DI 1 dx [orig:168 D.7199 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:172 D.7202 ] [172])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:168 D.7199 ] [168])
            (nil))))
(insn 320 319 321 26 (set (reg:XF 8 st [orig:174 D.7201 ] [174])
        (mem:XF (reg/f:DI 0 ax [orig:173 D.7199 ] [173]) [0 *_159+0 S16 A128])) mABM.c:643 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:173 D.7199 ] [173])
        (nil)))
(insn 321 320 322 26 (set (reg:XF 9 st(1) [orig:175 D.7201 ] [175])
        (plus:XF (reg:XF 9 st(1) [orig:167 D.7201 ] [167])
            (reg:XF 8 st [orig:174 D.7201 ] [174]))) mABM.c:643 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:174 D.7201 ] [174])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:167 D.7201 ] [167])
            (nil))))
(insn 322 321 323 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -108 [0xffffffffffffff94])) [0 njump+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -108 [0xffffffffffffff94])) [0 njump+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:643 273 {*addsi_1}
     (nil))
(insn 323 322 324 26 (set (reg:XF 8 st [orig:176 D.7201 ] [176])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [0 njump+0 S4 A32]))) mABM.c:643 256 {*floatsixf2_i387}
     (nil))
(insn 324 323 788 26 (set (reg:XF 8 st [orig:177 D.7201 ] [177])
        (div:XF (reg:XF 9 st(1) [orig:175 D.7201 ] [175])
            (reg:XF 8 st [orig:176 D.7201 ] [176]))) mABM.c:643 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:176 D.7201 ] [176])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:175 D.7201 ] [175])
            (nil))))
(insn 788 324 326 26 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 newv+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:177 D.7201 ] [177]))) mABM.c:643 174 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:177 D.7201 ] [177])
        (nil)))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 426 427
(code_label 326 788 327 27 262 "" [1 uses])
(note 327 326 328 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 27 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:646 87 {*movdi_internal_rex64}
     (nil))
(insn 329 328 330 27 (set (reg:SI 0 ax [orig:178 D.7198 ] [178])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [426])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:646 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [426])
        (nil)))
(insn 330 329 331 27 (parallel [
            (set (reg:SI 0 ax [427])
                (plus:SI (reg:SI 0 ax [orig:178 D.7198 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:646 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:178 D.7198 ] [178])
        (nil)))
(insn 331 330 332 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32])
        (reg:SI 0 ax [427])) mABM.c:646 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [427])
        (nil)))
(insn 332 331 769 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 m+0 S4 A32])
        (const_int 0 [0])) mABM.c:646 89 {*movsi_internal}
     (nil))
(jump_insn 769 332 770 27 (set (pc)
        (label_ref 399)) mABM.c:646 650 {jump}
     (nil)
 -> 399)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 770 769 404)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 404 770 335 28 266 "" [1 uses])
(note 335 404 336 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 771 28 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])
        (const_int 0 [0])) mABM.c:647 89 {*movsi_internal}
     (nil))
(jump_insn 771 336 772 28 (set (pc)
        (label_ref 371)) mABM.c:647 650 {jump}
     (nil)
 -> 371)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 772 771 373)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 428 429 430 431 432 433 434 435
(code_label 373 772 339 29 265 "" [1 uses])
(note 339 373 340 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 29 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (nil))
(insn 341 340 342 29 (set (reg/f:DI 0 ax [orig:181 D.7203 ] [181])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [428])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [428])
        (nil)))
(insn 342 341 343 29 (set (reg:SI 1 dx [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (nil))
(insn 343 342 344 29 (set (reg:DI 1 dx [orig:182 D.7200 ] [182])
        (sign_extend:DI (reg:SI 1 dx [429]))) mABM.c:647 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [429])
        (nil)))
(insn 344 343 345 29 (parallel [
            (set (reg:DI 1 dx [orig:183 D.7200 ] [183])
                (ashift:DI (reg:DI 1 dx [orig:182 D.7200 ] [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:182 D.7200 ] [182])
        (nil)))
(insn 345 344 346 29 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.7203 ] [184])
                (plus:DI (reg/f:DI 0 ax [orig:181 D.7203 ] [181])
                    (reg:DI 1 dx [orig:183 D.7200 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:183 D.7200 ] [183])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:181 D.7203 ] [181])
            (nil))))
(insn 346 345 347 29 (set (reg/f:DI 0 ax [orig:185 D.7199 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [orig:184 D.7203 ] [184]) [0 *_175+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:184 D.7203 ] [184])
        (nil)))
(insn 347 346 348 29 (set (reg:SI 1 dx [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (nil))
(insn 348 347 349 29 (set (reg:DI 1 dx [orig:186 D.7200 ] [186])
        (sign_extend:DI (reg:SI 1 dx [430]))) mABM.c:647 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [430])
        (nil)))
(insn 349 348 350 29 (parallel [
            (set (reg:DI 1 dx [orig:187 D.7200 ] [187])
                (ashift:DI (reg:DI 1 dx [orig:186 D.7200 ] [186])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:186 D.7200 ] [186])
        (nil)))
(insn 350 349 351 29 (parallel [
            (set (reg/f:DI 2 cx [orig:188 D.7199 ] [188])
                (plus:DI (reg/f:DI 0 ax [orig:185 D.7199 ] [185])
                    (reg:DI 1 dx [orig:187 D.7200 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:187 D.7200 ] [187])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:185 D.7199 ] [185])
            (nil))))
(insn 351 350 352 29 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (nil))
(insn 352 351 353 29 (set (reg/f:DI 1 dx [orig:189 D.7203 ] [189])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [431])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [431])
        (nil)))
(insn 353 352 354 29 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (nil))
(insn 354 353 355 29 (set (reg:SI 4 si [orig:190 D.7198 ] [190])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [432])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [432])
        (nil)))
(insn 355 354 356 29 (set (reg:SI 0 ax [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (nil))
(insn 356 355 357 29 (parallel [
            (set (reg:SI 4 si [orig:191 D.7198 ] [191])
                (plus:SI (reg:SI 4 si [orig:190 D.7198 ] [190])
                    (reg:SI 0 ax [433])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [433])
        (expr_list:REG_DEAD (reg:SI 4 si [orig:190 D.7198 ] [190])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:190 D.7198 ] [190])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 dj+0 S4 A32]))
                (nil)))))
(insn 357 356 358 29 (set (reg:SI 0 ax [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 m+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (nil))
(insn 358 357 359 29 (parallel [
            (set (reg:SI 0 ax [orig:192 D.7198 ] [192])
                (plus:SI (reg:SI 0 ax [434])
                    (reg:SI 4 si [orig:191 D.7198 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [434])
        (expr_list:REG_DEAD (reg:SI 4 si [orig:191 D.7198 ] [191])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:191 D.7198 ] [191])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 m+0 S4 A32]))
                (nil)))))
(insn 359 358 360 29 (set (reg:DI 0 ax [orig:193 D.7202 ] [193])
        (sign_extend:DI (reg:SI 0 ax [orig:192 D.7198 ] [192]))) mABM.c:647 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:192 D.7198 ] [192])
        (nil)))
(insn 360 359 361 29 (parallel [
            (set (reg:DI 0 ax [orig:194 D.7202 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 D.7202 ] [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:193 D.7202 ] [193])
        (nil)))
(insn 361 360 362 29 (parallel [
            (set (reg:DI 0 ax [orig:195 D.7202 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.7202 ] [194])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:194 D.7202 ] [194])
        (nil)))
(insn 362 361 363 29 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.7203 ] [196])
                (plus:DI (reg:DI 0 ax [orig:195 D.7202 ] [195])
                    (reg/f:DI 1 dx [orig:189 D.7203 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:195 D.7202 ] [195])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:189 D.7203 ] [189])
            (nil))))
(insn 363 362 364 29 (set (reg/f:DI 0 ax [orig:197 D.7199 ] [197])
        (mem/f:DI (reg/f:DI 0 ax [orig:196 D.7203 ] [196]) [0 *_187+0 S8 A64])) mABM.c:647 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:196 D.7203 ] [196])
        (nil)))
(insn 364 363 365 29 (set (reg:SI 1 dx [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])) mABM.c:647 89 {*movsi_internal}
     (nil))
(insn 365 364 366 29 (set (reg:DI 1 dx [orig:198 D.7200 ] [198])
        (sign_extend:DI (reg:SI 1 dx [435]))) mABM.c:647 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [435])
        (nil)))
(insn 366 365 367 29 (parallel [
            (set (reg:DI 1 dx [orig:199 D.7200 ] [199])
                (ashift:DI (reg:DI 1 dx [orig:198 D.7200 ] [198])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:198 D.7200 ] [198])
        (nil)))
(insn 367 366 368 29 (parallel [
            (set (reg/f:DI 0 ax [orig:200 D.7199 ] [200])
                (plus:DI (reg/f:DI 0 ax [orig:197 D.7199 ] [197])
                    (reg:DI 1 dx [orig:199 D.7200 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:199 D.7200 ] [199])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:197 D.7199 ] [197])
            (nil))))
(insn 368 367 369 29 (set (reg:XF 0 ax [orig:201 D.7201 ] [201])
        (mem:XF (reg/f:DI 0 ax [orig:200 D.7199 ] [200]) [0 *_191+0 S16 A128])) mABM.c:647 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:200 D.7199 ] [200])
        (nil)))
(insn 369 368 370 29 (set (mem:XF (reg/f:DI 2 cx [orig:188 D.7199 ] [188]) [0 *_179+0 S16 A128])
        (reg:XF 0 ax [orig:201 D.7201 ] [201])) mABM.c:647 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:201 D.7201 ] [201])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:188 D.7199 ] [188])
            (nil))))
(insn 370 369 371 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:647 273 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 371 370 372 30 264 "" [1 uses])
(note 372 371 374 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 374 372 375 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 l+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:647 7 {*cmpsi_1}
     (nil))
(jump_insn 375 374 376 30 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 373)
            (pc))) mABM.c:647 612 {*jcc_1}
     (nil)
 -> 373)
;;  succ:       29
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 203 204 205 206 207 208 209 210 211 212 213 214 436 437 438 439 440 441
(note 376 375 377 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 31 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:649 87 {*movdi_internal_rex64}
     (nil))
(insn 378 377 379 31 (set (reg/f:DI 0 ax [orig:202 D.7199 ] [202])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [436])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:649 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [436])
        (nil)))
(insn 379 378 380 31 (set (reg:SI 1 dx [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32])) mABM.c:649 89 {*movsi_internal}
     (nil))
(insn 380 379 381 31 (set (reg:DI 1 dx [orig:203 D.7200 ] [203])
        (sign_extend:DI (reg:SI 1 dx [437]))) mABM.c:649 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [437])
        (nil)))
(insn 381 380 382 31 (parallel [
            (set (reg:DI 1 dx [orig:204 D.7200 ] [204])
                (ashift:DI (reg:DI 1 dx [orig:203 D.7200 ] [203])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:203 D.7200 ] [203])
        (nil)))
(insn 382 381 383 31 (parallel [
            (set (reg:DI 1 dx [orig:205 D.7202 ] [205])
                (plus:DI (reg:DI 1 dx [orig:204 D.7200 ] [204])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:204 D.7200 ] [204])
        (nil)))
(insn 383 382 384 31 (parallel [
            (set (reg/f:DI 2 cx [orig:206 D.7199 ] [206])
                (plus:DI (reg/f:DI 0 ax [orig:202 D.7199 ] [202])
                    (reg:DI 1 dx [orig:205 D.7202 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:205 D.7202 ] [205])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:202 D.7199 ] [202])
            (nil))))
(insn 384 383 385 31 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:649 87 {*movdi_internal_rex64}
     (nil))
(insn 385 384 386 31 (set (reg/f:DI 1 dx [orig:207 D.7199 ] [207])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [438])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:649 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [438])
        (nil)))
(insn 386 385 387 31 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:649 87 {*movdi_internal_rex64}
     (nil))
(insn 387 386 388 31 (set (reg:SI 4 si [orig:208 D.7198 ] [208])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [439])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:649 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [439])
        (nil)))
(insn 388 387 389 31 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])) mABM.c:649 89 {*movsi_internal}
     (nil))
(insn 389 388 390 31 (parallel [
            (set (reg:SI 4 si [orig:209 D.7198 ] [209])
                (plus:SI (reg:SI 4 si [orig:208 D.7198 ] [208])
                    (reg:SI 0 ax [440])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [440])
        (expr_list:REG_DEAD (reg:SI 4 si [orig:208 D.7198 ] [208])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:208 D.7198 ] [208])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 dj+0 S4 A32]))
                (nil)))))
(insn 390 389 391 31 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 m+0 S4 A32])) mABM.c:649 89 {*movsi_internal}
     (nil))
(insn 391 390 392 31 (parallel [
            (set (reg:SI 0 ax [orig:210 D.7198 ] [210])
                (plus:SI (reg:SI 0 ax [441])
                    (reg:SI 4 si [orig:209 D.7198 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [441])
        (expr_list:REG_DEAD (reg:SI 4 si [orig:209 D.7198 ] [209])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:209 D.7198 ] [209])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 m+0 S4 A32]))
                (nil)))))
(insn 392 391 393 31 (set (reg:DI 0 ax [orig:211 D.7200 ] [211])
        (sign_extend:DI (reg:SI 0 ax [orig:210 D.7198 ] [210]))) mABM.c:649 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:210 D.7198 ] [210])
        (nil)))
(insn 393 392 394 31 (parallel [
            (set (reg:DI 0 ax [orig:212 D.7200 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:211 D.7200 ] [211])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:211 D.7200 ] [211])
        (nil)))
(insn 394 393 395 31 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.7199 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 D.7200 ] [212])
                    (reg/f:DI 1 dx [orig:207 D.7199 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:649 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:212 D.7200 ] [212])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:207 D.7199 ] [207])
            (nil))))
(insn 395 394 396 31 (set (reg:XF 0 ax [orig:214 D.7201 ] [214])
        (mem:XF (reg/f:DI 0 ax [orig:213 D.7199 ] [213]) [0 *_205+0 S16 A128])) mABM.c:649 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:213 D.7199 ] [213])
        (nil)))
(insn 396 395 397 31 (set (mem:XF (reg/f:DI 2 cx [orig:206 D.7199 ] [206]) [0 *_198+0 S16 A128])
        (reg:XF 0 ax [orig:214 D.7201 ] [214])) mABM.c:649 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:214 D.7201 ] [214])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:206 D.7199 ] [206])
            (nil))))
(insn 397 396 398 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:646 273 {*addsi_1}
     (nil))
(insn 398 397 399 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 m+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 m+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:646 273 {*addsi_1}
     (nil))
;;  succ:       32 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU,DFS_BACK)
;;              27 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 179 180 442
(code_label 399 398 400 32 263 "" [1 uses])
(note 400 399 401 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 32 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:646 87 {*movdi_internal_rex64}
     (nil))
(insn 402 401 403 32 (set (reg:SI 0 ax [orig:179 D.7198 ] [179])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [442])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:646 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [442])
        (nil)))
(insn 403 402 405 32 (parallel [
            (set (reg:SI 0 ax [orig:180 D.7198 ] [180])
                (minus:SI (reg:SI 0 ax [orig:179 D.7198 ] [179])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:646 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:179 D.7198 ] [179])
        (nil)))
(insn 405 403 406 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:180 D.7198 ] [180])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [0 h+0 S4 A32]))) mABM.c:646 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:180 D.7198 ] [180])
        (nil)))
(jump_insn 406 405 407 32 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) mABM.c:646 612 {*jcc_1}
     (nil)
 -> 404)
;;  succ:       28
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 216 443 444
(note 407 406 408 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 408 407 409 33 (set (reg/f:DI 0 ax [443])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:653 87 {*movdi_internal_rex64}
     (nil))
(insn 409 408 811 33 (set (reg:SI 0 ax [orig:215 D.7198 ] [215])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [443])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:653 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [443])
        (nil)))
(insn 811 409 410 33 (set (reg:SI 0 ax [orig:216 D.7198 ] [216])
        (reg:SI 0 ax [orig:215 D.7198 ] [215])) mABM.c:653 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:215 D.7198 ] [215])
        (nil)))
(insn 410 811 812 33 (parallel [
            (set (reg:SI 0 ax [orig:216 D.7198 ] [216])
                (minus:SI (reg:SI 0 ax [orig:216 D.7198 ] [216])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:653 309 {*subsi_1}
     (nil))
(insn 812 410 411 33 (set (reg:SI 1 dx [orig:216 D.7198 ] [216])
        (reg:SI 0 ax [orig:216 D.7198 ] [216])) mABM.c:653 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:216 D.7198 ] [216])
        (nil)))
(insn 411 812 412 33 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:653 87 {*movdi_internal_rex64}
     (nil))
(insn 412 411 413 33 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [444])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])
        (reg:SI 1 dx [orig:216 D.7198 ] [216])) mABM.c:653 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [444])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:216 D.7198 ] [216])
            (nil))))
(insn 413 412 773 33 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:654 89 {*movsi_internal}
     (nil))
(jump_insn 773 413 774 33 (set (pc)
        (label_ref 625)) mABM.c:654 650 {jump}
     (nil)
 -> 625)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 774 773 628)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 510
(code_label 628 774 416 34 272 "" [1 uses])
(note 416 628 417 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 417 416 418 34 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (nil))
(insn 418 417 419 34 (set (reg/f:DI 1 dx [orig:218 D.7203 ] [218])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [445])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [445])
        (nil)))
(insn 419 418 420 34 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (nil))
(insn 420 419 421 34 (set (reg:SI 0 ax [orig:219 D.7198 ] [219])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [446])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:657 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [446])
        (nil)))
(insn 421 420 422 34 (set (reg:DI 0 ax [orig:220 D.7200 ] [220])
        (sign_extend:DI (reg:SI 0 ax [orig:219 D.7198 ] [219]))) mABM.c:657 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:219 D.7198 ] [219])
        (nil)))
(insn 422 421 423 34 (parallel [
            (set (reg:DI 0 ax [orig:221 D.7200 ] [221])
                (ashift:DI (reg:DI 0 ax [orig:220 D.7200 ] [220])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:220 D.7200 ] [220])
        (nil)))
(insn 423 422 424 34 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.7203 ] [222])
                (plus:DI (reg:DI 0 ax [orig:221 D.7200 ] [221])
                    (reg/f:DI 1 dx [orig:218 D.7203 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:221 D.7200 ] [221])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:218 D.7203 ] [218])
            (nil))))
(insn 424 423 425 34 (set (reg/f:DI 2 cx [orig:223 D.7199 ] [223])
        (mem/f:DI (reg/f:DI 0 ax [orig:222 D.7203 ] [222]) [0 *_217+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:222 D.7203 ] [222])
        (nil)))
(insn 425 424 426 34 (set (reg/f:DI 1 dx [orig:224 D.7203 ] [224])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (nil))
(insn 426 425 427 34 (set (reg/f:DI 0 ax [orig:225 D.7203 ] [225])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl.sel_nvp_index+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (nil))
(insn 427 426 428 34 (set (reg:SI 4 si [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:657 89 {*movsi_internal}
     (nil))
(insn 428 427 429 34 (set (reg:DI 4 si [orig:226 D.7200 ] [226])
        (sign_extend:DI (reg:SI 4 si [447]))) mABM.c:657 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [447])
        (nil)))
(insn 429 428 430 34 (parallel [
            (set (reg:DI 4 si [orig:227 D.7200 ] [227])
                (ashift:DI (reg:DI 4 si [orig:226 D.7200 ] [226])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:226 D.7200 ] [226])
        (nil)))
(insn 430 429 431 34 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.7203 ] [228])
                (plus:DI (reg/f:DI 0 ax [orig:225 D.7203 ] [225])
                    (reg:DI 4 si [orig:227 D.7200 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:227 D.7200 ] [227])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:225 D.7203 ] [225])
            (nil))))
(insn 431 430 432 34 (set (reg/f:DI 0 ax [orig:229 D.7199 ] [229])
        (mem/f:DI (reg/f:DI 0 ax [orig:228 D.7203 ] [228]) [0 *_223+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:228 D.7203 ] [228])
        (nil)))
(insn 432 431 433 34 (parallel [
            (set (reg/f:DI 0 ax [orig:230 D.7199 ] [230])
                (plus:DI (reg/f:DI 0 ax [orig:229 D.7199 ] [229])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:229 D.7199 ] [229])
        (nil)))
(insn 433 432 793 34 (set (reg:XF 8 st [orig:231 D.7201 ] [231])
        (mem:XF (reg/f:DI 0 ax [orig:230 D.7199 ] [230]) [0 *_225+0 S16 A128])) mABM.c:657 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:230 D.7199 ] [230])
        (nil)))
(insn 793 433 794 34 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -178 [0xffffffffffffff4e])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:657 199 {x86_fnstcw_1}
     (nil))
(insn 794 793 795 34 (set (reg:HI 0 ax [510])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -178 [0xffffffffffffff4e])) [0  S2 A16])) mABM.c:657 90 {*movhi_internal}
     (nil))
(insn 795 794 796 34 (parallel [
            (set (reg:HI 0 ax [510])
                (ior:HI (reg:HI 0 ax [510])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 410 {*iorhi_1}
     (nil))
(insn 796 795 786 34 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [0  S2 A16])
        (reg:HI 0 ax [510])) mABM.c:657 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [510])
        (nil)))
(insn 786 796 435 34 (parallel [
            (set (reg:SI 0 ax [orig:232 D.7198 ] [232])
                (fix:SI (reg:XF 8 st [orig:231 D.7201 ] [231])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -178 [0xffffffffffffff4e])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -180 [0xffffffffffffff4c])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -184 [0xffffffffffffff48])) [0  S4 A32]))
        ]) mABM.c:657 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:231 D.7201 ] [231])
        (nil)))
(insn 435 786 436 34 (set (reg:DI 0 ax [orig:233 D.7200 ] [233])
        (sign_extend:DI (reg:SI 0 ax [orig:232 D.7198 ] [232]))) mABM.c:657 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:232 D.7198 ] [232])
        (nil)))
(insn 436 435 437 34 (parallel [
            (set (reg:DI 0 ax [orig:234 D.7200 ] [234])
                (ashift:DI (reg:DI 0 ax [orig:233 D.7200 ] [233])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:233 D.7200 ] [233])
        (nil)))
(insn 437 436 438 34 (parallel [
            (set (reg/f:DI 0 ax [orig:235 D.7203 ] [235])
                (plus:DI (reg:DI 0 ax [orig:234 D.7200 ] [234])
                    (reg/f:DI 1 dx [orig:224 D.7203 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:657 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:234 D.7200 ] [234])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:224 D.7203 ] [224])
            (nil))))
(insn 438 437 439 34 (set (reg/f:DI 0 ax [orig:236 D.7199 ] [236])
        (mem/f:DI (reg/f:DI 0 ax [orig:235 D.7203 ] [235]) [0 *_230+0 S8 A64])) mABM.c:657 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:235 D.7203 ] [235])
        (nil)))
(insn 439 438 440 34 (set (reg:XF 0 ax [orig:237 D.7201 ] [237])
        (mem:XF (reg/f:DI 0 ax [orig:236 D.7199 ] [236]) [0 *_231+0 S16 A128])) mABM.c:657 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:236 D.7199 ] [236])
        (nil)))
(insn 440 439 441 34 (set (mem:XF (reg/f:DI 2 cx [orig:223 D.7199 ] [223]) [0 *_218+0 S16 A128])
        (reg:XF 0 ax [orig:237 D.7201 ] [237])) mABM.c:657 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:237 D.7201 ] [237])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:223 D.7199 ] [223])
            (nil))))
(insn 441 440 442 34 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (nil))
(insn 442 441 443 34 (set (reg/f:DI 1 dx [orig:238 D.7203 ] [238])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [448])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [448])
        (nil)))
(insn 443 442 444 34 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (nil))
(insn 444 443 445 34 (set (reg:SI 0 ax [orig:239 D.7198 ] [239])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [449])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:658 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [449])
        (nil)))
(insn 445 444 446 34 (set (reg:DI 0 ax [orig:240 D.7200 ] [240])
        (sign_extend:DI (reg:SI 0 ax [orig:239 D.7198 ] [239]))) mABM.c:658 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:239 D.7198 ] [239])
        (nil)))
(insn 446 445 447 34 (parallel [
            (set (reg:DI 0 ax [orig:241 D.7200 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.7200 ] [240])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:240 D.7200 ] [240])
        (nil)))
(insn 447 446 448 34 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.7203 ] [242])
                (plus:DI (reg:DI 0 ax [orig:241 D.7200 ] [241])
                    (reg/f:DI 1 dx [orig:238 D.7203 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:241 D.7200 ] [241])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:238 D.7203 ] [238])
            (nil))))
(insn 448 447 449 34 (set (reg/f:DI 0 ax [orig:243 D.7199 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [orig:242 D.7203 ] [242]) [0 *_237+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:242 D.7203 ] [242])
        (nil)))
(insn 449 448 450 34 (parallel [
            (set (reg/f:DI 2 cx [orig:244 D.7199 ] [244])
                (plus:DI (reg/f:DI 0 ax [orig:243 D.7199 ] [243])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:243 D.7199 ] [243])
        (nil)))
(insn 450 449 451 34 (set (reg/f:DI 0 ax [orig:245 D.7203 ] [245])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 conf.tmp_nvp+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (nil))
(insn 451 450 452 34 (set (reg/f:DI 1 dx [orig:246 D.7203 ] [246])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl.sel_nvp_index+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (nil))
(insn 452 451 453 34 (set (reg:SI 4 si [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:658 89 {*movsi_internal}
     (nil))
(insn 453 452 454 34 (set (reg:DI 4 si [orig:247 D.7200 ] [247])
        (sign_extend:DI (reg:SI 4 si [450]))) mABM.c:658 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 4 si [450])
        (nil)))
(insn 454 453 455 34 (parallel [
            (set (reg:DI 4 si [orig:248 D.7200 ] [248])
                (ashift:DI (reg:DI 4 si [orig:247 D.7200 ] [247])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:247 D.7200 ] [247])
        (nil)))
(insn 455 454 456 34 (parallel [
            (set (reg/f:DI 1 dx [orig:249 D.7203 ] [249])
                (plus:DI (reg/f:DI 1 dx [orig:246 D.7203 ] [246])
                    (reg:DI 4 si [orig:248 D.7200 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:248 D.7200 ] [248])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:246 D.7203 ] [246])
            (nil))))
(insn 456 455 457 34 (set (reg/f:DI 1 dx [orig:250 D.7199 ] [250])
        (mem/f:DI (reg/f:DI 1 dx [orig:249 D.7203 ] [249]) [0 *_244+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:249 D.7203 ] [249])
        (nil)))
(insn 457 456 458 34 (parallel [
            (set (reg/f:DI 1 dx [orig:251 D.7199 ] [251])
                (plus:DI (reg/f:DI 1 dx [orig:250 D.7199 ] [250])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:250 D.7199 ] [250])
        (nil)))
(insn 458 457 787 34 (set (reg:XF 8 st [orig:252 D.7201 ] [252])
        (mem:XF (reg/f:DI 1 dx [orig:251 D.7199 ] [251]) [0 *_246+0 S16 A128])) mABM.c:658 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:251 D.7199 ] [251])
        (nil)))
(insn 787 458 460 34 (parallel [
            (set (reg:SI 1 dx [orig:253 D.7198 ] [253])
                (fix:SI (reg:XF 8 st [orig:252 D.7201 ] [252])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -178 [0xffffffffffffff4e])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -180 [0xffffffffffffff4c])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -184 [0xffffffffffffff48])) [0  S4 A32]))
        ]) mABM.c:658 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:252 D.7201 ] [252])
        (nil)))
(insn 460 787 461 34 (set (reg:DI 1 dx [orig:254 D.7200 ] [254])
        (sign_extend:DI (reg:SI 1 dx [orig:253 D.7198 ] [253]))) mABM.c:658 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:253 D.7198 ] [253])
        (nil)))
(insn 461 460 462 34 (parallel [
            (set (reg:DI 1 dx [orig:255 D.7200 ] [255])
                (ashift:DI (reg:DI 1 dx [orig:254 D.7200 ] [254])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:254 D.7200 ] [254])
        (nil)))
(insn 462 461 463 34 (parallel [
            (set (reg/f:DI 0 ax [orig:256 D.7203 ] [256])
                (plus:DI (reg/f:DI 0 ax [orig:245 D.7203 ] [245])
                    (reg:DI 1 dx [orig:255 D.7200 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:658 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:255 D.7200 ] [255])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:245 D.7203 ] [245])
            (nil))))
(insn 463 462 464 34 (set (reg/f:DI 0 ax [orig:257 D.7199 ] [257])
        (mem/f:DI (reg/f:DI 0 ax [orig:256 D.7203 ] [256]) [0 *_251+0 S8 A64])) mABM.c:658 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:256 D.7203 ] [256])
        (nil)))
(insn 464 463 465 34 (set (reg:XF 0 ax [orig:258 D.7201 ] [258])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:257 D.7199 ] [257])
                (const_int 16 [0x10])) [0 MEM[(long double *)_252 + 16B]+0 S16 A128])) mABM.c:658 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:257 D.7199 ] [257])
        (nil)))
(insn 465 464 466 34 (set (mem:XF (reg/f:DI 2 cx [orig:244 D.7199 ] [244]) [0 *_239+0 S16 A128])
        (reg:XF 0 ax [orig:258 D.7201 ] [258])) mABM.c:658 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:258 D.7201 ] [258])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:244 D.7199 ] [244])
            (nil))))
(insn 466 465 467 34 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (nil))
(insn 467 466 468 34 (set (reg/f:DI 1 dx [orig:259 D.7203 ] [259])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [451])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [451])
        (nil)))
(insn 468 467 469 34 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (nil))
(insn 469 468 470 34 (set (reg:SI 0 ax [orig:260 D.7198 ] [260])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [452])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:659 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [452])
        (nil)))
(insn 470 469 471 34 (set (reg:DI 0 ax [orig:261 D.7200 ] [261])
        (sign_extend:DI (reg:SI 0 ax [orig:260 D.7198 ] [260]))) mABM.c:659 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:260 D.7198 ] [260])
        (nil)))
(insn 471 470 472 34 (parallel [
            (set (reg:DI 0 ax [orig:262 D.7200 ] [262])
                (ashift:DI (reg:DI 0 ax [orig:261 D.7200 ] [261])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:659 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:261 D.7200 ] [261])
        (nil)))
(insn 472 471 473 34 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.7203 ] [263])
                (plus:DI (reg:DI 0 ax [orig:262 D.7200 ] [262])
                    (reg/f:DI 1 dx [orig:259 D.7203 ] [259])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:659 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:262 D.7200 ] [262])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:259 D.7203 ] [259])
            (nil))))
(insn 473 472 474 34 (set (reg/f:DI 0 ax [orig:264 D.7199 ] [264])
        (mem/f:DI (reg/f:DI 0 ax [orig:263 D.7203 ] [263]) [0 *_258+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:263 D.7203 ] [263])
        (nil)))
(insn 474 473 475 34 (parallel [
            (set (reg/f:DI 2 cx [orig:265 D.7199 ] [265])
                (plus:DI (reg/f:DI 0 ax [orig:264 D.7199 ] [264])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:659 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:264 D.7199 ] [264])
        (nil)))
(insn 475 474 476 34 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:659 89 {*movsi_internal}
     (nil))
(insn 476 475 477 34 (set (reg:DI 0 ax [orig:266 D.7200 ] [266])
        (sign_extend:DI (reg:SI 0 ax [453]))) mABM.c:659 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [453])
        (nil)))
(insn 477 476 478 34 (parallel [
            (set (reg:DI 1 dx [orig:267 D.7200 ] [267])
                (ashift:DI (reg:DI 0 ax [orig:266 D.7200 ] [266])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:659 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:266 D.7200 ] [266])
        (nil)))
(insn 478 477 479 34 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (nil))
(insn 479 478 480 34 (parallel [
            (set (reg/f:DI 0 ax [orig:268 D.7203 ] [268])
                (plus:DI (reg/f:DI 0 ax [454])
                    (reg:DI 1 dx [orig:267 D.7200 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:659 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [454])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:267 D.7200 ] [267])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 old_nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:267 D.7200 ] [267]))
                (nil)))))
(insn 480 479 481 34 (set (reg/f:DI 0 ax [orig:269 D.7199 ] [269])
        (mem/f:DI (reg/f:DI 0 ax [orig:268 D.7203 ] [268]) [0 *_263+0 S8 A64])) mABM.c:659 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:268 D.7203 ] [268])
        (nil)))
(insn 481 480 482 34 (set (reg:XF 0 ax [orig:270 D.7201 ] [270])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:269 D.7199 ] [269])
                (const_int 32 [0x20])) [0 MEM[(long double *)_264 + 32B]+0 S16 A128])) mABM.c:659 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:269 D.7199 ] [269])
        (nil)))
(insn 482 481 483 34 (set (mem:XF (reg/f:DI 2 cx [orig:265 D.7199 ] [265]) [0 *_260+0 S16 A128])
        (reg:XF 0 ax [orig:270 D.7201 ] [270])) mABM.c:659 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:270 D.7201 ] [270])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:265 D.7199 ] [265])
            (nil))))
(insn 483 482 484 34 (set (reg/f:DI 0 ax [455])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (nil))
(insn 484 483 485 34 (set (reg/f:DI 1 dx [orig:271 D.7203 ] [271])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [455])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [455])
        (nil)))
(insn 485 484 486 34 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (nil))
(insn 486 485 487 34 (set (reg:SI 0 ax [orig:272 D.7198 ] [272])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [456])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:660 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [456])
        (nil)))
(insn 487 486 488 34 (set (reg:DI 0 ax [orig:273 D.7200 ] [273])
        (sign_extend:DI (reg:SI 0 ax [orig:272 D.7198 ] [272]))) mABM.c:660 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:272 D.7198 ] [272])
        (nil)))
(insn 488 487 489 34 (parallel [
            (set (reg:DI 0 ax [orig:274 D.7200 ] [274])
                (ashift:DI (reg:DI 0 ax [orig:273 D.7200 ] [273])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:660 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:273 D.7200 ] [273])
        (nil)))
(insn 489 488 490 34 (parallel [
            (set (reg/f:DI 0 ax [orig:275 D.7203 ] [275])
                (plus:DI (reg:DI 0 ax [orig:274 D.7200 ] [274])
                    (reg/f:DI 1 dx [orig:271 D.7203 ] [271])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:660 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:274 D.7200 ] [274])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:271 D.7203 ] [271])
            (nil))))
(insn 490 489 491 34 (set (reg/f:DI 0 ax [orig:276 D.7199 ] [276])
        (mem/f:DI (reg/f:DI 0 ax [orig:275 D.7203 ] [275]) [0 *_270+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:275 D.7203 ] [275])
        (nil)))
(insn 491 490 492 34 (parallel [
            (set (reg/f:DI 2 cx [orig:277 D.7199 ] [277])
                (plus:DI (reg/f:DI 0 ax [orig:276 D.7199 ] [276])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:660 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:276 D.7199 ] [276])
        (nil)))
(insn 492 491 493 34 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 unsafe+0 S4 A32])) mABM.c:660 89 {*movsi_internal}
     (nil))
(insn 493 492 494 34 (set (reg:DI 0 ax [orig:278 D.7200 ] [278])
        (sign_extend:DI (reg:SI 0 ax [457]))) mABM.c:660 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [457])
        (nil)))
(insn 494 493 495 34 (parallel [
            (set (reg:DI 1 dx [orig:279 D.7200 ] [279])
                (ashift:DI (reg:DI 0 ax [orig:278 D.7200 ] [278])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:660 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:278 D.7200 ] [278])
        (nil)))
(insn 495 494 496 34 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (nil))
(insn 496 495 497 34 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.7203 ] [280])
                (plus:DI (reg/f:DI 0 ax [458])
                    (reg:DI 1 dx [orig:279 D.7200 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:660 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [458])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:279 D.7200 ] [279])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 old_nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:279 D.7200 ] [279]))
                (nil)))))
(insn 497 496 498 34 (set (reg/f:DI 0 ax [orig:281 D.7199 ] [281])
        (mem/f:DI (reg/f:DI 0 ax [orig:280 D.7203 ] [280]) [0 *_275+0 S8 A64])) mABM.c:660 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:280 D.7203 ] [280])
        (nil)))
(insn 498 497 499 34 (set (reg:XF 0 ax [orig:282 D.7201 ] [282])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:281 D.7199 ] [281])
                (const_int 48 [0x30])) [0 MEM[(long double *)_276 + 48B]+0 S16 A128])) mABM.c:660 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:281 D.7199 ] [281])
        (nil)))
(insn 499 498 500 34 (set (mem:XF (reg/f:DI 2 cx [orig:277 D.7199 ] [277]) [0 *_272+0 S16 A128])
        (reg:XF 0 ax [orig:282 D.7201 ] [282])) mABM.c:660 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:282 D.7201 ] [282])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:277 D.7199 ] [277])
            (nil))))
(insn 500 499 501 34 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (nil))
(insn 501 500 502 34 (set (reg/f:DI 0 ax [orig:283 D.7203 ] [283])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [459])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [459])
        (nil)))
(insn 502 501 503 34 (set (reg:SI 1 dx [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:663 89 {*movsi_internal}
     (nil))
(insn 503 502 504 34 (set (reg:DI 1 dx [orig:284 D.7202 ] [284])
        (sign_extend:DI (reg:SI 1 dx [460]))) mABM.c:663 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [460])
        (nil)))
(insn 504 503 505 34 (parallel [
            (set (reg:DI 1 dx [orig:285 D.7202 ] [285])
                (plus:DI (reg:DI 1 dx [orig:284 D.7202 ] [284])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:284 D.7202 ] [284])
        (nil)))
(insn 505 504 506 34 (parallel [
            (set (reg:DI 1 dx [orig:286 D.7202 ] [286])
                (ashift:DI (reg:DI 1 dx [orig:285 D.7202 ] [285])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:285 D.7202 ] [285])
        (nil)))
(insn 506 505 507 34 (parallel [
            (set (reg/f:DI 0 ax [orig:287 D.7203 ] [287])
                (plus:DI (reg/f:DI 0 ax [orig:283 D.7203 ] [283])
                    (reg:DI 1 dx [orig:286 D.7202 ] [286])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:286 D.7202 ] [286])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:283 D.7203 ] [283])
            (nil))))
(insn 507 506 508 34 (set (reg/f:DI 1 dx [orig:288 D.7199 ] [288])
        (mem/f:DI (reg/f:DI 0 ax [orig:287 D.7203 ] [287]) [0 *_282+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:287 D.7203 ] [287])
        (nil)))
(insn 508 507 509 34 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (nil))
(insn 509 508 510 34 (set (reg/f:DI 0 ax [orig:289 D.7203 ] [289])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [461])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [461])
        (nil)))
(insn 510 509 511 34 (set (reg:SI 2 cx [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:663 89 {*movsi_internal}
     (nil))
(insn 511 510 512 34 (set (reg:DI 2 cx [orig:290 D.7200 ] [290])
        (sign_extend:DI (reg:SI 2 cx [462]))) mABM.c:663 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [462])
        (nil)))
(insn 512 511 513 34 (parallel [
            (set (reg:DI 2 cx [orig:291 D.7200 ] [291])
                (ashift:DI (reg:DI 2 cx [orig:290 D.7200 ] [290])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:290 D.7200 ] [290])
        (nil)))
(insn 513 512 514 34 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.7203 ] [292])
                (plus:DI (reg/f:DI 0 ax [orig:289 D.7203 ] [289])
                    (reg:DI 2 cx [orig:291 D.7200 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:291 D.7200 ] [291])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:289 D.7203 ] [289])
            (nil))))
(insn 514 513 515 34 (set (reg/f:DI 2 cx [orig:293 D.7199 ] [293])
        (mem/f:DI (reg/f:DI 0 ax [orig:292 D.7203 ] [292]) [0 *_287+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:292 D.7203 ] [292])
        (nil)))
(insn 515 514 516 34 (set (reg/f:DI 0 ax [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (nil))
(insn 516 515 517 34 (set (reg/f:DI 4 si [orig:294 D.7203 ] [294])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [463])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [463])
        (nil)))
(insn 517 516 518 34 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (nil))
(insn 518 517 519 34 (set (reg:SI 0 ax [orig:295 D.7198 ] [295])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [464])
                (const_int 44 [0x2c])) [0 f_27(D)->st_indx+0 S4 A32])) mABM.c:663 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [464])
        (nil)))
(insn 519 518 520 34 (set (reg:DI 0 ax [orig:296 D.7200 ] [296])
        (sign_extend:DI (reg:SI 0 ax [orig:295 D.7198 ] [295]))) mABM.c:663 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:295 D.7198 ] [295])
        (nil)))
(insn 520 519 521 34 (parallel [
            (set (reg:DI 0 ax [orig:297 D.7200 ] [297])
                (ashift:DI (reg:DI 0 ax [orig:296 D.7200 ] [296])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:296 D.7200 ] [296])
        (nil)))
(insn 521 520 522 34 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.7203 ] [298])
                (plus:DI (reg:DI 0 ax [orig:297 D.7200 ] [297])
                    (reg/f:DI 4 si [orig:294 D.7203 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:663 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:297 D.7200 ] [297])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:294 D.7203 ] [294])
            (nil))))
(insn 522 521 523 34 (set (reg/f:DI 0 ax [orig:299 D.7199 ] [299])
        (mem/f:DI (reg/f:DI 0 ax [orig:298 D.7203 ] [298]) [0 *_293+0 S8 A64])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:298 D.7203 ] [298])
        (nil)))
(insn 523 522 524 34 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:288 D.7199 ] [288])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:288 D.7199 ] [288])
        (nil)))
(insn 524 523 525 34 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:293 D.7199 ] [293])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:293 D.7199 ] [293])
        (nil)))
(insn 525 524 526 34 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:299 D.7199 ] [299])) mABM.c:663 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:299 D.7199 ] [299])
        (nil)))
(call_insn 526 525 527 34 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_direction") [flags 0x41]  <function_decl 0x7f05a595e900 angle_direction>) [0 angle_direction S1 A8])
            (const_int 0 [0]))) mABM.c:663 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 527 526 528 34 (set (reg:XF 8 st [orig:300 D.7201 ] [300])
        (reg:XF 8 st)) mABM.c:663 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 528 527 529 34 (set (reg:XF 9 st(1) [orig:301 D.7201 ] [301])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 conf.max_ang+0 S16 A128])) mABM.c:663 131 {*movxf_internal_rex64}
     (nil))
(insn 529 528 530 34 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:300 D.7201 ] [300])
            (reg:XF 9 st(1) [orig:301 D.7201 ] [301]))) mABM.c:663 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:301 D.7201 ] [301])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:300 D.7201 ] [300])
            (nil))))
(jump_insn 530 529 534 34 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 775)
            (pc))) mABM.c:663 612 {*jcc_1}
     (nil)
 -> 775)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 534 530 776 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(jump_insn 776 534 777 35 (set (pc)
        (label_ref 622)) mABM.c:663 650 {jump}
     (nil)
 -> 622)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

(barrier 777 776 775)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 302 303 304 305 306 307 308 309 310 311 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483
(code_label 775 777 538 36 281 "" [1 uses])
(note 538 775 539 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 539 538 540 36 (set (reg:XF 2 cx [orig:302 D.7201 ] [302])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:665 131 {*movxf_internal_rex64}
     (nil))
(insn 540 539 541 36 (set (reg:XF 0 ax [orig:303 D.7201 ] [303])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:665 131 {*movxf_internal_rex64}
     (nil))
(insn 541 540 542 36 (set (reg:SI 38 r9 [orig:304 D.7198 ] [304])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:665 89 {*movsi_internal}
     (nil))
(insn 542 541 543 36 (set (reg/f:DI 4 si [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:665 87 {*movdi_internal_rex64}
     (nil))
(insn 543 542 544 36 (parallel [
            (set (reg/f:DI 39 r10 [orig:305 D.7204 ] [305])
                (plus:DI (reg/f:DI 4 si [465])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:665 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [465])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -120 [0xffffffffffffff88])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 544 543 545 36 (set (reg:DI 37 r8 [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:665 87 {*movdi_internal_rex64}
     (nil))
(insn 545 544 546 36 (set (reg:XF 4 si [467])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dV+0 S16 A128])) mABM.c:665 131 {*movxf_internal_rex64}
     (nil))
(insn 546 545 547 36 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [467])) mABM.c:665 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [467])
        (nil)))
(insn 547 546 548 36 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:302 D.7201 ] [302])) mABM.c:665 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:302 D.7201 ] [302])
        (nil)))
(insn 548 547 549 36 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:303 D.7201 ] [303])) mABM.c:665 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:303 D.7201 ] [303])
        (nil)))
(insn 549 548 550 36 (set (reg:SI 1 dx)
        (reg:SI 38 r9 [orig:304 D.7198 ] [304])) mABM.c:665 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:304 D.7198 ] [304])
        (nil)))
(insn 550 549 551 36 (set (reg:DI 4 si)
        (reg/f:DI 39 r10 [orig:305 D.7204 ] [305])) mABM.c:665 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:305 D.7204 ] [305])
        (nil)))
(insn 551 550 552 36 (set (reg:DI 5 di)
        (reg:DI 37 r8 [466])) mABM.c:665 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [466])
        (nil)))
(call_insn 552 551 553 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:665 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 553 552 554 36 (set (reg:SI 2 cx [orig:306 D.7198 ] [306])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:666 89 {*movsi_internal}
     (nil))
(insn 554 553 555 36 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 555 554 556 36 (set (reg/f:DI 0 ax [orig:307 D.7203 ] [307])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [468])
                (const_int 32 [0x20])) [0 f_27(D)->pos+0 S8 A128])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [468])
        (nil)))
(insn 556 555 557 36 (set (reg:SI 1 dx [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 N_f+0 S4 A32])) mABM.c:666 89 {*movsi_internal}
     (nil))
(insn 557 556 558 36 (parallel [
            (set (reg:DI 4 si [470])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:666 274 {*adddi_1}
     (nil))
(insn 558 557 559 36 (set (reg:DI 5 di [471])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 559 558 560 36 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 5 di [471])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [471])
        (nil)))
(insn 560 559 561 36 (set (reg:DI 5 di [472])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 561 560 562 36 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 5 di [472])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [472])
        (nil)))
(insn 562 561 563 36 (set (reg:DI 5 di [473])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 563 562 564 36 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 5 di [473])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [473])
        (nil)))
(insn 564 563 565 36 (set (reg:DI 5 di [474])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 565 564 566 36 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 5 di [474])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [474])
        (nil)))
(insn 566 565 567 36 (set (reg:DI 5 di [475])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 567 566 568 36 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg:DI 5 di [475])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [475])
        (nil)))
(insn 568 567 569 36 (set (reg:DI 5 di [476])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:666 87 {*movdi_internal_rex64}
     (nil))
(insn 569 568 570 36 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 5 di [476])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [476])
        (nil)))
(insn 570 569 571 36 (set (reg:SI 2 cx)
        (reg:SI 2 cx [orig:306 D.7198 ] [306])) mABM.c:666 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:306 D.7198 ] [306])
        (nil)))
(insn 571 570 572 36 (set (reg:SI 1 dx)
        (reg:SI 1 dx [469])) mABM.c:666 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [469])
        (nil)))
(insn 572 571 573 36 (set (reg:DI 4 si)
        (reg:DI 4 si [470])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [470])
        (nil)))
(insn 573 572 574 36 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:307 D.7203 ] [307])) mABM.c:666 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:307 D.7203 ] [307])
        (nil)))
(call_insn 574 573 575 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_minimum_flight_distance") [flags 0x3]  <function_decl 0x7f05a571f500 _minimum_flight_distance>) [0 _minimum_flight_distance S1 A8])
            (const_int 48 [0x30]))) mABM.c:666 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S48 A64]))
                        (nil)))))))
(insn 575 574 576 36 (set (reg/f:DI 5 di [orig:308 D.7199 ] [308])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:667 87 {*movdi_internal_rex64}
     (nil))
(insn 576 575 577 36 (set (reg:SI 4 si [orig:309 D.7198 ] [309])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:667 89 {*movsi_internal}
     (nil))
(insn 577 576 578 36 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:667 87 {*movdi_internal_rex64}
     (nil))
(insn 578 577 579 36 (set (reg/f:DI 0 ax [orig:310 D.7203 ] [310])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [477])
                (const_int 32 [0x20])) [0 f_27(D)->pos+0 S8 A128])) mABM.c:667 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [477])
        (nil)))
(insn 579 578 580 36 (set (reg:SI 1 dx [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 sh+0 S4 A64])) mABM.c:667 89 {*movsi_internal}
     (nil))
(insn 580 579 581 36 (set (reg:DI 2 cx [479])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 sh+8 S8 A64])) mABM.c:667 87 {*movdi_internal_rex64}
     (nil))
(insn 581 580 582 36 (set (reg:DI 37 r8)
        (reg/f:DI 5 di [orig:308 D.7199 ] [308])) mABM.c:667 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:308 D.7199 ] [308])
        (nil)))
(insn 582 581 583 36 (set (reg:SI 1 dx)
        (reg:SI 1 dx [478])) mABM.c:667 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [478])
        (nil)))
(insn 583 582 584 36 (set (reg:DI 2 cx)
        (reg:DI 2 cx [479])) mABM.c:667 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [479])
        (nil)))
(insn 584 583 585 36 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:309 D.7198 ] [309])) mABM.c:667 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:309 D.7198 ] [309])
        (nil)))
(insn 585 584 586 36 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:310 D.7203 ] [310])) mABM.c:667 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:310 D.7203 ] [310])
        (nil)))
(call_insn 586 585 587 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_checkShockareaRoute") [flags 0x3]  <function_decl 0x7f05a571f700 _checkShockareaRoute>) [0 _checkShockareaRoute S1 A8])
            (const_int 0 [0]))) mABM.c:667 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 587 586 588 36 (set (reg/f:DI 37 r8 [orig:311 D.7199 ] [311])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:668 87 {*movdi_internal_rex64}
     (nil))
(insn 588 587 589 36 (set (reg:DI 1 dx [480])
        (reg/f:DI 7 sp)) mABM.c:668 87 {*movdi_internal_rex64}
     (nil))
(insn 589 588 590 36 (set (reg:DI 4 si [481])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:668 267 {*leadi}
     (nil))
(insn 590 589 813 36 (set (reg:DI 0 ax [482])
        (const_int 38 [0x26])) mABM.c:668 87 {*movdi_internal_rex64}
     (nil))
(insn 813 590 814 36 (set (reg:DI 5 di [480])
        (reg:DI 1 dx [480])) mABM.c:668 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [480])
        (nil)))
(insn 814 813 591 36 (set (reg:DI 2 cx [482])
        (reg:DI 0 ax [482])) mABM.c:668 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [482])
        (nil)))
(insn 591 814 592 36 (parallel [
            (set (reg:DI 2 cx [482])
                (const_int 0 [0]))
            (set (reg:DI 5 di [480])
                (plus:DI (ashift:DI (reg:DI 2 cx [482])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [480])))
            (set (reg:DI 4 si [481])
                (plus:DI (ashift:DI (reg:DI 2 cx [482])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [481])))
            (set (mem:BLK (reg:DI 5 di [480]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [481]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [482]))
        ]) mABM.c:668 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [482])
        (expr_list:REG_UNUSED (reg:DI 5 di [480])
            (expr_list:REG_UNUSED (reg:DI 4 si [481])
                (nil)))))
(insn 592 591 593 36 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:311 D.7199 ] [311])) mABM.c:668 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:311 D.7199 ] [311])
        (nil)))
(call_insn 593 592 594 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_check_risk") [flags 0x3]  <function_decl 0x7f05a571f800 _check_risk>) [0 _check_risk S1 A8])
            (const_int 304 [0x130]))) mABM.c:668 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 594 593 595 36 (set (reg:SI 0 ax [483])
        (reg:SI 0 ax)) mABM.c:668 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 595 594 596 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 solved+0 S4 A32])
        (reg:SI 0 ax [483])) mABM.c:668 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [483])
        (nil)))
(insn 596 595 597 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 solved+0 S4 A32])
            (const_int 0 [0]))) mABM.c:671 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 597 596 598 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) mABM.c:671 612 {*jcc_1}
     (nil)
 -> 622)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 312 313 314 315 316 484 485 486 487 488
(note 598 597 599 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 599 598 600 37 (set (reg:XF 2 cx [orig:312 D.7201 ] [312])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:674 131 {*movxf_internal_rex64}
     (nil))
(insn 600 599 601 37 (set (reg:XF 0 ax [orig:313 D.7201 ] [313])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:674 131 {*movxf_internal_rex64}
     (nil))
(insn 601 600 602 37 (set (reg:SI 4 si [orig:314 D.7198 ] [314])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:674 89 {*movsi_internal}
     (nil))
(insn 602 601 603 37 (parallel [
            (set (reg:SI 39 r10 [orig:315 D.7198 ] [315])
                (ashift:SI (reg:SI 4 si [orig:314 D.7198 ] [314])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:674 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:314 D.7198 ] [314])
        (nil)))
(insn 603 602 604 37 (set (reg/f:DI 4 si [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:674 87 {*movdi_internal_rex64}
     (nil))
(insn 604 603 605 37 (parallel [
            (set (reg/f:DI 38 r9 [orig:316 D.7204 ] [316])
                (plus:DI (reg/f:DI 4 si [484])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:674 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [484])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -120 [0xffffffffffffff88])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 605 604 606 37 (set (reg:DI 37 r8 [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:674 87 {*movdi_internal_rex64}
     (nil))
(insn 606 605 607 37 (set (reg:XF 4 si [486])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dV+0 S16 A128])) mABM.c:674 131 {*movxf_internal_rex64}
     (nil))
(insn 607 606 608 37 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [486])) mABM.c:674 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [486])
        (nil)))
(insn 608 607 609 37 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:312 D.7201 ] [312])) mABM.c:674 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:312 D.7201 ] [312])
        (nil)))
(insn 609 608 610 37 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:313 D.7201 ] [313])) mABM.c:674 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:313 D.7201 ] [313])
        (nil)))
(insn 610 609 611 37 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:315 D.7198 ] [315])) mABM.c:674 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:315 D.7198 ] [315])
        (nil)))
(insn 611 610 612 37 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:316 D.7204 ] [316])) mABM.c:674 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:316 D.7204 ] [316])
        (nil)))
(insn 612 611 613 37 (set (reg:DI 5 di)
        (reg:DI 37 r8 [485])) mABM.c:674 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [485])
        (nil)))
(call_insn 613 612 614 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:674 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 614 613 615 37 (set (reg:SI 1 dx [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32])) mABM.c:675 89 {*movsi_internal}
     (nil))
(insn 615 614 616 37 (set (reg:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:675 87 {*movdi_internal_rex64}
     (nil))
(insn 616 615 617 37 (set (reg:SI 4 si)
        (reg:SI 1 dx [487])) mABM.c:675 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [487])
        (nil)))
(insn 617 616 618 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [488])) mABM.c:675 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [488])
        (nil)))
(call_insn 618 617 619 37 (call (mem:QI (symbol_ref:DI ("ffree_2D") [flags 0x41]  <function_decl 0x7f05a595e300 ffree_2D>) [0 ffree_2D S1 A8])
        (const_int 0 [0])) mABM.c:675 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 619 618 778 37 (set (reg:SI 0 ax [orig:59 D.7198 ] [59])
        (const_int 0 [0])) mABM.c:680 89 {*movsi_internal}
     (nil))
(jump_insn 778 619 779 37 (set (pc)
        (label_ref 738)) mABM.c:680 650 {jump}
     (nil)
 -> 738)
;;  succ:       52 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 779 778 622)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;;              35 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 622 779 623 38 270 "" [2 uses])
(note 623 622 624 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 625 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:654 273 {*addsi_1}
     (nil))
;;  succ:       39 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU,DFS_BACK)
;;              33 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 217
(code_label 625 624 626 39 267 "" [1 uses])
(note 626 625 627 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 627 626 629 39 (set (reg:SI 0 ax [orig:217 D.7198 ] [217])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl.n_sel_nvp+0 S4 A64])) mABM.c:654 89 {*movsi_internal}
     (nil))
(insn 629 627 630 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:217 D.7198 ] [217])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:654 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:217 D.7198 ] [217])
        (nil)))
(jump_insn 630 629 631 39 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 628)
            (pc))) mABM.c:654 612 {*jcc_1}
     (nil)
 -> 628)
;;  succ:       34
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 631 630 632 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 632 631 633 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:642 273 {*addsi_1}
     (nil))
(insn 633 632 634 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -96 [0xffffffffffffffa0])) [0 dj+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:642 273 {*addsi_1}
     (nil))
;;  succ:       41 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU,DFS_BACK)
;;              24 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 489
(code_label 634 633 635 41 261 "" [1 uses])
(note 635 634 636 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 41 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:642 87 {*movdi_internal_rex64}
     (nil))
(insn 637 636 638 41 (set (reg:SI 0 ax [orig:158 D.7198 ] [158])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [489])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])) mABM.c:642 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [489])
        (nil)))
(insn 638 637 640 41 (parallel [
            (set (reg:SI 0 ax [orig:159 D.7198 ] [159])
                (plus:SI (reg:SI 0 ax [orig:158 D.7198 ] [158])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:642 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:158 D.7198 ] [158])
        (nil)))
(insn 640 638 641 41 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:159 D.7198 ] [159])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32]))) mABM.c:642 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:159 D.7198 ] [159])
        (nil)))
(jump_insn 641 640 642 41 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 639)
            (pc))) mABM.c:642 612 {*jcc_1}
     (nil)
 -> 639)
;;  succ:       25
;;              42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 642 641 643 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 643 642 780 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:686 89 {*movsi_internal}
     (nil))
(jump_insn 780 643 781 42 (set (pc)
        (label_ref 682)) mABM.c:686 650 {jump}
     (nil)
 -> 682)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 781 780 684)
;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 684 781 646 43 277 "" [1 uses])
(note 646 684 647 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 647 646 782 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:686 89 {*movsi_internal}
     (nil))
(jump_insn 782 647 783 43 (set (pc)
        (label_ref 675)) mABM.c:686 650 {jump}
     (nil)
 -> 675)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 783 782 677)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 490 491 492 493 494 495
(code_label 677 783 650 44 276 "" [1 uses])
(note 650 677 651 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 651 650 652 44 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:686 87 {*movdi_internal_rex64}
     (nil))
(insn 652 651 653 44 (set (reg/f:DI 0 ax [orig:317 D.7203 ] [317])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [490])
                (const_int 8 [0x8])) [0 f_27(D)->nvp+0 S8 A64])) mABM.c:686 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [490])
        (nil)))
(insn 653 652 654 44 (set (reg:SI 1 dx [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:686 89 {*movsi_internal}
     (nil))
(insn 654 653 655 44 (set (reg:DI 1 dx [orig:318 D.7200 ] [318])
        (sign_extend:DI (reg:SI 1 dx [491]))) mABM.c:686 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [491])
        (nil)))
(insn 655 654 656 44 (parallel [
            (set (reg:DI 1 dx [orig:319 D.7200 ] [319])
                (ashift:DI (reg:DI 1 dx [orig:318 D.7200 ] [318])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:318 D.7200 ] [318])
        (nil)))
(insn 656 655 657 44 (parallel [
            (set (reg/f:DI 0 ax [orig:320 D.7203 ] [320])
                (plus:DI (reg/f:DI 0 ax [orig:317 D.7203 ] [317])
                    (reg:DI 1 dx [orig:319 D.7200 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:319 D.7200 ] [319])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:317 D.7203 ] [317])
            (nil))))
(insn 657 656 658 44 (set (reg/f:DI 0 ax [orig:321 D.7199 ] [321])
        (mem/f:DI (reg/f:DI 0 ax [orig:320 D.7203 ] [320]) [0 *_322+0 S8 A64])) mABM.c:686 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:320 D.7203 ] [320])
        (nil)))
(insn 658 657 659 44 (set (reg:SI 1 dx [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:686 89 {*movsi_internal}
     (nil))
(insn 659 658 660 44 (set (reg:DI 1 dx [orig:322 D.7200 ] [322])
        (sign_extend:DI (reg:SI 1 dx [492]))) mABM.c:686 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [492])
        (nil)))
(insn 660 659 661 44 (parallel [
            (set (reg:DI 1 dx [orig:323 D.7200 ] [323])
                (ashift:DI (reg:DI 1 dx [orig:322 D.7200 ] [322])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:322 D.7200 ] [322])
        (nil)))
(insn 661 660 662 44 (parallel [
            (set (reg/f:DI 2 cx [orig:324 D.7199 ] [324])
                (plus:DI (reg/f:DI 0 ax [orig:321 D.7199 ] [321])
                    (reg:DI 1 dx [orig:323 D.7200 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:323 D.7200 ] [323])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:321 D.7199 ] [321])
            (nil))))
(insn 662 661 663 44 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:686 89 {*movsi_internal}
     (nil))
(insn 663 662 664 44 (set (reg:DI 0 ax [orig:325 D.7200 ] [325])
        (sign_extend:DI (reg:SI 0 ax [493]))) mABM.c:686 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [493])
        (nil)))
(insn 664 663 665 44 (parallel [
            (set (reg:DI 1 dx [orig:326 D.7200 ] [326])
                (ashift:DI (reg:DI 0 ax [orig:325 D.7200 ] [325])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:325 D.7200 ] [325])
        (nil)))
(insn 665 664 666 44 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:686 87 {*movdi_internal_rex64}
     (nil))
(insn 666 665 667 44 (parallel [
            (set (reg/f:DI 0 ax [orig:327 D.7203 ] [327])
                (plus:DI (reg/f:DI 0 ax [494])
                    (reg:DI 1 dx [orig:326 D.7200 ] [326])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [494])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:326 D.7200 ] [326])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 old_nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:326 D.7200 ] [326]))
                (nil)))))
(insn 667 666 668 44 (set (reg/f:DI 0 ax [orig:328 D.7199 ] [328])
        (mem/f:DI (reg/f:DI 0 ax [orig:327 D.7203 ] [327]) [0 *_329+0 S8 A64])) mABM.c:686 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:327 D.7203 ] [327])
        (nil)))
(insn 668 667 669 44 (set (reg:SI 1 dx [495])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])) mABM.c:686 89 {*movsi_internal}
     (nil))
(insn 669 668 670 44 (set (reg:DI 1 dx [orig:329 D.7200 ] [329])
        (sign_extend:DI (reg:SI 1 dx [495]))) mABM.c:686 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [495])
        (nil)))
(insn 670 669 671 44 (parallel [
            (set (reg:DI 1 dx [orig:330 D.7200 ] [330])
                (ashift:DI (reg:DI 1 dx [orig:329 D.7200 ] [329])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:329 D.7200 ] [329])
        (nil)))
(insn 671 670 672 44 (parallel [
            (set (reg/f:DI 0 ax [orig:331 D.7199 ] [331])
                (plus:DI (reg/f:DI 0 ax [orig:328 D.7199 ] [328])
                    (reg:DI 1 dx [orig:330 D.7200 ] [330])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:330 D.7200 ] [330])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:328 D.7199 ] [328])
            (nil))))
(insn 672 671 673 44 (set (reg:XF 0 ax [orig:332 D.7201 ] [332])
        (mem:XF (reg/f:DI 0 ax [orig:331 D.7199 ] [331]) [0 *_333+0 S16 A128])) mABM.c:686 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:331 D.7199 ] [331])
        (nil)))
(insn 673 672 674 44 (set (mem:XF (reg/f:DI 2 cx [orig:324 D.7199 ] [324]) [0 *_326+0 S16 A128])
        (reg:XF 0 ax [orig:332 D.7201 ] [332])) mABM.c:686 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:332 D.7201 ] [332])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:324 D.7199 ] [324])
            (nil))))
(insn 674 673 675 44 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 273 {*addsi_1}
     (nil))
;;  succ:       45 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU,DFS_BACK)
;;              43 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 675 674 676 45 275 "" [1 uses])
(note 676 675 678 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 678 676 679 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 j+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:686 7 {*cmpsi_1}
     (nil))
(jump_insn 679 678 680 45 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 677)
            (pc))) mABM.c:686 612 {*jcc_1}
     (nil)
 -> 677)
;;  succ:       44
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 680 679 681 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 681 680 682 46 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:686 273 {*addsi_1}
     (nil))
;;  succ:       47 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU,DFS_BACK)
;;              42 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 496
(code_label 682 681 683 47 274 "" [1 uses])
(note 683 682 685 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 685 683 686 47 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:686 89 {*movsi_internal}
     (nil))
(insn 686 685 687 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [496])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32]))) mABM.c:686 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [496])
        (nil)))
(jump_insn 687 686 688 47 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 684)
            (pc))) mABM.c:686 612 {*jcc_1}
     (nil)
 -> 684)
;;  succ:       43
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 688 687 689 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 689 688 784 48 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:687 89 {*movsi_internal}
     (nil))
(jump_insn 784 689 785 48 (set (pc)
        (label_ref 707)) mABM.c:687 650 {jump}
     (nil)
 -> 707)
;;  succ:       50 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 785 784 711)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 334 335 336 337 338 339 340 341 497 498 499 500
(code_label 711 785 692 49 279 "" [1 uses])
(note 692 711 693 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 49 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:687 87 {*movdi_internal_rex64}
     (nil))
(insn 694 693 695 49 (set (reg/f:DI 0 ax [orig:334 D.7199 ] [334])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [497])
                (const_int 24 [0x18])) [0 f_27(D)->vel+0 S8 A64])) mABM.c:687 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [497])
        (nil)))
(insn 695 694 696 49 (set (reg:SI 1 dx [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:687 89 {*movsi_internal}
     (nil))
(insn 696 695 697 49 (set (reg:DI 1 dx [orig:335 D.7200 ] [335])
        (sign_extend:DI (reg:SI 1 dx [498]))) mABM.c:687 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [498])
        (nil)))
(insn 697 696 698 49 (parallel [
            (set (reg:DI 1 dx [orig:336 D.7200 ] [336])
                (ashift:DI (reg:DI 1 dx [orig:335 D.7200 ] [335])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:335 D.7200 ] [335])
        (nil)))
(insn 698 697 699 49 (parallel [
            (set (reg/f:DI 2 cx [orig:337 D.7199 ] [337])
                (plus:DI (reg/f:DI 0 ax [orig:334 D.7199 ] [334])
                    (reg:DI 1 dx [orig:336 D.7200 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:336 D.7200 ] [336])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:334 D.7199 ] [334])
            (nil))))
(insn 699 698 700 49 (set (reg:SI 0 ax [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) mABM.c:687 89 {*movsi_internal}
     (nil))
(insn 700 699 815 49 (set (reg:DI 0 ax [orig:338 D.7200 ] [338])
        (sign_extend:DI (reg:SI 0 ax [499]))) mABM.c:687 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [499])
        (nil)))
(insn 815 700 701 49 (set (reg:DI 0 ax [orig:339 D.7200 ] [339])
        (reg:DI 0 ax [orig:338 D.7200 ] [338])) mABM.c:687 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:338 D.7200 ] [338])
        (nil)))
(insn 701 815 816 49 (parallel [
            (set (reg:DI 0 ax [orig:339 D.7200 ] [339])
                (ashift:DI (reg:DI 0 ax [orig:339 D.7200 ] [339])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 513 {*ashldi3_1}
     (nil))
(insn 816 701 702 49 (set (reg:DI 1 dx [orig:339 D.7200 ] [339])
        (reg:DI 0 ax [orig:339 D.7200 ] [339])) mABM.c:687 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:339 D.7200 ] [339])
        (nil)))
(insn 702 816 703 49 (set (reg/f:DI 0 ax [500])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 old_vel+0 S8 A64])) mABM.c:687 87 {*movdi_internal_rex64}
     (nil))
(insn 703 702 704 49 (parallel [
            (set (reg/f:DI 0 ax [orig:340 D.7199 ] [340])
                (plus:DI (reg/f:DI 0 ax [500])
                    (reg:DI 1 dx [orig:339 D.7200 ] [339])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [500])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:339 D.7200 ] [339])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 old_vel+0 S8 A64])
                    (reg:DI 1 dx [orig:339 D.7200 ] [339]))
                (nil)))))
(insn 704 703 705 49 (set (reg:XF 0 ax [orig:341 D.7201 ] [341])
        (mem:XF (reg/f:DI 0 ax [orig:340 D.7199 ] [340]) [0 *_345+0 S16 A128])) mABM.c:687 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:340 D.7199 ] [340])
        (nil)))
(insn 705 704 706 49 (set (mem:XF (reg/f:DI 2 cx [orig:337 D.7199 ] [337]) [0 *_342+0 S16 A128])
        (reg:XF 0 ax [orig:341 D.7201 ] [341])) mABM.c:687 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:341 D.7201 ] [341])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:337 D.7199 ] [337])
            (nil))))
(insn 706 705 707 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 273 {*addsi_1}
     (nil))
;;  succ:       50 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU,DFS_BACK)
;;              48 [100.0%] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 333 501
(code_label 707 706 708 50 278 "" [1 uses])
(note 708 707 709 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 709 708 710 50 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32])) mABM.c:687 89 {*movsi_internal}
     (nil))
(insn 710 709 712 50 (parallel [
            (set (reg:SI 0 ax [orig:333 D.7198 ] [333])
                (plus:SI (reg:SI 0 ax [501])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:687 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [501])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -64 [0xffffffffffffffc0])) [0 olf+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 712 710 713 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:333 D.7198 ] [333])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) mABM.c:687 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:333 D.7198 ] [333])
        (nil)))
(jump_insn 713 712 714 50 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 711)
            (pc))) mABM.c:687 612 {*jcc_1}
     (nil)
 -> 711)
;;  succ:       49
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 342 343 344 345 502 503 504 505 506 507 508
(note 714 713 715 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 51 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:689 87 {*movdi_internal_rex64}
     (nil))
(insn 716 715 717 51 (set (reg:SI 1 dx [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32])) mABM.c:689 89 {*movsi_internal}
     (nil))
(insn 717 716 718 51 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [502])
                (const_int 4 [0x4])) [0 f_27(D)->n_nvp+0 S4 A32])
        (reg:SI 1 dx [503])) mABM.c:689 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [503])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [502])
            (nil))))
(insn 718 717 719 51 (set (reg:SI 1 dx [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 olf+0 S4 A32])) mABM.c:690 89 {*movsi_internal}
     (nil))
(insn 719 718 720 51 (set (reg:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 old_nvp+0 S8 A64])) mABM.c:690 87 {*movdi_internal_rex64}
     (nil))
(insn 720 719 721 51 (set (reg:SI 4 si)
        (reg:SI 1 dx [504])) mABM.c:690 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [504])
        (nil)))
(insn 721 720 722 51 (set (reg:DI 5 di)
        (reg:DI 0 ax [505])) mABM.c:690 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [505])
        (nil)))
(call_insn 722 721 723 51 (call (mem:QI (symbol_ref:DI ("ffree_2D") [flags 0x41]  <function_decl 0x7f05a595e300 ffree_2D>) [0 ffree_2D S1 A8])
        (const_int 0 [0])) mABM.c:690 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 723 722 724 51 (set (reg:XF 2 cx [orig:342 D.7201 ] [342])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:691 131 {*movxf_internal_rex64}
     (nil))
(insn 724 723 725 51 (set (reg:XF 0 ax [orig:343 D.7201 ] [343])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:691 131 {*movxf_internal_rex64}
     (nil))
(insn 725 724 726 51 (set (reg:SI 38 r9 [orig:344 D.7198 ] [344])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:691 89 {*movsi_internal}
     (nil))
(insn 726 725 727 51 (set (reg/f:DI 4 si [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:691 87 {*movdi_internal_rex64}
     (nil))
(insn 727 726 728 51 (parallel [
            (set (reg/f:DI 39 r10 [orig:345 D.7204 ] [345])
                (plus:DI (reg/f:DI 4 si [506])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:691 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [506])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -120 [0xffffffffffffff88])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 728 727 729 51 (set (reg:DI 37 r8 [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 f+0 S8 A64])) mABM.c:691 87 {*movdi_internal_rex64}
     (nil))
(insn 729 728 730 51 (set (reg:XF 4 si [508])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dV+0 S16 A128])) mABM.c:691 131 {*movxf_internal_rex64}
     (nil))
(insn 730 729 731 51 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [508])) mABM.c:691 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [508])
        (nil)))
(insn 731 730 732 51 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:342 D.7201 ] [342])) mABM.c:691 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:342 D.7201 ] [342])
        (nil)))
(insn 732 731 733 51 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:343 D.7201 ] [343])) mABM.c:691 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:343 D.7201 ] [343])
        (nil)))
(insn 733 732 734 51 (set (reg:SI 1 dx)
        (reg:SI 38 r9 [orig:344 D.7198 ] [344])) mABM.c:691 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [orig:344 D.7198 ] [344])
        (nil)))
(insn 734 733 735 51 (set (reg:DI 4 si)
        (reg/f:DI 39 r10 [orig:345 D.7204 ] [345])) mABM.c:691 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:345 D.7204 ] [345])
        (nil)))
(insn 735 734 736 51 (set (reg:DI 5 di)
        (reg:DI 37 r8 [507])) mABM.c:691 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [507])
        (nil)))
(call_insn 736 735 737 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:691 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 737 736 738 51 (set (reg:SI 0 ax [orig:59 D.7198 ] [59])
        (const_int 1 [0x1])) mABM.c:693 89 {*movsi_internal}
     (nil))
;;  succ:       52 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;;              37 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 346
(code_label 738 737 739 52 271 "" [1 uses])
(note 739 738 740 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 740 739 790 52 (set (reg:SI 0 ax [orig:346 <retval> ] [346])
        (reg:SI 0 ax [orig:59 D.7198 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7198 ] [59])
        (nil)))
(note 790 740 744 52 NOTE_INSN_DELETED)
(insn 744 790 747 52 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:346 <retval> ] [346])) mABM.c:694 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:346 <retval> ] [346])
        (nil)))
(insn 747 744 0 52 (use (reg/i:SI 0 ax)) mABM.c:694 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _try_flvl (_try_flvl, funcdef_no=31, decl_uid=4460, cgraph_uid=31)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=384, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=368, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 30:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 103:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=113 from oldreg=108, assigning class DIREG to r113
      Creating newreg=114 from oldreg=110, assigning class CREG to r114
  103: {r114:DI=0;r113:DI=r114:DI<<0x3+r113:DI;r109:DI=r114:DI<<0x3+r109:DI;[r113:DI]=[r109:DI];use r114:DI;}
      REG_UNUSED r110:DI
      REG_UNUSED r109:DI
      REG_UNUSED r108:DI
    Inserting insn reload before:
  125: r113:DI=r108:DI
  126: r114:DI=r110:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 118: point = 0
   Insn 115: point = 0
   Insn 111: point = 1
   Insn 108: point = 3
   Insn 107: point = 4
   Insn 106: point = 5
   Insn 105: point = 6
   Insn 104: point = 6
   Insn 103: point = 7
   Insn 126: point = 8
	Hard reg 0 is preferable by r114 with profit 1
   Insn 125: point = 10
	Hard reg 1 is preferable by r113 with profit 1
   Insn 102: point = 12
   Insn 101: point = 13
   Insn 100: point = 14
   Insn 99: point = 15
   Insn 98: point = 16
   Insn 97: point = 16
   Insn 96: point = 17
   Insn 95: point = 18
   Insn 94: point = 19
   Insn 93: point = 20
   Insn 92: point = 21
   Insn 91: point = 22
   Insn 90: point = 23
   Insn 89: point = 25
   Insn 88: point = 26
   Insn 87: point = 27
   Insn 86: point = 28
   Insn 85: point = 28
   Insn 84: point = 29
   Insn 83: point = 30
   Insn 82: point = 31
   Insn 81: point = 32
   Insn 80: point = 33
   Insn 79: point = 34
   Insn 78: point = 35
   Insn 77: point = 36
   Insn 76: point = 37
   Insn 75: point = 38
   Insn 74: point = 39
   Insn 73: point = 40
   Insn 72: point = 41
   Insn 71: point = 42
   Insn 70: point = 43
   Insn 69: point = 44
   Insn 68: point = 45
   Insn 67: point = 46
   Insn 66: point = 48
   Insn 65: point = 49
  BB 7
   Insn 63: point = 50
   Insn 62: point = 50
   Insn 60: point = 51
  BB 5
   Insn 123: point = 52
   Insn 43: point = 52
   Insn 42: point = 52
   Insn 41: point = 53
   Insn 40: point = 54
  BB 4
   Insn 38: point = 55
   Insn 37: point = 55
   Insn 35: point = 56
   Insn 34: point = 58
   Insn 33: point = 60
  BB 2
   Insn 121: point = 61
   Insn 16: point = 61
   Insn 15: point = 62
   Insn 14: point = 64
   Insn 10: point = 65
   Insn 9: point = 65
   Insn 8: point = 66
   Insn 7: point = 67
   Insn 6: point = 69
   Insn 5: point = 70
   Insn 4: point = 71
   Insn 3: point = 71
   Insn 2: point = 71
  BB 3
   Insn 30: point = 71
   Insn 29: point = 71
   Insn 28: point = 72
   Insn 27: point = 73
   Insn 26: point = 75
   Insn 25: point = 77
   Insn 24: point = 79
   Insn 23: point = 81
   Insn 22: point = 83
   Insn 21: point = 84
   Insn 20: point = 86
  BB 6
   Insn 57: point = 87
   Insn 56: point = 87
   Insn 55: point = 88
   Insn 54: point = 89
   Insn 53: point = 91
   Insn 52: point = 93
   Insn 51: point = 95
   Insn 50: point = 97
   Insn 49: point = 99
   Insn 48: point = 100
   Insn 47: point = 102
 r59: [57..58]
 r60: [55..56]
 r61: [78..84]
 r62: [80..81]
 r63: [78..79]
 r64: [76..77]
 r65: [74..75]
 r66: [71..73]
 r67: [50..51]
 r68: [94..100]
 r69: [96..97]
 r70: [94..95]
 r71: [92..93]
 r72: [90..91]
 r73: [87..89]
 r74: [31..49]
 r75: [28..46]
 r76: [20..27]
 r77: [17..26]
 r78: [16..23]
 r79: [6..15]
 r80: [2..3]
 r81: [0..1]
 r82: [65..67]
 r83: [68..70]
 r84: [66..69]
 r85: [63..64]
 r86: [61..62]
 r87: [85..86]
 r88: [82..83]
 r89: [71..72]
 r90: [59..60]
 r91: [52..54]
 r92: [52..53]
 r93: [101..102]
 r94: [98..99]
 r95: [87..88]
 r96: [47..48]
 r97: [30..45]
 r98: [29..44]
 r99: [42..43]
 r100: [40..41]
 r101: [38..39]
 r102: [36..37]
 r103: [34..35]
 r104: [32..33]
 r105: [24..25]
 r106: [19..22]
 r107: [18..21]
 r108: [11..14]
 r109: [7..13]
 r110: [9..12]
 r111: [4..5]
 r113: [7..10]
 r114: [7..8]
Compressing live ranges: from 103 to 76 - 73%
Ranges after the compression:
 r59: [36..37]
 r60: [34..35]
 r61: [54..59]
 r62: [56..57]
 r63: [54..55]
 r64: [52..53]
 r65: [50..51]
 r66: [48..49]
 r67: [30..31]
 r68: [68..73]
 r69: [70..71]
 r70: [68..69]
 r71: [66..67]
 r72: [64..65]
 r73: [62..63]
 r74: [16..29]
 r75: [16..27]
 r76: [12..15]
 r77: [12..15]
 r78: [12..13]
 r79: [6..11]
 r80: [2..3]
 r81: [0..1]
 r82: [44..45]
 r83: [46..47]
 r84: [44..47]
 r85: [42..43]
 r86: [40..41]
 r87: [60..61]
 r88: [58..59]
 r89: [48..49]
 r90: [38..39]
 r91: [32..33]
 r92: [32..33]
 r93: [74..75]
 r94: [72..73]
 r95: [62..63]
 r96: [28..29]
 r97: [16..27]
 r98: [16..27]
 r99: [26..27]
 r100: [24..25]
 r101: [22..23]
 r102: [20..21]
 r103: [18..19]
 r104: [16..17]
 r105: [14..15]
 r106: [12..13]
 r107: [12..13]
 r108: [10..11]
 r109: [6..11]
 r110: [8..11]
 r111: [4..5]
 r113: [6..9]
 r114: [6..7]
	 Assigning to 113 (cl=DIREG, orig=108, freq=2, tfirst=113, tfreq=2)...
	   Assign 5 to reload r113 (freq=2)
	 Assigning to 114 (cl=CREG, orig=110, freq=2, tfirst=114, tfreq=2)...
	   Assign 2 to reload r114 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=384, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=368, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 21
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 60
changing reg in insn 62
changing reg in insn 48
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 65
changing reg in insn 82
changing reg in insn 67
changing reg in insn 85
changing reg in insn 87
changing reg in insn 93
changing reg in insn 88
changing reg in insn 96
changing reg in insn 90
changing reg in insn 97
changing reg in insn 99
changing reg in insn 104
changing reg in insn 108
changing reg in insn 111
changing reg in insn 111
changing reg in insn 115
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 83
changing reg in insn 69
changing reg in insn 84
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 92
changing reg in insn 95
changing reg in insn 100
changing reg in insn 103
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
starting the processing of deferred insns
ending the processing of deferred insns


_try_flvl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={32d,30u} r1={20d,17u} r2={14d,12u} r4={10d,7u} r5={16d,13u} r6={1d,51u} r7={1d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={14d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={6d,3u} r38={4d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 392{235d,157u,0e} in 97{94 regular + 3 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 82 83 84 85 86
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mABM.c:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 N_f+0 S4 A32])
        (reg:SI 1 dx [ N_f ])) mABM.c:696 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N_f ])
        (nil)))
(insn 5 4 6 2 (set (reg:SI 0 ax [83])
        (reg:SI 2 cx [ sh ])) mABM.c:696 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ sh ])
        (nil)))
(insn 6 5 7 2 (set (reg:DI 2 cx [84])
        (reg:DI 37 r8 [ sh+8 ])) mABM.c:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ sh+8 ])
        (nil)))
(insn 7 6 8 2 (set (reg:TI 0 ax [82])
        (reg:TI 0 ax [83])) mABM.c:696 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [83])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [84])) mABM.c:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [84])
        (nil)))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [82])) mABM.c:696 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [82])
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 safe+0 S4 A32])
        (reg:SI 38 r9 [ safe ])) mABM.c:696 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [ safe ])
        (nil)))
(note 11 10 14 2 NOTE_INSN_FUNCTION_BEG)
(insn 14 11 15 2 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:698 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [86])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [85])
                (const_int 44 [0x2c])) [0 f_3(D)->st_indx+0 S4 A32])) mABM.c:698 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 16 15 121 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (reg:SI 0 ax [86])) mABM.c:698 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [86])
        (nil)))
(jump_insn 121 16 122 2 (set (pc)
        (label_ref 31)) mABM.c:698 650 {jump}
     (nil)
 -> 31)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 122 121 36)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64 65 66 87 88 89
(code_label 36 122 19 3 284 "" [1 uses])
(note 19 36 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:698 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [orig:61 D.7206 ] [61])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mABM.c:698 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (nil)))
(insn 22 21 23 3 (set (reg:SI 1 dx [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:698 89 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 1 dx [orig:62 D.7207 ] [62])
        (sign_extend:DI (reg:SI 1 dx [88]))) mABM.c:698 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [88])
        (nil)))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 1 dx [orig:63 D.7207 ] [63])
                (ashift:DI (reg:DI 1 dx [orig:62 D.7207 ] [62])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:698 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.7207 ] [62])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7206 ] [64])
                (plus:DI (reg/f:DI 0 ax [orig:61 D.7206 ] [61])
                    (reg:DI 1 dx [orig:63 D.7207 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:698 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.7207 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.7206 ] [61])
            (nil))))
(insn 26 25 27 3 (set (reg/f:DI 0 ax [orig:65 D.7208 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.7206 ] [64]) [0 *_10+0 S8 A64])) mABM.c:698 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7206 ] [64])
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 2 cx [orig:66 D.7208 ] [66])
                (plus:DI (reg/f:DI 0 ax [orig:65 D.7208 ] [65])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:698 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7208 ] [65])
        (nil)))
(insn 28 27 29 3 (set (reg:XF 0 ax [89])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 368 [0x170])) [0 f_lvl_on+0 S16 A128])) mABM.c:698 131 {*movxf_internal_rex64}
     (nil))
(insn 29 28 30 3 (set (mem:XF (reg/f:DI 2 cx [orig:66 D.7208 ] [66]) [0 *_12+0 S16 A128])
        (reg:XF 0 ax [89])) mABM.c:698 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [89])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:66 D.7208 ] [66])
            (nil))))
(insn 30 29 31 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:698 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 90
(code_label 31 30 32 4 283 "" [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:698 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [orig:59 D.7205 ] [59])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mABM.c:698 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (nil)))
(insn 35 34 37 4 (parallel [
            (set (reg:SI 0 ax [orig:60 D.7205 ] [60])
                (plus:SI (reg:SI 0 ax [orig:59 D.7205 ] [59])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:698 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7205 ] [59])
        (nil)))
(insn 37 35 38 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:60 D.7205 ] [60])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mABM.c:698 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.7205 ] [60])
        (nil)))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) mABM.c:698 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg/f:DI 2 cx [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:699 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 5 (set (reg:XF 0 ax [92])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 368 [0x170])) [0 f_lvl_on+0 S16 A128])) mABM.c:699 131 {*movxf_internal_rex64}
     (nil))
(insn 42 41 43 5 (set (mem/j:XF (plus:DI (reg/f:DI 2 cx [91])
                (const_int 80 [0x50])) [0 f_3(D)->st_point+32 S16 A128])
        (reg:XF 0 ax [92])) mABM.c:699 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [92])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [91])
            (nil))))
(insn 43 42 123 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:701 89 {*movsi_internal}
     (nil))
(jump_insn 123 43 124 5 (set (pc)
        (label_ref 58)) mABM.c:701 650 {jump}
     (nil)
 -> 58)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 124 123 61)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 69 70 71 72 73 93 94 95
(code_label 61 124 46 6 286 "" [1 uses])
(note 46 61 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:701 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 0 ax [orig:68 D.7206 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 32 [0x20])) [0 f_3(D)->pos+0 S8 A128])) mABM.c:701 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (nil)))
(insn 49 48 50 6 (set (reg:SI 1 dx [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mABM.c:701 89 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 1 dx [orig:69 D.7207 ] [69])
        (sign_extend:DI (reg:SI 1 dx [94]))) mABM.c:701 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [94])
        (nil)))
(insn 51 50 52 6 (parallel [
            (set (reg:DI 1 dx [orig:70 D.7207 ] [70])
                (ashift:DI (reg:DI 1 dx [orig:69 D.7207 ] [69])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:701 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.7207 ] [69])
        (nil)))
(insn 52 51 53 6 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.7206 ] [71])
                (plus:DI (reg/f:DI 0 ax [orig:68 D.7206 ] [68])
                    (reg:DI 1 dx [orig:70 D.7207 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:701 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.7207 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7206 ] [68])
            (nil))))
(insn 53 52 54 6 (set (reg/f:DI 0 ax [orig:72 D.7208 ] [72])
        (mem/f:DI (reg/f:DI 0 ax [orig:71 D.7206 ] [71]) [0 *_20+0 S8 A64])) mABM.c:701 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.7206 ] [71])
        (nil)))
(insn 54 53 55 6 (parallel [
            (set (reg/f:DI 2 cx [orig:73 D.7208 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:72 D.7208 ] [72])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:701 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7208 ] [72])
        (nil)))
(insn 55 54 56 6 (set (reg:XF 0 ax [95])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 368 [0x170])) [0 f_lvl_on+0 S16 A128])) mABM.c:701 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 6 (set (mem:XF (reg/f:DI 2 cx [orig:73 D.7208 ] [73]) [0 *_22+0 S16 A128])
        (reg:XF 0 ax [95])) mABM.c:701 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [95])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:73 D.7208 ] [73])
            (nil))))
(insn 57 56 58 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:701 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67
(code_label 58 57 59 7 285 "" [1 uses])
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 62 7 (set (reg:SI 0 ax [orig:67 D.7205 ] [67])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:701 89 {*movsi_internal}
     (nil))
(insn 62 60 63 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:67 D.7205 ] [67])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mABM.c:701 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7205 ] [67])
        (nil)))
(jump_insn 63 62 64 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) mABM.c:701 612 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 78 79 80 81 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 8 (set (reg:SI 2 cx [orig:74 D.7205 ] [74])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:703 89 {*movsi_internal}
     (nil))
(insn 66 65 67 8 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 8 (set (reg/f:DI 0 ax [orig:75 D.7206 ] [75])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 32 [0x20])) [0 f_3(D)->pos+0 S8 A128])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (nil)))
(insn 68 67 69 8 (set (reg:SI 1 dx [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 N_f+0 S4 A32])) mABM.c:703 89 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (set (reg:DI 4 si [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 flight+0 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 8 (set (reg:DI 5 di [99])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 8 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 5 di [99])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [99])
        (nil)))
(insn 72 71 73 8 (set (reg:DI 5 di [100])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 8 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 5 di [100])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [100])
        (nil)))
(insn 74 73 75 8 (set (reg:DI 5 di [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 8 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 5 di [101])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [101])
        (nil)))
(insn 76 75 77 8 (set (reg:DI 5 di [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 8 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 5 di [102])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [102])
        (nil)))
(insn 78 77 79 8 (set (reg:DI 5 di [103])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 8 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg:DI 5 di [103])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [103])
        (nil)))
(insn 80 79 81 8 (set (reg:DI 5 di [104])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:703 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 8 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 5 di [104])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [104])
        (nil)))
(insn 82 81 83 8 (set (reg:SI 2 cx)
        (reg:SI 2 cx [orig:74 D.7205 ] [74])) mABM.c:703 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:74 D.7205 ] [74])
        (nil)))
(insn 83 82 84 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [97])) mABM.c:703 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [97])
        (nil)))
(insn 84 83 85 8 (set (reg:DI 4 si)
        (reg:DI 4 si [98])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [98])
        (nil)))
(insn 85 84 86 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:75 D.7206 ] [75])) mABM.c:703 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7206 ] [75])
        (nil)))
(call_insn 86 85 87 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_minimum_flight_distance") [flags 0x3]  <function_decl 0x7f05a571f500 _minimum_flight_distance>) [0 _minimum_flight_distance S1 A8])
            (const_int 48 [0x30]))) mABM.c:703 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S48 A64]))
                        (nil)))))))
(insn 87 86 88 8 (set (reg/f:DI 5 di [orig:76 D.7208 ] [76])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:704 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 8 (set (reg:SI 4 si [orig:77 D.7205 ] [77])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:704 89 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:704 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 8 (set (reg/f:DI 0 ax [orig:78 D.7206 ] [78])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 32 [0x20])) [0 f_3(D)->pos+0 S8 A128])) mABM.c:704 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (nil)))
(insn 91 90 92 8 (set (reg:SI 1 dx [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S4 A64])) mABM.c:704 89 {*movsi_internal}
     (nil))
(insn 92 91 93 8 (set (reg:DI 2 cx [107])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sh+8 S8 A64])) mABM.c:704 87 {*movdi_internal_rex64}
     (nil))
(insn 93 92 94 8 (set (reg:DI 37 r8)
        (reg/f:DI 5 di [orig:76 D.7208 ] [76])) mABM.c:704 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:76 D.7208 ] [76])
        (nil)))
(insn 94 93 95 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [106])) mABM.c:704 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [106])
        (nil)))
(insn 95 94 96 8 (set (reg:DI 2 cx)
        (reg:DI 2 cx [107])) mABM.c:704 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [107])
        (nil)))
(insn 96 95 97 8 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:77 D.7205 ] [77])) mABM.c:704 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:77 D.7205 ] [77])
        (nil)))
(insn 97 96 98 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:78 D.7206 ] [78])) mABM.c:704 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.7206 ] [78])
        (nil)))
(call_insn 98 97 99 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_checkShockareaRoute") [flags 0x3]  <function_decl 0x7f05a571f700 _checkShockareaRoute>) [0 _checkShockareaRoute S1 A8])
            (const_int 0 [0]))) mABM.c:704 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 99 98 100 8 (set (reg/f:DI 37 r8 [orig:79 D.7208 ] [79])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:705 87 {*movdi_internal_rex64}
     (nil))
(insn 100 99 101 8 (set (reg:DI 1 dx [108])
        (reg/f:DI 7 sp)) mABM.c:705 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 8 (set (reg:DI 4 si [109])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:705 267 {*leadi}
     (nil))
(insn 102 101 125 8 (set (reg:DI 0 ax [110])
        (const_int 38 [0x26])) mABM.c:705 87 {*movdi_internal_rex64}
     (nil))
(insn 125 102 126 8 (set (reg:DI 5 di [108])
        (reg:DI 1 dx [108])) mABM.c:705 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [108])
        (nil)))
(insn 126 125 103 8 (set (reg:DI 2 cx [110])
        (reg:DI 0 ax [110])) mABM.c:705 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 103 126 104 8 (parallel [
            (set (reg:DI 2 cx [110])
                (const_int 0 [0]))
            (set (reg:DI 5 di [108])
                (plus:DI (ashift:DI (reg:DI 2 cx [110])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [108])))
            (set (reg:DI 4 si [109])
                (plus:DI (ashift:DI (reg:DI 2 cx [110])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [109])))
            (set (mem:BLK (reg:DI 5 di [108]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [109]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [110]))
        ]) mABM.c:705 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [110])
        (expr_list:REG_UNUSED (reg:DI 5 di [108])
            (expr_list:REG_UNUSED (reg:DI 4 si [109])
                (nil)))))
(insn 104 103 105 8 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:79 D.7208 ] [79])) mABM.c:705 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:79 D.7208 ] [79])
        (nil)))
(call_insn 105 104 106 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_check_risk") [flags 0x3]  <function_decl 0x7f05a571f800 _check_risk>) [0 _check_risk S1 A8])
            (const_int 304 [0x130]))) mABM.c:705 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 106 105 107 8 (set (reg:SI 0 ax [111])
        (reg:SI 0 ax)) mABM.c:705 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 107 106 108 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 safe+0 S4 A32])
        (reg:SI 0 ax [111])) mABM.c:705 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [111])
        (nil)))
(insn 108 107 111 8 (set (reg:SI 0 ax [orig:80 D.7205 ] [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 safe+0 S4 A32])) mABM.c:706 89 {*movsi_internal}
     (nil))
(insn 111 108 115 8 (set (reg:SI 0 ax [orig:81 <retval> ] [81])
        (reg:SI 0 ax [orig:80 D.7205 ] [80])) mABM.c:706 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.7205 ] [80])
        (nil)))
(insn 115 111 118 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:81 <retval> ] [81])) mABM.c:707 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 <retval> ] [81])
        (nil)))
(insn 118 115 0 8 (use (reg/i:SI 0 ax)) mABM.c:707 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _change_flvl (_change_flvl, funcdef_no=32, decl_uid=4475, cgraph_uid=32)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=480, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=448, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) o  (1) re {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 67:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=143 from oldreg=99, assigning class DIREG to r143
      Creating newreg=144 from oldreg=101, assigning class CREG to r144
   67: {r144:DI=0;r143:DI=r144:DI<<0x3+r143:DI;r100:DI=r144:DI<<0x3+r100:DI;[r143:DI]=[r100:DI];use r144:DI;}
      REG_UNUSED r101:DI
      REG_UNUSED r100:DI
      REG_UNUSED r99:DI
    Inserting insn reload before:
  200: r143:DI=r99:DI
  201: r144:DI=r101:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 109:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=145 from oldreg=116, assigning class DIREG to r145
      Creating newreg=146 from oldreg=118, assigning class CREG to r146
  109: {r146:DI=0;r145:DI=r146:DI<<0x3+r145:DI;r117:DI=r146:DI<<0x3+r117:DI;[r145:DI]=[r117:DI];use r146:DI;}
      REG_UNUSED r118:DI
      REG_UNUSED r117:DI
      REG_UNUSED r116:DI
    Inserting insn reload before:
  202: r145:DI=r116:DI
  203: r146:DI=r118:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 142:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 158:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=147 from oldreg=135, assigning class DIREG to r147
      Creating newreg=148 from oldreg=137, assigning class CREG to r148
  158: {r148:DI=0;r147:DI=r148:DI<<0x3+r147:DI;r136:DI=r148:DI<<0x3+r136:DI;[r147:DI]=[r136:DI];use r148:DI;}
      REG_UNUSED r137:DI
      REG_UNUSED r136:DI
      REG_UNUSED r135:DI
    Inserting insn reload before:
  204: r147:DI=r135:DI
  205: r148:DI=r137:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 170
	 Choosing alt 0 in insn 170:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 172:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 189: point = 0
   Insn 186: point = 0
   Insn 182: point = 1
  BB 8
   Insn 196: point = 4
   Insn 121: point = 4
  BB 6
   Insn 194: point = 5
   Insn 79: point = 5
  BB 12
   Insn 179: point = 6
  BB 11
   Insn 177: point = 7
   Insn 176: point = 7
  BB 9
   Insn 198: point = 7
   Insn 131: point = 7
   Insn 130: point = 8
   Insn 129: point = 10
   Insn 128: point = 11
   Insn 127: point = 12
   Insn 126: point = 12
  BB 7
   Insn 119: point = 12
   Insn 118: point = 12
   Insn 117: point = 13
   Insn 116: point = 14
   Insn 115: point = 14
   Insn 114: point = 15
   Insn 113: point = 16
   Insn 112: point = 17
   Insn 111: point = 18
   Insn 110: point = 19
   Insn 109: point = 20
   Insn 203: point = 21
	Hard reg 0 is preferable by r146 with profit 1
   Insn 202: point = 23
	Hard reg 1 is preferable by r145 with profit 1
   Insn 108: point = 25
   Insn 107: point = 26
   Insn 106: point = 27
   Insn 105: point = 28
   Insn 104: point = 29
   Insn 103: point = 30
   Insn 102: point = 31
   Insn 101: point = 32
   Insn 100: point = 33
   Insn 99: point = 34
   Insn 98: point = 35
   Insn 97: point = 36
   Insn 96: point = 37
   Insn 95: point = 38
   Insn 94: point = 39
   Insn 93: point = 40
   Insn 92: point = 41
   Insn 91: point = 42
   Insn 90: point = 43
   Insn 89: point = 44
   Insn 88: point = 45
   Insn 87: point = 46
   Insn 86: point = 47
   Insn 85: point = 49
   Insn 84: point = 50
  BB 5
   Insn 77: point = 51
   Insn 76: point = 51
   Insn 75: point = 52
   Insn 74: point = 53
   Insn 73: point = 53
   Insn 72: point = 54
   Insn 71: point = 55
   Insn 70: point = 56
   Insn 69: point = 57
   Insn 68: point = 58
   Insn 67: point = 59
   Insn 201: point = 60
	Hard reg 0 is preferable by r144 with profit 1
   Insn 200: point = 62
	Hard reg 1 is preferable by r143 with profit 1
   Insn 66: point = 64
   Insn 65: point = 65
   Insn 64: point = 66
   Insn 63: point = 67
   Insn 62: point = 68
   Insn 61: point = 69
   Insn 60: point = 70
   Insn 59: point = 71
   Insn 58: point = 72
   Insn 57: point = 73
   Insn 56: point = 74
   Insn 55: point = 75
   Insn 54: point = 76
   Insn 53: point = 77
   Insn 52: point = 78
   Insn 51: point = 79
   Insn 50: point = 80
   Insn 49: point = 81
   Insn 48: point = 82
   Insn 47: point = 83
   Insn 46: point = 84
   Insn 45: point = 85
   Insn 44: point = 86
   Insn 43: point = 88
   Insn 42: point = 89
   Insn 41: point = 90
   Insn 40: point = 91
   Insn 39: point = 93
   Insn 38: point = 95
   Insn 37: point = 97
   Insn 36: point = 99
   Insn 35: point = 101
   Insn 34: point = 102
   Insn 33: point = 104
  BB 3
   Insn 192: point = 105
   Insn 23: point = 105
   Insn 22: point = 106
   Insn 21: point = 108
   Insn 20: point = 110
  BB 4
   Insn 30: point = 111
   Insn 29: point = 112
   Insn 28: point = 114
  BB 2
   Insn 18: point = 115
   Insn 17: point = 115
   Insn 16: point = 116
   Insn 15: point = 118
   Insn 14: point = 119
   Insn 13: point = 121
   Insn 9: point = 122
   Insn 8: point = 123
   Insn 7: point = 124
   Insn 6: point = 126
   Insn 5: point = 127
   Insn 4: point = 128
   Insn 3: point = 128
   Insn 2: point = 128
  BB 10
   Insn 172: point = 128
   Insn 171: point = 128
   Insn 170: point = 129
   Insn 169: point = 131
   Insn 168: point = 132
   Insn 167: point = 133
   Insn 166: point = 134
   Insn 165: point = 135
   Insn 164: point = 135
   Insn 163: point = 136
   Insn 162: point = 137
   Insn 161: point = 138
   Insn 160: point = 139
   Insn 159: point = 140
   Insn 158: point = 141
   Insn 205: point = 142
	Hard reg 0 is preferable by r148 with profit 1
   Insn 204: point = 144
	Hard reg 1 is preferable by r147 with profit 1
   Insn 157: point = 146
   Insn 156: point = 147
   Insn 155: point = 148
   Insn 154: point = 149
   Insn 153: point = 150
   Insn 152: point = 151
   Insn 151: point = 152
   Insn 150: point = 153
   Insn 149: point = 154
   Insn 148: point = 155
   Insn 147: point = 156
   Insn 146: point = 157
   Insn 145: point = 158
   Insn 144: point = 159
   Insn 143: point = 160
   Insn 142: point = 161
   Insn 141: point = 162
   Insn 140: point = 163
   Insn 139: point = 164
   Insn 138: point = 165
   Insn 137: point = 166
   Insn 136: point = 167
   Insn 135: point = 168
 r59: [2..6]
 r60: [115..119]
 r61: [115..116]
 r62: [107..108]
 r63: [96..102]
 r64: [98..99]
 r65: [96..97]
 r66: [94..95]
 r67: [92..93]
 r68: [79..86]
 r69: [51..52]
 r70: [40..47]
 r71: [12..13]
 r72: [0..1]
 r73: [122..124]
 r74: [125..127]
 r75: [123..126]
 r76: [120..121]
 r77: [117..118]
 r78: [109..110]
 r79: [105..106]
 r80: [113..114]
 r81: [111..112]
 r82: [103..104]
 r83: [100..101]
 r84: [90..91]
 r85: [87..89]
 r86: [87..88]
 r87: [58..85]
 r88: [57..84]
 r89: [56..83]
 r90: [55..82]
 r91: [54..81]
 r92: [53..80]
 r93: [77..78]
 r94: [75..76]
 r95: [73..74]
 r96: [71..72]
 r97: [69..70]
 r98: [67..68]
 r99: [63..66]
 r100: [59..65]
 r101: [61..64]
 r102: [48..50]
 r103: [48..49]
 r104: [19..46]
 r105: [18..45]
 r106: [17..44]
 r107: [16..43]
 r108: [15..42]
 r109: [14..41]
 r110: [38..39]
 r111: [36..37]
 r112: [34..35]
 r113: [32..33]
 r114: [30..31]
 r115: [28..29]
 r116: [24..27]
 r117: [20..26]
 r118: [22..25]
 r119: [7..8]
 r120: [9..11]
 r121: [9..10]
 r122: [140..168]
 r123: [139..167]
 r124: [138..166]
 r125: [137..165]
 r126: [136..164]
 r127: [135..163]
 r128: [161..162]
 r129: [159..160]
 r130: [157..158]
 r131: [155..156]
 r132: [153..154]
 r133: [151..152]
 r134: [149..150]
 r135: [145..148]
 r136: [141..147]
 r137: [143..146]
 r138: [133..134]
 r139: [128..129]
 r140: [130..132]
 r141: [130..131]
 r143: [59..62]
 r144: [59..60]
 r145: [20..23]
 r146: [20..21]
 r147: [141..144]
 r148: [141..142]
Compressing live ranges: from 169 to 116 - 68%
Ranges after the compression:
 r59: [2..3]
 r60: [80..83]
 r61: [80..81]
 r62: [72..73]
 r63: [62..67]
 r64: [64..65]
 r65: [62..63]
 r66: [60..61]
 r67: [58..59]
 r68: [52..53]
 r69: [32..33]
 r70: [28..29]
 r71: [8..9]
 r72: [0..1]
 r73: [86..87]
 r74: [88..89]
 r75: [86..89]
 r76: [84..85]
 r77: [82..83]
 r78: [74..75]
 r79: [70..71]
 r80: [78..79]
 r81: [76..77]
 r82: [68..69]
 r83: [66..67]
 r84: [56..57]
 r85: [54..55]
 r86: [54..55]
 r87: [34..53]
 r88: [34..53]
 r89: [34..53]
 r90: [34..53]
 r91: [34..53]
 r92: [34..53]
 r93: [50..51]
 r94: [48..49]
 r95: [46..47]
 r96: [44..45]
 r97: [42..43]
 r98: [40..41]
 r99: [38..39]
 r100: [34..39]
 r101: [36..39]
 r102: [30..31]
 r103: [30..31]
 r104: [10..29]
 r105: [10..29]
 r106: [10..29]
 r107: [10..29]
 r108: [10..29]
 r109: [10..29]
 r110: [26..27]
 r111: [24..25]
 r112: [22..23]
 r113: [20..21]
 r114: [18..19]
 r115: [16..17]
 r116: [14..15]
 r117: [10..15]
 r118: [12..15]
 r119: [4..5]
 r120: [6..7]
 r121: [6..7]
 r122: [96..115]
 r123: [96..115]
 r124: [96..115]
 r125: [96..115]
 r126: [96..115]
 r127: [96..115]
 r128: [114..115]
 r129: [112..113]
 r130: [110..111]
 r131: [108..109]
 r132: [106..107]
 r133: [104..105]
 r134: [102..103]
 r135: [100..101]
 r136: [96..101]
 r137: [98..101]
 r138: [94..95]
 r139: [90..91]
 r140: [92..93]
 r141: [92..93]
 r143: [34..37]
 r144: [34..35]
 r145: [10..13]
 r146: [10..11]
 r147: [96..99]
 r148: [96..97]
	 Assigning to 143 (cl=DIREG, orig=99, freq=2, tfirst=143, tfreq=2)...
	   Assign 5 to reload r143 (freq=2)
	 Assigning to 144 (cl=CREG, orig=101, freq=2, tfirst=144, tfreq=2)...
	   Assign 2 to reload r144 (freq=2)
	 Assigning to 145 (cl=DIREG, orig=116, freq=2, tfirst=145, tfreq=2)...
	   Assign 5 to reload r145 (freq=2)
	 Assigning to 146 (cl=CREG, orig=118, freq=2, tfirst=146, tfreq=2)...
	   Assign 2 to reload r146 (freq=2)
	 Assigning to 147 (cl=DIREG, orig=135, freq=2, tfirst=147, tfreq=2)...
	   Assign 5 to reload r147 (freq=2)
	 Assigning to 148 (cl=CREG, orig=137, freq=2, tfirst=148, tfreq=2)...
	   Assign 2 to reload r148 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=480, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=448, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 179
changing reg in insn 121
changing reg in insn 79
changing reg in insn 182
changing reg in insn 14
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 34
changing reg in insn 38
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 51
changing reg in insn 75
changing reg in insn 76
changing reg in insn 86
changing reg in insn 93
changing reg in insn 117
changing reg in insn 118
changing reg in insn 182
changing reg in insn 186
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 68
changing reg in insn 46
changing reg in insn 69
changing reg in insn 47
changing reg in insn 70
changing reg in insn 48
changing reg in insn 71
changing reg in insn 49
changing reg in insn 72
changing reg in insn 50
changing reg in insn 73
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 66
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 110
changing reg in insn 88
changing reg in insn 111
changing reg in insn 89
changing reg in insn 112
changing reg in insn 90
changing reg in insn 113
changing reg in insn 91
changing reg in insn 114
changing reg in insn 92
changing reg in insn 115
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 108
changing reg in insn 130
changing reg in insn 131
changing reg in insn 128
changing reg in insn 129
changing reg in insn 135
changing reg in insn 159
changing reg in insn 136
changing reg in insn 160
changing reg in insn 137
changing reg in insn 161
changing reg in insn 138
changing reg in insn 162
changing reg in insn 139
changing reg in insn 163
changing reg in insn 140
changing reg in insn 164
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 158
changing reg in insn 156
changing reg in insn 158
changing reg in insn 158
changing reg in insn 157
changing reg in insn 166
changing reg in insn 167
changing reg in insn 170
changing reg in insn 171
changing reg in insn 168
changing reg in insn 169
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 165.


_change_flvl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={49d,47u} r1={18d,15u} r2={14d,14u} r3={3d,3u} r4={13d,10u} r5={13d,10u} r6={1d,78u} r7={1d,49u} r8={11d,8u} r9={7d,4u} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={10d,7u} r38={10d,6u} r39={6d,3u} r40={6d,3u} r41={3d,3u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 546{281d,265u,0e} in 164{161 regular + 3 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 60 61 73 74 75 76 77
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:709 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mABM.c:709 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])
        (reg:SI 1 dx [ N_f ])) mABM.c:709 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N_f ])
        (nil)))
(insn 5 4 6 2 (set (reg:SI 0 ax [74])
        (reg:SI 2 cx [ sh ])) mABM.c:709 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ sh ])
        (nil)))
(insn 6 5 7 2 (set (reg:DI 2 cx [75])
        (reg:DI 37 r8 [ sh+8 ])) mABM.c:709 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ sh+8 ])
        (nil)))
(insn 7 6 8 2 (set (reg:TI 0 ax [73])
        (reg:TI 0 ax [74])) mABM.c:709 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [74])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [75])) mABM.c:709 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [75])
        (nil)))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [73])) mABM.c:709 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [73])
        (nil)))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:712 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 dx [orig:60 D.7209 ] [60])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [76])
                (const_int 44 [0x2c])) [0 f_6(D)->st_indx+0 S4 A32])) mABM.c:712 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:712 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [orig:61 D.7209 ] [61])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [77])
                (const_int 112 [0x70])) [0 f_6(D)->bound+0 S4 A128])) mABM.c:712 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (nil)))
(insn 17 16 18 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:60 D.7209 ] [60])
            (reg:SI 0 ax [orig:61 D.7209 ] [61]))) mABM.c:712 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.7209 ] [61])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:60 D.7209 ] [60])
            (nil))))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) mABM.c:712 612 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 78 79
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:712 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (set (reg:SI 0 ax [orig:62 D.7209 ] [62])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [78])
                (const_int 44 [0x2c])) [0 f_6(D)->st_indx+0 S4 A32])) mABM.c:712 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 0 ax [79])
                (plus:SI (reg:SI 0 ax [orig:62 D.7209 ] [62])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:712 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.7209 ] [62])
        (nil)))
(insn 23 22 192 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [79])) mABM.c:712 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(jump_insn 192 23 193 3 (set (pc)
        (label_ref 31)) 650 {jump}
     (nil)
 -> 31)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 26)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 80 81
(code_label 26 193 27 4 289 "" [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:713 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 4 (set (reg:SI 0 ax [81])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [80])
                (const_int 112 [0x70])) [0 f_6(D)->bound+0 S4 A128])) mABM.c:713 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 30 29 31 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [81])) mABM.c:713 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [81])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 66 67 68 69 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101
(code_label 31 30 32 5 290 "" [1 uses])
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:715 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 5 (set (reg/f:DI 0 ax [orig:63 D.7210 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 8 [0x8])) [0 f_6(D)->nvp+0 S8 A64])) mABM.c:715 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 35 34 36 5 (set (reg:SI 1 dx [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])) mABM.c:715 89 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 1 dx [orig:64 D.7211 ] [64])
        (sign_extend:DI (reg:SI 1 dx [83]))) mABM.c:715 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [83])
        (nil)))
(insn 37 36 38 5 (parallel [
            (set (reg:DI 1 dx [orig:65 D.7211 ] [65])
                (ashift:DI (reg:DI 1 dx [orig:64 D.7211 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:715 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.7211 ] [64])
        (nil)))
(insn 38 37 39 5 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.7210 ] [66])
                (plus:DI (reg/f:DI 0 ax [orig:63 D.7210 ] [63])
                    (reg:DI 1 dx [orig:65 D.7211 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:715 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7211 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.7210 ] [63])
            (nil))))
(insn 39 38 40 5 (set (reg/f:DI 0 ax [orig:67 D.7212 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [orig:66 D.7210 ] [66]) [0 *_15+0 S8 A64])) mABM.c:715 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.7210 ] [66])
        (nil)))
(insn 40 39 41 5 (set (reg:XF 0 ax [84])
        (mem:XF (plus:DI (reg/f:DI 0 ax [orig:67 D.7212 ] [67])
                (const_int 32 [0x20])) [0 MEM[(long double *)_16 + 32B]+0 S16 A128])) mABM.c:715 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7212 ] [67])
        (nil)))
(insn 41 40 42 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])
        (reg:XF 0 ax [84])) mABM.c:715 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [84])
        (nil)))
(insn 42 41 43 5 (set (reg:XF 9 st(1) [85])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])) mABM.c:717 131 {*movxf_internal_rex64}
     (nil))
(insn 43 42 44 5 (set (reg:XF 8 st [86])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S16 A128])) mABM.c:717 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.0e+1 [0x0.ap+5])
        (nil)))
(insn 44 43 45 5 (set (reg:XF 8 st [orig:68 D.7213 ] [68])
        (plus:XF (reg:XF 8 st [86])
            (reg:XF 9 st(1) [85]))) mABM.c:717 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [86])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [85])
            (nil))))
(insn 45 44 46 5 (set (reg:SI 38 r9 [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])) mABM.c:717 89 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:SI 37 r8 [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 sh+0 S4 A64])) mABM.c:717 89 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 41 r12 [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sh+8 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 48 47 49 5 (set (reg:SI 3 bx [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])) mABM.c:717 89 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 40 r11 [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 flight+0 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 5 (set (reg:DI 39 r10 [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 5 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [0  S16 A128])
        (reg:XF 8 st [orig:68 D.7213 ] [68])) mABM.c:717 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.7213 ] [68])
        (nil)))
(insn 52 51 53 5 (set (reg:DI 0 ax [93])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [93])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (nil)))
(insn 54 53 55 5 (set (reg:DI 0 ax [94])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [94])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [94])
        (nil)))
(insn 56 55 57 5 (set (reg:DI 0 ax [95])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [95])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(insn 58 57 59 5 (set (reg:DI 0 ax [96])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [96])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 60 59 61 5 (set (reg:DI 0 ax [97])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [97])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 62 61 63 5 (set (reg:DI 0 ax [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [98])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 64 63 65 5 (set (reg:DI 1 dx [99])
        (reg/f:DI 7 sp)) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 5 (set (reg:DI 4 si [100])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:717 267 {*leadi}
     (nil))
(insn 66 65 200 5 (set (reg:DI 0 ax [101])
        (const_int 38 [0x26])) mABM.c:717 87 {*movdi_internal_rex64}
     (nil))
(insn 200 66 201 5 (set (reg:DI 5 di [99])
        (reg:DI 1 dx [99])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [99])
        (nil)))
(insn 201 200 67 5 (set (reg:DI 2 cx [101])
        (reg:DI 0 ax [101])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 67 201 68 5 (parallel [
            (set (reg:DI 2 cx [101])
                (const_int 0 [0]))
            (set (reg:DI 5 di [99])
                (plus:DI (ashift:DI (reg:DI 2 cx [101])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [99])))
            (set (reg:DI 4 si [100])
                (plus:DI (ashift:DI (reg:DI 2 cx [101])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [100])))
            (set (mem:BLK (reg:DI 5 di [99]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [100]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [101]))
        ]) mABM.c:717 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [101])
        (expr_list:REG_UNUSED (reg:DI 5 di [99])
            (expr_list:REG_UNUSED (reg:DI 4 si [100])
                (nil)))))
(insn 68 67 69 5 (set (reg:SI 38 r9)
        (reg:SI 38 r9 [87])) mABM.c:717 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [87])
        (nil)))
(insn 69 68 70 5 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [88])) mABM.c:717 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [88])
        (nil)))
(insn 70 69 71 5 (set (reg:DI 37 r8)
        (reg:DI 41 r12 [89])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12 [89])
        (nil)))
(insn 71 70 72 5 (set (reg:SI 1 dx)
        (reg:SI 3 bx [90])) mABM.c:717 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [90])
        (nil)))
(insn 72 71 73 5 (set (reg:DI 4 si)
        (reg:DI 40 r11 [91])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 40 r11 [91])
        (nil)))
(insn 73 72 74 5 (set (reg:DI 5 di)
        (reg:DI 39 r10 [92])) mABM.c:717 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [92])
        (nil)))
(call_insn 74 73 75 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_try_flvl") [flags 0x3]  <function_decl 0x7f05a571ff00 _try_flvl>) [0 _try_flvl S1 A8])
            (const_int 368 [0x170]))) mABM.c:717 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                                (const_int 304 [0x130])) [0  S48 A64]))
                                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 352 [0x160])) [0  S16 A128]))
                                        (nil)))))))))))
(insn 75 74 76 5 (set (reg:SI 0 ax [orig:69 D.7209 ] [69])
        (reg:SI 0 ax)) mABM.c:717 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 76 75 77 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:69 D.7209 ] [69])
            (const_int 0 [0]))) mABM.c:717 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7209 ] [69])
        (nil)))
(jump_insn 77 76 78 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) mABM.c:717 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 78 77 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 194 6 (set (reg:SI 0 ax [orig:59 D.7209 ] [59])
        (const_int 1 [0x1])) mABM.c:717 89 {*movsi_internal}
     (nil))
(jump_insn 194 79 195 6 (set (pc)
        (label_ref 180)) mABM.c:717 650 {jump}
     (nil)
 -> 180)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 195 194 82)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
(code_label 82 195 83 7 291 "" [1 uses])
(note 83 82 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 7 (set (reg:XF 9 st(1) [102])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])) mABM.c:718 131 {*movxf_internal_rex64}
     (nil))
(insn 85 84 86 7 (set (reg:XF 8 st [103])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S16 A128])) mABM.c:718 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.0e+1 [0x0.ap+5])
        (nil)))
(insn 86 85 87 7 (set (reg:XF 8 st [orig:70 D.7213 ] [70])
        (minus:XF (reg:XF 9 st(1) [102])
            (reg:XF 8 st [103]))) mABM.c:718 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [103])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [102])
            (nil))))
(insn 87 86 88 7 (set (reg:SI 38 r9 [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])) mABM.c:718 89 {*movsi_internal}
     (nil))
(insn 88 87 89 7 (set (reg:SI 37 r8 [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 sh+0 S4 A64])) mABM.c:718 89 {*movsi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:DI 41 r12 [106])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sh+8 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 7 (set (reg:SI 3 bx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])) mABM.c:718 89 {*movsi_internal}
     (nil))
(insn 91 90 92 7 (set (reg:DI 40 r11 [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 flight+0 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 92 91 93 7 (set (reg:DI 39 r10 [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 93 92 94 7 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [0  S16 A128])
        (reg:XF 8 st [orig:70 D.7213 ] [70])) mABM.c:718 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.7213 ] [70])
        (nil)))
(insn 94 93 95 7 (set (reg:DI 0 ax [110])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [110])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 96 95 97 7 (set (reg:DI 0 ax [111])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [111])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [111])
        (nil)))
(insn 98 97 99 7 (set (reg:DI 0 ax [112])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [112])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 100 99 101 7 (set (reg:DI 0 ax [113])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [113])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(insn 102 101 103 7 (set (reg:DI 0 ax [114])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [114])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(insn 104 103 105 7 (set (reg:DI 0 ax [115])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 7 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [115])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [115])
        (nil)))
(insn 106 105 107 7 (set (reg:DI 1 dx [116])
        (reg/f:DI 7 sp)) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 7 (set (reg:DI 4 si [117])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:718 267 {*leadi}
     (nil))
(insn 108 107 202 7 (set (reg:DI 0 ax [118])
        (const_int 38 [0x26])) mABM.c:718 87 {*movdi_internal_rex64}
     (nil))
(insn 202 108 203 7 (set (reg:DI 5 di [116])
        (reg:DI 1 dx [116])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [116])
        (nil)))
(insn 203 202 109 7 (set (reg:DI 2 cx [118])
        (reg:DI 0 ax [118])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [118])
        (nil)))
(insn 109 203 110 7 (parallel [
            (set (reg:DI 2 cx [118])
                (const_int 0 [0]))
            (set (reg:DI 5 di [116])
                (plus:DI (ashift:DI (reg:DI 2 cx [118])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [116])))
            (set (reg:DI 4 si [117])
                (plus:DI (ashift:DI (reg:DI 2 cx [118])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [117])))
            (set (mem:BLK (reg:DI 5 di [116]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [117]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [118]))
        ]) mABM.c:718 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [118])
        (expr_list:REG_UNUSED (reg:DI 5 di [116])
            (expr_list:REG_UNUSED (reg:DI 4 si [117])
                (nil)))))
(insn 110 109 111 7 (set (reg:SI 38 r9)
        (reg:SI 38 r9 [104])) mABM.c:718 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [104])
        (nil)))
(insn 111 110 112 7 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [105])) mABM.c:718 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [105])
        (nil)))
(insn 112 111 113 7 (set (reg:DI 37 r8)
        (reg:DI 41 r12 [106])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12 [106])
        (nil)))
(insn 113 112 114 7 (set (reg:SI 1 dx)
        (reg:SI 3 bx [107])) mABM.c:718 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [107])
        (nil)))
(insn 114 113 115 7 (set (reg:DI 4 si)
        (reg:DI 40 r11 [108])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 40 r11 [108])
        (nil)))
(insn 115 114 116 7 (set (reg:DI 5 di)
        (reg:DI 39 r10 [109])) mABM.c:718 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [109])
        (nil)))
(call_insn 116 115 117 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_try_flvl") [flags 0x3]  <function_decl 0x7f05a571ff00 _try_flvl>) [0 _try_flvl S1 A8])
            (const_int 368 [0x170]))) mABM.c:718 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                                (const_int 304 [0x130])) [0  S48 A64]))
                                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 352 [0x160])) [0  S16 A128]))
                                        (nil)))))))))))
(insn 117 116 118 7 (set (reg:SI 0 ax [orig:71 D.7209 ] [71])
        (reg:SI 0 ax)) mABM.c:718 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 118 117 119 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:71 D.7209 ] [71])
            (const_int 0 [0]))) mABM.c:718 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 D.7209 ] [71])
        (nil)))
(jump_insn 119 118 120 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) mABM.c:718 612 {*jcc_1}
     (nil)
 -> 124)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 120 119 121 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 196 8 (set (reg:SI 0 ax [orig:59 D.7209 ] [59])
        (const_int 1 [0x1])) mABM.c:718 89 {*movsi_internal}
     (nil))
(jump_insn 196 121 197 8 (set (pc)
        (label_ref 180)) mABM.c:718 650 {jump}
     (nil)
 -> 180)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 197 196 124)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 119 120 121
(code_label 124 197 125 9 293 "" [1 uses])
(note 125 124 126 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 solved+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:719 89 {*movsi_internal}
     (nil))
(insn 127 126 128 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:719 89 {*movsi_internal}
     (nil))
(insn 128 127 129 9 (set (reg:XF 9 st(1) [120])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])) mABM.c:719 131 {*movxf_internal_rex64}
     (nil))
(insn 129 128 130 9 (set (reg:XF 8 st [121])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S16 A128])) mABM.c:719 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.0e+1 [0x0.ap+5])
        (nil)))
(insn 130 129 131 9 (set (reg:XF 8 st [119])
        (plus:XF (reg:XF 8 st [121])
            (reg:XF 9 st(1) [120]))) mABM.c:719 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [121])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [120])
            (nil))))
(insn 131 130 198 9 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])
        (reg:XF 8 st [119])) mABM.c:719 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [119])
        (nil)))
(jump_insn 198 131 199 9 (set (pc)
        (label_ref 173)) mABM.c:719 650 {jump}
     (nil)
 -> 173)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 199 198 175)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141
(code_label 175 199 134 10 295 "" [1 uses])
(note 134 175 135 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 136 10 (set (reg:SI 38 r9 [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 unsafe+0 S4 A32])) mABM.c:720 89 {*movsi_internal}
     (nil))
(insn 136 135 137 10 (set (reg:SI 37 r8 [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 sh+0 S4 A64])) mABM.c:720 89 {*movsi_internal}
     (nil))
(insn 137 136 138 10 (set (reg:DI 41 r12 [124])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sh+8 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 138 137 139 10 (set (reg:SI 3 bx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 N_f+0 S4 A32])) mABM.c:720 89 {*movsi_internal}
     (nil))
(insn 139 138 140 10 (set (reg:DI 40 r11 [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 flight+0 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 140 139 141 10 (set (reg:DI 39 r10 [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 f+0 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 10 (set (reg:XF 0 ax [128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])) mABM.c:720 131 {*movxf_internal_rex64}
     (nil))
(insn 142 141 143 10 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [0  S16 A128])
        (reg:XF 0 ax [128])) mABM.c:720 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [128])
        (nil)))
(insn 143 142 144 10 (set (reg:DI 0 ax [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 144 143 145 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [129])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [129])
        (nil)))
(insn 145 144 146 10 (set (reg:DI 0 ax [130])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 146 145 147 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [130])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(insn 147 146 148 10 (set (reg:DI 0 ax [131])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 148 147 149 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [131])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [131])
        (nil)))
(insn 149 148 150 10 (set (reg:DI 0 ax [132])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 150 149 151 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [132])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [132])
        (nil)))
(insn 151 150 152 10 (set (reg:DI 0 ax [133])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 152 151 153 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [133])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [133])
        (nil)))
(insn 153 152 154 10 (set (reg:DI 0 ax [134])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [134])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [134])
        (nil)))
(insn 155 154 156 10 (set (reg:DI 1 dx [135])
        (reg/f:DI 7 sp)) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 10 (set (reg:DI 4 si [136])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:720 267 {*leadi}
     (nil))
(insn 157 156 204 10 (set (reg:DI 0 ax [137])
        (const_int 38 [0x26])) mABM.c:720 87 {*movdi_internal_rex64}
     (nil))
(insn 204 157 205 10 (set (reg:DI 5 di [135])
        (reg:DI 1 dx [135])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [135])
        (nil)))
(insn 205 204 158 10 (set (reg:DI 2 cx [137])
        (reg:DI 0 ax [137])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [137])
        (nil)))
(insn 158 205 159 10 (parallel [
            (set (reg:DI 2 cx [137])
                (const_int 0 [0]))
            (set (reg:DI 5 di [135])
                (plus:DI (ashift:DI (reg:DI 2 cx [137])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [135])))
            (set (reg:DI 4 si [136])
                (plus:DI (ashift:DI (reg:DI 2 cx [137])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [136])))
            (set (mem:BLK (reg:DI 5 di [135]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [136]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [137]))
        ]) mABM.c:720 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [137])
        (expr_list:REG_UNUSED (reg:DI 5 di [135])
            (expr_list:REG_UNUSED (reg:DI 4 si [136])
                (nil)))))
(insn 159 158 160 10 (set (reg:SI 38 r9)
        (reg:SI 38 r9 [122])) mABM.c:720 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [122])
        (nil)))
(insn 160 159 161 10 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [123])) mABM.c:720 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [123])
        (nil)))
(insn 161 160 162 10 (set (reg:DI 37 r8)
        (reg:DI 41 r12 [124])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12 [124])
        (nil)))
(insn 162 161 163 10 (set (reg:SI 1 dx)
        (reg:SI 3 bx [125])) mABM.c:720 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [125])
        (nil)))
(insn 163 162 164 10 (set (reg:DI 4 si)
        (reg:DI 40 r11 [126])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 40 r11 [126])
        (nil)))
(insn 164 163 165 10 (set (reg:DI 5 di)
        (reg:DI 39 r10 [127])) mABM.c:720 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [127])
        (nil)))
(call_insn 165 164 166 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_try_flvl") [flags 0x3]  <function_decl 0x7f05a571ff00 _try_flvl>) [0 _try_flvl S1 A8])
            (const_int 368 [0x170]))) mABM.c:720 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                                (const_int 304 [0x130])) [0  S48 A64]))
                                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                                    (const_int 352 [0x160])) [0  S16 A128]))
                                        (nil)))))))))))
(insn 166 165 167 10 (set (reg:SI 0 ax [138])
        (reg:SI 0 ax)) mABM.c:720 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 167 166 168 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 solved+0 S4 A32])
        (reg:SI 0 ax [138])) mABM.c:720 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [138])
        (nil)))
(insn 168 167 169 10 (set (reg:XF 9 st(1) [140])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])) mABM.c:719 131 {*movxf_internal_rex64}
     (nil))
(insn 169 168 170 10 (set (reg:XF 8 st [141])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S16 A128])) mABM.c:719 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.0e+1 [0x0.ap+5])
        (nil)))
(insn 170 169 171 10 (set (reg:XF 8 st [139])
        (plus:XF (reg:XF 8 st [141])
            (reg:XF 9 st(1) [140]))) mABM.c:719 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [141])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [140])
            (nil))))
(insn 171 170 172 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 f_lvl_on+0 S16 A128])
        (reg:XF 8 st [139])) mABM.c:719 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [139])
        (nil)))
(insn 172 171 173 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:719 273 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 173 172 174 11 294 "" [1 uses])
(note 174 173 176 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 176 174 177 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 solved+0 S4 A32])
            (const_int 0 [0]))) mABM.c:719 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 177 176 178 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) mABM.c:719 612 {*jcc_1}
     (nil)
 -> 175)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 178 177 179 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 179 178 180 12 (set (reg:SI 0 ax [orig:59 D.7209 ] [59])
        (const_int 1 [0x1])) mABM.c:724 89 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 72
(code_label 180 179 181 13 292 "" [2 uses])
(note 181 180 182 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 186 13 (set (reg:SI 0 ax [orig:72 <retval> ] [72])
        (reg:SI 0 ax [orig:59 D.7209 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7209 ] [59])
        (nil)))
(insn 186 182 189 13 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:72 <retval> ] [72])) mABM.c:725 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 <retval> ] [72])
        (nil)))
(insn 189 186 0 13 (use (reg/i:SI 0 ax)) mABM.c:725 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _calculate_optimum_direct (_calculate_optimum_direct, funcdef_no=33, decl_uid=4486, cgraph_uid=33)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =m  (1) f {*truncxfdf2_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =m  (1) f {*truncxfdf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=610,losers=1 -- reject
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=112 from oldreg=76, assigning class FLOAT_REGS to r112
   43: r112:XF=float_extend([frame:DI-0x10])
    Inserting insn reload after:
   98: r76:XF=r112:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=113 from oldreg=76, assigning class FLOAT_REGS to r113
   69: r93:XF=r92:XF+r113:XF
      REG_DEAD r92:XF
      REG_DEAD r76:XF
    Inserting insn reload before:
   99: r113:XF=r76:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =m  (1) f {*truncxfdf2_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 71:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 79:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=1227,losers=4,rld_nregs=2
          alt=1,overall=622,losers=3,rld_nregs=1
          alt=3,overall=618,losers=2,rld_nregs=1
          alt=4,overall=627,losers=3 -- reject
          alt=8,overall=13,losers=2,rld_nregs=1
          alt=9,overall=21,losers=3 -- reject
          alt=10,overall=9,losers=1,rld_nregs=0
      Creating newreg=114, assigning class NO_REGS to secondary r114
   83: r114:DF=r94:DF
      REG_DEAD r94:DF
    Inserting the sec. move after:
  100: r95:DF=r114:DF

          alt=0,overall=615,losers=2,rld_nregs=1
          alt=1,overall=616,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) ?r  (1) rm {*movdf_internal_rex64}
          alt=0,overall=1229,losers=4,rld_nregs=2
          alt=1,overall=624,losers=3,rld_nregs=1
          alt=3,overall=621,losers=2,rld_nregs=1
          alt=4,overall=17,losers=1,rld_nregs=0
          alt=5,overall=621,losers=2 -- reject
          alt=6,overall=621,losers=2 -- reject
          alt=8,overall=12,losers=2,rld_nregs=1
          alt=9,overall=8,losers=1,rld_nregs=0
          alt=10,overall=11,losers=1 -- reject
          alt=12,overall=615,losers=2 -- reject
      Creating newreg=115, assigning class NO_REGS to secondary r115
   87: r115:DF=r95:DF
      REG_DEAD r95:DF
    Inserting the sec. move after:
  101: xmm0:DF=r115:DF

          alt=0,overall=617,losers=2,rld_nregs=1
          alt=1,overall=618,losers=2 -- reject
          alt=3,overall=621,losers=2 -- reject
          alt=4,overall=623,losers=2 -- reject
          alt=5,overall=621,losers=2 -- reject
          alt=6,overall=621,losers=2 -- reject
          alt=8,overall=6,losers=1,rld_nregs=1
          alt=9,overall=1,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 101:  (0) x  (1) m {*movdf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=116 from oldreg=76, assigning class FLOAT_REGS to inheritance r116
    Original reg change 76->116 (bb3):
   98: r116:XF=r112:XF
    Add original<-inheritance after:
  102: r76:XF=r116:XF

    Inheritance reuse change 76->116 (bb3):
   99: r113:XF=r116:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   102: r76:XF=r116:XF
deleting insn with uid = 102.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 90: point = 0
   Insn 101: point = 0
	Hard reg 21 is preferable by r115 with profit 1
   Insn 87: point = 1
	Hard reg 21 is preferable by r115 with profit 1
	Hard reg 0 is preferable by r115 with profit 1
   Insn 100: point = 3
	Hard reg 0 is preferable by r114 with profit 1
   Insn 83: point = 5
	Hard reg 0 is preferable by r114 with profit 1
	Hard reg 21 is preferable by r114 with profit 1
   Insn 80: point = 7
   Insn 79: point = 9
  BB 4
   Insn 77: point = 10
   Insn 76: point = 10
   Insn 75: point = 11
  BB 2
   Insn 93: point = 12
   Insn 39: point = 12
   Insn 97: point = 12
   Insn 37: point = 13
   Insn 36: point = 14
   Insn 35: point = 14
   Insn 34: point = 15
   Insn 33: point = 16
   Insn 32: point = 18
   Insn 31: point = 19
   Insn 30: point = 21
   Insn 29: point = 23
   Insn 28: point = 25
   Insn 27: point = 27
   Insn 26: point = 29
   Insn 25: point = 30
   Insn 24: point = 32
   Insn 96: point = 33
   Insn 22: point = 34
   Insn 21: point = 35
   Insn 20: point = 35
   Insn 19: point = 36
   Insn 18: point = 37
   Insn 17: point = 39
   Insn 16: point = 40
   Insn 15: point = 42
   Insn 14: point = 44
   Insn 13: point = 46
   Insn 12: point = 48
   Insn 11: point = 50
   Insn 10: point = 51
   Insn 9: point = 53
   Insn 8: point = 54
   Insn 7: point = 56
   Insn 3: point = 57
   Insn 2: point = 57
  BB 3
   Insn 71: point = 57
   Insn 95: point = 57
   Insn 69: point = 58
   Insn 99: point = 60
	   Creating copy r113<-r116@1
   Insn 68: point = 62
   Insn 67: point = 63
   Insn 66: point = 63
   Insn 65: point = 64
   Insn 64: point = 65
   Insn 63: point = 67
   Insn 62: point = 69
   Insn 61: point = 71
   Insn 60: point = 73
   Insn 59: point = 75
   Insn 58: point = 76
   Insn 57: point = 78
   Insn 56: point = 79
   Insn 55: point = 81
   Insn 54: point = 82
   Insn 53: point = 84
   Insn 52: point = 86
   Insn 51: point = 88
   Insn 50: point = 90
   Insn 49: point = 92
   Insn 48: point = 94
   Insn 47: point = 95
   Insn 46: point = 97
   Insn 45: point = 98
   Insn 44: point = 100
   Insn 98: point = 101
	   Creating copy r112->r116@1
   Insn 43: point = 103
 r59: [43..54]
 r60: [49..51]
 r61: [47..48]
 r62: [45..46]
 r63: [43..44]
 r64: [41..42]
 r65: [36..40]
 r66: [35..37]
 r67: [33..34]
 r68: [22..30]
 r69: [26..27]
 r70: [24..25]
 r71: [22..23]
 r72: [20..21]
 r73: [15..19]
 r74: [14..16]
 r75: [12..13]
 r77: [85..98]
 r78: [93..95]
 r79: [91..92]
 r80: [89..90]
 r81: [87..88]
 r82: [85..86]
 r83: [83..84]
 r84: [64..82]
 r85: [68..79]
 r86: [74..76]
 r87: [72..73]
 r88: [70..71]
 r89: [68..69]
 r90: [66..67]
 r91: [63..65]
 r92: [59..62]
 r93: [57..58]
 r94: [6..7]
 r95: [2..3]
 r96: [55..56]
 r97: [52..53]
 r98: [49..50]
 r99: [38..39]
 r100: [31..32]
 r101: [28..29]
 r102: [17..18]
 r103: [99..100]
 r104: [96..97]
 r105: [93..94]
 r106: [80..81]
 r107: [77..78]
 r108: [74..75]
 r109: [10..11]
 r110: [8..9]
 r112: [102..103]
 r113: [59..60]
 r114: [4..5]
 r115: [0..1]
 r116: [61..101]
Compressing live ranges: from 104 to 90 - 86%
Ranges after the compression:
 r59: [38..47]
 r60: [44..45]
 r61: [42..43]
 r62: [40..41]
 r63: [38..39]
 r64: [36..37]
 r65: [32..35]
 r66: [32..33]
 r67: [30..31]
 r68: [20..27]
 r69: [24..25]
 r70: [22..23]
 r71: [20..21]
 r72: [18..19]
 r73: [14..17]
 r74: [14..15]
 r75: [12..13]
 r77: [74..85]
 r78: [82..83]
 r79: [80..81]
 r80: [78..79]
 r81: [76..77]
 r82: [74..75]
 r83: [72..73]
 r84: [56..71]
 r85: [60..69]
 r86: [66..67]
 r87: [64..65]
 r88: [62..63]
 r89: [60..61]
 r90: [58..59]
 r91: [56..57]
 r92: [52..55]
 r93: [50..51]
 r94: [6..7]
 r95: [2..3]
 r96: [48..49]
 r97: [46..47]
 r98: [44..45]
 r99: [34..35]
 r100: [28..29]
 r101: [26..27]
 r102: [16..17]
 r103: [86..87]
 r104: [84..85]
 r105: [82..83]
 r106: [70..71]
 r107: [68..69]
 r108: [66..67]
 r109: [10..11]
 r110: [8..9]
 r112: [88..89]
 r113: [52..53]
 r114: [4..5]
 r115: [0..1]
 r116: [54..87]
	 Assigning to 112 (cl=FLOAT_REGS, orig=76, freq=2, tfirst=112, tfreq=2)...
	   Assign 9 to reload r112 (freq=2)
	Hard reg 9 is preferable by r116 with profit 1
	Hard reg 9 is preferable by r113 with profit 1
	 Assigning to 113 (cl=FLOAT_REGS, orig=76, freq=2, tfirst=112, tfreq=2)...
	   Assign 9 to reload r113 (freq=2)
	Hard reg 9 is preferable by r116 with profit 2
	 Assigning to 116 (cl=FLOAT_REGS, orig=76, freq=2, tfirst=112, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   99: r113:XF=r76:XF
      REG_DEAD r76:XF
   Insn after restoring regs:
   98: r76:XF=r112:XF
      REG_DEAD r112:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 5
   Insn 90: point = 0
   Insn 101: point = 0
   Insn 87: point = 1
   Insn 100: point = 3
   Insn 83: point = 5
   Insn 80: point = 7
   Insn 79: point = 9
  BB 4
   Insn 77: point = 10
   Insn 76: point = 10
   Insn 75: point = 11
  BB 2
   Insn 93: point = 12
   Insn 39: point = 12
   Insn 97: point = 12
   Insn 37: point = 13
   Insn 36: point = 14
   Insn 35: point = 14
   Insn 34: point = 15
   Insn 33: point = 16
   Insn 32: point = 18
   Insn 31: point = 19
   Insn 30: point = 21
   Insn 29: point = 23
   Insn 28: point = 25
   Insn 27: point = 27
   Insn 26: point = 29
   Insn 25: point = 30
   Insn 24: point = 32
   Insn 96: point = 33
   Insn 22: point = 34
   Insn 21: point = 35
   Insn 20: point = 35
   Insn 19: point = 36
   Insn 18: point = 37
   Insn 17: point = 39
   Insn 16: point = 40
   Insn 15: point = 42
   Insn 14: point = 44
   Insn 13: point = 46
   Insn 12: point = 48
   Insn 11: point = 50
   Insn 10: point = 51
   Insn 9: point = 53
   Insn 8: point = 54
   Insn 7: point = 56
   Insn 3: point = 57
   Insn 2: point = 57
  BB 3
   Insn 71: point = 57
   Insn 95: point = 57
   Insn 69: point = 58
   Insn 99: point = 60
   Insn 68: point = 62
   Insn 67: point = 63
   Insn 66: point = 63
   Insn 65: point = 64
   Insn 64: point = 65
   Insn 63: point = 67
   Insn 62: point = 69
   Insn 61: point = 71
   Insn 60: point = 73
   Insn 59: point = 75
   Insn 58: point = 76
   Insn 57: point = 78
   Insn 56: point = 79
   Insn 55: point = 81
   Insn 54: point = 82
   Insn 53: point = 84
   Insn 52: point = 86
   Insn 51: point = 88
   Insn 50: point = 90
   Insn 49: point = 92
   Insn 48: point = 94
   Insn 47: point = 95
   Insn 46: point = 97
   Insn 45: point = 98
   Insn 44: point = 100
   Insn 98: point = 101
   Insn 43: point = 103
 r76: [61..101]
 r114: [4..5]
 r115: [0..1]
Compressing live ranges: from 104 to 6 - 5%
Ranges after the compression:
 r76: [4..5]
 r114: [2..3]
 r115: [0..1]
  Slot 0 regnos (width = 16):	 76	 115	 114
Changing spilled pseudos to memory in insn #98
Changing spilled pseudos to memory in insn #99
Changing spilled pseudos to memory in insn #83
Changing spilled pseudos to memory in insn #100
Changing spilled pseudos to memory in insn #87
Changing spilled pseudos to memory in insn #101

********** Local #3: **********

Reusing alternative 9 for insn #101
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 101:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=613,losers=2,rld_nregs=1
          alt=3,overall=615,losers=1 -- reject
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) ?m  (1) rC {*movdf_internal_rex64}
Reusing alternative 3 for insn #100
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) ?r  (1) rm {*movdf_internal_rex64}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=613,losers=2,rld_nregs=1
          alt=3,overall=615,losers=1 -- reject
          alt=4,overall=618,losers=2 -- reject
          alt=5,overall=615,losers=1 -- reject
          alt=6,overall=615,losers=1 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 83:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #99
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #98
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 22
changing reg in insn 96
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 34
changing reg in insn 33
changing reg in insn 35
changing reg in insn 37
changing reg in insn 97
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 65
changing reg in insn 56
changing reg in insn 58
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 95
changing reg in insn 80
changing reg in insn 83
changing reg in insn 87
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 67.


_calculate_optimum_direct

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0]
;;  ref usage 	r0={37d,33u} r1={12d,8u} r2={7d,3u,2e} r4={8d,5u,1e} r5={7d,4u} r6={1d,37u} r7={1d,8u} r8={7d,7u} r9={5d,2u} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={19d,1u} r18={3d} r19={3d} r20={1d,1u,5e} r21={7d,4u} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 347{226d,113u,8e} in 77{74 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 96 97 98 99 100 101 102
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:727 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 on+0 S4 A32])
        (reg:SI 4 si [ on ])) mABM.c:727 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ on ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:729 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:59 D.7214 ] [59])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mABM.c:729 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:729 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 cx [orig:60 D.7215 ] [60])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 44 [0x2c])) [0 f_3(D)->st_indx+0 S4 A32])) mABM.c:729 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (nil)))
(insn 11 10 12 2 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 on+0 S4 A32])) mABM.c:729 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [orig:61 D.7215 ] [61])
                (plus:SI (reg:SI 0 ax [98])
                    (reg:SI 2 cx [orig:60 D.7215 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:729 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [98])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:60 D.7215 ] [60])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:60 D.7215 ] [60])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -44 [0xffffffffffffffd4])) [0 on+0 S4 A32]))
                (nil)))))
(insn 13 12 14 2 (set (reg:DI 0 ax [orig:62 D.7216 ] [62])
        (sign_extend:DI (reg:SI 0 ax [orig:61 D.7215 ] [61]))) mABM.c:729 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.7215 ] [61])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 0 ax [orig:63 D.7216 ] [63])
                (ashift:DI (reg:DI 0 ax [orig:62 D.7216 ] [62])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:729 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.7216 ] [62])
        (nil)))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.7214 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.7216 ] [63])
                    (reg/f:DI 1 dx [orig:59 D.7214 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:729 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.7216 ] [63])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:59 D.7214 ] [59])
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:65 D.7217 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.7214 ] [64]) [0 *_10+0 S8 A64])) mABM.c:729 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7214 ] [64])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 1 dx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:729 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 1 dx [orig:66 D.7218 ] [66])
                (plus:DI (reg/f:DI 1 dx [99])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:729 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [99])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 19 18 20 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:65 D.7217 ] [65])) mABM.c:729 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7217 ] [65])
        (nil)))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:66 D.7218 ] [66])) mABM.c:729 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:66 D.7218 ] [66])
        (nil)))
(call_insn 21 20 22 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:729 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 22 21 96 2 (set (reg:XF 8 st [orig:67 D.7219 ] [67])
        (reg:XF 8 st)) mABM.c:729 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 96 22 24 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 d1+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:67 D.7219 ] [67]))) mABM.c:729 174 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.7219 ] [67])
        (nil)))
(insn 24 96 25 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:730 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 1 dx [orig:68 D.7214 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mABM.c:730 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [100])
        (nil)))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:730 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:69 D.7215 ] [69])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 44 [0x2c])) [0 f_3(D)->st_indx+0 S4 A32])) mABM.c:730 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 0 ax [orig:70 D.7216 ] [70])
        (sign_extend:DI (reg:SI 0 ax [orig:69 D.7215 ] [69]))) mABM.c:730 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7215 ] [69])
        (nil)))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [orig:71 D.7216 ] [71])
                (ashift:DI (reg:DI 0 ax [orig:70 D.7216 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:730 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.7216 ] [70])
        (nil)))
(insn 30 29 31 2 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.7214 ] [72])
                (plus:DI (reg:DI 0 ax [orig:71 D.7216 ] [71])
                    (reg/f:DI 1 dx [orig:68 D.7214 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:730 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.7216 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.7214 ] [68])
            (nil))))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [orig:73 D.7217 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [orig:72 D.7214 ] [72]) [0 *_19+0 S8 A64])) mABM.c:730 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.7214 ] [72])
        (nil)))
(insn 32 31 33 2 (set (reg/f:DI 1 dx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:730 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg/f:DI 1 dx [orig:74 D.7218 ] [74])
                (plus:DI (reg/f:DI 1 dx [102])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:730 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [102])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 34 33 35 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:73 D.7217 ] [73])) mABM.c:730 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7217 ] [73])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:74 D.7218 ] [74])) mABM.c:730 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:74 D.7218 ] [74])
        (nil)))
(call_insn 36 35 37 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:730 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 37 36 97 2 (set (reg:XF 8 st [orig:75 D.7219 ] [75])
        (reg:XF 8 st)) mABM.c:730 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 97 37 39 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 d2+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:75 D.7219 ] [75]))) mABM.c:730 174 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.7219 ] [75])
        (nil)))
(insn 39 97 93 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:732 89 {*movsi_internal}
     (nil))
(jump_insn 93 39 94 2 (set (pc)
        (label_ref 72)) mABM.c:732 650 {jump}
     (nil)
 -> 72)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 74)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 103 104 105 106 107 108
(code_label 74 94 42 3 298 "" [1 uses])
(note 42 74 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 98 3 (set (reg:XF 9 st(1) [orig:76 D.7219 ] [76])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 d2+0 S8 A64]))) mABM.c:733 162 {*extenddfxf2_i387}
     (nil))
(insn 98 43 102 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])
        (reg:XF 9 st(1) [orig:76 D.7219 ] [76])) mABM.c:733 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:76 D.7219 ] [76])
        (nil)))
(note 102 98 44 3 NOTE_INSN_DELETED)
(insn 44 102 45 3 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 1 dx [orig:77 D.7214 ] [77])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (nil)))
(insn 46 45 47 3 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 3 (set (reg:SI 2 cx [orig:78 D.7215 ] [78])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 44 [0x2c])) [0 f_3(D)->st_indx+0 S4 A32])) mABM.c:733 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 48 47 49 3 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:733 89 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (reg:SI 0 ax [orig:79 D.7215 ] [79])
                (plus:SI (reg:SI 0 ax [105])
                    (reg:SI 2 cx [orig:78 D.7215 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [105])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:78 D.7215 ] [78])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:78 D.7215 ] [78])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))
                (nil)))))
(insn 50 49 51 3 (set (reg:DI 0 ax [orig:80 D.7220 ] [80])
        (sign_extend:DI (reg:SI 0 ax [orig:79 D.7215 ] [79]))) mABM.c:733 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:79 D.7215 ] [79])
        (nil)))
(insn 51 50 52 3 (parallel [
            (set (reg:DI 0 ax [orig:81 D.7220 ] [81])
                (plus:DI (reg:DI 0 ax [orig:80 D.7220 ] [80])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7220 ] [80])
        (nil)))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 0 ax [orig:82 D.7220 ] [82])
                (ashift:DI (reg:DI 0 ax [orig:81 D.7220 ] [81])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:81 D.7220 ] [81])
        (nil)))
(insn 53 52 54 3 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.7214 ] [83])
                (plus:DI (reg:DI 0 ax [orig:82 D.7220 ] [82])
                    (reg/f:DI 1 dx [orig:77 D.7214 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:82 D.7220 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:77 D.7214 ] [77])
            (nil))))
(insn 54 53 55 3 (set (reg/f:DI 1 dx [orig:84 D.7217 ] [84])
        (mem/f:DI (reg/f:DI 0 ax [orig:83 D.7214 ] [83]) [0 *_32+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.7214 ] [83])
        (nil)))
(insn 55 54 56 3 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 3 (set (reg/f:DI 2 cx [orig:85 D.7214 ] [85])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [106])
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 57 56 58 3 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 3 (set (reg:SI 4 si [orig:86 D.7215 ] [86])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 44 [0x2c])) [0 f_3(D)->st_indx+0 S4 A32])) mABM.c:733 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (nil)))
(insn 59 58 60 3 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:733 89 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg:SI 0 ax [orig:87 D.7215 ] [87])
                (plus:SI (reg:SI 0 ax [108])
                    (reg:SI 4 si [orig:86 D.7215 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [108])
        (expr_list:REG_DEAD (reg:SI 4 si [orig:86 D.7215 ] [86])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 4 si [orig:86 D.7215 ] [86])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))
                (nil)))))
(insn 61 60 62 3 (set (reg:DI 0 ax [orig:88 D.7216 ] [88])
        (sign_extend:DI (reg:SI 0 ax [orig:87 D.7215 ] [87]))) mABM.c:733 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:87 D.7215 ] [87])
        (nil)))
(insn 62 61 63 3 (parallel [
            (set (reg:DI 0 ax [orig:89 D.7216 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.7216 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.7216 ] [88])
        (nil)))
(insn 63 62 64 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.7214 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 D.7216 ] [89])
                    (reg/f:DI 2 cx [orig:85 D.7214 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:733 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.7216 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:85 D.7214 ] [85])
            (nil))))
(insn 64 63 65 3 (set (reg/f:DI 0 ax [orig:91 D.7217 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.7214 ] [90]) [0 *_39+0 S8 A64])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.7214 ] [90])
        (nil)))
(insn 65 64 66 3 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:84 D.7217 ] [84])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:84 D.7217 ] [84])
        (nil)))
(insn 66 65 67 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.7217 ] [91])) mABM.c:733 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.7217 ] [91])
        (nil)))
(call_insn 67 66 68 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:733 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 68 67 99 3 (set (reg:XF 8 st [orig:92 D.7219 ] [92])
        (reg:XF 8 st)) mABM.c:733 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 99 68 69 3 (set (reg:XF 9 st(1) [orig:76 D.7219 ] [76])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])) mABM.c:733 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 76 [ D.7219 ])
        (nil)))
(insn 69 99 95 3 (set (reg:XF 8 st [orig:93 D.7219 ] [93])
        (plus:XF (reg:XF 8 st [orig:92 D.7219 ] [92])
            (reg:XF 9 st(1) [orig:76 D.7219 ] [76]))) mABM.c:733 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:76 D.7219 ] [76])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7219 ] [92])
            (nil))))
(insn 95 69 71 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 d2+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:93 D.7219 ] [93]))) mABM.c:733 174 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:93 D.7219 ] [93])
        (nil)))
(insn 71 95 72 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:732 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109
(code_label 72 71 73 4 297 "" [1 uses])
(note 73 72 75 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 75 73 76 4 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:732 89 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 on+0 S4 A32]))) mABM.c:732 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [109])
        (nil)))
(jump_insn 77 76 78 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) mABM.c:732 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 21 [xmm0] 94 95 110
(note 78 77 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 5 (set (reg:DF 21 xmm0 [110])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 d2+0 S8 A64])) mABM.c:736 133 {*movdf_internal_rex64}
     (nil))
(insn 80 79 83 5 (set (reg:DF 21 xmm0 [orig:94 D.7221 ] [94])
        (minus:DF (reg:DF 21 xmm0 [110])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 d1+0 S8 A64]))) mABM.c:736 785 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [110])
        (nil)))
(insn 83 80 100 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128])
        (reg:DF 21 xmm0 [orig:94 D.7221 ] [94])) mABM.c:736 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:94 D.7221 ] [94])
        (nil)))
(insn 100 83 87 5 (set (reg:DF 0 ax [orig:95 <retval> ] [95])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128])) mABM.c:736 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 114)
        (nil)))
(insn 87 100 101 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128])
        (reg:DF 0 ax [orig:95 <retval> ] [95])) mABM.c:737 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 0 ax [orig:95 <retval> ] [95])
        (nil)))
(insn 101 87 90 5 (set (reg/i:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128])) mABM.c:737 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 115)
        (nil)))
(insn 90 101 0 5 (use (reg/i:DF 21 xmm0)) mABM.c:737 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]


;; Function _direct (_direct, funcdef_no=34, decl_uid=4500, cgraph_uid=34)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=464, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=432, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 52:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 82:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 95:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 126:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 127:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 157:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 158:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 181:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=236 from oldreg=203, assigning class DIREG to r236
      Creating newreg=237 from oldreg=205, assigning class CREG to r237
  181: {r237:DI=0;r236:DI=r237:DI<<0x3+r236:DI;r204:DI=r237:DI<<0x3+r204:DI;[r236:DI]=[r204:DI];use r237:DI;}
      REG_UNUSED r205:DI
      REG_UNUSED r204:DI
      REG_UNUSED r203:DI
    Inserting insn reload before:
  351: r236:DI=r203:DI
  352: r237:DI=r205:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 200:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 212:  (0) r  (1) r  (2) le {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =m  (1) f {*truncxfdf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 238
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 249:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 267
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 268:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 270:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 273:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 274:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 281:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 297:  (0) r  (1) 0  (2) rm {*subsi_1}
      Creating newreg=238 from oldreg=156, assigning class GENERAL_REGS to r238
  297: {r238:SI=r238:SI-[frame:DI-0x58];clobber flags:CC;}
      REG_DEAD r155:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  353: r238:SI=r155:SI
    Inserting insn reload after:
  354: r156:SI=r238:SI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 305:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 308:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 309:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 310:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 75 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 82 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 327: point = 0
   Insn 324: point = 0
   Insn 320: point = 1
  BB 11
   Insn 344: point = 4
   Insn 206: point = 4
   Insn 205: point = 5
   Insn 204: point = 5
   Insn 203: point = 6
   Insn 202: point = 7
   Insn 201: point = 8
   Insn 200: point = 9
   Insn 199: point = 10
   Insn 198: point = 11
   Insn 197: point = 12
   Insn 196: point = 13
   Insn 195: point = 15
   Insn 194: point = 16
   Insn 193: point = 18
   Insn 192: point = 19
   Insn 191: point = 20
   Insn 190: point = 21
   Insn 189: point = 22
   Insn 188: point = 23
  BB 3
   Insn 337: point = 24
   Insn 63: point = 24
  BB 18
   Insn 315: point = 25
   Insn 314: point = 26
   Insn 313: point = 26
   Insn 312: point = 27
   Insn 311: point = 28
   Insn 310: point = 29
   Insn 309: point = 30
   Insn 308: point = 31
   Insn 307: point = 32
   Insn 306: point = 33
   Insn 305: point = 34
   Insn 304: point = 36
   Insn 303: point = 37
   Insn 302: point = 39
   Insn 301: point = 40
   Insn 300: point = 41
   Insn 299: point = 42
   Insn 298: point = 43
   Insn 354: point = 44
	Hard reg 1 is preferable by r238 with profit 1
   Insn 297: point = 46
   Insn 353: point = 46
	Hard reg 1 is preferable by r238 with profit 1
	Hard reg 0 is preferable by r238 with profit 1
   Insn 296: point = 48
   Insn 295: point = 50
   Insn 294: point = 51
   Insn 293: point = 52
   Insn 292: point = 53
   Insn 291: point = 55
   Insn 290: point = 57
   Insn 289: point = 59
   Insn 288: point = 60
   Insn 287: point = 62
   Insn 286: point = 63
   Insn 285: point = 64
   Insn 284: point = 65
  BB 17
   Insn 282: point = 66
   Insn 281: point = 66
   Insn 279: point = 67
   Insn 278: point = 69
   Insn 277: point = 71
  BB 12
   Insn 346: point = 72
   Insn 225: point = 72
   Insn 224: point = 73
   Insn 350: point = 74
   Insn 222: point = 75
   Insn 221: point = 76
   Insn 220: point = 76
   Insn 219: point = 77
   Insn 218: point = 78
   Insn 217: point = 80
   Insn 216: point = 82
   Insn 215: point = 84
   Insn 214: point = 85
   Insn 213: point = 87
   Insn 212: point = 88
   Insn 211: point = 90
  BB 10
   Insn 186: point = 91
   Insn 185: point = 91
   Insn 184: point = 92
   Insn 183: point = 93
   Insn 182: point = 93
   Insn 181: point = 94
   Insn 352: point = 95
	Hard reg 0 is preferable by r237 with profit 1
   Insn 351: point = 97
	Hard reg 1 is preferable by r236 with profit 1
   Insn 180: point = 99
   Insn 179: point = 100
   Insn 178: point = 101
   Insn 177: point = 102
   Insn 176: point = 103
   Insn 175: point = 103
   Insn 174: point = 104
   Insn 173: point = 105
   Insn 172: point = 106
   Insn 171: point = 107
   Insn 170: point = 108
   Insn 169: point = 109
   Insn 168: point = 110
   Insn 167: point = 112
   Insn 166: point = 113
   Insn 165: point = 115
   Insn 164: point = 116
   Insn 163: point = 117
   Insn 162: point = 117
   Insn 161: point = 118
   Insn 160: point = 119
   Insn 159: point = 120
   Insn 158: point = 121
   Insn 157: point = 122
   Insn 156: point = 123
   Insn 155: point = 124
   Insn 154: point = 125
   Insn 153: point = 127
   Insn 152: point = 128
   Insn 151: point = 130
   Insn 150: point = 131
   Insn 149: point = 132
   Insn 148: point = 133
   Insn 147: point = 134
   Insn 146: point = 135
   Insn 145: point = 137
   Insn 144: point = 138
   Insn 143: point = 140
  BB 6
   Insn 342: point = 141
   Insn 95: point = 141
  BB 9
   Insn 140: point = 141
   Insn 139: point = 141
   Insn 138: point = 142
   Insn 137: point = 143
  BB 8
   Insn 134: point = 144
   Insn 133: point = 144
   Insn 132: point = 145
   Insn 131: point = 147
   Insn 130: point = 149
  BB 4
   Insn 339: point = 150
   Insn 72: point = 150
   Insn 71: point = 150
   Insn 70: point = 151
   Insn 69: point = 153
   Insn 68: point = 155
  BB 2
   Insn 58: point = 156
   Insn 57: point = 156
   Insn 56: point = 157
   Insn 55: point = 158
   Insn 54: point = 159
   Insn 53: point = 160
   Insn 52: point = 162
   Insn 51: point = 163
   Insn 50: point = 163
   Insn 49: point = 164
   Insn 48: point = 164
   Insn 47: point = 165
   Insn 46: point = 166
   Insn 45: point = 168
   Insn 44: point = 170
   Insn 43: point = 172
   Insn 42: point = 174
   Insn 41: point = 176
   Insn 40: point = 177
   Insn 39: point = 179
   Insn 38: point = 180
   Insn 37: point = 181
   Insn 36: point = 181
   Insn 35: point = 182
   Insn 34: point = 183
   Insn 33: point = 185
   Insn 32: point = 187
   Insn 31: point = 188
   Insn 30: point = 190
   Insn 29: point = 192
   Insn 28: point = 194
   Insn 27: point = 196
   Insn 26: point = 198
   Insn 25: point = 200
   Insn 24: point = 201
   Insn 23: point = 203
   Insn 22: point = 204
   Insn 21: point = 205
   Insn 20: point = 207
   Insn 19: point = 208
   Insn 18: point = 209
   Insn 17: point = 211
   Insn 16: point = 212
   Insn 15: point = 213
   Insn 14: point = 214
   Insn 13: point = 215
   Insn 9: point = 216
   Insn 8: point = 217
   Insn 7: point = 218
   Insn 6: point = 220
   Insn 5: point = 221
   Insn 4: point = 222
   Insn 3: point = 222
   Insn 2: point = 222
  BB 7
   Insn 127: point = 222
   Insn 126: point = 222
   Insn 125: point = 222
   Insn 124: point = 223
   Insn 123: point = 225
   Insn 122: point = 227
   Insn 121: point = 229
   Insn 120: point = 231
   Insn 119: point = 233
   Insn 118: point = 234
   Insn 117: point = 236
   Insn 116: point = 237
   Insn 115: point = 238
   Insn 114: point = 238
   Insn 113: point = 239
   Insn 112: point = 240
   Insn 111: point = 242
   Insn 110: point = 244
   Insn 109: point = 245
   Insn 108: point = 247
   Insn 107: point = 249
   Insn 106: point = 251
   Insn 105: point = 253
   Insn 104: point = 255
   Insn 103: point = 256
   Insn 102: point = 258
   Insn 101: point = 259
   Insn 100: point = 260
  BB 5
   Insn 90: point = 261
   Insn 89: point = 261
   Insn 88: point = 262
   Insn 87: point = 263
   Insn 86: point = 265
   Insn 85: point = 266
   Insn 84: point = 267
   Insn 83: point = 268
   Insn 82: point = 270
   Insn 81: point = 271
   Insn 80: point = 271
   Insn 79: point = 272
   Insn 78: point = 273
   Insn 77: point = 274
   Insn 76: point = 276
  BB 16
   Insn 274: point = 277
   Insn 273: point = 277
   Insn 272: point = 278
   Insn 271: point = 280
   Insn 270: point = 282
   Insn 269: point = 284
   Insn 268: point = 286
   Insn 267: point = 288
   Insn 266: point = 290
   Insn 265: point = 291
   Insn 264: point = 292
   Insn 263: point = 294
   Insn 262: point = 295
   Insn 261: point = 297
   Insn 260: point = 299
   Insn 259: point = 301
   Insn 258: point = 303
   Insn 257: point = 304
   Insn 256: point = 306
  BB 15
   Insn 254: point = 307
   Insn 253: point = 307
  BB 13
   Insn 348: point = 307
   Insn 229: point = 307
  BB 14
   Insn 249: point = 307
   Insn 248: point = 307
   Insn 247: point = 308
   Insn 246: point = 310
   Insn 245: point = 312
   Insn 244: point = 314
   Insn 243: point = 316
   Insn 242: point = 318
   Insn 241: point = 319
   Insn 240: point = 320
   Insn 239: point = 322
   Insn 238: point = 323
   Insn 237: point = 325
   Insn 236: point = 327
   Insn 235: point = 329
   Insn 234: point = 330
   Insn 233: point = 332
 r59: [24..25] [2..4]
 r60: [191..201]
 r61: [197..198]
 r62: [195..196]
 r63: [193..194]
 r64: [191..192]
 r65: [189..190]
 r66: [182..188]
 r67: [184..185]
 r68: [181..183]
 r69: [167..180]
 r70: [171..177]
 r71: [173..174]
 r72: [171..172]
 r73: [169..170]
 r74: [167..168]
 r75: [161..162]
 r76: [159..160]
 r77: [156..158]
 r78: [152..153]
 r79: [146..147]
 r80: [144..145]
 r81: [272..274]
 r82: [269..270]
 r83: [267..268]
 r84: [264..266]
 r85: [264..265]
 r86: [261..263]
 r87: [259..260]
 r88: [248..256]
 r89: [252..253]
 r90: [250..251]
 r91: [248..249]
 r92: [246..247]
 r93: [239..245]
 r94: [241..242]
 r95: [238..240]
 r96: [224..237]
 r97: [228..234]
 r98: [230..231]
 r99: [228..229]
 r100: [226..227]
 r101: [224..225]
 r102: [136..138]
 r103: [133..135]
 r104: [121..132]
 r105: [120..131]
 r106: [129..130]
 r107: [119..128]
 r108: [118..125]
 r109: [107..116]
 r110: [114..115]
 r111: [104..113]
 r112: [103..110]
 r113: [93..102]
 r114: [91..92]
 r115: [9..20]
 r116: [8..19]
 r117: [17..18]
 r118: [7..16]
 r119: [6..13]
 r120: [77..88]
 r121: [79..85]
 r122: [81..82]
 r123: [79..80]
 r124: [76..78]
 r125: [74..75]
 r126: [68..69]
 r127: [66..67]
 r128: [324..330]
 r129: [326..327]
 r130: [324..325]
 r131: [307..323]
 r132: [311..320]
 r133: [315..316]
 r134: [313..314]
 r135: [311..312]
 r136: [309..310]
 r137: [307..308]
 r138: [296..304]
 r139: [300..301]
 r140: [298..299]
 r141: [296..297]
 r142: [277..295]
 r143: [281..292]
 r144: [287..288]
 r145: [285..286]
 r146: [283..284]
 r147: [281..282]
 r148: [279..280]
 r149: [277..278]
 r150: [54..60]
 r151: [56..57]
 r152: [54..55]
 r153: [51..53]
 r154: [51..52]
 r155: [47..48]
 r156: [42..44]
 r157: [30..41]
 r158: [29..40]
 r159: [38..39]
 r160: [28..37]
 r161: [27..34]
 r162: [0..1]
 r163: [216..218]
 r164: [219..221]
 r165: [217..220]
 r166: [214..215]
 r167: [212..213]
 r168: [210..211]
 r169: [208..209]
 r170: [206..207]
 r171: [204..205]
 r172: [202..203]
 r173: [199..200]
 r174: [186..187]
 r175: [178..179]
 r176: [175..176]
 r177: [165..166]
 r178: [163..164]
 r179: [156..157]
 r180: [154..155]
 r181: [150..151]
 r182: [275..276]
 r183: [271..273]
 r184: [261..262]
 r185: [257..258]
 r186: [254..255]
 r187: [243..244]
 r188: [235..236]
 r189: [232..233]
 r190: [222..223]
 r191: [148..149]
 r192: [141..143]
 r193: [141..142]
 r194: [139..140]
 r195: [136..137]
 r196: [133..134]
 r197: [126..127]
 r198: [117..124]
 r199: [122..123]
 r200: [111..112]
 r201: [106..109]
 r202: [105..108]
 r203: [98..101]
 r204: [94..100]
 r205: [96..99]
 r206: [21..23]
 r207: [21..22]
 r208: [14..15]
 r209: [5..12]
 r210: [10..11]
 r211: [89..90]
 r212: [86..87]
 r213: [83..84]
 r214: [72..73]
 r215: [331..332]
 r216: [328..329]
 r217: [321..322]
 r218: [317..319]
 r219: [317..318]
 r220: [305..306]
 r221: [302..303]
 r222: [293..294]
 r223: [289..291]
 r224: [289..290]
 r225: [70..71]
 r226: [63..65]
 r227: [63..64]
 r228: [61..62]
 r229: [58..59]
 r230: [49..50]
 r231: [42..43]
 r232: [35..36]
 r233: [26..33]
 r234: [31..32]
 r236: [94..97]
 r237: [94..95]
 r238: [45..46]
Compressing live ranges: from 333 to 254 - 76%
Ranges after the compression:
 r59: [12..13] [2..3]
 r60: [132..141]
 r61: [138..139]
 r62: [136..137]
 r63: [134..135]
 r64: [132..133]
 r65: [130..131]
 r66: [124..129]
 r67: [126..127]
 r68: [124..125]
 r69: [112..123]
 r70: [116..121]
 r71: [118..119]
 r72: [116..117]
 r73: [114..115]
 r74: [112..113]
 r75: [106..107]
 r76: [104..105]
 r77: [102..103]
 r78: [98..99]
 r79: [92..93]
 r80: [90..91]
 r81: [202..203]
 r82: [200..201]
 r83: [198..199]
 r84: [196..197]
 r85: [196..197]
 r86: [194..195]
 r87: [192..193]
 r88: [182..189]
 r89: [186..187]
 r90: [184..185]
 r91: [182..183]
 r92: [180..181]
 r93: [174..179]
 r94: [176..177]
 r95: [174..175]
 r96: [162..173]
 r97: [166..171]
 r98: [168..169]
 r99: [166..167]
 r100: [164..165]
 r101: [162..163]
 r102: [84..85]
 r103: [82..83]
 r104: [76..81]
 r105: [76..81]
 r106: [80..81]
 r107: [76..79]
 r108: [76..77]
 r109: [70..75]
 r110: [74..75]
 r111: [70..73]
 r112: [70..71]
 r113: [64..69]
 r114: [62..63]
 r115: [4..9]
 r116: [4..9]
 r117: [8..9]
 r118: [4..7]
 r119: [4..5]
 r120: [50..59]
 r121: [52..57]
 r122: [54..55]
 r123: [52..53]
 r124: [50..51]
 r125: [48..49]
 r126: [42..43]
 r127: [40..41]
 r128: [246..251]
 r129: [248..249]
 r130: [246..247]
 r131: [232..245]
 r132: [236..243]
 r133: [240..241]
 r134: [238..239]
 r135: [236..237]
 r136: [234..235]
 r137: [232..233]
 r138: [222..229]
 r139: [226..227]
 r140: [224..225]
 r141: [222..223]
 r142: [206..221]
 r143: [210..219]
 r144: [216..217]
 r145: [214..215]
 r146: [212..213]
 r147: [210..211]
 r148: [208..209]
 r149: [206..207]
 r150: [30..35]
 r151: [32..33]
 r152: [30..31]
 r153: [28..29]
 r154: [28..29]
 r155: [24..25]
 r156: [20..21]
 r157: [14..19]
 r158: [14..19]
 r159: [18..19]
 r160: [14..17]
 r161: [14..15]
 r162: [0..1]
 r163: [156..157]
 r164: [158..159]
 r165: [156..159]
 r166: [154..155]
 r167: [152..153]
 r168: [150..151]
 r169: [148..149]
 r170: [146..147]
 r171: [144..145]
 r172: [142..143]
 r173: [140..141]
 r174: [128..129]
 r175: [122..123]
 r176: [120..121]
 r177: [110..111]
 r178: [108..109]
 r179: [102..103]
 r180: [100..101]
 r181: [96..97]
 r182: [204..205]
 r183: [202..203]
 r184: [194..195]
 r185: [190..191]
 r186: [188..189]
 r187: [178..179]
 r188: [172..173]
 r189: [170..171]
 r190: [160..161]
 r191: [94..95]
 r192: [88..89]
 r193: [88..89]
 r194: [86..87]
 r195: [84..85]
 r196: [82..83]
 r197: [78..79]
 r198: [76..77]
 r199: [76..77]
 r200: [72..73]
 r201: [70..71]
 r202: [70..71]
 r203: [68..69]
 r204: [64..69]
 r205: [66..69]
 r206: [10..11]
 r207: [10..11]
 r208: [6..7]
 r209: [4..5]
 r210: [4..5]
 r211: [60..61]
 r212: [58..59]
 r213: [56..57]
 r214: [46..47]
 r215: [252..253]
 r216: [250..251]
 r217: [244..245]
 r218: [242..243]
 r219: [242..243]
 r220: [230..231]
 r221: [228..229]
 r222: [220..221]
 r223: [218..219]
 r224: [218..219]
 r225: [44..45]
 r226: [38..39]
 r227: [38..39]
 r228: [36..37]
 r229: [34..35]
 r230: [26..27]
 r231: [20..21]
 r232: [16..17]
 r233: [14..15]
 r234: [14..15]
 r236: [64..67]
 r237: [64..65]
 r238: [22..23]
	 Assigning to 236 (cl=DIREG, orig=203, freq=2, tfirst=236, tfreq=2)...
	   Assign 5 to reload r236 (freq=2)
	 Assigning to 237 (cl=CREG, orig=205, freq=2, tfirst=237, tfreq=2)...
	   Assign 2 to reload r237 (freq=2)
	 Assigning to 238 (cl=GENERAL_REGS, orig=156, freq=3, tfirst=238, tfreq=3)...
	   Assign 0 to reload r238 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 75	 82
Changing spilled pseudos to memory in insn #52
Changing spilled pseudos to memory in insn #53
Changing spilled pseudos to memory in insn #82
Changing spilled pseudos to memory in insn #83

********** Local #3: **********

Reusing alternative 0 for insn #83
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #82
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 82:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #53
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #52
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 52:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=480, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=448, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 315
changing reg in insn 206
changing reg in insn 63
changing reg in insn 320
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 38
changing reg in insn 46
changing reg in insn 40
changing reg in insn 44
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 69
changing reg in insn 70
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 108
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 116
changing reg in insn 124
changing reg in insn 118
changing reg in insn 122
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 158
changing reg in insn 150
changing reg in insn 159
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 160
changing reg in insn 154
changing reg in insn 161
changing reg in insn 164
changing reg in insn 171
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 174
changing reg in insn 168
changing reg in insn 175
changing reg in insn 177
changing reg in insn 182
changing reg in insn 184
changing reg in insn 185
changing reg in insn 191
changing reg in insn 200
changing reg in insn 192
changing reg in insn 201
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 202
changing reg in insn 196
changing reg in insn 203
changing reg in insn 212
changing reg in insn 219
changing reg in insn 214
changing reg in insn 218
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 222
changing reg in insn 350
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 234
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 248
changing reg in insn 240
changing reg in insn 246
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 257
changing reg in insn 262
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 273
changing reg in insn 264
changing reg in insn 271
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 288
changing reg in insn 292
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 294
changing reg in insn 293
changing reg in insn 294
changing reg in insn 296
changing reg in insn 299
changing reg in insn 300
changing reg in insn 309
changing reg in insn 301
changing reg in insn 310
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 311
changing reg in insn 305
changing reg in insn 312
changing reg in insn 320
changing reg in insn 324
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 56
changing reg in insn 57
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 88
changing reg in insn 89
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 131
changing reg in insn 137
changing reg in insn 139
changing reg in insn 138
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 162
changing reg in insn 156
changing reg in insn 157
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 170
changing reg in insn 173
changing reg in insn 178
changing reg in insn 181
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 180
changing reg in insn 188
changing reg in insn 190
changing reg in insn 189
changing reg in insn 190
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 204
changing reg in insn 198
changing reg in insn 199
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 224
changing reg in insn 225
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 259
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 277
changing reg in insn 278
changing reg in insn 284
changing reg in insn 286
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 295
changing reg in insn 296
changing reg in insn 298
changing reg in insn 299
changing reg in insn 304
changing reg in insn 305
changing reg in insn 306
changing reg in insn 313
changing reg in insn 307
changing reg in insn 308
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 176.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 205.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 314.


_direct

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={97d,86u} r1={62d,52u,1e} r2={27d,18u} r3={3d,3u} r4={34d,24u} r5={27d,17u} r6={1d,127u} r7={1d,49u} r8={22d,15u} r9={16d,6u} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={62d,7u} r18={10d} r19={10d} r20={1d,1u,10e} r21={11d,2u} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={16d,6u} r38={14d,3u} r39={13d,3u} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} 
;;    total ref usage 1164{734d,419u,11e} in 280{270 regular + 10 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:739 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mABM.c:739 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 N_f+0 S4 A32])
        (reg:SI 1 dx [ N_f ])) mABM.c:739 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N_f ])
        (nil)))
(insn 5 4 6 2 (set (reg:SI 0 ax [164])
        (reg:SI 2 cx [ sh ])) mABM.c:739 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ sh ])
        (nil)))
(insn 6 5 7 2 (set (reg:DI 2 cx [165])
        (reg:DI 37 r8 [ sh+8 ])) mABM.c:739 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ sh+8 ])
        (nil)))
(insn 7 6 8 2 (set (reg:TI 0 ax [163])
        (reg:TI 0 ax [164])) mABM.c:739 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [164])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [165])) mABM.c:739 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [165])
        (nil)))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [163])) mABM.c:739 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [163])
        (nil)))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (reg:XF 0 ax [166])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:741 131 {*movxf_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 diff+0 S16 A128])
        (reg:XF 0 ax [166])) mABM.c:741 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [166])
        (nil)))
(insn 15 14 16 2 (set (reg:XF 0 ax [167])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:741 131 {*movxf_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 diff+16 S16 A128])
        (reg:XF 0 ax [167])) mABM.c:741 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [167])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:742 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:742 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [168])
        (nil)))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])
        (reg:SI 0 ax [169])) mABM.c:742 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [169])
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:743 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [171])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [170])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:743 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [170])
        (nil)))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
        (reg:SI 0 ax [171])) mABM.c:743 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [171])
        (nil)))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (reg/f:DI 1 dx [orig:60 D.7223 ] [60])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [172])
                (const_int 8 [0x8])) [0 f_7(D)->nvp+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [172])
        (nil)))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:61 D.7222 ] [61])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [173])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:745 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [173])
        (nil)))
(insn 27 26 28 2 (set (reg:DI 0 ax [orig:62 D.7224 ] [62])
        (sign_extend:DI (reg:SI 0 ax [orig:61 D.7222 ] [61]))) mABM.c:745 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.7222 ] [61])
        (nil)))
(insn 28 27 29 2 (parallel [
            (set (reg:DI 0 ax [orig:63 D.7224 ] [63])
                (plus:DI (reg:DI 0 ax [orig:62 D.7224 ] [62])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:745 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.7224 ] [62])
        (nil)))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [orig:64 D.7224 ] [64])
                (ashift:DI (reg:DI 0 ax [orig:63 D.7224 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:745 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.7224 ] [63])
        (nil)))
(insn 30 29 31 2 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.7223 ] [65])
                (plus:DI (reg:DI 0 ax [orig:64 D.7224 ] [64])
                    (reg/f:DI 1 dx [orig:60 D.7223 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:745 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.7224 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:60 D.7223 ] [60])
            (nil))))
(insn 31 30 32 2 (set (reg/f:DI 1 dx [orig:66 D.7225 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.7223 ] [65]) [0 *_15+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.7223 ] [65])
        (nil)))
(insn 32 31 33 2 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [orig:67 D.7223 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [174])
                (const_int 32 [0x20])) [0 f_7(D)->pos+0 S8 A128])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [174])
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [orig:68 D.7225 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [orig:67 D.7223 ] [67]) [0 *_17+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7223 ] [67])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:66 D.7225 ] [66])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:66 D.7225 ] [66])
        (nil)))
(insn 36 35 37 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:68 D.7225 ] [68])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7225 ] [68])
        (nil)))
(call_insn 37 36 38 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:745 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 38 37 39 2 (set (reg:XF 8 st [orig:69 D.7226 ] [69])
        (reg:XF 8 st)) mABM.c:745 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 39 38 40 2 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 0 ax [orig:70 D.7225 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [175])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:745 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [175])
        (nil)))
(insn 41 40 42 2 (set (reg:SI 1 dx [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) mABM.c:745 89 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 1 dx [orig:71 D.7227 ] [71])
        (sign_extend:DI (reg:SI 1 dx [176]))) mABM.c:745 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [176])
        (nil)))
(insn 43 42 44 2 (parallel [
            (set (reg:DI 1 dx [orig:72 D.7227 ] [72])
                (ashift:DI (reg:DI 1 dx [orig:71 D.7227 ] [71])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:745 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.7227 ] [71])
        (nil)))
(insn 44 43 45 2 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.7225 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 D.7225 ] [70])
                    (reg:DI 1 dx [orig:72 D.7227 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:745 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.7227 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.7225 ] [70])
            (nil))))
(insn 45 44 46 2 (set (reg:XF 9 st(1) [orig:74 D.7226 ] [74])
        (mem:XF (reg/f:DI 0 ax [orig:73 D.7225 ] [73]) [0 *_23+0 S16 A128])) mABM.c:745 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.7225 ] [73])
        (nil)))
(insn 46 45 47 2 (set (reg:XF 8 st [177])
        (div:XF (reg:XF 8 st [orig:69 D.7226 ] [69])
            (reg:XF 9 st(1) [orig:74 D.7226 ] [74]))) mABM.c:745 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.7226 ] [74])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.7226 ] [69])
            (nil))))
(insn 47 46 48 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t+0 S16 A128])
        (reg:XF 8 st [177])) mABM.c:745 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [177])
        (nil)))
(insn 48 47 49 2 (set (reg:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:747 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) mABM.c:747 89 {*movsi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [178])) mABM.c:747 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [178])
        (nil)))
(call_insn 51 50 52 2 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("_calculate_optimum_direct") [flags 0x3]  <function_decl 0x7f05a574e000 _calculate_optimum_direct>) [0 _calculate_optimum_direct S1 A8])
            (const_int 0 [0]))) mABM.c:747 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 52 51 53 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-152 S8 A64])
        (reg:DF 21 xmm0)) mABM.c:747 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 53 52 54 2 (set (reg:XF 8 st [orig:76 D.7226 ] [76])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -152 [0xffffffffffffff68])) [0 %sfp+-152 S8 A64]))) mABM.c:747 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 75 [ D.7228 ])
        (nil)))
(insn 54 53 55 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 diff+0 S16 A128])
        (reg:XF 8 st [orig:76 D.7226 ] [76])) mABM.c:747 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.7226 ] [76])
        (nil)))
(insn 55 54 56 2 (set (reg:XF 8 st [orig:77 D.7226 ] [77])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 diff+0 S16 A128])) mABM.c:748 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (reg:XF 9 st(1) [179])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC33") [flags 0x2]) [0  S16 A128])) mABM.c:748 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 57 56 58 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [179])
            (reg:XF 8 st [orig:77 D.7226 ] [77]))) mABM.c:748 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [179])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.7226 ] [77])
            (nil))))
(jump_insn 58 57 62 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) mABM.c:748 612 {*jcc_1}
     (nil)
 -> 336)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 62 58 63 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 337 3 (set (reg:SI 0 ax [orig:59 D.7222 ] [59])
        (const_int 0 [0])) mABM.c:748 89 {*movsi_internal}
     (nil))
(jump_insn 337 63 338 3 (set (pc)
        (label_ref 318)) mABM.c:748 650 {jump}
     (nil)
 -> 318)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 338 337 336)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 78 180 181
(code_label 336 338 67 4 317 "" [1 uses])
(note 67 336 68 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 4 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:752 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 4 (set (reg:SI 0 ax [orig:78 D.7222 ] [78])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:752 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [180])
        (nil)))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [181])
                (plus:SI (reg:SI 0 ax [orig:78 D.7222 ] [78])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:752 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:78 D.7222 ] [78])
        (nil)))
(insn 71 70 72 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
        (reg:SI 0 ax [181])) mABM.c:752 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [181])
        (nil)))
(insn 72 71 339 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:752 89 {*movsi_internal}
     (nil))
(jump_insn 339 72 340 4 (set (pc)
        (label_ref 128)) mABM.c:752 650 {jump}
     (nil)
 -> 128)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 340 339 136)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 182 183 184
(code_label 136 340 75 5 308 "" [1 uses])
(note 75 136 76 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 5 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])) mABM.c:753 89 {*movsi_internal}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg:SI 1 dx [orig:81 D.7222 ] [81])
                (plus:SI (reg:SI 0 ax [182])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:753 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [182])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 h+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 78 77 79 5 (set (reg:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:753 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 5 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:81 D.7222 ] [81])) mABM.c:753 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:81 D.7222 ] [81])
        (nil)))
(insn 80 79 81 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [183])) mABM.c:753 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [183])
        (nil)))
(call_insn 81 80 82 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("_calculate_optimum_direct") [flags 0x3]  <function_decl 0x7f05a574e000 _calculate_optimum_direct>) [0 _calculate_optimum_direct S1 A8])
            (const_int 0 [0]))) mABM.c:753 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 82 81 83 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-152 S8 A64])
        (reg:DF 21 xmm0)) mABM.c:753 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 83 82 84 5 (set (reg:XF 8 st [orig:83 D.7226 ] [83])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -152 [0xffffffffffffff68])) [0 %sfp+-152 S8 A64]))) mABM.c:753 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 82 [ D.7228 ])
        (nil)))
(insn 84 83 85 5 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 diff+16 S16 A128])
        (reg:XF 8 st [orig:83 D.7226 ] [83])) mABM.c:753 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.7226 ] [83])
        (nil)))
(insn 85 84 86 5 (set (reg:XF 9 st(1) [orig:84 D.7226 ] [84])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 diff+16 S16 A128])) mABM.c:754 131 {*movxf_internal_rex64}
     (nil))
(insn 86 85 87 5 (set (reg:XF 8 st [orig:85 D.7226 ] [85])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 diff+0 S16 A128])) mABM.c:754 131 {*movxf_internal_rex64}
     (nil))
(insn 87 86 88 5 (set (reg:XF 8 st [orig:86 D.7226 ] [86])
        (minus:XF (reg:XF 9 st(1) [orig:84 D.7226 ] [84])
            (reg:XF 8 st [orig:85 D.7226 ] [85]))) mABM.c:754 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.7226 ] [85])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:84 D.7226 ] [84])
            (nil))))
(insn 88 87 89 5 (set (reg:XF 9 st(1) [184])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC33") [flags 0x2]) [0  S16 A128])) mABM.c:754 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 89 88 90 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [184])
            (reg:XF 8 st [orig:86 D.7226 ] [86]))) mABM.c:754 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [184])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.7226 ] [86])
            (nil))))
(jump_insn 90 89 94 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 341)
            (pc))) mABM.c:754 612 {*jcc_1}
     (nil)
 -> 341)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 94 90 95 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 342 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:756 273 {*addsi_1}
     (nil))
(jump_insn 342 95 343 6 (set (pc)
        (label_ref 141)) mABM.c:757 650 {jump}
     (nil)
 -> 141)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 343 342 341)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 185 186 187 188 189 190
(code_label 341 343 99 7 318 "" [1 uses])
(note 99 341 100 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 7 (set (reg:XF 0 ax [orig:87 D.7226 ] [87])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 diff+16 S16 A128])) mABM.c:760 131 {*movxf_internal_rex64}
     (nil))
(insn 101 100 102 7 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 diff+0 S16 A128])
        (reg:XF 0 ax [orig:87 D.7226 ] [87])) mABM.c:760 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:87 D.7226 ] [87])
        (nil)))
(insn 102 101 103 7 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 7 (set (reg/f:DI 0 ax [orig:88 D.7223 ] [88])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 8 [0x8])) [0 f_7(D)->nvp+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [185])
        (nil)))
(insn 104 103 105 7 (set (reg:SI 1 dx [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) mABM.c:761 89 {*movsi_internal}
     (nil))
(insn 105 104 106 7 (set (reg:DI 1 dx [orig:89 D.7224 ] [89])
        (sign_extend:DI (reg:SI 1 dx [186]))) mABM.c:761 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [186])
        (nil)))
(insn 106 105 107 7 (parallel [
            (set (reg:DI 1 dx [orig:90 D.7224 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 D.7224 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:761 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.7224 ] [89])
        (nil)))
(insn 107 106 108 7 (parallel [
            (set (reg:DI 1 dx [orig:91 D.7224 ] [91])
                (ashift:DI (reg:DI 1 dx [orig:90 D.7224 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:761 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.7224 ] [90])
        (nil)))
(insn 108 107 109 7 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.7223 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:88 D.7223 ] [88])
                    (reg:DI 1 dx [orig:91 D.7224 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:761 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:91 D.7224 ] [91])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.7223 ] [88])
            (nil))))
(insn 109 108 110 7 (set (reg/f:DI 1 dx [orig:93 D.7225 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 D.7223 ] [92]) [0 *_47+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.7223 ] [92])
        (nil)))
(insn 110 109 111 7 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 7 (set (reg/f:DI 0 ax [orig:94 D.7223 ] [94])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 32 [0x20])) [0 f_7(D)->pos+0 S8 A128])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [187])
        (nil)))
(insn 112 111 113 7 (set (reg/f:DI 0 ax [orig:95 D.7225 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.7223 ] [94]) [0 *_49+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.7223 ] [94])
        (nil)))
(insn 113 112 114 7 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:93 D.7225 ] [93])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:93 D.7225 ] [93])
        (nil)))
(insn 114 113 115 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 D.7225 ] [95])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.7225 ] [95])
        (nil)))
(call_insn 115 114 116 7 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f05a5959a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mABM.c:761 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 116 115 117 7 (set (reg:XF 8 st [orig:96 D.7226 ] [96])
        (reg:XF 8 st)) mABM.c:761 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 117 116 118 7 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 7 (set (reg/f:DI 0 ax [orig:97 D.7225 ] [97])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [188])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:761 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [188])
        (nil)))
(insn 119 118 120 7 (set (reg:SI 1 dx [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) mABM.c:761 89 {*movsi_internal}
     (nil))
(insn 120 119 121 7 (set (reg:DI 1 dx [orig:98 D.7227 ] [98])
        (sign_extend:DI (reg:SI 1 dx [189]))) mABM.c:761 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [189])
        (nil)))
(insn 121 120 122 7 (parallel [
            (set (reg:DI 1 dx [orig:99 D.7227 ] [99])
                (ashift:DI (reg:DI 1 dx [orig:98 D.7227 ] [98])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:761 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:98 D.7227 ] [98])
        (nil)))
(insn 122 121 123 7 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.7225 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:97 D.7225 ] [97])
                    (reg:DI 1 dx [orig:99 D.7227 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:761 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:99 D.7227 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7225 ] [97])
            (nil))))
(insn 123 122 124 7 (set (reg:XF 9 st(1) [orig:101 D.7226 ] [101])
        (mem:XF (reg/f:DI 0 ax [orig:100 D.7225 ] [100]) [0 *_55+0 S16 A128])) mABM.c:761 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.7225 ] [100])
        (nil)))
(insn 124 123 125 7 (set (reg:XF 8 st [190])
        (div:XF (reg:XF 8 st [orig:96 D.7226 ] [96])
            (reg:XF 9 st(1) [orig:101 D.7226 ] [101]))) mABM.c:761 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:101 D.7226 ] [101])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:96 D.7226 ] [96])
            (nil))))
(insn 125 124 126 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t+0 S16 A128])
        (reg:XF 8 st [190])) mABM.c:761 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [190])
        (nil)))
(insn 126 125 127 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:752 273 {*addsi_1}
     (nil))
(insn 127 126 128 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:752 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 191
(code_label 128 127 129 8 304 "" [1 uses])
(note 129 128 130 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 8 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:752 87 {*movdi_internal_rex64}
     (nil))
(insn 131 130 132 8 (set (reg:SI 0 ax [orig:79 D.7222 ] [79])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [191])
                (const_int 4 [0x4])) [0 f_7(D)->n_nvp+0 S4 A32])) mABM.c:752 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [191])
        (nil)))
(insn 132 131 133 8 (parallel [
            (set (reg:SI 0 ax [orig:80 D.7222 ] [80])
                (plus:SI (reg:SI 0 ax [orig:79 D.7222 ] [79])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:752 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:79 D.7222 ] [79])
        (nil)))
(insn 133 132 134 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:80 D.7222 ] [80])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32]))) mABM.c:752 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:80 D.7222 ] [80])
        (nil)))
(jump_insn 134 133 135 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 141)
            (pc))) mABM.c:752 612 {*jcc_1}
     (nil)
 -> 141)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192 193
(note 135 134 137 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 137 135 138 9 (set (reg:XF 9 st(1) [192])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) mABM.c:752 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+3 [0x0.96p+11])
        (nil)))
(insn 138 137 139 9 (set (reg:XF 8 st [193])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t+0 S16 A128])) mABM.c:752 131 {*movxf_internal_rex64}
     (nil))
(insn 139 138 140 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [192])
            (reg:XF 8 st [193]))) mABM.c:752 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [193])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [192])
            (nil))))
(jump_insn 140 139 141 9 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) mABM.c:752 612 {*jcc_1}
     (nil)
 -> 136)
;;  succ:       5
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;;              6 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 102 103 104 105 106 107 108 109 110 111 112 113 114 194 195 196 197 198 199 200 201 202 203 204 205
(code_label 141 140 142 10 307 "" [2 uses])
(note 142 141 143 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 10 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:765 87 {*movdi_internal_rex64}
     (nil))
(insn 144 143 145 10 (set (reg:SI 1 dx [orig:102 D.7222 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [194])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])) mABM.c:765 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [194])
        (nil)))
(insn 145 144 146 10 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])) mABM.c:765 89 {*movsi_internal}
     (nil))
(insn 146 145 147 10 (parallel [
            (set (reg:SI 1 dx [orig:103 D.7222 ] [103])
                (plus:SI (reg:SI 1 dx [orig:102 D.7222 ] [102])
                    (reg:SI 0 ax [195])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:765 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [195])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:102 D.7222 ] [102])
            (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:102 D.7222 ] [102])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 h+0 S4 A32]))
                (nil)))))
(insn 147 146 148 10 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:765 87 {*movdi_internal_rex64}
     (nil))
(insn 148 147 149 10 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [196])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])
        (reg:SI 1 dx [orig:103 D.7222 ] [103])) mABM.c:765 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [196])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:103 D.7222 ] [103])
            (nil))))
(insn 149 148 150 10 (set (reg:XF 2 cx [orig:104 D.7226 ] [104])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:766 131 {*movxf_internal_rex64}
     (nil))
(insn 150 149 151 10 (set (reg:XF 0 ax [orig:105 D.7226 ] [105])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:766 131 {*movxf_internal_rex64}
     (nil))
(insn 151 150 152 10 (set (reg:SI 4 si [orig:106 D.7222 ] [106])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:766 89 {*movsi_internal}
     (nil))
(insn 152 151 153 10 (parallel [
            (set (reg:SI 39 r10 [orig:107 D.7222 ] [107])
                (ashift:SI (reg:SI 4 si [orig:106 D.7222 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:766 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:106 D.7222 ] [106])
        (nil)))
(insn 153 152 154 10 (set (reg/f:DI 4 si [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:766 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 10 (parallel [
            (set (reg/f:DI 38 r9 [orig:108 D.7229 ] [108])
                (plus:DI (reg/f:DI 4 si [197])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:766 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [197])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 155 154 156 10 (set (reg:DI 37 r8 [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:766 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 10 (set (reg:XF 4 si [199])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:766 131 {*movxf_internal_rex64}
     (nil))
(insn 157 156 158 10 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [199])) mABM.c:766 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [199])
        (nil)))
(insn 158 157 159 10 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:104 D.7226 ] [104])) mABM.c:766 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:104 D.7226 ] [104])
        (nil)))
(insn 159 158 160 10 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:105 D.7226 ] [105])) mABM.c:766 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:105 D.7226 ] [105])
        (nil)))
(insn 160 159 161 10 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:107 D.7222 ] [107])) mABM.c:766 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:107 D.7222 ] [107])
        (nil)))
(insn 161 160 162 10 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:108 D.7229 ] [108])) mABM.c:766 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:108 D.7229 ] [108])
        (nil)))
(insn 162 161 163 10 (set (reg:DI 5 di)
        (reg:DI 37 r8 [198])) mABM.c:766 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [198])
        (nil)))
(call_insn 163 162 164 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:766 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 164 163 165 10 (set (reg/f:DI 5 di [orig:109 D.7225 ] [109])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:767 87 {*movdi_internal_rex64}
     (nil))
(insn 165 164 166 10 (set (reg:SI 0 ax [orig:110 D.7222 ] [110])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:767 89 {*movsi_internal}
     (nil))
(insn 166 165 167 10 (parallel [
            (set (reg:SI 4 si [orig:111 D.7222 ] [111])
                (ashift:SI (reg:SI 0 ax [orig:110 D.7222 ] [110])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:767 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:110 D.7222 ] [110])
        (nil)))
(insn 167 166 168 10 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:767 87 {*movdi_internal_rex64}
     (nil))
(insn 168 167 169 10 (set (reg/f:DI 0 ax [orig:112 D.7223 ] [112])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [200])
                (const_int 32 [0x20])) [0 f_7(D)->pos+0 S8 A128])) mABM.c:767 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [200])
        (nil)))
(insn 169 168 170 10 (set (reg:SI 1 dx [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 sh+0 S4 A64])) mABM.c:767 89 {*movsi_internal}
     (nil))
(insn 170 169 171 10 (set (reg:DI 2 cx [202])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sh+8 S8 A64])) mABM.c:767 87 {*movdi_internal_rex64}
     (nil))
(insn 171 170 172 10 (set (reg:DI 37 r8)
        (reg/f:DI 5 di [orig:109 D.7225 ] [109])) mABM.c:767 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:109 D.7225 ] [109])
        (nil)))
(insn 172 171 173 10 (set (reg:SI 1 dx)
        (reg:SI 1 dx [201])) mABM.c:767 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [201])
        (nil)))
(insn 173 172 174 10 (set (reg:DI 2 cx)
        (reg:DI 2 cx [202])) mABM.c:767 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [202])
        (nil)))
(insn 174 173 175 10 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:111 D.7222 ] [111])) mABM.c:767 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:111 D.7222 ] [111])
        (nil)))
(insn 175 174 176 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:112 D.7223 ] [112])) mABM.c:767 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:112 D.7223 ] [112])
        (nil)))
(call_insn 176 175 177 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_checkShockareaRoute") [flags 0x3]  <function_decl 0x7f05a571f700 _checkShockareaRoute>) [0 _checkShockareaRoute S1 A8])
            (const_int 0 [0]))) mABM.c:767 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 177 176 178 10 (set (reg/f:DI 37 r8 [orig:113 D.7225 ] [113])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl.dist+0 S8 A64])) mABM.c:768 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 10 (set (reg:DI 1 dx [203])
        (reg/f:DI 7 sp)) mABM.c:768 87 {*movdi_internal_rex64}
     (nil))
(insn 179 178 180 10 (set (reg:DI 4 si [204])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:768 267 {*leadi}
     (nil))
(insn 180 179 351 10 (set (reg:DI 0 ax [205])
        (const_int 38 [0x26])) mABM.c:768 87 {*movdi_internal_rex64}
     (nil))
(insn 351 180 352 10 (set (reg:DI 5 di [203])
        (reg:DI 1 dx [203])) mABM.c:768 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [203])
        (nil)))
(insn 352 351 181 10 (set (reg:DI 2 cx [205])
        (reg:DI 0 ax [205])) mABM.c:768 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [205])
        (nil)))
(insn 181 352 182 10 (parallel [
            (set (reg:DI 2 cx [205])
                (const_int 0 [0]))
            (set (reg:DI 5 di [203])
                (plus:DI (ashift:DI (reg:DI 2 cx [205])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [203])))
            (set (reg:DI 4 si [204])
                (plus:DI (ashift:DI (reg:DI 2 cx [205])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [204])))
            (set (mem:BLK (reg:DI 5 di [203]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [204]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [205]))
        ]) mABM.c:768 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [205])
        (expr_list:REG_UNUSED (reg:DI 5 di [203])
            (expr_list:REG_UNUSED (reg:DI 4 si [204])
                (nil)))))
(insn 182 181 183 10 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:113 D.7225 ] [113])) mABM.c:768 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:113 D.7225 ] [113])
        (nil)))
(call_insn 183 182 184 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_check_risk") [flags 0x3]  <function_decl 0x7f05a571f800 _check_risk>) [0 _check_risk S1 A8])
            (const_int 304 [0x130]))) mABM.c:768 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 184 183 185 10 (set (reg:SI 0 ax [orig:114 D.7222 ] [114])
        (reg:SI 0 ax)) mABM.c:768 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 185 184 186 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:114 D.7222 ] [114])
            (const_int 0 [0]))) mABM.c:768 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:114 D.7222 ] [114])
        (nil)))
(jump_insn 186 185 187 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) mABM.c:768 612 {*jcc_1}
     (nil)
 -> 209)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 115 116 117 118 119 206 207 208 209 210
(note 187 186 188 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 11 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:769 87 {*movdi_internal_rex64}
     (nil))
(insn 189 188 190 11 (set (reg:SI 1 dx [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])) mABM.c:769 89 {*movsi_internal}
     (nil))
(insn 190 189 191 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [206])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])
        (reg:SI 1 dx [207])) mABM.c:769 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [207])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [206])
            (nil))))
(insn 191 190 192 11 (set (reg:XF 2 cx [orig:115 D.7226 ] [115])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:770 131 {*movxf_internal_rex64}
     (nil))
(insn 192 191 193 11 (set (reg:XF 0 ax [orig:116 D.7226 ] [116])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:770 131 {*movxf_internal_rex64}
     (nil))
(insn 193 192 194 11 (set (reg:SI 4 si [orig:117 D.7222 ] [117])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:770 89 {*movsi_internal}
     (nil))
(insn 194 193 195 11 (parallel [
            (set (reg:SI 39 r10 [orig:118 D.7222 ] [118])
                (ashift:SI (reg:SI 4 si [orig:117 D.7222 ] [117])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:770 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:117 D.7222 ] [117])
        (nil)))
(insn 195 194 196 11 (set (reg/f:DI 4 si [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:770 87 {*movdi_internal_rex64}
     (nil))
(insn 196 195 197 11 (parallel [
            (set (reg/f:DI 38 r9 [orig:119 D.7229 ] [119])
                (plus:DI (reg/f:DI 4 si [208])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:770 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [208])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 197 196 198 11 (set (reg:DI 37 r8 [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:770 87 {*movdi_internal_rex64}
     (nil))
(insn 198 197 199 11 (set (reg:XF 4 si [210])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:770 131 {*movxf_internal_rex64}
     (nil))
(insn 199 198 200 11 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [210])) mABM.c:770 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [210])
        (nil)))
(insn 200 199 201 11 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:115 D.7226 ] [115])) mABM.c:770 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:115 D.7226 ] [115])
        (nil)))
(insn 201 200 202 11 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:116 D.7226 ] [116])) mABM.c:770 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:116 D.7226 ] [116])
        (nil)))
(insn 202 201 203 11 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:118 D.7222 ] [118])) mABM.c:770 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:118 D.7222 ] [118])
        (nil)))
(insn 203 202 204 11 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:119 D.7229 ] [119])) mABM.c:770 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:119 D.7229 ] [119])
        (nil)))
(insn 204 203 205 11 (set (reg:DI 5 di)
        (reg:DI 37 r8 [209])) mABM.c:770 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [209])
        (nil)))
(call_insn 205 204 206 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:770 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 206 205 344 11 (set (reg:SI 0 ax [orig:59 D.7222 ] [59])
        (const_int 0 [0])) mABM.c:771 89 {*movsi_internal}
     (nil))
(jump_insn 344 206 345 11 (set (pc)
        (label_ref 318)) mABM.c:771 650 {jump}
     (nil)
 -> 318)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 345 344 209)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 120 121 122 123 124 125 211 212 213 214
(code_label 209 345 210 12 309 "" [1 uses])
(note 210 209 211 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 12 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])) mABM.c:775 89 {*movsi_internal}
     (nil))
(insn 212 211 213 12 (parallel [
            (set (reg:SI 1 dx [orig:120 D.7222 ] [120])
                (plus:SI (reg:SI 0 ax [211])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:775 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [211])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 h+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 213 212 214 12 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:775 87 {*movdi_internal_rex64}
     (nil))
(insn 214 213 215 12 (set (reg/f:DI 0 ax [orig:121 D.7225 ] [121])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [212])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:775 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [212])
        (nil)))
(insn 215 214 216 12 (set (reg:SI 2 cx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])) mABM.c:775 89 {*movsi_internal}
     (nil))
(insn 216 215 217 12 (set (reg:DI 2 cx [orig:122 D.7227 ] [122])
        (sign_extend:DI (reg:SI 2 cx [213]))) mABM.c:775 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [213])
        (nil)))
(insn 217 216 218 12 (parallel [
            (set (reg:DI 2 cx [orig:123 D.7227 ] [123])
                (ashift:DI (reg:DI 2 cx [orig:122 D.7227 ] [122])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:775 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:122 D.7227 ] [122])
        (nil)))
(insn 218 217 219 12 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.7225 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:121 D.7225 ] [121])
                    (reg:DI 2 cx [orig:123 D.7227 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:775 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:123 D.7227 ] [123])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:121 D.7225 ] [121])
            (nil))))
(insn 219 218 220 12 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:120 D.7222 ] [120])) mABM.c:775 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:120 D.7222 ] [120])
        (nil)))
(insn 220 219 221 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:124 D.7225 ] [124])) mABM.c:775 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:124 D.7225 ] [124])
        (nil)))
(call_insn 221 220 222 12 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("mean") [flags 0x41]  <function_decl 0x7f05a595ed00 mean>) [0 mean S1 A8])
            (const_int 0 [0]))) mABM.c:775 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 222 221 350 12 (set (reg:XF 8 st [orig:125 D.7226 ] [125])
        (reg:XF 8 st)) mABM.c:775 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 350 222 224 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 newv+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:125 D.7226 ] [125]))) mABM.c:775 174 {*truncxfdf2_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:125 D.7226 ] [125])
        (nil)))
(insn 224 350 225 12 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])) mABM.c:776 89 {*movsi_internal}
     (nil))
(insn 225 224 346 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])
        (reg:SI 0 ax [214])) mABM.c:776 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [214])
        (nil)))
(jump_insn 346 225 347 12 (set (pc)
        (label_ref 275)) mABM.c:776 650 {jump}
     (nil)
 -> 275)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 347 346 280)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 280 347 228 13 313 "" [1 uses])
(note 228 280 229 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 348 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 j+0 S4 A32])
        (const_int 0 [0])) mABM.c:777 89 {*movsi_internal}
     (nil))
(jump_insn 348 229 349 13 (set (pc)
        (label_ref 250)) mABM.c:777 650 {jump}
     (nil)
 -> 250)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 349 348 252)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 215 216 217 218 219
(code_label 252 349 232 14 312 "" [1 uses])
(note 232 252 233 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 14 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:777 87 {*movdi_internal_rex64}
     (nil))
(insn 234 233 235 14 (set (reg/f:DI 0 ax [orig:128 D.7223 ] [128])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [215])
                (const_int 8 [0x8])) [0 f_7(D)->nvp+0 S8 A64])) mABM.c:777 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [215])
        (nil)))
(insn 235 234 236 14 (set (reg:SI 1 dx [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])) mABM.c:777 89 {*movsi_internal}
     (nil))
(insn 236 235 237 14 (set (reg:DI 1 dx [orig:129 D.7227 ] [129])
        (sign_extend:DI (reg:SI 1 dx [216]))) mABM.c:777 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [216])
        (nil)))
(insn 237 236 238 14 (parallel [
            (set (reg:DI 1 dx [orig:130 D.7227 ] [130])
                (ashift:DI (reg:DI 1 dx [orig:129 D.7227 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:129 D.7227 ] [129])
        (nil)))
(insn 238 237 239 14 (parallel [
            (set (reg/f:DI 1 dx [orig:131 D.7223 ] [131])
                (plus:DI (reg:DI 1 dx [orig:130 D.7227 ] [130])
                    (reg/f:DI 0 ax [orig:128 D.7223 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:130 D.7227 ] [130])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:128 D.7223 ] [128])
            (nil))))
(insn 239 238 240 14 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:777 87 {*movdi_internal_rex64}
     (nil))
(insn 240 239 241 14 (set (reg/f:DI 0 ax [orig:132 D.7223 ] [132])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [217])
                (const_int 8 [0x8])) [0 f_7(D)->nvp+0 S8 A64])) mABM.c:777 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [217])
        (nil)))
(insn 241 240 242 14 (set (reg:SI 2 cx [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])) mABM.c:777 89 {*movsi_internal}
     (nil))
(insn 242 241 243 14 (set (reg:SI 4 si [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])) mABM.c:777 89 {*movsi_internal}
     (nil))
(insn 243 242 244 14 (parallel [
            (set (reg:SI 2 cx [orig:133 D.7222 ] [133])
                (plus:SI (reg:SI 2 cx [218])
                    (reg:SI 4 si [219])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 4 si [219])
        (expr_list:REG_DEAD (reg:SI 2 cx [218])
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -68 [0xffffffffffffffbc])) [0 r+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 h+0 S4 A32]))
                (nil)))))
(insn 244 243 245 14 (set (reg:DI 2 cx [orig:134 D.7227 ] [134])
        (sign_extend:DI (reg:SI 2 cx [orig:133 D.7222 ] [133]))) mABM.c:777 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:133 D.7222 ] [133])
        (nil)))
(insn 245 244 246 14 (parallel [
            (set (reg:DI 2 cx [orig:135 D.7227 ] [135])
                (ashift:DI (reg:DI 2 cx [orig:134 D.7227 ] [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:134 D.7227 ] [134])
        (nil)))
(insn 246 245 247 14 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.7223 ] [136])
                (plus:DI (reg/f:DI 0 ax [orig:132 D.7223 ] [132])
                    (reg:DI 2 cx [orig:135 D.7227 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:135 D.7227 ] [135])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:132 D.7223 ] [132])
            (nil))))
(insn 247 246 248 14 (set (reg/f:DI 0 ax [orig:137 D.7225 ] [137])
        (mem/f:DI (reg/f:DI 0 ax [orig:136 D.7223 ] [136]) [0 *_98+0 S8 A64])) mABM.c:777 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:136 D.7223 ] [136])
        (nil)))
(insn 248 247 249 14 (set (mem/f:DI (reg/f:DI 1 dx [orig:131 D.7223 ] [131]) [0 *_93+0 S8 A64])
        (reg/f:DI 0 ax [orig:137 D.7225 ] [137])) mABM.c:777 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:137 D.7225 ] [137])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:131 D.7223 ] [131])
            (nil))))
(insn 249 248 250 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:777 273 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 250 249 251 15 311 "" [1 uses])
(note 251 250 253 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 253 251 254 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 j+0 S4 A32])
            (const_int 3 [0x3]))) mABM.c:777 7 {*cmpsi_1}
     (nil))
(jump_insn 254 253 255 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) mABM.c:777 612 {*jcc_1}
     (nil)
 -> 252)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 143 144 145 146 147 148 149 220 221 222 223 224
(note 255 254 256 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 16 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:778 87 {*movdi_internal_rex64}
     (nil))
(insn 257 256 258 16 (set (reg/f:DI 0 ax [orig:138 D.7225 ] [138])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [220])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:778 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [220])
        (nil)))
(insn 258 257 259 16 (set (reg:SI 1 dx [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])) mABM.c:778 89 {*movsi_internal}
     (nil))
(insn 259 258 260 16 (set (reg:DI 1 dx [orig:139 D.7227 ] [139])
        (sign_extend:DI (reg:SI 1 dx [221]))) mABM.c:778 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [221])
        (nil)))
(insn 260 259 261 16 (parallel [
            (set (reg:DI 1 dx [orig:140 D.7227 ] [140])
                (ashift:DI (reg:DI 1 dx [orig:139 D.7227 ] [139])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:139 D.7227 ] [139])
        (nil)))
(insn 261 260 262 16 (parallel [
            (set (reg:DI 1 dx [orig:141 D.7224 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 D.7227 ] [140])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:140 D.7227 ] [140])
        (nil)))
(insn 262 261 263 16 (parallel [
            (set (reg/f:DI 2 cx [orig:142 D.7225 ] [142])
                (plus:DI (reg/f:DI 0 ax [orig:138 D.7225 ] [138])
                    (reg:DI 1 dx [orig:141 D.7224 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:141 D.7224 ] [141])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:138 D.7225 ] [138])
            (nil))))
(insn 263 262 264 16 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:778 87 {*movdi_internal_rex64}
     (nil))
(insn 264 263 265 16 (set (reg/f:DI 0 ax [orig:143 D.7225 ] [143])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [222])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:778 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [222])
        (nil)))
(insn 265 264 266 16 (set (reg:SI 1 dx [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])) mABM.c:778 89 {*movsi_internal}
     (nil))
(insn 266 265 267 16 (set (reg:SI 4 si [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])) mABM.c:778 89 {*movsi_internal}
     (nil))
(insn 267 266 268 16 (parallel [
            (set (reg:SI 1 dx [orig:144 D.7222 ] [144])
                (plus:SI (reg:SI 1 dx [223])
                    (reg:SI 4 si [224])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 4 si [224])
        (expr_list:REG_DEAD (reg:SI 1 dx [223])
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -68 [0xffffffffffffffbc])) [0 r+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 h+0 S4 A32]))
                (nil)))))
(insn 268 267 269 16 (set (reg:DI 1 dx [orig:145 D.7227 ] [145])
        (sign_extend:DI (reg:SI 1 dx [orig:144 D.7222 ] [144]))) mABM.c:778 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:144 D.7222 ] [144])
        (nil)))
(insn 269 268 270 16 (parallel [
            (set (reg:DI 1 dx [orig:146 D.7227 ] [146])
                (ashift:DI (reg:DI 1 dx [orig:145 D.7227 ] [145])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:145 D.7227 ] [145])
        (nil)))
(insn 270 269 271 16 (parallel [
            (set (reg:DI 1 dx [orig:147 D.7224 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.7227 ] [146])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:146 D.7227 ] [146])
        (nil)))
(insn 271 270 272 16 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.7225 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:143 D.7225 ] [143])
                    (reg:DI 1 dx [orig:147 D.7224 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:778 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:147 D.7224 ] [147])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:143 D.7225 ] [143])
            (nil))))
(insn 272 271 273 16 (set (reg:XF 0 ax [orig:149 D.7226 ] [149])
        (mem:XF (reg/f:DI 0 ax [orig:148 D.7225 ] [148]) [0 *_111+0 S16 A128])) mABM.c:778 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:148 D.7225 ] [148])
        (nil)))
(insn 273 272 274 16 (set (mem:XF (reg/f:DI 2 cx [orig:142 D.7225 ] [142]) [0 *_105+0 S16 A128])
        (reg:XF 0 ax [orig:149 D.7226 ] [149])) mABM.c:778 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:149 D.7226 ] [149])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:142 D.7225 ] [142])
            (nil))))
(insn 274 273 275 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:776 273 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 127 225
(code_label 275 274 276 17 310 "" [1 uses])
(note 276 275 277 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 277 276 278 17 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:776 87 {*movdi_internal_rex64}
     (nil))
(insn 278 277 279 17 (set (reg:SI 0 ax [orig:126 D.7222 ] [126])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [225])
                (const_int 4 [0x4])) [0 f_7(D)->n_nvp+0 S4 A32])) mABM.c:776 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [225])
        (nil)))
(insn 279 278 281 17 (parallel [
            (set (reg:SI 0 ax [orig:127 D.7222 ] [127])
                (minus:SI (reg:SI 0 ax [orig:126 D.7222 ] [126])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:776 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:126 D.7222 ] [126])
        (nil)))
(insn 281 279 282 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:127 D.7222 ] [127])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 r+0 S4 A32]))) mABM.c:776 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:127 D.7222 ] [127])
        (nil)))
(jump_insn 282 281 283 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 280)
            (pc))) mABM.c:776 612 {*jcc_1}
     (nil)
 -> 280)
;;  succ:       13
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 150 151 152 153 154 155 156 157 158 159 160 161 226 227 228 229 230 231 232 233 234
(note 283 282 284 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 18 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:780 87 {*movdi_internal_rex64}
     (nil))
(insn 285 284 286 18 (set (reg:SI 1 dx [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])) mABM.c:780 89 {*movsi_internal}
     (nil))
(insn 286 285 287 18 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [226])
                (const_int 44 [0x2c])) [0 f_7(D)->st_indx+0 S4 A32])
        (reg:SI 1 dx [227])) mABM.c:780 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [227])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [226])
            (nil))))
(insn 287 286 288 18 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:781 87 {*movdi_internal_rex64}
     (nil))
(insn 288 287 289 18 (set (reg/f:DI 0 ax [orig:150 D.7225 ] [150])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [228])
                (const_int 24 [0x18])) [0 f_7(D)->vel+0 S8 A64])) mABM.c:781 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [228])
        (nil)))
(insn 289 288 290 18 (set (reg:SI 1 dx [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 old_st_indx+0 S4 A32])) mABM.c:781 89 {*movsi_internal}
     (nil))
(insn 290 289 291 18 (set (reg:DI 1 dx [orig:151 D.7227 ] [151])
        (sign_extend:DI (reg:SI 1 dx [229]))) mABM.c:781 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [229])
        (nil)))
(insn 291 290 292 18 (parallel [
            (set (reg:DI 1 dx [orig:152 D.7227 ] [152])
                (ashift:DI (reg:DI 1 dx [orig:151 D.7227 ] [151])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:781 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:151 D.7227 ] [151])
        (nil)))
(insn 292 291 293 18 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.7225 ] [153])
                (plus:DI (reg/f:DI 0 ax [orig:150 D.7225 ] [150])
                    (reg:DI 1 dx [orig:152 D.7227 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:781 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:152 D.7227 ] [152])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:150 D.7225 ] [150])
            (nil))))
(insn 293 292 294 18 (set (reg:XF 8 st [orig:154 D.7226 ] [154])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 newv+0 S8 A64]))) mABM.c:781 162 {*extenddfxf2_i387}
     (nil))
(insn 294 293 295 18 (set (mem:XF (reg/f:DI 0 ax [orig:153 D.7225 ] [153]) [0 *_117+0 S16 A128])
        (reg:XF 8 st [orig:154 D.7226 ] [154])) mABM.c:781 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:154 D.7226 ] [154])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.7225 ] [153])
            (nil))))
(insn 295 294 296 18 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:782 87 {*movdi_internal_rex64}
     (nil))
(insn 296 295 353 18 (set (reg:SI 0 ax [orig:155 D.7222 ] [155])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [230])
                (const_int 4 [0x4])) [0 f_7(D)->n_nvp+0 S4 A32])) mABM.c:782 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [230])
        (nil)))
(insn 353 296 297 18 (set (reg:SI 0 ax [orig:156 D.7222 ] [156])
        (reg:SI 0 ax [orig:155 D.7222 ] [155])) mABM.c:782 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:155 D.7222 ] [155])
        (nil)))
(insn 297 353 354 18 (parallel [
            (set (reg:SI 0 ax [orig:156 D.7222 ] [156])
                (minus:SI (reg:SI 0 ax [orig:156 D.7222 ] [156])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 h+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:782 309 {*subsi_1}
     (nil))
(insn 354 297 298 18 (set (reg:SI 1 dx [orig:156 D.7222 ] [156])
        (reg:SI 0 ax [orig:156 D.7222 ] [156])) mABM.c:782 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:156 D.7222 ] [156])
        (nil)))
(insn 298 354 299 18 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:782 87 {*movdi_internal_rex64}
     (nil))
(insn 299 298 300 18 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [231])
                (const_int 4 [0x4])) [0 f_7(D)->n_nvp+0 S4 A32])
        (reg:SI 1 dx [orig:156 D.7222 ] [156])) mABM.c:782 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [231])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:156 D.7222 ] [156])
            (nil))))
(insn 300 299 301 18 (set (reg:XF 2 cx [orig:157 D.7226 ] [157])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:783 131 {*movxf_internal_rex64}
     (nil))
(insn 301 300 302 18 (set (reg:XF 0 ax [orig:158 D.7226 ] [158])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:783 131 {*movxf_internal_rex64}
     (nil))
(insn 302 301 303 18 (set (reg:SI 4 si [orig:159 D.7222 ] [159])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:783 89 {*movsi_internal}
     (nil))
(insn 303 302 304 18 (parallel [
            (set (reg:SI 39 r10 [orig:160 D.7222 ] [160])
                (ashift:SI (reg:SI 4 si [orig:159 D.7222 ] [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:783 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:159 D.7222 ] [159])
        (nil)))
(insn 304 303 305 18 (set (reg/f:DI 4 si [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:783 87 {*movdi_internal_rex64}
     (nil))
(insn 305 304 306 18 (parallel [
            (set (reg/f:DI 38 r9 [orig:161 D.7229 ] [161])
                (plus:DI (reg/f:DI 4 si [232])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:783 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 4 si [232])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 306 305 307 18 (set (reg:DI 37 r8 [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 f+0 S8 A64])) mABM.c:783 87 {*movdi_internal_rex64}
     (nil))
(insn 307 306 308 18 (set (reg:XF 4 si [234])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:783 131 {*movxf_internal_rex64}
     (nil))
(insn 308 307 309 18 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 4 si [234])) mABM.c:783 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [234])
        (nil)))
(insn 309 308 310 18 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:157 D.7226 ] [157])) mABM.c:783 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:157 D.7226 ] [157])
        (nil)))
(insn 310 309 311 18 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:158 D.7226 ] [158])) mABM.c:783 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:158 D.7226 ] [158])
        (nil)))
(insn 311 310 312 18 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [orig:160 D.7222 ] [160])) mABM.c:783 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:160 D.7222 ] [160])
        (nil)))
(insn 312 311 313 18 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:161 D.7229 ] [161])) mABM.c:783 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:161 D.7229 ] [161])
        (nil)))
(insn 313 312 314 18 (set (reg:DI 5 di)
        (reg:DI 37 r8 [233])) mABM.c:783 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [233])
        (nil)))
(call_insn 314 313 315 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:783 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 315 314 318 18 (set (reg:SI 0 ax [orig:59 D.7222 ] [59])
        (const_int 1 [0x1])) mABM.c:788 89 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              3 [100.0%] 
;;              11 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 162
(code_label 318 315 319 19 314 "" [2 uses])
(note 319 318 320 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 324 19 (set (reg:SI 0 ax [orig:162 <retval> ] [162])
        (reg:SI 0 ax [orig:59 D.7222 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7222 ] [59])
        (nil)))
(insn 324 320 327 19 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:162 <retval> ] [162])) mABM.c:789 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:162 <retval> ] [162])
        (nil)))
(insn 327 324 0 19 (use (reg/i:SI 0 ax)) mABM.c:789 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _check_safe_events (_check_safe_events, funcdef_no=35, decl_uid=4524, cgraph_uid=35)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=432, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=400, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 89:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=224 from oldreg=142, assigning class DIREG to r224
      Creating newreg=225 from oldreg=144, assigning class CREG to r225
   89: {r225:DI=0;r224:DI=r225:DI<<0x3+r224:DI;r143:DI=r225:DI<<0x3+r143:DI;[r224:DI]=[r143:DI];use r225:DI;}
      REG_UNUSED r144:DI
      REG_UNUSED r143:DI
      REG_UNUSED r142:DI
    Inserting insn reload before:
  332: r224:DI=r142:DI
  333: r225:DI=r144:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) ?mr {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 110:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 112:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=226 from oldreg=150, assigning class DIREG to r226
      Creating newreg=227 from oldreg=152, assigning class CREG to r227
  112: {r227:DI=0;r226:DI=r227:DI<<0x3+r226:DI;r151:DI=r227:DI<<0x3+r151:DI;[r226:DI]=[r151:DI];use r227:DI;}
      REG_UNUSED r152:DI
      REG_UNUSED r151:DI
      REG_UNUSED r150:DI
    Inserting insn reload before:
  334: r226:DI=r150:DI
  335: r227:DI=r152:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 150:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=228 from oldreg=169, assigning class DIREG to r228
      Creating newreg=229 from oldreg=171, assigning class CREG to r229
  150: {r229:DI=0;r228:DI=r229:DI<<0x3+r228:DI;r170:DI=r229:DI<<0x3+r170:DI;[r228:DI]=[r170:DI];use r229:DI;}
      REG_UNUSED r171:DI
      REG_UNUSED r170:DI
      REG_UNUSED r169:DI
    Inserting insn reload before:
  336: r228:DI=r169:DI
  337: r229:DI=r171:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) ?mr {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 193:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=230 from oldreg=187, assigning class DIREG to r230
      Creating newreg=231 from oldreg=189, assigning class CREG to r231
  193: {r231:DI=0;r230:DI=r231:DI<<0x3+r230:DI;r188:DI=r231:DI<<0x3+r188:DI;[r230:DI]=[r188:DI];use r231:DI;}
      REG_UNUSED r189:DI
      REG_UNUSED r188:DI
      REG_UNUSED r187:DI
    Inserting insn reload before:
  338: r230:DI=r187:DI
  339: r231:DI=r189:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 209:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 211:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 259
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) rm  (1) re {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 265:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 281:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 295:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=232 from oldreg=219, assigning class DIREG to r232
      Creating newreg=233 from oldreg=221, assigning class CREG to r233
  295: {r233:DI=0;r232:DI=r233:DI<<0x3+r232:DI;r220:DI=r233:DI<<0x3+r220:DI;[r232:DI]=[r220:DI];use r233:DI;}
      REG_UNUSED r221:DI
      REG_UNUSED r220:DI
      REG_UNUSED r219:DI
    Inserting insn reload before:
  340: r232:DI=r219:DI
  341: r233:DI=r221:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 304:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 322: point = 0
   Insn 319: point = 0
   Insn 315: point = 1
   Insn 312: point = 3
  BB 12
   Insn 310: point = 4
   Insn 309: point = 4
   Insn 308: point = 5
  BB 2
   Insn 328: point = 6
   Insn 12: point = 6
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 6: point = 8
   Insn 5: point = 10
   Insn 4: point = 11
   Insn 3: point = 12
   Insn 2: point = 12
  BB 11
   Insn 304: point = 12
  BB 6
   Insn 330: point = 12
   Insn 201: point = 12
   Insn 200: point = 13
   Insn 199: point = 14
   Insn 198: point = 14
   Insn 197: point = 15
   Insn 196: point = 16
   Insn 195: point = 17
   Insn 194: point = 18
   Insn 193: point = 19
   Insn 339: point = 20
	Hard reg 0 is preferable by r231 with profit 1
   Insn 338: point = 22
	Hard reg 1 is preferable by r230 with profit 1
   Insn 192: point = 24
   Insn 191: point = 25
   Insn 190: point = 26
   Insn 189: point = 27
   Insn 188: point = 28
   Insn 187: point = 29
   Insn 186: point = 30
   Insn 185: point = 31
   Insn 184: point = 32
   Insn 183: point = 33
   Insn 182: point = 34
   Insn 181: point = 35
   Insn 180: point = 36
   Insn 179: point = 37
   Insn 178: point = 38
   Insn 177: point = 39
   Insn 176: point = 40
   Insn 175: point = 41
   Insn 174: point = 42
   Insn 173: point = 43
   Insn 172: point = 45
   Insn 171: point = 47
   Insn 170: point = 49
   Insn 169: point = 51
   Insn 168: point = 52
   Insn 167: point = 52
   Insn 166: point = 53
   Insn 165: point = 55
   Insn 164: point = 56
   Insn 163: point = 58
  BB 10
   Insn 301: point = 59
   Insn 300: point = 59
   Insn 299: point = 60
   Insn 298: point = 61
   Insn 297: point = 62
   Insn 296: point = 63
   Insn 295: point = 64
   Insn 341: point = 65
	Hard reg 0 is preferable by r233 with profit 1
   Insn 340: point = 67
	Hard reg 1 is preferable by r232 with profit 1
   Insn 294: point = 69
   Insn 293: point = 70
   Insn 292: point = 71
   Insn 291: point = 72
   Insn 290: point = 73
   Insn 289: point = 74
   Insn 288: point = 75
   Insn 287: point = 76
   Insn 286: point = 77
   Insn 285: point = 78
   Insn 284: point = 79
   Insn 283: point = 80
   Insn 282: point = 81
   Insn 281: point = 82
   Insn 280: point = 83
   Insn 279: point = 84
   Insn 278: point = 85
   Insn 277: point = 86
   Insn 276: point = 87
   Insn 275: point = 89
   Insn 274: point = 91
   Insn 273: point = 93
   Insn 272: point = 95
   Insn 271: point = 96
   Insn 270: point = 96
   Insn 269: point = 97
   Insn 268: point = 99
   Insn 267: point = 100
   Insn 266: point = 102
   Insn 265: point = 103
   Insn 264: point = 105
  BB 9
   Insn 262: point = 106
   Insn 261: point = 106
   Insn 260: point = 107
   Insn 259: point = 109
   Insn 258: point = 111
   Insn 257: point = 113
   Insn 256: point = 115
   Insn 255: point = 117
   Insn 254: point = 118
   Insn 253: point = 118
   Insn 252: point = 119
   Insn 251: point = 121
   Insn 250: point = 122
   Insn 249: point = 124
  BB 8
   Insn 247: point = 125
   Insn 246: point = 125
   Insn 245: point = 126
   Insn 244: point = 128
   Insn 243: point = 130
   Insn 242: point = 132
   Insn 241: point = 134
   Insn 240: point = 136
   Insn 239: point = 138
   Insn 238: point = 139
   Insn 237: point = 139
   Insn 236: point = 140
   Insn 235: point = 142
   Insn 234: point = 143
   Insn 233: point = 145
   Insn 232: point = 146
   Insn 231: point = 148
   Insn 230: point = 150
   Insn 229: point = 152
   Insn 228: point = 154
   Insn 227: point = 156
   Insn 226: point = 157
   Insn 225: point = 157
   Insn 224: point = 158
   Insn 223: point = 160
   Insn 222: point = 161
   Insn 221: point = 163
  BB 7
   Insn 216: point = 164
   Insn 215: point = 164
   Insn 214: point = 165
   Insn 213: point = 166
   Insn 212: point = 167
   Insn 211: point = 167
   Insn 210: point = 168
   Insn 209: point = 169
   Insn 208: point = 170
  BB 5
   Insn 161: point = 171
   Insn 160: point = 171
   Insn 159: point = 171
   Insn 158: point = 172
   Insn 157: point = 173
   Insn 156: point = 173
   Insn 155: point = 174
   Insn 154: point = 175
   Insn 153: point = 176
   Insn 152: point = 177
   Insn 151: point = 178
   Insn 150: point = 179
   Insn 337: point = 180
	Hard reg 0 is preferable by r229 with profit 1
   Insn 336: point = 182
	Hard reg 1 is preferable by r228 with profit 1
   Insn 149: point = 184
   Insn 148: point = 185
   Insn 147: point = 186
   Insn 146: point = 187
   Insn 145: point = 188
   Insn 144: point = 189
   Insn 143: point = 190
   Insn 142: point = 191
   Insn 141: point = 192
   Insn 140: point = 193
   Insn 139: point = 194
   Insn 138: point = 195
   Insn 137: point = 196
   Insn 136: point = 197
   Insn 135: point = 198
   Insn 134: point = 199
   Insn 133: point = 200
   Insn 132: point = 201
   Insn 131: point = 202
   Insn 130: point = 203
   Insn 129: point = 205
   Insn 128: point = 207
   Insn 127: point = 209
   Insn 126: point = 211
   Insn 125: point = 212
   Insn 124: point = 212
   Insn 123: point = 213
   Insn 122: point = 215
   Insn 121: point = 216
   Insn 120: point = 218
   Insn 119: point = 219
   Insn 118: point = 221
   Insn 117: point = 222
   Insn 116: point = 223
   Insn 115: point = 224
   Insn 114: point = 224
   Insn 113: point = 225
   Insn 112: point = 226
   Insn 335: point = 227
	Hard reg 0 is preferable by r227 with profit 1
   Insn 334: point = 229
	Hard reg 1 is preferable by r226 with profit 1
   Insn 111: point = 231
   Insn 110: point = 232
   Insn 109: point = 233
   Insn 108: point = 234
   Insn 107: point = 235
   Insn 106: point = 237
   Insn 105: point = 239
   Insn 104: point = 241
   Insn 103: point = 243
   Insn 102: point = 244
   Insn 101: point = 244
   Insn 100: point = 245
   Insn 99: point = 247
   Insn 98: point = 248
   Insn 97: point = 250
  BB 4
   Insn 95: point = 251
   Insn 94: point = 251
   Insn 93: point = 251
   Insn 92: point = 252
   Insn 91: point = 253
   Insn 90: point = 253
   Insn 89: point = 254
   Insn 333: point = 255
	Hard reg 0 is preferable by r225 with profit 1
   Insn 332: point = 257
	Hard reg 1 is preferable by r224 with profit 1
   Insn 88: point = 259
   Insn 87: point = 260
   Insn 86: point = 261
   Insn 85: point = 262
   Insn 84: point = 263
   Insn 83: point = 263
   Insn 82: point = 264
   Insn 81: point = 265
   Insn 80: point = 266
   Insn 79: point = 267
   Insn 78: point = 268
   Insn 77: point = 269
   Insn 76: point = 270
   Insn 75: point = 272
   Insn 74: point = 274
   Insn 73: point = 276
   Insn 72: point = 278
   Insn 71: point = 280
   Insn 70: point = 281
   Insn 69: point = 281
   Insn 68: point = 282
   Insn 67: point = 284
   Insn 66: point = 285
   Insn 65: point = 287
   Insn 64: point = 288
   Insn 63: point = 289
   Insn 62: point = 290
   Insn 61: point = 290
   Insn 60: point = 291
   Insn 59: point = 292
   Insn 58: point = 293
   Insn 57: point = 294
   Insn 56: point = 295
   Insn 55: point = 296
   Insn 54: point = 297
   Insn 53: point = 298
   Insn 52: point = 299
   Insn 51: point = 300
   Insn 50: point = 301
   Insn 49: point = 302
   Insn 48: point = 303
   Insn 47: point = 304
   Insn 46: point = 305
   Insn 45: point = 306
   Insn 44: point = 307
   Insn 43: point = 308
   Insn 42: point = 310
   Insn 41: point = 312
   Insn 40: point = 314
   Insn 39: point = 316
   Insn 38: point = 318
   Insn 37: point = 319
   Insn 36: point = 319
   Insn 35: point = 320
   Insn 34: point = 322
   Insn 33: point = 323
   Insn 32: point = 325
   Insn 31: point = 326
  BB 3
   Insn 29: point = 327
   Insn 28: point = 327
   Insn 27: point = 328
   Insn 26: point = 330
   Insn 25: point = 332
   Insn 24: point = 334
   Insn 23: point = 336
   Insn 22: point = 338
   Insn 21: point = 339
   Insn 20: point = 339
   Insn 19: point = 340
   Insn 18: point = 342
   Insn 17: point = 343
   Insn 16: point = 345
 r59: [331..343]
 r60: [338..340]
 r61: [331..332]
 r62: [329..330]
 r63: [327..328]
 r64: [293..326]
 r65: [311..323]
 r66: [318..320]
 r67: [311..312]
 r68: [309..310]
 r69: [290..308]
 r70: [267..289]
 r71: [264..288]
 r72: [273..285]
 r73: [280..282]
 r74: [273..274]
 r75: [271..272]
 r76: [263..270]
 r77: [253..262]
 r78: [236..248]
 r79: [243..245]
 r80: [236..237]
 r81: [225..235]
 r82: [224..234]
 r83: [174..219]
 r84: [204..216]
 r85: [211..213]
 r86: [204..205]
 r87: [173..203]
 r88: [44..56]
 r89: [51..53]
 r90: [44..45]
 r91: [14..43]
 r92: [164..166]
 r93: [164..165]
 r94: [149..161]
 r95: [156..158]
 r96: [149..150]
 r97: [147..148]
 r98: [125..146]
 r99: [131..143]
 r100: [138..140]
 r101: [131..132]
 r102: [129..130]
 r103: [127..128]
 r104: [125..126]
 r105: [110..122]
 r106: [117..119]
 r107: [110..111]
 r108: [108..109]
 r109: [106..107]
 r110: [60..103]
 r111: [88..100]
 r112: [95..97]
 r113: [88..89]
 r114: [59..87]
 r115: [2..3]
 r116: [0..1]
 r117: [6..8]
 r118: [9..11]
 r119: [7..10]
 r120: [344..345]
 r121: [341..342]
 r122: [337..339] [333..334]
 r123: [335..336]
 r124: [324..325]
 r125: [321..322]
 r126: [317..319] [313..314]
 r127: [315..316]
 r128: [292..307]
 r129: [291..306]
 r130: [304..305]
 r131: [302..303]
 r132: [300..301]
 r133: [298..299]
 r134: [296..297]
 r135: [294..295]
 r136: [286..287]
 r137: [283..284]
 r138: [279..281] [275..276]
 r139: [277..278]
 r140: [266..269]
 r141: [265..268]
 r142: [258..261]
 r143: [254..260]
 r144: [256..259]
 r145: [251..252]
 r146: [249..250]
 r147: [246..247]
 r148: [242..244] [238..239]
 r149: [240..241]
 r150: [230..233]
 r151: [226..232]
 r152: [228..231]
 r153: [222..223]
 r154: [220..221]
 r155: [217..218]
 r156: [214..215]
 r157: [210..212] [206..207]
 r158: [208..209]
 r159: [178..202]
 r160: [177..201]
 r161: [176..200]
 r162: [175..199]
 r163: [197..198]
 r164: [195..196]
 r165: [193..194]
 r166: [191..192]
 r167: [189..190]
 r168: [187..188]
 r169: [183..186]
 r170: [179..185]
 r171: [181..184]
 r172: [171..172]
 r173: [57..58]
 r174: [54..55]
 r175: [50..52] [46..47]
 r176: [48..49]
 r177: [18..42]
 r178: [17..41]
 r179: [16..40]
 r180: [15..39]
 r181: [37..38]
 r182: [35..36]
 r183: [33..34]
 r184: [31..32]
 r185: [29..30]
 r186: [27..28]
 r187: [23..26]
 r188: [19..25]
 r189: [21..24]
 r190: [12..13]
 r191: [169..170]
 r192: [167..168]
 r193: [162..163]
 r194: [159..160]
 r195: [155..157] [151..152]
 r196: [153..154]
 r197: [144..145]
 r198: [141..142]
 r199: [137..139] [133..134]
 r200: [135..136]
 r201: [123..124]
 r202: [120..121]
 r203: [116..118] [112..113]
 r204: [114..115]
 r205: [104..105]
 r206: [101..102]
 r207: [98..99]
 r208: [94..96] [90..91]
 r209: [92..93]
 r210: [63..86]
 r211: [62..85]
 r212: [61..84]
 r213: [82..83]
 r214: [80..81]
 r215: [78..79]
 r216: [76..77]
 r217: [74..75]
 r218: [72..73]
 r219: [68..71]
 r220: [64..70]
 r221: [66..69]
 r222: [4..5]
 r224: [254..257]
 r225: [254..255]
 r226: [226..229]
 r227: [226..227]
 r228: [179..182]
 r229: [179..180]
 r230: [19..22]
 r231: [19..20]
 r232: [64..67]
 r233: [64..65]
Compressing live ranges: from 346 to 248 - 71%
Ranges after the compression:
 r59: [236..245]
 r60: [242..243]
 r61: [236..237]
 r62: [234..235]
 r63: [232..233]
 r64: [206..231]
 r65: [220..229]
 r66: [226..227]
 r67: [220..221]
 r68: [218..219]
 r69: [206..217]
 r70: [190..205]
 r71: [190..205]
 r72: [194..203]
 r73: [200..201]
 r74: [194..195]
 r75: [192..193]
 r76: [190..191]
 r77: [184..189]
 r78: [170..179]
 r79: [176..177]
 r80: [170..171]
 r81: [164..169]
 r82: [164..169]
 r83: [130..159]
 r84: [148..157]
 r85: [154..155]
 r86: [148..149]
 r87: [130..147]
 r88: [30..39]
 r89: [36..37]
 r90: [30..31]
 r91: [12..29]
 r92: [122..123]
 r93: [122..123]
 r94: [110..119]
 r95: [116..117]
 r96: [110..111]
 r97: [108..109]
 r98: [90..107]
 r99: [96..105]
 r100: [102..103]
 r101: [96..97]
 r102: [94..95]
 r103: [92..93]
 r104: [90..91]
 r105: [78..87]
 r106: [84..85]
 r107: [78..79]
 r108: [76..77]
 r109: [74..75]
 r110: [42..71]
 r111: [60..69]
 r112: [66..67]
 r113: [60..61]
 r114: [42..59]
 r115: [2..3]
 r116: [0..1]
 r117: [6..7]
 r118: [8..9]
 r119: [6..9]
 r120: [246..247]
 r121: [244..245]
 r122: [242..243] [238..239]
 r123: [240..241]
 r124: [230..231]
 r125: [228..229]
 r126: [226..227] [222..223]
 r127: [224..225]
 r128: [206..217]
 r129: [206..217]
 r130: [216..217]
 r131: [214..215]
 r132: [212..213]
 r133: [210..211]
 r134: [208..209]
 r135: [206..207]
 r136: [204..205]
 r137: [202..203]
 r138: [200..201] [196..197]
 r139: [198..199]
 r140: [190..191]
 r141: [190..191]
 r142: [188..189]
 r143: [184..189]
 r144: [186..189]
 r145: [182..183]
 r146: [180..181]
 r147: [178..179]
 r148: [176..177] [172..173]
 r149: [174..175]
 r150: [168..169]
 r151: [164..169]
 r152: [166..169]
 r153: [162..163]
 r154: [160..161]
 r155: [158..159]
 r156: [156..157]
 r157: [154..155] [150..151]
 r158: [152..153]
 r159: [130..147]
 r160: [130..147]
 r161: [130..147]
 r162: [130..147]
 r163: [146..147]
 r164: [144..145]
 r165: [142..143]
 r166: [140..141]
 r167: [138..139]
 r168: [136..137]
 r169: [134..135]
 r170: [130..135]
 r171: [132..135]
 r172: [128..129]
 r173: [40..41]
 r174: [38..39]
 r175: [36..37] [32..33]
 r176: [34..35]
 r177: [12..29]
 r178: [12..29]
 r179: [12..29]
 r180: [12..29]
 r181: [28..29]
 r182: [26..27]
 r183: [24..25]
 r184: [22..23]
 r185: [20..21]
 r186: [18..19]
 r187: [16..17]
 r188: [12..17]
 r189: [14..17]
 r190: [10..11]
 r191: [126..127]
 r192: [124..125]
 r193: [120..121]
 r194: [118..119]
 r195: [116..117] [112..113]
 r196: [114..115]
 r197: [106..107]
 r198: [104..105]
 r199: [102..103] [98..99]
 r200: [100..101]
 r201: [88..89]
 r202: [86..87]
 r203: [84..85] [80..81]
 r204: [82..83]
 r205: [72..73]
 r206: [70..71]
 r207: [68..69]
 r208: [66..67] [62..63]
 r209: [64..65]
 r210: [42..59]
 r211: [42..59]
 r212: [42..59]
 r213: [58..59]
 r214: [56..57]
 r215: [54..55]
 r216: [52..53]
 r217: [50..51]
 r218: [48..49]
 r219: [46..47]
 r220: [42..47]
 r221: [44..47]
 r222: [4..5]
 r224: [184..187]
 r225: [184..185]
 r226: [164..167]
 r227: [164..165]
 r228: [130..133]
 r229: [130..131]
 r230: [12..15]
 r231: [12..13]
 r232: [42..45]
 r233: [42..43]
	 Assigning to 224 (cl=DIREG, orig=142, freq=2, tfirst=224, tfreq=2)...
	   Assign 5 to reload r224 (freq=2)
	 Assigning to 225 (cl=CREG, orig=144, freq=2, tfirst=225, tfreq=2)...
	   Assign 2 to reload r225 (freq=2)
	 Assigning to 226 (cl=DIREG, orig=150, freq=2, tfirst=226, tfreq=2)...
	   Assign 5 to reload r226 (freq=2)
	 Assigning to 227 (cl=CREG, orig=152, freq=2, tfirst=227, tfreq=2)...
	   Assign 2 to reload r227 (freq=2)
	 Assigning to 228 (cl=DIREG, orig=169, freq=2, tfirst=228, tfreq=2)...
	   Assign 5 to reload r228 (freq=2)
	 Assigning to 229 (cl=CREG, orig=171, freq=2, tfirst=229, tfreq=2)...
	   Assign 2 to reload r229 (freq=2)
	 Assigning to 230 (cl=DIREG, orig=187, freq=2, tfirst=230, tfreq=2)...
	   Assign 5 to reload r230 (freq=2)
	 Assigning to 231 (cl=CREG, orig=189, freq=2, tfirst=231, tfreq=2)...
	   Assign 2 to reload r231 (freq=2)
	 Assigning to 232 (cl=DIREG, orig=219, freq=2, tfirst=232, tfreq=2)...
	   Assign 5 to reload r232 (freq=2)
	 Assigning to 233 (cl=CREG, orig=221, freq=2, tfirst=233, tfreq=2)...
	   Assign 2 to reload r233 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=432, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=400, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 58
changing reg in insn 33
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 61
changing reg in insn 63
changing reg in insn 79
changing reg in insn 64
changing reg in insn 82
changing reg in insn 66
changing reg in insn 68
changing reg in insn 71
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 83
changing reg in insn 85
changing reg in insn 90
changing reg in insn 98
changing reg in insn 107
changing reg in insn 100
changing reg in insn 103
changing reg in insn 101
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 113
changing reg in insn 108
changing reg in insn 114
changing reg in insn 119
changing reg in insn 155
changing reg in insn 121
changing reg in insn 130
changing reg in insn 123
changing reg in insn 126
changing reg in insn 124
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 156
changing reg in insn 164
changing reg in insn 173
changing reg in insn 166
changing reg in insn 169
changing reg in insn 167
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 198
changing reg in insn 213
changing reg in insn 215
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 224
changing reg in insn 227
changing reg in insn 225
changing reg in insn 227
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 246
changing reg in insn 234
changing reg in insn 236
changing reg in insn 239
changing reg in insn 237
changing reg in insn 239
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 250
changing reg in insn 252
changing reg in insn 255
changing reg in insn 253
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 265
changing reg in insn 299
changing reg in insn 267
changing reg in insn 276
changing reg in insn 269
changing reg in insn 272
changing reg in insn 270
changing reg in insn 272
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 300
changing reg in insn 312
changing reg in insn 315
changing reg in insn 315
changing reg in insn 319
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 4
changing reg in insn 5
changing reg in insn 7
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 41
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 59
changing reg in insn 45
changing reg in insn 60
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 71
changing reg in insn 70
changing reg in insn 69
changing reg in insn 74
changing reg in insn 72
changing reg in insn 71
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 80
changing reg in insn 78
changing reg in insn 81
changing reg in insn 86
changing reg in insn 89
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 88
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 106
changing reg in insn 104
changing reg in insn 103
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 112
changing reg in insn 110
changing reg in insn 112
changing reg in insn 112
changing reg in insn 111
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 129
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 151
changing reg in insn 132
changing reg in insn 152
changing reg in insn 133
changing reg in insn 153
changing reg in insn 134
changing reg in insn 154
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 149
changing reg in insn 158
changing reg in insn 159
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 171
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 172
changing reg in insn 170
changing reg in insn 169
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 174
changing reg in insn 194
changing reg in insn 175
changing reg in insn 195
changing reg in insn 176
changing reg in insn 196
changing reg in insn 177
changing reg in insn 197
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 193
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 192
changing reg in insn 200
changing reg in insn 201
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 229
changing reg in insn 227
changing reg in insn 226
changing reg in insn 225
changing reg in insn 230
changing reg in insn 228
changing reg in insn 227
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 241
changing reg in insn 239
changing reg in insn 238
changing reg in insn 237
changing reg in insn 242
changing reg in insn 240
changing reg in insn 239
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 257
changing reg in insn 255
changing reg in insn 254
changing reg in insn 253
changing reg in insn 258
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 256
changing reg in insn 257
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 274
changing reg in insn 272
changing reg in insn 271
changing reg in insn 270
changing reg in insn 275
changing reg in insn 273
changing reg in insn 272
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 277
changing reg in insn 296
changing reg in insn 278
changing reg in insn 297
changing reg in insn 279
changing reg in insn 298
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 295
changing reg in insn 293
changing reg in insn 295
changing reg in insn 295
changing reg in insn 294
changing reg in insn 308
changing reg in insn 309
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 199.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 301.


_check_safe_events

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={138d,134u} r1={35d,37u,10e} r2={36d,33u} r3={3d,3u} r4={29d,21u} r5={33d,25u} r6={1d,99u} r7={1d,63u} r8={9d,2u} r9={9d,1u} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={62d,7u} r18={8d} r19={8d} r20={1d,1u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={18d,9u} r38={14d,5u} r39={11d,3u} r40={11d,3u} r41={1d,1u} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} 
;;    total ref usage 1133{676d,447u,10e} in 299{291 regular + 8 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 117 118 119
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:791 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:791 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(insn 4 3 5 2 (set (reg:SI 0 ax [118])
        (reg:SI 1 dx [ sh ])) mABM.c:791 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ sh ])
        (nil)))
(insn 5 4 6 2 (set (reg:DI 2 cx [119])
        (reg:DI 2 cx [ sh+8 ])) mABM.c:791 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ sh+8 ])
        (nil)))
(insn 6 5 7 2 (set (reg:TI 0 ax [117])
        (reg:TI 0 ax [118])) mABM.c:791 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (nil)))
(insn 7 6 8 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [119])) mABM.c:791 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [119])
        (nil)))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [117])) mABM.c:791 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [117])
        (nil)))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 328 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mABM.c:794 89 {*movsi_internal}
     (nil))
(jump_insn 328 12 329 2 (set (pc)
        (label_ref 305)) mABM.c:794 650 {jump}
     (nil)
 -> 305)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 329 328 307)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 120 121 122 123
(code_label 307 329 15 3 325 "" [1 uses])
(note 15 307 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:794 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 2 cx [orig:59 D.7230 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [120]) [0 *f_4(D)+0 S8 A64])) mABM.c:794 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [120])
        (nil)))
(insn 18 17 19 3 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:794 89 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 1 dx [orig:60 D.7231 ] [60])
        (sign_extend:DI (reg:SI 0 ax [121]))) mABM.c:794 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [121])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [122])
        (reg:DI 1 dx [orig:60 D.7231 ] [60])) mABM.c:794 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 0 ax [122])
                (ashift:DI (reg:DI 0 ax [122])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:794 513 {*ashldi3_1}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [122])
                (plus:DI (reg:DI 0 ax [122])
                    (reg:DI 1 dx [orig:60 D.7231 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:794 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7231 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.7231 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 0 ax [123])
                (ashift:DI (reg:DI 0 ax [122])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:794 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [122])
        (nil)))
(insn 24 23 25 3 (set (reg:DI 0 ax [122])
        (reg:DI 0 ax [123])) mABM.c:794 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(insn 25 24 26 3 (set (reg:DI 0 ax [orig:61 D.7231 ] [61])
        (reg:DI 0 ax [122])) mABM.c:794 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [122])
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7230 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.7231 ] [61])
                    (reg/f:DI 2 cx [orig:59 D.7230 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:794 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7231 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.7230 ] [59])
            (nil))))
(insn 27 26 28 3 (set (reg:SI 0 ax [orig:63 D.7232 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:62 D.7230 ] [62])
                (const_int 40 [0x28])) [0 _8->ready+0 S4 A64])) mABM.c:794 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7230 ] [62])
        (nil)))
(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.7232 ] [63])
            (const_int 0 [0]))) mABM.c:794 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.7232 ] [63])
        (nil)))
(jump_insn 29 28 30 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) mABM.c:794 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       4 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 68 69 70 71 72 73 74 75 76 77 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:SI 2 cx [orig:64 D.7232 ] [64])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 256 [0x100])) [0 conf.t_w+0 S4 A128])) mABM.c:796 89 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 4 si [orig:65 D.7230 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [124]) [0 *f_4(D)+0 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (nil)))
(insn 34 33 35 4 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:796 89 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 1 dx [orig:66 D.7231 ] [66])
        (sign_extend:DI (reg:SI 0 ax [125]))) mABM.c:796 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [125])
        (nil)))
(insn 36 35 37 4 (set (reg:DI 0 ax [126])
        (reg:DI 1 dx [orig:66 D.7231 ] [66])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 0 ax [126])
                (ashift:DI (reg:DI 0 ax [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:796 513 {*ashldi3_1}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 0 ax [126])
                (plus:DI (reg:DI 0 ax [126])
                    (reg:DI 1 dx [orig:66 D.7231 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:796 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.7231 ] [66])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:66 D.7231 ] [66])
                (const_int 5 [0x5]))
            (nil))))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 0 ax [127])
                (ashift:DI (reg:DI 0 ax [126])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:796 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [126])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 0 ax [126])
        (reg:DI 0 ax [127])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [127])
        (nil)))
(insn 41 40 42 4 (set (reg:DI 0 ax [orig:67 D.7231 ] [67])
        (reg:DI 0 ax [126])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [126])
        (nil)))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.7230 ] [68])
                (plus:DI (reg:DI 0 ax [orig:67 D.7231 ] [67])
                    (reg/f:DI 4 si [orig:65 D.7230 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:796 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.7231 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:65 D.7230 ] [65])
            (nil))))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [orig:69 D.7233 ] [69])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:68 D.7230 ] [68])
                (const_int 32 [0x20])) [0 _14->pos+0 S8 A128])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.7230 ] [68])
        (nil)))
(insn 44 43 45 4 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:796 89 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 4 si [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 4 (set (reg:DI 5 di [130])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tl+0 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 4 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 5 di [130])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [130])
        (nil)))
(insn 48 47 49 4 (set (reg:DI 5 di [131])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl+8 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 4 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 5 di [131])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [131])
        (nil)))
(insn 50 49 51 4 (set (reg:DI 5 di [132])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 tl+16 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 4 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 5 di [132])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [132])
        (nil)))
(insn 52 51 53 4 (set (reg:DI 5 di [133])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 tl+24 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 4 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 5 di [133])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [133])
        (nil)))
(insn 54 53 55 4 (set (reg:DI 5 di [134])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 tl+32 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 4 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg:DI 5 di [134])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [134])
        (nil)))
(insn 56 55 57 4 (set (reg:DI 5 di [135])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 tl+40 S8 A64])) mABM.c:796 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 4 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 5 di [135])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [135])
        (nil)))
(insn 58 57 59 4 (set (reg:SI 2 cx)
        (reg:SI 2 cx [orig:64 D.7232 ] [64])) mABM.c:796 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:64 D.7232 ] [64])
        (nil)))
(insn 59 58 60 4 (set (reg:SI 1 dx)
        (reg:SI 1 dx [128])) mABM.c:796 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [128])
        (nil)))
(insn 60 59 61 4 (set (reg:DI 4 si)
        (reg:DI 4 si [129])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [129])
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:69 D.7233 ] [69])) mABM.c:796 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.7233 ] [69])
        (nil)))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_minimum_flight_distance") [flags 0x3]  <function_decl 0x7f05a571f500 _minimum_flight_distance>) [0 _minimum_flight_distance S1 A8])
            (const_int 48 [0x30]))) mABM.c:796 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_BR_PRED (use (reg:SI 2 cx))
                    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S48 A64]))
                        (nil)))))))
(insn 63 62 64 4 (set (reg/f:DI 5 di [orig:70 D.7234 ] [70])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:797 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 4 (set (reg:SI 4 si [orig:71 D.7232 ] [71])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 256 [0x100])) [0 conf.t_w+0 S4 A128])) mABM.c:797 89 {*movsi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:797 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 2 cx [orig:72 D.7230 ] [72])
        (mem/f:DI (reg/f:DI 0 ax [136]) [0 *f_4(D)+0 S8 A64])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (nil)))
(insn 67 66 68 4 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:797 89 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:73 D.7231 ] [73])
        (sign_extend:DI (reg:SI 0 ax [137]))) mABM.c:797 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [137])
        (nil)))
(insn 69 68 70 4 (set (reg:DI 0 ax [138])
        (reg:DI 1 dx [orig:73 D.7231 ] [73])) mABM.c:797 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:DI 0 ax [138])
                (ashift:DI (reg:DI 0 ax [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:797 513 {*ashldi3_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 0 ax [138])
                (plus:DI (reg:DI 0 ax [138])
                    (reg:DI 1 dx [orig:73 D.7231 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:797 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.7231 ] [73])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:73 D.7231 ] [73])
                (const_int 5 [0x5]))
            (nil))))
(insn 72 71 73 4 (parallel [
            (set (reg:DI 0 ax [139])
                (ashift:DI (reg:DI 0 ax [138])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:797 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [138])
        (nil)))
(insn 73 72 74 4 (set (reg:DI 0 ax [138])
        (reg:DI 0 ax [139])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [139])
        (nil)))
(insn 74 73 75 4 (set (reg:DI 0 ax [orig:74 D.7231 ] [74])
        (reg:DI 0 ax [138])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [138])
        (nil)))
(insn 75 74 76 4 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.7230 ] [75])
                (plus:DI (reg:DI 0 ax [orig:74 D.7231 ] [74])
                    (reg/f:DI 2 cx [orig:72 D.7230 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:797 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:74 D.7231 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:72 D.7230 ] [72])
            (nil))))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [orig:76 D.7233 ] [76])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:75 D.7230 ] [75])
                (const_int 32 [0x20])) [0 _21->pos+0 S8 A128])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.7230 ] [75])
        (nil)))
(insn 77 76 78 4 (set (reg:SI 1 dx [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S4 A64])) mABM.c:797 89 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 2 cx [141])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sh+8 S8 A64])) mABM.c:797 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 4 (set (reg:DI 37 r8)
        (reg/f:DI 5 di [orig:70 D.7234 ] [70])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:70 D.7234 ] [70])
        (nil)))
(insn 80 79 81 4 (set (reg:SI 1 dx)
        (reg:SI 1 dx [140])) mABM.c:797 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [140])
        (nil)))
(insn 81 80 82 4 (set (reg:DI 2 cx)
        (reg:DI 2 cx [141])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [141])
        (nil)))
(insn 82 81 83 4 (set (reg:SI 4 si)
        (reg:SI 4 si [orig:71 D.7232 ] [71])) mABM.c:797 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:71 D.7232 ] [71])
        (nil)))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:76 D.7233 ] [76])) mABM.c:797 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7233 ] [76])
        (nil)))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_checkShockareaRoute") [flags 0x3]  <function_decl 0x7f05a571f700 _checkShockareaRoute>) [0 _checkShockareaRoute S1 A8])
            (const_int 0 [0]))) mABM.c:797 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 85 84 86 4 (set (reg/f:DI 37 r8 [orig:77 D.7234 ] [77])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:798 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 4 (set (reg:DI 1 dx [142])
        (reg/f:DI 7 sp)) mABM.c:798 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 4 (parallel [
            (set (reg:DI 4 si [143])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:798 274 {*adddi_1}
     (nil))
(insn 88 87 332 4 (set (reg:DI 0 ax [144])
        (const_int 38 [0x26])) mABM.c:798 87 {*movdi_internal_rex64}
     (nil))
(insn 332 88 333 4 (set (reg:DI 5 di [142])
        (reg:DI 1 dx [142])) mABM.c:798 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [142])
        (nil)))
(insn 333 332 89 4 (set (reg:DI 2 cx [144])
        (reg:DI 0 ax [144])) mABM.c:798 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [144])
        (nil)))
(insn 89 333 90 4 (parallel [
            (set (reg:DI 2 cx [144])
                (const_int 0 [0]))
            (set (reg:DI 5 di [142])
                (plus:DI (ashift:DI (reg:DI 2 cx [144])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [142])))
            (set (reg:DI 4 si [143])
                (plus:DI (ashift:DI (reg:DI 2 cx [144])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [143])))
            (set (mem:BLK (reg:DI 5 di [142]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [143]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [144]))
        ]) mABM.c:798 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [144])
        (expr_list:REG_UNUSED (reg:DI 5 di [142])
            (expr_list:REG_UNUSED (reg:DI 4 si [143])
                (nil)))))
(insn 90 89 91 4 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:77 D.7234 ] [77])) mABM.c:798 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:77 D.7234 ] [77])
        (nil)))
(call_insn 91 90 92 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_check_risk") [flags 0x3]  <function_decl 0x7f05a571f800 _check_risk>) [0 _check_risk S1 A8])
            (const_int 304 [0x130]))) mABM.c:798 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 92 91 93 4 (set (reg:SI 0 ax [145])
        (reg:SI 0 ax)) mABM.c:798 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 93 92 94 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [145])) mABM.c:798 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [145])
        (nil)))
(insn 94 93 95 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
            (const_int 0 [0]))) mABM.c:800 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 95 94 96 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) mABM.c:800 612 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 80 81 82 83 84 85 86 87 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172
(note 96 95 97 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 5 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:802 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 5 (set (reg/f:DI 2 cx [orig:78 D.7230 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [146]) [0 *f_4(D)+0 S8 A64])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [146])
        (nil)))
(insn 99 98 100 5 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:802 89 {*movsi_internal}
     (nil))
(insn 100 99 101 5 (set (reg:DI 1 dx [orig:79 D.7231 ] [79])
        (sign_extend:DI (reg:SI 0 ax [147]))) mABM.c:802 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [147])
        (nil)))
(insn 101 100 102 5 (set (reg:DI 0 ax [148])
        (reg:DI 1 dx [orig:79 D.7231 ] [79])) mABM.c:802 87 {*movdi_internal_rex64}
     (nil))
(insn 102 101 103 5 (parallel [
            (set (reg:DI 0 ax [148])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:802 513 {*ashldi3_1}
     (nil))
(insn 103 102 104 5 (parallel [
            (set (reg:DI 0 ax [148])
                (plus:DI (reg:DI 0 ax [148])
                    (reg:DI 1 dx [orig:79 D.7231 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:802 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:79 D.7231 ] [79])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:79 D.7231 ] [79])
                (const_int 5 [0x5]))
            (nil))))
(insn 104 103 105 5 (parallel [
            (set (reg:DI 0 ax [149])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:802 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 105 104 106 5 (set (reg:DI 0 ax [148])
        (reg:DI 0 ax [149])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [149])
        (nil)))
(insn 106 105 107 5 (set (reg:DI 0 ax [orig:80 D.7231 ] [80])
        (reg:DI 0 ax [148])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 107 106 108 5 (parallel [
            (set (reg/f:DI 38 r9 [orig:81 D.7230 ] [81])
                (plus:DI (reg/f:DI 2 cx [orig:78 D.7230 ] [78])
                    (reg:DI 0 ax [orig:80 D.7231 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:802 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7231 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:78 D.7230 ] [78])
            (nil))))
(insn 108 107 109 5 (set (reg/f:DI 37 r8 [orig:82 D.7234 ] [82])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl.dist+0 S8 A64])) mABM.c:802 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 5 (set (reg:DI 1 dx [150])
        (reg/f:DI 7 sp)) mABM.c:802 87 {*movdi_internal_rex64}
     (nil))
(insn 110 109 111 5 (parallel [
            (set (reg:DI 4 si [151])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:802 274 {*adddi_1}
     (nil))
(insn 111 110 334 5 (set (reg:DI 0 ax [152])
        (const_int 38 [0x26])) mABM.c:802 87 {*movdi_internal_rex64}
     (nil))
(insn 334 111 335 5 (set (reg:DI 5 di [150])
        (reg:DI 1 dx [150])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [150])
        (nil)))
(insn 335 334 112 5 (set (reg:DI 2 cx [152])
        (reg:DI 0 ax [152])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [152])
        (nil)))
(insn 112 335 113 5 (parallel [
            (set (reg:DI 2 cx [152])
                (const_int 0 [0]))
            (set (reg:DI 5 di [150])
                (plus:DI (ashift:DI (reg:DI 2 cx [152])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [150])))
            (set (reg:DI 4 si [151])
                (plus:DI (ashift:DI (reg:DI 2 cx [152])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [151])))
            (set (mem:BLK (reg:DI 5 di [150]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [151]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [152]))
        ]) mABM.c:802 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [152])
        (expr_list:REG_UNUSED (reg:DI 5 di [150])
            (expr_list:REG_UNUSED (reg:DI 4 si [151])
                (nil)))))
(insn 113 112 114 5 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:81 D.7230 ] [81])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:81 D.7230 ] [81])
        (nil)))
(insn 114 113 115 5 (set (reg:DI 5 di)
        (reg/f:DI 37 r8 [orig:82 D.7234 ] [82])) mABM.c:802 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:82 D.7234 ] [82])
        (nil)))
(call_insn 115 114 116 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_checkFlightsCollision") [flags 0x3]  <function_decl 0x7f05a571f400 _checkFlightsCollision>) [0 _checkFlightsCollision S1 A8])
            (const_int 304 [0x130]))) mABM.c:802 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 116 115 117 5 (set (reg:SI 0 ax [153])
        (reg:SI 0 ax)) mABM.c:802 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 117 116 118 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [153])) mABM.c:802 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [153])
        (nil)))
(insn 118 117 119 5 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 5 (set (reg/f:DI 39 r10 [orig:83 D.7230 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [154]) [0 *f_4(D)+0 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [154])
        (nil)))
(insn 120 119 121 5 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 121 120 122 5 (set (reg/f:DI 2 cx [orig:84 D.7230 ] [84])
        (mem/f:DI (reg/f:DI 0 ax [155]) [0 *f_4(D)+0 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [155])
        (nil)))
(insn 122 121 123 5 (set (reg:SI 0 ax [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:804 89 {*movsi_internal}
     (nil))
(insn 123 122 124 5 (set (reg:DI 1 dx [orig:85 D.7231 ] [85])
        (sign_extend:DI (reg:SI 0 ax [156]))) mABM.c:804 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [156])
        (nil)))
(insn 124 123 125 5 (set (reg:DI 0 ax [157])
        (reg:DI 1 dx [orig:85 D.7231 ] [85])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 125 124 126 5 (parallel [
            (set (reg:DI 0 ax [157])
                (ashift:DI (reg:DI 0 ax [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:804 513 {*ashldi3_1}
     (nil))
(insn 126 125 127 5 (parallel [
            (set (reg:DI 0 ax [157])
                (plus:DI (reg:DI 0 ax [157])
                    (reg:DI 1 dx [orig:85 D.7231 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:804 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:85 D.7231 ] [85])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:85 D.7231 ] [85])
                (const_int 5 [0x5]))
            (nil))))
(insn 127 126 128 5 (parallel [
            (set (reg:DI 0 ax [158])
                (ashift:DI (reg:DI 0 ax [157])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:804 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [157])
        (nil)))
(insn 128 127 129 5 (set (reg:DI 0 ax [157])
        (reg:DI 0 ax [158])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [158])
        (nil)))
(insn 129 128 130 5 (set (reg:DI 0 ax [orig:86 D.7231 ] [86])
        (reg:DI 0 ax [157])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [157])
        (nil)))
(insn 130 129 131 5 (parallel [
            (set (reg/f:DI 3 bx [orig:87 D.7230 ] [87])
                (plus:DI (reg/f:DI 2 cx [orig:84 D.7230 ] [84])
                    (reg:DI 0 ax [orig:86 D.7231 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:804 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:86 D.7231 ] [86])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:84 D.7230 ] [84])
            (nil))))
(insn 131 130 132 5 (set (reg:SI 38 r9 [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])) mABM.c:804 89 {*movsi_internal}
     (nil))
(insn 132 131 133 5 (set (reg:SI 37 r8 [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S4 A64])) mABM.c:804 89 {*movsi_internal}
     (nil))
(insn 133 132 134 5 (set (reg:DI 41 r12 [161])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sh+8 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 134 133 135 5 (set (reg:SI 40 r11 [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:804 89 {*movsi_internal}
     (nil))
(insn 135 134 136 5 (set (reg:DI 0 ax [163])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tl+0 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 136 135 137 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [163])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [163])
        (nil)))
(insn 137 136 138 5 (set (reg:DI 0 ax [164])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl+8 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 138 137 139 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [164])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 139 138 140 5 (set (reg:DI 0 ax [165])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 tl+16 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 140 139 141 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [165])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [165])
        (nil)))
(insn 141 140 142 5 (set (reg:DI 0 ax [166])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 tl+24 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 142 141 143 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [166])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [166])
        (nil)))
(insn 143 142 144 5 (set (reg:DI 0 ax [167])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 tl+32 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 144 143 145 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [167])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [167])
        (nil)))
(insn 145 144 146 5 (set (reg:DI 0 ax [168])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 tl+40 S8 A64])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 146 145 147 5 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [168])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [168])
        (nil)))
(insn 147 146 148 5 (set (reg:DI 1 dx [169])
        (reg/f:DI 7 sp)) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 148 147 149 5 (parallel [
            (set (reg:DI 4 si [170])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:804 274 {*adddi_1}
     (nil))
(insn 149 148 336 5 (set (reg:DI 0 ax [171])
        (const_int 38 [0x26])) mABM.c:804 87 {*movdi_internal_rex64}
     (nil))
(insn 336 149 337 5 (set (reg:DI 5 di [169])
        (reg:DI 1 dx [169])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [169])
        (nil)))
(insn 337 336 150 5 (set (reg:DI 2 cx [171])
        (reg:DI 0 ax [171])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [171])
        (nil)))
(insn 150 337 151 5 (parallel [
            (set (reg:DI 2 cx [171])
                (const_int 0 [0]))
            (set (reg:DI 5 di [169])
                (plus:DI (ashift:DI (reg:DI 2 cx [171])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [169])))
            (set (reg:DI 4 si [170])
                (plus:DI (ashift:DI (reg:DI 2 cx [171])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [170])))
            (set (mem:BLK (reg:DI 5 di [169]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [170]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [171]))
        ]) mABM.c:804 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [171])
        (expr_list:REG_UNUSED (reg:DI 5 di [169])
            (expr_list:REG_UNUSED (reg:DI 4 si [170])
                (nil)))))
(insn 151 150 152 5 (set (reg:SI 38 r9)
        (reg:SI 38 r9 [159])) mABM.c:804 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [159])
        (nil)))
(insn 152 151 153 5 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [160])) mABM.c:804 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [160])
        (nil)))
(insn 153 152 154 5 (set (reg:DI 37 r8)
        (reg:DI 41 r12 [161])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12 [161])
        (nil)))
(insn 154 153 155 5 (set (reg:SI 1 dx)
        (reg:SI 40 r11 [162])) mABM.c:804 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [162])
        (nil)))
(insn 155 154 156 5 (set (reg:DI 4 si)
        (reg/f:DI 39 r10 [orig:83 D.7230 ] [83])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:83 D.7230 ] [83])
        (nil)))
(insn 156 155 157 5 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:87 D.7230 ] [87])) mABM.c:804 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:87 D.7230 ] [87])
        (nil)))
(call_insn 157 156 158 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_reroute") [flags 0x3]  <function_decl 0x7f05a571fe00 _reroute>) [0 _reroute S1 A8])
            (const_int 352 [0x160]))) mABM.c:804 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                                (const_int 304 [0x130])) [0  S48 A64]))
                                    (nil))))))))))
(insn 158 157 159 5 (set (reg:SI 0 ax [172])
        (reg:SI 0 ax)) mABM.c:804 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 159 158 160 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [172])) mABM.c:804 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [172])
        (nil)))
(insn 160 159 161 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
            (const_int 0 [0]))) mABM.c:806 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 161 160 162 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 302)
            (pc))) mABM.c:806 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88 89 90 91 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190
(note 162 161 163 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 6 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 164 163 165 6 (set (reg/f:DI 2 cx [orig:88 D.7230 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [173]) [0 *f_4(D)+0 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [173])
        (nil)))
(insn 165 164 166 6 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:807 89 {*movsi_internal}
     (nil))
(insn 166 165 167 6 (set (reg:DI 1 dx [orig:89 D.7231 ] [89])
        (sign_extend:DI (reg:SI 0 ax [174]))) mABM.c:807 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [174])
        (nil)))
(insn 167 166 168 6 (set (reg:DI 0 ax [175])
        (reg:DI 1 dx [orig:89 D.7231 ] [89])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 168 167 169 6 (parallel [
            (set (reg:DI 0 ax [175])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:807 513 {*ashldi3_1}
     (nil))
(insn 169 168 170 6 (parallel [
            (set (reg:DI 0 ax [175])
                (plus:DI (reg:DI 0 ax [175])
                    (reg:DI 1 dx [orig:89 D.7231 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:807 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.7231 ] [89])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.7231 ] [89])
                (const_int 5 [0x5]))
            (nil))))
(insn 170 169 171 6 (parallel [
            (set (reg:DI 0 ax [176])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:807 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [175])
        (nil)))
(insn 171 170 172 6 (set (reg:DI 0 ax [175])
        (reg:DI 0 ax [176])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [176])
        (nil)))
(insn 172 171 173 6 (set (reg:DI 0 ax [orig:90 D.7231 ] [90])
        (reg:DI 0 ax [175])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [175])
        (nil)))
(insn 173 172 174 6 (parallel [
            (set (reg/f:DI 40 r11 [orig:91 D.7230 ] [91])
                (plus:DI (reg/f:DI 2 cx [orig:88 D.7230 ] [88])
                    (reg:DI 0 ax [orig:90 D.7231 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:807 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:90 D.7231 ] [90])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:88 D.7230 ] [88])
            (nil))))
(insn 174 173 175 6 (set (reg:SI 37 r8 [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S4 A64])) mABM.c:807 89 {*movsi_internal}
     (nil))
(insn 175 174 176 6 (set (reg:DI 3 bx [178])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sh+8 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 176 175 177 6 (set (reg:SI 39 r10 [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:807 89 {*movsi_internal}
     (nil))
(insn 177 176 178 6 (set (reg:DI 38 r9 [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 6 (set (reg:DI 0 ax [181])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tl+0 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 179 178 180 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [181])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [181])
        (nil)))
(insn 180 179 181 6 (set (reg:DI 0 ax [182])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl+8 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 181 180 182 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [182])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [182])
        (nil)))
(insn 182 181 183 6 (set (reg:DI 0 ax [183])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 tl+16 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 183 182 184 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [183])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [183])
        (nil)))
(insn 184 183 185 6 (set (reg:DI 0 ax [184])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 tl+24 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 185 184 186 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [184])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [184])
        (nil)))
(insn 186 185 187 6 (set (reg:DI 0 ax [185])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 tl+32 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 187 186 188 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [185])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [185])
        (nil)))
(insn 188 187 189 6 (set (reg:DI 0 ax [186])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 tl+40 S8 A64])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 189 188 190 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [186])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [186])
        (nil)))
(insn 190 189 191 6 (set (reg:DI 1 dx [187])
        (reg/f:DI 7 sp)) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 191 190 192 6 (parallel [
            (set (reg:DI 4 si [188])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:807 274 {*adddi_1}
     (nil))
(insn 192 191 338 6 (set (reg:DI 0 ax [189])
        (const_int 38 [0x26])) mABM.c:807 87 {*movdi_internal_rex64}
     (nil))
(insn 338 192 339 6 (set (reg:DI 5 di [187])
        (reg:DI 1 dx [187])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [187])
        (nil)))
(insn 339 338 193 6 (set (reg:DI 2 cx [189])
        (reg:DI 0 ax [189])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [189])
        (nil)))
(insn 193 339 194 6 (parallel [
            (set (reg:DI 2 cx [189])
                (const_int 0 [0]))
            (set (reg:DI 5 di [187])
                (plus:DI (ashift:DI (reg:DI 2 cx [189])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [187])))
            (set (reg:DI 4 si [188])
                (plus:DI (ashift:DI (reg:DI 2 cx [189])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [188])))
            (set (mem:BLK (reg:DI 5 di [187]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [188]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [189]))
        ]) mABM.c:807 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [189])
        (expr_list:REG_UNUSED (reg:DI 5 di [187])
            (expr_list:REG_UNUSED (reg:DI 4 si [188])
                (nil)))))
(insn 194 193 195 6 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [177])) mABM.c:807 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [177])
        (nil)))
(insn 195 194 196 6 (set (reg:DI 37 r8)
        (reg:DI 3 bx [178])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx [178])
        (nil)))
(insn 196 195 197 6 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [179])) mABM.c:807 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [179])
        (nil)))
(insn 197 196 198 6 (set (reg:DI 4 si)
        (reg:DI 38 r9 [180])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [180])
        (nil)))
(insn 198 197 199 6 (set (reg:DI 5 di)
        (reg/f:DI 40 r11 [orig:91 D.7230 ] [91])) mABM.c:807 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 40 r11 [orig:91 D.7230 ] [91])
        (nil)))
(call_insn 199 198 200 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_change_flvl") [flags 0x3]  <function_decl 0x7f05a56eaa00 _change_flvl>) [0 _change_flvl S1 A8])
            (const_int 352 [0x160]))) mABM.c:807 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                            (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                            (const_int 304 [0x130])) [0  S48 A64]))
                                (nil)))))))))
(insn 200 199 201 6 (set (reg:SI 0 ax [190])
        (reg:SI 0 ax)) mABM.c:807 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 201 200 330 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 unsafe+0 S4 A32])
        (reg:SI 0 ax [190])) mABM.c:807 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [190])
        (nil)))
(jump_insn 330 201 331 6 (set (pc)
        (label_ref 302)) 650 {jump}
     (nil)
 -> 302)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 331 330 206)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 92 93 191 192
(code_label 206 331 207 7 322 "" [1 uses])
(note 207 206 208 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 7 (set (reg:XF 0 ax [191])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mABM.c:809 131 {*movxf_internal_rex64}
     (nil))
(insn 209 208 210 7 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [191])) mABM.c:809 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [191])
        (nil)))
(insn 210 209 211 7 (set (reg:XF 0 ax [192])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mABM.c:809 131 {*movxf_internal_rex64}
     (nil))
(insn 211 210 212 7 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [192])) mABM.c:809 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [192])
        (nil)))
(call_insn 212 211 213 7 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:809 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 213 212 214 7 (set (reg:XF 8 st [orig:92 D.7235 ] [92])
        (reg:XF 8 st)) mABM.c:809 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 214 213 215 7 (set (reg:XF 9 st(1) [orig:93 D.7235 ] [93])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 128 [0x80])) [0 conf.direct_thr+0 S16 A128])) mABM.c:809 131 {*movxf_internal_rex64}
     (nil))
(insn 215 214 216 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:93 D.7235 ] [93])
            (reg:XF 8 st [orig:92 D.7235 ] [92]))) mABM.c:809 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:93 D.7235 ] [93])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.7235 ] [92])
            (nil))))
(jump_insn 216 215 220 7 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 302)
            (pc))) mABM.c:809 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 97 98 99 100 101 102 103 104 193 194 195 196 197 198 199 200
(note 220 216 221 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 8 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 8 (set (reg/f:DI 2 cx [orig:94 D.7230 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [193]) [0 *f_4(D)+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [193])
        (nil)))
(insn 223 222 224 8 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 224 223 225 8 (set (reg:DI 1 dx [orig:95 D.7231 ] [95])
        (sign_extend:DI (reg:SI 0 ax [194]))) mABM.c:809 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [194])
        (nil)))
(insn 225 224 226 8 (set (reg:DI 0 ax [195])
        (reg:DI 1 dx [orig:95 D.7231 ] [95])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 226 225 227 8 (parallel [
            (set (reg:DI 0 ax [195])
                (ashift:DI (reg:DI 0 ax [195])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (nil))
(insn 227 226 228 8 (parallel [
            (set (reg:DI 0 ax [195])
                (plus:DI (reg:DI 0 ax [195])
                    (reg:DI 1 dx [orig:95 D.7231 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:95 D.7231 ] [95])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:95 D.7231 ] [95])
                (const_int 5 [0x5]))
            (nil))))
(insn 228 227 229 8 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [195])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [195])
        (nil)))
(insn 229 228 230 8 (set (reg:DI 0 ax [195])
        (reg:DI 0 ax [196])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(insn 230 229 231 8 (set (reg:DI 0 ax [orig:96 D.7231 ] [96])
        (reg:DI 0 ax [195])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [195])
        (nil)))
(insn 231 230 232 8 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.7230 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.7231 ] [96])
                    (reg/f:DI 2 cx [orig:94 D.7230 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:96 D.7231 ] [96])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:94 D.7230 ] [94])
            (nil))))
(insn 232 231 233 8 (set (reg:SI 2 cx [orig:98 D.7232 ] [98])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:97 D.7230 ] [97])
                (const_int 44 [0x2c])) [0 _47->st_indx+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.7230 ] [97])
        (nil)))
(insn 233 232 234 8 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 234 233 235 8 (set (reg/f:DI 4 si [orig:99 D.7230 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [197]) [0 *f_4(D)+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [197])
        (nil)))
(insn 235 234 236 8 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 236 235 237 8 (set (reg:DI 1 dx [orig:100 D.7231 ] [100])
        (sign_extend:DI (reg:SI 0 ax [198]))) mABM.c:809 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [198])
        (nil)))
(insn 237 236 238 8 (set (reg:DI 0 ax [199])
        (reg:DI 1 dx [orig:100 D.7231 ] [100])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 238 237 239 8 (parallel [
            (set (reg:DI 0 ax [199])
                (ashift:DI (reg:DI 0 ax [199])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (nil))
(insn 239 238 240 8 (parallel [
            (set (reg:DI 0 ax [199])
                (plus:DI (reg:DI 0 ax [199])
                    (reg:DI 1 dx [orig:100 D.7231 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.7231 ] [100])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.7231 ] [100])
                (const_int 5 [0x5]))
            (nil))))
(insn 240 239 241 8 (parallel [
            (set (reg:DI 0 ax [200])
                (ashift:DI (reg:DI 0 ax [199])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [199])
        (nil)))
(insn 241 240 242 8 (set (reg:DI 0 ax [199])
        (reg:DI 0 ax [200])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [200])
        (nil)))
(insn 242 241 243 8 (set (reg:DI 0 ax [orig:101 D.7231 ] [101])
        (reg:DI 0 ax [199])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [199])
        (nil)))
(insn 243 242 244 8 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.7230 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.7231 ] [101])
                    (reg/f:DI 4 si [orig:99 D.7230 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.7231 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 4 si [orig:99 D.7230 ] [99])
            (nil))))
(insn 244 243 245 8 (set (reg:SI 0 ax [orig:103 D.7232 ] [103])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:102 D.7230 ] [102])
                (const_int 4 [0x4])) [0 _52->n_nvp+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.7230 ] [102])
        (nil)))
(insn 245 244 246 8 (parallel [
            (set (reg:SI 0 ax [orig:104 D.7232 ] [104])
                (plus:SI (reg:SI 0 ax [orig:103 D.7232 ] [103])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:103 D.7232 ] [103])
        (nil)))
(insn 246 245 247 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 2 cx [orig:98 D.7232 ] [98])
            (reg:SI 0 ax [orig:104 D.7232 ] [104]))) mABM.c:809 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.7232 ] [104])
        (expr_list:REG_DEAD (reg:SI 2 cx [orig:98 D.7232 ] [98])
            (nil))))
(jump_insn 247 246 248 8 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) mABM.c:809 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 201 202 203 204
(note 248 247 249 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 9 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 250 249 251 9 (set (reg/f:DI 2 cx [orig:105 D.7230 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [201]) [0 *f_4(D)+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [201])
        (nil)))
(insn 251 250 252 9 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 252 251 253 9 (set (reg:DI 1 dx [orig:106 D.7231 ] [106])
        (sign_extend:DI (reg:SI 0 ax [202]))) mABM.c:809 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [202])
        (nil)))
(insn 253 252 254 9 (set (reg:DI 0 ax [203])
        (reg:DI 1 dx [orig:106 D.7231 ] [106])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 254 253 255 9 (parallel [
            (set (reg:DI 0 ax [203])
                (ashift:DI (reg:DI 0 ax [203])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (nil))
(insn 255 254 256 9 (parallel [
            (set (reg:DI 0 ax [203])
                (plus:DI (reg:DI 0 ax [203])
                    (reg:DI 1 dx [orig:106 D.7231 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:106 D.7231 ] [106])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:106 D.7231 ] [106])
                (const_int 5 [0x5]))
            (nil))))
(insn 256 255 257 9 (parallel [
            (set (reg:DI 0 ax [204])
                (ashift:DI (reg:DI 0 ax [203])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [203])
        (nil)))
(insn 257 256 258 9 (set (reg:DI 0 ax [203])
        (reg:DI 0 ax [204])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [204])
        (nil)))
(insn 258 257 259 9 (set (reg:DI 0 ax [orig:107 D.7231 ] [107])
        (reg:DI 0 ax [203])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [203])
        (nil)))
(insn 259 258 260 9 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.7230 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 D.7231 ] [107])
                    (reg/f:DI 2 cx [orig:105 D.7230 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:107 D.7231 ] [107])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:105 D.7230 ] [105])
            (nil))))
(insn 260 259 261 9 (set (reg:SI 0 ax [orig:109 D.7232 ] [109])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:108 D.7230 ] [108])
                (const_int 44 [0x2c])) [0 _58->st_indx+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:108 D.7230 ] [108])
        (nil)))
(insn 261 260 262 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 D.7232 ] [109])
            (const_int 1 [0x1]))) mABM.c:809 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:109 D.7232 ] [109])
        (nil)))
(jump_insn 262 261 263 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) mABM.c:809 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 110 111 112 113 114 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221
(note 263 262 264 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 10 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 265 264 266 10 (set (reg/f:DI 38 r9 [orig:110 D.7230 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [205]) [0 *f_4(D)+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [205])
        (nil)))
(insn 266 265 267 10 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 267 266 268 10 (set (reg/f:DI 2 cx [orig:111 D.7230 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [206]) [0 *f_4(D)+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [206])
        (nil)))
(insn 268 267 269 10 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 269 268 270 10 (set (reg:DI 1 dx [orig:112 D.7231 ] [112])
        (sign_extend:DI (reg:SI 0 ax [207]))) mABM.c:809 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [207])
        (nil)))
(insn 270 269 271 10 (set (reg:DI 0 ax [208])
        (reg:DI 1 dx [orig:112 D.7231 ] [112])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 271 270 272 10 (parallel [
            (set (reg:DI 0 ax [208])
                (ashift:DI (reg:DI 0 ax [208])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (nil))
(insn 272 271 273 10 (parallel [
            (set (reg:DI 0 ax [208])
                (plus:DI (reg:DI 0 ax [208])
                    (reg:DI 1 dx [orig:112 D.7231 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:112 D.7231 ] [112])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:112 D.7231 ] [112])
                (const_int 5 [0x5]))
            (nil))))
(insn 273 272 274 10 (parallel [
            (set (reg:DI 0 ax [209])
                (ashift:DI (reg:DI 0 ax [208])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [208])
        (nil)))
(insn 274 273 275 10 (set (reg:DI 0 ax [208])
        (reg:DI 0 ax [209])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [209])
        (nil)))
(insn 275 274 276 10 (set (reg:DI 0 ax [orig:113 D.7231 ] [113])
        (reg:DI 0 ax [208])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [208])
        (nil)))
(insn 276 275 277 10 (parallel [
            (set (reg/f:DI 40 r11 [orig:114 D.7230 ] [114])
                (plus:DI (reg/f:DI 2 cx [orig:111 D.7230 ] [111])
                    (reg:DI 0 ax [orig:113 D.7231 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:113 D.7231 ] [113])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:111 D.7230 ] [111])
            (nil))))
(insn 277 276 278 10 (set (reg:SI 37 r8 [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sh+0 S4 A64])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 278 277 279 10 (set (reg:DI 3 bx [211])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sh+8 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 279 278 280 10 (set (reg:SI 39 r10 [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:809 89 {*movsi_internal}
     (nil))
(insn 280 279 281 10 (set (reg:DI 0 ax [213])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 tl+0 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 281 280 282 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [213])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [213])
        (nil)))
(insn 282 281 283 10 (set (reg:DI 0 ax [214])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 tl+8 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 283 282 284 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [214])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [214])
        (nil)))
(insn 284 283 285 10 (set (reg:DI 0 ax [215])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 tl+16 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 285 284 286 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [215])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [215])
        (nil)))
(insn 286 285 287 10 (set (reg:DI 0 ax [216])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 tl+24 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 287 286 288 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [216])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [216])
        (nil)))
(insn 288 287 289 10 (set (reg:DI 0 ax [217])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 tl+32 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 289 288 290 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [217])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [217])
        (nil)))
(insn 290 289 291 10 (set (reg:DI 0 ax [218])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 tl+40 S8 A64])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 291 290 292 10 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [218])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [218])
        (nil)))
(insn 292 291 293 10 (set (reg:DI 1 dx [219])
        (reg/f:DI 7 sp)) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 293 292 294 10 (parallel [
            (set (reg:DI 4 si [220])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:809 274 {*adddi_1}
     (nil))
(insn 294 293 340 10 (set (reg:DI 0 ax [221])
        (const_int 38 [0x26])) mABM.c:809 87 {*movdi_internal_rex64}
     (nil))
(insn 340 294 341 10 (set (reg:DI 5 di [219])
        (reg:DI 1 dx [219])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [219])
        (nil)))
(insn 341 340 295 10 (set (reg:DI 2 cx [221])
        (reg:DI 0 ax [221])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [221])
        (nil)))
(insn 295 341 296 10 (parallel [
            (set (reg:DI 2 cx [221])
                (const_int 0 [0]))
            (set (reg:DI 5 di [219])
                (plus:DI (ashift:DI (reg:DI 2 cx [221])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [219])))
            (set (reg:DI 4 si [220])
                (plus:DI (ashift:DI (reg:DI 2 cx [221])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [220])))
            (set (mem:BLK (reg:DI 5 di [219]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [220]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [221]))
        ]) mABM.c:809 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [221])
        (expr_list:REG_UNUSED (reg:DI 5 di [219])
            (expr_list:REG_UNUSED (reg:DI 4 si [220])
                (nil)))))
(insn 296 295 297 10 (set (reg:SI 2 cx)
        (reg:SI 37 r8 [210])) mABM.c:809 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [210])
        (nil)))
(insn 297 296 298 10 (set (reg:DI 37 r8)
        (reg:DI 3 bx [211])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx [211])
        (nil)))
(insn 298 297 299 10 (set (reg:SI 1 dx)
        (reg:SI 39 r10 [212])) mABM.c:809 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [212])
        (nil)))
(insn 299 298 300 10 (set (reg:DI 4 si)
        (reg/f:DI 38 r9 [orig:110 D.7230 ] [110])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:110 D.7230 ] [110])
        (nil)))
(insn 300 299 301 10 (set (reg:DI 5 di)
        (reg/f:DI 40 r11 [orig:114 D.7230 ] [114])) mABM.c:809 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 40 r11 [orig:114 D.7230 ] [114])
        (nil)))
(call_insn 301 300 302 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_direct") [flags 0x3]  <function_decl 0x7f05a574e100 _direct>) [0 _direct S1 A8])
            (const_int 352 [0x160]))) mABM.c:809 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 2 cx))
                        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                            (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                            (const_int 304 [0x130])) [0  S48 A64]))
                                (nil)))))))))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              5
;;              10 (FALLTHRU)
;;              8
;;              9
;;              7
;;              6 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 302 301 303 11 321 "" [6 uses])
(note 303 302 304 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:794 273 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222
(code_label 305 304 306 12 320 "" [1 uses])
(note 306 305 308 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 308 306 309 12 (set (reg:SI 0 ax [222])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mABM.c:794 89 {*movsi_internal}
     (nil))
(insn 309 308 310 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [222])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:794 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [222])
        (nil)))
(jump_insn 310 309 311 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 307)
            (pc))) mABM.c:794 612 {*jcc_1}
     (nil)
 -> 307)
;;  succ:       3
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 115 116
(note 311 310 312 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 315 13 (set (reg:SI 0 ax [orig:115 D.7232 ] [115])
        (const_int 1 [0x1])) mABM.c:811 89 {*movsi_internal}
     (nil))
(insn 315 312 319 13 (set (reg:SI 0 ax [orig:116 <retval> ] [116])
        (reg:SI 0 ax [orig:115 D.7232 ] [115])) mABM.c:811 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:115 D.7232 ] [115])
        (nil)))
(insn 319 315 322 13 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:116 <retval> ] [116])) mABM.c:812 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:116 <retval> ] [116])
        (nil)))
(insn 322 319 0 13 (use (reg/i:SI 0 ax)) mABM.c:812 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _expected_fly (_expected_fly, funcdef_no=36, decl_uid=4535, cgraph_uid=36)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 84:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 102: point = 0
   Insn 99: point = 0
   Insn 95: point = 1
   Insn 92: point = 3
  BB 7
   Insn 90: point = 4
   Insn 89: point = 4
   Insn 88: point = 5
  BB 2
   Insn 105: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 6
   Insn 84: point = 6
  BB 5
   Insn 81: point = 6
   Insn 80: point = 7
   Insn 79: point = 9
   Insn 78: point = 11
   Insn 77: point = 13
   Insn 76: point = 15
   Insn 75: point = 16
   Insn 74: point = 16
   Insn 73: point = 17
   Insn 72: point = 19
   Insn 71: point = 20
   Insn 70: point = 22
  BB 4
   Insn 68: point = 23
   Insn 67: point = 23
   Insn 66: point = 24
   Insn 65: point = 25
   Insn 64: point = 25
   Insn 63: point = 26
   Insn 62: point = 27
   Insn 61: point = 28
   Insn 60: point = 29
   Insn 59: point = 30
   Insn 58: point = 31
   Insn 57: point = 33
   Insn 56: point = 35
   Insn 55: point = 37
   Insn 54: point = 39
   Insn 53: point = 40
   Insn 52: point = 40
   Insn 51: point = 41
   Insn 50: point = 43
   Insn 49: point = 44
   Insn 48: point = 46
   Insn 47: point = 47
   Insn 46: point = 49
   Insn 45: point = 51
   Insn 44: point = 53
   Insn 43: point = 55
   Insn 42: point = 57
   Insn 41: point = 58
   Insn 40: point = 58
   Insn 39: point = 59
   Insn 38: point = 61
   Insn 37: point = 62
   Insn 36: point = 64
   Insn 35: point = 65
   Insn 34: point = 67
   Insn 33: point = 68
   Insn 32: point = 69
   Insn 31: point = 70
   Insn 30: point = 72
   Insn 29: point = 74
   Insn 28: point = 76
   Insn 27: point = 78
   Insn 26: point = 79
  BB 3
   Insn 24: point = 80
   Insn 23: point = 80
   Insn 22: point = 81
   Insn 21: point = 83
   Insn 20: point = 85
   Insn 19: point = 87
   Insn 18: point = 89
   Insn 17: point = 91
   Insn 16: point = 92
   Insn 15: point = 92
   Insn 14: point = 93
   Insn 13: point = 95
   Insn 12: point = 96
   Insn 11: point = 98
 r59: [84..96]
 r60: [91..93]
 r61: [84..85]
 r62: [82..83]
 r63: [80..81]
 r64: [73..79]
 r65: [75..76]
 r66: [73..74]
 r67: [71..72]
 r68: [30..70]
 r69: [29..69]
 r70: [28..68]
 r71: [66..67]
 r72: [27..65]
 r73: [50..62]
 r74: [57..59]
 r75: [50..51]
 r76: [48..49]
 r77: [26..47]
 r78: [32..44]
 r79: [39..41]
 r80: [32..33]
 r81: [25..31]
 r82: [23..24]
 r83: [8..20]
 r84: [15..17]
 r85: [8..9]
 r86: [6..7]
 r87: [2..3]
 r88: [0..1]
 r89: [97..98]
 r90: [94..95]
 r91: [90..92] [86..87]
 r92: [88..89]
 r93: [77..78]
 r94: [63..64]
 r95: [60..61]
 r96: [56..58] [52..53]
 r97: [54..55]
 r98: [45..46]
 r99: [42..43]
 r100: [38..40] [34..35]
 r101: [36..37]
 r102: [21..22]
 r103: [18..19]
 r104: [14..16] [10..11]
 r105: [12..13]
 r106: [4..5]
Compressing live ranges: from 99 to 76 - 76%
Ranges after the compression:
 r59: [64..73]
 r60: [70..71]
 r61: [64..65]
 r62: [62..63]
 r63: [60..61]
 r64: [54..59]
 r65: [56..57]
 r66: [54..55]
 r67: [52..53]
 r68: [22..51]
 r69: [22..51]
 r70: [22..51]
 r71: [50..51]
 r72: [22..49]
 r73: [38..47]
 r74: [44..45]
 r75: [38..39]
 r76: [36..37]
 r77: [22..35]
 r78: [24..33]
 r79: [30..31]
 r80: [24..25]
 r81: [22..23]
 r82: [20..21]
 r83: [8..17]
 r84: [14..15]
 r85: [8..9]
 r86: [6..7]
 r87: [2..3]
 r88: [0..1]
 r89: [74..75]
 r90: [72..73]
 r91: [70..71] [66..67]
 r92: [68..69]
 r93: [58..59]
 r94: [48..49]
 r95: [46..47]
 r96: [44..45] [40..41]
 r97: [42..43]
 r98: [34..35]
 r99: [32..33]
 r100: [30..31] [26..27]
 r101: [28..29]
 r102: [18..19]
 r103: [16..17]
 r104: [14..15] [10..11]
 r105: [12..13]
 r106: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 59
changing reg in insn 32
changing reg in insn 60
changing reg in insn 33
changing reg in insn 61
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 62
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 63
changing reg in insn 49
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 73
changing reg in insn 76
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 92
changing reg in insn 95
changing reg in insn 95
changing reg in insn 99
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 27
changing reg in insn 28
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 44
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 56
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 88
changing reg in insn 89
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 65.


_expected_fly

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={47d,47u} r1={9d,9u,2e} r2={5d,3u} r3={1d,1u} r4={4d,3u} r5={4d,3u} r6={1d,28u} r7={1d,15u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={25d,3u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={3d,1u} r39={3d,4u,2e} r40={3d,2u} r41={1d,1u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 279{153d,122u,4e} in 81{80 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:816 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:816 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 105 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:818 89 {*movsi_internal}
     (nil))
(jump_insn 105 7 106 2 (set (pc)
        (label_ref 85)) mABM.c:818 650 {jump}
     (nil)
 -> 85)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 87)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 89 90 91 92
(code_label 87 106 10 3 331 "" [1 uses])
(note 10 87 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 2 cx [orig:59 D.7236 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [89]) [0 *f_4(D)+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:60 D.7237 ] [60])
        (sign_extend:DI (reg:SI 0 ax [90]))) mABM.c:819 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [90])
        (nil)))
(insn 15 14 16 3 (set (reg:DI 0 ax [91])
        (reg:DI 1 dx [orig:60 D.7237 ] [60])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [91])
                (ashift:DI (reg:DI 0 ax [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [91])
                (plus:DI (reg:DI 0 ax [91])
                    (reg:DI 1 dx [orig:60 D.7237 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7237 ] [60])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:60 D.7237 ] [60])
                (const_int 5 [0x5]))
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [92])
                (ashift:DI (reg:DI 0 ax [91])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [91])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [91])
        (reg:DI 0 ax [92])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:61 D.7237 ] [61])
        (reg:DI 0 ax [91])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [91])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.7236 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.7237 ] [61])
                    (reg/f:DI 2 cx [orig:59 D.7236 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.7237 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:59 D.7236 ] [59])
            (nil))))
(insn 22 21 23 3 (set (reg:SI 0 ax [orig:63 D.7238 ] [63])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:62 D.7236 ] [62])
                (const_int 40 [0x28])) [0 _8->ready+0 S4 A64])) mABM.c:819 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.7236 ] [62])
        (nil)))
(insn 23 22 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.7238 ] [63])
            (const_int 0 [0]))) mABM.c:819 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.7238 ] [63])
        (nil)))
(jump_insn 24 23 25 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) mABM.c:819 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 93 94 95 96 97 98 99 100 101
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:64 D.7239 ] [64])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl.dV+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 4 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 1 dx [orig:65 D.7237 ] [65])
        (sign_extend:DI (reg:SI 1 dx [93]))) mABM.c:819 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [93])
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 1 dx [orig:66 D.7237 ] [66])
                (ashift:DI (reg:DI 1 dx [orig:65 D.7237 ] [65])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.7237 ] [65])
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.7239 ] [67])
                (plus:DI (reg/f:DI 0 ax [orig:64 D.7239 ] [64])
                    (reg:DI 1 dx [orig:66 D.7237 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.7237 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.7239 ] [64])
            (nil))))
(insn 31 30 32 4 (set (reg:XF 37 r8 [orig:68 D.7240 ] [68])
        (mem:XF (reg/f:DI 0 ax [orig:67 D.7239 ] [67]) [0 *_13+0 S16 A128])) mABM.c:819 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.7239 ] [67])
        (nil)))
(insn 32 31 33 4 (set (reg:XF 4 si [orig:69 D.7240 ] [69])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:819 131 {*movxf_internal_rex64}
     (nil))
(insn 33 32 34 4 (set (reg:XF 1 dx [orig:70 D.7240 ] [70])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:819 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [orig:71 D.7238 ] [71])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:SI 3 bx [orig:72 D.7238 ] [72])
                (ashift:SI (reg:SI 0 ax [orig:71 D.7238 ] [71])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 D.7238 ] [71])
        (nil)))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 40 r11 [orig:73 D.7236 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [94]) [0 *f_4(D)+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 38 37 39 4 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 39 r10 [orig:74 D.7237 ] [74])
        (sign_extend:DI (reg:SI 0 ax [95]))) mABM.c:819 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 0 ax [96])
        (reg:DI 39 r10 [orig:74 D.7237 ] [74])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 0 ax [96])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 0 ax [96])
                (plus:DI (reg:DI 0 ax [96])
                    (reg:DI 39 r10 [orig:74 D.7237 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:74 D.7237 ] [74])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 39 r10 [orig:74 D.7237 ] [74])
                (const_int 5 [0x5]))
            (nil))))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [97])
                (ashift:DI (reg:DI 0 ax [96])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 44 43 45 4 (set (reg:DI 0 ax [96])
        (reg:DI 0 ax [97])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:75 D.7237 ] [75])
        (reg:DI 0 ax [96])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.7236 ] [76])
                (plus:DI (reg:DI 0 ax [orig:75 D.7237 ] [75])
                    (reg/f:DI 40 r11 [orig:73 D.7236 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.7237 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 40 r11 [orig:73 D.7236 ] [73])
            (nil))))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 40 r11 [orig:77 D.7241 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:76 D.7236 ] [76])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.7236 ] [76])
        (nil)))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 41 r12 [orig:78 D.7236 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [98]) [0 *f_4(D)+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 50 49 51 4 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 39 r10 [orig:79 D.7237 ] [79])
        (sign_extend:DI (reg:SI 0 ax [99]))) mABM.c:819 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(insn 52 51 53 4 (set (reg:DI 0 ax [100])
        (reg:DI 39 r10 [orig:79 D.7237 ] [79])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 0 ax [100])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg:DI 0 ax [100])
                (plus:DI (reg:DI 0 ax [100])
                    (reg:DI 39 r10 [orig:79 D.7237 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:79 D.7237 ] [79])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 39 r10 [orig:79 D.7237 ] [79])
                (const_int 5 [0x5]))
            (nil))))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 0 ax [101])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 56 55 57 4 (set (reg:DI 0 ax [100])
        (reg:DI 0 ax [101])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 57 56 58 4 (set (reg:DI 0 ax [orig:80 D.7237 ] [80])
        (reg:DI 0 ax [100])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 58 57 59 4 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.7236 ] [81])
                (plus:DI (reg:DI 0 ax [orig:80 D.7237 ] [80])
                    (reg/f:DI 41 r12 [orig:78 D.7236 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:80 D.7237 ] [80])
        (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:78 D.7236 ] [78])
            (nil))))
(insn 59 58 60 4 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 37 r8 [orig:68 D.7240 ] [68])) mABM.c:819 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 37 r8 [orig:68 D.7240 ] [68])
        (nil)))
(insn 60 59 61 4 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 4 si [orig:69 D.7240 ] [69])) mABM.c:819 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 4 si [orig:69 D.7240 ] [69])
        (nil)))
(insn 61 60 62 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 1 dx [orig:70 D.7240 ] [70])) mABM.c:819 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 1 dx [orig:70 D.7240 ] [70])
        (nil)))
(insn 62 61 63 4 (set (reg:SI 1 dx)
        (reg:SI 3 bx [orig:72 D.7238 ] [72])) mABM.c:819 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:72 D.7238 ] [72])
        (nil)))
(insn 63 62 64 4 (set (reg:DI 4 si)
        (reg/f:DI 40 r11 [orig:77 D.7241 ] [77])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 40 r11 [orig:77 D.7241 ] [77])
        (nil)))
(insn 64 63 65 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:81 D.7236 ] [81])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.7236 ] [81])
        (nil)))
(call_insn 65 64 66 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_position") [flags 0x3]  <function_decl 0x7f05a56eab00 _position>) [0 _position S1 A8])
            (const_int 48 [0x30]))) mABM.c:819 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 16 [0x10])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 32 [0x20])) [0  S16 A128]))
                            (nil))))))))
(insn 66 65 67 4 (set (reg:SI 0 ax [orig:82 D.7238 ] [82])
        (reg:SI 0 ax)) mABM.c:819 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 67 66 68 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:82 D.7238 ] [82])
            (const_int 0 [0]))) mABM.c:819 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:82 D.7238 ] [82])
        (nil)))
(jump_insn 68 67 69 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) mABM.c:819 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 102 103 104 105
(note 69 68 70 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 5 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 5 (set (reg/f:DI 2 cx [orig:83 D.7236 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [102]) [0 *f_4(D)+0 S8 A64])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (nil)))
(insn 72 71 73 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:819 89 {*movsi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:DI 1 dx [orig:84 D.7237 ] [84])
        (sign_extend:DI (reg:SI 0 ax [103]))) mABM.c:819 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [103])
        (nil)))
(insn 74 73 75 5 (set (reg:DI 0 ax [104])
        (reg:DI 1 dx [orig:84 D.7237 ] [84])) mABM.c:819 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 0 ax [104])
                (ashift:DI (reg:DI 0 ax [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 0 ax [104])
                (plus:DI (reg:DI 0 ax [104])
                    (reg:DI 1 dx [orig:84 D.7237 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:84 D.7237 ] [84])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.7237 ] [84])
                (const_int 5 [0x5]))
            (nil))))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 0 ax [105])
                (ashift:DI (reg:DI 0 ax [104])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 78 77 79 5 (set (reg:DI 0 ax [104])
        (reg:DI 0 ax [105])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 79 78 80 5 (set (reg:DI 0 ax [orig:85 D.7237 ] [85])
        (reg:DI 0 ax [104])) mABM.c:819 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 80 79 81 5 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.7236 ] [86])
                (plus:DI (reg:DI 0 ax [orig:85 D.7237 ] [85])
                    (reg/f:DI 2 cx [orig:83 D.7236 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:819 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.7237 ] [85])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:83 D.7236 ] [83])
            (nil))))
(insn 81 80 82 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:86 D.7236 ] [86])
                (const_int 40 [0x28])) [0 _32->ready+0 S4 A64])
        (const_int 0 [0])) mABM.c:819 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:86 D.7236 ] [86])
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 82 81 83 6 330 "" [2 uses])
(note 83 82 84 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:818 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(code_label 85 84 86 7 329 "" [1 uses])
(note 86 85 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 88 86 89 7 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:818 89 {*movsi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [106])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N_f+0 S4 A32]))) mABM.c:818 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [106])
        (nil)))
(jump_insn 90 89 91 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) mABM.c:818 612 {*jcc_1}
     (nil)
 -> 87)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 91 90 92 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 95 8 (set (reg:SI 0 ax [orig:87 D.7238 ] [87])
        (const_int 1 [0x1])) mABM.c:821 89 {*movsi_internal}
     (nil))
(insn 95 92 99 8 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:87 D.7238 ] [87])) mABM.c:821 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:87 D.7238 ] [87])
        (nil)))
(insn 99 95 102 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) mABM.c:822 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:88 <retval> ] [88])
        (nil)))
(insn 102 99 0 8 (use (reg/i:SI 0 ax)) mABM.c:822 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _draw_dV (_draw_dV, funcdef_no=37, decl_uid=4544, cgraph_uid=37)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 24
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 33
changing reg in insn 36
changing reg in insn 36
changing reg in insn 40
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 29
changing reg in insn 30
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.


_draw_dV

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={9d,8u} r1={6d,4u} r2={2d} r3={1d,1u} r4={2d,1u} r5={2d,1u} r6={1d,16u} r7={1d,10u} r8={4d,4u} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 128{81d,47u,0e} in 26{25 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 N_f+0 S4 A32])
        (reg:SI 5 di [ N_f ])) mABM.c:824 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ N_f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])
        (reg:DI 4 si [ tl ])) mABM.c:824 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ tl ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 46 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mABM.c:826 89 {*movsi_internal}
     (nil))
(jump_insn 46 7 47 2 (set (pc)
        (label_ref 26)) mABM.c:826 650 {jump}
     (nil)
 -> 26)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 47 46 28)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 69 70
(code_label 28 47 10 3 335 "" [1 uses])
(note 10 28 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tl+0 S8 A64])) mABM.c:827 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:59 D.7242 ] [59])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 40 [0x28])) [0 tl_4(D)->dV+0 S8 A64])) mABM.c:827 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 1 dx [70])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:827 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:60 D.7243 ] [60])
        (sign_extend:DI (reg:SI 1 dx [70]))) mABM.c:827 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [70])
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 1 dx [orig:61 D.7243 ] [61])
                (ashift:DI (reg:DI 1 dx [orig:60 D.7243 ] [60])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:827 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.7243 ] [60])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 3 (parallel [
            (set (reg/f:DI 3 bx [orig:62 D.7242 ] [62])
                (plus:DI (reg/f:DI 0 ax [orig:59 D.7242 ] [59])
                    (reg:DI 1 dx [orig:61 D.7243 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:827 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.7243 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.7242 ] [59])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 17 16 18 3 (set (reg:XF 0 ax [orig:63 D.7244 ] [63])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 304 [0x130])) [0 conf.sig_V+0 S16 A128])) mABM.c:827 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg:XF 8 st [orig:64 D.7244 ] [64])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 304 [0x130])) [0 conf.sig_V+0 S16 A128])) mABM.c:827 131 {*movxf_internal_rex64}
     (nil))
(insn 19 18 20 3 (set (reg:XF 8 st [orig:65 D.7244 ] [65])
        (neg:XF (reg:XF 8 st [orig:64 D.7244 ] [64]))) mABM.c:827 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7244 ] [64])
        (nil)))
(insn 20 19 21 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [orig:63 D.7244 ] [63])) mABM.c:827 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:63 D.7244 ] [63])
        (nil)))
(insn 21 20 22 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:65 D.7244 ] [65])) mABM.c:827 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.7244 ] [65])
        (nil)))
(call_insn 22 21 23 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("frand") [flags 0x41]  <function_decl 0x7f05a5959f00 frand>) [0 frand S1 A8])
            (const_int 32 [0x20]))) mABM.c:827 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 23 22 24 3 (set (reg:XF 8 st [orig:66 D.7244 ] [66])
        (reg:XF 8 st)) mABM.c:827 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 24 23 25 3 (set (mem:XF (reg/f:DI 3 bx [orig:62 D.7242 ] [62]) [0 *_8+0 S16 A128])
        (reg:XF 8 st [orig:66 D.7244 ] [66])) mABM.c:827 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.7244 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:62 D.7242 ] [62])
            (nil))))
(insn 25 24 26 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:826 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 71
(code_label 26 25 27 4 334 "" [1 uses])
(note 27 26 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 27 30 4 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mABM.c:826 89 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [71])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 N_f+0 S4 A32]))) mABM.c:826 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) mABM.c:826 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 28)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 67 68
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 36 5 (set (reg:SI 0 ax [orig:67 D.7245 ] [67])
        (const_int 1 [0x1])) mABM.c:829 89 {*movsi_internal}
     (nil))
(insn 36 33 40 5 (set (reg:SI 0 ax [orig:68 <retval> ] [68])
        (reg:SI 0 ax [orig:67 D.7245 ] [67])) mABM.c:829 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.7245 ] [67])
        (nil)))
(insn 40 36 43 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:68 <retval> ] [68])) mABM.c:830 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 <retval> ] [68])
        (nil)))
(insn 43 40 0 5 (use (reg/i:SI 0 ax)) mABM.c:830 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _evolution (_evolution, funcdef_no=38, decl_uid=4556, cgraph_uid=38)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=416, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=400, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 17:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=114 from oldreg=66, assigning class DIREG to r114
      Creating newreg=115 from oldreg=68, assigning class CREG to r115
   17: {r115:DI=0;r114:DI=r115:DI<<0x3+r114:DI;r67:DI=r115:DI<<0x3+r67:DI;[r114:DI]=[r67:DI];use r115:DI;}
      REG_UNUSED r68:DI
      REG_UNUSED r67:DI
      REG_UNUSED r66:DI
    Inserting insn reload before:
  119: r114:DI=r66:DI
  120: r115:DI=r68:DI

          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 42:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 47:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=116 from oldreg=81, assigning class DIREG to r116
      Creating newreg=117 from oldreg=83, assigning class CREG to r117
   47: {r117:DI=0;r116:DI=r117:DI<<0x3+r116:DI;r82:DI=r117:DI<<0x3+r82:DI;[r116:DI]=[r82:DI];use r117:DI;}
      REG_UNUSED r83:DI
      REG_UNUSED r82:DI
      REG_UNUSED r81:DI
    Inserting insn reload before:
  121: r116:DI=r81:DI
  122: r117:DI=r83:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 68:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=118 from oldreg=92, assigning class DIREG to r118
      Creating newreg=119 from oldreg=94, assigning class CREG to r119
   68: {r119:DI=0;r118:DI=r119:DI<<0x3+r118:DI;r93:DI=r119:DI<<0x3+r93:DI;[r118:DI]=[r93:DI];use r119:DI;}
      REG_UNUSED r94:DI
      REG_UNUSED r93:DI
      REG_UNUSED r92:DI
    Inserting insn reload before:
  123: r118:DI=r92:DI
  124: r119:DI=r94:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 79:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=120 from oldreg=99, assigning class DIREG to r120
      Creating newreg=121 from oldreg=101, assigning class CREG to r121
   79: {r121:DI=0;r120:DI=r121:DI<<0x3+r120:DI;r100:DI=r121:DI<<0x3+r100:DI;[r120:DI]=[r100:DI];use r121:DI;}
      REG_UNUSED r101:DI
      REG_UNUSED r100:DI
      REG_UNUSED r99:DI
    Inserting insn reload before:
  125: r120:DI=r99:DI
  126: r121:DI=r101:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 102:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=122 from oldreg=110, assigning class DIREG to r122
      Creating newreg=123 from oldreg=112, assigning class CREG to r123
  102: {r123:DI=0;r122:DI=r123:DI<<0x3+r122:DI;r111:DI=r123:DI<<0x3+r111:DI;[r122:DI]=[r111:DI];use r123:DI;}
      REG_UNUSED r112:DI
      REG_UNUSED r111:DI
      REG_UNUSED r110:DI
    Inserting insn reload before:
  127: r122:DI=r110:DI
  128: r123:DI=r112:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 116: point = 0
   Insn 113: point = 0
   Insn 109: point = 1
   Insn 106: point = 3
   Insn 105: point = 4
   Insn 104: point = 4
   Insn 103: point = 5
   Insn 102: point = 6
   Insn 128: point = 7
	Hard reg 0 is preferable by r123 with profit 1
   Insn 127: point = 9
	Hard reg 1 is preferable by r122 with profit 1
   Insn 101: point = 11
   Insn 100: point = 12
   Insn 99: point = 13
   Insn 98: point = 14
   Insn 97: point = 15
   Insn 96: point = 16
   Insn 95: point = 16
   Insn 94: point = 17
   Insn 93: point = 18
   Insn 92: point = 19
   Insn 91: point = 20
   Insn 90: point = 21
   Insn 89: point = 22
   Insn 88: point = 23
   Insn 87: point = 24
   Insn 86: point = 25
   Insn 85: point = 26
   Insn 84: point = 27
   Insn 83: point = 28
   Insn 82: point = 29
   Insn 81: point = 30
   Insn 80: point = 31
   Insn 79: point = 32
   Insn 126: point = 33
	Hard reg 0 is preferable by r121 with profit 1
   Insn 125: point = 35
	Hard reg 1 is preferable by r120 with profit 1
   Insn 78: point = 37
   Insn 77: point = 38
   Insn 76: point = 39
   Insn 75: point = 40
   Insn 74: point = 41
   Insn 73: point = 42
   Insn 72: point = 43
   Insn 71: point = 44
   Insn 70: point = 44
   Insn 69: point = 45
   Insn 68: point = 46
   Insn 124: point = 47
	Hard reg 0 is preferable by r119 with profit 1
   Insn 123: point = 49
	Hard reg 1 is preferable by r118 with profit 1
   Insn 67: point = 51
   Insn 66: point = 52
   Insn 65: point = 53
   Insn 64: point = 54
   Insn 63: point = 55
   Insn 62: point = 56
   Insn 61: point = 57
   Insn 60: point = 58
   Insn 59: point = 59
   Insn 58: point = 60
   Insn 57: point = 61
   Insn 56: point = 62
   Insn 55: point = 63
   Insn 54: point = 64
   Insn 53: point = 65
   Insn 52: point = 66
   Insn 51: point = 67
   Insn 50: point = 68
   Insn 49: point = 68
   Insn 48: point = 69
   Insn 47: point = 70
   Insn 122: point = 71
	Hard reg 0 is preferable by r117 with profit 1
   Insn 121: point = 73
	Hard reg 1 is preferable by r116 with profit 1
   Insn 46: point = 75
   Insn 45: point = 76
   Insn 44: point = 77
   Insn 43: point = 78
   Insn 42: point = 79
   Insn 41: point = 80
   Insn 40: point = 80
   Insn 39: point = 81
   Insn 38: point = 82
   Insn 37: point = 83
   Insn 36: point = 84
   Insn 35: point = 85
   Insn 34: point = 86
   Insn 33: point = 87
   Insn 32: point = 88
   Insn 31: point = 89
   Insn 30: point = 90
   Insn 29: point = 91
   Insn 28: point = 92
   Insn 27: point = 93
   Insn 26: point = 94
   Insn 25: point = 95
   Insn 24: point = 96
   Insn 23: point = 97
   Insn 22: point = 98
   Insn 21: point = 98
   Insn 20: point = 99
   Insn 19: point = 100
   Insn 18: point = 101
   Insn 17: point = 102
   Insn 120: point = 103
	Hard reg 0 is preferable by r115 with profit 1
   Insn 119: point = 105
	Hard reg 1 is preferable by r114 with profit 1
   Insn 16: point = 107
   Insn 15: point = 108
   Insn 14: point = 109
   Insn 13: point = 110
   Insn 12: point = 111
   Insn 8: point = 112
   Insn 7: point = 113
   Insn 6: point = 114
   Insn 5: point = 116
   Insn 4: point = 117
   Insn 3: point = 118
   Insn 2: point = 118
 r59: [2..3]
 r60: [0..1]
 r61: [112..114]
 r62: [115..117]
 r63: [113..116]
 r64: [99..111]
 r65: [98..110]
 r66: [106..109]
 r67: [102..108]
 r68: [104..107]
 r69: [100..101]
 r70: [96..97]
 r71: [81..95]
 r72: [80..94]
 r73: [92..93]
 r74: [90..91]
 r75: [88..89]
 r76: [86..87]
 r77: [84..85]
 r78: [82..83]
 r79: [69..79]
 r80: [68..78]
 r81: [74..77]
 r82: [70..76]
 r83: [72..75]
 r84: [45..67]
 r85: [44..66]
 r86: [64..65]
 r87: [62..63]
 r88: [60..61]
 r89: [58..59]
 r90: [56..57]
 r91: [54..55]
 r92: [50..53]
 r93: [46..52]
 r94: [48..51]
 r95: [19..43]
 r96: [18..42]
 r97: [17..41]
 r98: [16..40]
 r99: [36..39]
 r100: [32..38]
 r101: [34..37]
 r102: [30..31]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [20..21]
 r108: [5..15]
 r109: [4..14]
 r110: [10..13]
 r111: [6..12]
 r112: [8..11]
 r114: [102..105]
 r115: [102..103]
 r116: [70..73]
 r117: [70..71]
 r118: [46..49]
 r119: [46..47]
 r120: [32..35]
 r121: [32..33]
 r122: [6..9]
 r123: [6..7]
Compressing live ranges: from 118 to 78 - 66%
Ranges after the compression:
 r59: [2..3]
 r60: [0..1]
 r61: [74..75]
 r62: [76..77]
 r63: [74..77]
 r64: [66..73]
 r65: [66..73]
 r66: [72..73]
 r67: [68..73]
 r68: [70..73]
 r69: [66..67]
 r70: [64..65]
 r71: [52..63]
 r72: [52..63]
 r73: [62..63]
 r74: [60..61]
 r75: [58..59]
 r76: [56..57]
 r77: [54..55]
 r78: [52..53]
 r79: [46..51]
 r80: [46..51]
 r81: [50..51]
 r82: [46..51]
 r83: [48..51]
 r84: [28..45]
 r85: [28..45]
 r86: [44..45]
 r87: [42..43]
 r88: [40..41]
 r89: [38..39]
 r90: [36..37]
 r91: [34..35]
 r92: [32..33]
 r93: [28..33]
 r94: [30..33]
 r95: [10..27]
 r96: [10..27]
 r97: [10..27]
 r98: [10..27]
 r99: [26..27]
 r100: [22..27]
 r101: [24..27]
 r102: [20..21]
 r103: [18..19]
 r104: [16..17]
 r105: [14..15]
 r106: [12..13]
 r107: [10..11]
 r108: [4..9]
 r109: [4..9]
 r110: [8..9]
 r111: [4..9]
 r112: [6..9]
 r114: [68..71]
 r115: [68..69]
 r116: [46..49]
 r117: [46..47]
 r118: [28..31]
 r119: [28..29]
 r120: [22..25]
 r121: [22..23]
 r122: [4..7]
 r123: [4..5]
	 Assigning to 114 (cl=DIREG, orig=66, freq=2, tfirst=114, tfreq=2)...
	   Assign 5 to reload r114 (freq=2)
	 Assigning to 115 (cl=CREG, orig=68, freq=2, tfirst=115, tfreq=2)...
	   Assign 2 to reload r115 (freq=2)
	 Assigning to 116 (cl=DIREG, orig=81, freq=2, tfirst=116, tfreq=2)...
	   Assign 5 to reload r116 (freq=2)
	 Assigning to 117 (cl=CREG, orig=83, freq=2, tfirst=117, tfreq=2)...
	   Assign 2 to reload r117 (freq=2)
	 Assigning to 118 (cl=DIREG, orig=92, freq=2, tfirst=118, tfreq=2)...
	   Assign 5 to reload r118 (freq=2)
	 Assigning to 119 (cl=CREG, orig=94, freq=2, tfirst=119, tfreq=2)...
	   Assign 2 to reload r119 (freq=2)
	 Assigning to 120 (cl=DIREG, orig=99, freq=2, tfirst=120, tfreq=2)...
	   Assign 5 to reload r120 (freq=2)
	 Assigning to 121 (cl=CREG, orig=101, freq=2, tfirst=121, tfreq=2)...
	   Assign 2 to reload r121 (freq=2)
	 Assigning to 122 (cl=DIREG, orig=110, freq=2, tfirst=122, tfreq=2)...
	   Assign 5 to reload r122 (freq=2)
	 Assigning to 123 (cl=CREG, orig=112, freq=2, tfirst=123, tfreq=2)...
	   Assign 2 to reload r123 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=416, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=400, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 106
changing reg in insn 109
changing reg in insn 109
changing reg in insn 113
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 4
changing reg in insn 5
changing reg in insn 7
changing reg in insn 12
changing reg in insn 20
changing reg in insn 13
changing reg in insn 21
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 39
changing reg in insn 26
changing reg in insn 40
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 48
changing reg in insn 43
changing reg in insn 49
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 46
changing reg in insn 51
changing reg in insn 69
changing reg in insn 52
changing reg in insn 70
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 67
changing reg in insn 72
changing reg in insn 92
changing reg in insn 73
changing reg in insn 93
changing reg in insn 74
changing reg in insn 94
changing reg in insn 75
changing reg in insn 95
changing reg in insn 76
changing reg in insn 79
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 97
changing reg in insn 103
changing reg in insn 98
changing reg in insn 104
changing reg in insn 99
changing reg in insn 102
changing reg in insn 100
changing reg in insn 102
changing reg in insn 102
changing reg in insn 101
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 105.


_evolution

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={32d,27u} r1={17d,11u} r2={25d,24u} r4={23d,17u} r5={23d,17u} r6={1d,44u} r7={1d,41u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={9d} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={12d,5u} r38={12d,5u} r39={7d,1u} r40={7d,1u} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 576{382d,194u,0e} in 115{109 regular + 6 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:832 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:832 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(insn 4 3 5 2 (set (reg:SI 0 ax [62])
        (reg:SI 1 dx [ sh ])) mABM.c:832 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ sh ])
        (nil)))
(insn 5 4 6 2 (set (reg:DI 2 cx [63])
        (reg:DI 2 cx [ sh+8 ])) mABM.c:832 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ sh+8 ])
        (nil)))
(insn 6 5 7 2 (set (reg:TI 0 ax [61])
        (reg:TI 0 ax [62])) mABM.c:832 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [62])
        (nil)))
(insn 7 6 8 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [63])) mABM.c:832 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [63])
        (nil)))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [61])) mABM.c:832 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [61])
        (nil)))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg:SI 38 r9 [64])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N_f+0 S4 A32])) mABM.c:834 89 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 37 r8 [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:834 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 1 dx [66])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:834 274 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si [67])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:834 267 {*leadi}
     (nil))
(insn 16 15 119 2 (set (reg:DI 0 ax [68])
        (const_int 38 [0x26])) mABM.c:834 87 {*movdi_internal_rex64}
     (nil))
(insn 119 16 120 2 (set (reg:DI 5 di [66])
        (reg:DI 1 dx [66])) mABM.c:834 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [66])
        (nil)))
(insn 120 119 17 2 (set (reg:DI 2 cx [68])
        (reg:DI 0 ax [68])) mABM.c:834 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [68])
        (nil)))
(insn 17 120 18 2 (parallel [
            (set (reg:DI 2 cx [68])
                (const_int 0 [0]))
            (set (reg:DI 5 di [66])
                (plus:DI (ashift:DI (reg:DI 2 cx [68])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [66])))
            (set (reg:DI 4 si [67])
                (plus:DI (ashift:DI (reg:DI 2 cx [68])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [67])))
            (set (mem:BLK (reg:DI 5 di [66]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [67]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [68]))
        ]) mABM.c:834 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [68])
        (expr_list:REG_UNUSED (reg:DI 5 di [66])
            (expr_list:REG_UNUSED (reg:DI 4 si [67])
                (nil)))))
(insn 18 17 19 2 (set (reg:XF 0 ax [69])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 368 [0x170])) [0 t+0 S16 A128])) mABM.c:834 131 {*movxf_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [69])) mABM.c:834 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [69])
        (nil)))
(insn 20 19 21 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [64])) mABM.c:834 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [64])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [65])) mABM.c:834 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [65])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_get_ready") [flags 0x3]  <function_decl 0x7f05a571f100 _get_ready>) [0 _get_ready S1 A8])
            (const_int 320 [0x140]))) mABM.c:834 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                (const_int 16 [0x10])) [0  S304 A128]))
                    (nil))))))
(insn 23 22 24 2 (set (reg:SI 0 ax [70])
        (reg:SI 0 ax)) mABM.c:834 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 24 23 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_f+0 S4 A32])
        (reg:SI 0 ax [70])) mABM.c:834 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [70])
        (nil)))
(insn 25 24 26 2 (set (reg:SI 1 dx [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_f+0 S4 A32])) mABM.c:836 89 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:DI 2 cx [73])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 2 cx [73])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [73])
        (nil)))
(insn 29 28 30 2 (set (reg:DI 2 cx [74])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 2 cx [74])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [74])
        (nil)))
(insn 31 30 32 2 (set (reg:DI 2 cx [75])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 2 cx [75])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [75])
        (nil)))
(insn 33 32 34 2 (set (reg:DI 2 cx [76])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 2 cx [76])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [76])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 2 cx [77])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg:DI 2 cx [77])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [77])
        (nil)))
(insn 37 36 38 2 (set (reg:DI 2 cx [78])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:836 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 2 cx [78])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [78])
        (nil)))
(insn 39 38 40 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [71])) mABM.c:836 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [71])
        (nil)))
(insn 40 39 41 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [72])) mABM.c:836 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(call_insn 41 40 42 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_suffle_list") [flags 0x3]  <function_decl 0x7f05a571f300 _suffle_list>) [0 _suffle_list S1 A8])
            (const_int 48 [0x30]))) mABM.c:836 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S48 A64]))
                (nil)))))
(insn 42 41 43 2 (parallel [
            (set (reg:DI 38 r9 [79])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int 320 [0x140])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:838 274 {*adddi_1}
     (nil))
(insn 43 42 44 2 (set (reg:SI 37 r8 [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N_f+0 S4 A32])) mABM.c:838 89 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 1 dx [81])
        (reg/f:DI 7 sp)) mABM.c:838 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 4 si [82])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:838 267 {*leadi}
     (nil))
(insn 46 45 121 2 (set (reg:DI 0 ax [83])
        (const_int 38 [0x26])) mABM.c:838 87 {*movdi_internal_rex64}
     (nil))
(insn 121 46 122 2 (set (reg:DI 5 di [81])
        (reg:DI 1 dx [81])) mABM.c:838 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [81])
        (nil)))
(insn 122 121 47 2 (set (reg:DI 2 cx [83])
        (reg:DI 0 ax [83])) mABM.c:838 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 47 122 48 2 (parallel [
            (set (reg:DI 2 cx [83])
                (const_int 0 [0]))
            (set (reg:DI 5 di [81])
                (plus:DI (ashift:DI (reg:DI 2 cx [83])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [81])))
            (set (reg:DI 4 si [82])
                (plus:DI (ashift:DI (reg:DI 2 cx [83])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [82])))
            (set (mem:BLK (reg:DI 5 di [81]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [82]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [83]))
        ]) mABM.c:838 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [83])
        (expr_list:REG_UNUSED (reg:DI 5 di [81])
            (expr_list:REG_UNUSED (reg:DI 4 si [82])
                (nil)))))
(insn 48 47 49 2 (set (reg:DI 4 si)
        (reg:DI 38 r9 [79])) mABM.c:838 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 38 r9 [79])
        (nil)))
(insn 49 48 50 2 (set (reg:SI 5 di)
        (reg:SI 37 r8 [80])) mABM.c:838 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [80])
        (nil)))
(call_insn 50 49 51 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_draw_dV") [flags 0x3]  <function_decl 0x7f05a574e400 _draw_dV>) [0 _draw_dV S1 A8])
            (const_int 304 [0x130]))) mABM.c:838 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 51 50 52 2 (set (reg:SI 38 r9 [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_f+0 S4 A32])) mABM.c:840 89 {*movsi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:DI 37 r8 [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg:DI 0 ax [86])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [86])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [86])
        (nil)))
(insn 55 54 56 2 (set (reg:DI 0 ax [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [87])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(insn 57 56 58 2 (set (reg:DI 0 ax [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [88])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(insn 59 58 60 2 (set (reg:DI 0 ax [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [89])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 61 60 62 2 (set (reg:DI 0 ax [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [90])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(insn 63 62 64 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [91])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [91])
        (nil)))
(insn 65 64 66 2 (set (reg:DI 1 dx [92])
        (reg/f:DI 7 sp)) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 2 (set (reg:DI 4 si [93])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:840 267 {*leadi}
     (nil))
(insn 67 66 123 2 (set (reg:DI 0 ax [94])
        (const_int 38 [0x26])) mABM.c:840 87 {*movdi_internal_rex64}
     (nil))
(insn 123 67 124 2 (set (reg:DI 5 di [92])
        (reg:DI 1 dx [92])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [92])
        (nil)))
(insn 124 123 68 2 (set (reg:DI 2 cx [94])
        (reg:DI 0 ax [94])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [94])
        (nil)))
(insn 68 124 69 2 (parallel [
            (set (reg:DI 2 cx [94])
                (const_int 0 [0]))
            (set (reg:DI 5 di [92])
                (plus:DI (ashift:DI (reg:DI 2 cx [94])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [92])))
            (set (reg:DI 4 si [93])
                (plus:DI (ashift:DI (reg:DI 2 cx [94])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [93])))
            (set (mem:BLK (reg:DI 5 di [92]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [93]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [94]))
        ]) mABM.c:840 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [94])
        (expr_list:REG_UNUSED (reg:DI 5 di [92])
            (expr_list:REG_UNUSED (reg:DI 4 si [93])
                (nil)))))
(insn 69 68 70 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [84])) mABM.c:840 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [84])
        (nil)))
(insn 70 69 71 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [85])) mABM.c:840 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [85])
        (nil)))
(call_insn 71 70 72 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_expected_fly") [flags 0x3]  <function_decl 0x7f05a574e300 _expected_fly>) [0 _expected_fly S1 A8])
            (const_int 352 [0x160]))) mABM.c:840 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                (const_int 304 [0x130])) [0  S48 A64]))
                    (nil))))))
(insn 72 71 73 2 (set (reg:SI 40 r11 [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 sh+0 S4 A64])) mABM.c:842 89 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 39 r10 [96])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 sh+8 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 2 (set (reg:SI 38 r9 [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_f+0 S4 A32])) mABM.c:842 89 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:DI 37 r8 [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 2 (parallel [
            (set (reg:DI 1 dx [99])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:842 274 {*adddi_1}
     (nil))
(insn 77 76 78 2 (set (reg:DI 4 si [100])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:842 267 {*leadi}
     (nil))
(insn 78 77 125 2 (set (reg:DI 0 ax [101])
        (const_int 38 [0x26])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 125 78 126 2 (set (reg:DI 5 di [99])
        (reg:DI 1 dx [99])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [99])
        (nil)))
(insn 126 125 79 2 (set (reg:DI 2 cx [101])
        (reg:DI 0 ax [101])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 79 126 80 2 (parallel [
            (set (reg:DI 2 cx [101])
                (const_int 0 [0]))
            (set (reg:DI 5 di [99])
                (plus:DI (ashift:DI (reg:DI 2 cx [101])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [99])))
            (set (reg:DI 4 si [100])
                (plus:DI (ashift:DI (reg:DI 2 cx [101])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [100])))
            (set (mem:BLK (reg:DI 5 di [99]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [100]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [101]))
        ]) mABM.c:842 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [101])
        (expr_list:REG_UNUSED (reg:DI 5 di [99])
            (expr_list:REG_UNUSED (reg:DI 4 si [100])
                (nil)))))
(insn 80 79 81 2 (set (reg:DI 0 ax [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 320 [0x140])) [0 tl+0 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 2 (set (mem:DI (reg/f:DI 7 sp) [0  S8 A64])
        (reg:DI 0 ax [102])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 82 81 83 2 (set (reg:DI 0 ax [103])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 328 [0x148])) [0 tl+8 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [0  S8 A64])
        (reg:DI 0 ax [103])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(insn 84 83 85 2 (set (reg:DI 0 ax [104])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 336 [0x150])) [0 tl+16 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S8 A64])
        (reg:DI 0 ax [104])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 86 85 87 2 (set (reg:DI 0 ax [105])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 344 [0x158])) [0 tl+24 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [0  S8 A64])
        (reg:DI 0 ax [105])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(insn 88 87 89 2 (set (reg:DI 0 ax [106])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 352 [0x160])) [0 tl+32 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S8 A64])
        (reg:DI 0 ax [106])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(insn 90 89 91 2 (set (reg:DI 0 ax [107])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 360 [0x168])) [0 tl+40 S8 A64])) mABM.c:842 87 {*movdi_internal_rex64}
     (nil))
(insn 91 90 92 2 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [0  S8 A64])
        (reg:DI 0 ax [107])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(insn 92 91 93 2 (set (reg:SI 1 dx)
        (reg:SI 40 r11 [95])) mABM.c:842 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [95])
        (nil)))
(insn 93 92 94 2 (set (reg:DI 2 cx)
        (reg:DI 39 r10 [96])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [96])
        (nil)))
(insn 94 93 95 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [97])) mABM.c:842 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [97])
        (nil)))
(insn 95 94 96 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [98])) mABM.c:842 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [98])
        (nil)))
(call_insn 96 95 97 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_check_safe_events") [flags 0x3]  <function_decl 0x7f05a574e200 _check_safe_events>) [0 _check_safe_events S1 A8])
            (const_int 352 [0x160]))) mABM.c:842 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S48 A64]))
                        (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                        (const_int 48 [0x30])) [0  S304 A128]))
                            (nil))))))))
(insn 97 96 98 2 (set (reg:SI 38 r9 [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 n_f+0 S4 A32])) mABM.c:845 89 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:DI 37 r8 [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mABM.c:845 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 2 (set (reg:DI 1 dx [110])
        (reg/f:DI 7 sp)) mABM.c:845 87 {*movdi_internal_rex64}
     (nil))
(insn 100 99 101 2 (set (reg:DI 4 si [111])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:845 267 {*leadi}
     (nil))
(insn 101 100 127 2 (set (reg:DI 0 ax [112])
        (const_int 38 [0x26])) mABM.c:845 87 {*movdi_internal_rex64}
     (nil))
(insn 127 101 128 2 (set (reg:DI 5 di [110])
        (reg:DI 1 dx [110])) mABM.c:845 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [110])
        (nil)))
(insn 128 127 102 2 (set (reg:DI 2 cx [112])
        (reg:DI 0 ax [112])) mABM.c:845 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(insn 102 128 103 2 (parallel [
            (set (reg:DI 2 cx [112])
                (const_int 0 [0]))
            (set (reg:DI 5 di [110])
                (plus:DI (ashift:DI (reg:DI 2 cx [112])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [110])))
            (set (reg:DI 4 si [111])
                (plus:DI (ashift:DI (reg:DI 2 cx [112])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [111])))
            (set (mem:BLK (reg:DI 5 di [110]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [111]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [112]))
        ]) mABM.c:845 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [112])
        (expr_list:REG_UNUSED (reg:DI 5 di [110])
            (expr_list:REG_UNUSED (reg:DI 4 si [111])
                (nil)))))
(insn 103 102 104 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [108])) mABM.c:845 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [108])
        (nil)))
(insn 104 103 105 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [109])) mABM.c:845 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [109])
        (nil)))
(call_insn 105 104 106 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_set_st_point") [flags 0x3]  <function_decl 0x7f05a56eaf00 _set_st_point>) [0 _set_st_point S1 A8])
            (const_int 304 [0x130]))) mABM.c:845 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 106 105 109 2 (set (reg:SI 0 ax [orig:59 D.7246 ] [59])
        (const_int 1 [0x1])) mABM.c:850 89 {*movsi_internal}
     (nil))
(insn 109 106 113 2 (set (reg:SI 0 ax [orig:60 <retval> ] [60])
        (reg:SI 0 ax [orig:59 D.7246 ] [59])) mABM.c:850 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7246 ] [59])
        (nil)))
(insn 113 109 116 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:60 <retval> ] [60])) mABM.c:851 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 <retval> ] [60])
        (nil)))
(insn 116 113 0 2 (use (reg/i:SI 0 ax)) mABM.c:851 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function ABM (ABM, funcdef_no=39, decl_uid=1929, cgraph_uid=39)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=600,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =!r  (1) riFo {*movti_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) o  (1) re {*movti_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 17:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=114 from oldreg=76, assigning class DIREG to r114
      Creating newreg=115 from oldreg=78, assigning class CREG to r115
   17: {r115:DI=0;r114:DI=r115:DI<<0x3+r114:DI;r77:DI=r115:DI<<0x3+r77:DI;[r114:DI]=[r77:DI];use r115:DI;}
      REG_UNUSED r78:DI
      REG_UNUSED r77:DI
      REG_UNUSED r76:DI
    Inserting insn reload before:
  138: r114:DI=r76:DI
  139: r115:DI=r78:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 21:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 25:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=116 from oldreg=80, assigning class DIREG to r116
      Creating newreg=117 from oldreg=82, assigning class CREG to r117
   25: {r117:DI=0;r116:DI=r117:DI<<0x3+r116:DI;r81:DI=r117:DI<<0x3+r81:DI;[r116:DI]=[r81:DI];use r117:DI;}
      REG_UNUSED r82:DI
      REG_UNUSED r81:DI
      REG_UNUSED r80:DI
    Inserting insn reload before:
  140: r116:DI=r80:DI
  141: r117:DI=r82:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 33:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=118 from oldreg=85, assigning class DIREG to r118
      Creating newreg=119 from oldreg=87, assigning class CREG to r119
   33: {r119:DI=0;r118:DI=r119:DI<<0x3+r118:DI;r86:DI=r119:DI<<0x3+r86:DI;[r118:DI]=[r86:DI];use r119:DI;}
      REG_UNUSED r87:DI
      REG_UNUSED r86:DI
      REG_UNUSED r85:DI
    Inserting insn reload before:
  142: r118:DI=r85:DI
  143: r119:DI=r87:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 51:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 82:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=120 from oldreg=102, assigning class DIREG to r120
      Creating newreg=121 from oldreg=104, assigning class CREG to r121
   82: {r121:DI=0;r120:DI=r121:DI<<0x3+r120:DI;r103:DI=r121:DI<<0x3+r103:DI;[r120:DI]=[r103:DI];use r121:DI;}
      REG_UNUSED r104:DI
      REG_UNUSED r103:DI
      REG_UNUSED r102:DI
    Inserting insn reload before:
  144: r120:DI=r102:DI
  145: r121:DI=r104:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =m  (1) f  (2) m  (3) m {fix_truncsi_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 92:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) x  (1) m {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 97:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) p {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 105:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=122 from oldreg=108, assigning class DIREG to r122
      Creating newreg=123 from oldreg=110, assigning class CREG to r123
  105: {r123:DI=0;r122:DI=r123:DI<<0x3+r122:DI;r109:DI=r123:DI<<0x3+r109:DI;[r122:DI]=[r109:DI];use r123:DI;}
      REG_UNUSED r110:DI
      REG_UNUSED r109:DI
      REG_UNUSED r108:DI
    Inserting insn reload before:
  146: r122:DI=r108:DI
  147: r123:DI=r110:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 118: point = 0
   Insn 115: point = 0
   Insn 111: point = 1
   Insn 108: point = 3
   Insn 107: point = 4
   Insn 106: point = 4
   Insn 105: point = 5
   Insn 147: point = 6
	Hard reg 0 is preferable by r123 with profit 1
   Insn 146: point = 8
	Hard reg 1 is preferable by r122 with profit 1
   Insn 104: point = 10
   Insn 103: point = 11
   Insn 102: point = 12
   Insn 101: point = 13
  BB 7
   Insn 99: point = 14
   Insn 98: point = 14
   Insn 97: point = 15
   Insn 95: point = 16
  BB 5
   Insn 121: point = 17
   Insn 57: point = 17
   Insn 125: point = 17
   Insn 137: point = 18
   Insn 136: point = 19
   Insn 135: point = 19
   Insn 134: point = 20
   Insn 55: point = 20
   Insn 54: point = 21
   Insn 53: point = 22
   Insn 52: point = 24
   Insn 51: point = 25
   Insn 124: point = 27
   Insn 49: point = 29
   Insn 48: point = 30
  BB 4
   Insn 45: point = 31
   Insn 44: point = 31
   Insn 43: point = 32
   Insn 42: point = 33
   Insn 41: point = 34
  BB 2
   Insn 39: point = 35
   Insn 38: point = 35
   Insn 37: point = 36
   Insn 36: point = 37
   Insn 35: point = 37
   Insn 34: point = 38
   Insn 33: point = 39
   Insn 143: point = 40
	Hard reg 0 is preferable by r119 with profit 1
   Insn 142: point = 42
	Hard reg 1 is preferable by r118 with profit 1
   Insn 32: point = 44
   Insn 31: point = 45
   Insn 30: point = 46
   Insn 29: point = 47
   Insn 28: point = 48
   Insn 27: point = 49
   Insn 26: point = 49
   Insn 25: point = 50
   Insn 141: point = 51
	Hard reg 0 is preferable by r117 with profit 1
   Insn 140: point = 53
	Hard reg 1 is preferable by r116 with profit 1
   Insn 24: point = 55
   Insn 23: point = 56
   Insn 22: point = 57
   Insn 21: point = 58
   Insn 20: point = 59
   Insn 19: point = 59
   Insn 18: point = 60
   Insn 17: point = 61
   Insn 139: point = 62
	Hard reg 0 is preferable by r115 with profit 1
   Insn 138: point = 64
	Hard reg 1 is preferable by r114 with profit 1
   Insn 16: point = 66
   Insn 15: point = 67
   Insn 14: point = 68
   Insn 13: point = 69
   Insn 12: point = 70
   Insn 8: point = 71
   Insn 7: point = 72
   Insn 6: point = 73
   Insn 5: point = 75
   Insn 4: point = 76
   Insn 3: point = 77
   Insn 2: point = 77
  BB 6
   Insn 92: point = 77
   Insn 123: point = 77
   Insn 133: point = 78
   Insn 132: point = 79
   Insn 131: point = 79
   Insn 130: point = 80
   Insn 90: point = 80
   Insn 89: point = 82
   Insn 88: point = 83
   Insn 87: point = 84
   Insn 86: point = 84
   Insn 85: point = 85
   Insn 84: point = 86
   Insn 83: point = 87
   Insn 82: point = 88
   Insn 145: point = 89
	Hard reg 0 is preferable by r121 with profit 1
   Insn 144: point = 91
	Hard reg 1 is preferable by r120 with profit 1
   Insn 81: point = 93
   Insn 80: point = 94
   Insn 79: point = 95
   Insn 78: point = 96
   Insn 77: point = 97
   Insn 76: point = 98
   Insn 75: point = 99
   Insn 74: point = 100
   Insn 73: point = 101
   Insn 72: point = 102
   Insn 71: point = 103
   Insn 70: point = 104
   Insn 69: point = 105
   Insn 68: point = 106
   Insn 67: point = 107
   Insn 66: point = 108
   Insn 65: point = 109
   Insn 64: point = 110
   Insn 63: point = 111
   Insn 62: point = 112
   Insn 61: point = 113
 r59: [35..36]
 r60: [26..30]
 r61: [28..29]
 r62: [26..27]
 r63: [23..25]
 r64: [23..24]
 r65: [14..16]
 r66: [108..113]
 r67: [81..83]
 r68: [77..80]
 r69: [2..3]
 r70: [0..1]
 r71: [71..73]
 r72: [74..76]
 r73: [72..75]
 r74: [60..70]
 r75: [59..69]
 r76: [65..68]
 r77: [61..67]
 r78: [63..66]
 r79: [49..58]
 r80: [54..57]
 r81: [50..56]
 r82: [52..55]
 r83: [38..48]
 r84: [37..47]
 r85: [43..46]
 r86: [39..45]
 r87: [41..44]
 r88: [32..34]
 r89: [31..33]
 r90: [21..22]
 r91: [17..20]
 r92: [87..112]
 r93: [86..111]
 r94: [85..110]
 r95: [84..109]
 r96: [106..107]
 r97: [104..105]
 r98: [102..103]
 r99: [100..101]
 r100: [98..99]
 r101: [96..97]
 r102: [92..95]
 r103: [88..94]
 r104: [90..93]
 r105: [81..82]
 r106: [14..15]
 r107: [4..13]
 r108: [9..12]
 r109: [5..11]
 r110: [7..10]
 r112: [78..79]
 r113: [18..19]
 r114: [61..64]
 r115: [61..62]
 r116: [50..53]
 r117: [50..51]
 r118: [39..42]
 r119: [39..40]
 r120: [88..91]
 r121: [88..89]
 r122: [5..8]
 r123: [5..6]
Compressing live ranges: from 114 to 72 - 63%
Ranges after the compression:
 r59: [24..25]
 r60: [18..21]
 r61: [20..21]
 r62: [18..19]
 r63: [16..17]
 r64: [16..17]
 r65: [10..11]
 r66: [70..71]
 r67: [50..51]
 r68: [48..49]
 r69: [2..3]
 r70: [0..1]
 r71: [44..45]
 r72: [46..47]
 r73: [44..47]
 r74: [38..43]
 r75: [38..43]
 r76: [42..43]
 r77: [38..43]
 r78: [40..43]
 r79: [32..37]
 r80: [36..37]
 r81: [32..37]
 r82: [34..37]
 r83: [26..31]
 r84: [26..31]
 r85: [30..31]
 r86: [26..31]
 r87: [28..31]
 r88: [22..23]
 r89: [22..23]
 r90: [14..15]
 r91: [12..13]
 r92: [52..71]
 r93: [52..71]
 r94: [52..71]
 r95: [52..71]
 r96: [68..69]
 r97: [66..67]
 r98: [64..65]
 r99: [62..63]
 r100: [60..61]
 r101: [58..59]
 r102: [56..57]
 r103: [52..57]
 r104: [54..57]
 r105: [50..51]
 r106: [10..11]
 r107: [4..9]
 r108: [8..9]
 r109: [4..9]
 r110: [6..9]
 r112: [48..49]
 r113: [12..13]
 r114: [38..41]
 r115: [38..39]
 r116: [32..35]
 r117: [32..33]
 r118: [26..29]
 r119: [26..27]
 r120: [52..55]
 r121: [52..53]
 r122: [4..7]
 r123: [4..5]
	 Assigning to 114 (cl=DIREG, orig=76, freq=2, tfirst=114, tfreq=2)...
	   Assign 5 to reload r114 (freq=2)
	 Assigning to 115 (cl=CREG, orig=78, freq=2, tfirst=115, tfreq=2)...
	   Assign 2 to reload r115 (freq=2)
	 Assigning to 116 (cl=DIREG, orig=80, freq=2, tfirst=116, tfreq=2)...
	   Assign 5 to reload r116 (freq=2)
	 Assigning to 117 (cl=CREG, orig=82, freq=2, tfirst=117, tfreq=2)...
	   Assign 2 to reload r117 (freq=2)
	 Assigning to 118 (cl=DIREG, orig=85, freq=2, tfirst=118, tfreq=2)...
	   Assign 5 to reload r118 (freq=2)
	 Assigning to 119 (cl=CREG, orig=87, freq=2, tfirst=119, tfreq=2)...
	   Assign 2 to reload r119 (freq=2)
	 Assigning to 120 (cl=DIREG, orig=102, freq=2, tfirst=120, tfreq=2)...
	   Assign 5 to reload r120 (freq=2)
	 Assigning to 121 (cl=CREG, orig=104, freq=2, tfirst=121, tfreq=2)...
	   Assign 2 to reload r121 (freq=2)
	 Assigning to 122 (cl=DIREG, orig=108, freq=2, tfirst=122, tfreq=2)...
	   Assign 5 to reload r122 (freq=2)
	 Assigning to 123 (cl=CREG, orig=110, freq=2, tfirst=123, tfreq=2)...
	   Assign 2 to reload r123 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 37
changing reg in insn 38
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 124
changing reg in insn 124
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 95
changing reg in insn 98
changing reg in insn 61
changing reg in insn 66
changing reg in insn 88
changing reg in insn 90
changing reg in insn 123
changing reg in insn 108
changing reg in insn 111
changing reg in insn 111
changing reg in insn 115
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 4
changing reg in insn 5
changing reg in insn 7
changing reg in insn 12
changing reg in insn 18
changing reg in insn 13
changing reg in insn 19
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 17
changing reg in insn 16
changing reg in insn 21
changing reg in insn 26
changing reg in insn 22
changing reg in insn 25
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 24
changing reg in insn 28
changing reg in insn 34
changing reg in insn 29
changing reg in insn 35
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 32
changing reg in insn 41
changing reg in insn 43
changing reg in insn 42
changing reg in insn 44
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 125
changing reg in insn 62
changing reg in insn 83
changing reg in insn 63
changing reg in insn 84
changing reg in insn 64
changing reg in insn 85
changing reg in insn 65
changing reg in insn 86
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 81
changing reg in insn 89
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 106
changing reg in insn 102
changing reg in insn 105
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 104
changing reg in insn 132
changing reg in insn 131
changing reg in insn 133
changing reg in insn 132
changing reg in insn 136
changing reg in insn 135
changing reg in insn 137
changing reg in insn 136
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 107.


ABM

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 19[fpcr] 21[xmm0] 22[xmm1] 37[r8] 38[r9] 39[r10] 40[r11]
;;  ref usage 	r0={30d,24u} r1={16d,10u} r2={19d,18u} r4={21d,15u} r5={23d,17u} r6={1d,59u} r7={1d,32u} r8={13d,7u} r9={9d,3u} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={14d,2u} r18={6d} r19={6d,2u} r20={1d,1u} r21={8d,1u} r22={8d,1u} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={12d,5u} r38={10d,3u} r39={7d,1u} r40={7d,1u} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 588{386d,202u,0e} in 116{110 regular + 6 call} insns.
(note 1 0 126 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
(note 126 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 126 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mABM.c:853 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mABM.c:853 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(insn 4 3 5 2 (set (reg:SI 0 ax [72])
        (reg:SI 1 dx [ sh ])) mABM.c:853 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ sh ])
        (nil)))
(insn 5 4 6 2 (set (reg:DI 2 cx [73])
        (reg:DI 2 cx [ sh+8 ])) mABM.c:853 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ sh+8 ])
        (nil)))
(insn 6 5 7 2 (set (reg:TI 0 ax [71])
        (reg:TI 0 ax [72])) mABM.c:853 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [72])
        (nil)))
(insn 7 6 8 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [73])) mABM.c:853 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [73])
        (nil)))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 sh+0 S16 A64])
        (reg:TI 0 ax [71])) mABM.c:853 85 {*movti_internal_rex64}
     (expr_list:REG_DEAD (reg:TI 0 ax [71])
        (nil)))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg:SI 38 r9 [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 N_f+0 S4 A32])) mABM.c:864 89 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 37 r8 [75])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:864 274 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:DI 1 dx [76])
        (reg/f:DI 7 sp)) mABM.c:864 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si [77])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:864 267 {*leadi}
     (nil))
(insn 16 15 138 2 (set (reg:DI 0 ax [78])
        (const_int 38 [0x26])) mABM.c:864 87 {*movdi_internal_rex64}
     (nil))
(insn 138 16 139 2 (set (reg:DI 5 di [76])
        (reg:DI 1 dx [76])) mABM.c:864 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [76])
        (nil)))
(insn 139 138 17 2 (set (reg:DI 2 cx [78])
        (reg:DI 0 ax [78])) mABM.c:864 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [78])
        (nil)))
(insn 17 139 18 2 (parallel [
            (set (reg:DI 2 cx [78])
                (const_int 0 [0]))
            (set (reg:DI 5 di [76])
                (plus:DI (ashift:DI (reg:DI 2 cx [78])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [76])))
            (set (reg:DI 4 si [77])
                (plus:DI (ashift:DI (reg:DI 2 cx [78])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [77])))
            (set (mem:BLK (reg:DI 5 di [76]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [77]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [78]))
        ]) mABM.c:864 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [78])
        (expr_list:REG_UNUSED (reg:DI 5 di [76])
            (expr_list:REG_UNUSED (reg:DI 4 si [77])
                (nil)))))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [74])) mABM.c:864 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [74])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [75])) mABM.c:864 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [75])
        (nil)))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_init_tool") [flags 0x3]  <function_decl 0x7f05a56ea600 _init_tool>) [0 _init_tool S1 A8])
            (const_int 304 [0x130]))) mABM.c:864 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 21 20 22 2 (parallel [
            (set (reg:DI 37 r8 [79])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:866 274 {*adddi_1}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [80])
        (reg/f:DI 7 sp)) mABM.c:866 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:DI 4 si [81])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:866 267 {*leadi}
     (nil))
(insn 24 23 140 2 (set (reg:DI 0 ax [82])
        (const_int 38 [0x26])) mABM.c:866 87 {*movdi_internal_rex64}
     (nil))
(insn 140 24 141 2 (set (reg:DI 5 di [80])
        (reg:DI 1 dx [80])) mABM.c:866 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [80])
        (nil)))
(insn 141 140 25 2 (set (reg:DI 2 cx [82])
        (reg:DI 0 ax [82])) mABM.c:866 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [82])
        (nil)))
(insn 25 141 26 2 (parallel [
            (set (reg:DI 2 cx [82])
                (const_int 0 [0]))
            (set (reg:DI 5 di [80])
                (plus:DI (ashift:DI (reg:DI 2 cx [82])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [80])))
            (set (reg:DI 4 si [81])
                (plus:DI (ashift:DI (reg:DI 2 cx [82])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [81])))
            (set (mem:BLK (reg:DI 5 di [80]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [81]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [82]))
        ]) mABM.c:866 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [82])
        (expr_list:REG_UNUSED (reg:DI 5 di [80])
            (expr_list:REG_UNUSED (reg:DI 4 si [81])
                (nil)))))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [79])) mABM.c:866 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [79])
        (nil)))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_create_shock") [flags 0x3]  <function_decl 0x7f05a56ea800 _create_shock>) [0 _create_shock S1 A8])
            (const_int 304 [0x130]))) mABM.c:866 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 28 27 29 2 (set (reg:SI 38 r9 [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 N_f+0 S4 A32])) mABM.c:868 89 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 37 r8 [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])) mABM.c:868 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:DI 1 dx [85])
        (reg/f:DI 7 sp)) mABM.c:868 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:DI 4 si [86])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:868 267 {*leadi}
     (nil))
(insn 32 31 142 2 (set (reg:DI 0 ax [87])
        (const_int 38 [0x26])) mABM.c:868 87 {*movdi_internal_rex64}
     (nil))
(insn 142 32 143 2 (set (reg:DI 5 di [85])
        (reg:DI 1 dx [85])) mABM.c:868 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [85])
        (nil)))
(insn 143 142 33 2 (set (reg:DI 2 cx [87])
        (reg:DI 0 ax [87])) mABM.c:868 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(insn 33 143 34 2 (parallel [
            (set (reg:DI 2 cx [87])
                (const_int 0 [0]))
            (set (reg:DI 5 di [85])
                (plus:DI (ashift:DI (reg:DI 2 cx [87])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [85])))
            (set (reg:DI 4 si [86])
                (plus:DI (ashift:DI (reg:DI 2 cx [87])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [86])))
            (set (mem:BLK (reg:DI 5 di [85]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [86]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [87]))
        ]) mABM.c:868 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [87])
        (expr_list:REG_UNUSED (reg:DI 5 di [85])
            (expr_list:REG_UNUSED (reg:DI 4 si [86])
                (nil)))))
(insn 34 33 35 2 (set (reg:SI 4 si)
        (reg:SI 38 r9 [83])) mABM.c:868 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [83])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg:DI 37 r8 [84])) mABM.c:868 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [84])
        (nil)))
(call_insn 36 35 37 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_delay_on_m1") [flags 0x3]  <function_decl 0x7f05a56ea500 _delay_on_m1>) [0 _delay_on_m1 S1 A8])
            (const_int 304 [0x130]))) mABM.c:868 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 37 36 38 2 (set (reg:SI 0 ax [orig:59 D.7247 ] [59])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 128 [0x80])) [0 conf.laplacian_vel+0 S4 A128])) mABM.c:870 89 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 D.7247 ] [59])
            (const_int 1 [0x1]))) mABM.c:870 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.7247 ] [59])
        (nil)))
(jump_insn 39 38 40 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) mABM.c:870 612 {*jcc_1}
     (nil)
 -> 46)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88 89
(note 40 39 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 4 (set (reg:SI 1 dx [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 N_f+0 S4 A32])) mABM.c:870 89 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])) mABM.c:870 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 4 (set (reg:SI 4 si)
        (reg:SI 1 dx [88])) mABM.c:870 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [88])
        (nil)))
(insn 44 43 45 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) mABM.c:870 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(call_insn 45 44 46 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_laplacian_change_vel") [flags 0x3]  <function_decl 0x7f05a56ead00 _laplacian_change_vel>) [0 _laplacian_change_vel S1 A8])
            (const_int 0 [0]))) mABM.c:870 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 90 91 113
(code_label 46 45 47 5 340 "" [1 uses])
(note 47 46 48 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 5 (set (reg:XF 9 st(1) [orig:60 D.7248 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 240 [0xf0])) [0 conf.t_r+0 S16 A128])) mABM.c:874 131 {*movxf_internal_rex64}
     (nil))
(insn 49 48 124 5 (set (reg:SI 0 ax [orig:61 D.7247 ] [61])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 208 [0xd0])) [0 conf.t_w+0 S4 A128])) mABM.c:874 89 {*movsi_internal}
     (nil))
(insn 124 49 51 5 (parallel [
            (set (reg:XF 8 st [orig:62 D.7248 ] [62])
                (float:XF (reg:SI 0 ax [orig:61 D.7247 ] [61])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0  S4 A32]))
        ]) mABM.c:874 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.7247 ] [61])
        (nil)))
(insn 51 124 52 5 (set (reg:XF 9 st(1) [orig:63 D.7248 ] [63])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.7248 ] [60])
            (reg:XF 8 st [orig:62 D.7248 ] [62]))) mABM.c:874 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.7248 ] [62])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.7248 ] [60])
            (nil))))
(insn 52 51 53 5 (set (reg:XF 8 st [orig:64 D.7248 ] [64])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 224 [0xe0])) [0 conf.t_i+0 S16 A128])) mABM.c:874 131 {*movxf_internal_rex64}
     (nil))
(insn 53 52 54 5 (set (reg:XF 8 st [90])
        (mult:XF (reg:XF 8 st [orig:64 D.7248 ] [64])
            (reg:XF 9 st(1) [orig:63 D.7248 ] [63]))) mABM.c:874 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.7248 ] [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.7248 ] [63])
            (nil))))
(insn 54 53 55 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t_stp+0 S16 A128])
        (reg:XF 8 st [90])) mABM.c:874 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [90])
        (nil)))
(insn 55 54 134 5 (set (reg:XF 8 st [91])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t_stp+0 S16 A128])) mABM.c:875 131 {*movxf_internal_rex64}
     (nil))
(insn 134 55 135 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -94 [0xffffffffffffffa2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:875 199 {x86_fnstcw_1}
     (nil))
(insn 135 134 136 5 (set (reg:HI 0 ax [113])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -94 [0xffffffffffffffa2])) [0  S2 A16])) mABM.c:875 90 {*movhi_internal}
     (nil))
(insn 136 135 137 5 (parallel [
            (set (reg:HI 0 ax [113])
                (ior:HI (reg:HI 0 ax [113])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:875 410 {*iorhi_1}
     (nil))
(insn 137 136 125 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0  S2 A16])
        (reg:HI 0 ax [113])) mABM.c:875 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [113])
        (nil)))
(insn 125 137 57 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -72 [0xffffffffffffffb8])) [0 t+0 S4 A32])
                (fix:SI (reg:XF 8 st [91])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -94 [0xffffffffffffffa2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -96 [0xffffffffffffffa0])) [0  S2 A16]))
        ]) mABM.c:875 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [91])
        (nil)))
(insn 57 125 121 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 step+0 S4 A32])
        (const_int 0 [0])) mABM.c:875 89 {*movsi_internal}
     (nil))
(jump_insn 121 57 122 5 (set (pc)
        (label_ref 93)) mABM.c:875 650 {jump}
     (nil)
 -> 93)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 122 121 96)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 67 68 92 93 94 95 96 97 98 99 100 101 102 103 104 105 112
(code_label 96 122 60 6 342 "" [1 uses])
(note 60 96 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 6 (set (reg:XF 8 st [orig:66 D.7248 ] [66])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 t+0 S4 A32]))) mABM.c:875 256 {*floatsixf2_i387}
     (nil))
(insn 62 61 63 6 (set (reg:SI 40 r11 [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 sh+0 S4 A64])) mABM.c:875 89 {*movsi_internal}
     (nil))
(insn 63 62 64 6 (set (reg:DI 39 r10 [93])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 sh+8 S8 A64])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 6 (set (reg:SI 38 r9 [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 N_f+0 S4 A32])) mABM.c:875 89 {*movsi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 37 r8 [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 f+0 S8 A64])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 6 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 352 [0x160])) [0  S16 A128])
        (reg:XF 8 st [orig:66 D.7248 ] [66])) mABM.c:875 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.7248 ] [66])
        (nil)))
(insn 67 66 68 6 (set (reg:DI 0 ax [96])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 tool+0 S8 A128])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 304 [0x130])) [0  S8 A64])
        (reg:DI 0 ax [96])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 69 68 70 6 (set (reg:DI 0 ax [97])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 tool+8 S8 A64])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 312 [0x138])) [0  S8 A64])
        (reg:DI 0 ax [97])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(insn 71 70 72 6 (set (reg:DI 0 ax [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 tool+16 S8 A128])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 320 [0x140])) [0  S8 A64])
        (reg:DI 0 ax [98])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 73 72 74 6 (set (reg:DI 0 ax [99])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 tool+24 S8 A64])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 328 [0x148])) [0  S8 A64])
        (reg:DI 0 ax [99])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [99])
        (nil)))
(insn 75 74 76 6 (set (reg:DI 0 ax [100])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 tool+32 S8 A128])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 336 [0x150])) [0  S8 A64])
        (reg:DI 0 ax [100])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 77 76 78 6 (set (reg:DI 0 ax [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 tool+40 S8 A64])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 6 (set (mem:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 344 [0x158])) [0  S8 A64])
        (reg:DI 0 ax [101])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 79 78 80 6 (set (reg:DI 1 dx [102])
        (reg/f:DI 7 sp)) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 6 (set (reg:DI 4 si [103])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:875 267 {*leadi}
     (nil))
(insn 81 80 144 6 (set (reg:DI 0 ax [104])
        (const_int 38 [0x26])) mABM.c:875 87 {*movdi_internal_rex64}
     (nil))
(insn 144 81 145 6 (set (reg:DI 5 di [102])
        (reg:DI 1 dx [102])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [102])
        (nil)))
(insn 145 144 82 6 (set (reg:DI 2 cx [104])
        (reg:DI 0 ax [104])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(insn 82 145 83 6 (parallel [
            (set (reg:DI 2 cx [104])
                (const_int 0 [0]))
            (set (reg:DI 5 di [102])
                (plus:DI (ashift:DI (reg:DI 2 cx [104])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [102])))
            (set (reg:DI 4 si [103])
                (plus:DI (ashift:DI (reg:DI 2 cx [104])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [103])))
            (set (mem:BLK (reg:DI 5 di [102]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [103]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [104]))
        ]) mABM.c:875 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [104])
        (expr_list:REG_UNUSED (reg:DI 5 di [102])
            (expr_list:REG_UNUSED (reg:DI 4 si [103])
                (nil)))))
(insn 83 82 84 6 (set (reg:SI 1 dx)
        (reg:SI 40 r11 [92])) mABM.c:875 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 40 r11 [92])
        (nil)))
(insn 84 83 85 6 (set (reg:DI 2 cx)
        (reg:DI 39 r10 [93])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 39 r10 [93])
        (nil)))
(insn 85 84 86 6 (set (reg:SI 4 si)
        (reg:SI 38 r9 [94])) mABM.c:875 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 38 r9 [94])
        (nil)))
(insn 86 85 87 6 (set (reg:DI 5 di)
        (reg:DI 37 r8 [95])) mABM.c:875 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [95])
        (nil)))
(call_insn 87 86 88 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_evolution") [flags 0x3]  <function_decl 0x7f05a574e500 _evolution>) [0 _evolution S1 A8])
            (const_int 368 [0x170]))) mABM.c:875 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                        (expr_list:REG_DEAD (use (mem:BLK (plus:DI (reg/f:DI 7 sp)
                                        (const_int 304 [0x130])) [0  S48 A64]))
                            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                            (const_int 352 [0x160])) [0  S16 A128]))
                                (nil)))))))))
(insn 88 87 89 6 (set (reg:XF 9 st(1) [orig:67 D.7248 ] [67])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 t+0 S4 A32]))) mABM.c:875 256 {*floatsixf2_i387}
     (nil))
(insn 89 88 90 6 (set (reg:XF 8 st [105])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 t_stp+0 S16 A128])) mABM.c:875 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 130 6 (set (reg:XF 8 st [orig:68 D.7248 ] [68])
        (plus:XF (reg:XF 8 st [105])
            (reg:XF 9 st(1) [orig:67 D.7248 ] [67]))) mABM.c:875 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [105])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.7248 ] [67])
            (nil))))
(insn 130 90 131 6 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -94 [0xffffffffffffffa2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mABM.c:875 199 {x86_fnstcw_1}
     (nil))
(insn 131 130 132 6 (set (reg:HI 0 ax [112])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -94 [0xffffffffffffffa2])) [0  S2 A16])) mABM.c:875 90 {*movhi_internal}
     (nil))
(insn 132 131 133 6 (parallel [
            (set (reg:HI 0 ax [112])
                (ior:HI (reg:HI 0 ax [112])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:875 410 {*iorhi_1}
     (nil))
(insn 133 132 123 6 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0  S2 A16])
        (reg:HI 0 ax [112])) mABM.c:875 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [112])
        (nil)))
(insn 123 133 92 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -72 [0xffffffffffffffb8])) [0 t+0 S4 A32])
                (fix:SI (reg:XF 8 st [orig:68 D.7248 ] [68])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -94 [0xffffffffffffffa2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -96 [0xffffffffffffffa0])) [0  S2 A16]))
        ]) mABM.c:875 196 {fix_truncsi_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.7248 ] [68])
        (nil)))
(insn 92 123 93 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [0 step+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [0 step+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:875 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 106
(code_label 93 92 94 7 341 "" [1 uses])
(note 94 93 95 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 97 7 (set (reg:DF 21 xmm0 [orig:65 D.7249 ] [65])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 t+0 S4 A32]))) mABM.c:875 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 97 95 98 7 (set (reg:DF 22 xmm1 [106])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S8 A64])) mABM.c:875 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 8.64e+4 [0x0.a8cp+17])
        (nil)))
(insn 98 97 99 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [106])
            (reg:DF 21 xmm0 [orig:65 D.7249 ] [65]))) mABM.c:875 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [106])
        (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:65 D.7249 ] [65])
            (nil))))
(jump_insn 99 98 100 7 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) mABM.c:875 612 {*jcc_1}
     (nil)
 -> 96)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 107 108 109 110
(note 100 99 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (parallel [
            (set (reg:DI 37 r8 [107])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mABM.c:877 274 {*adddi_1}
     (nil))
(insn 102 101 103 8 (set (reg:DI 1 dx [108])
        (reg/f:DI 7 sp)) mABM.c:877 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 8 (set (reg:DI 4 si [109])
        (plus:DI (reg/f:DI 6 bp)
            (const_int 16 [0x10]))) mABM.c:877 267 {*leadi}
     (nil))
(insn 104 103 146 8 (set (reg:DI 0 ax [110])
        (const_int 38 [0x26])) mABM.c:877 87 {*movdi_internal_rex64}
     (nil))
(insn 146 104 147 8 (set (reg:DI 5 di [108])
        (reg:DI 1 dx [108])) mABM.c:877 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [108])
        (nil)))
(insn 147 146 105 8 (set (reg:DI 2 cx [110])
        (reg:DI 0 ax [110])) mABM.c:877 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(insn 105 147 106 8 (parallel [
            (set (reg:DI 2 cx [110])
                (const_int 0 [0]))
            (set (reg:DI 5 di [108])
                (plus:DI (ashift:DI (reg:DI 2 cx [110])
                        (const_int 3 [0x3]))
                    (reg:DI 5 di [108])))
            (set (reg:DI 4 si [109])
                (plus:DI (ashift:DI (reg:DI 2 cx [110])
                        (const_int 3 [0x3]))
                    (reg:DI 4 si [109])))
            (set (mem:BLK (reg:DI 5 di [108]) [0  S304 A128])
                (mem/c:BLK (reg:DI 4 si [109]) [0 conf+0 S304 A128]))
            (use (reg:DI 2 cx [110]))
        ]) mABM.c:877 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 2 cx [110])
        (expr_list:REG_UNUSED (reg:DI 5 di [108])
            (expr_list:REG_UNUSED (reg:DI 4 si [109])
                (nil)))))
(insn 106 105 107 8 (set (reg:DI 5 di)
        (reg:DI 37 r8 [107])) mABM.c:877 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [107])
        (nil)))
(call_insn 107 106 108 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_del_tool") [flags 0x3]  <function_decl 0x7f05a56ea700 _del_tool>) [0 _del_tool S1 A8])
            (const_int 304 [0x130]))) mABM.c:877 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 108 107 111 8 (set (reg:SI 0 ax [orig:69 D.7247 ] [69])
        (const_int 1 [0x1])) mABM.c:879 89 {*movsi_internal}
     (nil))
(insn 111 108 127 8 (set (reg:SI 0 ax [orig:70 <retval> ] [70])
        (reg:SI 0 ax [orig:69 D.7247 ] [69])) mABM.c:879 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.7247 ] [69])
        (nil)))
(note 127 111 115 8 NOTE_INSN_DELETED)
(insn 115 127 118 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:70 <retval> ] [70])) mABM.c:880 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 <retval> ] [70])
        (nil)))
(insn 118 115 0 8 (use (reg/i:SI 0 ax)) mABM.c:880 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

