
;; Function falloc_matrix (falloc_matrix, funcdef_no=2, decl_uid=1723, cgraph_uid=2)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 59:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 3
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 0
  BB 6
   Insn 55: point = 0
   Insn 54: point = 0
   Insn 53: point = 0
   Insn 52: point = 0
   Insn 51: point = 0
  BB 9
   Insn 77: point = 0
   Insn 74: point = 0
   Insn 70: point = 1
   Insn 67: point = 3
  BB 8
   Insn 65: point = 4
   Insn 64: point = 4
   Insn 63: point = 5
  BB 4
   Insn 80: point = 6
   Insn 25: point = 6
  BB 2
   Insn 15: point = 6
   Insn 14: point = 6
   Insn 13: point = 6
   Insn 12: point = 7
   Insn 11: point = 8
   Insn 10: point = 8
   Insn 9: point = 9
   Insn 8: point = 11
   Insn 7: point = 13
   Insn 3: point = 14
   Insn 2: point = 14
  BB 7
   Insn 59: point = 14
  BB 5
   Insn 49: point = 14
   Insn 48: point = 14
   Insn 47: point = 15
   Insn 46: point = 17
   Insn 45: point = 19
   Insn 44: point = 20
   Insn 43: point = 22
   Insn 42: point = 24
   Insn 41: point = 25
   Insn 40: point = 26
   Insn 39: point = 28
   Insn 38: point = 29
   Insn 37: point = 29
   Insn 36: point = 30
   Insn 35: point = 32
   Insn 34: point = 34
   Insn 33: point = 35
   Insn 32: point = 37
   Insn 31: point = 38
   Insn 30: point = 40
   Insn 29: point = 42
 r59: [10..11]
 r60: [8..9]
 r61: [39..40]
 r62: [36..38]
 r63: [25..35]
 r64: [31..32]
 r65: [29..30]
 r66: [25..26]
 r67: [21..22]
 r68: [18..20]
 r69: [16..17]
 r70: [14..15]
 r71: [2..3]
 r72: [0..1]
 r73: [12..13]
 r74: [6..7]
 r75: [41..42]
 r76: [36..37]
 r77: [33..34]
 r78: [27..28]
 r79: [23..24]
 r80: [18..19]
 r81: [4..5]
Compressing live ranges: from 43 to 40 - 93%
Ranges after the compression:
 r59: [10..11]
 r60: [8..9]
 r61: [36..37]
 r62: [34..35]
 r63: [24..33]
 r64: [30..31]
 r65: [28..29]
 r66: [24..25]
 r67: [20..21]
 r68: [18..19]
 r69: [16..17]
 r70: [14..15]
 r71: [2..3]
 r72: [0..1]
 r73: [12..13]
 r74: [6..7]
 r75: [38..39]
 r76: [34..35]
 r77: [32..33]
 r78: [26..27]
 r79: [22..23]
 r80: [18..19]
 r81: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 33
changing reg in insn 41
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 67
changing reg in insn 70
changing reg in insn 70
changing reg in insn 74
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 63
changing reg in insn 64
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 55.


falloc_matrix

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={30d,26u} r1={9d,2u,2e} r2={7d} r3={1d,1u} r4={7d,1u} r5={13d,7u} r6={1d,25u} r7={1d,15u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={16d,3u} r18={6d} r19={6d} r20={1d,1u,2e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 409{324d,81u,4e} in 52{46 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 73 74
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 n+0 S4 A32])
        (reg:SI 5 di [ n ])) mUtility.c:16 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ n ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 m+0 S4 A32])
        (reg:SI 4 si [ m ])) mUtility.c:16 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ m ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 n+0 S4 A32])) mUtility.c:20 89 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [orig:59 D.5066 ] [59])
        (sign_extend:DI (reg:SI 0 ax [73]))) mUtility.c:20 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [73])
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 0 ax [orig:60 D.5066 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.5066 ] [59])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:20 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5066 ] [59])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.5066 ] [60])) mUtility.c:20 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5066 ] [60])
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f4452db8b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mUtility.c:20 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [74])
        (reg:DI 0 ax)) mUtility.c:20 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [74])
            (nil))))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg/f:DI 0 ax [74])) mUtility.c:20 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) mUtility.c:21 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) mUtility.c:21 612 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4452c81ab0 *.LC0>)) mUtility.c:21 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mUtility.c:21 91 {*movqi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f4452d98f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mUtility.c:21 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
(insn 20 19 21 3 (set (reg:SI 5 di)
        (const_int 0 [0])) mUtility.c:21 89 {*movsi_internal}
     (nil))
(call_insn 21 20 22 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f4452dacf00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mUtility.c:21 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 22 21 23)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 23 22 24 4 2 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 80 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:22 89 {*movsi_internal}
     (nil))
(jump_insn 80 25 81 4 (set (pc)
        (label_ref 60)) mUtility.c:22 650 {jump}
     (nil)
 -> 60)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 81 80 62)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 65 66 67 68 69 70 75 76 77 78 79 80
(code_label 62 81 28 5 5 "" [1 uses])
(note 28 62 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:SI 0 ax [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mUtility.c:23 89 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 0 ax [orig:61 D.5066 ] [61])
        (sign_extend:DI (reg:SI 0 ax [75]))) mUtility.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [75])
        (nil)))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 1 dx [orig:62 D.5066 ] [62])
                (ashift:DI (reg:DI 0 ax [orig:61 D.5066 ] [61])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.5066 ] [61])
        (nil)))
(insn 32 31 33 5 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg/f:DI 3 bx [orig:63 D.5067 ] [63])
                (plus:DI (reg:DI 1 dx [orig:62 D.5066 ] [62])
                    (reg/f:DI 0 ax [76])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.5066 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.5066 ] [62]))
                (nil)))))
(insn 34 33 35 5 (set (reg:SI 0 ax [77])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 m+0 S4 A32])) mUtility.c:23 89 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 0 ax [orig:64 D.5066 ] [64])
        (sign_extend:DI (reg:SI 0 ax [77]))) mUtility.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [77])
        (nil)))
(insn 36 35 37 5 (parallel [
            (set (reg:DI 0 ax [orig:65 D.5066 ] [65])
                (ashift:DI (reg:DI 0 ax [orig:64 D.5066 ] [64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.5066 ] [64])
        (nil)))
(insn 37 36 38 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:65 D.5066 ] [65])) mUtility.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5066 ] [65])
        (nil)))
(call_insn 38 37 39 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f4452db8b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mUtility.c:23 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 5 (set (reg/f:DI 0 ax [78])
        (reg:DI 0 ax)) mUtility.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [78])
            (nil))))
(insn 40 39 41 5 (set (reg/f:DI 0 ax [orig:66 D.5068 ] [66])
        (reg/f:DI 0 ax [78])) mUtility.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (nil)))
(insn 41 40 42 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:63 D.5067 ] [63]) [0 *_9+0 S8 A64])
        (reg/f:DI 0 ax [orig:66 D.5068 ] [66])) mUtility.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5068 ] [66])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:63 D.5067 ] [63])
            (nil))))
(insn 42 41 43 5 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mUtility.c:24 89 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 0 ax [orig:67 D.5066 ] [67])
        (sign_extend:DI (reg:SI 0 ax [79]))) mUtility.c:24 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(insn 44 43 45 5 (parallel [
            (set (reg:DI 1 dx [orig:68 D.5066 ] [68])
                (ashift:DI (reg:DI 0 ax [orig:67 D.5066 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:24 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.5066 ] [67])
        (nil)))
(insn 45 44 46 5 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.5067 ] [69])
                (plus:DI (reg/f:DI 0 ax [80])
                    (reg:DI 1 dx [orig:68 D.5066 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:24 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.5066 ] [68])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
                    (reg:DI 1 dx [orig:68 D.5066 ] [68]))
                (nil)))))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [orig:70 D.5069 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [orig:69 D.5067 ] [69]) [0 *_16+0 S8 A64])) mUtility.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5067 ] [69])
        (nil)))
(insn 48 47 49 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:70 D.5069 ] [70])
            (const_int 0 [0]))) mUtility.c:24 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5069 ] [70])
        (nil)))
(jump_insn 49 48 50 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) mUtility.c:24 612 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4452c81ab0 *.LC0>)) mUtility.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) mUtility.c:24 91 {*movqi_internal}
     (nil))
(call_insn 53 52 54 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f4452d98f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mUtility.c:24 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
(insn 54 53 55 6 (set (reg:SI 5 di)
        (const_int 0 [0])) mUtility.c:24 89 {*movsi_internal}
     (nil))
(call_insn 55 54 56 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f4452dacf00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mUtility.c:24 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 56 55 57)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 57 56 58 7 4 "" [1 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:22 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81
(code_label 60 59 61 8 3 "" [1 uses])
(note 61 60 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 63 61 64 8 (set (reg:SI 0 ax [81])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mUtility.c:22 89 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [81])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 n+0 S4 A32]))) mUtility.c:22 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [81])
        (nil)))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mUtility.c:22 612 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 71 72
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 70 9 (set (reg/f:DI 0 ax [orig:71 D.5067 ] [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:26 87 {*movdi_internal_rex64}
     (nil))
(insn 70 67 74 9 (set (reg:DI 0 ax [orig:72 <retval> ] [72])
        (reg/f:DI 0 ax [orig:71 D.5067 ] [71])) mUtility.c:26 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5067 ] [71])
        (nil)))
(insn 74 70 77 9 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:72 <retval> ] [72])) mUtility.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:72 <retval> ] [72])
        (nil)))
(insn 77 74 0 9 (use (reg/i:DI 0 ax)) mUtility.c:27 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function falloc_vec (falloc_vec, funcdef_no=3, decl_uid=1725, cgraph_uid=3)


********** Local #1: **********

          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


falloc_vec

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,10u} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,9u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d,1u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 195{163d,32u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 63 64
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (reg:SI 5 di [ i ])) mUtility.c:29 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ i ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [63])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:31 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 0 ax [orig:59 D.5071 ] [59])
        (sign_extend:DI (reg:SI 0 ax [63]))) mUtility.c:31 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [63])
        (nil)))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [orig:60 D.5071 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.5071 ] [59])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:31 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5071 ] [59])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.5071 ] [60])) mUtility.c:31 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5071 ] [60])
        (nil)))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f4452db8b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mUtility.c:31 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [64])
        (reg:DI 0 ax)) mUtility.c:31 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [64])
            (nil))))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
        (reg/f:DI 0 ax [64])) mUtility.c:31 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (nil)))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) mUtility.c:32 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) mUtility.c:32 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4452c81ab0 *.LC0>)) mUtility.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mUtility.c:32 91 {*movqi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f4452d98f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mUtility.c:32 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
(insn 19 18 20 3 (set (reg:SI 5 di)
        (const_int 0 [0])) mUtility.c:32 89 {*movsi_internal}
     (nil))
(call_insn 20 19 21 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f4452dacf00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mUtility.c:32 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 21 20 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 61 62
(code_label 22 21 23 4 8 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 27 4 (set (reg/f:DI 0 ax [orig:61 D.5072 ] [61])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])) mUtility.c:34 87 {*movdi_internal_rex64}
     (nil))
(insn 27 24 31 4 (set (reg:DI 0 ax [orig:62 <retval> ] [62])
        (reg/f:DI 0 ax [orig:61 D.5072 ] [61])) mUtility.c:34 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5072 ] [61])
        (nil)))
(insn 31 27 34 4 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:62 <retval> ] [62])) mUtility.c:35 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 <retval> ] [62])
        (nil)))
(insn 34 31 0 4 (use (reg/i:DI 0 ax)) mUtility.c:35 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function ialloc_vec (ialloc_vec, funcdef_no=4, decl_uid=1727, cgraph_uid=4)


********** Local #1: **********

          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


ialloc_vec

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,10u} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,9u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d,1u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 195{163d,32u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 63 64
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (reg:SI 5 di [ i ])) mUtility.c:36 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ i ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [63])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:38 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 0 ax [orig:59 D.5073 ] [59])
        (sign_extend:DI (reg:SI 0 ax [63]))) mUtility.c:38 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [63])
        (nil)))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [orig:60 D.5073 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.5073 ] [59])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:38 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5073 ] [59])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.5073 ] [60])) mUtility.c:38 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5073 ] [60])
        (nil)))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f4452db8b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mUtility.c:38 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [64])
        (reg:DI 0 ax)) mUtility.c:38 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [64])
            (nil))))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
        (reg/f:DI 0 ax [64])) mUtility.c:38 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (nil)))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) mUtility.c:39 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) mUtility.c:39 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4452c81ab0 *.LC0>)) mUtility.c:39 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) mUtility.c:39 91 {*movqi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f4452d98f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mUtility.c:39 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (nil))))
(insn 19 18 20 3 (set (reg:SI 5 di)
        (const_int 0 [0])) mUtility.c:39 89 {*movsi_internal}
     (nil))
(call_insn 20 19 21 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f4452dacf00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mUtility.c:39 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 21 20 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 61 62
(code_label 22 21 23 4 11 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 27 4 (set (reg/f:DI 0 ax [orig:61 D.5074 ] [61])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])) mUtility.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 27 24 31 4 (set (reg:DI 0 ax [orig:62 <retval> ] [62])
        (reg/f:DI 0 ax [orig:61 D.5074 ] [61])) mUtility.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5074 ] [61])
        (nil)))
(insn 31 27 34 4 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:62 <retval> ] [62])) mUtility.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 <retval> ] [62])
        (nil)))
(insn 34 31 0 4 (use (reg/i:DI 0 ax)) mUtility.c:42 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function BuG (BuG, funcdef_no=5, decl_uid=1729, cgraph_uid=5)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


BuG

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r4={4d,1u} r5={5d,3u} r6={1d,4u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 126{111d,15u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 s+0 S8 A64])
        (reg:DI 5 di [ s ])) mUtility.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ s ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 s+0 S8 A64])) mUtility.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [59])) mUtility.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [59])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f4452ca3ed8 *.LC1>)) mUtility.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) mUtility.c:44 91 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f4452d98f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mUtility.c:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 5 di)
        (const_int 0 [0])) mUtility.c:45 89 {*movsi_internal}
     (nil))
(call_insn 12 11 13 2 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f4452dacf00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mUtility.c:45 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 13 12 0)

;; Function rad (rad, funcdef_no=6, decl_uid=1734, cgraph_uid=6)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 9
	 Choosing alt 0 in insn 9:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0
   Insn 16: point = 0
   Insn 12: point = 1
   Insn 9: point = 3
   Insn 8: point = 5
   Insn 7: point = 6
   Insn 6: point = 8
   Insn 5: point = 9
 r59: [4..6]
 r60: [2..3]
 r61: [0..1]
 r62: [7..9]
 r63: [7..8]
 r64: [4..5]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r59: [4..5]
 r60: [2..3]
 r61: [0..1]
 r62: [6..7]
 r63: [6..7]
 r64: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns


rad

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 6[bp] 8[st] 9[st(1)]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,3u} r7={1d,2u} r8={5d,6u} r9={2d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 39{25d,14u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 8 [st] 59 60 61 62 63 64
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 9 st(1) [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 degi+0 S16 A128])) mUtility.c:48 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:XF 8 st [63])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mUtility.c:48 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.8e+2 [0x0.b4p+8])
        (nil)))
(insn 7 6 8 2 (set (reg:XF 9 st(1) [orig:59 D.5076 ] [59])
        (div:XF (reg:XF 9 st(1) [62])
            (reg:XF 8 st [63]))) mUtility.c:48 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [63])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [62])
            (nil))))
(insn 8 7 9 2 (set (reg:XF 8 st [64])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S16 A128])) mUtility.c:48 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 9 8 12 2 (set (reg:XF 8 st [orig:60 D.5076 ] [60])
        (mult:XF (reg:XF 8 st [64])
            (reg:XF 9 st(1) [orig:59 D.5076 ] [59]))) mUtility.c:48 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5076 ] [59])
            (nil))))
(insn 12 9 16 2 (set (reg:XF 8 st [orig:61 <retval> ] [61])
        (reg:XF 8 st [orig:60 D.5076 ] [60])) mUtility.c:48 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5076 ] [60])
        (nil)))
(insn 16 12 19 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:61 <retval> ] [61])) mUtility.c:49 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 <retval> ] [61])
        (nil)))
(insn 19 16 0 2 (use (reg/i:XF 8 st)) mUtility.c:49 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function deg (deg, funcdef_no=7, decl_uid=1806, cgraph_uid=7)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 7:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns


deg

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 6[bp] 8[st] 9[st(1)]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,3u} r7={1d,2u} r8={5d,6u} r9={2d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 39{25d,14u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 8 [st] 59 60 61 62 63 64
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 9 st(1) [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 radi+0 S16 A128])) mUtility.c:51 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:XF 8 st [63])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mUtility.c:51 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.8e+2 [0x0.b4p+8])
        (nil)))
(insn 7 6 8 2 (set (reg:XF 9 st(1) [orig:59 D.5077 ] [59])
        (mult:XF (reg:XF 9 st(1) [62])
            (reg:XF 8 st [63]))) mUtility.c:51 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [63])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [62])
            (nil))))
(insn 8 7 9 2 (set (reg:XF 8 st [64])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S16 A128])) mUtility.c:51 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 9 8 12 2 (set (reg:XF 8 st [orig:60 D.5077 ] [60])
        (div:XF (reg:XF 9 st(1) [orig:59 D.5077 ] [59])
            (reg:XF 8 st [64]))) mUtility.c:51 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5077 ] [59])
            (nil))))
(insn 12 9 16 2 (set (reg:XF 8 st [orig:61 <retval> ] [61])
        (reg:XF 8 st [orig:60 D.5077 ] [60])) mUtility.c:51 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5077 ] [60])
        (nil)))
(insn 16 12 19 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:61 <retval> ] [61])) mUtility.c:52 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 <retval> ] [61])
        (nil)))
(insn 19 16 0 2 (use (reg/i:XF 8 st)) mUtility.c:52 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _to_sphere (_to_sphere, funcdef_no=8, decl_uid=3918, cgraph_uid=8)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=619,losers=2 -- reject
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) ?x  (1) f  (2) m {*truncxfdf2_mixed}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 30:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 47: point = 0
   Insn 44: point = 0
   Insn 40: point = 1
   Insn 37: point = 3
   Insn 36: point = 4
   Insn 35: point = 5
   Insn 34: point = 6
   Insn 33: point = 7
   Insn 32: point = 7
   Insn 31: point = 8
   Insn 30: point = 10
   Insn 29: point = 11
   Insn 28: point = 11
   Insn 27: point = 12
   Insn 26: point = 14
   Insn 25: point = 16
   Insn 24: point = 17
   Insn 23: point = 19
   Insn 22: point = 21
   Insn 21: point = 22
   Insn 20: point = 23
   Insn 19: point = 24
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 26
   Insn 15: point = 26
   Insn 14: point = 27
   Insn 13: point = 28
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 33
   Insn 9: point = 35
   Insn 8: point = 36
   Insn 7: point = 38
   Insn 3: point = 39
   Insn 2: point = 39
 r69: [9..10]
Compressing live ranges: from 39 to 2 - 5%
Ranges after the compression:
 r69: [0..1]
  Slot 0 regnos (width = 8):	 69
Changing spilled pseudos to memory in insn #30
Changing spilled pseudos to memory in insn #31

********** Local #2: **********

Reusing alternative 0 for insn #31
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #30
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 30:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 21
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 40
changing reg in insn 44
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 35
changing reg in insn 36
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 33.


_to_sphere

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0] 41[r12]
;;  ref usage 	r0={16d,12u} r1={6d,1u} r2={6d,1u} r3={1d,1u} r4={5d,1u} r5={5d,1u} r6={1d,12u} r7={1d,14u} r8={10d,9u} r9={5d,1u} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={7d} r18={4d} r19={4d} r20={1d,1u,3e} r21={7d,3u} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={1d,1u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 282{221d,58u,3e} in 36{32 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) mUtility.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S8 A64])
        (reg:DI 4 si [ y ])) mUtility.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ y ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S8 A64])) mUtility.c:62 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 41 r12 [orig:59 D.5078 ] [59])
                (plus:DI (reg/f:DI 0 ax [74])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:62 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 y+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:62 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:60 D.5078 ] [60])
                (plus:DI (reg/f:DI 0 ax [75])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:62 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 11 10 12 2 (set (reg:XF 2 cx [orig:61 D.5079 ] [61])
        (mem:XF (reg/f:DI 0 ax [orig:60 D.5078 ] [60]) [0 *_4+0 S16 A128])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.5078 ] [60])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:62 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:XF 0 ax [orig:62 D.5079 ] [62])
        (mem:XF (reg/f:DI 0 ax [76]) [0 *x_3(D)+0 S16 A128])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 14 13 15 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:61 D.5079 ] [61])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:61 D.5079 ] [61])
        (nil)))
(insn 15 14 16 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:62 D.5079 ] [62])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:62 D.5079 ] [62])
        (nil)))
(call_insn 16 15 17 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("atan2l") [flags 0x41]  <function_decl 0x7f4452d42500 atan2l>) [0 __builtin_atan2l S1 A8])
            (const_int 32 [0x20]))) mUtility.c:62 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 17 16 18 2 (set (reg:XF 8 st [orig:63 D.5079 ] [63])
        (reg:XF 8 st)) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 18 17 19 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:63 D.5079 ] [63])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5079 ] [63])
        (nil)))
(call_insn 19 18 20 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("deg") [flags 0x3]  <function_decl 0x7f4452e41600 deg>) [0 deg S1 A8])
            (const_int 16 [0x10]))) mUtility.c:62 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 20 19 21 2 (set (reg:XF 8 st [orig:64 D.5079 ] [64])
        (reg:XF 8 st)) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 21 20 22 2 (set (mem:XF (reg/f:DI 41 r12 [orig:59 D.5078 ] [59]) [0 *_2+0 S16 A128])
        (reg:XF 8 st [orig:64 D.5079 ] [64])) mUtility.c:62 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5079 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:59 D.5078 ] [59])
            (nil))))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:63 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.5078 ] [65])
                (plus:DI (reg/f:DI 0 ax [77])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:63 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 x+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 24 23 25 2 (set (reg:XF 9 st(1) [orig:66 D.5079 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.5078 ] [65]) [0 *_9+0 S16 A128])) mUtility.c:63 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5078 ] [65])
        (nil)))
(insn 25 24 26 2 (set (reg:XF 8 st [78])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:63 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 26 25 27 2 (set (reg:XF 8 st [orig:67 D.5079 ] [67])
        (div:XF (reg:XF 9 st(1) [orig:66 D.5079 ] [66])
            (reg:XF 8 st [78]))) mUtility.c:63 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [78])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:66 D.5079 ] [66])
            (nil))))
(insn 27 26 28 2 (parallel [
            (set (reg:DF 21 xmm0 [orig:68 D.5080 ] [68])
                (float_truncate:DF (reg:XF 8 st [orig:67 D.5079 ] [67])))
            (clobber (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0  S8 A64]))
        ]) mUtility.c:63 170 {*truncxfdf2_mixed}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5079 ] [67])
        (nil)))
(insn 28 27 29 2 (set (reg:DF 21 xmm0)
        (reg:DF 21 xmm0 [orig:68 D.5080 ] [68])) mUtility.c:63 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:68 D.5080 ] [68])
        (nil)))
(call_insn 29 28 30 2 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("asin") [flags 0x41]  <function_decl 0x7f4452d40300 asin>) [0 __builtin_asin S1 A8])
            (const_int 0 [0]))) mUtility.c:63 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A64])
        (reg:DF 21 xmm0)) mUtility.c:63 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 31 30 32 2 (set (reg:XF 8 st [orig:70 D.5079 ] [70])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S8 A64]))) mUtility.c:63 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 69 [ D.5080 ])
        (nil)))
(insn 32 31 33 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:70 D.5079 ] [70])) mUtility.c:63 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.5079 ] [70])
        (nil)))
(call_insn 33 32 34 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("deg") [flags 0x3]  <function_decl 0x7f4452e41600 deg>) [0 deg S1 A8])
            (const_int 16 [0x10]))) mUtility.c:63 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 34 33 35 2 (set (reg:XF 8 st [orig:71 D.5079 ] [71])
        (reg:XF 8 st)) mUtility.c:63 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 35 34 36 2 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S8 A64])) mUtility.c:63 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 2 (set (mem:XF (reg/f:DI 0 ax [79]) [0 *y_1(D)+0 S16 A128])
        (reg:XF 8 st [orig:71 D.5079 ] [71])) mUtility.c:63 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5079 ] [71])
            (nil))))
(insn 37 36 40 2 (set (reg:SI 0 ax [orig:72 D.5081 ] [72])
        (const_int 1 [0x1])) mUtility.c:65 89 {*movsi_internal}
     (nil))
(insn 40 37 44 2 (set (reg:SI 0 ax [orig:73 <retval> ] [73])
        (reg:SI 0 ax [orig:72 D.5081 ] [72])) mUtility.c:65 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5081 ] [72])
        (nil)))
(insn 44 40 47 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:73 <retval> ] [73])) mUtility.c:66 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 <retval> ] [73])
        (nil)))
(insn 47 44 0 2 (use (reg/i:SI 0 ax)) mUtility.c:66 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _to_cart (_to_cart, funcdef_no=9, decl_uid=3922, cgraph_uid=9)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 16:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=97 from oldreg=62, assigning class FLOAT_REGS to r97
   16: r97:XF=r97:XF*r86:XF
      REG_DEAD r86:XF
      REG_DEAD r61:XF
    Inserting insn reload before:
   78: r97:XF=r61:XF
    Inserting insn reload after:
   79: r62:XF=r97:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=98 from oldreg=62, assigning class FLOAT_REGS to r98
   26: r67:XF=r66:XF*r98:XF
      REG_DEAD r66:XF
      REG_DEAD r62:XF
    Inserting insn reload before:
   80: r98:XF=r62:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 40:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=99 from oldreg=72, assigning class FLOAT_REGS to r99
   40: r99:XF=r99:XF*r91:XF
      REG_DEAD r91:XF
      REG_DEAD r71:XF
    Inserting insn reload before:
   81: r99:XF=r71:XF
    Inserting insn reload after:
   82: r72:XF=r99:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=100 from oldreg=72, assigning class FLOAT_REGS to r100
   50: r77:XF=r76:XF*r100:XF
      REG_DEAD r76:XF
      REG_DEAD r72:XF
    Inserting insn reload before:
   83: r100:XF=r72:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 63:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=101 from oldreg=72, assigning class FLOAT_REGS to inheritance r101
    Original reg change 72->101 (bb2):
   82: r101:XF=r99:XF
    Add original<-inheritance after:
   84: r72:XF=r101:XF

    Inheritance reuse change 72->101 (bb2):
   83: r100:XF=r101:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=102 from oldreg=62, assigning class FLOAT_REGS to inheritance r102
    Original reg change 62->102 (bb2):
   79: r102:XF=r97:XF
    Add original<-inheritance after:
   85: r62:XF=r102:XF

    Inheritance reuse change 62->102 (bb2):
   80: r98:XF=r102:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    84: r72:XF=r101:XF
deleting insn with uid = 84.
	    Removing dead insn:
    85: r62:XF=r102:XF
deleting insn with uid = 85.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 75: point = 0
   Insn 72: point = 0
   Insn 68: point = 1
   Insn 65: point = 3
   Insn 64: point = 4
   Insn 63: point = 5
   Insn 62: point = 7
   Insn 61: point = 8
   Insn 60: point = 9
   Insn 59: point = 9
   Insn 58: point = 10
   Insn 57: point = 11
   Insn 56: point = 11
   Insn 55: point = 12
   Insn 54: point = 14
   Insn 53: point = 15
   Insn 52: point = 17
   Insn 51: point = 18
   Insn 50: point = 19
   Insn 83: point = 21
	   Creating copy r100<-r101@1
   Insn 49: point = 23
   Insn 48: point = 24
   Insn 47: point = 24
   Insn 46: point = 25
   Insn 45: point = 26
   Insn 44: point = 26
   Insn 43: point = 27
   Insn 42: point = 29
   Insn 41: point = 31
   Insn 82: point = 32
	   Creating copy r99->r101@1
   Insn 40: point = 34
   Insn 81: point = 35
	Hard reg 8 is preferable by r99 with profit 1
   Insn 39: point = 37
   Insn 38: point = 38
   Insn 37: point = 39
   Insn 36: point = 39
   Insn 35: point = 40
   Insn 34: point = 41
   Insn 33: point = 41
   Insn 32: point = 42
   Insn 31: point = 44
   Insn 30: point = 45
   Insn 29: point = 47
   Insn 28: point = 48
   Insn 27: point = 49
   Insn 26: point = 50
   Insn 80: point = 52
	   Creating copy r98<-r102@1
   Insn 25: point = 54
   Insn 24: point = 55
   Insn 23: point = 55
   Insn 22: point = 56
   Insn 21: point = 57
   Insn 20: point = 57
   Insn 19: point = 58
   Insn 18: point = 60
   Insn 17: point = 62
   Insn 79: point = 63
	   Creating copy r97->r102@1
   Insn 16: point = 65
   Insn 78: point = 66
	Hard reg 8 is preferable by r97 with profit 1
   Insn 15: point = 68
   Insn 14: point = 69
   Insn 13: point = 70
   Insn 12: point = 70
   Insn 11: point = 71
   Insn 10: point = 72
   Insn 9: point = 72
   Insn 8: point = 73
   Insn 7: point = 75
   Insn 3: point = 76
   Insn 2: point = 76
 r59: [72..73]
 r60: [70..71]
 r61: [67..69]
 r63: [59..60]
 r64: [57..58]
 r65: [55..56]
 r66: [51..54]
 r67: [48..50]
 r68: [18..45]
 r69: [41..42]
 r70: [39..40]
 r71: [36..38]
 r73: [28..29]
 r74: [26..27]
 r75: [24..25]
 r76: [20..23]
 r77: [18..19]
 r78: [4..15]
 r79: [11..12]
 r80: [9..10]
 r81: [6..8]
 r82: [4..5]
 r83: [2..3]
 r84: [0..1]
 r85: [74..75]
 r86: [65..68]
 r87: [61..62]
 r88: [48..49]
 r89: [46..47]
 r90: [43..44]
 r91: [34..37]
 r92: [30..31]
 r93: [16..17]
 r94: [13..14]
 r95: [6..7]
 r97: [64..66]
 r98: [51..52]
 r99: [33..35]
 r100: [20..21]
 r101: [22..32]
 r102: [53..63]
Compressing live ranges: from 76 to 66 - 86%
Ranges after the compression:
 r59: [62..63]
 r60: [60..61]
 r61: [58..59]
 r63: [52..53]
 r64: [50..51]
 r65: [48..49]
 r66: [44..47]
 r67: [42..43]
 r68: [16..39]
 r69: [36..37]
 r70: [34..35]
 r71: [32..33]
 r73: [26..27]
 r74: [24..25]
 r75: [22..23]
 r76: [18..21]
 r77: [16..17]
 r78: [4..13]
 r79: [10..11]
 r80: [8..9]
 r81: [6..7]
 r82: [4..5]
 r83: [2..3]
 r84: [0..1]
 r85: [64..65]
 r86: [56..59]
 r87: [54..55]
 r88: [42..43]
 r89: [40..41]
 r90: [38..39]
 r91: [30..33]
 r92: [28..29]
 r93: [14..15]
 r94: [12..13]
 r95: [6..7]
 r97: [56..57]
 r98: [44..45]
 r99: [30..31]
 r100: [18..19]
 r101: [20..29]
 r102: [46..55]
	 Assigning to 97 (cl=FLOAT_REGS, orig=62, freq=3, tfirst=97, tfreq=3)...
	   Assign 8 to reload r97 (freq=3)
	Hard reg 8 is preferable by r102 with profit 1
	Hard reg 8 is preferable by r98 with profit 1
	 Assigning to 98 (cl=FLOAT_REGS, orig=62, freq=2, tfirst=97, tfreq=3)...
	   Assign 10 to reload r98 (freq=2)
	Hard reg 8 is preferable by r102 with profit 1
	Hard reg 10 is preferable by r102 with profit 1
	 Assigning to 102 (cl=FLOAT_REGS, orig=62, freq=2, tfirst=97, tfreq=3)...
	 Assigning to 99 (cl=FLOAT_REGS, orig=72, freq=3, tfirst=99, tfreq=3)...
	   Assign 8 to reload r99 (freq=3)
	Hard reg 8 is preferable by r101 with profit 1
	Hard reg 8 is preferable by r100 with profit 1
	 Assigning to 100 (cl=FLOAT_REGS, orig=72, freq=2, tfirst=99, tfreq=3)...
	   Assign 11 to reload r100 (freq=2)
	Hard reg 8 is preferable by r101 with profit 1
	Hard reg 11 is preferable by r101 with profit 1
	 Assigning to 101 (cl=FLOAT_REGS, orig=72, freq=2, tfirst=99, tfreq=3)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
   83: r100:XF=r72:XF
      REG_DEAD r72:XF
   Insn after restoring regs:
   82: r72:XF=r99:XF
      REG_DEAD r99:XF
   Insn after restoring regs:
   80: r98:XF=r62:XF
      REG_DEAD r62:XF
   Insn after restoring regs:
   79: r62:XF=r97:XF
      REG_DEAD r97:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 75: point = 0
   Insn 72: point = 0
   Insn 68: point = 1
   Insn 65: point = 3
   Insn 64: point = 4
   Insn 63: point = 5
   Insn 62: point = 7
   Insn 61: point = 8
   Insn 60: point = 9
   Insn 59: point = 9
   Insn 58: point = 10
   Insn 57: point = 11
   Insn 56: point = 11
   Insn 55: point = 12
   Insn 54: point = 14
   Insn 53: point = 15
   Insn 52: point = 17
   Insn 51: point = 18
   Insn 50: point = 19
   Insn 83: point = 21
   Insn 49: point = 23
   Insn 48: point = 24
   Insn 47: point = 24
   Insn 46: point = 25
   Insn 45: point = 26
   Insn 44: point = 26
   Insn 43: point = 27
   Insn 42: point = 29
   Insn 41: point = 31
   Insn 82: point = 32
   Insn 40: point = 34
   Insn 81: point = 35
   Insn 39: point = 37
   Insn 38: point = 38
   Insn 37: point = 39
   Insn 36: point = 39
   Insn 35: point = 40
   Insn 34: point = 41
   Insn 33: point = 41
   Insn 32: point = 42
   Insn 31: point = 44
   Insn 30: point = 45
   Insn 29: point = 47
   Insn 28: point = 48
   Insn 27: point = 49
   Insn 26: point = 50
   Insn 80: point = 52
   Insn 25: point = 54
   Insn 24: point = 55
   Insn 23: point = 55
   Insn 22: point = 56
   Insn 21: point = 57
   Insn 20: point = 57
   Insn 19: point = 58
   Insn 18: point = 60
   Insn 17: point = 62
   Insn 79: point = 63
   Insn 16: point = 65
   Insn 78: point = 66
   Insn 15: point = 68
   Insn 14: point = 69
   Insn 13: point = 70
   Insn 12: point = 70
   Insn 11: point = 71
   Insn 10: point = 72
   Insn 9: point = 72
   Insn 8: point = 73
   Insn 7: point = 75
   Insn 3: point = 76
   Insn 2: point = 76
 r62: [53..63]
 r72: [22..32]
Compressing live ranges: from 76 to 4 - 5%
Ranges after the compression:
 r62: [2..3]
 r72: [0..1]
  Slot 0 regnos (width = 16):	 62	 72
Changing spilled pseudos to memory in insn #79
Changing spilled pseudos to memory in insn #80
Changing spilled pseudos to memory in insn #82
Changing spilled pseudos to memory in insn #83

********** Local #3: **********

Reusing alternative 0 for insn #83
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #82
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #80
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #79
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 51
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 64
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 68
changing reg in insn 72
changing reg in insn 7
changing reg in insn 8
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 60.


_to_cart

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 17[flags]
;;  ref usage 	r0={29d,19u} r1={16d,5u} r2={11d} r3={2d,2u} r4={11d,1u} r5={11d,1u} r6={1d,16u} r7={1d,32u} r8={27d,27u} r9={13d,3u} r10={11d,1u} r11={11d,1u} r12={10d} r13={10d} r14={10d} r15={10d} r17={14d} r18={10d} r19={10d} r20={1d,1u,4e} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} 
;;    total ref usage 622{509d,109u,4e} in 70{60 regular + 10 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])
        (reg:DI 4 si [ A ])) mUtility.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ A ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mUtility.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:XF 0 ax [orig:59 D.5083 ] [59])
        (mem:XF (reg/f:DI 0 ax [85]) [0 *a_1(D)+0 S16 A128])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 9 8 10 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:59 D.5083 ] [59])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.5083 ] [59])
        (nil)))
(call_insn 10 9 11 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:71 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:60 D.5083 ] [60])
        (reg:XF 8 st)) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 12 11 13 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:60 D.5083 ] [60])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5083 ] [60])
        (nil)))
(call_insn/u 13 12 14 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:71 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 14 13 15 2 (set (reg:XF 8 st [orig:61 D.5083 ] [61])
        (reg:XF 8 st)) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 15 14 78 2 (set (reg:XF 9 st(1) [86])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 78 15 16 2 (set (reg:XF 8 st [orig:62 D.5083 ] [62])
        (reg:XF 8 st [orig:61 D.5083 ] [61])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5083 ] [61])
        (nil)))
(insn 16 78 79 2 (set (reg:XF 8 st [orig:62 D.5083 ] [62])
        (mult:XF (reg:XF 8 st [orig:62 D.5083 ] [62])
            (reg:XF 9 st(1) [86]))) mUtility.c:71 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [86])
        (nil)))
(insn 79 16 85 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])
        (reg:XF 8 st [orig:62 D.5083 ] [62])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5083 ] [62])
        (nil)))
(note 85 79 17 2 NOTE_INSN_DELETED)
(insn 17 85 18 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mUtility.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5084 ] [63])
                (plus:DI (reg/f:DI 0 ax [87])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:71 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 19 18 20 2 (set (reg:XF 0 ax [orig:64 D.5083 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.5084 ] [63]) [0 *_6+0 S16 A128])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5084 ] [63])
        (nil)))
(insn 20 19 21 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:64 D.5083 ] [64])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:64 D.5083 ] [64])
        (nil)))
(call_insn 21 20 22 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:71 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 22 21 23 2 (set (reg:XF 8 st [orig:65 D.5083 ] [65])
        (reg:XF 8 st)) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 23 22 24 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:65 D.5083 ] [65])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.5083 ] [65])
        (nil)))
(call_insn/u 24 23 25 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:71 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 25 24 80 2 (set (reg:XF 8 st [orig:66 D.5083 ] [66])
        (reg:XF 8 st)) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 80 25 26 2 (set (reg:XF 10 st(2) [orig:62 D.5083 ] [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 62 [ D.5083 ])
        (nil)))
(insn 26 80 27 2 (set (reg:XF 8 st [orig:67 D.5083 ] [67])
        (mult:XF (reg:XF 8 st [orig:66 D.5083 ] [66])
            (reg:XF 10 st(2) [orig:62 D.5083 ] [62]))) mUtility.c:71 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:62 D.5083 ] [62])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5083 ] [66])
            (nil))))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) mUtility.c:71 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (mem:XF (reg/f:DI 0 ax [88]) [0 *A_11(D)+0 S16 A128])
        (reg:XF 8 st [orig:67 D.5083 ] [67])) mUtility.c:71 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5083 ] [67])
            (nil))))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) mUtility.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg/f:DI 3 bx [orig:68 D.5084 ] [68])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mUtility.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg:XF 0 ax [orig:69 D.5083 ] [69])
        (mem:XF (reg/f:DI 0 ax [90]) [0 *a_1(D)+0 S16 A128])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (nil)))
(insn 33 32 34 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:69 D.5083 ] [69])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:69 D.5083 ] [69])
        (nil)))
(call_insn 34 33 35 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:72 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 35 34 36 2 (set (reg:XF 8 st [orig:70 D.5083 ] [70])
        (reg:XF 8 st)) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 36 35 37 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:70 D.5083 ] [70])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.5083 ] [70])
        (nil)))
(call_insn/u 37 36 38 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:72 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 38 37 39 2 (set (reg:XF 8 st [orig:71 D.5083 ] [71])
        (reg:XF 8 st)) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 39 38 81 2 (set (reg:XF 9 st(1) [91])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 81 39 40 2 (set (reg:XF 8 st [orig:72 D.5083 ] [72])
        (reg:XF 8 st [orig:71 D.5083 ] [71])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5083 ] [71])
        (nil)))
(insn 40 81 82 2 (set (reg:XF 8 st [orig:72 D.5083 ] [72])
        (mult:XF (reg:XF 8 st [orig:72 D.5083 ] [72])
            (reg:XF 9 st(1) [91]))) mUtility.c:72 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [91])
        (nil)))
(insn 82 40 84 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])
        (reg:XF 8 st [orig:72 D.5083 ] [72])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5083 ] [72])
        (nil)))
(note 84 82 41 2 NOTE_INSN_DELETED)
(insn 41 84 42 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mUtility.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.5084 ] [73])
                (plus:DI (reg/f:DI 0 ax [92])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [92])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 43 42 44 2 (set (reg:XF 0 ax [orig:74 D.5083 ] [74])
        (mem:XF (reg/f:DI 0 ax [orig:73 D.5084 ] [73]) [0 *_17+0 S16 A128])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.5084 ] [73])
        (nil)))
(insn 44 43 45 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:74 D.5083 ] [74])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:74 D.5083 ] [74])
        (nil)))
(call_insn 45 44 46 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:72 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 46 45 47 2 (set (reg:XF 8 st [orig:75 D.5083 ] [75])
        (reg:XF 8 st)) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 47 46 48 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:75 D.5083 ] [75])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5083 ] [75])
        (nil)))
(call_insn/u 48 47 49 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:72 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 49 48 83 2 (set (reg:XF 8 st [orig:76 D.5083 ] [76])
        (reg:XF 8 st)) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 83 49 50 2 (set (reg:XF 11 st(3) [orig:72 D.5083 ] [72])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 %sfp+-48 S16 A128])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 72 [ D.5083 ])
        (nil)))
(insn 50 83 51 2 (set (reg:XF 8 st [orig:77 D.5083 ] [77])
        (mult:XF (reg:XF 8 st [orig:76 D.5083 ] [76])
            (reg:XF 11 st(3) [orig:72 D.5083 ] [72]))) mUtility.c:72 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:72 D.5083 ] [72])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5083 ] [76])
            (nil))))
(insn 51 50 52 2 (set (mem:XF (reg/f:DI 3 bx [orig:68 D.5084 ] [68]) [0 *_12+0 S16 A128])
        (reg:XF 8 st [orig:77 D.5083 ] [77])) mUtility.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5083 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:68 D.5084 ] [68])
            (nil))))
(insn 52 51 53 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) mUtility.c:73 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg/f:DI 3 bx [orig:78 D.5084 ] [78])
                (plus:DI (reg/f:DI 0 ax [93])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:73 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 A+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 54 53 55 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 a+0 S8 A64])) mUtility.c:73 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (reg:XF 0 ax [orig:79 D.5083 ] [79])
        (mem:XF (reg/f:DI 0 ax [94]) [0 *a_1(D)+0 S16 A128])) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 56 55 57 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:79 D.5083 ] [79])) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:79 D.5083 ] [79])
        (nil)))
(call_insn 57 56 58 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:73 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 58 57 59 2 (set (reg:XF 8 st [orig:80 D.5083 ] [80])
        (reg:XF 8 st)) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 59 58 60 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:80 D.5083 ] [80])) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.5083 ] [80])
        (nil)))
(call_insn/u 60 59 61 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:73 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 61 60 62 2 (set (reg:XF 8 st [orig:81 D.5083 ] [81])
        (reg:XF 8 st)) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 62 61 63 2 (set (reg:XF 9 st(1) [95])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 63 62 64 2 (set (reg:XF 8 st [orig:82 D.5083 ] [82])
        (mult:XF (reg:XF 8 st [orig:81 D.5083 ] [81])
            (reg:XF 9 st(1) [95]))) mUtility.c:73 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [95])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.5083 ] [81])
            (nil))))
(insn 64 63 65 2 (set (mem:XF (reg/f:DI 3 bx [orig:78 D.5084 ] [78]) [0 *_22+0 S16 A128])
        (reg:XF 8 st [orig:82 D.5083 ] [82])) mUtility.c:73 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.5083 ] [82])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:78 D.5084 ] [78])
            (nil))))
(insn 65 64 68 2 (set (reg:SI 0 ax [orig:83 D.5085 ] [83])
        (const_int 1 [0x1])) mUtility.c:75 89 {*movsi_internal}
     (nil))
(insn 68 65 72 2 (set (reg:SI 0 ax [orig:84 <retval> ] [84])
        (reg:SI 0 ax [orig:83 D.5085 ] [83])) mUtility.c:75 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 D.5085 ] [83])
        (nil)))
(insn 72 68 75 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:84 <retval> ] [84])) mUtility.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 <retval> ] [84])
        (nil)))
(insn 75 72 0 2 (use (reg/i:SI 0 ax)) mUtility.c:76 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function mean (mean, funcdef_no=10, decl_uid=1809, cgraph_uid=10)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=74 from oldreg=60, assigning class GENERAL_REGS to r74
   15: {r74:DI=r74:DI<<0x4;clobber flags:CC;}
      REG_DEAD r59:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   47: r74:DI=r59:DI
    Inserting insn reload after:
   48: r60:DI=r74:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 22:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 42: point = 0
   Insn 39: point = 0
   Insn 35: point = 1
   Insn 32: point = 3
   Insn 31: point = 5
   Insn 30: point = 6
  BB 4
   Insn 28: point = 7
   Insn 27: point = 7
   Insn 26: point = 8
  BB 2
   Insn 45: point = 9
   Insn 9: point = 9
   Insn 8: point = 10
   Insn 7: point = 11
   Insn 3: point = 11
   Insn 2: point = 11
  BB 3
   Insn 22: point = 11
   Insn 21: point = 11
   Insn 20: point = 12
   Insn 19: point = 14
   Insn 18: point = 15
   Insn 17: point = 17
   Insn 16: point = 19
   Insn 48: point = 20
	Hard reg 1 is preferable by r74 with profit 1
   Insn 15: point = 22
   Insn 47: point = 22
	Hard reg 1 is preferable by r74 with profit 1
	Hard reg 0 is preferable by r74 with profit 1
   Insn 14: point = 24
   Insn 13: point = 26
 r59: [23..24]
 r60: [18..20]
 r61: [16..17]
 r62: [13..15]
 r63: [4..6]
 r64: [2..3]
 r65: [0..1]
 r66: [9..10]
 r67: [25..26]
 r68: [18..19]
 r69: [11..12]
 r70: [13..14]
 r71: [7..8]
 r72: [4..5]
 r74: [21..22]
Compressing live ranges: from 27 to 24 - 88%
Ranges after the compression:
 r59: [20..21]
 r60: [16..17]
 r61: [14..15]
 r62: [12..13]
 r63: [4..5]
 r64: [2..3]
 r65: [0..1]
 r66: [8..9]
 r67: [22..23]
 r68: [16..17]
 r69: [10..11]
 r70: [12..13]
 r71: [6..7]
 r72: [4..5]
 r74: [18..19]
	 Assigning to 74 (cl=GENERAL_REGS, orig=60, freq=3, tfirst=74, tfreq=3)...
	   Assign 0 to reload r74 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
starting the processing of deferred insns
ending the processing of deferred insns


mean

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={9d,8u} r1={3d,2u,1e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,19u} r7={1d,5u} r8={6d,7u} r9={2d,2u} r17={4d,1u} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 89{40d,47u,2e} in 27{27 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 66
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) mUtility.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mUtility.c:78 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:81 89 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:XF 0 ax [66])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mUtility.c:81 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 45 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sum+0 S16 A128])
        (reg:XF 0 ax [66])) mUtility.c:81 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [66])
        (nil)))
(jump_insn 45 9 46 2 (set (pc)
        (label_ref 23)) mUtility.c:81 650 {jump}
     (nil)
 -> 23)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 46 45 25)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 67 68 69 70
(code_label 25 46 12 3 24 "" [1 uses])
(note 12 25 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 0 ax [67])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:81 89 {*movsi_internal}
     (nil))
(insn 14 13 47 3 (set (reg:DI 0 ax [orig:59 D.5086 ] [59])
        (sign_extend:DI (reg:SI 0 ax [67]))) mUtility.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [67])
        (nil)))
(insn 47 14 15 3 (set (reg:DI 0 ax [orig:60 D.5086 ] [60])
        (reg:DI 0 ax [orig:59 D.5086 ] [59])) mUtility.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5086 ] [59])
        (nil)))
(insn 15 47 48 3 (parallel [
            (set (reg:DI 0 ax [orig:60 D.5086 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:60 D.5086 ] [60])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:81 513 {*ashldi3_1}
     (nil))
(insn 48 15 16 3 (set (reg:DI 1 dx [orig:60 D.5086 ] [60])
        (reg:DI 0 ax [orig:60 D.5086 ] [60])) mUtility.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5086 ] [60])
        (nil)))
(insn 16 48 17 3 (set (reg/f:DI 0 ax [68])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S8 A64])) mUtility.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.5087 ] [61])
                (plus:DI (reg/f:DI 0 ax [68])
                    (reg:DI 1 dx [orig:60 D.5086 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [68])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5086 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 x+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.5086 ] [60]))
                (nil)))))
(insn 18 17 19 3 (set (reg:XF 8 st [orig:62 D.5088 ] [62])
        (mem:XF (reg/f:DI 0 ax [orig:61 D.5087 ] [61]) [0 *_9+0 S16 A128])) mUtility.c:81 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5087 ] [61])
        (nil)))
(insn 19 18 20 3 (set (reg:XF 9 st(1) [70])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sum+0 S16 A128])) mUtility.c:81 131 {*movxf_internal_rex64}
     (nil))
(insn 20 19 21 3 (set (reg:XF 8 st [69])
        (plus:XF (reg:XF 8 st [orig:62 D.5088 ] [62])
            (reg:XF 9 st(1) [70]))) mUtility.c:81 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [70])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5088 ] [62])
            (nil))))
(insn 21 20 22 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sum+0 S16 A128])
        (reg:XF 8 st [69])) mUtility.c:81 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [69])
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:81 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 71
(code_label 23 22 24 4 23 "" [1 uses])
(note 24 23 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 27 4 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:81 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [71])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32]))) mUtility.c:81 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) mUtility.c:81 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 8 [st] 63 64 65 72
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:XF 8 st [orig:63 D.5088 ] [63])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32]))) mUtility.c:82 256 {*floatsixf2_i387}
     (nil))
(insn 31 30 32 5 (set (reg:XF 9 st(1) [72])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 sum+0 S16 A128])) mUtility.c:82 131 {*movxf_internal_rex64}
     (nil))
(insn 32 31 35 5 (set (reg:XF 8 st [orig:64 D.5088 ] [64])
        (div:XF (reg:XF 9 st(1) [72])
            (reg:XF 8 st [orig:63 D.5088 ] [63]))) mUtility.c:82 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [72])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5088 ] [63])
            (nil))))
(insn 35 32 39 5 (set (reg:XF 8 st [orig:65 <retval> ] [65])
        (reg:XF 8 st [orig:64 D.5088 ] [64])) mUtility.c:82 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5088 ] [64])
        (nil)))
(insn 39 35 42 5 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:65 <retval> ] [65])) mUtility.c:83 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 <retval> ] [65])
        (nil)))
(insn 42 39 0 5 (use (reg/i:XF 8 st)) mUtility.c:83 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function angle_betw_0pi (angle_betw_0pi, funcdef_no=11, decl_uid=3935, cgraph_uid=11)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 13:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 28:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 42:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 53:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 57:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 70:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 78:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 103: point = 0
   Insn 100: point = 0
   Insn 96: point = 1
   Insn 93: point = 3
   Insn 92: point = 4
   Insn 91: point = 4
   Insn 90: point = 5
   Insn 89: point = 6
   Insn 88: point = 7
   Insn 87: point = 8
   Insn 86: point = 9
   Insn 85: point = 11
   Insn 84: point = 13
   Insn 83: point = 15
   Insn 82: point = 17
   Insn 81: point = 18
   Insn 80: point = 20
   Insn 79: point = 22
   Insn 78: point = 23
   Insn 77: point = 25
   Insn 76: point = 27
   Insn 75: point = 29
   Insn 74: point = 31
   Insn 73: point = 32
   Insn 72: point = 34
   Insn 71: point = 36
   Insn 70: point = 37
   Insn 69: point = 39
   Insn 68: point = 41
   Insn 67: point = 42
   Insn 66: point = 44
   Insn 65: point = 45
   Insn 64: point = 46
   Insn 63: point = 47
   Insn 62: point = 47
   Insn 61: point = 48
   Insn 60: point = 50
   Insn 59: point = 52
   Insn 58: point = 53
   Insn 57: point = 54
   Insn 56: point = 56
   Insn 55: point = 58
   Insn 54: point = 59
   Insn 53: point = 60
   Insn 52: point = 62
   Insn 51: point = 63
   Insn 50: point = 64
   Insn 49: point = 65
   Insn 48: point = 67
   Insn 47: point = 69
   Insn 46: point = 71
   Insn 45: point = 72
   Insn 44: point = 74
   Insn 43: point = 76
   Insn 42: point = 77
   Insn 41: point = 79
   Insn 40: point = 81
   Insn 39: point = 83
   Insn 38: point = 84
   Insn 37: point = 86
   Insn 36: point = 87
   Insn 35: point = 88
   Insn 34: point = 90
   Insn 33: point = 92
   Insn 32: point = 94
   Insn 31: point = 96
   Insn 30: point = 97
   Insn 29: point = 99
   Insn 28: point = 100
   Insn 27: point = 102
   Insn 26: point = 104
   Insn 25: point = 105
   Insn 24: point = 107
   Insn 23: point = 109
   Insn 22: point = 110
   Insn 21: point = 111
   Insn 20: point = 113
   Insn 19: point = 115
   Insn 18: point = 117
   Insn 17: point = 119
   Insn 16: point = 120
   Insn 15: point = 122
   Insn 14: point = 124
   Insn 13: point = 125
   Insn 12: point = 127
   Insn 11: point = 129
   Insn 10: point = 131
   Insn 9: point = 132
   Insn 8: point = 134
   Insn 7: point = 136
   Insn 3: point = 137
   Insn 2: point = 137
 r59: [133..134]
 r60: [126..132]
 r61: [128..129]
 r62: [126..127]
 r63: [112..125]
 r64: [121..122]
 r65: [114..120]
 r66: [116..117]
 r67: [114..115]
 r68: [112..113]
 r69: [106..107]
 r70: [101..105]
 r71: [101..102]
 r72: [89..100]
 r73: [91..97]
 r74: [93..94]
 r75: [91..92]
 r76: [89..90]
 r77: [78..84]
 r78: [80..81]
 r79: [78..79]
 r80: [66..77]
 r81: [73..74]
 r82: [68..72]
 r83: [68..69]
 r84: [66..67]
 r85: [55..60]
 r86: [55..56]
 r87: [49..54]
 r88: [49..50]
 r89: [47..48]
 r90: [38..42]
 r91: [38..39]
 r92: [24..37]
 r93: [33..34]
 r94: [26..32]
 r95: [28..29]
 r96: [26..27]
 r97: [24..25]
 r98: [10..23]
 r99: [19..20]
 r100: [12..18]
 r101: [14..15]
 r102: [12..13]
 r103: [10..11]
 r104: [2..3]
 r105: [0..1]
 r106: [135..136]
 r107: [130..131]
 r108: [123..124]
 r109: [118..119]
 r110: [110..111]
 r111: [108..109]
 r112: [103..104]
 r113: [98..99]
 r114: [95..96]
 r115: [87..88]
 r116: [85..86]
 r117: [82..83]
 r118: [75..76]
 r119: [70..71]
 r120: [64..65]
 r121: [61..63]
 r122: [61..62]
 r123: [57..59]
 r124: [57..58]
 r125: [51..53]
 r126: [51..52]
 r127: [45..46]
 r128: [43..44]
 r129: [40..41]
 r130: [35..36]
 r131: [30..31]
 r132: [21..22]
 r133: [16..17]
 r134: [8..9]
 r135: [6..7]
 r136: [4..5]
Compressing live ranges: from 137 to 118 - 86%
Ranges after the compression:
 r59: [114..115]
 r60: [108..113]
 r61: [110..111]
 r62: [108..109]
 r63: [96..107]
 r64: [104..105]
 r65: [98..103]
 r66: [100..101]
 r67: [98..99]
 r68: [96..97]
 r69: [90..91]
 r70: [86..89]
 r71: [86..87]
 r72: [76..85]
 r73: [78..83]
 r74: [80..81]
 r75: [78..79]
 r76: [76..77]
 r77: [66..71]
 r78: [68..69]
 r79: [66..67]
 r80: [56..65]
 r81: [62..63]
 r82: [58..61]
 r83: [58..59]
 r84: [56..57]
 r85: [48..51]
 r86: [48..49]
 r87: [44..47]
 r88: [44..45]
 r89: [42..43]
 r90: [34..37]
 r91: [34..35]
 r92: [22..33]
 r93: [30..31]
 r94: [24..29]
 r95: [26..27]
 r96: [24..25]
 r97: [22..23]
 r98: [10..21]
 r99: [18..19]
 r100: [12..17]
 r101: [14..15]
 r102: [12..13]
 r103: [10..11]
 r104: [2..3]
 r105: [0..1]
 r106: [116..117]
 r107: [112..113]
 r108: [106..107]
 r109: [102..103]
 r110: [94..95]
 r111: [92..93]
 r112: [88..89]
 r113: [84..85]
 r114: [82..83]
 r115: [74..75]
 r116: [72..73]
 r117: [70..71]
 r118: [64..65]
 r119: [60..61]
 r120: [54..55]
 r121: [52..53]
 r122: [52..53]
 r123: [50..51]
 r124: [50..51]
 r125: [46..47]
 r126: [46..47]
 r127: [40..41]
 r128: [38..39]
 r129: [36..37]
 r130: [32..33]
 r131: [28..29]
 r132: [20..21]
 r133: [16..17]
 r134: [8..9]
 r135: [6..7]
 r136: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 21
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 35
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 49
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 70
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 78
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 93
changing reg in insn 96
changing reg in insn 96
changing reg in insn 100
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 92.


angle_betw_0pi

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={35d,32u} r1={5d,2u} r2={3d} r4={3d,1u} r5={3d,1u} r6={1d,35u} r7={1d,10u} r8={30d,31u} r9={14d,12u} r10={9d,7u} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={14d} r18={2d} r19={2d} r20={1d,1u,12e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 343{199d,132u,12e} in 92{90 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:87 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.5089 ] [59])
                (plus:DI (reg/f:DI 0 ax [106])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:87 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 9 8 10 2 (set (reg:XF 9 st(1) [orig:60 D.5090 ] [60])
        (mem:XF (reg/f:DI 0 ax [orig:59 D.5089 ] [59]) [0 *_2+0 S16 A128])) mUtility.c:87 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.5089 ] [59])
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:87 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.5089 ] [61])
                (plus:DI (reg/f:DI 0 ax [107])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:87 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 12 11 13 2 (set (reg:XF 8 st [orig:62 D.5090 ] [62])
        (mem:XF (reg/f:DI 0 ax [orig:61 D.5089 ] [61]) [0 *_5+0 S16 A128])) mUtility.c:87 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5089 ] [61])
        (nil)))
(insn 13 12 14 2 (set (reg:XF 9 st(1) [orig:63 D.5090 ] [63])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.5090 ] [60])
            (reg:XF 8 st [orig:62 D.5090 ] [62]))) mUtility.c:87 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5090 ] [62])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5090 ] [60])
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:87 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5089 ] [64])
                (plus:DI (reg/f:DI 0 ax [108])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:87 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 16 15 17 2 (set (reg:XF 10 st(2) [orig:65 D.5090 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.5089 ] [64]) [0 *_8+0 S16 A128])) mUtility.c:87 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5089 ] [64])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:87 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5089 ] [66])
                (plus:DI (reg/f:DI 0 ax [109])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:87 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 19 18 20 2 (set (reg:XF 8 st [orig:67 D.5090 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.5089 ] [66]) [0 *_10+0 S16 A128])) mUtility.c:87 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5089 ] [66])
        (nil)))
(insn 20 19 21 2 (set (reg:XF 8 st [orig:68 D.5090 ] [68])
        (mult:XF (reg:XF 8 st [orig:67 D.5090 ] [67])
            (reg:XF 10 st(2) [orig:65 D.5090 ] [65]))) mUtility.c:87 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5090 ] [67])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:65 D.5090 ] [65])
            (nil))))
(insn 21 20 22 2 (set (reg:XF 8 st [110])
        (minus:XF (reg:XF 9 st(1) [orig:63 D.5090 ] [63])
            (reg:XF 8 st [orig:68 D.5090 ] [68]))) mUtility.c:87 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5090 ] [68])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.5090 ] [63])
            (nil))))
(insn 22 21 23 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 cross_x+0 S16 A128])
        (reg:XF 8 st [110])) mUtility.c:87 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [110])
        (nil)))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.5089 ] [69])
                (plus:DI (reg/f:DI 0 ax [111])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:88 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 25 24 26 2 (set (reg:XF 9 st(1) [orig:70 D.5090 ] [70])
        (mem:XF (reg/f:DI 0 ax [orig:69 D.5089 ] [69]) [0 *_14+0 S16 A128])) mUtility.c:88 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5089 ] [69])
        (nil)))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:XF 8 st [orig:71 D.5090 ] [71])
        (mem:XF (reg/f:DI 0 ax [112]) [0 *b_4(D)+0 S16 A128])) mUtility.c:88 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [112])
        (nil)))
(insn 28 27 29 2 (set (reg:XF 9 st(1) [orig:72 D.5090 ] [72])
        (mult:XF (reg:XF 9 st(1) [orig:70 D.5090 ] [70])
            (reg:XF 8 st [orig:71 D.5090 ] [71]))) mUtility.c:88 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5090 ] [71])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:70 D.5090 ] [70])
            (nil))))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:XF 10 st(2) [orig:73 D.5090 ] [73])
        (mem:XF (reg/f:DI 0 ax [113]) [0 *a_1(D)+0 S16 A128])) mUtility.c:88 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [113])
        (nil)))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.5089 ] [74])
                (plus:DI (reg/f:DI 0 ax [114])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:88 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 33 32 34 2 (set (reg:XF 8 st [orig:75 D.5090 ] [75])
        (mem:XF (reg/f:DI 0 ax [orig:74 D.5089 ] [74]) [0 *_19+0 S16 A128])) mUtility.c:88 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.5089 ] [74])
        (nil)))
(insn 34 33 35 2 (set (reg:XF 8 st [orig:76 D.5090 ] [76])
        (mult:XF (reg:XF 8 st [orig:75 D.5090 ] [75])
            (reg:XF 10 st(2) [orig:73 D.5090 ] [73]))) mUtility.c:88 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5090 ] [75])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:73 D.5090 ] [73])
            (nil))))
(insn 35 34 36 2 (set (reg:XF 8 st [115])
        (minus:XF (reg:XF 9 st(1) [orig:72 D.5090 ] [72])
            (reg:XF 8 st [orig:76 D.5090 ] [76]))) mUtility.c:88 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5090 ] [76])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:72 D.5090 ] [72])
            (nil))))
(insn 36 35 37 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 cross_y+0 S16 A128])
        (reg:XF 8 st [115])) mUtility.c:88 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [115])
        (nil)))
(insn 37 36 38 2 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (reg:XF 9 st(1) [orig:77 D.5090 ] [77])
        (mem:XF (reg/f:DI 0 ax [116]) [0 *a_1(D)+0 S16 A128])) mUtility.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (nil)))
(insn 39 38 40 2 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 2 (parallel [
            (set (reg/f:DI 0 ax [orig:78 D.5089 ] [78])
                (plus:DI (reg/f:DI 0 ax [117])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 41 40 42 2 (set (reg:XF 8 st [orig:79 D.5090 ] [79])
        (mem:XF (reg/f:DI 0 ax [orig:78 D.5089 ] [78]) [0 *_24+0 S16 A128])) mUtility.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.5089 ] [78])
        (nil)))
(insn 42 41 43 2 (set (reg:XF 9 st(1) [orig:80 D.5090 ] [80])
        (mult:XF (reg:XF 9 st(1) [orig:77 D.5090 ] [77])
            (reg:XF 8 st [orig:79 D.5090 ] [79]))) mUtility.c:89 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5090 ] [79])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:77 D.5090 ] [77])
            (nil))))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (parallel [
            (set (reg/f:DI 0 ax [orig:81 D.5089 ] [81])
                (plus:DI (reg/f:DI 0 ax [118])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [118])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 45 44 46 2 (set (reg:XF 10 st(2) [orig:82 D.5090 ] [82])
        (mem:XF (reg/f:DI 0 ax [orig:81 D.5089 ] [81]) [0 *_27+0 S16 A128])) mUtility.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.5089 ] [81])
        (nil)))
(insn 46 45 47 2 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 2 (set (reg:XF 8 st [orig:83 D.5090 ] [83])
        (mem:XF (reg/f:DI 0 ax [119]) [0 *b_4(D)+0 S16 A128])) mUtility.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (nil)))
(insn 48 47 49 2 (set (reg:XF 8 st [orig:84 D.5090 ] [84])
        (mult:XF (reg:XF 8 st [orig:83 D.5090 ] [83])
            (reg:XF 10 st(2) [orig:82 D.5090 ] [82]))) mUtility.c:89 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.5090 ] [83])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:82 D.5090 ] [82])
            (nil))))
(insn 49 48 50 2 (set (reg:XF 8 st [120])
        (minus:XF (reg:XF 9 st(1) [orig:80 D.5090 ] [80])
            (reg:XF 8 st [orig:84 D.5090 ] [84]))) mUtility.c:89 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.5090 ] [84])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:80 D.5090 ] [80])
            (nil))))
(insn 50 49 51 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 cross_z+0 S16 A128])
        (reg:XF 8 st [120])) mUtility.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [120])
        (nil)))
(insn 51 50 52 2 (set (reg:XF 9 st(1) [121])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 cross_x+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:XF 8 st [122])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 cross_x+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg:XF 9 st(1) [orig:85 D.5090 ] [85])
        (mult:XF (reg:XF 9 st(1) [121])
            (reg:XF 8 st [122]))) mUtility.c:91 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [122])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [121])
            (nil))))
(insn 54 53 55 2 (set (reg:XF 10 st(2) [123])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 cross_y+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (reg:XF 8 st [124])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 cross_y+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (reg:XF 8 st [orig:86 D.5090 ] [86])
        (mult:XF (reg:XF 8 st [124])
            (reg:XF 10 st(2) [123]))) mUtility.c:91 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [124])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [123])
            (nil))))
(insn 57 56 58 2 (set (reg:XF 9 st(1) [orig:87 D.5090 ] [87])
        (plus:XF (reg:XF 9 st(1) [orig:85 D.5090 ] [85])
            (reg:XF 8 st [orig:86 D.5090 ] [86]))) mUtility.c:91 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5090 ] [86])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:85 D.5090 ] [85])
            (nil))))
(insn 58 57 59 2 (set (reg:XF 10 st(2) [125])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 cross_z+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (reg:XF 8 st [126])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 cross_z+0 S16 A128])) mUtility.c:91 131 {*movxf_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (reg:XF 8 st [orig:88 D.5090 ] [88])
        (mult:XF (reg:XF 8 st [126])
            (reg:XF 10 st(2) [125]))) mUtility.c:91 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [126])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [125])
            (nil))))
(insn 61 60 62 2 (set (reg:XF 8 st [orig:89 D.5090 ] [89])
        (plus:XF (reg:XF 8 st [orig:88 D.5090 ] [88])
            (reg:XF 9 st(1) [orig:87 D.5090 ] [87]))) mUtility.c:91 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5090 ] [88])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:87 D.5090 ] [87])
            (nil))))
(insn 62 61 63 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:89 D.5090 ] [89])) mUtility.c:91 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5090 ] [89])
        (nil)))
(call_insn 63 62 64 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sqrtl") [flags 0x41]  <function_decl 0x7f4452d75400 sqrtl>) [0 __builtin_sqrtl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:91 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 64 63 65 2 (set (reg:XF 8 st [127])
        (reg:XF 8 st)) mUtility.c:91 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 65 64 66 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fcross+0 S16 A128])
        (reg:XF 8 st [127])) mUtility.c:91 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [127])
        (nil)))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (reg:XF 9 st(1) [orig:90 D.5090 ] [90])
        (mem:XF (reg/f:DI 0 ax [128]) [0 *a_1(D)+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [128])
        (nil)))
(insn 68 67 69 2 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 2 (set (reg:XF 8 st [orig:91 D.5090 ] [91])
        (mem:XF (reg/f:DI 0 ax [129]) [0 *b_4(D)+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [129])
        (nil)))
(insn 70 69 71 2 (set (reg:XF 9 st(1) [orig:92 D.5090 ] [92])
        (mult:XF (reg:XF 9 st(1) [orig:90 D.5090 ] [90])
            (reg:XF 8 st [orig:91 D.5090 ] [91]))) mUtility.c:92 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:91 D.5090 ] [91])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:90 D.5090 ] [90])
            (nil))))
(insn 71 70 72 2 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 2 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.5089 ] [93])
                (plus:DI (reg/f:DI 0 ax [130])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [130])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 73 72 74 2 (set (reg:XF 10 st(2) [orig:94 D.5090 ] [94])
        (mem:XF (reg/f:DI 0 ax [orig:93 D.5089 ] [93]) [0 *_41+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.5089 ] [93])
        (nil)))
(insn 74 73 75 2 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 2 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.5089 ] [95])
                (plus:DI (reg/f:DI 0 ax [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [131])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 76 75 77 2 (set (reg:XF 8 st [orig:96 D.5090 ] [96])
        (mem:XF (reg/f:DI 0 ax [orig:95 D.5089 ] [95]) [0 *_43+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.5089 ] [95])
        (nil)))
(insn 77 76 78 2 (set (reg:XF 8 st [orig:97 D.5090 ] [97])
        (mult:XF (reg:XF 8 st [orig:96 D.5090 ] [96])
            (reg:XF 10 st(2) [orig:94 D.5090 ] [94]))) mUtility.c:92 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:96 D.5090 ] [96])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:94 D.5090 ] [94])
            (nil))))
(insn 78 77 79 2 (set (reg:XF 9 st(1) [orig:98 D.5090 ] [98])
        (plus:XF (reg:XF 9 st(1) [orig:92 D.5090 ] [92])
            (reg:XF 8 st [orig:97 D.5090 ] [97]))) mUtility.c:92 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:97 D.5090 ] [97])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:92 D.5090 ] [92])
            (nil))))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 2 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.5089 ] [99])
                (plus:DI (reg/f:DI 0 ax [132])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [132])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 81 80 82 2 (set (reg:XF 10 st(2) [orig:100 D.5090 ] [100])
        (mem:XF (reg/f:DI 0 ax [orig:99 D.5089 ] [99]) [0 *_47+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.5089 ] [99])
        (nil)))
(insn 82 81 83 2 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:92 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.5089 ] [101])
                (plus:DI (reg/f:DI 0 ax [133])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:92 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 84 83 85 2 (set (reg:XF 8 st [orig:102 D.5090 ] [102])
        (mem:XF (reg/f:DI 0 ax [orig:101 D.5089 ] [101]) [0 *_49+0 S16 A128])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.5089 ] [101])
        (nil)))
(insn 85 84 86 2 (set (reg:XF 8 st [orig:103 D.5090 ] [103])
        (mult:XF (reg:XF 8 st [orig:102 D.5090 ] [102])
            (reg:XF 10 st(2) [orig:100 D.5090 ] [100]))) mUtility.c:92 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:102 D.5090 ] [102])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:100 D.5090 ] [100])
            (nil))))
(insn 86 85 87 2 (set (reg:XF 8 st [134])
        (plus:XF (reg:XF 8 st [orig:103 D.5090 ] [103])
            (reg:XF 9 st(1) [orig:98 D.5090 ] [98]))) mUtility.c:92 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:103 D.5090 ] [103])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:98 D.5090 ] [98])
            (nil))))
(insn 87 86 88 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fdot+0 S16 A128])
        (reg:XF 8 st [134])) mUtility.c:92 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [134])
        (nil)))
(insn 88 87 89 2 (set (reg:XF 0 ax [135])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fdot+0 S16 A128])) mUtility.c:94 131 {*movxf_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [135])) mUtility.c:94 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [135])
        (nil)))
(insn 90 89 91 2 (set (reg:XF 0 ax [136])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fcross+0 S16 A128])) mUtility.c:94 131 {*movxf_internal_rex64}
     (nil))
(insn 91 90 92 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [136])) mUtility.c:94 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [136])
        (nil)))
(call_insn 92 91 93 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("atan2l") [flags 0x41]  <function_decl 0x7f4452d42500 atan2l>) [0 __builtin_atan2l S1 A8])
            (const_int 32 [0x20]))) mUtility.c:94 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 93 92 96 2 (set (reg:XF 8 st [orig:104 D.5090 ] [104])
        (reg:XF 8 st)) mUtility.c:94 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 96 93 100 2 (set (reg:XF 8 st [orig:105 <retval> ] [105])
        (reg:XF 8 st [orig:104 D.5090 ] [104])) mUtility.c:94 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:104 D.5090 ] [104])
        (nil)))
(insn 100 96 103 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:105 <retval> ] [105])) mUtility.c:95 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:105 <retval> ] [105])
        (nil)))
(insn 103 100 0 2 (use (reg/i:XF 8 st)) mUtility.c:95 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function haversine_distance (haversine_distance, funcdef_no=12, decl_uid=1732, cgraph_uid=12)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 45:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=121 from oldreg=67, assigning class FLOAT_REGS to r121
   45: r121:XF=r121:XF*r66:XF
      REG_DEAD r66:XF
      REG_DEAD r65:XF
    Inserting insn reload before:
  128: r121:XF=r65:XF
    Inserting insn reload after:
  129: r67:XF=r121:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 54:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=122 from oldreg=70, assigning class FLOAT_REGS to r122
   54: r122:XF=r122:XF*r69:XF
      REG_DEAD r69:XF
      REG_DEAD r68:XF
    Inserting insn reload before:
  130: r122:XF=r68:XF
    Inserting insn reload after:
  131: r70:XF=r122:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=123 from oldreg=70, assigning class FLOAT_REGS to r123
   59: r72:XF=r71:XF*r123:XF
      REG_DEAD r71:XF
      REG_DEAD r70:XF
    Inserting insn reload before:
  132: r123:XF=r70:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 60:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=124 from oldreg=73, assigning class FLOAT_REGS to r124
   60: r124:XF=r124:XF+r72:XF
      REG_DEAD r72:XF
      REG_DEAD r67:XF
    Inserting insn reload before:
  133: r124:XF=r67:XF
    Inserting insn reload after:
  134: r73:XF=r124:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 69:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=125 from oldreg=76, assigning class FLOAT_REGS to r125
   69: r125:XF=r125:XF*r75:XF
      REG_DEAD r75:XF
      REG_DEAD r74:XF
    Inserting insn reload before:
  135: r125:XF=r74:XF
    Inserting insn reload after:
  136: r76:XF=r125:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 83:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=126 from oldreg=80, assigning class FLOAT_REGS to r126
   83: r126:XF=r126:XF*r79:XF
      REG_DEAD r79:XF
      REG_DEAD r78:XF
    Inserting insn reload before:
  137: r126:XF=r78:XF
    Inserting insn reload after:
  138: r80:XF=r126:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 92:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=127 from oldreg=83, assigning class FLOAT_REGS to r127
   92: r127:XF=r127:XF*r82:XF
      REG_DEAD r82:XF
      REG_DEAD r81:XF
    Inserting insn reload before:
  139: r127:XF=r81:XF
    Inserting insn reload after:
  140: r83:XF=r127:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=128 from oldreg=83, assigning class FLOAT_REGS to r128
   97: r85:XF=r84:XF*r128:XF
      REG_DEAD r84:XF
      REG_DEAD r83:XF
    Inserting insn reload before:
  141: r128:XF=r83:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 98:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
      Creating newreg=129 from oldreg=80, assigning class FLOAT_REGS to r129
   98: r86:XF=r129:XF-r85:XF
      REG_DEAD r85:XF
      REG_DEAD r80:XF
    Inserting insn reload before:
  142: r129:XF=r80:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 104:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=130 from oldreg=88, assigning class FLOAT_REGS to r130
  104: r130:XF=r130:XF+r87:XF
      REG_DEAD r87:XF
      REG_DEAD r77:XF
    Inserting insn reload before:
  143: r130:XF=r77:XF
    Inserting insn reload after:
  144: r88:XF=r130:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=607,losers=1 -- reject
	 Choosing alt 1 in insn 108:  (0) m  (1) f {*movxf_internal_rex64}
      Creating newreg=131 from oldreg=73, assigning class FLOAT_REGS to r131
  108: [sp:DI+0x10]=r131:XF
      REG_DEAD r73:XF
    Inserting insn reload before:
  145: r131:XF=r73:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 113:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=132, assigning class NO_REGS to secondary r132
  118: r132:XF=r91:XF
      REG_DEAD r91:XF
    Inserting the sec. move after:
  146: r92:XF=r132:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=133 from oldreg=83, assigning class FLOAT_REGS to inheritance r133
    Original reg change 83->133 (bb2):
  140: r133:XF=r127:XF
    Add original<-inheritance after:
  147: r83:XF=r133:XF

    Inheritance reuse change 83->133 (bb2):
  141: r128:XF=r133:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=134 from oldreg=81, assigning class FLOAT_REGS to inheritance r134
    Original reg change 81->134 (bb2):
   87: r134:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  148: r81:XF=r134:XF

    Inheritance reuse change 81->134 (bb2):
  139: r127:XF=r134:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=135 from oldreg=80, assigning class FLOAT_REGS to inheritance r135
    Original reg change 80->135 (bb2):
  138: r135:XF=r126:XF
    Add original<-inheritance after:
  149: r80:XF=r135:XF

    Inheritance reuse change 80->135 (bb2):
  142: r129:XF=r135:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=136 from oldreg=78, assigning class FLOAT_REGS to inheritance r136
    Original reg change 78->136 (bb2):
   78: r136:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  150: r78:XF=r136:XF

    Inheritance reuse change 78->136 (bb2):
  137: r126:XF=r136:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=137 from oldreg=77, assigning class FLOAT_REGS to inheritance r137
    Original reg change 77->137 (bb2):
   74: r137:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  151: r77:XF=r137:XF

    Inheritance reuse change 77->137 (bb2):
  143: r130:XF=r137:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=138 from oldreg=74, assigning class FLOAT_REGS to inheritance r138
    Original reg change 74->138 (bb2):
   64: r138:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  152: r74:XF=r138:XF

    Inheritance reuse change 74->138 (bb2):
  135: r125:XF=r138:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=139 from oldreg=73, assigning class FLOAT_REGS to inheritance r139
    Original reg change 73->139 (bb2):
  134: r139:XF=r124:XF
    Add original<-inheritance after:
  153: r73:XF=r139:XF

    Inheritance reuse change 73->139 (bb2):
  145: r131:XF=r139:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=140 from oldreg=70, assigning class FLOAT_REGS to inheritance r140
    Original reg change 70->140 (bb2):
  131: r140:XF=r122:XF
    Add original<-inheritance after:
  154: r70:XF=r140:XF

    Inheritance reuse change 70->140 (bb2):
  132: r123:XF=r140:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=141 from oldreg=68, assigning class FLOAT_REGS to inheritance r141
    Original reg change 68->141 (bb2):
   49: r141:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  155: r68:XF=r141:XF

    Inheritance reuse change 68->141 (bb2):
  130: r122:XF=r141:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=142 from oldreg=67, assigning class FLOAT_REGS to inheritance r142
    Original reg change 67->142 (bb2):
  129: r142:XF=r121:XF
    Add original<-inheritance after:
  156: r67:XF=r142:XF

    Inheritance reuse change 67->142 (bb2):
  133: r124:XF=r142:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=143 from oldreg=65, assigning class FLOAT_REGS to inheritance r143
    Original reg change 65->143 (bb2):
   40: r143:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  157: r65:XF=r143:XF

    Inheritance reuse change 65->143 (bb2):
  128: r121:XF=r143:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   147: r83:XF=r133:XF
deleting insn with uid = 147.
	    Removing dead insn:
   148: r81:XF=r134:XF
deleting insn with uid = 148.
	    Removing dead insn:
   149: r80:XF=r135:XF
deleting insn with uid = 149.
	    Removing dead insn:
   150: r78:XF=r136:XF
deleting insn with uid = 150.
	    Removing dead insn:
   151: r77:XF=r137:XF
deleting insn with uid = 151.
	    Removing dead insn:
   152: r74:XF=r138:XF
deleting insn with uid = 152.
	    Removing dead insn:
   153: r73:XF=r139:XF
deleting insn with uid = 153.
	    Removing dead insn:
   154: r70:XF=r140:XF
deleting insn with uid = 154.
	    Removing dead insn:
   155: r68:XF=r141:XF
deleting insn with uid = 155.
	    Removing dead insn:
   156: r67:XF=r142:XF
deleting insn with uid = 156.
	    Removing dead insn:
   157: r65:XF=r143:XF
deleting insn with uid = 157.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 125: point = 0
   Insn 122: point = 0
   Insn 146: point = 1
	Hard reg 8 is preferable by r132 with profit 1
   Insn 118: point = 3
	Hard reg 8 is preferable by r132 with profit 1
	Hard reg 0 is preferable by r132 with profit 1
   Insn 115: point = 5
   Insn 114: point = 6
   Insn 113: point = 7
   Insn 112: point = 9
   Insn 111: point = 10
   Insn 110: point = 11
   Insn 109: point = 11
   Insn 108: point = 12
   Insn 145: point = 13
	   Creating copy r131<-r139@1
   Insn 107: point = 15
   Insn 106: point = 16
   Insn 105: point = 16
   Insn 144: point = 17
	Hard reg 8 is preferable by r130 with profit 1
   Insn 104: point = 19
   Insn 143: point = 20
	   Creating copy r130<-r137@1
   Insn 103: point = 22
   Insn 102: point = 23
   Insn 101: point = 23
   Insn 100: point = 24
   Insn 99: point = 25
   Insn 98: point = 26
   Insn 142: point = 28
	   Creating copy r129<-r135@1
   Insn 97: point = 30
   Insn 141: point = 32
	   Creating copy r128<-r133@1
   Insn 96: point = 34
   Insn 95: point = 35
   Insn 94: point = 35
   Insn 93: point = 36
   Insn 140: point = 37
	   Creating copy r127->r133@1
   Insn 92: point = 39
   Insn 139: point = 40
	   Creating copy r127<-r134@1
   Insn 91: point = 42
   Insn 90: point = 43
   Insn 89: point = 43
   Insn 88: point = 44
   Insn 87: point = 45
	Hard reg 8 is preferable by r134 with profit 1
   Insn 86: point = 46
   Insn 85: point = 46
   Insn 84: point = 47
   Insn 138: point = 48
	   Creating copy r126->r135@1
   Insn 83: point = 50
   Insn 137: point = 51
	   Creating copy r126<-r136@1
   Insn 82: point = 53
   Insn 81: point = 54
   Insn 80: point = 54
   Insn 79: point = 55
   Insn 78: point = 56
	Hard reg 8 is preferable by r136 with profit 1
   Insn 77: point = 57
   Insn 76: point = 57
   Insn 75: point = 58
   Insn 74: point = 59
	Hard reg 8 is preferable by r137 with profit 1
   Insn 73: point = 60
   Insn 72: point = 60
   Insn 71: point = 61
   Insn 70: point = 62
   Insn 136: point = 63
	Hard reg 8 is preferable by r125 with profit 1
   Insn 69: point = 65
   Insn 135: point = 66
	   Creating copy r125<-r138@1
   Insn 68: point = 68
   Insn 67: point = 69
   Insn 66: point = 69
   Insn 65: point = 70
   Insn 64: point = 71
	Hard reg 8 is preferable by r138 with profit 1
   Insn 63: point = 72
   Insn 62: point = 72
   Insn 61: point = 73
   Insn 134: point = 74
	   Creating copy r124->r139@1
   Insn 60: point = 76
   Insn 133: point = 77
	   Creating copy r124<-r142@1
   Insn 59: point = 79
   Insn 132: point = 81
	   Creating copy r123<-r140@1
   Insn 58: point = 83
   Insn 57: point = 84
   Insn 56: point = 84
   Insn 55: point = 85
   Insn 131: point = 86
	   Creating copy r122->r140@1
   Insn 54: point = 88
   Insn 130: point = 89
	   Creating copy r122<-r141@1
   Insn 53: point = 91
   Insn 52: point = 92
   Insn 51: point = 92
   Insn 50: point = 93
   Insn 49: point = 94
	Hard reg 8 is preferable by r141 with profit 1
   Insn 48: point = 95
   Insn 47: point = 95
   Insn 46: point = 96
   Insn 129: point = 97
	   Creating copy r121->r142@1
   Insn 45: point = 99
   Insn 128: point = 100
	   Creating copy r121<-r143@1
   Insn 44: point = 102
   Insn 43: point = 103
   Insn 42: point = 103
   Insn 41: point = 104
   Insn 40: point = 105
	Hard reg 8 is preferable by r143 with profit 1
   Insn 39: point = 106
   Insn 38: point = 106
   Insn 37: point = 107
   Insn 36: point = 108
   Insn 35: point = 109
   Insn 34: point = 111
   Insn 33: point = 112
   Insn 32: point = 113
   Insn 31: point = 114
   Insn 30: point = 115
   Insn 29: point = 115
   Insn 28: point = 116
   Insn 27: point = 118
   Insn 26: point = 120
   Insn 25: point = 121
   Insn 24: point = 122
   Insn 23: point = 123
   Insn 22: point = 123
   Insn 21: point = 124
   Insn 20: point = 126
   Insn 19: point = 128
   Insn 18: point = 129
   Insn 17: point = 130
   Insn 16: point = 131
   Insn 15: point = 131
   Insn 14: point = 132
   Insn 13: point = 134
   Insn 12: point = 135
   Insn 11: point = 136
   Insn 10: point = 137
   Insn 9: point = 137
   Insn 8: point = 138
   Insn 7: point = 140
   Insn 3: point = 141
   Insn 2: point = 141
 r59: [137..138]
 r60: [131..132]
 r61: [125..126]
 r62: [123..124]
 r63: [117..118]
 r64: [115..116]
 r66: [99..102]
 r69: [88..91]
 r71: [80..83]
 r72: [76..79]
 r75: [65..68]
 r76: [60..63]
 r79: [50..53]
 r82: [39..42]
 r84: [31..34]
 r85: [27..30]
 r86: [23..26]
 r87: [19..22]
 r88: [16..17]
 r89: [11..15]
 r90: [8..10]
 r91: [4..5]
 r92: [0..1]
 r93: [139..140]
 r94: [135..136]
 r95: [133..134]
 r96: [129..130]
 r97: [127..128]
 r98: [121..122]
 r99: [119..120]
 r100: [113..114]
 r101: [108..109]
 r102: [110..112]
 r103: [110..111]
 r104: [106..107]
 r105: [103..104]
 r106: [95..96]
 r107: [92..93]
 r108: [84..85]
 r109: [72..73]
 r110: [69..70]
 r111: [61..62]
 r112: [57..58]
 r113: [54..55]
 r114: [46..47]
 r115: [43..44]
 r116: [35..36]
 r117: [24..25]
 r118: [6..7]
 r119: [8..9]
 r121: [98..100]
 r122: [87..89]
 r123: [80..81]
 r124: [75..77]
 r125: [64..66]
 r126: [49..51]
 r127: [38..40]
 r128: [31..32]
 r129: [27..28]
 r130: [18..20]
 r131: [12..13]
 r132: [2..3]
 r133: [33..37]
 r134: [41..45]
 r135: [29..48]
 r136: [52..56]
 r137: [21..59]
 r138: [67..71]
 r139: [14..74]
 r140: [82..86]
 r141: [90..94]
 r142: [78..97]
 r143: [101..105]
Compressing live ranges: from 141 to 116 - 82%
Ranges after the compression:
 r59: [112..113]
 r60: [106..107]
 r61: [100..101]
 r62: [98..99]
 r63: [92..93]
 r64: [90..91]
 r66: [76..79]
 r69: [68..71]
 r71: [62..65]
 r72: [58..61]
 r75: [50..53]
 r76: [48..49]
 r79: [40..43]
 r82: [32..35]
 r84: [26..29]
 r85: [22..25]
 r86: [20..21]
 r87: [16..19]
 r88: [14..15]
 r89: [10..13]
 r90: [8..9]
 r91: [4..5]
 r92: [0..1]
 r93: [114..115]
 r94: [110..111]
 r95: [108..109]
 r96: [104..105]
 r97: [102..103]
 r98: [96..97]
 r99: [94..95]
 r100: [88..89]
 r101: [84..85]
 r102: [86..87]
 r103: [86..87]
 r104: [82..83]
 r105: [80..81]
 r106: [74..75]
 r107: [72..73]
 r108: [66..67]
 r109: [56..57]
 r110: [54..55]
 r111: [48..49]
 r112: [46..47]
 r113: [44..45]
 r114: [38..39]
 r115: [36..37]
 r116: [30..31]
 r117: [20..21]
 r118: [6..7]
 r119: [8..9]
 r121: [76..77]
 r122: [68..69]
 r123: [62..63]
 r124: [58..59]
 r125: [50..51]
 r126: [40..41]
 r127: [32..33]
 r128: [26..27]
 r129: [22..23]
 r130: [16..17]
 r131: [10..11]
 r132: [2..3]
 r133: [28..31]
 r134: [34..37]
 r135: [24..39]
 r136: [42..45]
 r137: [18..47]
 r138: [52..55]
 r139: [12..57]
 r140: [64..67]
 r141: [70..73]
 r142: [60..75]
 r143: [78..81]
	 Assigning to 121 (cl=FLOAT_REGS, orig=67, freq=3, tfirst=121, tfreq=4)...
	   Assign 10 to reload r121 (freq=3)
	Hard reg 8 is preferable by r143 with profit 1
	Hard reg 10 is preferable by r143 with profit 1
	Hard reg 10 is preferable by r142 with profit 1
	Hard reg 10 is preferable by r124 with profit 1
	Hard reg 10 is preferable by r139 with profit 1
	Hard reg 10 is preferable by r131 with profit 1
	 Assigning to 124 (cl=FLOAT_REGS, orig=73, freq=3, tfirst=121, tfreq=4)...
	   Assign 10 to reload r124 (freq=3)
	Hard reg 10 is preferable by r142 with profit 2
	Hard reg 10 is preferable by r139 with profit 2
	Hard reg 10 is preferable by r131 with profit 2
	 Assigning to 131 (cl=FLOAT_REGS, orig=73, freq=2, tfirst=121, tfreq=4)...
	   Assign 10 to reload r131 (freq=2)
	Hard reg 10 is preferable by r139 with profit 3
	 Assigning to 139 (cl=FLOAT_REGS, orig=73, freq=2, tfirst=121, tfreq=4)...
	 Assigning to 142 (cl=FLOAT_REGS, orig=67, freq=2, tfirst=121, tfreq=4)...
	 Assigning to 143 (cl=FLOAT_REGS, orig=65, freq=2, tfirst=121, tfreq=4)...
	 Assigning to 122 (cl=FLOAT_REGS, orig=70, freq=3, tfirst=122, tfreq=3)...
	   Assign 11 to reload r122 (freq=3)
	Hard reg 8 is preferable by r141 with profit 1
	Hard reg 11 is preferable by r141 with profit 1
	Hard reg 11 is preferable by r140 with profit 1
	Hard reg 11 is preferable by r123 with profit 1
	 Assigning to 123 (cl=FLOAT_REGS, orig=70, freq=2, tfirst=122, tfreq=3)...
	   Assign 11 to reload r123 (freq=2)
	Hard reg 11 is preferable by r140 with profit 2
	 Assigning to 140 (cl=FLOAT_REGS, orig=70, freq=2, tfirst=122, tfreq=3)...
	 Assigning to 141 (cl=FLOAT_REGS, orig=68, freq=2, tfirst=122, tfreq=3)...
	 Assigning to 125 (cl=FLOAT_REGS, orig=76, freq=3, tfirst=125, tfreq=3)...
	   Assign 12 to reload r125 (freq=3)
	Hard reg 8 is preferable by r138 with profit 1
	Hard reg 12 is preferable by r138 with profit 1
	 Assigning to 138 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=125, tfreq=3)...
	 Assigning to 126 (cl=FLOAT_REGS, orig=80, freq=3, tfirst=126, tfreq=3)...
	   Assign 13 to reload r126 (freq=3)
	Hard reg 8 is preferable by r136 with profit 1
	Hard reg 13 is preferable by r136 with profit 1
	Hard reg 13 is preferable by r135 with profit 1
	Hard reg 13 is preferable by r129 with profit 1
	 Assigning to 129 (cl=FLOAT_REGS, orig=80, freq=2, tfirst=126, tfreq=3)...
	   Assign 13 to reload r129 (freq=2)
	Hard reg 13 is preferable by r135 with profit 2
	 Assigning to 135 (cl=FLOAT_REGS, orig=80, freq=2, tfirst=126, tfreq=3)...
	 Assigning to 136 (cl=FLOAT_REGS, orig=78, freq=2, tfirst=126, tfreq=3)...
	 Assigning to 127 (cl=FLOAT_REGS, orig=83, freq=3, tfirst=127, tfreq=3)...
	   Assign 14 to reload r127 (freq=3)
	Hard reg 8 is preferable by r134 with profit 1
	Hard reg 14 is preferable by r134 with profit 1
	Hard reg 14 is preferable by r133 with profit 1
	Hard reg 14 is preferable by r128 with profit 1
	 Assigning to 128 (cl=FLOAT_REGS, orig=83, freq=2, tfirst=127, tfreq=3)...
	   Assign 14 to reload r128 (freq=2)
	Hard reg 14 is preferable by r133 with profit 2
	 Assigning to 133 (cl=FLOAT_REGS, orig=83, freq=2, tfirst=127, tfreq=3)...
	 Assigning to 134 (cl=FLOAT_REGS, orig=81, freq=2, tfirst=127, tfreq=3)...
	 Assigning to 130 (cl=FLOAT_REGS, orig=88, freq=3, tfirst=130, tfreq=3)...
	   Assign 15 to reload r130 (freq=3)
	Hard reg 8 is preferable by r137 with profit 1
	Hard reg 15 is preferable by r137 with profit 1
	 Assigning to 137 (cl=FLOAT_REGS, orig=77, freq=2, tfirst=130, tfreq=3)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 11 (0.00%)
   Insn after restoring regs:
  145: r131:XF=r73:XF
      REG_DEAD r73:XF
   Insn after restoring regs:
  143: r130:XF=r77:XF
      REG_DEAD r77:XF
   Insn after restoring regs:
  142: r129:XF=r80:XF
      REG_DEAD r80:XF
   Insn after restoring regs:
  141: r128:XF=r83:XF
      REG_DEAD r83:XF
   Insn after restoring regs:
  140: r83:XF=r127:XF
      REG_DEAD r127:XF
   Insn after restoring regs:
  139: r127:XF=r81:XF
      REG_DEAD r81:XF
   Insn after restoring regs:
   87: r81:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  138: r80:XF=r126:XF
      REG_DEAD r126:XF
   Insn after restoring regs:
  137: r126:XF=r78:XF
      REG_DEAD r78:XF
   Insn after restoring regs:
   78: r78:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
   74: r77:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  135: r125:XF=r74:XF
      REG_DEAD r74:XF
   Insn after restoring regs:
   64: r74:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  134: r73:XF=r124:XF
      REG_DEAD r124:XF
   Insn after restoring regs:
  133: r124:XF=r67:XF
      REG_DEAD r67:XF
   Insn after restoring regs:
  132: r123:XF=r70:XF
      REG_DEAD r70:XF
   Insn after restoring regs:
  131: r70:XF=r122:XF
      REG_DEAD r122:XF
   Insn after restoring regs:
  130: r122:XF=r68:XF
      REG_DEAD r68:XF
   Insn after restoring regs:
   49: r68:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  129: r67:XF=r121:XF
      REG_DEAD r121:XF
   Insn after restoring regs:
  128: r121:XF=r65:XF
      REG_DEAD r65:XF
   Insn after restoring regs:
   40: r65:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 125: point = 0
   Insn 122: point = 0
   Insn 146: point = 1
   Insn 118: point = 3
   Insn 115: point = 5
   Insn 114: point = 6
   Insn 113: point = 7
   Insn 112: point = 9
   Insn 111: point = 10
   Insn 110: point = 11
   Insn 109: point = 11
   Insn 108: point = 12
   Insn 145: point = 13
   Insn 107: point = 15
   Insn 106: point = 16
   Insn 105: point = 16
   Insn 144: point = 17
   Insn 104: point = 19
   Insn 143: point = 20
   Insn 103: point = 22
   Insn 102: point = 23
   Insn 101: point = 23
   Insn 100: point = 24
   Insn 99: point = 25
   Insn 98: point = 26
   Insn 142: point = 28
   Insn 97: point = 30
   Insn 141: point = 32
   Insn 96: point = 34
   Insn 95: point = 35
   Insn 94: point = 35
   Insn 93: point = 36
   Insn 140: point = 37
   Insn 92: point = 39
   Insn 139: point = 40
   Insn 91: point = 42
   Insn 90: point = 43
   Insn 89: point = 43
   Insn 88: point = 44
   Insn 87: point = 45
   Insn 86: point = 46
   Insn 85: point = 46
   Insn 84: point = 47
   Insn 138: point = 48
   Insn 83: point = 50
   Insn 137: point = 51
   Insn 82: point = 53
   Insn 81: point = 54
   Insn 80: point = 54
   Insn 79: point = 55
   Insn 78: point = 56
   Insn 77: point = 57
   Insn 76: point = 57
   Insn 75: point = 58
   Insn 74: point = 59
   Insn 73: point = 60
   Insn 72: point = 60
   Insn 71: point = 61
   Insn 70: point = 62
   Insn 136: point = 63
   Insn 69: point = 65
   Insn 135: point = 66
   Insn 68: point = 68
   Insn 67: point = 69
   Insn 66: point = 69
   Insn 65: point = 70
   Insn 64: point = 71
   Insn 63: point = 72
   Insn 62: point = 72
   Insn 61: point = 73
   Insn 134: point = 74
   Insn 60: point = 76
   Insn 133: point = 77
   Insn 59: point = 79
   Insn 132: point = 81
   Insn 58: point = 83
   Insn 57: point = 84
   Insn 56: point = 84
   Insn 55: point = 85
   Insn 131: point = 86
   Insn 54: point = 88
   Insn 130: point = 89
   Insn 53: point = 91
   Insn 52: point = 92
   Insn 51: point = 92
   Insn 50: point = 93
   Insn 49: point = 94
   Insn 48: point = 95
   Insn 47: point = 95
   Insn 46: point = 96
   Insn 129: point = 97
   Insn 45: point = 99
   Insn 128: point = 100
   Insn 44: point = 102
   Insn 43: point = 103
   Insn 42: point = 103
   Insn 41: point = 104
   Insn 40: point = 105
   Insn 39: point = 106
   Insn 38: point = 106
   Insn 37: point = 107
   Insn 36: point = 108
   Insn 35: point = 109
   Insn 34: point = 111
   Insn 33: point = 112
   Insn 32: point = 113
   Insn 31: point = 114
   Insn 30: point = 115
   Insn 29: point = 115
   Insn 28: point = 116
   Insn 27: point = 118
   Insn 26: point = 120
   Insn 25: point = 121
   Insn 24: point = 122
   Insn 23: point = 123
   Insn 22: point = 123
   Insn 21: point = 124
   Insn 20: point = 126
   Insn 19: point = 128
   Insn 18: point = 129
   Insn 17: point = 130
   Insn 16: point = 131
   Insn 15: point = 131
   Insn 14: point = 132
   Insn 13: point = 134
   Insn 12: point = 135
   Insn 11: point = 136
   Insn 10: point = 137
   Insn 9: point = 137
   Insn 8: point = 138
   Insn 7: point = 140
   Insn 3: point = 141
   Insn 2: point = 141
 r65: [101..105]
 r67: [78..97]
 r68: [90..94]
 r70: [82..86]
 r73: [14..74]
 r74: [67..71]
 r77: [21..59]
 r78: [52..56]
 r80: [29..48]
 r81: [41..45]
 r83: [33..37]
 r132: [2..3]
Compressing live ranges: from 141 to 16 - 11%
Ranges after the compression:
 r65: [14..15]
 r67: [10..13]
 r68: [12..13]
 r70: [10..11]
 r73: [2..9]
 r74: [8..9]
 r77: [2..7]
 r78: [6..7]
 r80: [2..5]
 r81: [4..5]
 r83: [2..3]
 r132: [0..1]
  Slot 0 regnos (width = 16):	 65	 132	 73	 67
  Slot 1 regnos (width = 16):	 68	 77	 74	 70
  Slot 2 regnos (width = 16):	 78	 80
  Slot 3 regnos (width = 16):	 81	 83
Changing spilled pseudos to memory in insn #40
Changing spilled pseudos to memory in insn #128
Changing spilled pseudos to memory in insn #129
Changing spilled pseudos to memory in insn #49
Changing spilled pseudos to memory in insn #130
Changing spilled pseudos to memory in insn #131
Changing spilled pseudos to memory in insn #132
Changing spilled pseudos to memory in insn #133
Changing spilled pseudos to memory in insn #134
Changing spilled pseudos to memory in insn #64
Changing spilled pseudos to memory in insn #135
Changing spilled pseudos to memory in insn #74
Changing spilled pseudos to memory in insn #78
Changing spilled pseudos to memory in insn #137
Changing spilled pseudos to memory in insn #138
Changing spilled pseudos to memory in insn #87
Changing spilled pseudos to memory in insn #139
Changing spilled pseudos to memory in insn #140
Changing spilled pseudos to memory in insn #141
Changing spilled pseudos to memory in insn #142
Changing spilled pseudos to memory in insn #143
Changing spilled pseudos to memory in insn #145
Changing spilled pseudos to memory in insn #118
Changing spilled pseudos to memory in insn #146

********** Local #3: **********

Reusing alternative 0 for insn #146
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 118:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
Reusing alternative 0 for insn #145
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #143
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #142
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #141
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #140
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #139
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #87
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 1 for insn #138
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #137
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #78
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 1 for insn #74
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #135
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #64
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 1 for insn #134
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #133
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #132
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #131
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #130
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #49
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 1 for insn #129
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #128
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #40
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=224, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=208, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 44
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 82
changing reg in insn 83
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 109
changing reg in insn 111
changing reg in insn 113
changing reg in insn 115
changing reg in insn 118
changing reg in insn 122
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 100
changing reg in insn 113
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 110.


haversine_distance

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 13[st(5)] 14[st(6)] 15[st(7)] 17[flags]
;;  ref usage 	r0={46d,25u} r1={40d,19u} r2={21d} r4={21d,1u} r5={21d,1u} r6={1d,53u} r7={1d,68u} r8={44d,45u} r9={22d,2u} r10={25d,5u} r11={23d,3u} r12={22d,2u} r13={23d,3u} r14={23d,3u} r15={22d,2u} r17={22d} r18={20d} r19={20d} r20={1d,1u,2e} r21={21d} r22={21d} r23={21d} r24={21d} r25={21d} r26={21d} r27={21d} r28={21d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={21d} r38={21d} r39={20d} r40={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} 
;;    total ref usage 1223{988d,233u,2e} in 133{113 regular + 20 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p1+0 S8 A64])
        (reg:DI 5 di [ p1 ])) mUtility.c:98 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p1 ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 p2+0 S8 A64])
        (reg:DI 4 si [ p2 ])) mUtility.c:98 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ p2 ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p1+0 S8 A64])) mUtility.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:XF 0 ax [orig:59 D.5091 ] [59])
        (mem:XF (reg/f:DI 0 ax [93]) [0 *p1_1(D)+0 S16 A128])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (nil)))
(insn 9 8 10 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:59 D.5091 ] [59])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.5091 ] [59])
        (nil)))
(call_insn 10 9 11 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:99 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 11 10 12 2 (set (reg:XF 8 st [94])
        (reg:XF 8 st)) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 12 11 13 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 phi1+0 S16 A128])
        (reg:XF 8 st [94])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [94])
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 p2+0 S8 A64])) mUtility.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:XF 0 ax [orig:60 D.5091 ] [60])
        (mem:XF (reg/f:DI 0 ax [95]) [0 *p2_4(D)+0 S16 A128])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (nil)))
(insn 15 14 16 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:60 D.5091 ] [60])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:60 D.5091 ] [60])
        (nil)))
(call_insn 16 15 17 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:99 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 17 16 18 2 (set (reg:XF 8 st [96])
        (reg:XF 8 st)) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 18 17 19 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])
        (reg:XF 8 st [96])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [96])
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p1+0 S8 A64])) mUtility.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.5092 ] [61])
                (plus:DI (reg/f:DI 0 ax [97])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -104 [0xffffffffffffff98])) [0 p1+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 21 20 22 2 (set (reg:XF 0 ax [orig:62 D.5091 ] [62])
        (mem:XF (reg/f:DI 0 ax [orig:61 D.5092 ] [61]) [0 *_7+0 S16 A128])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5092 ] [61])
        (nil)))
(insn 22 21 23 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:62 D.5091 ] [62])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:62 D.5091 ] [62])
        (nil)))
(call_insn 23 22 24 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:99 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 24 23 25 2 (set (reg:XF 8 st [98])
        (reg:XF 8 st)) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 25 24 26 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 lam1+0 S16 A128])
        (reg:XF 8 st [98])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [98])
        (nil)))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 p2+0 S8 A64])) mUtility.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5092 ] [63])
                (plus:DI (reg/f:DI 0 ax [99])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -112 [0xffffffffffffff90])) [0 p2+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 28 27 29 2 (set (reg:XF 0 ax [orig:64 D.5091 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.5092 ] [63]) [0 *_10+0 S16 A128])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5092 ] [63])
        (nil)))
(insn 29 28 30 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:64 D.5091 ] [64])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:64 D.5091 ] [64])
        (nil)))
(call_insn 30 29 31 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("rad") [flags 0x3]  <function_decl 0x7f4452e3c500 rad>) [0 rad S1 A8])
            (const_int 16 [0x10]))) mUtility.c:99 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 31 30 32 2 (set (reg:XF 8 st [100])
        (reg:XF 8 st)) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 32 31 33 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 lam2+0 S16 A128])
        (reg:XF 8 st [100])) mUtility.c:99 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [100])
        (nil)))
(insn 33 32 34 2 (set (reg:XF 9 st(1) [102])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 lam1+0 S16 A128])) mUtility.c:103 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:XF 8 st [103])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 lam2+0 S16 A128])) mUtility.c:103 131 {*movxf_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:XF 8 st [101])
        (minus:XF (reg:XF 9 st(1) [102])
            (reg:XF 8 st [103]))) mUtility.c:103 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [103])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [102])
            (nil))))
(insn 36 35 37 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 d_lam+0 S16 A128])
        (reg:XF 8 st [101])) mUtility.c:103 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [101])
        (nil)))
(insn 37 36 38 2 (set (reg:XF 0 ax [104])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 phi1+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [104])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [104])
        (nil)))
(call_insn/u 39 38 40 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 40 39 157 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 157 40 41 2 NOTE_INSN_DELETED)
(insn 41 157 42 2 (set (reg:XF 0 ax [105])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [105])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [105])
        (nil)))
(call_insn/u 43 42 44 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 44 43 128 2 (set (reg:XF 8 st [orig:66 D.5091 ] [66])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 128 44 45 2 (set (reg:XF 10 st(2) [orig:67 D.5091 ] [67])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 65 [ D.5091 ])
        (nil)))
(insn 45 128 129 2 (set (reg:XF 10 st(2) [orig:67 D.5091 ] [67])
        (mult:XF (reg:XF 10 st(2) [orig:67 D.5091 ] [67])
            (reg:XF 8 st [orig:66 D.5091 ] [66]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5091 ] [66])
        (nil)))
(insn 129 45 156 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 10 st(2) [orig:67 D.5091 ] [67])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:67 D.5091 ] [67])
        (nil)))
(note 156 129 46 2 NOTE_INSN_DELETED)
(insn 46 156 47 2 (set (reg:XF 0 ax [106])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 phi1+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 47 46 48 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [106])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [106])
        (nil)))
(call_insn/u 48 47 49 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 49 48 155 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 155 49 50 2 NOTE_INSN_DELETED)
(insn 50 155 51 2 (set (reg:XF 0 ax [107])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [107])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [107])
        (nil)))
(call_insn/u 52 51 53 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 53 52 130 2 (set (reg:XF 8 st [orig:69 D.5091 ] [69])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 130 53 54 2 (set (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.5091 ])
        (nil)))
(insn 54 130 131 2 (set (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
        (mult:XF (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
            (reg:XF 8 st [orig:69 D.5091 ] [69]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5091 ] [69])
        (nil)))
(insn 131 54 154 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])
        (reg:XF 11 st(3) [orig:70 D.5091 ] [70])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
        (nil)))
(note 154 131 55 2 NOTE_INSN_DELETED)
(insn 55 154 56 2 (set (reg:XF 0 ax [108])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 d_lam+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [108])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [108])
        (nil)))
(call_insn/u 57 56 58 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 58 57 132 2 (set (reg:XF 8 st [orig:71 D.5091 ] [71])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 132 58 59 2 (set (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 70 [ D.5091 ])
        (nil)))
(insn 59 132 133 2 (set (reg:XF 8 st [orig:72 D.5091 ] [72])
        (mult:XF (reg:XF 8 st [orig:71 D.5091 ] [71])
            (reg:XF 11 st(3) [orig:70 D.5091 ] [70]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:70 D.5091 ] [70])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5091 ] [71])
            (nil))))
(insn 133 59 60 2 (set (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 67 [ D.5091 ])
        (nil)))
(insn 60 133 134 2 (set (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
        (plus:XF (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
            (reg:XF 8 st [orig:72 D.5091 ] [72]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5091 ] [72])
        (nil)))
(insn 134 60 153 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 10 st(2) [orig:73 D.5091 ] [73])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
        (nil)))
(note 153 134 61 2 NOTE_INSN_DELETED)
(insn 61 153 62 2 (set (reg:XF 0 ax [109])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 62 61 63 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [109])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [109])
        (nil)))
(call_insn/u 63 62 64 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 64 63 152 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 152 64 65 2 NOTE_INSN_DELETED)
(insn 65 152 66 2 (set (reg:XF 0 ax [110])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 d_lam+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 66 65 67 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [110])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [110])
        (nil)))
(call_insn/u 67 66 68 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 68 67 135 2 (set (reg:XF 8 st [orig:75 D.5091 ] [75])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 135 68 69 2 (set (reg:XF 12 st(4) [orig:76 D.5091 ] [76])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 74 [ D.5091 ])
        (nil)))
(insn 69 135 136 2 (set (reg:XF 12 st(4) [orig:76 D.5091 ] [76])
        (mult:XF (reg:XF 12 st(4) [orig:76 D.5091 ] [76])
            (reg:XF 8 st [orig:75 D.5091 ] [75]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5091 ] [75])
        (nil)))
(insn 136 69 70 2 (set (reg:XF 8 st [orig:76 D.5091 ] [76])
        (reg:XF 12 st(4) [orig:76 D.5091 ] [76])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:76 D.5091 ] [76])
        (nil)))
(insn 70 136 71 2 (set (reg:XF 0 ax [111])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 71 70 72 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [111])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [111])
        (nil)))
(insn 72 71 73 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:76 D.5091 ] [76])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5091 ] [76])
        (nil)))
(call_insn 73 72 74 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 74 73 151 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 151 74 75 2 NOTE_INSN_DELETED)
(insn 75 151 76 2 (set (reg:XF 0 ax [112])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 phi1+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 76 75 77 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [112])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [112])
        (nil)))
(call_insn/u 77 76 78 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 78 77 150 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 %sfp+-160 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 150 78 79 2 NOTE_INSN_DELETED)
(insn 79 150 80 2 (set (reg:XF 0 ax [113])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 80 79 81 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [113])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [113])
        (nil)))
(call_insn/u 81 80 82 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 82 81 137 2 (set (reg:XF 8 st [orig:79 D.5091 ] [79])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 137 82 83 2 (set (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 %sfp+-160 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 78 [ D.5091 ])
        (nil)))
(insn 83 137 138 2 (set (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
        (mult:XF (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
            (reg:XF 8 st [orig:79 D.5091 ] [79]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5091 ] [79])
        (nil)))
(insn 138 83 149 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 %sfp+-160 S16 A128])
        (reg:XF 13 st(5) [orig:80 D.5091 ] [80])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
        (nil)))
(note 149 138 84 2 NOTE_INSN_DELETED)
(insn 84 149 85 2 (set (reg:XF 0 ax [114])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 phi1+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 85 84 86 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [114])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [114])
        (nil)))
(call_insn/u 86 85 87 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 87 86 148 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 148 87 88 2 NOTE_INSN_DELETED)
(insn 88 148 89 2 (set (reg:XF 0 ax [115])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phi2+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [115])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [115])
        (nil)))
(call_insn/u 90 89 91 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 91 90 139 2 (set (reg:XF 8 st [orig:82 D.5091 ] [82])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 139 91 92 2 (set (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 81 [ D.5091 ])
        (nil)))
(insn 92 139 140 2 (set (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
        (mult:XF (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
            (reg:XF 8 st [orig:82 D.5091 ] [82]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.5091 ] [82])
        (nil)))
(insn 140 92 147 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])
        (reg:XF 14 st(6) [orig:83 D.5091 ] [83])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
        (nil)))
(note 147 140 93 2 NOTE_INSN_DELETED)
(insn 93 147 94 2 (set (reg:XF 0 ax [116])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 d_lam+0 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 94 93 95 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [116])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [116])
        (nil)))
(call_insn/u 95 94 96 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 96 95 141 2 (set (reg:XF 8 st [orig:84 D.5091 ] [84])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 141 96 97 2 (set (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-176 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 83 [ D.5091 ])
        (nil)))
(insn 97 141 142 2 (set (reg:XF 8 st [orig:85 D.5091 ] [85])
        (mult:XF (reg:XF 8 st [orig:84 D.5091 ] [84])
            (reg:XF 14 st(6) [orig:83 D.5091 ] [83]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 14 st(6) [orig:83 D.5091 ] [83])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.5091 ] [84])
            (nil))))
(insn 142 97 98 2 (set (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 %sfp+-160 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 80 [ D.5091 ])
        (nil)))
(insn 98 142 99 2 (set (reg:XF 8 st [orig:86 D.5091 ] [86])
        (minus:XF (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
            (reg:XF 8 st [orig:85 D.5091 ] [85]))) mUtility.c:104 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:80 D.5091 ] [80])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.5091 ] [85])
            (nil))))
(insn 99 98 100 2 (set (reg:XF 0 ax [117])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (nil))
(insn 100 99 101 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [117])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [117])
        (nil)))
(insn 101 100 102 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:86 D.5091 ] [86])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5091 ] [86])
        (nil)))
(call_insn 102 101 103 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 103 102 143 2 (set (reg:XF 8 st [orig:87 D.5091 ] [87])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 143 103 104 2 (set (reg:XF 15 st(7) [orig:88 D.5091 ] [88])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 %sfp+-144 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 77 [ D.5091 ])
        (nil)))
(insn 104 143 144 2 (set (reg:XF 15 st(7) [orig:88 D.5091 ] [88])
        (plus:XF (reg:XF 15 st(7) [orig:88 D.5091 ] [88])
            (reg:XF 8 st [orig:87 D.5091 ] [87]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:87 D.5091 ] [87])
        (nil)))
(insn 144 104 105 2 (set (reg:XF 8 st [orig:88 D.5091 ] [88])
        (reg:XF 15 st(7) [orig:88 D.5091 ] [88])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 15 st(7) [orig:88 D.5091 ] [88])
        (nil)))
(insn 105 144 106 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:88 D.5091 ] [88])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5091 ] [88])
        (nil)))
(call_insn 106 105 107 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sqrtl") [flags 0x41]  <function_decl 0x7f4452d75400 sqrtl>) [0 __builtin_sqrtl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 107 106 145 2 (set (reg:XF 8 st [orig:89 D.5091 ] [89])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 145 107 108 2 (set (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 73 [ D.5091 ])
        (nil)))
(insn 108 145 109 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 10 st(2) [orig:73 D.5091 ] [73])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:73 D.5091 ] [73])
        (nil)))
(insn 109 108 110 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:89 D.5091 ] [89])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5091 ] [89])
        (nil)))
(call_insn 110 109 111 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("atan2l") [flags 0x41]  <function_decl 0x7f4452d42500 atan2l>) [0 __builtin_atan2l S1 A8])
            (const_int 32 [0x20]))) mUtility.c:104 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 111 110 112 2 (set (reg:XF 8 st [orig:90 D.5091 ] [90])
        (reg:XF 8 st)) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 112 111 113 2 (set (reg:XF 9 st(1) [119])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 113 112 114 2 (set (reg:XF 8 st [118])
        (mult:XF (reg:XF 8 st [orig:90 D.5091 ] [90])
            (reg:XF 9 st(1) [119]))) mUtility.c:104 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [119])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5091 ] [90])
            (nil))))
(insn 114 113 115 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 8 st [118])) mUtility.c:104 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [118])
        (nil)))
(insn 115 114 118 2 (set (reg:XF 0 ax [orig:91 D.5091 ] [91])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mUtility.c:105 131 {*movxf_internal_rex64}
     (nil))
(insn 118 115 146 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 0 ax [orig:91 D.5091 ] [91])) mUtility.c:105 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:91 D.5091 ] [91])
        (nil)))
(insn 146 118 122 2 (set (reg:XF 8 st [orig:92 <retval> ] [92])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:105 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 132)
        (nil)))
(insn 122 146 125 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:92 <retval> ] [92])) mUtility.c:112 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 <retval> ] [92])
        (nil)))
(insn 125 122 0 2 (use (reg/i:XF 8 st)) mUtility.c:112 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _norm (_norm, funcdef_no=13, decl_uid=3953, cgraph_uid=13)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 10:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 18:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 39: point = 0
   Insn 36: point = 0
   Insn 32: point = 1
   Insn 29: point = 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 5
   Insn 25: point = 7
   Insn 24: point = 9
   Insn 23: point = 11
   Insn 22: point = 13
   Insn 21: point = 14
   Insn 20: point = 16
   Insn 19: point = 18
   Insn 18: point = 19
   Insn 17: point = 21
   Insn 16: point = 23
   Insn 15: point = 25
   Insn 14: point = 27
   Insn 13: point = 28
   Insn 12: point = 30
   Insn 11: point = 32
   Insn 10: point = 33
   Insn 9: point = 35
   Insn 8: point = 37
   Insn 7: point = 38
   Insn 6: point = 40
   Insn 2: point = 41
 r59: [34..38]
 r60: [34..35]
 r61: [20..33]
 r62: [29..30]
 r63: [22..28]
 r64: [24..25]
 r65: [22..23]
 r66: [20..21]
 r67: [6..19]
 r68: [15..16]
 r69: [8..14]
 r70: [10..11]
 r71: [8..9]
 r72: [6..7]
 r73: [4..5]
 r74: [2..3]
 r75: [0..1]
 r76: [39..40]
 r77: [36..37]
 r78: [31..32]
 r79: [26..27]
 r80: [17..18]
 r81: [12..13]
Compressing live ranges: from 41 to 36 - 87%
Ranges after the compression:
 r59: [30..33]
 r60: [30..31]
 r61: [18..29]
 r62: [26..27]
 r63: [20..25]
 r64: [22..23]
 r65: [20..21]
 r66: [18..19]
 r67: [6..17]
 r68: [14..15]
 r69: [8..13]
 r70: [10..11]
 r71: [8..9]
 r72: [6..7]
 r73: [4..5]
 r74: [2..3]
 r75: [0..1]
 r76: [34..35]
 r77: [32..33]
 r78: [28..29]
 r79: [24..25]
 r80: [16..17]
 r81: [12..13]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 18
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 32
changing reg in insn 32
changing reg in insn 36
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.


_norm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={12d,10u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r6={1d,9u} r7={1d,5u} r8={10d,11u} r9={4d,3u} r10={3d,2u} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d} r18={1d} r19={1d} r20={1d,1u,4e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 136{90d,42u,4e} in 28{27 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:XF 9 st(1) [orig:59 D.5093 ] [59])
        (mem:XF (reg/f:DI 0 ax [76]) [0 *a_1(D)+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 8 st [orig:60 D.5093 ] [60])
        (mem:XF (reg/f:DI 0 ax [77]) [0 *a_1(D)+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (nil)))
(insn 10 9 11 2 (set (reg:XF 9 st(1) [orig:61 D.5093 ] [61])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.5093 ] [59])
            (reg:XF 8 st [orig:60 D.5093 ] [60]))) mUtility.c:115 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5093 ] [60])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5093 ] [59])
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5094 ] [62])
                (plus:DI (reg/f:DI 0 ax [78])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:115 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 13 12 14 2 (set (reg:XF 10 st(2) [orig:63 D.5093 ] [63])
        (mem:XF (reg/f:DI 0 ax [orig:62 D.5094 ] [62]) [0 *_5+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5094 ] [62])
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5094 ] [64])
                (plus:DI (reg/f:DI 0 ax [79])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:115 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 16 15 17 2 (set (reg:XF 8 st [orig:65 D.5093 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.5094 ] [64]) [0 *_7+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5094 ] [64])
        (nil)))
(insn 17 16 18 2 (set (reg:XF 8 st [orig:66 D.5093 ] [66])
        (mult:XF (reg:XF 8 st [orig:65 D.5093 ] [65])
            (reg:XF 10 st(2) [orig:63 D.5093 ] [63]))) mUtility.c:115 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.5093 ] [65])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.5093 ] [63])
            (nil))))
(insn 18 17 19 2 (set (reg:XF 9 st(1) [orig:67 D.5093 ] [67])
        (plus:XF (reg:XF 9 st(1) [orig:61 D.5093 ] [61])
            (reg:XF 8 st [orig:66 D.5093 ] [66]))) mUtility.c:115 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5093 ] [66])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.5093 ] [61])
            (nil))))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.5094 ] [68])
                (plus:DI (reg/f:DI 0 ax [80])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:115 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 21 20 22 2 (set (reg:XF 10 st(2) [orig:69 D.5093 ] [69])
        (mem:XF (reg/f:DI 0 ax [orig:68 D.5094 ] [68]) [0 *_11+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.5094 ] [68])
        (nil)))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.5094 ] [70])
                (plus:DI (reg/f:DI 0 ax [81])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:115 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 24 23 25 2 (set (reg:XF 8 st [orig:71 D.5093 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.5094 ] [70]) [0 *_13+0 S16 A128])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5094 ] [70])
        (nil)))
(insn 25 24 26 2 (set (reg:XF 8 st [orig:72 D.5093 ] [72])
        (mult:XF (reg:XF 8 st [orig:71 D.5093 ] [71])
            (reg:XF 10 st(2) [orig:69 D.5093 ] [69]))) mUtility.c:115 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5093 ] [71])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:69 D.5093 ] [69])
            (nil))))
(insn 26 25 27 2 (set (reg:XF 8 st [orig:73 D.5093 ] [73])
        (plus:XF (reg:XF 8 st [orig:72 D.5093 ] [72])
            (reg:XF 9 st(1) [orig:67 D.5093 ] [67]))) mUtility.c:115 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5093 ] [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.5093 ] [67])
            (nil))))
(insn 27 26 28 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:73 D.5093 ] [73])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5093 ] [73])
        (nil)))
(call_insn 28 27 29 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sqrtl") [flags 0x41]  <function_decl 0x7f4452d75400 sqrtl>) [0 __builtin_sqrtl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:115 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 29 28 32 2 (set (reg:XF 8 st [orig:74 D.5093 ] [74])
        (reg:XF 8 st)) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 32 29 36 2 (set (reg:XF 8 st [orig:75 <retval> ] [75])
        (reg:XF 8 st [orig:74 D.5093 ] [74])) mUtility.c:115 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.5093 ] [74])
        (nil)))
(insn 36 32 39 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:75 <retval> ] [75])) mUtility.c:116 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 <retval> ] [75])
        (nil)))
(insn 39 36 0 2 (use (reg/i:XF 8 st)) mUtility.c:116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _cross_prod (_cross_prod, funcdef_no=14, decl_uid=3958, cgraph_uid=14)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 32:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 42:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 48:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 94: point = 0
   Insn 91: point = 0
   Insn 87: point = 1
   Insn 84: point = 3
   Insn 83: point = 4
   Insn 82: point = 5
   Insn 81: point = 7
   Insn 80: point = 8
   Insn 79: point = 10
   Insn 78: point = 12
   Insn 77: point = 13
   Insn 76: point = 15
   Insn 75: point = 16
   Insn 74: point = 17
   Insn 73: point = 19
   Insn 72: point = 20
   Insn 71: point = 22
   Insn 70: point = 24
   Insn 69: point = 25
   Insn 68: point = 27
   Insn 67: point = 28
   Insn 66: point = 29
   Insn 65: point = 30
   Insn 64: point = 32
   Insn 63: point = 33
   Insn 62: point = 35
   Insn 61: point = 36
   Insn 60: point = 37
   Insn 59: point = 38
   Insn 58: point = 38
   Insn 57: point = 39
   Insn 56: point = 40
   Insn 55: point = 41
   Insn 54: point = 43
   Insn 53: point = 45
   Insn 52: point = 47
   Insn 51: point = 48
   Insn 50: point = 50
   Insn 49: point = 52
   Insn 48: point = 53
   Insn 47: point = 55
   Insn 46: point = 57
   Insn 45: point = 59
   Insn 44: point = 60
   Insn 43: point = 62
   Insn 42: point = 63
   Insn 41: point = 65
   Insn 40: point = 66
   Insn 39: point = 67
   Insn 38: point = 69
   Insn 37: point = 71
   Insn 36: point = 73
   Insn 35: point = 75
   Insn 34: point = 76
   Insn 33: point = 78
   Insn 32: point = 79
   Insn 31: point = 81
   Insn 30: point = 83
   Insn 29: point = 84
   Insn 28: point = 86
   Insn 27: point = 88
   Insn 26: point = 89
   Insn 25: point = 91
   Insn 24: point = 92
   Insn 23: point = 93
   Insn 22: point = 94
   Insn 21: point = 96
   Insn 20: point = 98
   Insn 19: point = 100
   Insn 18: point = 102
   Insn 17: point = 103
   Insn 16: point = 105
   Insn 15: point = 107
   Insn 14: point = 108
   Insn 13: point = 110
   Insn 12: point = 112
   Insn 11: point = 114
   Insn 10: point = 115
   Insn 9: point = 117
   Insn 8: point = 119
   Insn 4: point = 120
   Insn 3: point = 120
   Insn 2: point = 120
 r59: [116..117]
 r60: [109..115]
 r61: [111..112]
 r62: [109..110]
 r63: [95..108]
 r64: [104..105]
 r65: [97..103]
 r66: [99..100]
 r67: [97..98]
 r68: [95..96]
 r69: [92..94]
 r70: [66..89]
 r71: [85..86]
 r72: [80..84]
 r73: [80..81]
 r74: [68..79]
 r75: [70..76]
 r76: [72..73]
 r77: [70..71]
 r78: [68..69]
 r79: [66..67]
 r80: [40..63]
 r81: [54..60]
 r82: [56..57]
 r83: [54..55]
 r84: [42..53]
 r85: [49..50]
 r86: [44..48]
 r87: [44..45]
 r88: [42..43]
 r89: [40..41]
 r90: [31..33]
 r91: [28..30]
 r92: [16..25]
 r93: [21..22]
 r94: [18..20]
 r95: [16..17]
 r96: [4..13]
 r97: [9..10]
 r98: [6..8]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [118..119]
 r103: [113..114]
 r104: [106..107]
 r105: [101..102]
 r106: [92..93]
 r107: [90..91]
 r108: [87..88]
 r109: [82..83]
 r110: [77..78]
 r111: [74..75]
 r112: [64..65]
 r113: [61..62]
 r114: [58..59]
 r115: [51..52]
 r116: [46..47]
 r117: [38..39]
 r118: [36..37]
 r119: [34..35]
 r120: [31..32]
 r121: [28..29]
 r122: [26..27]
 r123: [23..24]
 r124: [18..19]
 r125: [14..15]
 r126: [11..12]
 r127: [6..7]
Compressing live ranges: from 120 to 102 - 85%
Ranges after the compression:
 r59: [98..99]
 r60: [92..97]
 r61: [94..95]
 r62: [92..93]
 r63: [80..91]
 r64: [88..89]
 r65: [82..87]
 r66: [84..85]
 r67: [82..83]
 r68: [80..81]
 r69: [78..79]
 r70: [56..75]
 r71: [72..73]
 r72: [68..71]
 r73: [68..69]
 r74: [58..67]
 r75: [60..65]
 r76: [62..63]
 r77: [60..61]
 r78: [58..59]
 r79: [56..57]
 r80: [34..53]
 r81: [46..51]
 r82: [48..49]
 r83: [46..47]
 r84: [36..45]
 r85: [42..43]
 r86: [38..41]
 r87: [38..39]
 r88: [36..37]
 r89: [34..35]
 r90: [26..27]
 r91: [24..25]
 r92: [14..21]
 r93: [18..19]
 r94: [16..17]
 r95: [14..15]
 r96: [4..11]
 r97: [8..9]
 r98: [6..7]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [100..101]
 r103: [96..97]
 r104: [90..91]
 r105: [86..87]
 r106: [78..79]
 r107: [76..77]
 r108: [74..75]
 r109: [70..71]
 r110: [66..67]
 r111: [64..65]
 r112: [54..55]
 r113: [52..53]
 r114: [50..51]
 r115: [44..45]
 r116: [40..41]
 r117: [32..33]
 r118: [30..31]
 r119: [28..29]
 r120: [26..27]
 r121: [24..25]
 r122: [22..23]
 r123: [20..21]
 r124: [16..17]
 r125: [12..13]
 r126: [10..11]
 r127: [6..7]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 22
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 40
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 39
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 56
changing reg in insn 44
changing reg in insn 48
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 55
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 75
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 83
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 87
changing reg in insn 91
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 59.


_cross_prod

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={35d,34u} r1={8d,7u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,31u} r7={1d,3u} r8={20d,20u} r9={10d,9u} r10={4d,3u} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={15d} r18={1d} r19={1d} r20={1d,1u,14e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 272{147d,111u,14e} in 83{82 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
        (reg:DI 5 di [ B ])) mUtility.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ B ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])
        (reg:DI 4 si [ C ])) mUtility.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ C ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
        (reg:DI 1 dx [ A ])) mUtility.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ A ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.5095 ] [59])
                (plus:DI (reg/f:DI 0 ax [102])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 10 9 11 2 (set (reg:XF 9 st(1) [orig:60 D.5096 ] [60])
        (mem:XF (reg/f:DI 0 ax [orig:59 D.5095 ] [59]) [0 *_2+0 S16 A128])) mUtility.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.5095 ] [59])
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.5095 ] [61])
                (plus:DI (reg/f:DI 0 ax [103])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 13 12 14 2 (set (reg:XF 8 st [orig:62 D.5096 ] [62])
        (mem:XF (reg/f:DI 0 ax [orig:61 D.5095 ] [61]) [0 *_5+0 S16 A128])) mUtility.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5095 ] [61])
        (nil)))
(insn 14 13 15 2 (set (reg:XF 9 st(1) [orig:63 D.5096 ] [63])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.5096 ] [60])
            (reg:XF 8 st [orig:62 D.5096 ] [62]))) mUtility.c:120 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5096 ] [62])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5096 ] [60])
            (nil))))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5095 ] [64])
                (plus:DI (reg/f:DI 0 ax [104])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 17 16 18 2 (set (reg:XF 10 st(2) [orig:65 D.5096 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.5095 ] [64]) [0 *_8+0 S16 A128])) mUtility.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5095 ] [64])
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5095 ] [66])
                (plus:DI (reg/f:DI 0 ax [105])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 20 19 21 2 (set (reg:XF 8 st [orig:67 D.5096 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.5095 ] [66]) [0 *_10+0 S16 A128])) mUtility.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5095 ] [66])
        (nil)))
(insn 21 20 22 2 (set (reg:XF 8 st [orig:68 D.5096 ] [68])
        (mult:XF (reg:XF 8 st [orig:67 D.5096 ] [67])
            (reg:XF 10 st(2) [orig:65 D.5096 ] [65]))) mUtility.c:120 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5096 ] [67])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:65 D.5096 ] [65])
            (nil))))
(insn 22 21 23 2 (set (reg:XF 8 st [orig:69 D.5096 ] [69])
        (minus:XF (reg:XF 9 st(1) [orig:63 D.5096 ] [63])
            (reg:XF 8 st [orig:68 D.5096 ] [68]))) mUtility.c:120 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5096 ] [68])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.5096 ] [63])
            (nil))))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (mem:XF (reg/f:DI 0 ax [106]) [0 *A_14(D)+0 S16 A128])
        (reg:XF 8 st [orig:69 D.5096 ] [69])) mUtility.c:120 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5096 ] [69])
            (nil))))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:121 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 1 dx [orig:70 D.5095 ] [70])
                (plus:DI (reg/f:DI 0 ax [107])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:121 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:121 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5095 ] [71])
                (plus:DI (reg/f:DI 0 ax [108])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:121 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 29 28 30 2 (set (reg:XF 9 st(1) [orig:72 D.5096 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.5095 ] [71]) [0 *_16+0 S16 A128])) mUtility.c:121 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5095 ] [71])
        (nil)))
(insn 30 29 31 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:121 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:XF 8 st [orig:73 D.5096 ] [73])
        (mem:XF (reg/f:DI 0 ax [109]) [0 *C_4(D)+0 S16 A128])) mUtility.c:121 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 32 31 33 2 (set (reg:XF 9 st(1) [orig:74 D.5096 ] [74])
        (mult:XF (reg:XF 9 st(1) [orig:72 D.5096 ] [72])
            (reg:XF 8 st [orig:73 D.5096 ] [73]))) mUtility.c:121 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5096 ] [73])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:72 D.5096 ] [72])
            (nil))))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:121 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:XF 10 st(2) [orig:75 D.5096 ] [75])
        (mem:XF (reg/f:DI 0 ax [110]) [0 *B_1(D)+0 S16 A128])) mUtility.c:121 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (nil)))
(insn 35 34 36 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:121 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 2 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.5095 ] [76])
                (plus:DI (reg/f:DI 0 ax [111])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:121 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 37 36 38 2 (set (reg:XF 8 st [orig:77 D.5096 ] [77])
        (mem:XF (reg/f:DI 0 ax [orig:76 D.5095 ] [76]) [0 *_21+0 S16 A128])) mUtility.c:121 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.5095 ] [76])
        (nil)))
(insn 38 37 39 2 (set (reg:XF 8 st [orig:78 D.5096 ] [78])
        (mult:XF (reg:XF 8 st [orig:77 D.5096 ] [77])
            (reg:XF 10 st(2) [orig:75 D.5096 ] [75]))) mUtility.c:121 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5096 ] [77])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:75 D.5096 ] [75])
            (nil))))
(insn 39 38 40 2 (set (reg:XF 8 st [orig:79 D.5096 ] [79])
        (minus:XF (reg:XF 9 st(1) [orig:74 D.5096 ] [74])
            (reg:XF 8 st [orig:78 D.5096 ] [78]))) mUtility.c:121 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.5096 ] [78])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.5096 ] [74])
            (nil))))
(insn 40 39 41 2 (set (mem:XF (reg/f:DI 1 dx [orig:70 D.5095 ] [70]) [0 *_15+0 S16 A128])
        (reg:XF 8 st [orig:79 D.5096 ] [79])) mUtility.c:121 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5096 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:70 D.5095 ] [70])
            (nil))))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 1 dx [orig:80 D.5095 ] [80])
                (plus:DI (reg/f:DI 0 ax [112])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:122 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [112])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:XF 9 st(1) [orig:81 D.5096 ] [81])
        (mem:XF (reg/f:DI 0 ax [113]) [0 *B_1(D)+0 S16 A128])) mUtility.c:122 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [113])
        (nil)))
(insn 45 44 46 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.5095 ] [82])
                (plus:DI (reg/f:DI 0 ax [114])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:122 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 47 46 48 2 (set (reg:XF 8 st [orig:83 D.5096 ] [83])
        (mem:XF (reg/f:DI 0 ax [orig:82 D.5095 ] [82]) [0 *_27+0 S16 A128])) mUtility.c:122 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.5095 ] [82])
        (nil)))
(insn 48 47 49 2 (set (reg:XF 9 st(1) [orig:84 D.5096 ] [84])
        (mult:XF (reg:XF 9 st(1) [orig:81 D.5096 ] [81])
            (reg:XF 8 st [orig:83 D.5096 ] [83]))) mUtility.c:122 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.5096 ] [83])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 D.5096 ] [81])
            (nil))))
(insn 49 48 50 2 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) mUtility.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.5095 ] [85])
                (plus:DI (reg/f:DI 0 ax [115])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:122 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 51 50 52 2 (set (reg:XF 10 st(2) [orig:86 D.5096 ] [86])
        (mem:XF (reg/f:DI 0 ax [orig:85 D.5095 ] [85]) [0 *_30+0 S16 A128])) mUtility.c:122 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:85 D.5095 ] [85])
        (nil)))
(insn 52 51 53 2 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 C+0 S8 A64])) mUtility.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg:XF 8 st [orig:87 D.5096 ] [87])
        (mem:XF (reg/f:DI 0 ax [116]) [0 *C_4(D)+0 S16 A128])) mUtility.c:122 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (nil)))
(insn 54 53 55 2 (set (reg:XF 8 st [orig:88 D.5096 ] [88])
        (mult:XF (reg:XF 8 st [orig:87 D.5096 ] [87])
            (reg:XF 10 st(2) [orig:86 D.5096 ] [86]))) mUtility.c:122 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:87 D.5096 ] [87])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:86 D.5096 ] [86])
            (nil))))
(insn 55 54 56 2 (set (reg:XF 8 st [orig:89 D.5096 ] [89])
        (minus:XF (reg:XF 9 st(1) [orig:84 D.5096 ] [84])
            (reg:XF 8 st [orig:88 D.5096 ] [88]))) mUtility.c:122 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5096 ] [88])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:84 D.5096 ] [84])
            (nil))))
(insn 56 55 57 2 (set (mem:XF (reg/f:DI 1 dx [orig:80 D.5095 ] [80]) [0 *_25+0 S16 A128])
        (reg:XF 8 st [orig:89 D.5096 ] [89])) mUtility.c:122 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5096 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:80 D.5095 ] [80])
            (nil))))
(insn 57 56 58 2 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:124 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) mUtility.c:124 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [117])
        (nil)))
(call_insn 59 58 60 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_norm") [flags 0x3]  <function_decl 0x7f4452bcd000 _norm>) [0 _norm S1 A8])
            (const_int 0 [0]))) mUtility.c:124 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 60 59 61 2 (set (reg:XF 8 st [118])
        (reg:XF 8 st)) mUtility.c:124 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 61 60 62 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 N+0 S16 A128])
        (reg:XF 8 st [118])) mUtility.c:124 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [118])
        (nil)))
(insn 62 61 63 2 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 2 (set (reg:XF 9 st(1) [orig:90 D.5096 ] [90])
        (mem:XF (reg/f:DI 0 ax [119]) [0 *A_14(D)+0 S16 A128])) mUtility.c:125 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (nil)))
(insn 64 63 65 2 (set (reg:XF 8 st [120])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 N+0 S16 A128])) mUtility.c:125 131 {*movxf_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (reg:XF 8 st [orig:91 D.5096 ] [91])
        (div:XF (reg:XF 9 st(1) [orig:90 D.5096 ] [90])
            (reg:XF 8 st [120]))) mUtility.c:125 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [120])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:90 D.5096 ] [90])
            (nil))))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (mem:XF (reg/f:DI 0 ax [121]) [0 *A_14(D)+0 S16 A128])
        (reg:XF 8 st [orig:91 D.5096 ] [91])) mUtility.c:125 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [121])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:91 D.5096 ] [91])
            (nil))))
(insn 68 67 69 2 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 2 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.5095 ] [92])
                (plus:DI (reg/f:DI 0 ax [122])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [122])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 70 69 71 2 (set (reg/f:DI 1 dx [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 2 (parallel [
            (set (reg/f:DI 1 dx [orig:93 D.5095 ] [93])
                (plus:DI (reg/f:DI 1 dx [123])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [123])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 72 71 73 2 (set (reg:XF 9 st(1) [orig:94 D.5096 ] [94])
        (mem:XF (reg/f:DI 1 dx [orig:93 D.5095 ] [93]) [0 *_39+0 S16 A128])) mUtility.c:126 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:93 D.5095 ] [93])
        (nil)))
(insn 73 72 74 2 (set (reg:XF 8 st [124])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 N+0 S16 A128])) mUtility.c:126 131 {*movxf_internal_rex64}
     (nil))
(insn 74 73 75 2 (set (reg:XF 8 st [orig:95 D.5096 ] [95])
        (div:XF (reg:XF 9 st(1) [orig:94 D.5096 ] [94])
            (reg:XF 8 st [124]))) mUtility.c:126 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [124])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:94 D.5096 ] [94])
            (nil))))
(insn 75 74 76 2 (set (mem:XF (reg/f:DI 0 ax [orig:92 D.5095 ] [92]) [0 *_38+0 S16 A128])
        (reg:XF 8 st [orig:95 D.5096 ] [95])) mUtility.c:126 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:95 D.5096 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.5095 ] [92])
            (nil))))
(insn 76 75 77 2 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:127 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.5095 ] [96])
                (plus:DI (reg/f:DI 0 ax [125])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:127 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [125])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 78 77 79 2 (set (reg/f:DI 1 dx [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])) mUtility.c:127 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 1 dx [orig:97 D.5095 ] [97])
                (plus:DI (reg/f:DI 1 dx [126])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:127 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [126])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [0 A+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 80 79 81 2 (set (reg:XF 9 st(1) [orig:98 D.5096 ] [98])
        (mem:XF (reg/f:DI 1 dx [orig:97 D.5095 ] [97]) [0 *_43+0 S16 A128])) mUtility.c:127 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:97 D.5095 ] [97])
        (nil)))
(insn 81 80 82 2 (set (reg:XF 8 st [127])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 N+0 S16 A128])) mUtility.c:127 131 {*movxf_internal_rex64}
     (nil))
(insn 82 81 83 2 (set (reg:XF 8 st [orig:99 D.5096 ] [99])
        (div:XF (reg:XF 9 st(1) [orig:98 D.5096 ] [98])
            (reg:XF 8 st [127]))) mUtility.c:127 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [127])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:98 D.5096 ] [98])
            (nil))))
(insn 83 82 84 2 (set (mem:XF (reg/f:DI 0 ax [orig:96 D.5095 ] [96]) [0 *_42+0 S16 A128])
        (reg:XF 8 st [orig:99 D.5096 ] [99])) mUtility.c:127 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:99 D.5096 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.5095 ] [96])
            (nil))))
(insn 84 83 87 2 (set (reg:SI 0 ax [orig:100 D.5097 ] [100])
        (const_int 1 [0x1])) mUtility.c:129 89 {*movsi_internal}
     (nil))
(insn 87 84 91 2 (set (reg:SI 0 ax [orig:101 <retval> ] [101])
        (reg:SI 0 ax [orig:100 D.5097 ] [100])) mUtility.c:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:100 D.5097 ] [100])
        (nil)))
(insn 91 87 94 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:101 <retval> ] [101])) mUtility.c:130 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:101 <retval> ] [101])
        (nil)))
(insn 94 91 0 2 (use (reg/i:SI 0 ax)) mUtility.c:130 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _dot (_dot, funcdef_no=15, decl_uid=3963, cgraph_uid=15)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 11:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 37: point = 0
   Insn 34: point = 0
   Insn 30: point = 1
   Insn 27: point = 3
   Insn 26: point = 5
   Insn 25: point = 7
   Insn 24: point = 9
   Insn 23: point = 11
   Insn 22: point = 12
   Insn 21: point = 14
   Insn 20: point = 16
   Insn 19: point = 17
   Insn 18: point = 19
   Insn 17: point = 21
   Insn 16: point = 23
   Insn 15: point = 25
   Insn 14: point = 26
   Insn 13: point = 28
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 33
   Insn 9: point = 35
   Insn 8: point = 36
   Insn 7: point = 38
   Insn 3: point = 39
   Insn 2: point = 39
 r59: [32..36]
 r60: [32..33]
 r61: [18..31]
 r62: [27..28]
 r63: [20..26]
 r64: [22..23]
 r65: [20..21]
 r66: [18..19]
 r67: [4..17]
 r68: [13..14]
 r69: [6..12]
 r70: [8..9]
 r71: [6..7]
 r72: [4..5]
 r73: [2..3]
 r74: [0..1]
 r75: [37..38]
 r76: [34..35]
 r77: [29..30]
 r78: [24..25]
 r79: [15..16]
 r80: [10..11]
Compressing live ranges: from 39 to 34 - 87%
Ranges after the compression:
 r59: [28..31]
 r60: [28..29]
 r61: [16..27]
 r62: [24..25]
 r63: [18..23]
 r64: [20..21]
 r65: [18..19]
 r66: [16..17]
 r67: [4..15]
 r68: [12..13]
 r69: [6..11]
 r70: [8..9]
 r71: [6..7]
 r72: [4..5]
 r73: [2..3]
 r74: [0..1]
 r75: [32..33]
 r76: [30..31]
 r77: [26..27]
 r78: [22..23]
 r79: [14..15]
 r80: [10..11]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 19
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 30
changing reg in insn 34
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
starting the processing of deferred insns
ending the processing of deferred insns


_dot

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={11d,10u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,10u} r7={1d,2u} r8={8d,9u} r9={3d,3u} r10={2d,2u} r17={4d} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 88{45d,39u,4e} in 26{26 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 8 [st] 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:XF 9 st(1) [orig:59 D.5098 ] [59])
        (mem:XF (reg/f:DI 0 ax [75]) [0 *a_1(D)+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [75])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 8 st [orig:60 D.5098 ] [60])
        (mem:XF (reg/f:DI 0 ax [76]) [0 *b_3(D)+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 11 10 12 2 (set (reg:XF 9 st(1) [orig:61 D.5098 ] [61])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.5098 ] [59])
            (reg:XF 8 st [orig:60 D.5098 ] [60]))) mUtility.c:133 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5098 ] [60])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5098 ] [59])
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5099 ] [62])
                (plus:DI (reg/f:DI 0 ax [77])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:133 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 14 13 15 2 (set (reg:XF 10 st(2) [orig:63 D.5098 ] [63])
        (mem:XF (reg/f:DI 0 ax [orig:62 D.5099 ] [62]) [0 *_6+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5099 ] [62])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5099 ] [64])
                (plus:DI (reg/f:DI 0 ax [78])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:133 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 17 16 18 2 (set (reg:XF 8 st [orig:65 D.5098 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.5099 ] [64]) [0 *_8+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5099 ] [64])
        (nil)))
(insn 18 17 19 2 (set (reg:XF 8 st [orig:66 D.5098 ] [66])
        (mult:XF (reg:XF 8 st [orig:65 D.5098 ] [65])
            (reg:XF 10 st(2) [orig:63 D.5098 ] [63]))) mUtility.c:133 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.5098 ] [65])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.5098 ] [63])
            (nil))))
(insn 19 18 20 2 (set (reg:XF 9 st(1) [orig:67 D.5098 ] [67])
        (plus:XF (reg:XF 9 st(1) [orig:61 D.5098 ] [61])
            (reg:XF 8 st [orig:66 D.5098 ] [66]))) mUtility.c:133 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5098 ] [66])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.5098 ] [61])
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.5099 ] [68])
                (plus:DI (reg/f:DI 0 ax [79])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:133 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 22 21 23 2 (set (reg:XF 10 st(2) [orig:69 D.5098 ] [69])
        (mem:XF (reg/f:DI 0 ax [orig:68 D.5099 ] [68]) [0 *_12+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.5099 ] [68])
        (nil)))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.5099 ] [70])
                (plus:DI (reg/f:DI 0 ax [80])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:133 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 25 24 26 2 (set (reg:XF 8 st [orig:71 D.5098 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.5099 ] [70]) [0 *_14+0 S16 A128])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5099 ] [70])
        (nil)))
(insn 26 25 27 2 (set (reg:XF 8 st [orig:72 D.5098 ] [72])
        (mult:XF (reg:XF 8 st [orig:71 D.5098 ] [71])
            (reg:XF 10 st(2) [orig:69 D.5098 ] [69]))) mUtility.c:133 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5098 ] [71])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:69 D.5098 ] [69])
            (nil))))
(insn 27 26 30 2 (set (reg:XF 8 st [orig:73 D.5098 ] [73])
        (plus:XF (reg:XF 8 st [orig:72 D.5098 ] [72])
            (reg:XF 9 st(1) [orig:67 D.5098 ] [67]))) mUtility.c:133 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5098 ] [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.5098 ] [67])
            (nil))))
(insn 30 27 34 2 (set (reg:XF 8 st [orig:74 <retval> ] [74])
        (reg:XF 8 st [orig:73 D.5098 ] [73])) mUtility.c:133 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5098 ] [73])
        (nil)))
(insn 34 30 37 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:74 <retval> ] [74])) mUtility.c:134 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 <retval> ] [74])
        (nil)))
(insn 37 34 0 2 (use (reg/i:XF 8 st)) mUtility.c:134 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function q_sort (q_sort, funcdef_no=16, decl_uid=1738, cgraph_uid=16)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 63:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 97:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 102
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 8
   Insn 125: point = 0
   Insn 124: point = 0
   Insn 123: point = 1
   Insn 122: point = 2
   Insn 121: point = 3
   Insn 120: point = 4
   Insn 119: point = 5
   Insn 118: point = 6
   Insn 117: point = 6
   Insn 116: point = 7
   Insn 115: point = 8
   Insn 114: point = 9
   Insn 113: point = 10
   Insn 112: point = 11
   Insn 111: point = 12
   Insn 110: point = 13
   Insn 109: point = 14
   Insn 108: point = 16
   Insn 107: point = 17
   Insn 106: point = 19
   Insn 105: point = 21
   Insn 104: point = 22
   Insn 103: point = 23
   Insn 102: point = 25
   Insn 101: point = 27
   Insn 100: point = 28
   Insn 99: point = 30
   Insn 98: point = 32
   Insn 97: point = 33
   Insn 96: point = 33
   Insn 95: point = 35
   Insn 94: point = 36
   Insn 93: point = 38
   Insn 92: point = 40
   Insn 91: point = 41
   Insn 90: point = 42
   Insn 89: point = 44
   Insn 88: point = 46
   Insn 87: point = 47
   Insn 86: point = 49
   Insn 85: point = 51
  BB 7
   Insn 83: point = 52
   Insn 82: point = 52
   Insn 81: point = 53
  BB 5
   Insn 136: point = 54
   Insn 46: point = 54
  BB 3
   Insn 133: point = 54
   Insn 28: point = 54
   Insn 27: point = 55
   Insn 26: point = 56
   Insn 25: point = 57
   Insn 24: point = 59
   Insn 20: point = 60
   Insn 19: point = 61
   Insn 18: point = 63
   Insn 17: point = 65
   Insn 16: point = 67
   Insn 15: point = 68
   Insn 14: point = 70
   Insn 13: point = 72
  BB 2
   Insn 11: point = 73
   Insn 10: point = 73
   Insn 9: point = 74
   Insn 8: point = 76
   Insn 4: point = 77
   Insn 3: point = 77
   Insn 2: point = 77
  BB 6
   Insn 77: point = 77
   Insn 76: point = 78
   Insn 75: point = 79
   Insn 74: point = 81
   Insn 73: point = 82
   Insn 72: point = 84
   Insn 71: point = 86
   Insn 70: point = 87
   Insn 69: point = 88
   Insn 68: point = 90
   Insn 67: point = 92
   Insn 66: point = 93
   Insn 65: point = 95
   Insn 64: point = 97
   Insn 63: point = 98
   Insn 62: point = 98
   Insn 61: point = 100
   Insn 60: point = 101
   Insn 59: point = 103
   Insn 58: point = 105
   Insn 57: point = 106
   Insn 56: point = 107
   Insn 55: point = 109
   Insn 54: point = 111
   Insn 53: point = 112
   Insn 52: point = 114
   Insn 51: point = 116
  BB 4
   Insn 41: point = 117
   Insn 40: point = 117
   Insn 39: point = 118
   Insn 38: point = 119
   Insn 37: point = 121
   Insn 36: point = 123
   Insn 35: point = 125
   Insn 34: point = 126
   Insn 33: point = 128
   Insn 32: point = 130
 r59: [73..74]
 r60: [69..70]
 r61: [66..68]
 r62: [64..65]
 r63: [62..63]
 r64: [127..128]
 r65: [124..126]
 r66: [122..123]
 r67: [120..121]
 r68: [117..119]
 r69: [113..114]
 r70: [110..112]
 r71: [108..109]
 r72: [102..103]
 r73: [99..101]
 r74: [87..98]
 r75: [94..95]
 r76: [91..93]
 r77: [89..90]
 r78: [87..88]
 r79: [83..84]
 r80: [80..82]
 r81: [77..79]
 r82: [48..49]
 r83: [45..47]
 r84: [43..44]
 r85: [37..38]
 r86: [34..36]
 r87: [22..33]
 r88: [29..30]
 r89: [26..28]
 r90: [24..25]
 r91: [22..23]
 r92: [18..19]
 r93: [15..17]
 r94: [12..14]
 r95: [75..76]
 r96: [71..72]
 r97: [66..67]
 r98: [60..61]
 r101: [56..57]
 r102: [58..59]
 r103: [54..55]
 r104: [129..130]
 r105: [124..125]
 r106: [117..118]
 r107: [115..116]
 r108: [110..111]
 r109: [106..107]
 r110: [104..105]
 r111: [99..100]
 r112: [96..97]
 r113: [91..92]
 r114: [85..86]
 r115: [80..81]
 r116: [77..78]
 r117: [52..53]
 r118: [50..51]
 r119: [45..46]
 r120: [41..42]
 r121: [39..40]
 r122: [34..35]
 r123: [31..32]
 r124: [26..27]
 r125: [20..21]
 r126: [15..16]
 r127: [12..13]
 r128: [8..11]
 r129: [7..10]
 r130: [6..9]
 r131: [2..5]
 r132: [1..4]
 r133: [0..3]
Compressing live ranges: from 131 to 108 - 82%
Ranges after the compression:
 r59: [58..59]
 r60: [54..55]
 r61: [52..53]
 r62: [50..51]
 r63: [48..49]
 r64: [104..105]
 r65: [102..103]
 r66: [100..101]
 r67: [98..99]
 r68: [96..97]
 r69: [92..93]
 r70: [90..91]
 r71: [88..89]
 r72: [82..83]
 r73: [80..81]
 r74: [70..79]
 r75: [76..77]
 r76: [74..75]
 r77: [72..73]
 r78: [70..71]
 r79: [66..67]
 r80: [64..65]
 r81: [62..63]
 r82: [34..35]
 r83: [32..33]
 r84: [30..31]
 r85: [24..25]
 r86: [22..23]
 r87: [12..21]
 r88: [18..19]
 r89: [16..17]
 r90: [14..15]
 r91: [12..13]
 r92: [8..9]
 r93: [6..7]
 r94: [4..5]
 r95: [60..61]
 r96: [56..57]
 r97: [52..53]
 r98: [46..47]
 r101: [42..43]
 r102: [44..45]
 r103: [40..41]
 r104: [106..107]
 r105: [102..103]
 r106: [96..97]
 r107: [94..95]
 r108: [90..91]
 r109: [86..87]
 r110: [84..85]
 r111: [80..81]
 r112: [78..79]
 r113: [74..75]
 r114: [68..69]
 r115: [64..65]
 r116: [62..63]
 r117: [38..39]
 r118: [36..37]
 r119: [32..33]
 r120: [28..29]
 r121: [26..27]
 r122: [22..23]
 r123: [20..21]
 r124: [16..17]
 r125: [10..11]
 r126: [6..7]
 r127: [4..5]
 r128: [2..3]
 r129: [2..3]
 r130: [2..3]
 r131: [0..1]
 r132: [0..1]
 r133: [0..1]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 70
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 96
changing reg in insn 104
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 113
changing reg in insn 116
changing reg in insn 114
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 120
changing reg in insn 123
changing reg in insn 121
changing reg in insn 124
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 125.


q_sort

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={56d,53u} r1={20d,18u,8e} r2={7d,4u,2e} r4={5d,3u} r5={5d,3u} r6={1d,58u} r7={1d,11u} r8={3d,1u} r9={3d,1u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={30d,3u} r18={2d} r19={2d} r20={1d,1u,12e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 392{214d,156u,22e} in 104{102 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 95
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
        (reg:DI 5 di [ arr ])) mUtility.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ arr ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])
        (reg:SI 4 si [ beg ])) mUtility.c:137 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ beg ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 end+0 S4 A32])
        (reg:SI 1 dx [ end ])) mUtility.c:137 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ end ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:139 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:SI 0 ax [orig:59 D.5100 ] [59])
                (plus:SI (reg:SI 0 ax [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:139 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 10 9 11 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.5100 ] [59])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 end+0 S4 A32]))) mUtility.c:139 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5100 ] [59])
        (nil)))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 128)
            (pc))) mUtility.c:139 612 {*jcc_1}
     (nil)
 -> 128)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 96 97 98 101 102 103
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:140 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 0 ax [orig:60 D.5101 ] [60])
        (sign_extend:DI (reg:SI 0 ax [96]))) mUtility.c:140 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [96])
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 1 dx [orig:61 D.5101 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:60 D.5101 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:140 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5101 ] [60])
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5102 ] [62])
                (plus:DI (reg/f:DI 0 ax [97])
                    (reg:DI 1 dx [orig:61 D.5101 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:140 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5101 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.5101 ] [61]))
                (nil)))))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:63 D.5103 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.5102 ] [62]) [0 *_9+0 S8 A64])) mUtility.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5102 ] [62])
        (nil)))
(insn 19 18 20 3 (set (reg:XF 0 ax [98])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.5103 ] [63]) [0 *_10+0 S16 A128])) mUtility.c:140 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5103 ] [63])
        (nil)))
(insn 20 19 24 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 piv+0 S16 A128])
        (reg:XF 0 ax [98])) mUtility.c:140 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [98])
        (nil)))
(insn 24 20 25 3 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:141 89 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg:SI 0 ax [101])
                (plus:SI (reg:SI 0 ax [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:141 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [102])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])
        (reg:SI 0 ax [101])) mUtility.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [101])
        (nil)))
(insn 27 26 28 3 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 end+0 S4 A32])) mUtility.c:141 89 {*movsi_internal}
     (nil))
(insn 28 27 133 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])
        (reg:SI 0 ax [103])) mUtility.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [103])
        (nil)))
(jump_insn 133 28 134 3 (set (pc)
        (label_ref 78)) mUtility.c:142 650 {jump}
     (nil)
 -> 78)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 134 133 80)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 104 105 106
(code_label 80 134 31 4 41 "" [1 uses])
(note 31 80 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:143 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 0 ax [orig:64 D.5101 ] [64])
        (sign_extend:DI (reg:SI 0 ax [104]))) mUtility.c:143 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [104])
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 1 dx [orig:65 D.5101 ] [65])
                (ashift:DI (reg:DI 0 ax [orig:64 D.5101 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:143 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.5101 ] [64])
        (nil)))
(insn 35 34 36 4 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5102 ] [66])
                (plus:DI (reg/f:DI 0 ax [105])
                    (reg:DI 1 dx [orig:65 D.5101 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:143 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.5101 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.5101 ] [65]))
                (nil)))))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [orig:67 D.5103 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [orig:66 D.5102 ] [66]) [0 *_16+0 S8 A64])) mUtility.c:143 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5102 ] [66])
        (nil)))
(insn 38 37 39 4 (set (reg:XF 8 st [orig:68 D.5104 ] [68])
        (mem:XF (reg/f:DI 0 ax [orig:67 D.5103 ] [67]) [0 *_17+0 S16 A128])) mUtility.c:143 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.5103 ] [67])
        (nil)))
(insn 39 38 40 4 (set (reg:XF 9 st(1) [106])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 piv+0 S16 A128])) mUtility.c:143 131 {*movxf_internal_rex64}
     (nil))
(insn 40 39 41 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [106])
            (reg:XF 8 st [orig:68 D.5104 ] [68]))) mUtility.c:143 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [106])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5104 ] [68])
            (nil))))
(jump_insn 41 40 45 4 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 135)
            (pc))) mUtility.c:143 612 {*jcc_1}
     (nil)
 -> 135)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 45 41 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 136 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:144 273 {*addsi_1}
     (nil))
(jump_insn 136 46 137 5 (set (pc)
        (label_ref 78)) 650 {jump}
     (nil)
 -> 78)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 135)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 70 71 72 73 74 75 76 77 78 79 80 81 107 108 109 110 111 112 113 114 115 116
(code_label 135 137 50 6 43 "" [1 uses])
(note 50 135 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:146 89 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DI 0 ax [orig:69 D.5101 ] [69])
        (sign_extend:DI (reg:SI 0 ax [107]))) mUtility.c:146 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [107])
        (nil)))
(insn 53 52 54 6 (parallel [
            (set (reg:DI 1 dx [orig:70 D.5101 ] [70])
                (ashift:DI (reg:DI 0 ax [orig:69 D.5101 ] [69])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:146 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.5101 ] [69])
        (nil)))
(insn 54 53 55 6 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5102 ] [71])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:70 D.5101 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:146 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.5101 ] [70])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:70 D.5101 ] [70]))
                (nil)))))
(insn 56 55 57 6 (set (reg/f:DI 0 ax [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:71 D.5102 ] [71]) [0 *_22+0 S8 A64])) mUtility.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5102 ] [71])
        (nil)))
(insn 57 56 58 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 temp+0 S8 A64])
        (reg/f:DI 0 ax [109])) mUtility.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (nil)))
(insn 58 57 59 6 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:147 89 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 0 ax [orig:72 D.5101 ] [72])
        (sign_extend:DI (reg:SI 0 ax [110]))) mUtility.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [110])
        (nil)))
(insn 60 59 61 6 (parallel [
            (set (reg:DI 1 dx [orig:73 D.5101 ] [73])
                (ashift:DI (reg:DI 0 ax [orig:72 D.5101 ] [72])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:72 D.5101 ] [72])
        (nil)))
(insn 61 60 62 6 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg/f:DI 1 dx [orig:74 D.5102 ] [74])
                (plus:DI (reg:DI 1 dx [orig:73 D.5101 ] [73])
                    (reg/f:DI 0 ax [111])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.5101 ] [73])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:73 D.5101 ] [73]))
                (nil)))))
(insn 63 62 64 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:147 273 {*addsi_1}
     (nil))
(insn 64 63 65 6 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])) mUtility.c:147 89 {*movsi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 0 ax [orig:75 D.5101 ] [75])
        (sign_extend:DI (reg:SI 0 ax [112]))) mUtility.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [112])
        (nil)))
(insn 66 65 67 6 (parallel [
            (set (reg:DI 2 cx [orig:76 D.5101 ] [76])
                (ashift:DI (reg:DI 0 ax [orig:75 D.5101 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:75 D.5101 ] [75])
        (nil)))
(insn 67 66 68 6 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.5102 ] [77])
                (plus:DI (reg/f:DI 0 ax [113])
                    (reg:DI 2 cx [orig:76 D.5101 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [113])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:76 D.5101 ] [76])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 2 cx [orig:76 D.5101 ] [76]))
                (nil)))))
(insn 69 68 70 6 (set (reg/f:DI 0 ax [orig:78 D.5103 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.5102 ] [77]) [0 *_30+0 S8 A64])) mUtility.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.5102 ] [77])
        (nil)))
(insn 70 69 71 6 (set (mem/f:DI (reg/f:DI 1 dx [orig:74 D.5102 ] [74]) [0 *_26+0 S8 A64])
        (reg/f:DI 0 ax [orig:78 D.5103 ] [78])) mUtility.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.5103 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:74 D.5102 ] [74])
            (nil))))
(insn 71 70 72 6 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])) mUtility.c:148 89 {*movsi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:DI 0 ax [orig:79 D.5101 ] [79])
        (sign_extend:DI (reg:SI 0 ax [114]))) mUtility.c:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [114])
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 1 dx [orig:80 D.5101 ] [80])
                (ashift:DI (reg:DI 0 ax [orig:79 D.5101 ] [79])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:148 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:79 D.5101 ] [79])
        (nil)))
(insn 74 73 75 6 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg/f:DI 1 dx [orig:81 D.5102 ] [81])
                (plus:DI (reg:DI 1 dx [orig:80 D.5101 ] [80])
                    (reg/f:DI 0 ax [115])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:148 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.5101 ] [80])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:80 D.5101 ] [80]))
                (nil)))))
(insn 76 75 77 6 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 temp+0 S8 A64])) mUtility.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 6 (set (mem/f:DI (reg/f:DI 1 dx [orig:81 D.5102 ] [81]) [0 *_34+0 S8 A64])
        (reg/f:DI 0 ax [116])) mUtility.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:81 D.5102 ] [81])
            (nil))))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117
(code_label 78 77 79 7 38 "" [2 uses])
(note 79 78 81 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 81 79 82 7 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:142 89 {*movsi_internal}
     (nil))
(insn 82 81 83 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [117])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32]))) mUtility.c:142 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [117])
        (nil)))
(jump_insn 83 82 84 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) mUtility.c:142 612 {*jcc_1}
     (nil)
 -> 80)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83 84 85 86 87 88 89 90 91 92 93 94 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
(note 84 83 85 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 8 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:151 89 {*movsi_internal}
     (nil))
(insn 86 85 87 8 (set (reg:DI 0 ax [orig:82 D.5101 ] [82])
        (sign_extend:DI (reg:SI 0 ax [118]))) mUtility.c:151 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [118])
        (nil)))
(insn 87 86 88 8 (parallel [
            (set (reg:DI 1 dx [orig:83 D.5101 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 D.5101 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:151 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:82 D.5101 ] [82])
        (nil)))
(insn 88 87 89 8 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 8 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.5102 ] [84])
                (plus:DI (reg/f:DI 0 ax [119])
                    (reg:DI 1 dx [orig:83 D.5101 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:151 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:83 D.5101 ] [83])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:83 D.5101 ] [83]))
                (nil)))))
(insn 90 89 91 8 (set (reg/f:DI 0 ax [120])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 D.5102 ] [84]) [0 *_37+0 S8 A64])) mUtility.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.5102 ] [84])
        (nil)))
(insn 91 90 92 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 temp+0 S8 A64])
        (reg/f:DI 0 ax [120])) mUtility.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [120])
        (nil)))
(insn 92 91 93 8 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:152 89 {*movsi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 0 ax [orig:85 D.5101 ] [85])
        (sign_extend:DI (reg:SI 0 ax [121]))) mUtility.c:152 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [121])
        (nil)))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 1 dx [orig:86 D.5101 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.5101 ] [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:152 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.5101 ] [85])
        (nil)))
(insn 95 94 96 8 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 8 (parallel [
            (set (reg/f:DI 1 dx [orig:87 D.5102 ] [87])
                (plus:DI (reg:DI 1 dx [orig:86 D.5101 ] [86])
                    (reg/f:DI 0 ax [122])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:152 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [122])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:86 D.5101 ] [86])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:86 D.5101 ] [86]))
                (nil)))))
(insn 97 96 98 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:152 273 {*addsi_1}
     (nil))
(insn 98 97 99 8 (set (reg:SI 0 ax [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:152 89 {*movsi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:DI 0 ax [orig:88 D.5101 ] [88])
        (sign_extend:DI (reg:SI 0 ax [123]))) mUtility.c:152 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [123])
        (nil)))
(insn 100 99 101 8 (parallel [
            (set (reg:DI 2 cx [orig:89 D.5101 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.5101 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:152 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:88 D.5101 ] [88])
        (nil)))
(insn 101 100 102 8 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.5102 ] [90])
                (plus:DI (reg/f:DI 0 ax [124])
                    (reg:DI 2 cx [orig:89 D.5101 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:152 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:89 D.5101 ] [89])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 2 cx [orig:89 D.5101 ] [89]))
                (nil)))))
(insn 103 102 104 8 (set (reg/f:DI 0 ax [orig:91 D.5103 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.5102 ] [90]) [0 *_45+0 S8 A64])) mUtility.c:152 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.5102 ] [90])
        (nil)))
(insn 104 103 105 8 (set (mem/f:DI (reg/f:DI 1 dx [orig:87 D.5102 ] [87]) [0 *_41+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 D.5103 ] [91])) mUtility.c:152 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.5103 ] [91])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:87 D.5102 ] [87])
            (nil))))
(insn 105 104 106 8 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:153 89 {*movsi_internal}
     (nil))
(insn 106 105 107 8 (set (reg:DI 0 ax [orig:92 D.5101 ] [92])
        (sign_extend:DI (reg:SI 0 ax [125]))) mUtility.c:153 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [125])
        (nil)))
(insn 107 106 108 8 (parallel [
            (set (reg:DI 1 dx [orig:93 D.5101 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.5101 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:153 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:92 D.5101 ] [92])
        (nil)))
(insn 108 107 109 8 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 109 108 110 8 (parallel [
            (set (reg/f:DI 1 dx [orig:94 D.5102 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 D.5101 ] [93])
                    (reg/f:DI 0 ax [126])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:153 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [126])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.5101 ] [93])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])
                    (reg:DI 1 dx [orig:93 D.5101 ] [93]))
                (nil)))))
(insn 110 109 111 8 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 temp+0 S8 A64])) mUtility.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 8 (set (mem/f:DI (reg/f:DI 1 dx [orig:94 D.5102 ] [94]) [0 *_49+0 S8 A64])
        (reg/f:DI 0 ax [127])) mUtility.c:153 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [127])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:94 D.5102 ] [94])
            (nil))))
(insn 112 111 113 8 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 l+0 S4 A32])) mUtility.c:155 89 {*movsi_internal}
     (nil))
(insn 113 112 114 8 (set (reg:SI 2 cx [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 beg+0 S4 A32])) mUtility.c:155 89 {*movsi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [128])) mUtility.c:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [128])
        (nil)))
(insn 116 115 117 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [129])) mUtility.c:155 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [129])
        (nil)))
(insn 117 116 118 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) mUtility.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(call_insn 118 117 119 8 (call (mem:QI (symbol_ref:DI ("q_sort") [flags 0x3]  <function_decl 0x7f4452e3c600 q_sort>) [0 q_sort S1 A8])
        (const_int 0 [0])) mUtility.c:155 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 119 118 120 8 (set (reg:SI 1 dx [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 end+0 S4 A32])) mUtility.c:156 89 {*movsi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SI 2 cx [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 r+0 S4 A32])) mUtility.c:156 89 {*movsi_internal}
     (nil))
(insn 121 120 122 8 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 arr+0 S8 A64])) mUtility.c:156 87 {*movdi_internal_rex64}
     (nil))
(insn 122 121 123 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [131])) mUtility.c:156 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [131])
        (nil)))
(insn 123 122 124 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [132])) mUtility.c:156 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [132])
        (nil)))
(insn 124 123 125 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) mUtility.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [133])
        (nil)))
(call_insn 125 124 128 8 (call (mem:QI (symbol_ref:DI ("q_sort") [flags 0x3]  <function_decl 0x7f4452e3c600 q_sort>) [0 q_sort S1 A8])
        (const_int 0 [0])) mUtility.c:156 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 128 125 129 9 36 "" [1 uses])
(note 129 128 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function euclid_dist (euclid_dist, funcdef_no=17, decl_uid=3979, cgraph_uid=17)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=0,overall=13,losers=2,rld_nregs=3
	 Choosing alt 0 in insn 29:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=89 from oldreg=69, assigning class FLOAT_REGS to r89
   29: r89:XF=r89:XF+r68:XF
      REG_DEAD r68:XF
      REG_DEAD r62:XF
    Inserting insn reload before:
   58: r89:XF=r62:XF
    Inserting insn reload after:
   59: r69:XF=r89:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=90 from oldreg=69, assigning class FLOAT_REGS to r90
   42: r76:XF=r75:XF+r90:XF
      REG_DEAD r75:XF
      REG_DEAD r69:XF
    Inserting insn reload before:
   60: r90:XF=r69:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=91 from oldreg=69, assigning class FLOAT_REGS to inheritance r91
    Original reg change 69->91 (bb2):
   59: r91:XF=r89:XF
    Add original<-inheritance after:
   61: r69:XF=r91:XF

    Inheritance reuse change 69->91 (bb2):
   60: r90:XF=r91:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=92 from oldreg=62, assigning class FLOAT_REGS to inheritance r92
    Original reg change 62->92 (bb2):
   16: r92:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
   62: r62:XF=r92:XF

    Inheritance reuse change 62->92 (bb2):
   58: r89:XF=r92:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    61: r69:XF=r91:XF
deleting insn with uid = 61.
	    Removing dead insn:
    62: r62:XF=r92:XF
deleting insn with uid = 62.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 55: point = 0
   Insn 52: point = 0
   Insn 48: point = 1
   Insn 45: point = 3
   Insn 44: point = 4
   Insn 43: point = 4
   Insn 42: point = 5
   Insn 60: point = 7
	   Creating copy r90<-r91@1
   Insn 41: point = 9
   Insn 40: point = 10
   Insn 39: point = 10
   Insn 38: point = 11
   Insn 37: point = 12
   Insn 36: point = 13
   Insn 35: point = 15
   Insn 34: point = 17
   Insn 33: point = 19
   Insn 32: point = 20
   Insn 31: point = 22
   Insn 30: point = 24
   Insn 59: point = 25
	   Creating copy r89->r91@1
   Insn 29: point = 27
   Insn 58: point = 28
	   Creating copy r89<-r92@1
   Insn 28: point = 30
   Insn 27: point = 31
   Insn 26: point = 31
   Insn 25: point = 32
   Insn 24: point = 33
   Insn 23: point = 34
   Insn 22: point = 36
   Insn 21: point = 38
   Insn 20: point = 40
   Insn 19: point = 41
   Insn 18: point = 43
   Insn 17: point = 45
   Insn 16: point = 46
	Hard reg 8 is preferable by r92 with profit 1
   Insn 15: point = 47
   Insn 14: point = 47
   Insn 13: point = 48
   Insn 12: point = 49
   Insn 11: point = 50
   Insn 10: point = 52
   Insn 9: point = 54
   Insn 8: point = 55
   Insn 7: point = 57
   Insn 3: point = 58
   Insn 2: point = 58
 r59: [51..55]
 r60: [51..52]
 r61: [47..50]
 r63: [42..43]
 r64: [35..41]
 r65: [37..38]
 r66: [35..36]
 r67: [31..34]
 r68: [27..30]
 r70: [21..22]
 r71: [14..20]
 r72: [16..17]
 r73: [14..15]
 r74: [10..13]
 r75: [6..9]
 r76: [4..5]
 r77: [2..3]
 r78: [0..1]
 r79: [56..57]
 r80: [53..54]
 r81: [48..49]
 r82: [44..45]
 r83: [39..40]
 r84: [32..33]
 r85: [23..24]
 r86: [18..19]
 r87: [11..12]
 r89: [26..28]
 r90: [6..7]
 r91: [8..25]
 r92: [29..46]
Compressing live ranges: from 58 to 46 - 79%
Ranges after the compression:
 r59: [40..43]
 r60: [40..41]
 r61: [38..39]
 r63: [34..35]
 r64: [28..33]
 r65: [30..31]
 r66: [28..29]
 r67: [26..27]
 r68: [22..25]
 r70: [18..19]
 r71: [12..17]
 r72: [14..15]
 r73: [12..13]
 r74: [10..11]
 r75: [6..9]
 r76: [4..5]
 r77: [2..3]
 r78: [0..1]
 r79: [44..45]
 r80: [42..43]
 r81: [38..39]
 r82: [36..37]
 r83: [32..33]
 r84: [26..27]
 r85: [20..21]
 r86: [16..17]
 r87: [10..11]
 r89: [22..23]
 r90: [6..7]
 r91: [8..21]
 r92: [24..37]
	 Assigning to 89 (cl=FLOAT_REGS, orig=69, freq=3, tfirst=89, tfreq=3)...
	   Assign 10 to reload r89 (freq=3)
	Hard reg 8 is preferable by r92 with profit 1
	Hard reg 10 is preferable by r92 with profit 1
	Hard reg 10 is preferable by r91 with profit 1
	Hard reg 10 is preferable by r90 with profit 1
	 Assigning to 90 (cl=FLOAT_REGS, orig=69, freq=2, tfirst=89, tfreq=3)...
	   Assign 10 to reload r90 (freq=2)
	Hard reg 10 is preferable by r91 with profit 2
	 Assigning to 91 (cl=FLOAT_REGS, orig=69, freq=2, tfirst=89, tfreq=3)...
	 Assigning to 92 (cl=FLOAT_REGS, orig=62, freq=2, tfirst=89, tfreq=3)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
   60: r90:XF=r69:XF
      REG_DEAD r69:XF
   Insn after restoring regs:
   59: r69:XF=r89:XF
      REG_DEAD r89:XF
   Insn after restoring regs:
   58: r89:XF=r62:XF
      REG_DEAD r62:XF
   Insn after restoring regs:
   16: r62:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 55: point = 0
   Insn 52: point = 0
   Insn 48: point = 1
   Insn 45: point = 3
   Insn 44: point = 4
   Insn 43: point = 4
   Insn 42: point = 5
   Insn 60: point = 7
   Insn 41: point = 9
   Insn 40: point = 10
   Insn 39: point = 10
   Insn 38: point = 11
   Insn 37: point = 12
   Insn 36: point = 13
   Insn 35: point = 15
   Insn 34: point = 17
   Insn 33: point = 19
   Insn 32: point = 20
   Insn 31: point = 22
   Insn 30: point = 24
   Insn 59: point = 25
   Insn 29: point = 27
   Insn 58: point = 28
   Insn 28: point = 30
   Insn 27: point = 31
   Insn 26: point = 31
   Insn 25: point = 32
   Insn 24: point = 33
   Insn 23: point = 34
   Insn 22: point = 36
   Insn 21: point = 38
   Insn 20: point = 40
   Insn 19: point = 41
   Insn 18: point = 43
   Insn 17: point = 45
   Insn 16: point = 46
   Insn 15: point = 47
   Insn 14: point = 47
   Insn 13: point = 48
   Insn 12: point = 49
   Insn 11: point = 50
   Insn 10: point = 52
   Insn 9: point = 54
   Insn 8: point = 55
   Insn 7: point = 57
   Insn 3: point = 58
   Insn 2: point = 58
 r62: [29..46]
 r69: [8..25]
Compressing live ranges: from 58 to 4 - 6%
Ranges after the compression:
 r62: [2..3]
 r69: [0..1]
  Slot 0 regnos (width = 16):	 62	 69
Changing spilled pseudos to memory in insn #16
Changing spilled pseudos to memory in insn #58
Changing spilled pseudos to memory in insn #59
Changing spilled pseudos to memory in insn #60

********** Local #3: **********

Reusing alternative 0 for insn #60
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #59
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #58
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #16
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 48
changing reg in insn 52
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 44.


euclid_dist

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={18d,13u} r1={8d,3u} r2={5d} r4={5d,1u} r5={5d,1u} r6={1d,14u} r7={1d,20u} r8={16d,17u} r9={7d,3u} r10={7d,3u} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d} r18={4d} r19={4d} r20={1d,1u,4e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 312{232d,76u,4e} in 47{43 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:XF 9 st(1) [orig:59 D.5105 ] [59])
        (mem:XF (reg/f:DI 0 ax [79]) [0 *a_1(D)+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 8 st [orig:60 D.5105 ] [60])
        (mem:XF (reg/f:DI 0 ax [80]) [0 *b_3(D)+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:61 D.5105 ] [61])
        (minus:XF (reg:XF 9 st(1) [orig:59 D.5105 ] [59])
            (reg:XF 8 st [orig:60 D.5105 ] [60]))) mUtility.c:160 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5105 ] [60])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5105 ] [59])
            (nil))))
(insn 12 11 13 2 (set (reg:XF 0 ax [81])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [81])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [81])
        (nil)))
(insn 14 13 15 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:61 D.5105 ] [61])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5105 ] [61])
        (nil)))
(call_insn 15 14 16 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:160 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 16 15 62 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S16 A128])
        (reg:XF 8 st)) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 62 16 17 2 NOTE_INSN_DELETED)
(insn 17 62 18 2 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.5106 ] [63])
                (plus:DI (reg/f:DI 0 ax [82])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 19 18 20 2 (set (reg:XF 9 st(1) [orig:64 D.5105 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.5106 ] [63]) [0 *_7+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5106 ] [63])
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.5106 ] [65])
                (plus:DI (reg/f:DI 0 ax [83])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [83])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 22 21 23 2 (set (reg:XF 8 st [orig:66 D.5105 ] [66])
        (mem:XF (reg/f:DI 0 ax [orig:65 D.5106 ] [65]) [0 *_9+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5106 ] [65])
        (nil)))
(insn 23 22 24 2 (set (reg:XF 8 st [orig:67 D.5105 ] [67])
        (minus:XF (reg:XF 9 st(1) [orig:64 D.5105 ] [64])
            (reg:XF 8 st [orig:66 D.5105 ] [66]))) mUtility.c:160 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5105 ] [66])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:64 D.5105 ] [64])
            (nil))))
(insn 24 23 25 2 (set (reg:XF 0 ax [84])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [84])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [84])
        (nil)))
(insn 26 25 27 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:67 D.5105 ] [67])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5105 ] [67])
        (nil)))
(call_insn 27 26 28 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:160 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 28 27 58 2 (set (reg:XF 8 st [orig:68 D.5105 ] [68])
        (reg:XF 8 st)) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 58 28 29 2 (set (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 62 [ D.5105 ])
        (nil)))
(insn 29 58 59 2 (set (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
        (plus:XF (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
            (reg:XF 8 st [orig:68 D.5105 ] [68]))) mUtility.c:160 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5105 ] [68])
        (nil)))
(insn 59 29 61 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S16 A128])
        (reg:XF 10 st(2) [orig:69 D.5105 ] [69])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
        (nil)))
(note 61 59 30 2 NOTE_INSN_DELETED)
(insn 30 61 31 2 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.5106 ] [70])
                (plus:DI (reg/f:DI 0 ax [85])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 a+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 32 31 33 2 (set (reg:XF 9 st(1) [orig:71 D.5105 ] [71])
        (mem:XF (reg/f:DI 0 ax [orig:70 D.5106 ] [70]) [0 *_14+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5106 ] [70])
        (nil)))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) mUtility.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.5106 ] [72])
                (plus:DI (reg/f:DI 0 ax [86])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:160 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [86])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 35 34 36 2 (set (reg:XF 8 st [orig:73 D.5105 ] [73])
        (mem:XF (reg/f:DI 0 ax [orig:72 D.5106 ] [72]) [0 *_16+0 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.5106 ] [72])
        (nil)))
(insn 36 35 37 2 (set (reg:XF 8 st [orig:74 D.5105 ] [74])
        (minus:XF (reg:XF 9 st(1) [orig:71 D.5105 ] [71])
            (reg:XF 8 st [orig:73 D.5105 ] [73]))) mUtility.c:160 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5105 ] [73])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:71 D.5105 ] [71])
            (nil))))
(insn 37 36 38 2 (set (reg:XF 0 ax [87])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [87])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [87])
        (nil)))
(insn 39 38 40 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:74 D.5105 ] [74])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.5105 ] [74])
        (nil)))
(call_insn 40 39 41 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:160 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 41 40 60 2 (set (reg:XF 8 st [orig:75 D.5105 ] [75])
        (reg:XF 8 st)) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 60 41 42 2 (set (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 %sfp+-32 S16 A128])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 69 [ D.5105 ])
        (nil)))
(insn 42 60 43 2 (set (reg:XF 8 st [orig:76 D.5105 ] [76])
        (plus:XF (reg:XF 8 st [orig:75 D.5105 ] [75])
            (reg:XF 10 st(2) [orig:69 D.5105 ] [69]))) mUtility.c:160 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:69 D.5105 ] [69])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5105 ] [75])
            (nil))))
(insn 43 42 44 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:76 D.5105 ] [76])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5105 ] [76])
        (nil)))
(call_insn 44 43 45 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sqrtl") [flags 0x41]  <function_decl 0x7f4452d75400 sqrtl>) [0 __builtin_sqrtl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:160 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 45 44 48 2 (set (reg:XF 8 st [orig:77 D.5105 ] [77])
        (reg:XF 8 st)) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 48 45 52 2 (set (reg:XF 8 st [orig:78 <retval> ] [78])
        (reg:XF 8 st [orig:77 D.5105 ] [77])) mUtility.c:160 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5105 ] [77])
        (nil)))
(insn 52 48 55 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:78 <retval> ] [78])) mUtility.c:161 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 <retval> ] [78])
        (nil)))
(insn 55 52 0 2 (use (reg/i:XF 8 st)) mUtility.c:161 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _min (_min, funcdef_no=18, decl_uid=3983, cgraph_uid=18)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=64, assigning class NO_REGS to secondary r64
   21: r64:XF=r59:XF
      REG_DEAD r59:XF
    Inserting the sec. move after:
   37: r60:XF=r64:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0
   Insn 25: point = 0
   Insn 37: point = 1
	Hard reg 8 is preferable by r64 with profit 1
   Insn 21: point = 3
	Hard reg 8 is preferable by r64 with profit 1
	Hard reg 0 is preferable by r64 with profit 1
  BB 3
   Insn 35: point = 6
   Insn 13: point = 6
  BB 4
   Insn 18: point = 7
  BB 2
   Insn 8: point = 8
   Insn 7: point = 8
   Insn 6: point = 9
   Insn 5: point = 10
 r59: [4..7]
 r60: [0..1]
 r61: [8..10]
 r62: [8..9]
 r64: [2..3]
Compressing live ranges: from 11 to 8 - 72%
Ranges after the compression:
 r59: [4..5]
 r60: [0..1]
 r61: [6..7]
 r62: [6..7]
 r64: [2..3]

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 16):	 64
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #37

********** Local #3: **********

Reusing alternative 0 for insn #37
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 13
changing reg in insn 21
changing reg in insn 25
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


_min

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={1d} r4={1d} r5={1d} r6={1d,11u} r7={1d,5u} r8={3d,4u} r9={1d,1u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 52{27d,25u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 9 st(1) [61])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:164 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:XF 8 st [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:164 131 {*movxf_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [61])
            (reg:XF 8 st [62]))) mUtility.c:164 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [62])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [61])
            (nil))))
(jump_insn 8 7 12 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 34)
            (pc))) mUtility.c:164 612 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 12 8 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 35 3 (set (reg:XF 0 ax [orig:59 D.5107 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:164 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 35 13 36 3 (set (pc)
        (label_ref 19)) mUtility.c:164 650 {jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 36 35 34)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 34 36 17 4 51 "" [1 uses])
(note 17 34 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:XF 0 ax [orig:59 D.5107 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:165 131 {*movxf_internal_rex64}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 60
(code_label 19 18 20 5 49 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 37 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])
        (reg:XF 0 ax [orig:59 D.5107 ] [59])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.5107 ] [59])
        (nil)))
(insn 37 21 25 5 (set (reg:XF 8 st [orig:60 <retval> ] [60])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 64)
        (nil)))
(insn 25 37 28 5 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:60 <retval> ] [60])) mUtility.c:166 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 <retval> ] [60])
        (nil)))
(insn 28 25 0 5 (use (reg/i:XF 8 st)) mUtility.c:166 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _max (_max, funcdef_no=19, decl_uid=3987, cgraph_uid=19)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=64, assigning class NO_REGS to secondary r64
   21: r64:XF=r59:XF
      REG_DEAD r59:XF
    Inserting the sec. move after:
   37: r60:XF=r64:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0
   Insn 25: point = 0
   Insn 37: point = 1
	Hard reg 8 is preferable by r64 with profit 1
   Insn 21: point = 3
	Hard reg 8 is preferable by r64 with profit 1
	Hard reg 0 is preferable by r64 with profit 1
  BB 3
   Insn 35: point = 6
   Insn 13: point = 6
  BB 4
   Insn 18: point = 7
  BB 2
   Insn 8: point = 8
   Insn 7: point = 8
   Insn 6: point = 9
   Insn 5: point = 10
 r59: [4..7]
 r60: [0..1]
 r61: [8..10]
 r62: [8..9]
 r64: [2..3]
Compressing live ranges: from 11 to 8 - 72%
Ranges after the compression:
 r59: [4..5]
 r60: [0..1]
 r61: [6..7]
 r62: [6..7]
 r64: [2..3]

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 16):	 64
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #37

********** Local #3: **********

Reusing alternative 0 for insn #37
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 13
changing reg in insn 21
changing reg in insn 25
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


_max

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={1d} r4={1d} r5={1d} r6={1d,11u} r7={1d,5u} r8={3d,4u} r9={1d,1u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 52{27d,25u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 9 st(1) [61])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:168 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:XF 8 st [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:168 131 {*movxf_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [61])
            (reg:XF 8 st [62]))) mUtility.c:168 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [62])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [61])
            (nil))))
(jump_insn 8 7 12 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 34)
            (pc))) mUtility.c:168 612 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 12 8 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 35 3 (set (reg:XF 0 ax [orig:59 D.5108 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:168 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 35 13 36 3 (set (pc)
        (label_ref 19)) mUtility.c:168 650 {jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 36 35 34)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 34 36 17 4 57 "" [1 uses])
(note 17 34 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:XF 0 ax [orig:59 D.5108 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:169 131 {*movxf_internal_rex64}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 60
(code_label 19 18 20 5 55 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 37 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])
        (reg:XF 0 ax [orig:59 D.5108 ] [59])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.5108 ] [59])
        (nil)))
(insn 37 21 25 5 (set (reg:XF 8 st [orig:60 <retval> ] [60])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 64)
        (nil)))
(insn 25 37 28 5 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:60 <retval> ] [60])) mUtility.c:170 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 <retval> ] [60])
        (nil)))
(insn 28 25 0 5 (use (reg/i:XF 8 st)) mUtility.c:170 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function segments_intersect (segments_intersect, funcdef_no=20, decl_uid=1743, cgraph_uid=20)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 47
changing reg in insn 42
changing reg in insn 52
changing reg in insn 27
changing reg in insn 28
changing reg in insn 38
changing reg in insn 39
changing reg in insn 52
changing reg in insn 56
changing reg in insn 9
changing reg in insn 14
changing reg in insn 10
changing reg in insn 15
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 17
changing reg in insn 13
changing reg in insn 18
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 24
changing reg in insn 22
changing reg in insn 25
changing reg in insn 31
changing reg in insn 34
changing reg in insn 32
changing reg in insn 35
changing reg in insn 33
changing reg in insn 36
starting the processing of deferred insns
ending the processing of deferred insns


segments_intersect

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={13d,11u} r1={10d,7u} r2={8d,5u} r4={8d,5u} r5={8d,5u} r6={1d,21u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 250{183d,67u,0e} in 41{38 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 63 64 65 66 67 68 69 70
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 c+0 S8 A64])
        (reg:DI 1 dx [ c ])) mUtility.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ c ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 d+0 S8 A64])
        (reg:DI 2 cx [ d ])) mUtility.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ d ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (parallel [
            (set (reg:DI 5 di [63])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:174 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 10 9 11 2 (set (reg:DI 2 cx [64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 d+0 S8 A64])) mUtility.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 1 dx [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 c+0 S8 A64])) mUtility.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 b+0 S8 A64])) mUtility.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [67])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 a+0 S8 A64])) mUtility.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:DI 37 r8)
        (reg:DI 5 di [63])) mUtility.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [63])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 2 cx)
        (reg:DI 2 cx [64])) mUtility.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [64])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [65])) mUtility.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [65])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg:DI 4 si [66])) mUtility.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [66])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [67])) mUtility.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_intersection") [flags 0x3]  <function_decl 0x7f4452e3cc00 find_intersection>) [0 find_intersection S1 A8])
            (const_int 0 [0]))) mUtility.c:174 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 20 19 21 2 (parallel [
            (set (reg:DI 1 dx [68])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:177 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 21 20 22 2 (set (reg:DI 2 cx [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 b+0 S8 A64])) mUtility.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:DI 0 ax [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 a+0 S8 A64])) mUtility.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [68])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [68])
        (nil)))
(insn 24 23 25 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [69])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [69])
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [70])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (nil)))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x3]  <function_decl 0x7f4452e3cb00 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mUtility.c:177 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:60 D.5109 ] [60])
        (reg:SI 0 ax)) mUtility.c:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 28 27 29 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:60 D.5109 ] [60])
            (const_int 0 [0]))) mUtility.c:177 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.5109 ] [60])
        (nil)))
(jump_insn 29 28 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) mUtility.c:177 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 45)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 71 72 73
(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (parallel [
            (set (reg:DI 1 dx [71])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:177 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 31 33 3 (set (reg:DI 2 cx [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 d+0 S8 A64])) mUtility.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 c+0 S8 A64])) mUtility.c:177 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 3 (set (reg:DI 1 dx)
        (reg:DI 1 dx [71])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [71])
        (nil)))
(insn 35 34 36 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [72])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [72])
        (nil)))
(insn 36 35 37 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [73])) mUtility.c:177 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(call_insn 37 36 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x3]  <function_decl 0x7f4452e3cb00 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mUtility.c:177 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 38 37 39 3 (set (reg:SI 0 ax [orig:61 D.5109 ] [61])
        (reg:SI 0 ax)) mUtility.c:177 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 39 38 40 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:61 D.5109 ] [61])
            (const_int 0 [0]))) mUtility.c:177 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.5109 ] [61])
        (nil)))
(jump_insn 40 39 41 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) mUtility.c:177 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 45)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 62 4 (set (reg:SI 0 ax [orig:59 D.5109 ] [59])
        (const_int 1 [0x1])) mUtility.c:177 89 {*movsi_internal}
     (nil))
(jump_insn 62 42 63 4 (set (pc)
        (label_ref 50)) mUtility.c:177 650 {jump}
     (nil)
 -> 50)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 63 62 45)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 45 63 46 5 59 "" [2 uses])
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 50 5 (set (reg:SI 0 ax [orig:59 D.5109 ] [59])
        (const_int 0 [0])) mUtility.c:178 89 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 62
(code_label 50 47 51 6 61 "" [1 uses])
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 56 6 (set (reg:SI 0 ax [orig:62 <retval> ] [62])
        (reg:SI 0 ax [orig:59 D.5109 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5109 ] [59])
        (nil)))
(insn 56 52 59 6 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:62 <retval> ] [62])) mUtility.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 <retval> ] [62])
        (nil)))
(insn 59 56 0 6 (use (reg/i:SI 0 ax)) mUtility.c:196 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _den (_den, funcdef_no=21, decl_uid=4002, cgraph_uid=21)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 7:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 9:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 11:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 21:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=123 from oldreg=66, assigning class FLOAT_REGS to r123
   21: r123:XF=r123:XF+r100:XF
      REG_DEAD r100:XF
    Inserting insn reload before:
   84: r123:XF=r100:XF
    Inserting insn reload after:
   85: r66:XF=r123:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 23:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 25:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=124 from oldreg=71, assigning class FLOAT_REGS to r124
   30: r124:XF=r124:XF+r104:XF
      REG_DEAD r104:XF
    Inserting insn reload before:
   86: r124:XF=r104:XF
    Inserting insn reload after:
   87: r71:XF=r124:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 32:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 34:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 40:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 42:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 45:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 48:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 50:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 53:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=125 from oldreg=83, assigning class FLOAT_REGS to r125
   53: r125:XF=r125:XF+r82:XF
      REG_DEAD r82:XF
      REG_DEAD r79:XF
    Inserting insn reload before:
   88: r125:XF=r79:XF
    Inserting insn reload after:
   89: r83:XF=r125:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 56:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=12,losers=2 -- reject
	 Choosing alt 0 in insn 66:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
      Creating newreg=126 from oldreg=88, assigning class FLOAT_REGS to r126
   66: r126:XF=r126:XF/r87:XF
      REG_DEAD r87:XF
      REG_DEAD r83:XF
    Inserting insn reload before:
   90: r126:XF=r83:XF
    Inserting insn reload after:
   91: r88:XF=r126:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=127 from oldreg=83, assigning class FLOAT_REGS to inheritance r127
    Original reg change 83->127 (bb2):
   89: r127:XF=r125:XF
    Add original<-inheritance after:
   92: r83:XF=r127:XF

    Inheritance reuse change 83->127 (bb2):
   90: r126:XF=r127:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    92: r83:XF=r127:XF
deleting insn with uid = 92.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 81: point = 0
   Insn 78: point = 0
   Insn 74: point = 1
   Insn 71: point = 3
   Insn 70: point = 4
   Insn 69: point = 4
   Insn 68: point = 5
   Insn 67: point = 7
   Insn 91: point = 8
	Hard reg 9 is preferable by r126 with profit 1
   Insn 66: point = 10
   Insn 90: point = 11
	   Creating copy r126<-r127@1
   Insn 65: point = 13
   Insn 64: point = 14
   Insn 63: point = 14
   Insn 62: point = 15
   Insn 61: point = 16
   Insn 60: point = 17
   Insn 59: point = 19
   Insn 58: point = 21
   Insn 57: point = 22
   Insn 56: point = 23
   Insn 55: point = 25
   Insn 54: point = 26
   Insn 89: point = 27
	   Creating copy r125->r127@1
   Insn 53: point = 29
   Insn 88: point = 30
	Hard reg 9 is preferable by r125 with profit 1
   Insn 52: point = 32
   Insn 51: point = 34
   Insn 50: point = 35
   Insn 49: point = 37
   Insn 48: point = 38
   Insn 47: point = 40
   Insn 46: point = 41
   Insn 45: point = 42
   Insn 44: point = 44
   Insn 43: point = 46
   Insn 42: point = 47
   Insn 41: point = 49
   Insn 40: point = 50
   Insn 39: point = 52
   Insn 38: point = 53
   Insn 37: point = 54
   Insn 36: point = 56
   Insn 35: point = 58
   Insn 34: point = 59
   Insn 33: point = 61
   Insn 32: point = 62
   Insn 31: point = 64
   Insn 87: point = 65
	Hard reg 10 is preferable by r124 with profit 1
   Insn 30: point = 67
   Insn 86: point = 68
   Insn 29: point = 69
   Insn 28: point = 70
   Insn 27: point = 72
   Insn 26: point = 74
   Insn 25: point = 75
   Insn 24: point = 77
   Insn 23: point = 78
   Insn 22: point = 80
   Insn 85: point = 81
	Hard reg 10 is preferable by r123 with profit 1
   Insn 21: point = 83
   Insn 84: point = 84
   Insn 20: point = 85
   Insn 19: point = 86
   Insn 18: point = 88
   Insn 17: point = 90
   Insn 16: point = 91
   Insn 15: point = 93
   Insn 14: point = 94
   Insn 13: point = 96
   Insn 12: point = 97
   Insn 11: point = 98
   Insn 10: point = 100
   Insn 9: point = 101
   Insn 8: point = 103
   Insn 7: point = 104
   Insn 6: point = 106
   Insn 5: point = 107
 r59: [102..104]
 r60: [99..101]
 r61: [87..98]
 r62: [92..94]
 r63: [89..91]
 r64: [87..88]
 r65: [71..86]
 r66: [79..81]
 r67: [76..78]
 r68: [73..75]
 r69: [71..72]
 r70: [55..70]
 r71: [63..65]
 r72: [60..62]
 r73: [57..59]
 r74: [55..56]
 r75: [43..54]
 r76: [48..50]
 r77: [45..47]
 r78: [43..44]
 r79: [31..42]
 r80: [36..38]
 r81: [33..35]
 r82: [29..32]
 r84: [18..23]
 r85: [18..19]
 r86: [14..17]
 r87: [10..13]
 r88: [6..8]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [105..107]
 r93: [105..106]
 r94: [102..103]
 r95: [99..100]
 r96: [95..97]
 r97: [95..96]
 r98: [92..93]
 r99: [89..90]
 r100: [83..85]
 r101: [79..80]
 r102: [76..77]
 r103: [73..74]
 r104: [67..69]
 r105: [63..64]
 r106: [60..61]
 r107: [57..58]
 r108: [51..53]
 r109: [51..52]
 r110: [48..49]
 r111: [45..46]
 r112: [39..41]
 r113: [39..40]
 r114: [36..37]
 r115: [33..34]
 r116: [24..26]
 r117: [24..25]
 r118: [20..22]
 r119: [20..21]
 r120: [15..16]
 r121: [6..7]
 r123: [82..84]
 r124: [66..68]
 r125: [28..30]
 r126: [9..11]
 r127: [12..27]
Compressing live ranges: from 108 to 72 - 66%
Ranges after the compression:
 r59: [68..69]
 r60: [66..67]
 r61: [58..65]
 r62: [62..63]
 r63: [60..61]
 r64: [58..59]
 r65: [48..57]
 r66: [54..55]
 r67: [52..53]
 r68: [50..51]
 r69: [48..49]
 r70: [38..47]
 r71: [44..45]
 r72: [42..43]
 r73: [40..41]
 r74: [38..39]
 r75: [30..37]
 r76: [34..35]
 r77: [32..33]
 r78: [30..31]
 r79: [22..29]
 r80: [26..27]
 r81: [24..25]
 r82: [20..23]
 r84: [14..17]
 r85: [14..15]
 r86: [12..13]
 r87: [8..11]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [70..71]
 r93: [70..71]
 r94: [68..69]
 r95: [66..67]
 r96: [64..65]
 r97: [64..65]
 r98: [62..63]
 r99: [60..61]
 r100: [56..57]
 r101: [54..55]
 r102: [52..53]
 r103: [50..51]
 r104: [46..47]
 r105: [44..45]
 r106: [42..43]
 r107: [40..41]
 r108: [36..37]
 r109: [36..37]
 r110: [34..35]
 r111: [32..33]
 r112: [28..29]
 r113: [28..29]
 r114: [26..27]
 r115: [24..25]
 r116: [18..19]
 r117: [18..19]
 r118: [16..17]
 r119: [16..17]
 r120: [12..13]
 r121: [6..7]
 r123: [56..57]
 r124: [46..47]
 r125: [20..21]
 r126: [8..9]
 r127: [10..19]
	 Assigning to 125 (cl=FLOAT_REGS, orig=83, freq=3, tfirst=125, tfreq=4)...
	   Assign 9 to reload r125 (freq=3)
	Hard reg 9 is preferable by r127 with profit 1
	Hard reg 9 is preferable by r126 with profit 2
	 Assigning to 126 (cl=FLOAT_REGS, orig=88, freq=3, tfirst=125, tfreq=4)...
	   Assign 9 to reload r126 (freq=3)
	Hard reg 9 is preferable by r127 with profit 2
	 Assigning to 127 (cl=FLOAT_REGS, orig=83, freq=2, tfirst=125, tfreq=4)...
	 Assigning to 123 (cl=FLOAT_REGS, orig=66, freq=3, tfirst=123, tfreq=3)...
	   Assign 10 to reload r123 (freq=3)
	 Assigning to 124 (cl=FLOAT_REGS, orig=71, freq=3, tfirst=124, tfreq=3)...
	   Assign 10 to reload r124 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   90: r126:XF=r83:XF
      REG_DEAD r83:XF
   Insn after restoring regs:
   89: r83:XF=r125:XF
      REG_DEAD r125:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 81: point = 0
   Insn 78: point = 0
   Insn 74: point = 1
   Insn 71: point = 3
   Insn 70: point = 4
   Insn 69: point = 4
   Insn 68: point = 5
   Insn 67: point = 7
   Insn 91: point = 8
   Insn 66: point = 10
   Insn 90: point = 11
   Insn 65: point = 13
   Insn 64: point = 14
   Insn 63: point = 14
   Insn 62: point = 15
   Insn 61: point = 16
   Insn 60: point = 17
   Insn 59: point = 19
   Insn 58: point = 21
   Insn 57: point = 22
   Insn 56: point = 23
   Insn 55: point = 25
   Insn 54: point = 26
   Insn 89: point = 27
   Insn 53: point = 29
   Insn 88: point = 30
   Insn 52: point = 32
   Insn 51: point = 34
   Insn 50: point = 35
   Insn 49: point = 37
   Insn 48: point = 38
   Insn 47: point = 40
   Insn 46: point = 41
   Insn 45: point = 42
   Insn 44: point = 44
   Insn 43: point = 46
   Insn 42: point = 47
   Insn 41: point = 49
   Insn 40: point = 50
   Insn 39: point = 52
   Insn 38: point = 53
   Insn 37: point = 54
   Insn 36: point = 56
   Insn 35: point = 58
   Insn 34: point = 59
   Insn 33: point = 61
   Insn 32: point = 62
   Insn 31: point = 64
   Insn 87: point = 65
   Insn 30: point = 67
   Insn 86: point = 68
   Insn 29: point = 69
   Insn 28: point = 70
   Insn 27: point = 72
   Insn 26: point = 74
   Insn 25: point = 75
   Insn 24: point = 77
   Insn 23: point = 78
   Insn 22: point = 80
   Insn 85: point = 81
   Insn 21: point = 83
   Insn 84: point = 84
   Insn 20: point = 85
   Insn 19: point = 86
   Insn 18: point = 88
   Insn 17: point = 90
   Insn 16: point = 91
   Insn 15: point = 93
   Insn 14: point = 94
   Insn 13: point = 96
   Insn 12: point = 97
   Insn 11: point = 98
   Insn 10: point = 100
   Insn 9: point = 101
   Insn 8: point = 103
   Insn 7: point = 104
   Insn 6: point = 106
   Insn 5: point = 107
 r83: [12..27]
Compressing live ranges: from 108 to 2 - 1%
Ranges after the compression:
 r83: [0..1]
  Slot 0 regnos (width = 16):	 83
Changing spilled pseudos to memory in insn #89
Changing spilled pseudos to memory in insn #90

********** Local #3: **********

Reusing alternative 0 for insn #90
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #89
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 9
changing reg in insn 11
changing reg in insn 11
changing reg in insn 19
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 28
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 37
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 45
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 74
changing reg in insn 78
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 70.


_den

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)]
;;  ref usage 	r0={4d,1u} r1={4d,1u} r2={3d} r4={3d} r5={3d} r6={1d,32u} r7={1d,10u} r8={37d,40u} r9={17d,15u} r10={22d,20u} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 298{178d,120u,0e} in 78{76 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:XF 9 st(1) [92])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 6 5 7 2 (set (reg:XF 8 st [93])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:XF 9 st(1) [orig:59 D.5110 ] [59])
        (mult:XF (reg:XF 9 st(1) [92])
            (reg:XF 8 st [93]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [93])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [92])
            (nil))))
(insn 8 7 9 2 (set (reg:XF 8 st [94])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 d+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 9 st(1) [orig:60 D.5110 ] [60])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.5110 ] [59])
            (reg:XF 8 st [94]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [94])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5110 ] [59])
            (nil))))
(insn 10 9 11 2 (set (reg:XF 8 st [95])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 d+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:XF 9 st(1) [orig:61 D.5110 ] [61])
        (mult:XF (reg:XF 9 st(1) [orig:60 D.5110 ] [60])
            (reg:XF 8 st [95]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [95])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5110 ] [60])
            (nil))))
(insn 12 11 13 2 (set (reg:XF 10 st(2) [96])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:XF 8 st [97])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:XF 10 st(2) [orig:62 D.5110 ] [62])
        (mult:XF (reg:XF 10 st(2) [96])
            (reg:XF 8 st [97]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [97])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [96])
            (nil))))
(insn 15 14 16 2 (set (reg:XF 8 st [98])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [0 e+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:XF 10 st(2) [orig:63 D.5110 ] [63])
        (mult:XF (reg:XF 10 st(2) [orig:62 D.5110 ] [62])
            (reg:XF 8 st [98]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [98])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:62 D.5110 ] [62])
            (nil))))
(insn 17 16 18 2 (set (reg:XF 8 st [99])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [0 e+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:XF 8 st [orig:64 D.5110 ] [64])
        (mult:XF (reg:XF 8 st [99])
            (reg:XF 10 st(2) [orig:63 D.5110 ] [63]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [99])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:63 D.5110 ] [63])
            (nil))))
(insn 19 18 20 2 (set (reg:XF 9 st(1) [orig:65 D.5110 ] [65])
        (plus:XF (reg:XF 9 st(1) [orig:61 D.5110 ] [61])
            (reg:XF 8 st [orig:64 D.5110 ] [64]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5110 ] [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.5110 ] [61])
            (nil))))
(insn 20 19 84 2 (set (reg:XF 8 st [100])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 84 20 21 2 (set (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
        (reg:XF 8 st [100])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 21 84 85 2 (set (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
        (plus:XF (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
            (reg:XF 8 st [100]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [100])
        (nil)))
(insn 85 21 22 2 (set (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
        (reg:XF 10 st(2) [orig:66 D.5110 ] [66])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
        (nil)))
(insn 22 85 23 2 (set (reg:XF 8 st [101])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:XF 10 st(2) [orig:67 D.5110 ] [67])
        (mult:XF (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
            (reg:XF 8 st [101]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [101])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:66 D.5110 ] [66])
            (nil))))
(insn 24 23 25 2 (set (reg:XF 8 st [102])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 d+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg:XF 10 st(2) [orig:68 D.5110 ] [68])
        (mult:XF (reg:XF 10 st(2) [orig:67 D.5110 ] [67])
            (reg:XF 8 st [102]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [102])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:67 D.5110 ] [67])
            (nil))))
(insn 26 25 27 2 (set (reg:XF 8 st [103])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:XF 8 st [orig:69 D.5110 ] [69])
        (mult:XF (reg:XF 8 st [103])
            (reg:XF 10 st(2) [orig:68 D.5110 ] [68]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [103])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:68 D.5110 ] [68])
            (nil))))
(insn 28 27 29 2 (set (reg:XF 9 st(1) [orig:70 D.5110 ] [70])
        (minus:XF (reg:XF 9 st(1) [orig:65 D.5110 ] [65])
            (reg:XF 8 st [orig:69 D.5110 ] [69]))) mUtility.c:199 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5110 ] [69])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.5110 ] [65])
            (nil))))
(insn 29 28 86 2 (set (reg:XF 8 st [104])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 86 29 30 2 (set (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
        (reg:XF 8 st [104])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 30 86 87 2 (set (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
        (plus:XF (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
            (reg:XF 8 st [104]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [104])
        (nil)))
(insn 87 30 31 2 (set (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
        (reg:XF 10 st(2) [orig:71 D.5110 ] [71])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
        (nil)))
(insn 31 87 32 2 (set (reg:XF 8 st [105])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 c+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg:XF 10 st(2) [orig:72 D.5110 ] [72])
        (mult:XF (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
            (reg:XF 8 st [105]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [105])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:71 D.5110 ] [71])
            (nil))))
(insn 33 32 34 2 (set (reg:XF 8 st [106])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [0 e+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:XF 10 st(2) [orig:73 D.5110 ] [73])
        (mult:XF (reg:XF 10 st(2) [orig:72 D.5110 ] [72])
            (reg:XF 8 st [106]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [106])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:72 D.5110 ] [72])
            (nil))))
(insn 35 34 36 2 (set (reg:XF 8 st [107])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 36 35 37 2 (set (reg:XF 8 st [orig:74 D.5110 ] [74])
        (mult:XF (reg:XF 8 st [107])
            (reg:XF 10 st(2) [orig:73 D.5110 ] [73]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [107])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:73 D.5110 ] [73])
            (nil))))
(insn 37 36 38 2 (set (reg:XF 9 st(1) [orig:75 D.5110 ] [75])
        (minus:XF (reg:XF 9 st(1) [orig:70 D.5110 ] [70])
            (reg:XF 8 st [orig:74 D.5110 ] [74]))) mUtility.c:199 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.5110 ] [74])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:70 D.5110 ] [70])
            (nil))))
(insn 38 37 39 2 (set (reg:XF 10 st(2) [108])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 39 38 40 2 (set (reg:XF 8 st [109])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 40 39 41 2 (set (reg:XF 10 st(2) [orig:76 D.5110 ] [76])
        (mult:XF (reg:XF 10 st(2) [108])
            (reg:XF 8 st [109]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [109])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [108])
            (nil))))
(insn 41 40 42 2 (set (reg:XF 8 st [110])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:XF 10 st(2) [orig:77 D.5110 ] [77])
        (mult:XF (reg:XF 10 st(2) [orig:76 D.5110 ] [76])
            (reg:XF 8 st [110]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [110])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:76 D.5110 ] [76])
            (nil))))
(insn 43 42 44 2 (set (reg:XF 8 st [111])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:XF 8 st [orig:78 D.5110 ] [78])
        (mult:XF (reg:XF 8 st [111])
            (reg:XF 10 st(2) [orig:77 D.5110 ] [77]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [111])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:77 D.5110 ] [77])
            (nil))))
(insn 45 44 46 2 (set (reg:XF 9 st(1) [orig:79 D.5110 ] [79])
        (plus:XF (reg:XF 9 st(1) [orig:75 D.5110 ] [75])
            (reg:XF 8 st [orig:78 D.5110 ] [78]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.5110 ] [78])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:75 D.5110 ] [75])
            (nil))))
(insn 46 45 47 2 (set (reg:XF 10 st(2) [112])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 47 46 48 2 (set (reg:XF 8 st [113])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 48 47 49 2 (set (reg:XF 10 st(2) [orig:80 D.5110 ] [80])
        (mult:XF (reg:XF 10 st(2) [112])
            (reg:XF 8 st [113]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [113])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [112])
            (nil))))
(insn 49 48 50 2 (set (reg:XF 8 st [114])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (reg:XF 10 st(2) [orig:81 D.5110 ] [81])
        (mult:XF (reg:XF 10 st(2) [orig:80 D.5110 ] [80])
            (reg:XF 8 st [114]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [114])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:80 D.5110 ] [80])
            (nil))))
(insn 51 50 52 2 (set (reg:XF 8 st [115])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 96 [0x60])) [0 f+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 52 51 88 2 (set (reg:XF 8 st [orig:82 D.5110 ] [82])
        (mult:XF (reg:XF 8 st [115])
            (reg:XF 10 st(2) [orig:81 D.5110 ] [81]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [115])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:81 D.5110 ] [81])
            (nil))))
(insn 88 52 53 2 (set (reg:XF 9 st(1) [orig:83 D.5110 ] [83])
        (reg:XF 9 st(1) [orig:79 D.5110 ] [79])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:79 D.5110 ] [79])
        (nil)))
(insn 53 88 89 2 (set (reg:XF 9 st(1) [orig:83 D.5110 ] [83])
        (plus:XF (reg:XF 9 st(1) [orig:83 D.5110 ] [83])
            (reg:XF 8 st [orig:82 D.5110 ] [82]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.5110 ] [82])
        (nil)))
(insn 89 53 92 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])
        (reg:XF 9 st(1) [orig:83 D.5110 ] [83])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:83 D.5110 ] [83])
        (nil)))
(note 92 89 54 2 NOTE_INSN_DELETED)
(insn 54 92 55 2 (set (reg:XF 9 st(1) [116])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 b+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (reg:XF 8 st [117])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 d+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (reg:XF 9 st(1) [orig:84 D.5110 ] [84])
        (mult:XF (reg:XF 9 st(1) [116])
            (reg:XF 8 st [117]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [117])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [116])
            (nil))))
(insn 57 56 58 2 (set (reg:XF 10 st(2) [118])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 a+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (reg:XF 8 st [119])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [0 e+0 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (reg:XF 8 st [orig:85 D.5110 ] [85])
        (mult:XF (reg:XF 8 st [119])
            (reg:XF 10 st(2) [118]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [119])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [118])
            (nil))))
(insn 60 59 61 2 (set (reg:XF 8 st [orig:86 D.5110 ] [86])
        (minus:XF (reg:XF 9 st(1) [orig:84 D.5110 ] [84])
            (reg:XF 8 st [orig:85 D.5110 ] [85]))) mUtility.c:199 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.5110 ] [85])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:84 D.5110 ] [84])
            (nil))))
(insn 61 60 62 2 (set (reg:XF 0 ax [120])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (nil))
(insn 62 61 63 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [120])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [120])
        (nil)))
(insn 63 62 64 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:86 D.5110 ] [86])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5110 ] [86])
        (nil)))
(call_insn 64 63 65 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("powl") [flags 0x41]  <function_decl 0x7f4452d6c000 powl>) [0 __builtin_powl S1 A8])
            (const_int 32 [0x20]))) mUtility.c:199 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 65 64 90 2 (set (reg:XF 8 st [orig:87 D.5110 ] [87])
        (reg:XF 8 st)) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 90 65 66 2 (set (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 %sfp+-16 S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 83 [ D.5110 ])
        (nil)))
(insn 66 90 91 2 (set (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
        (div:XF (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
            (reg:XF 8 st [orig:87 D.5110 ] [87]))) mUtility.c:199 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:87 D.5110 ] [87])
        (nil)))
(insn 91 66 67 2 (set (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
        (reg:XF 9 st(1) [orig:88 D.5110 ] [88])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
        (nil)))
(insn 67 91 68 2 (set (reg:XF 8 st [121])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S16 A128])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 68 67 69 2 (set (reg:XF 8 st [orig:89 D.5110 ] [89])
        (plus:XF (reg:XF 8 st [121])
            (reg:XF 9 st(1) [orig:88 D.5110 ] [88]))) mUtility.c:199 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [121])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:88 D.5110 ] [88])
            (nil))))
(insn 69 68 70 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:89 D.5110 ] [89])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5110 ] [89])
        (nil)))
(call_insn 70 69 71 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sqrtl") [flags 0x41]  <function_decl 0x7f4452d75400 sqrtl>) [0 __builtin_sqrtl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:199 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 71 70 74 2 (set (reg:XF 8 st [orig:90 D.5110 ] [90])
        (reg:XF 8 st)) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 74 71 78 2 (set (reg:XF 8 st [orig:91 <retval> ] [91])
        (reg:XF 8 st [orig:90 D.5110 ] [90])) mUtility.c:199 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5110 ] [90])
        (nil)))
(insn 78 74 81 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:91 <retval> ] [91])) mUtility.c:200 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:91 <retval> ] [91])
        (nil)))
(insn 81 78 0 2 (use (reg/i:XF 8 st)) mUtility.c:200 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _maxim (_maxim, funcdef_no=22, decl_uid=4006, cgraph_uid=22)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=81, assigning class NO_REGS to secondary r81
   50: r81:XF=r69:XF
      REG_DEAD r69:XF
    Inserting the sec. move after:
   65: r70:XF=r81:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 57: point = 0
   Insn 54: point = 0
   Insn 65: point = 1
	Hard reg 8 is preferable by r81 with profit 1
   Insn 50: point = 3
	Hard reg 8 is preferable by r81 with profit 1
	Hard reg 0 is preferable by r81 with profit 1
   Insn 47: point = 5
  BB 6
   Insn 45: point = 6
   Insn 44: point = 6
   Insn 43: point = 7
  BB 2
   Insn 63: point = 8
   Insn 11: point = 8
   Insn 10: point = 9
   Insn 9: point = 11
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 3: point = 14
   Insn 2: point = 14
  BB 5
   Insn 39: point = 14
  BB 4
   Insn 36: point = 14
   Insn 35: point = 15
   Insn 34: point = 17
   Insn 33: point = 19
   Insn 32: point = 21
   Insn 31: point = 22
   Insn 30: point = 24
   Insn 29: point = 26
  BB 3
   Insn 24: point = 27
   Insn 23: point = 27
   Insn 22: point = 28
   Insn 21: point = 29
   Insn 20: point = 31
   Insn 19: point = 33
   Insn 18: point = 35
   Insn 17: point = 36
   Insn 16: point = 38
   Insn 15: point = 40
 r59: [10..11]
 r60: [37..38]
 r61: [34..36]
 r62: [32..33]
 r63: [30..31]
 r64: [27..29]
 r65: [23..24]
 r66: [20..22]
 r67: [18..19]
 r68: [16..17]
 r69: [4..5]
 r70: [0..1]
 r71: [12..13]
 r72: [8..9]
 r73: [39..40]
 r74: [34..35]
 r75: [27..28]
 r76: [25..26]
 r77: [20..21]
 r78: [14..15]
 r79: [6..7]
 r81: [2..3]
Compressing live ranges: from 41 to 38 - 92%
Ranges after the compression:
 r59: [10..11]
 r60: [34..35]
 r61: [32..33]
 r62: [30..31]
 r63: [28..29]
 r64: [26..27]
 r65: [22..23]
 r66: [20..21]
 r67: [18..19]
 r68: [16..17]
 r69: [4..5]
 r70: [0..1]
 r71: [12..13]
 r72: [8..9]
 r73: [36..37]
 r74: [32..33]
 r75: [26..27]
 r76: [24..25]
 r77: [20..21]
 r78: [14..15]
 r79: [6..7]
 r81: [2..3]

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 16):	 81
Changing spilled pseudos to memory in insn #50
Changing spilled pseudos to memory in insn #65

********** Local #3: **********

Reusing alternative 0 for insn #65
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 47
changing reg in insn 50
changing reg in insn 54
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 43
changing reg in insn 44
starting the processing of deferred insns
ending the processing of deferred insns


_maxim

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={17d,16u} r1={6d,5u,2e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,25u} r7={1d,7u} r8={3d,4u} r9={1d,1u} r17={7d,2u} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 117{50d,63u,4e} in 35{35 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 71 72
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])
        (reg:DI 5 di [ poly ])) mUtility.c:203 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ poly ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mUtility.c:203 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mUtility.c:206 89 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:59 D.5111 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [71]) [0 *poly_5(D)+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [71])
        (nil)))
(insn 10 9 11 2 (set (reg:XF 0 ax [72])
        (mem:XF (reg/f:DI 0 ax [orig:59 D.5111 ] [59]) [0 *_6+0 S16 A128])) mUtility.c:206 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.5111 ] [59])
        (nil)))
(insn 11 10 63 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])
        (reg:XF 0 ax [72])) mUtility.c:206 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [72])
        (nil)))
(jump_insn 63 11 64 2 (set (pc)
        (label_ref 40)) mUtility.c:206 650 {jump}
     (nil)
 -> 40)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 64 63 42)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 73 74 75
(code_label 42 64 14 3 68 "" [1 uses])
(note 14 42 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:206 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 0 ax [orig:60 D.5112 ] [60])
        (sign_extend:DI (reg:SI 0 ax [73]))) mUtility.c:206 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [73])
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:61 D.5112 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:60 D.5112 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:206 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5112 ] [60])
        (nil)))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5113 ] [62])
                (plus:DI (reg/f:DI 0 ax [74])
                    (reg:DI 1 dx [orig:61 D.5112 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:206 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5112 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.5112 ] [61]))
                (nil)))))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [orig:63 D.5111 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.5113 ] [62]) [0 *_11+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5113 ] [62])
        (nil)))
(insn 21 20 22 3 (set (reg:XF 9 st(1) [orig:64 D.5114 ] [64])
        (mem:XF (reg/f:DI 0 ax [orig:63 D.5111 ] [63]) [0 *_12+0 S16 A128])) mUtility.c:206 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.5111 ] [63])
        (nil)))
(insn 22 21 23 3 (set (reg:XF 8 st [75])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])) mUtility.c:206 131 {*movxf_internal_rex64}
     (nil))
(insn 23 22 24 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:64 D.5114 ] [64])
            (reg:XF 8 st [75]))) mUtility.c:206 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [75])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:64 D.5114 ] [64])
            (nil))))
(jump_insn 24 23 28 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 37)
            (pc))) mUtility.c:206 612 {*jcc_1}
     (nil)
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 76 77 78
(note 28 24 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 0 ax [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:206 89 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 0 ax [orig:65 D.5112 ] [65])
        (sign_extend:DI (reg:SI 0 ax [76]))) mUtility.c:206 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [76])
        (nil)))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 1 dx [orig:66 D.5112 ] [66])
                (ashift:DI (reg:DI 0 ax [orig:65 D.5112 ] [65])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:206 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5112 ] [65])
        (nil)))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 0 ax [orig:67 D.5113 ] [67])
                (plus:DI (reg/f:DI 0 ax [77])
                    (reg:DI 1 dx [orig:66 D.5112 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:206 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:66 D.5112 ] [66])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 poly+0 S8 A64])
                    (reg:DI 1 dx [orig:66 D.5112 ] [66]))
                (nil)))))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [orig:68 D.5111 ] [68])
        (mem/f:DI (reg/f:DI 0 ax [orig:67 D.5113 ] [67]) [0 *_16+0 S8 A64])) mUtility.c:206 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.5113 ] [67])
        (nil)))
(insn 35 34 36 4 (set (reg:XF 0 ax [78])
        (mem:XF (reg/f:DI 0 ax [orig:68 D.5111 ] [68]) [0 *_17+0 S16 A128])) mUtility.c:206 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.5111 ] [68])
        (nil)))
(insn 36 35 37 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])
        (reg:XF 0 ax [78])) mUtility.c:206 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [78])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 37 36 38 5 66 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:206 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79
(code_label 40 39 41 6 65 "" [1 uses])
(note 41 40 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 44 6 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mUtility.c:206 89 {*movsi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [79])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 N+0 S4 A32]))) mUtility.c:206 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) mUtility.c:206 612 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 8 [st] 69 70
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 50 7 (set (reg:XF 0 ax [orig:69 D.5114 ] [69])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+0 S16 A128])) mUtility.c:208 131 {*movxf_internal_rex64}
     (nil))
(insn 50 47 65 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])
        (reg:XF 0 ax [orig:69 D.5114 ] [69])) mUtility.c:208 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:69 D.5114 ] [69])
        (nil)))
(insn 65 50 54 7 (set (reg:XF 8 st [orig:70 <retval> ] [70])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-64 S16 A128])) mUtility.c:208 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 81)
        (nil)))
(insn 54 65 57 7 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:70 <retval> ] [70])) mUtility.c:209 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 <retval> ] [70])
        (nil)))
(insn 57 54 0 7 (use (reg/i:XF 8 st)) mUtility.c:209 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function find_intersection (find_intersection, funcdef_no=23, decl_uid=1762, cgraph_uid=23)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 32:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 40:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 49:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 57:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 65:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 74:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 98:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 108:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 124:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 143:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 150:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 156:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=206 from oldreg=110, assigning class FLOAT_REGS to r206
  156: r206:XF=-r206:XF
      REG_DEAD r109:XF
    Inserting insn reload before:
  259: r206:XF=r109:XF
    Inserting insn reload after:
  260: r110:XF=r206:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 162:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 169:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 175:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=207 from oldreg=119, assigning class FLOAT_REGS to r207
  175: r207:XF=-r207:XF
      REG_DEAD r118:XF
    Inserting insn reload before:
  261: r207:XF=r118:XF
    Inserting insn reload after:
  262: r119:XF=r207:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 180:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 197:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 201:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 202:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 213:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=208 from oldreg=128, assigning class FLOAT_REGS to r208
  213: flags:CCFPU=cmp(r208:XF,r129:XF)
      REG_DEAD r129:XF
      REG_DEAD r128:XF
    Inserting insn reload before:
  263: r208:XF=r128:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 221:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 223:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 229:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 231:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 234:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=209 from oldreg=128, assigning class FLOAT_REGS to inheritance r209
    Original reg change 128->209 (bb6):
  206: r209:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  264: r128:XF=r209:XF

    Inheritance reuse change 128->209 (bb6):
  263: r208:XF=r209:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   264: r128:XF=r209:XF
deleting insn with uid = 264.
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 247: point = 0
   Insn 244: point = 0
   Insn 240: point = 1
   Insn 237: point = 3
  BB 7
   Insn 234: point = 4
   Insn 233: point = 5
   Insn 232: point = 7
   Insn 231: point = 8
   Insn 230: point = 10
   Insn 229: point = 11
   Insn 228: point = 12
   Insn 227: point = 14
   Insn 226: point = 15
   Insn 225: point = 16
   Insn 224: point = 18
   Insn 223: point = 19
   Insn 222: point = 21
   Insn 221: point = 22
   Insn 220: point = 23
   Insn 219: point = 25
  BB 6
   Insn 214: point = 26
   Insn 213: point = 26
   Insn 263: point = 27
	   Creating copy r208<-r209@1
   Insn 212: point = 29
   Insn 211: point = 30
   Insn 210: point = 30
   Insn 209: point = 31
   Insn 208: point = 32
   Insn 207: point = 33
   Insn 206: point = 34
	Hard reg 8 is preferable by r209 with profit 1
   Insn 205: point = 35
   Insn 204: point = 35
   Insn 203: point = 36
   Insn 202: point = 37
   Insn 201: point = 38
   Insn 200: point = 39
   Insn 199: point = 39
   Insn 198: point = 40
   Insn 197: point = 41
   Insn 196: point = 42
   Insn 195: point = 44
   Insn 194: point = 45
   Insn 193: point = 45
   Insn 192: point = 46
   Insn 191: point = 47
   Insn 190: point = 48
   Insn 189: point = 49
   Insn 188: point = 50
   Insn 187: point = 52
   Insn 186: point = 53
   Insn 185: point = 54
   Insn 184: point = 56
   Insn 183: point = 57
   Insn 182: point = 58
   Insn 181: point = 60
   Insn 180: point = 61
   Insn 179: point = 62
   Insn 178: point = 63
   Insn 177: point = 64
   Insn 176: point = 66
   Insn 262: point = 67
	Hard reg 9 is preferable by r207 with profit 1
   Insn 175: point = 69
   Insn 261: point = 69
	Hard reg 9 is preferable by r207 with profit 1
	Hard reg 8 is preferable by r207 with profit 1
   Insn 174: point = 71
   Insn 173: point = 73
   Insn 172: point = 75
   Insn 171: point = 77
   Insn 170: point = 78
   Insn 169: point = 79
   Insn 168: point = 81
   Insn 167: point = 82
   Insn 166: point = 83
   Insn 165: point = 85
   Insn 164: point = 87
   Insn 163: point = 88
   Insn 162: point = 89
   Insn 161: point = 91
   Insn 160: point = 92
   Insn 159: point = 93
   Insn 158: point = 94
   Insn 157: point = 96
   Insn 260: point = 97
	Hard reg 9 is preferable by r206 with profit 1
   Insn 156: point = 99
   Insn 259: point = 99
	Hard reg 9 is preferable by r206 with profit 1
	Hard reg 8 is preferable by r206 with profit 1
   Insn 155: point = 101
   Insn 154: point = 103
   Insn 153: point = 105
   Insn 152: point = 107
   Insn 151: point = 108
   Insn 150: point = 109
   Insn 149: point = 111
   Insn 148: point = 112
   Insn 147: point = 113
   Insn 146: point = 115
   Insn 145: point = 117
   Insn 144: point = 118
   Insn 143: point = 119
   Insn 142: point = 121
   Insn 141: point = 122
  BB 5
   Insn 138: point = 123
   Insn 137: point = 123
  BB 4
   Insn 132: point = 123
   Insn 131: point = 123
   Insn 130: point = 124
   Insn 129: point = 125
   Insn 128: point = 127
   Insn 127: point = 129
   Insn 126: point = 131
   Insn 125: point = 132
   Insn 124: point = 133
   Insn 123: point = 135
   Insn 122: point = 136
  BB 3
   Insn 119: point = 137
   Insn 118: point = 137
  BB 2
   Insn 113: point = 137
   Insn 112: point = 137
   Insn 111: point = 138
   Insn 110: point = 139
   Insn 109: point = 140
   Insn 108: point = 140
   Insn 107: point = 141
   Insn 106: point = 142
   Insn 105: point = 143
   Insn 104: point = 144
   Insn 103: point = 145
   Insn 102: point = 146
   Insn 101: point = 147
   Insn 100: point = 148
   Insn 99: point = 149
   Insn 98: point = 150
   Insn 97: point = 151
   Insn 96: point = 152
   Insn 95: point = 153
   Insn 94: point = 155
   Insn 93: point = 156
   Insn 92: point = 157
   Insn 91: point = 157
   Insn 90: point = 158
   Insn 89: point = 159
   Insn 88: point = 160
   Insn 87: point = 161
   Insn 86: point = 162
   Insn 85: point = 163
   Insn 84: point = 164
   Insn 83: point = 165
   Insn 82: point = 166
   Insn 81: point = 167
   Insn 80: point = 168
   Insn 79: point = 169
   Insn 78: point = 170
   Insn 77: point = 172
   Insn 76: point = 174
   Insn 75: point = 175
   Insn 74: point = 176
   Insn 73: point = 178
   Insn 72: point = 179
   Insn 71: point = 180
   Insn 70: point = 181
   Insn 69: point = 183
   Insn 68: point = 185
   Insn 67: point = 187
   Insn 66: point = 188
   Insn 65: point = 189
   Insn 64: point = 191
   Insn 63: point = 192
   Insn 62: point = 193
   Insn 61: point = 194
   Insn 60: point = 196
   Insn 59: point = 198
   Insn 58: point = 199
   Insn 57: point = 200
   Insn 56: point = 202
   Insn 55: point = 203
   Insn 54: point = 204
   Insn 53: point = 205
   Insn 52: point = 207
   Insn 51: point = 209
   Insn 50: point = 210
   Insn 49: point = 211
   Insn 48: point = 213
   Insn 47: point = 214
   Insn 46: point = 215
   Insn 45: point = 216
   Insn 44: point = 218
   Insn 43: point = 220
   Insn 42: point = 222
   Insn 41: point = 223
   Insn 40: point = 224
   Insn 39: point = 226
   Insn 38: point = 227
   Insn 37: point = 228
   Insn 36: point = 229
   Insn 35: point = 231
   Insn 34: point = 233
   Insn 33: point = 234
   Insn 32: point = 235
   Insn 31: point = 237
   Insn 30: point = 238
   Insn 29: point = 239
   Insn 28: point = 239
   Insn 27: point = 240
   Insn 26: point = 241
   Insn 25: point = 242
   Insn 24: point = 243
   Insn 23: point = 243
   Insn 22: point = 244
   Insn 21: point = 245
   Insn 20: point = 246
   Insn 19: point = 247
   Insn 18: point = 247
   Insn 17: point = 248
   Insn 16: point = 249
   Insn 15: point = 250
   Insn 14: point = 251
   Insn 13: point = 251
   Insn 12: point = 252
   Insn 11: point = 253
   Insn 10: point = 254
   Insn 6: point = 255
   Insn 5: point = 255
   Insn 4: point = 255
   Insn 3: point = 255
   Insn 2: point = 255
 r59: [236..238]
 r60: [236..237]
 r61: [230..235]
 r62: [232..234]
 r63: [232..233]
 r64: [230..231]
 r65: [225..227]
 r66: [225..226]
 r67: [219..224]
 r68: [221..223]
 r69: [221..222]
 r70: [219..220]
 r71: [217..218]
 r72: [212..214]
 r73: [212..213]
 r74: [206..211]
 r75: [208..210]
 r76: [208..209]
 r77: [206..207]
 r78: [201..203]
 r79: [201..202]
 r80: [195..200]
 r81: [197..199]
 r82: [197..198]
 r83: [195..196]
 r84: [190..192]
 r85: [190..191]
 r86: [184..189]
 r87: [186..188]
 r88: [186..187]
 r89: [184..185]
 r90: [182..183]
 r91: [177..179]
 r92: [177..178]
 r93: [171..176]
 r94: [173..175]
 r95: [173..174]
 r96: [171..172]
 r97: [154..156]
 r98: [137..139]
 r99: [128..133]
 r100: [128..129]
 r101: [126..127]
 r102: [123..125]
 r103: [114..119]
 r104: [114..115]
 r105: [102..113]
 r106: [104..109]
 r107: [104..105]
 r108: [102..103]
 r109: [100..101]
 r110: [95..97]
 r111: [93..94]
 r112: [84..89]
 r113: [84..85]
 r114: [72..83]
 r115: [74..79]
 r116: [74..75]
 r117: [72..73]
 r118: [70..71]
 r119: [65..67]
 r120: [63..64]
 r121: [59..60]
 r122: [57..58]
 r123: [55..56]
 r124: [53..54]
 r125: [51..52]
 r126: [49..50]
 r127: [40..42]
 r129: [26..29]
 r130: [15..19]
 r131: [15..16]
 r132: [4..8]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [252..254]
 r137: [251..253]
 r138: [248..250]
 r139: [247..249]
 r140: [244..246]
 r141: [243..245]
 r142: [240..242]
 r143: [239..241]
 r144: [228..229]
 r145: [215..216]
 r146: [204..205]
 r147: [193..194]
 r148: [180..181]
 r149: [169..170]
 r150: [167..168]
 r151: [165..166]
 r152: [163..164]
 r153: [161..162]
 r154: [159..160]
 r155: [157..158]
 r156: [152..153]
 r157: [154..155]
 r158: [150..151]
 r159: [148..149]
 r160: [146..147]
 r161: [144..145]
 r162: [142..143]
 r163: [140..141]
 r164: [137..138]
 r165: [134..136]
 r166: [134..135]
 r167: [130..132]
 r168: [130..131]
 r169: [123..124]
 r170: [120..122]
 r171: [120..121]
 r172: [116..118]
 r173: [116..117]
 r174: [110..112]
 r175: [110..111]
 r176: [106..108]
 r177: [106..107]
 r178: [95..96]
 r179: [90..92]
 r180: [90..91]
 r181: [86..88]
 r182: [86..87]
 r183: [80..82]
 r184: [80..81]
 r185: [76..78]
 r186: [76..77]
 r187: [65..66]
 r188: [61..62]
 r189: [46..48]
 r190: [45..47]
 r191: [43..44]
 r192: [39..41]
 r193: [36..38]
 r194: [35..37]
 r195: [31..33]
 r196: [30..32]
 r197: [24..25]
 r198: [22..23]
 r199: [20..21]
 r200: [17..18]
 r201: [13..14]
 r202: [11..12]
 r203: [9..10]
 r204: [6..7]
 r206: [98..99]
 r207: [68..69]
 r208: [26..27]
 r209: [28..34]
Compressing live ranges: from 255 to 196 - 76%
Ranges after the compression:
 r59: [186..187]
 r60: [186..187]
 r61: [182..185]
 r62: [184..185]
 r63: [184..185]
 r64: [182..183]
 r65: [178..179]
 r66: [178..179]
 r67: [174..177]
 r68: [176..177]
 r69: [176..177]
 r70: [174..175]
 r71: [172..173]
 r72: [168..169]
 r73: [168..169]
 r74: [164..167]
 r75: [166..167]
 r76: [166..167]
 r77: [164..165]
 r78: [160..161]
 r79: [160..161]
 r80: [156..159]
 r81: [158..159]
 r82: [158..159]
 r83: [156..157]
 r84: [152..153]
 r85: [152..153]
 r86: [148..151]
 r87: [150..151]
 r88: [150..151]
 r89: [148..149]
 r90: [146..147]
 r91: [142..143]
 r92: [142..143]
 r93: [138..141]
 r94: [140..141]
 r95: [140..141]
 r96: [138..139]
 r97: [122..123]
 r98: [106..107]
 r99: [100..103]
 r100: [100..101]
 r101: [98..99]
 r102: [96..97]
 r103: [90..93]
 r104: [90..91]
 r105: [82..89]
 r106: [84..87]
 r107: [84..85]
 r108: [82..83]
 r109: [80..81]
 r110: [76..77]
 r111: [74..75]
 r112: [68..71]
 r113: [68..69]
 r114: [60..67]
 r115: [62..65]
 r116: [62..63]
 r117: [60..61]
 r118: [58..59]
 r119: [54..55]
 r120: [52..53]
 r121: [48..49]
 r122: [46..47]
 r123: [44..45]
 r124: [42..43]
 r125: [40..41]
 r126: [38..39]
 r127: [32..33]
 r129: [24..27]
 r130: [14..17]
 r131: [14..15]
 r132: [4..7]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [194..195]
 r137: [194..195]
 r138: [192..193]
 r139: [192..193]
 r140: [190..191]
 r141: [190..191]
 r142: [188..189]
 r143: [188..189]
 r144: [180..181]
 r145: [170..171]
 r146: [162..163]
 r147: [154..155]
 r148: [144..145]
 r149: [136..137]
 r150: [134..135]
 r151: [132..133]
 r152: [130..131]
 r153: [128..129]
 r154: [126..127]
 r155: [124..125]
 r156: [120..121]
 r157: [122..123]
 r158: [118..119]
 r159: [116..117]
 r160: [114..115]
 r161: [112..113]
 r162: [110..111]
 r163: [108..109]
 r164: [106..107]
 r165: [104..105]
 r166: [104..105]
 r167: [102..103]
 r168: [102..103]
 r169: [96..97]
 r170: [94..95]
 r171: [94..95]
 r172: [92..93]
 r173: [92..93]
 r174: [88..89]
 r175: [88..89]
 r176: [86..87]
 r177: [86..87]
 r178: [76..77]
 r179: [72..73]
 r180: [72..73]
 r181: [70..71]
 r182: [70..71]
 r183: [66..67]
 r184: [66..67]
 r185: [64..65]
 r186: [64..65]
 r187: [54..55]
 r188: [50..51]
 r189: [36..37]
 r190: [36..37]
 r191: [34..35]
 r192: [32..33]
 r193: [30..31]
 r194: [30..31]
 r195: [28..29]
 r196: [28..29]
 r197: [22..23]
 r198: [20..21]
 r199: [18..19]
 r200: [16..17]
 r201: [12..13]
 r202: [10..11]
 r203: [8..9]
 r204: [6..7]
 r206: [78..79]
 r207: [56..57]
 r208: [24..25]
 r209: [26..29]
	 Assigning to 206 (cl=FLOAT_REGS, orig=110, freq=3, tfirst=206, tfreq=3)...
	   Assign 9 to reload r206 (freq=3)
	 Assigning to 207 (cl=FLOAT_REGS, orig=119, freq=3, tfirst=207, tfreq=3)...
	   Assign 9 to reload r207 (freq=3)
	 Assigning to 208 (cl=FLOAT_REGS, orig=128, freq=2, tfirst=208, tfreq=2)...
	   Assign 12 to reload r208 (freq=2)
	Hard reg 8 is preferable by r209 with profit 1
	Hard reg 12 is preferable by r209 with profit 1
	 Assigning to 209 (cl=FLOAT_REGS, orig=128, freq=2, tfirst=208, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  263: r208:XF=r128:XF
      REG_DEAD r128:XF
   Insn after restoring regs:
  206: r128:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 8
   Insn 247: point = 0
   Insn 244: point = 0
   Insn 240: point = 1
   Insn 237: point = 3
  BB 7
   Insn 234: point = 4
   Insn 233: point = 5
   Insn 232: point = 7
   Insn 231: point = 8
   Insn 230: point = 10
   Insn 229: point = 11
   Insn 228: point = 12
   Insn 227: point = 14
   Insn 226: point = 15
   Insn 225: point = 16
   Insn 224: point = 18
   Insn 223: point = 19
   Insn 222: point = 21
   Insn 221: point = 22
   Insn 220: point = 23
   Insn 219: point = 25
  BB 6
   Insn 214: point = 26
   Insn 213: point = 26
   Insn 263: point = 27
   Insn 212: point = 29
   Insn 211: point = 30
   Insn 210: point = 30
   Insn 209: point = 31
   Insn 208: point = 32
   Insn 207: point = 33
   Insn 206: point = 34
   Insn 205: point = 35
   Insn 204: point = 35
   Insn 203: point = 36
   Insn 202: point = 37
   Insn 201: point = 38
   Insn 200: point = 39
   Insn 199: point = 39
   Insn 198: point = 40
   Insn 197: point = 41
   Insn 196: point = 42
   Insn 195: point = 44
   Insn 194: point = 45
   Insn 193: point = 45
   Insn 192: point = 46
   Insn 191: point = 47
   Insn 190: point = 48
   Insn 189: point = 49
   Insn 188: point = 50
   Insn 187: point = 52
   Insn 186: point = 53
   Insn 185: point = 54
   Insn 184: point = 56
   Insn 183: point = 57
   Insn 182: point = 58
   Insn 181: point = 60
   Insn 180: point = 61
   Insn 179: point = 62
   Insn 178: point = 63
   Insn 177: point = 64
   Insn 176: point = 66
   Insn 262: point = 67
   Insn 175: point = 69
   Insn 261: point = 69
   Insn 174: point = 71
   Insn 173: point = 73
   Insn 172: point = 75
   Insn 171: point = 77
   Insn 170: point = 78
   Insn 169: point = 79
   Insn 168: point = 81
   Insn 167: point = 82
   Insn 166: point = 83
   Insn 165: point = 85
   Insn 164: point = 87
   Insn 163: point = 88
   Insn 162: point = 89
   Insn 161: point = 91
   Insn 160: point = 92
   Insn 159: point = 93
   Insn 158: point = 94
   Insn 157: point = 96
   Insn 260: point = 97
   Insn 156: point = 99
   Insn 259: point = 99
   Insn 155: point = 101
   Insn 154: point = 103
   Insn 153: point = 105
   Insn 152: point = 107
   Insn 151: point = 108
   Insn 150: point = 109
   Insn 149: point = 111
   Insn 148: point = 112
   Insn 147: point = 113
   Insn 146: point = 115
   Insn 145: point = 117
   Insn 144: point = 118
   Insn 143: point = 119
   Insn 142: point = 121
   Insn 141: point = 122
  BB 5
   Insn 138: point = 123
   Insn 137: point = 123
  BB 4
   Insn 132: point = 123
   Insn 131: point = 123
   Insn 130: point = 124
   Insn 129: point = 125
   Insn 128: point = 127
   Insn 127: point = 129
   Insn 126: point = 131
   Insn 125: point = 132
   Insn 124: point = 133
   Insn 123: point = 135
   Insn 122: point = 136
  BB 3
   Insn 119: point = 137
   Insn 118: point = 137
  BB 2
   Insn 113: point = 137
   Insn 112: point = 137
   Insn 111: point = 138
   Insn 110: point = 139
   Insn 109: point = 140
   Insn 108: point = 140
   Insn 107: point = 141
   Insn 106: point = 142
   Insn 105: point = 143
   Insn 104: point = 144
   Insn 103: point = 145
   Insn 102: point = 146
   Insn 101: point = 147
   Insn 100: point = 148
   Insn 99: point = 149
   Insn 98: point = 150
   Insn 97: point = 151
   Insn 96: point = 152
   Insn 95: point = 153
   Insn 94: point = 155
   Insn 93: point = 156
   Insn 92: point = 157
   Insn 91: point = 157
   Insn 90: point = 158
   Insn 89: point = 159
   Insn 88: point = 160
   Insn 87: point = 161
   Insn 86: point = 162
   Insn 85: point = 163
   Insn 84: point = 164
   Insn 83: point = 165
   Insn 82: point = 166
   Insn 81: point = 167
   Insn 80: point = 168
   Insn 79: point = 169
   Insn 78: point = 170
   Insn 77: point = 172
   Insn 76: point = 174
   Insn 75: point = 175
   Insn 74: point = 176
   Insn 73: point = 178
   Insn 72: point = 179
   Insn 71: point = 180
   Insn 70: point = 181
   Insn 69: point = 183
   Insn 68: point = 185
   Insn 67: point = 187
   Insn 66: point = 188
   Insn 65: point = 189
   Insn 64: point = 191
   Insn 63: point = 192
   Insn 62: point = 193
   Insn 61: point = 194
   Insn 60: point = 196
   Insn 59: point = 198
   Insn 58: point = 199
   Insn 57: point = 200
   Insn 56: point = 202
   Insn 55: point = 203
   Insn 54: point = 204
   Insn 53: point = 205
   Insn 52: point = 207
   Insn 51: point = 209
   Insn 50: point = 210
   Insn 49: point = 211
   Insn 48: point = 213
   Insn 47: point = 214
   Insn 46: point = 215
   Insn 45: point = 216
   Insn 44: point = 218
   Insn 43: point = 220
   Insn 42: point = 222
   Insn 41: point = 223
   Insn 40: point = 224
   Insn 39: point = 226
   Insn 38: point = 227
   Insn 37: point = 228
   Insn 36: point = 229
   Insn 35: point = 231
   Insn 34: point = 233
   Insn 33: point = 234
   Insn 32: point = 235
   Insn 31: point = 237
   Insn 30: point = 238
   Insn 29: point = 239
   Insn 28: point = 239
   Insn 27: point = 240
   Insn 26: point = 241
   Insn 25: point = 242
   Insn 24: point = 243
   Insn 23: point = 243
   Insn 22: point = 244
   Insn 21: point = 245
   Insn 20: point = 246
   Insn 19: point = 247
   Insn 18: point = 247
   Insn 17: point = 248
   Insn 16: point = 249
   Insn 15: point = 250
   Insn 14: point = 251
   Insn 13: point = 251
   Insn 12: point = 252
   Insn 11: point = 253
   Insn 10: point = 254
   Insn 6: point = 255
   Insn 5: point = 255
   Insn 4: point = 255
   Insn 3: point = 255
   Insn 2: point = 255
 r128: [28..34]
Compressing live ranges: from 255 to 2 - 0%
Ranges after the compression:
 r128: [0..1]
  Slot 0 regnos (width = 16):	 128
Changing spilled pseudos to memory in insn #206
Changing spilled pseudos to memory in insn #263

********** Local #3: **********

Reusing alternative 0 for insn #263
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #206
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=592, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=576, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 36
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 44
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 53
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 61
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 69
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 78
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 93
changing reg in insn 95
changing reg in insn 110
changing reg in insn 112
changing reg in insn 124
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 143
changing reg in insn 147
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 155
changing reg in insn 150
changing reg in insn 154
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 166
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 174
changing reg in insn 169
changing reg in insn 173
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 196
changing reg in insn 198
changing reg in insn 212
changing reg in insn 213
changing reg in insn 223
changing reg in insn 226
changing reg in insn 225
changing reg in insn 226
changing reg in insn 231
changing reg in insn 234
changing reg in insn 233
changing reg in insn 234
changing reg in insn 237
changing reg in insn 240
changing reg in insn 240
changing reg in insn 244
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 28
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 62
changing reg in insn 70
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 95
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 112
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 141
changing reg in insn 143
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 150
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 157
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 169
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 176
changing reg in insn 179
changing reg in insn 180
changing reg in insn 190
changing reg in insn 192
changing reg in insn 191
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 201
changing reg in insn 203
changing reg in insn 202
changing reg in insn 204
changing reg in insn 207
changing reg in insn 209
changing reg in insn 208
changing reg in insn 210
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 194.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 205.
verify found no changes in insn with uid = 211.


find_intersection

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 17[flags] 37[r8]
;;  ref usage 	r0={48d,36u} r1={38d,26u} r2={15d,3u} r4={21d,9u} r5={23d,11u} r6={1d,114u} r7={1d,44u} r8={73d,65u} r9={41d,29u} r10={25d,13u} r11={14d,2u} r12={13d,1u} r13={12d} r14={12d} r15={12d} r17={28d,3u} r18={12d} r19={12d} r20={1d,1u,3e} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d,1u} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} 
;;    total ref usage 1109{748d,358u,3e} in 223{211 regular + 12 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [0 p0+0 S8 A64])
        (reg:DI 5 di [ p0 ])) mUtility.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p0 ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 p1+0 S8 A64])
        (reg:DI 4 si [ p1 ])) mUtility.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ p1 ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -440 [0xfffffffffffffe48])) [0 p2+0 S8 A64])
        (reg:DI 1 dx [ p2 ])) mUtility.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ p2 ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 p3+0 S8 A64])
        (reg:DI 2 cx [ p3 ])) mUtility.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ p3 ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])
        (reg:DI 37 r8 [ p ])) mUtility.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ p ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (parallel [
            (set (reg:DI 1 dx [136])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:216 274 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [0 p0+0 S8 A64])) mUtility.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [136])) mUtility.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [136])
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [137])) mUtility.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [137])
        (nil)))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:216 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 1 dx [138])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:217 274 {*adddi_1}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 p1+0 S8 A64])) mUtility.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [138])) mUtility.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [138])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) mUtility.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [139])
        (nil)))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:217 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 20 19 21 2 (parallel [
            (set (reg:DI 1 dx [140])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:218 274 {*adddi_1}
     (nil))
(insn 21 20 22 2 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -440 [0xfffffffffffffe48])) [0 p2+0 S8 A64])) mUtility.c:218 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [140])) mUtility.c:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [140])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) mUtility.c:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [141])
        (nil)))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:218 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 1 dx [142])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:219 274 {*adddi_1}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 p3+0 S8 A64])) mUtility.c:219 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [142])) mUtility.c:219 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [142])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [143])) mUtility.c:219 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [143])
        (nil)))
(call_insn 29 28 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:219 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 30 29 31 2 (set (reg:XF 9 st(1) [orig:59 D.5115 ] [59])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 P0+16 S16 A128])) mUtility.c:221 131 {*movxf_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:XF 8 st [orig:60 D.5115 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 P1+32 S16 A128])) mUtility.c:221 131 {*movxf_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg:XF 9 st(1) [orig:61 D.5115 ] [61])
        (mult:XF (reg:XF 9 st(1) [orig:59 D.5115 ] [59])
            (reg:XF 8 st [orig:60 D.5115 ] [60]))) mUtility.c:221 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5115 ] [60])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5115 ] [59])
            (nil))))
(insn 33 32 34 2 (set (reg:XF 10 st(2) [orig:62 D.5115 ] [62])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 P1+16 S16 A128])) mUtility.c:221 131 {*movxf_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:XF 8 st [orig:63 D.5115 ] [63])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 P0+32 S16 A128])) mUtility.c:221 131 {*movxf_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:XF 8 st [orig:64 D.5115 ] [64])
        (mult:XF (reg:XF 8 st [orig:63 D.5115 ] [63])
            (reg:XF 10 st(2) [orig:62 D.5115 ] [62]))) mUtility.c:221 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5115 ] [63])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:62 D.5115 ] [62])
            (nil))))
(insn 36 35 37 2 (set (reg:XF 8 st [144])
        (minus:XF (reg:XF 9 st(1) [orig:61 D.5115 ] [61])
            (reg:XF 8 st [orig:64 D.5115 ] [64]))) mUtility.c:221 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5115 ] [64])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.5115 ] [61])
            (nil))))
(insn 37 36 38 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])
        (reg:XF 8 st [144])) mUtility.c:221 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [144])
        (nil)))
(insn 38 37 39 2 (set (reg:XF 9 st(1) [orig:65 D.5115 ] [65])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [0 P0+0 S16 A128])) mUtility.c:222 131 {*movxf_internal_rex64}
     (nil))
(insn 39 38 40 2 (set (reg:XF 8 st [orig:66 D.5115 ] [66])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 P1+32 S16 A128])) mUtility.c:222 131 {*movxf_internal_rex64}
     (nil))
(insn 40 39 41 2 (set (reg:XF 9 st(1) [orig:67 D.5115 ] [67])
        (mult:XF (reg:XF 9 st(1) [orig:65 D.5115 ] [65])
            (reg:XF 8 st [orig:66 D.5115 ] [66]))) mUtility.c:222 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5115 ] [66])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.5115 ] [65])
            (nil))))
(insn 41 40 42 2 (set (reg:XF 10 st(2) [orig:68 D.5115 ] [68])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [0 P1+0 S16 A128])) mUtility.c:222 131 {*movxf_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:XF 8 st [orig:69 D.5115 ] [69])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 P0+32 S16 A128])) mUtility.c:222 131 {*movxf_internal_rex64}
     (nil))
(insn 43 42 44 2 (set (reg:XF 8 st [orig:70 D.5115 ] [70])
        (mult:XF (reg:XF 8 st [orig:69 D.5115 ] [69])
            (reg:XF 10 st(2) [orig:68 D.5115 ] [68]))) mUtility.c:222 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5115 ] [69])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:68 D.5115 ] [68])
            (nil))))
(insn 44 43 45 2 (set (reg:XF 8 st [orig:71 D.5115 ] [71])
        (minus:XF (reg:XF 9 st(1) [orig:67 D.5115 ] [67])
            (reg:XF 8 st [orig:70 D.5115 ] [70]))) mUtility.c:222 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.5115 ] [70])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.5115 ] [67])
            (nil))))
(insn 45 44 46 2 (set (reg:XF 8 st [145])
        (neg:XF (reg:XF 8 st [orig:71 D.5115 ] [71]))) mUtility.c:222 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5115 ] [71])
        (nil)))
(insn 46 45 47 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])
        (reg:XF 8 st [145])) mUtility.c:222 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [145])
        (nil)))
(insn 47 46 48 2 (set (reg:XF 9 st(1) [orig:72 D.5115 ] [72])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [0 P0+0 S16 A128])) mUtility.c:223 131 {*movxf_internal_rex64}
     (nil))
(insn 48 47 49 2 (set (reg:XF 8 st [orig:73 D.5115 ] [73])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 P1+16 S16 A128])) mUtility.c:223 131 {*movxf_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg:XF 9 st(1) [orig:74 D.5115 ] [74])
        (mult:XF (reg:XF 9 st(1) [orig:72 D.5115 ] [72])
            (reg:XF 8 st [orig:73 D.5115 ] [73]))) mUtility.c:223 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5115 ] [73])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:72 D.5115 ] [72])
            (nil))))
(insn 50 49 51 2 (set (reg:XF 10 st(2) [orig:75 D.5115 ] [75])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [0 P1+0 S16 A128])) mUtility.c:223 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 2 (set (reg:XF 8 st [orig:76 D.5115 ] [76])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 P0+16 S16 A128])) mUtility.c:223 131 {*movxf_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:XF 8 st [orig:77 D.5115 ] [77])
        (mult:XF (reg:XF 8 st [orig:76 D.5115 ] [76])
            (reg:XF 10 st(2) [orig:75 D.5115 ] [75]))) mUtility.c:223 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5115 ] [76])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:75 D.5115 ] [75])
            (nil))))
(insn 53 52 54 2 (set (reg:XF 8 st [146])
        (minus:XF (reg:XF 9 st(1) [orig:74 D.5115 ] [74])
            (reg:XF 8 st [orig:77 D.5115 ] [77]))) mUtility.c:223 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5115 ] [77])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.5115 ] [74])
            (nil))))
(insn 54 53 55 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 c+0 S16 A128])
        (reg:XF 8 st [146])) mUtility.c:223 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [146])
        (nil)))
(insn 55 54 56 2 (set (reg:XF 9 st(1) [orig:78 D.5115 ] [78])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 P2+16 S16 A128])) mUtility.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 56 55 57 2 (set (reg:XF 8 st [orig:79 D.5115 ] [79])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 P3+32 S16 A128])) mUtility.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 57 56 58 2 (set (reg:XF 9 st(1) [orig:80 D.5115 ] [80])
        (mult:XF (reg:XF 9 st(1) [orig:78 D.5115 ] [78])
            (reg:XF 8 st [orig:79 D.5115 ] [79]))) mUtility.c:224 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5115 ] [79])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:78 D.5115 ] [78])
            (nil))))
(insn 58 57 59 2 (set (reg:XF 10 st(2) [orig:81 D.5115 ] [81])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 P3+16 S16 A128])) mUtility.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (reg:XF 8 st [orig:82 D.5115 ] [82])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 P2+32 S16 A128])) mUtility.c:224 131 {*movxf_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (reg:XF 8 st [orig:83 D.5115 ] [83])
        (mult:XF (reg:XF 8 st [orig:82 D.5115 ] [82])
            (reg:XF 10 st(2) [orig:81 D.5115 ] [81]))) mUtility.c:224 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.5115 ] [82])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:81 D.5115 ] [81])
            (nil))))
(insn 61 60 62 2 (set (reg:XF 8 st [147])
        (minus:XF (reg:XF 9 st(1) [orig:80 D.5115 ] [80])
            (reg:XF 8 st [orig:83 D.5115 ] [83]))) mUtility.c:224 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.5115 ] [83])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:80 D.5115 ] [80])
            (nil))))
(insn 62 61 63 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])
        (reg:XF 8 st [147])) mUtility.c:224 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [147])
        (nil)))
(insn 63 62 64 2 (set (reg:XF 9 st(1) [orig:84 D.5115 ] [84])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 P2+0 S16 A128])) mUtility.c:225 131 {*movxf_internal_rex64}
     (nil))
(insn 64 63 65 2 (set (reg:XF 8 st [orig:85 D.5115 ] [85])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 P3+32 S16 A128])) mUtility.c:225 131 {*movxf_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (reg:XF 9 st(1) [orig:86 D.5115 ] [86])
        (mult:XF (reg:XF 9 st(1) [orig:84 D.5115 ] [84])
            (reg:XF 8 st [orig:85 D.5115 ] [85]))) mUtility.c:225 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.5115 ] [85])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:84 D.5115 ] [84])
            (nil))))
(insn 66 65 67 2 (set (reg:XF 10 st(2) [orig:87 D.5115 ] [87])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 P3+0 S16 A128])) mUtility.c:225 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (reg:XF 8 st [orig:88 D.5115 ] [88])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 P2+32 S16 A128])) mUtility.c:225 131 {*movxf_internal_rex64}
     (nil))
(insn 68 67 69 2 (set (reg:XF 8 st [orig:89 D.5115 ] [89])
        (mult:XF (reg:XF 8 st [orig:88 D.5115 ] [88])
            (reg:XF 10 st(2) [orig:87 D.5115 ] [87]))) mUtility.c:225 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5115 ] [88])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:87 D.5115 ] [87])
            (nil))))
(insn 69 68 70 2 (set (reg:XF 8 st [orig:90 D.5115 ] [90])
        (minus:XF (reg:XF 9 st(1) [orig:86 D.5115 ] [86])
            (reg:XF 8 st [orig:89 D.5115 ] [89]))) mUtility.c:225 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5115 ] [89])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:86 D.5115 ] [86])
            (nil))))
(insn 70 69 71 2 (set (reg:XF 8 st [148])
        (neg:XF (reg:XF 8 st [orig:90 D.5115 ] [90]))) mUtility.c:225 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5115 ] [90])
        (nil)))
(insn 71 70 72 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])
        (reg:XF 8 st [148])) mUtility.c:225 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [148])
        (nil)))
(insn 72 71 73 2 (set (reg:XF 9 st(1) [orig:91 D.5115 ] [91])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 P2+0 S16 A128])) mUtility.c:226 131 {*movxf_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (reg:XF 8 st [orig:92 D.5115 ] [92])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 P3+16 S16 A128])) mUtility.c:226 131 {*movxf_internal_rex64}
     (nil))
(insn 74 73 75 2 (set (reg:XF 9 st(1) [orig:93 D.5115 ] [93])
        (mult:XF (reg:XF 9 st(1) [orig:91 D.5115 ] [91])
            (reg:XF 8 st [orig:92 D.5115 ] [92]))) mUtility.c:226 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.5115 ] [92])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:91 D.5115 ] [91])
            (nil))))
(insn 75 74 76 2 (set (reg:XF 10 st(2) [orig:94 D.5115 ] [94])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 P3+0 S16 A128])) mUtility.c:226 131 {*movxf_internal_rex64}
     (nil))
(insn 76 75 77 2 (set (reg:XF 8 st [orig:95 D.5115 ] [95])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 P2+16 S16 A128])) mUtility.c:226 131 {*movxf_internal_rex64}
     (nil))
(insn 77 76 78 2 (set (reg:XF 8 st [orig:96 D.5115 ] [96])
        (mult:XF (reg:XF 8 st [orig:95 D.5115 ] [95])
            (reg:XF 10 st(2) [orig:94 D.5115 ] [94]))) mUtility.c:226 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:95 D.5115 ] [95])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:94 D.5115 ] [94])
            (nil))))
(insn 78 77 79 2 (set (reg:XF 8 st [149])
        (minus:XF (reg:XF 9 st(1) [orig:93 D.5115 ] [93])
            (reg:XF 8 st [orig:96 D.5115 ] [96]))) mUtility.c:226 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:96 D.5115 ] [96])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:93 D.5115 ] [93])
            (nil))))
(insn 79 78 80 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [0 f+0 S16 A128])
        (reg:XF 8 st [149])) mUtility.c:226 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [149])
        (nil)))
(insn 80 79 81 2 (set (reg:XF 0 ax [150])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [0 f+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 81 80 82 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0  S16 A128])
        (reg:XF 0 ax [150])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [150])
        (nil)))
(insn 82 81 83 2 (set (reg:XF 0 ax [151])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 83 82 84 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0  S16 A128])
        (reg:XF 0 ax [151])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [151])
        (nil)))
(insn 84 83 85 2 (set (reg:XF 0 ax [152])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 85 84 86 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0  S16 A128])
        (reg:XF 0 ax [152])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [152])
        (nil)))
(insn 86 85 87 2 (set (reg:XF 0 ax [153])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 c+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 87 86 88 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 0 ax [153])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [153])
        (nil)))
(insn 88 87 89 2 (set (reg:XF 0 ax [154])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [154])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [154])
        (nil)))
(insn 90 89 91 2 (set (reg:XF 0 ax [155])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (nil))
(insn 91 90 92 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [155])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [155])
        (nil)))
(call_insn 92 91 93 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_den") [flags 0x3]  <function_decl 0x7f4452bcd800 _den>) [0 _den S1 A8])
            (const_int 96 [0x60]))) mUtility.c:231 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                            (const_int 32 [0x20])) [0  S16 A128]))
                (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                (const_int 48 [0x30])) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 64 [0x40])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 80 [0x50])) [0  S16 A128]))
                            (nil))))))))
(insn 93 92 94 2 (set (reg:XF 8 st [orig:97 D.5115 ] [97])
        (reg:XF 8 st)) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 94 93 95 2 (set (reg:XF 9 st(1) [157])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 95 94 96 2 (set (reg:XF 8 st [156])
        (div:XF (reg:XF 9 st(1) [157])
            (reg:XF 8 st [orig:97 D.5115 ] [97]))) mUtility.c:231 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [157])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:97 D.5115 ] [97])
            (nil))))
(insn 96 95 97 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [0 t+0 S16 A128])
        (reg:XF 8 st [156])) mUtility.c:231 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [156])
        (nil)))
(insn 97 96 98 2 (set (reg:XF 0 ax [158])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [0 f+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 98 97 99 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0  S16 A128])
        (reg:XF 0 ax [158])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [158])
        (nil)))
(insn 99 98 100 2 (set (reg:XF 0 ax [159])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 100 99 101 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0  S16 A128])
        (reg:XF 0 ax [159])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [159])
        (nil)))
(insn 101 100 102 2 (set (reg:XF 0 ax [160])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 102 101 103 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0  S16 A128])
        (reg:XF 0 ax [160])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [160])
        (nil)))
(insn 103 102 104 2 (set (reg:XF 0 ax [161])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 c+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 104 103 105 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 0 ax [161])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [161])
        (nil)))
(insn 105 104 106 2 (set (reg:XF 0 ax [162])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 106 105 107 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [162])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [162])
        (nil)))
(insn 107 106 108 2 (set (reg:XF 0 ax [163])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (nil))
(insn 108 107 109 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [163])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [163])
        (nil)))
(call_insn 109 108 110 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_den") [flags 0x3]  <function_decl 0x7f4452bcd800 _den>) [0 _den S1 A8])
            (const_int 96 [0x60]))) mUtility.c:233 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                            (const_int 32 [0x20])) [0  S16 A128]))
                (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                (const_int 48 [0x30])) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 64 [0x40])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 80 [0x50])) [0  S16 A128]))
                            (nil))))))))
(insn 110 109 111 2 (set (reg:XF 8 st [orig:98 D.5115 ] [98])
        (reg:XF 8 st)) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 111 110 112 2 (set (reg:XF 9 st(1) [164])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:233 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 112 111 113 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [164])
            (reg:XF 8 st [orig:98 D.5115 ] [98]))) mUtility.c:233 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [164])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:98 D.5115 ] [98])
            (nil))))
(jump_insn 113 112 117 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 120)
            (pc))) mUtility.c:233 612 {*jcc_1}
     (nil)
 -> 120)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 117 113 118 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f4452922260 *.LC10>)) mUtility.c:233 87 {*movdi_internal_rex64}
     (nil))
(call_insn 119 118 120 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x3]  <function_decl 0x7f4452e3c300 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mUtility.c:233 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 165 166 167 168 169
(code_label 120 119 121 4 72 "" [1 uses])
(note 121 120 122 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 4 (set (reg:XF 9 st(1) [165])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:234 131 {*movxf_internal_rex64}
     (nil))
(insn 123 122 124 4 (set (reg:XF 8 st [166])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:234 131 {*movxf_internal_rex64}
     (nil))
(insn 124 123 125 4 (set (reg:XF 9 st(1) [orig:99 D.5115 ] [99])
        (mult:XF (reg:XF 9 st(1) [165])
            (reg:XF 8 st [166]))) mUtility.c:234 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [166])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [165])
            (nil))))
(insn 125 124 126 4 (set (reg:XF 10 st(2) [167])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:234 131 {*movxf_internal_rex64}
     (nil))
(insn 126 125 127 4 (set (reg:XF 8 st [168])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:234 131 {*movxf_internal_rex64}
     (nil))
(insn 127 126 128 4 (set (reg:XF 8 st [orig:100 D.5115 ] [100])
        (mult:XF (reg:XF 8 st [168])
            (reg:XF 10 st(2) [167]))) mUtility.c:234 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [168])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [167])
            (nil))))
(insn 128 127 129 4 (set (reg:XF 8 st [orig:101 D.5115 ] [101])
        (minus:XF (reg:XF 9 st(1) [orig:99 D.5115 ] [99])
            (reg:XF 8 st [orig:100 D.5115 ] [100]))) mUtility.c:234 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:100 D.5115 ] [100])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:99 D.5115 ] [99])
            (nil))))
(insn 129 128 130 4 (set (reg:XF 8 st [orig:102 D.5115 ] [102])
        (abs:XF (reg:XF 8 st [orig:101 D.5115 ] [101]))) mUtility.c:234 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:101 D.5115 ] [101])
        (nil)))
(insn 130 129 131 4 (set (reg:XF 9 st(1) [169])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:234 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 131 130 132 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [169])
            (reg:XF 8 st [orig:102 D.5115 ] [102]))) mUtility.c:234 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [169])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:102 D.5115 ] [102])
            (nil))))
(jump_insn 132 131 136 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) mUtility.c:234 612 {*jcc_1}
     (nil)
 -> 139)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 136 132 137 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f44529222f8 *.LC11>)) mUtility.c:234 87 {*movdi_internal_rex64}
     (nil))
(call_insn 138 137 139 5 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x3]  <function_decl 0x7f4452e3c300 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mUtility.c:234 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196
(code_label 139 138 140 6 74 "" [1 uses])
(note 140 139 141 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 6 (set (reg:XF 9 st(1) [170])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 142 141 143 6 (set (reg:XF 8 st [171])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [0 f+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 143 142 144 6 (set (reg:XF 9 st(1) [orig:103 D.5115 ] [103])
        (mult:XF (reg:XF 9 st(1) [170])
            (reg:XF 8 st [171]))) mUtility.c:236 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [171])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [170])
            (nil))))
(insn 144 143 145 6 (set (reg:XF 10 st(2) [172])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 c+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 145 144 146 6 (set (reg:XF 8 st [173])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 146 145 147 6 (set (reg:XF 8 st [orig:104 D.5115 ] [104])
        (mult:XF (reg:XF 8 st [173])
            (reg:XF 10 st(2) [172]))) mUtility.c:236 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [173])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [172])
            (nil))))
(insn 147 146 148 6 (set (reg:XF 9 st(1) [orig:105 D.5115 ] [105])
        (minus:XF (reg:XF 9 st(1) [orig:103 D.5115 ] [103])
            (reg:XF 8 st [orig:104 D.5115 ] [104]))) mUtility.c:236 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:104 D.5115 ] [104])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:103 D.5115 ] [103])
            (nil))))
(insn 148 147 149 6 (set (reg:XF 10 st(2) [174])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 149 148 150 6 (set (reg:XF 8 st [175])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 150 149 151 6 (set (reg:XF 10 st(2) [orig:106 D.5115 ] [106])
        (mult:XF (reg:XF 10 st(2) [174])
            (reg:XF 8 st [175]))) mUtility.c:236 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [175])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [174])
            (nil))))
(insn 151 150 152 6 (set (reg:XF 11 st(3) [176])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 152 151 153 6 (set (reg:XF 8 st [177])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 153 152 154 6 (set (reg:XF 8 st [orig:107 D.5115 ] [107])
        (mult:XF (reg:XF 8 st [177])
            (reg:XF 11 st(3) [176]))) mUtility.c:236 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [177])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [176])
            (nil))))
(insn 154 153 155 6 (set (reg:XF 8 st [orig:108 D.5115 ] [108])
        (minus:XF (reg:XF 10 st(2) [orig:106 D.5115 ] [106])
            (reg:XF 8 st [orig:107 D.5115 ] [107]))) mUtility.c:236 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:107 D.5115 ] [107])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:106 D.5115 ] [106])
            (nil))))
(insn 155 154 259 6 (set (reg:XF 8 st [orig:109 D.5115 ] [109])
        (div:XF (reg:XF 9 st(1) [orig:105 D.5115 ] [105])
            (reg:XF 8 st [orig:108 D.5115 ] [108]))) mUtility.c:236 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:108 D.5115 ] [108])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:105 D.5115 ] [105])
            (nil))))
(insn 259 155 156 6 (set (reg:XF 9 st(1) [orig:110 D.5115 ] [110])
        (reg:XF 8 st [orig:109 D.5115 ] [109])) mUtility.c:236 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:109 D.5115 ] [109])
        (nil)))
(insn 156 259 260 6 (set (reg:XF 9 st(1) [orig:110 D.5115 ] [110])
        (neg:XF (reg:XF 9 st(1) [orig:110 D.5115 ] [110]))) mUtility.c:236 481 {*negxf2_1}
     (nil))
(insn 260 156 157 6 (set (reg:XF 9 st(1) [orig:110 D.5115 ] [110])
        (reg:XF 9 st(1) [orig:110 D.5115 ] [110])) mUtility.c:236 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:110 D.5115 ] [110])
        (nil)))
(insn 157 260 158 6 (set (reg:XF 8 st [178])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [0 t+0 S16 A128])) mUtility.c:236 131 {*movxf_internal_rex64}
     (nil))
(insn 158 157 159 6 (set (reg:XF 8 st [orig:111 D.5115 ] [111])
        (mult:XF (reg:XF 8 st [178])
            (reg:XF 9 st(1) [orig:110 D.5115 ] [110]))) mUtility.c:236 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [178])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:110 D.5115 ] [110])
            (nil))))
(insn 159 158 160 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 X1+0 S16 A128])
        (reg:XF 8 st [orig:111 D.5115 ] [111])) mUtility.c:236 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:111 D.5115 ] [111])
        (nil)))
(insn 160 159 161 6 (set (reg:XF 9 st(1) [179])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 c+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 161 160 162 6 (set (reg:XF 8 st [180])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 162 161 163 6 (set (reg:XF 9 st(1) [orig:112 D.5115 ] [112])
        (mult:XF (reg:XF 9 st(1) [179])
            (reg:XF 8 st [180]))) mUtility.c:237 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [180])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [179])
            (nil))))
(insn 163 162 164 6 (set (reg:XF 10 st(2) [181])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 164 163 165 6 (set (reg:XF 8 st [182])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [0 f+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 165 164 166 6 (set (reg:XF 8 st [orig:113 D.5115 ] [113])
        (mult:XF (reg:XF 8 st [182])
            (reg:XF 10 st(2) [181]))) mUtility.c:237 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [182])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [181])
            (nil))))
(insn 166 165 167 6 (set (reg:XF 9 st(1) [orig:114 D.5115 ] [114])
        (minus:XF (reg:XF 9 st(1) [orig:112 D.5115 ] [112])
            (reg:XF 8 st [orig:113 D.5115 ] [113]))) mUtility.c:237 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:113 D.5115 ] [113])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:112 D.5115 ] [112])
            (nil))))
(insn 167 166 168 6 (set (reg:XF 10 st(2) [183])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 b+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 168 167 169 6 (set (reg:XF 8 st [184])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 d+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 169 168 170 6 (set (reg:XF 10 st(2) [orig:115 D.5115 ] [115])
        (mult:XF (reg:XF 10 st(2) [183])
            (reg:XF 8 st [184]))) mUtility.c:237 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [184])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [183])
            (nil))))
(insn 170 169 171 6 (set (reg:XF 11 st(3) [185])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 a+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 171 170 172 6 (set (reg:XF 8 st [186])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 e+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 172 171 173 6 (set (reg:XF 8 st [orig:116 D.5115 ] [116])
        (mult:XF (reg:XF 8 st [186])
            (reg:XF 11 st(3) [185]))) mUtility.c:237 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [186])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [185])
            (nil))))
(insn 173 172 174 6 (set (reg:XF 8 st [orig:117 D.5115 ] [117])
        (minus:XF (reg:XF 10 st(2) [orig:115 D.5115 ] [115])
            (reg:XF 8 st [orig:116 D.5115 ] [116]))) mUtility.c:237 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:116 D.5115 ] [116])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:115 D.5115 ] [115])
            (nil))))
(insn 174 173 261 6 (set (reg:XF 8 st [orig:118 D.5115 ] [118])
        (div:XF (reg:XF 9 st(1) [orig:114 D.5115 ] [114])
            (reg:XF 8 st [orig:117 D.5115 ] [117]))) mUtility.c:237 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:117 D.5115 ] [117])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:114 D.5115 ] [114])
            (nil))))
(insn 261 174 175 6 (set (reg:XF 9 st(1) [orig:119 D.5115 ] [119])
        (reg:XF 8 st [orig:118 D.5115 ] [118])) mUtility.c:237 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:118 D.5115 ] [118])
        (nil)))
(insn 175 261 262 6 (set (reg:XF 9 st(1) [orig:119 D.5115 ] [119])
        (neg:XF (reg:XF 9 st(1) [orig:119 D.5115 ] [119]))) mUtility.c:237 481 {*negxf2_1}
     (nil))
(insn 262 175 176 6 (set (reg:XF 9 st(1) [orig:119 D.5115 ] [119])
        (reg:XF 9 st(1) [orig:119 D.5115 ] [119])) mUtility.c:237 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:119 D.5115 ] [119])
        (nil)))
(insn 176 262 177 6 (set (reg:XF 8 st [187])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [0 t+0 S16 A128])) mUtility.c:237 131 {*movxf_internal_rex64}
     (nil))
(insn 177 176 178 6 (set (reg:XF 8 st [orig:120 D.5115 ] [120])
        (mult:XF (reg:XF 8 st [187])
            (reg:XF 9 st(1) [orig:119 D.5115 ] [119]))) mUtility.c:237 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [187])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:119 D.5115 ] [119])
            (nil))))
(insn 178 177 179 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 X1+16 S16 A128])
        (reg:XF 8 st [orig:120 D.5115 ] [120])) mUtility.c:237 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:120 D.5115 ] [120])
        (nil)))
(insn 179 178 180 6 (set (reg:XF 0 ax [188])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [0 t+0 S16 A128])) mUtility.c:238 131 {*movxf_internal_rex64}
     (nil))
(insn 180 179 181 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 X1+32 S16 A128])
        (reg:XF 0 ax [188])) mUtility.c:238 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [188])
        (nil)))
(insn 181 180 182 6 (set (reg:XF 8 st [orig:121 D.5115 ] [121])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 X1+0 S16 A128])) mUtility.c:240 131 {*movxf_internal_rex64}
     (nil))
(insn 182 181 183 6 (set (reg:XF 8 st [orig:122 D.5115 ] [122])
        (neg:XF (reg:XF 8 st [orig:121 D.5115 ] [121]))) mUtility.c:240 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:121 D.5115 ] [121])
        (nil)))
(insn 183 182 184 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 X2+0 S16 A128])
        (reg:XF 8 st [orig:122 D.5115 ] [122])) mUtility.c:240 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:122 D.5115 ] [122])
        (nil)))
(insn 184 183 185 6 (set (reg:XF 8 st [orig:123 D.5115 ] [123])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 X1+16 S16 A128])) mUtility.c:241 131 {*movxf_internal_rex64}
     (nil))
(insn 185 184 186 6 (set (reg:XF 8 st [orig:124 D.5115 ] [124])
        (neg:XF (reg:XF 8 st [orig:123 D.5115 ] [123]))) mUtility.c:241 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:123 D.5115 ] [123])
        (nil)))
(insn 186 185 187 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 X2+16 S16 A128])
        (reg:XF 8 st [orig:124 D.5115 ] [124])) mUtility.c:241 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:124 D.5115 ] [124])
        (nil)))
(insn 187 186 188 6 (set (reg:XF 8 st [orig:125 D.5115 ] [125])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 X1+32 S16 A128])) mUtility.c:242 131 {*movxf_internal_rex64}
     (nil))
(insn 188 187 189 6 (set (reg:XF 8 st [orig:126 D.5115 ] [126])
        (neg:XF (reg:XF 8 st [orig:125 D.5115 ] [125]))) mUtility.c:242 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:125 D.5115 ] [125])
        (nil)))
(insn 189 188 190 6 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 X2+32 S16 A128])
        (reg:XF 8 st [orig:126 D.5115 ] [126])) mUtility.c:242 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:126 D.5115 ] [126])
        (nil)))
(insn 190 189 191 6 (set (reg:DI 1 dx [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 191 190 192 6 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:244 274 {*adddi_1}
     (nil))
(insn 192 191 193 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [189])) mUtility.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [189])
        (nil)))
(insn 193 192 194 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) mUtility.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [190])
        (nil)))
(call_insn 194 193 195 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_sphere") [flags 0x3]  <function_decl 0x7f4452bbaa00 _to_sphere>) [0 _to_sphere S1 A8])
            (const_int 0 [0]))) mUtility.c:244 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 195 194 196 6 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:245 87 {*movdi_internal_rex64}
     (nil))
(insn 196 195 197 6 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.5116 ] [127])
                (plus:DI (reg/f:DI 0 ax [191])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:245 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [191])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 197 196 198 6 (parallel [
            (set (reg:DI 0 ax [192])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:245 274 {*adddi_1}
     (nil))
(insn 198 197 199 6 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:127 D.5116 ] [127])) mUtility.c:245 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:127 D.5116 ] [127])
        (nil)))
(insn 199 198 200 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) mUtility.c:245 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [192])
        (nil)))
(call_insn 200 199 201 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_sphere") [flags 0x3]  <function_decl 0x7f4452bbaa00 _to_sphere>) [0 _to_sphere S1 A8])
            (const_int 0 [0]))) mUtility.c:245 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 201 200 202 6 (parallel [
            (set (reg:DI 1 dx [193])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:247 274 {*adddi_1}
     (nil))
(insn 202 201 203 6 (parallel [
            (set (reg:DI 0 ax [194])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:247 274 {*adddi_1}
     (nil))
(insn 203 202 204 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [193])) mUtility.c:247 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [193])
        (nil)))
(insn 204 203 205 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [194])) mUtility.c:247 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [194])
        (nil)))
(call_insn 205 204 206 6 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("euclid_dist") [flags 0x3]  <function_decl 0x7f4452bcd400 euclid_dist>) [0 euclid_dist S1 A8])
            (const_int 0 [0]))) mUtility.c:247 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 206 205 264 6 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 %sfp+-480 S16 A128])
        (reg:XF 8 st)) mUtility.c:247 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 264 206 207 6 NOTE_INSN_DELETED)
(insn 207 264 208 6 (parallel [
            (set (reg:DI 1 dx [195])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:247 274 {*adddi_1}
     (nil))
(insn 208 207 209 6 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:247 274 {*adddi_1}
     (nil))
(insn 209 208 210 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [195])) mUtility.c:247 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [195])
        (nil)))
(insn 210 209 211 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) mUtility.c:247 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(call_insn 211 210 212 6 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("euclid_dist") [flags 0x3]  <function_decl 0x7f4452bcd400 euclid_dist>) [0 euclid_dist S1 A8])
            (const_int 0 [0]))) mUtility.c:247 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 212 211 263 6 (set (reg:XF 8 st [orig:129 D.5115 ] [129])
        (reg:XF 8 st)) mUtility.c:247 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 263 212 213 6 (set (reg:XF 12 st(4) [orig:128 D.5115 ] [128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 %sfp+-480 S16 A128])) mUtility.c:247 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 128 [ D.5115 ])
        (nil)))
(insn 213 263 214 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 12 st(4) [orig:128 D.5115 ] [128])
            (reg:XF 8 st [orig:129 D.5115 ] [129]))) mUtility.c:247 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:128 D.5115 ] [128])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:129 D.5115 ] [129])
            (nil))))
(jump_insn 214 213 218 6 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 235)
            (pc))) mUtility.c:247 612 {*jcc_1}
     (nil)
 -> 235)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 197 198 199 200 201 202 203 204
(note 218 214 219 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 7 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 220 219 221 7 (set (reg:XF 0 ax [198])
        (mem:XF (plus:DI (reg/f:DI 0 ax [197])
                (const_int 32 [0x20])) [0 MEM[(long double *)p_80(D) + 32B]+0 S16 A128])) mUtility.c:249 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [197])
        (nil)))
(insn 221 220 222 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -304 [0xfffffffffffffed0])) [0 comodo+0 S16 A128])
        (reg:XF 0 ax [198])) mUtility.c:249 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [198])
        (nil)))
(insn 222 221 223 7 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:250 87 {*movdi_internal_rex64}
     (nil))
(insn 223 222 224 7 (parallel [
            (set (reg/f:DI 2 cx [orig:130 D.5116 ] [130])
                (plus:DI (reg/f:DI 0 ax [199])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:250 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [199])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])
                (const_int 32 [0x20]))
            (nil))))
(insn 224 223 225 7 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:250 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 7 (set (reg:XF 0 ax [orig:131 D.5115 ] [131])
        (mem:XF (reg/f:DI 0 ax [200]) [0 *p_80(D)+0 S16 A128])) mUtility.c:250 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [200])
        (nil)))
(insn 226 225 227 7 (set (mem:XF (reg/f:DI 2 cx [orig:130 D.5116 ] [130]) [0 *_85+0 S16 A128])
        (reg:XF 0 ax [orig:131 D.5115 ] [131])) mUtility.c:250 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:131 D.5115 ] [131])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:130 D.5116 ] [130])
            (nil))))
(insn 227 226 228 7 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 228 227 229 7 (set (reg:XF 0 ax [202])
        (mem:XF (plus:DI (reg/f:DI 0 ax [201])
                (const_int 48 [0x30])) [0 MEM[(long double *)p_80(D) + 48B]+0 S16 A128])) mUtility.c:252 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [201])
        (nil)))
(insn 229 228 230 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -304 [0xfffffffffffffed0])) [0 comodo+0 S16 A128])
        (reg:XF 0 ax [202])) mUtility.c:252 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [202])
        (nil)))
(insn 230 229 231 7 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:253 87 {*movdi_internal_rex64}
     (nil))
(insn 231 230 232 7 (parallel [
            (set (reg/f:DI 2 cx [orig:132 D.5116 ] [132])
                (plus:DI (reg/f:DI 0 ax [203])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:253 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [203])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])
                (const_int 48 [0x30]))
            (nil))))
(insn 232 231 233 7 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 p+0 S8 A64])) mUtility.c:253 87 {*movdi_internal_rex64}
     (nil))
(insn 233 232 234 7 (set (reg:XF 0 ax [orig:133 D.5115 ] [133])
        (mem:XF (plus:DI (reg/f:DI 0 ax [204])
                (const_int 16 [0x10])) [0 MEM[(long double *)p_80(D) + 16B]+0 S16 A128])) mUtility.c:253 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [204])
        (nil)))
(insn 234 233 235 7 (set (mem:XF (reg/f:DI 2 cx [orig:132 D.5116 ] [132]) [0 *_88+0 S16 A128])
        (reg:XF 0 ax [orig:133 D.5115 ] [133])) mUtility.c:253 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:133 D.5115 ] [133])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:132 D.5116 ] [132])
            (nil))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 134 135
(code_label 235 234 236 8 76 "" [1 uses])
(note 236 235 237 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 237 236 240 8 (set (reg:SI 0 ax [orig:134 D.5117 ] [134])
        (const_int 1 [0x1])) mUtility.c:256 89 {*movsi_internal}
     (nil))
(insn 240 237 244 8 (set (reg:SI 0 ax [orig:135 <retval> ] [135])
        (reg:SI 0 ax [orig:134 D.5117 ] [134])) mUtility.c:256 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:134 D.5117 ] [134])
        (nil)))
(insn 244 240 247 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:135 <retval> ] [135])) mUtility.c:257 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:135 <retval> ] [135])
        (nil)))
(insn 247 244 0 8 (use (reg/i:SI 0 ax)) mUtility.c:257 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function point_in_polygon (point_in_polygon, funcdef_no=24, decl_uid=1747, cgraph_uid=24)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 36:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=12,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 44:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 45:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 55:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 76: point = 0
   Insn 73: point = 0
   Insn 69: point = 1
  BB 6
   Insn 81: point = 4
   Insn 59: point = 4
  BB 7
   Insn 64: point = 5
  BB 5
   Insn 57: point = 6
   Insn 56: point = 6
   Insn 55: point = 7
   Insn 54: point = 9
  BB 4
   Insn 52: point = 10
   Insn 51: point = 10
   Insn 49: point = 11
   Insn 48: point = 13
  BB 2
   Insn 79: point = 14
   Insn 19: point = 14
   Insn 18: point = 14
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 17
   Insn 14: point = 18
   Insn 13: point = 19
   Insn 12: point = 20
   Insn 11: point = 20
   Insn 10: point = 21
   Insn 9: point = 22
   Insn 8: point = 23
   Insn 4: point = 24
   Insn 3: point = 24
   Insn 2: point = 24
  BB 3
   Insn 45: point = 24
   Insn 44: point = 24
   Insn 43: point = 25
   Insn 42: point = 26
   Insn 41: point = 26
   Insn 40: point = 27
   Insn 39: point = 28
   Insn 38: point = 29
   Insn 37: point = 30
   Insn 36: point = 31
   Insn 35: point = 32
   Insn 34: point = 34
   Insn 33: point = 36
   Insn 32: point = 37
   Insn 31: point = 39
   Insn 30: point = 41
   Insn 29: point = 42
   Insn 28: point = 44
   Insn 27: point = 46
   Insn 26: point = 47
   Insn 25: point = 49
   Insn 24: point = 51
   Insn 23: point = 53
 r59: [2..5]
 r60: [18..19]
 r61: [14..15]
 r62: [10..11]
 r63: [50..51]
 r64: [48..49]
 r65: [45..47]
 r66: [43..44]
 r67: [29..42]
 r68: [38..39]
 r69: [35..37]
 r70: [33..34]
 r71: [28..32]
 r72: [24..25]
 r73: [8..9]
 r74: [6..7]
 r75: [0..1]
 r76: [21..23]
 r77: [20..22]
 r78: [16..17]
 r79: [52..53]
 r80: [45..46]
 r81: [40..41]
 r82: [35..36]
 r83: [27..31]
 r84: [26..30]
 r85: [12..13]
Compressing live ranges: from 54 to 42 - 77%
Ranges after the compression:
 r59: [2..3]
 r60: [16..17]
 r61: [12..13]
 r62: [8..9]
 r63: [38..39]
 r64: [36..37]
 r65: [34..35]
 r66: [32..33]
 r67: [22..31]
 r68: [28..29]
 r69: [26..27]
 r70: [24..25]
 r71: [22..23]
 r72: [20..21]
 r73: [6..7]
 r74: [4..5]
 r75: [0..1]
 r76: [18..19]
 r77: [18..19]
 r78: [14..15]
 r79: [40..41]
 r80: [34..35]
 r81: [30..31]
 r82: [26..27]
 r83: [22..23]
 r84: [22..23]
 r85: [10..11]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 64
changing reg in insn 59
changing reg in insn 69
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 49
changing reg in insn 51
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 38
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 69
changing reg in insn 73
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 40
changing reg in insn 37
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
starting the processing of deferred insns
ending the processing of deferred insns


point_in_polygon

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={25d,23u} r1={9d,7u,2e} r2={5d,2u} r4={6d,4u} r5={5d,3u} r6={1d,31u} r7={1d,10u} r8={3d,2u} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={14d,2u} r18={2d} r19={2d} r20={1d,1u,3e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 244{154d,85u,5e} in 53{51 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 76 77 78
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mUtility.c:259 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])
        (reg:DI 4 si [ poly ])) mUtility.c:259 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ poly ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 Np+0 S4 A32])
        (reg:SI 1 dx [ Np ])) mUtility.c:259 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ Np ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 1 dx [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 Np+0 S4 A32])) mUtility.c:262 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])) mUtility.c:262 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [76])) mUtility.c:262 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [76])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [77])) mUtility.c:262 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(call_insn 12 11 13 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_maxim") [flags 0x3]  <function_decl 0x7f4452bcd900 _maxim>) [0 _maxim S1 A8])
            (const_int 0 [0]))) mUtility.c:262 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 13 12 14 2 (set (reg:XF 8 st [orig:60 D.5121 ] [60])
        (reg:XF 8 st)) mUtility.c:262 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 14 13 15 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 M+0 S16 A128])
        (reg:XF 8 st [orig:60 D.5121 ] [60])) mUtility.c:262 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.5121 ] [60])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])) mUtility.c:262 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:XF 0 ax [orig:61 D.5121 ] [61])
        (mem:XF (plus:DI (reg/f:DI 0 ax [78])
                (const_int 16 [0x10])) [0 MEM[(long double *)p_7(D) + 16B]+0 S16 A128])) mUtility.c:262 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (nil)))
(insn 17 16 18 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 M+16 S16 A128])
        (reg:XF 0 ax [orig:61 D.5121 ] [61])) mUtility.c:262 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:61 D.5121 ] [61])
        (nil)))
(insn 18 17 19 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:264 89 {*movsi_internal}
     (nil))
(insn 19 18 79 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 inter+0 S4 A32])
        (const_int 0 [0])) mUtility.c:264 89 {*movsi_internal}
     (nil))
(jump_insn 79 19 80 2 (set (pc)
        (label_ref 46)) mUtility.c:264 650 {jump}
     (nil)
 -> 46)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 50)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 66 67 68 69 70 71 72 79 80 81 82 83 84
(code_label 50 80 22 3 84 "" [1 uses])
(note 22 50 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mUtility.c:264 89 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 0 ax [orig:63 D.5122 ] [63])
        (sign_extend:DI (reg:SI 0 ax [79]))) mUtility.c:264 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 0 ax [orig:64 D.5122 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.5122 ] [63])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.5122 ] [63])
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 1 dx [orig:65 D.5122 ] [65])
                (ashift:DI (reg:DI 0 ax [orig:64 D.5122 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.5122 ] [64])
        (nil)))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])) mUtility.c:264 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5123 ] [66])
                (plus:DI (reg/f:DI 0 ax [80])
                    (reg:DI 1 dx [orig:65 D.5122 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.5122 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.5122 ] [65]))
                (nil)))))
(insn 29 28 30 3 (set (reg/f:DI 2 cx [orig:67 D.5124 ] [67])
        (mem/f:DI (reg/f:DI 0 ax [orig:66 D.5123 ] [66]) [0 *_15+0 S8 A64])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5123 ] [66])
        (nil)))
(insn 30 29 31 3 (set (reg:SI 0 ax [81])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mUtility.c:264 89 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:68 D.5125 ] [68])
        (sign_extend:DI (reg:SI 0 ax [81]))) mUtility.c:264 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [81])
        (nil)))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 1 dx [orig:69 D.5125 ] [69])
                (ashift:DI (reg:DI 0 ax [orig:68 D.5125 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:68 D.5125 ] [68])
        (nil)))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])) mUtility.c:264 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.5123 ] [70])
                (plus:DI (reg/f:DI 0 ax [82])
                    (reg:DI 1 dx [orig:69 D.5125 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.5125 ] [69])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -64 [0xffffffffffffffc0])) [0 poly+0 S8 A64])
                    (reg:DI 1 dx [orig:69 D.5125 ] [69]))
                (nil)))))
(insn 35 34 36 3 (set (reg/f:DI 1 dx [orig:71 D.5124 ] [71])
        (mem/f:DI (reg/f:DI 0 ax [orig:70 D.5123 ] [70]) [0 *_19+0 S8 A64])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5123 ] [70])
        (nil)))
(insn 36 35 37 3 (parallel [
            (set (reg:DI 4 si [83])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 274 {*adddi_1}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])) mUtility.c:264 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 3 (set (reg:DI 2 cx)
        (reg/f:DI 2 cx [orig:67 D.5124 ] [67])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:67 D.5124 ] [67])
        (nil)))
(insn 39 38 40 3 (set (reg:DI 1 dx)
        (reg/f:DI 1 dx [orig:71 D.5124 ] [71])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:71 D.5124 ] [71])
        (nil)))
(insn 40 39 41 3 (set (reg:DI 4 si)
        (reg:DI 4 si [83])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [83])
        (nil)))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [84])) mUtility.c:264 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(call_insn 42 41 43 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("segments_intersect") [flags 0x3]  <function_decl 0x7f4452e3c700 segments_intersect>) [0 segments_intersect S1 A8])
            (const_int 0 [0]))) mUtility.c:264 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 43 42 44 3 (set (reg:SI 0 ax [orig:72 D.5120 ] [72])
        (reg:SI 0 ax)) mUtility.c:264 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 44 43 45 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 inter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 inter+0 S4 A32])
                    (reg:SI 0 ax [orig:72 D.5120 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5120 ] [72])
        (nil)))
(insn 45 44 46 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 85
(code_label 46 45 47 4 83 "" [1 uses])
(note 47 46 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 4 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 Np+0 S4 A32])) mUtility.c:264 89 {*movsi_internal}
     (nil))
(insn 49 48 51 4 (parallel [
            (set (reg:SI 0 ax [orig:62 D.5120 ] [62])
                (plus:SI (reg:SI 0 ax [85])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:264 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [85])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -68 [0xffffffffffffffbc])) [0 Np+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 51 49 52 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:62 D.5120 ] [62])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) mUtility.c:264 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.5120 ] [62])
        (nil)))
(jump_insn 52 51 53 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) mUtility.c:264 612 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74
(note 53 52 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 5 (set (reg:SI 0 ax [orig:73 inter.0 ] [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 inter+0 S4 A32])) mUtility.c:266 89 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (parallel [
            (set (reg:SI 0 ax [orig:74 D.5126 ] [74])
                (and:SI (reg:SI 0 ax [orig:73 inter.0 ] [73])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:266 393 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 inter.0 ] [73])
        (nil)))
(insn 56 55 57 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:74 D.5126 ] [74])
            (const_int 0 [0]))) mUtility.c:266 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:74 D.5126 ] [74])
        (nil)))
(jump_insn 57 56 58 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mUtility.c:266 612 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 58 57 59 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 81 6 (set (reg:SI 0 ax [orig:59 D.5120 ] [59])
        (const_int 0 [0])) mUtility.c:266 89 {*movsi_internal}
     (nil))
(jump_insn 81 59 82 6 (set (pc)
        (label_ref 67)) mUtility.c:266 650 {jump}
     (nil)
 -> 67)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 82 81 62)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 62 82 63 7 85 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 67 7 (set (reg:SI 0 ax [orig:59 D.5120 ] [59])
        (const_int 1 [0x1])) mUtility.c:268 89 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 75
(code_label 67 64 68 8 87 "" [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 73 8 (set (reg:SI 0 ax [orig:75 <retval> ] [75])
        (reg:SI 0 ax [orig:59 D.5120 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5120 ] [59])
        (nil)))
(insn 73 69 76 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:75 <retval> ] [75])) mUtility.c:269 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:75 <retval> ] [75])
        (nil)))
(insn 76 73 0 8 (use (reg/i:SI 0 ax)) mUtility.c:269 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function frand (frand, funcdef_no=25, decl_uid=1750, cgraph_uid=25)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (1) rzw {*call_value}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 15:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 27: point = 0
   Insn 24: point = 0
   Insn 20: point = 1
   Insn 17: point = 3
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 8
   Insn 13: point = 9
   Insn 12: point = 11
   Insn 11: point = 12
   Insn 10: point = 13
   Insn 9: point = 14
   Insn 8: point = 16
   Insn 30: point = 17
   Insn 6: point = 19
   Insn 5: point = 20
 r59: [18..19]
 r60: [15..17]
 r61: [7..9]
 r62: [4..6]
 r63: [2..3]
 r64: [0..1]
 r65: [13..14]
 r66: [15..16]
 r67: [10..12]
 r68: [10..11]
 r69: [7..8]
 r70: [4..5]
Compressing live ranges: from 20 to 16 - 80%
Ranges after the compression:
 r59: [14..15]
 r60: [12..13]
 r61: [6..7]
 r62: [4..5]
 r63: [2..3]
 r64: [0..1]
 r65: [10..11]
 r66: [12..13]
 r67: [8..9]
 r68: [8..9]
 r69: [6..7]
 r70: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 30
changing reg in insn 30
changing reg in insn 9
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 20
changing reg in insn 24
changing reg in insn 9
changing reg in insn 10
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 5.


frand

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 8[st] 9[st(1)]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,8u} r7={1d,3u} r8={9d,9u} r9={5d,4u} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 102{75d,27u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f4452ec8600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) mUtility.c:272 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 6 5 30 2 (set (reg:SI 0 ax [orig:59 D.5127 ] [59])
        (reg:SI 0 ax)) mUtility.c:272 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 30 6 8 2 (parallel [
            (set (reg:XF 9 st(1) [orig:60 D.5128 ] [60])
                (float:XF (reg:SI 0 ax [orig:59 D.5127 ] [59])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S4 A32]))
        ]) mUtility.c:272 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5127 ] [59])
        (nil)))
(insn 8 30 9 2 (set (reg:XF 8 st [66])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) mUtility.c:272 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.147483647e+9 [0x0.fffffffep+31])
        (nil)))
(insn 9 8 10 2 (set (reg:XF 8 st [65])
        (div:XF (reg:XF 9 st(1) [orig:60 D.5128 ] [60])
            (reg:XF 8 st [66]))) mUtility.c:272 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [66])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5128 ] [60])
            (nil))))
(insn 10 9 11 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 f+0 S16 A128])
        (reg:XF 8 st [65])) mUtility.c:272 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [65])
        (nil)))
(insn 11 10 12 2 (set (reg:XF 9 st(1) [67])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 fMax+0 S16 A128])) mUtility.c:273 131 {*movxf_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:XF 8 st [68])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 fMin+0 S16 A128])) mUtility.c:273 131 {*movxf_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:XF 9 st(1) [orig:61 D.5128 ] [61])
        (minus:XF (reg:XF 9 st(1) [67])
            (reg:XF 8 st [68]))) mUtility.c:273 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [68])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [67])
            (nil))))
(insn 14 13 15 2 (set (reg:XF 8 st [69])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 f+0 S16 A128])) mUtility.c:273 131 {*movxf_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:XF 9 st(1) [orig:62 D.5128 ] [62])
        (mult:XF (reg:XF 9 st(1) [orig:61 D.5128 ] [61])
            (reg:XF 8 st [69]))) mUtility.c:273 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [69])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:61 D.5128 ] [61])
            (nil))))
(insn 16 15 17 2 (set (reg:XF 8 st [70])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 fMin+0 S16 A128])) mUtility.c:273 131 {*movxf_internal_rex64}
     (nil))
(insn 17 16 20 2 (set (reg:XF 8 st [orig:63 D.5128 ] [63])
        (plus:XF (reg:XF 8 st [70])
            (reg:XF 9 st(1) [orig:62 D.5128 ] [62]))) mUtility.c:273 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [70])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.5128 ] [62])
            (nil))))
(insn 20 17 24 2 (set (reg:XF 8 st [orig:64 <retval> ] [64])
        (reg:XF 8 st [orig:63 D.5128 ] [63])) mUtility.c:273 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5128 ] [63])
        (nil)))
(insn 24 20 27 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:64 <retval> ] [64])) mUtility.c:274 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 <retval> ] [64])
        (nil)))
(insn 27 24 0 2 (use (reg/i:XF 8 st)) mUtility.c:274 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function irand (irand, funcdef_no=26, decl_uid=1752, cgraph_uid=26)


********** Local #1: **********

          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 9:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=68 from oldreg=61, assigning class SSE_REGS to r68
   10: r68:DF=r68:DF/r66:DF
      REG_DEAD r66:DF
      REG_DEAD r60:DF
    Inserting insn reload before:
   26: r68:DF=r60:DF
    Inserting insn reload after:
   27: r61:DF=r68:DF

          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) x  (1) m {*floatsidf2_sse_interunit}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) x {fix_truncdfsi_sse}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0
   Insn 20: point = 0
   Insn 16: point = 1
   Insn 13: point = 3
   Insn 12: point = 5
   Insn 11: point = 7
   Insn 27: point = 8
	Hard reg 22 is preferable by r68 with profit 1
   Insn 10: point = 10
   Insn 26: point = 11
	Hard reg 22 is preferable by r68 with profit 1
	Hard reg 21 is preferable by r68 with profit 1
   Insn 9: point = 13
   Insn 8: point = 14
   Insn 7: point = 16
   Insn 6: point = 17
   Insn 2: point = 17
 r59: [15..16]
 r60: [12..14]
 r61: [6..8]
 r62: [6..7]
 r63: [4..5]
 r64: [2..3]
 r65: [0..1]
 r66: [10..13]
 r68: [9..11]
Compressing live ranges: from 17 to 14 - 82%
Ranges after the compression:
 r59: [12..13]
 r60: [10..11]
 r61: [6..7]
 r62: [6..7]
 r63: [4..5]
 r64: [2..3]
 r65: [0..1]
 r66: [8..11]
 r68: [8..9]
	 Assigning to 68 (cl=SSE_REGS, orig=61, freq=3, tfirst=68, tfreq=3)...
	   Assign 21 to reload r68 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 9
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.


irand

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={6d,6u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={7d,5u} r22={4d,2u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 95{73d,22u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 max+0 S4 A32])
        (reg:SI 5 di [ max ])) mUtility.c:276 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ max ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f4452ec8600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) mUtility.c:277 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [orig:59 D.5129 ] [59])
        (reg:SI 0 ax)) mUtility.c:277 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 8 7 9 2 (set (reg:DF 21 xmm0 [orig:60 D.5130 ] [60])
        (float:DF (reg:SI 0 ax [orig:59 D.5129 ] [59]))) mUtility.c:277 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5129 ] [59])
        (nil)))
(insn 9 8 26 2 (set (reg:DF 22 xmm1 [66])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S8 A64])) mUtility.c:277 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 2.147483648e+9 [0x0.8p+32])
        (nil)))
(insn 26 9 10 2 (set (reg:DF 21 xmm0 [orig:61 D.5130 ] [61])
        (reg:DF 21 xmm0 [orig:60 D.5130 ] [60])) mUtility.c:277 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:60 D.5130 ] [60])
        (nil)))
(insn 10 26 27 2 (set (reg:DF 21 xmm0 [orig:61 D.5130 ] [61])
        (div:DF (reg:DF 21 xmm0 [orig:61 D.5130 ] [61])
            (reg:DF 22 xmm1 [66]))) mUtility.c:277 785 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [66])
        (nil)))
(insn 27 10 11 2 (set (reg:DF 22 xmm1 [orig:61 D.5130 ] [61])
        (reg:DF 21 xmm0 [orig:61 D.5130 ] [61])) mUtility.c:277 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:61 D.5130 ] [61])
        (nil)))
(insn 11 27 12 2 (set (reg:DF 21 xmm0 [orig:62 D.5130 ] [62])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 max+0 S4 A32]))) mUtility.c:277 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 12 11 13 2 (set (reg:DF 21 xmm0 [orig:63 D.5130 ] [63])
        (mult:DF (reg:DF 21 xmm0 [orig:62 D.5130 ] [62])
            (reg:DF 22 xmm1 [orig:61 D.5130 ] [61]))) mUtility.c:277 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:62 D.5130 ] [62])
        (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:61 D.5130 ] [61])
            (nil))))
(insn 13 12 16 2 (set (reg:SI 0 ax [orig:64 D.5129 ] [64])
        (fix:SI (reg:DF 21 xmm0 [orig:63 D.5130 ] [63]))) mUtility.c:277 179 {fix_truncdfsi_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:63 D.5130 ] [63])
        (nil)))
(insn 16 13 20 2 (set (reg:SI 0 ax [orig:65 <retval> ] [65])
        (reg:SI 0 ax [orig:64 D.5129 ] [64])) mUtility.c:277 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.5129 ] [64])
        (nil)))
(insn 20 16 23 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:65 <retval> ] [65])) mUtility.c:278 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 <retval> ] [65])
        (nil)))
(insn 23 20 0 2 (use (reg/i:SI 0 ax)) mUtility.c:278 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function isbetween (isbetween, funcdef_no=27, decl_uid=1756, cgraph_uid=27)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =f  (1) 0 {*absxf2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 98:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 102:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 109:  (0) =f  (1) 0 {*absxf2_1}
      Creating newreg=130 from oldreg=90, assigning class FLOAT_REGS to r130
  109: r130:XF=abs(r130:XF)
      REG_DEAD r114:XF
    Inserting insn reload before:
  209: r130:XF=r114:XF
    Inserting insn reload after:
  210: r90:XF=r130:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 130:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 176: point = 0
   Insn 173: point = 0
   Insn 169: point = 1
  BB 12
   Insn 207: point = 4
   Insn 159: point = 4
  BB 7
   Insn 202: point = 5
   Insn 69: point = 5
  BB 4
   Insn 200: point = 6
   Insn 36: point = 6
  BB 9
   Insn 205: point = 7
   Insn 117: point = 7
  BB 13
   Insn 164: point = 8
  BB 11
   Insn 154: point = 9
   Insn 153: point = 9
   Insn 152: point = 10
   Insn 151: point = 11
  BB 10
   Insn 146: point = 12
   Insn 145: point = 12
   Insn 144: point = 13
   Insn 143: point = 14
   Insn 142: point = 15
   Insn 141: point = 16
   Insn 140: point = 17
   Insn 139: point = 17
   Insn 138: point = 18
   Insn 137: point = 19
   Insn 136: point = 20
   Insn 135: point = 21
   Insn 134: point = 22
   Insn 133: point = 23
   Insn 132: point = 23
   Insn 131: point = 24
   Insn 130: point = 25
   Insn 129: point = 26
   Insn 128: point = 27
   Insn 127: point = 28
   Insn 126: point = 29
   Insn 125: point = 29
   Insn 124: point = 30
   Insn 123: point = 31
   Insn 122: point = 32
  BB 8
   Insn 112: point = 33
   Insn 111: point = 33
   Insn 110: point = 34
   Insn 210: point = 35
	Hard reg 9 is preferable by r130 with profit 1
   Insn 109: point = 37
   Insn 209: point = 37
	Hard reg 9 is preferable by r130 with profit 1
	Hard reg 8 is preferable by r130 with profit 1
   Insn 108: point = 39
   Insn 107: point = 40
   Insn 106: point = 41
   Insn 105: point = 43
   Insn 104: point = 45
   Insn 103: point = 46
   Insn 102: point = 47
   Insn 101: point = 49
   Insn 100: point = 51
   Insn 99: point = 52
   Insn 98: point = 53
   Insn 97: point = 55
   Insn 96: point = 56
   Insn 95: point = 57
   Insn 94: point = 57
   Insn 93: point = 58
   Insn 92: point = 59
   Insn 91: point = 60
   Insn 90: point = 61
   Insn 89: point = 62
   Insn 88: point = 63
   Insn 87: point = 63
   Insn 86: point = 64
   Insn 85: point = 65
   Insn 84: point = 66
   Insn 83: point = 67
   Insn 82: point = 67
   Insn 81: point = 68
   Insn 80: point = 69
   Insn 79: point = 70
   Insn 78: point = 71
   Insn 77: point = 71
   Insn 76: point = 72
   Insn 75: point = 73
   Insn 74: point = 74
  BB 6
   Insn 64: point = 75
   Insn 63: point = 75
   Insn 62: point = 76
   Insn 61: point = 77
   Insn 60: point = 79
   Insn 59: point = 81
   Insn 58: point = 83
   Insn 57: point = 85
   Insn 56: point = 86
   Insn 55: point = 88
   Insn 54: point = 90
  BB 5
   Insn 49: point = 91
   Insn 48: point = 91
   Insn 47: point = 92
   Insn 46: point = 93
   Insn 45: point = 95
   Insn 44: point = 97
   Insn 43: point = 99
   Insn 42: point = 100
   Insn 41: point = 102
  BB 3
   Insn 31: point = 103
   Insn 30: point = 103
   Insn 29: point = 104
   Insn 28: point = 105
   Insn 27: point = 107
   Insn 26: point = 109
   Insn 25: point = 111
   Insn 24: point = 113
   Insn 23: point = 114
   Insn 22: point = 116
   Insn 21: point = 118
  BB 2
   Insn 16: point = 119
   Insn 15: point = 119
   Insn 14: point = 120
   Insn 13: point = 121
   Insn 12: point = 123
   Insn 11: point = 125
   Insn 10: point = 127
   Insn 9: point = 128
   Insn 8: point = 130
   Insn 4: point = 131
   Insn 3: point = 131
   Insn 2: point = 131
 r59: [2..8]
 r60: [124..128]
 r61: [124..125]
 r62: [122..123]
 r63: [119..121]
 r64: [115..116]
 r65: [108..114]
 r66: [110..111]
 r67: [108..109]
 r68: [106..107]
 r69: [103..105]
 r70: [96..100]
 r71: [96..97]
 r72: [94..95]
 r73: [91..93]
 r74: [87..88]
 r75: [80..86]
 r76: [82..83]
 r77: [80..81]
 r78: [78..79]
 r79: [75..77]
 r80: [54..56]
 r81: [54..55]
 r82: [48..53]
 r83: [50..52]
 r84: [50..51]
 r85: [48..49]
 r86: [42..47]
 r87: [44..46]
 r88: [44..45]
 r89: [42..43]
 r90: [33..35]
 r91: [0..1]
 r92: [129..130]
 r93: [126..127]
 r94: [119..120]
 r95: [117..118]
 r96: [112..113]
 r97: [103..104]
 r98: [101..102]
 r99: [98..99]
 r100: [91..92]
 r101: [89..90]
 r102: [84..85]
 r103: [75..76]
 r104: [72..74]
 r105: [71..73]
 r106: [68..70]
 r107: [67..69]
 r108: [64..66]
 r109: [63..65]
 r110: [59..62]
 r111: [58..61]
 r112: [57..60]
 r113: [40..41]
 r114: [38..39]
 r115: [33..34]
 r116: [30..32]
 r117: [29..31]
 r118: [27..28]
 r119: [24..26]
 r120: [23..25]
 r121: [21..22]
 r122: [18..20]
 r123: [17..19]
 r124: [15..16]
 r125: [12..14]
 r126: [12..13]
 r127: [9..11]
 r128: [9..10]
 r130: [36..37]
Compressing live ranges: from 131 to 94 - 71%
Ranges after the compression:
 r59: [2..3]
 r60: [88..91]
 r61: [88..89]
 r62: [86..87]
 r63: [84..85]
 r64: [80..81]
 r65: [74..79]
 r66: [76..77]
 r67: [74..75]
 r68: [72..73]
 r69: [70..71]
 r70: [64..67]
 r71: [64..65]
 r72: [62..63]
 r73: [60..61]
 r74: [56..57]
 r75: [50..55]
 r76: [52..53]
 r77: [50..51]
 r78: [48..49]
 r79: [46..47]
 r80: [36..37]
 r81: [36..37]
 r82: [32..35]
 r83: [34..35]
 r84: [34..35]
 r85: [32..33]
 r86: [28..31]
 r87: [30..31]
 r88: [30..31]
 r89: [28..29]
 r90: [20..21]
 r91: [0..1]
 r92: [92..93]
 r93: [90..91]
 r94: [84..85]
 r95: [82..83]
 r96: [78..79]
 r97: [70..71]
 r98: [68..69]
 r99: [66..67]
 r100: [60..61]
 r101: [58..59]
 r102: [54..55]
 r103: [46..47]
 r104: [44..45]
 r105: [44..45]
 r106: [42..43]
 r107: [42..43]
 r108: [40..41]
 r109: [40..41]
 r110: [38..39]
 r111: [38..39]
 r112: [38..39]
 r113: [26..27]
 r114: [24..25]
 r115: [20..21]
 r116: [18..19]
 r117: [18..19]
 r118: [16..17]
 r119: [14..15]
 r120: [14..15]
 r121: [12..13]
 r122: [10..11]
 r123: [10..11]
 r124: [8..9]
 r125: [6..7]
 r126: [6..7]
 r127: [4..5]
 r128: [4..5]
 r130: [22..23]
	 Assigning to 130 (cl=FLOAT_REGS, orig=90, freq=3, tfirst=130, tfreq=3)...
	   Assign 9 to reload r130 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=304, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=288, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 164
changing reg in insn 159
changing reg in insn 117
changing reg in insn 69
changing reg in insn 36
changing reg in insn 169
changing reg in insn 9
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 42
changing reg in insn 45
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 96
changing reg in insn 98
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 102
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 111
changing reg in insn 169
changing reg in insn 173
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 74
changing reg in insn 76
changing reg in insn 75
changing reg in insn 77
changing reg in insn 79
changing reg in insn 81
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 90
changing reg in insn 93
changing reg in insn 91
changing reg in insn 94
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 130
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 137
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 144
changing reg in insn 145
changing reg in insn 151
changing reg in insn 153
changing reg in insn 152
changing reg in insn 153
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 140.


isbetween

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags]
;;  ref usage 	r0={34d,23u} r1={16d,9u} r2={9d,1u} r4={15d,8u} r5={15d,8u} r6={1d,55u} r7={1d,21u} r8={32d,28u} r9={23d,16u} r10={9d,2u} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={30d,7u} r18={7d} r19={7d} r20={1d,1u,4e} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={8d} r38={8d} r39={7d} r40={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} 
;;    total ref usage 624{441d,179u,4e} in 125{118 regular + 7 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:281 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:281 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])
        (reg:DI 1 dx [ x ])) mUtility.c:281 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ x ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])) mUtility.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 9 st(1) [orig:60 D.5132 ] [60])
        (mem:XF (reg/f:DI 0 ax [92]) [0 *x_2(D)+0 S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [92])
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 a+0 S8 A64])) mUtility.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:61 D.5132 ] [61])
        (mem:XF (reg/f:DI 0 ax [93]) [0 *a_4(D)+0 S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (nil)))
(insn 12 11 13 2 (set (reg:XF 8 st [orig:62 D.5132 ] [62])
        (minus:XF (reg:XF 9 st(1) [orig:60 D.5132 ] [60])
            (reg:XF 8 st [orig:61 D.5132 ] [61]))) mUtility.c:283 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5132 ] [61])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5132 ] [60])
            (nil))))
(insn 13 12 14 2 (set (reg:XF 8 st [orig:63 D.5132 ] [63])
        (abs:XF (reg:XF 8 st [orig:62 D.5132 ] [62]))) mUtility.c:283 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5132 ] [62])
        (nil)))
(insn 14 13 15 2 (set (reg:XF 9 st(1) [94])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 15 14 16 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [94])
            (reg:XF 8 st [orig:63 D.5132 ] [63]))) mUtility.c:283 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [94])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5132 ] [63])
            (nil))))
(jump_insn 16 15 20 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) mUtility.c:283 612 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 95 96 97
(note 20 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])) mUtility.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.5133 ] [64])
                (plus:DI (reg/f:DI 0 ax [95])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 23 22 24 3 (set (reg:XF 9 st(1) [orig:65 D.5132 ] [65])
        (mem:XF (reg/f:DI 0 ax [orig:64 D.5133 ] [64]) [0 *_8+0 S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 D.5133 ] [64])
        (nil)))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 a+0 S8 A64])) mUtility.c:283 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.5133 ] [66])
                (plus:DI (reg/f:DI 0 ax [96])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:283 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -264 [0xfffffffffffffef8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 26 25 27 3 (set (reg:XF 8 st [orig:67 D.5132 ] [67])
        (mem:XF (reg/f:DI 0 ax [orig:66 D.5133 ] [66]) [0 *_10+0 S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5133 ] [66])
        (nil)))
(insn 27 26 28 3 (set (reg:XF 8 st [orig:68 D.5132 ] [68])
        (minus:XF (reg:XF 9 st(1) [orig:65 D.5132 ] [65])
            (reg:XF 8 st [orig:67 D.5132 ] [67]))) mUtility.c:283 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5132 ] [67])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.5132 ] [65])
            (nil))))
(insn 28 27 29 3 (set (reg:XF 8 st [orig:69 D.5132 ] [69])
        (abs:XF (reg:XF 8 st [orig:68 D.5132 ] [68]))) mUtility.c:283 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5132 ] [68])
        (nil)))
(insn 29 28 30 3 (set (reg:XF 9 st(1) [97])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:283 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 30 29 31 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [97])
            (reg:XF 8 st [orig:69 D.5132 ] [69]))) mUtility.c:283 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [97])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5132 ] [69])
            (nil))))
(jump_insn 31 30 35 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) mUtility.c:283 612 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 35 31 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 200 4 (set (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (const_int 1 [0x1])) mUtility.c:283 89 {*movsi_internal}
     (nil))
(jump_insn 200 36 201 4 (set (pc)
        (label_ref 167)) mUtility.c:283 650 {jump}
     (nil)
 -> 167)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 201 200 39)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 71 72 73 98 99 100
(code_label 39 201 40 5 93 "" [2 uses])
(note 40 39 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 5 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])) mUtility.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 5 (set (reg:XF 9 st(1) [orig:70 D.5132 ] [70])
        (mem:XF (reg/f:DI 0 ax [98]) [0 *x_2(D)+0 S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [98])
        (nil)))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 b+0 S8 A64])) mUtility.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 5 (set (reg:XF 8 st [orig:71 D.5132 ] [71])
        (mem:XF (reg/f:DI 0 ax [99]) [0 *b_16(D)+0 S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn 45 44 46 5 (set (reg:XF 8 st [orig:72 D.5132 ] [72])
        (minus:XF (reg:XF 9 st(1) [orig:70 D.5132 ] [70])
            (reg:XF 8 st [orig:71 D.5132 ] [71]))) mUtility.c:284 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5132 ] [71])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:70 D.5132 ] [70])
            (nil))))
(insn 46 45 47 5 (set (reg:XF 8 st [orig:73 D.5132 ] [73])
        (abs:XF (reg:XF 8 st [orig:72 D.5132 ] [72]))) mUtility.c:284 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5132 ] [72])
        (nil)))
(insn 47 46 48 5 (set (reg:XF 9 st(1) [100])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 48 47 49 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [100])
            (reg:XF 8 st [orig:73 D.5132 ] [73]))) mUtility.c:284 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [100])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5132 ] [73])
            (nil))))
(jump_insn 49 48 53 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) mUtility.c:284 612 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74 75 76 77 78 79 101 102 103
(note 53 49 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 6 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])) mUtility.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.5133 ] [74])
                (plus:DI (reg/f:DI 0 ax [101])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 56 55 57 6 (set (reg:XF 9 st(1) [orig:75 D.5132 ] [75])
        (mem:XF (reg/f:DI 0 ax [orig:74 D.5133 ] [74]) [0 *_20+0 S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.5133 ] [74])
        (nil)))
(insn 57 56 58 6 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 b+0 S8 A64])) mUtility.c:284 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 6 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.5133 ] [76])
                (plus:DI (reg/f:DI 0 ax [102])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:284 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [102])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -272 [0xfffffffffffffef0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 59 58 60 6 (set (reg:XF 8 st [orig:77 D.5132 ] [77])
        (mem:XF (reg/f:DI 0 ax [orig:76 D.5133 ] [76]) [0 *_22+0 S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.5133 ] [76])
        (nil)))
(insn 60 59 61 6 (set (reg:XF 8 st [orig:78 D.5132 ] [78])
        (minus:XF (reg:XF 9 st(1) [orig:75 D.5132 ] [75])
            (reg:XF 8 st [orig:77 D.5132 ] [77]))) mUtility.c:284 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5132 ] [77])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:75 D.5132 ] [75])
            (nil))))
(insn 61 60 62 6 (set (reg:XF 8 st [orig:79 D.5132 ] [79])
        (abs:XF (reg:XF 8 st [orig:78 D.5132 ] [78]))) mUtility.c:284 480 {*absxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.5132 ] [78])
        (nil)))
(insn 62 61 63 6 (set (reg:XF 9 st(1) [103])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:284 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 63 62 64 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [103])
            (reg:XF 8 st [orig:79 D.5132 ] [79]))) mUtility.c:284 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [103])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5132 ] [79])
            (nil))))
(jump_insn 64 63 68 6 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) mUtility.c:284 612 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 68 64 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 202 7 (set (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (const_int 1 [0x1])) mUtility.c:284 89 {*movsi_internal}
     (nil))
(jump_insn 202 69 203 7 (set (pc)
        (label_ref 167)) mUtility.c:284 650 {jump}
     (nil)
 -> 167)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 203 202 72)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 80 81 82 83 84 85 86 87 88 89 90 104 105 106 107 108 109 110 111 112 113 114 115
(code_label 72 203 73 8 97 "" [2 uses])
(note 73 72 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (parallel [
            (set (reg:DI 1 dx [104])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:287 274 {*adddi_1}
     (nil))
(insn 75 74 76 8 (set (reg:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 a+0 S8 A64])) mUtility.c:287 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [104])) mUtility.c:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [104])
        (nil)))
(insn 77 76 78 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) mUtility.c:287 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(call_insn 78 77 79 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:287 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 79 78 80 8 (parallel [
            (set (reg:DI 1 dx [106])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:288 274 {*adddi_1}
     (nil))
(insn 80 79 81 8 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 b+0 S8 A64])) mUtility.c:288 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [106])) mUtility.c:288 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [106])
        (nil)))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) mUtility.c:288 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(call_insn 83 82 84 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:288 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 84 83 85 8 (parallel [
            (set (reg:DI 1 dx [108])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:289 274 {*adddi_1}
     (nil))
(insn 85 84 86 8 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [0 x+0 S8 A64])) mUtility.c:289 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [108])) mUtility.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [108])
        (nil)))
(insn 87 86 88 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) mUtility.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(call_insn 88 87 89 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:289 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 89 88 90 8 (parallel [
            (set (reg:DI 1 dx [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:292 274 {*adddi_1}
     (nil))
(insn 90 89 91 8 (parallel [
            (set (reg:DI 2 cx [111])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:292 274 {*adddi_1}
     (nil))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:292 274 {*adddi_1}
     (nil))
(insn 92 91 93 8 (set (reg:DI 1 dx)
        (reg:DI 1 dx [110])) mUtility.c:292 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [110])
        (nil)))
(insn 93 92 94 8 (set (reg:DI 4 si)
        (reg:DI 2 cx [111])) mUtility.c:292 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [111])
        (nil)))
(insn 94 93 95 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) mUtility.c:292 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(call_insn 95 94 96 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_cross_prod") [flags 0x3]  <function_decl 0x7f4452bcd100 _cross_prod>) [0 _cross_prod S1 A8])
            (const_int 0 [0]))) mUtility.c:292 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 96 95 97 8 (set (reg:XF 9 st(1) [orig:80 D.5132 ] [80])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 S+0 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 97 96 98 8 (set (reg:XF 8 st [orig:81 D.5132 ] [81])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 P2+0 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 98 97 99 8 (set (reg:XF 9 st(1) [orig:82 D.5132 ] [82])
        (mult:XF (reg:XF 9 st(1) [orig:80 D.5132 ] [80])
            (reg:XF 8 st [orig:81 D.5132 ] [81]))) mUtility.c:293 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.5132 ] [81])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:80 D.5132 ] [80])
            (nil))))
(insn 99 98 100 8 (set (reg:XF 10 st(2) [orig:83 D.5132 ] [83])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 S+16 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 100 99 101 8 (set (reg:XF 8 st [orig:84 D.5132 ] [84])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 P2+16 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 101 100 102 8 (set (reg:XF 8 st [orig:85 D.5132 ] [85])
        (mult:XF (reg:XF 8 st [orig:84 D.5132 ] [84])
            (reg:XF 10 st(2) [orig:83 D.5132 ] [83]))) mUtility.c:293 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.5132 ] [84])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:83 D.5132 ] [83])
            (nil))))
(insn 102 101 103 8 (set (reg:XF 9 st(1) [orig:86 D.5132 ] [86])
        (plus:XF (reg:XF 9 st(1) [orig:82 D.5132 ] [82])
            (reg:XF 8 st [orig:85 D.5132 ] [85]))) mUtility.c:293 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.5132 ] [85])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:82 D.5132 ] [82])
            (nil))))
(insn 103 102 104 8 (set (reg:XF 10 st(2) [orig:87 D.5132 ] [87])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 S+32 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 104 103 105 8 (set (reg:XF 8 st [orig:88 D.5132 ] [88])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 P2+32 S16 A128])) mUtility.c:293 131 {*movxf_internal_rex64}
     (nil))
(insn 105 104 106 8 (set (reg:XF 8 st [orig:89 D.5132 ] [89])
        (mult:XF (reg:XF 8 st [orig:88 D.5132 ] [88])
            (reg:XF 10 st(2) [orig:87 D.5132 ] [87]))) mUtility.c:293 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5132 ] [88])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:87 D.5132 ] [87])
            (nil))))
(insn 106 105 107 8 (set (reg:XF 8 st [113])
        (plus:XF (reg:XF 8 st [orig:89 D.5132 ] [89])
            (reg:XF 9 st(1) [orig:86 D.5132 ] [86]))) mUtility.c:293 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5132 ] [89])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:86 D.5132 ] [86])
            (nil))))
(insn 107 106 108 8 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 gc+0 S16 A128])
        (reg:XF 8 st [113])) mUtility.c:293 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [113])
        (nil)))
(insn 108 107 209 8 (set (reg:XF 8 st [114])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 gc+0 S16 A128])) mUtility.c:295 131 {*movxf_internal_rex64}
     (nil))
(insn 209 108 109 8 (set (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
        (reg:XF 8 st [114])) mUtility.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [114])
        (nil)))
(insn 109 209 210 8 (set (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
        (abs:XF (reg:XF 9 st(1) [orig:90 D.5132 ] [90]))) mUtility.c:295 480 {*absxf2_1}
     (nil))
(insn 210 109 110 8 (set (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
        (reg:XF 9 st(1) [orig:90 D.5132 ] [90])) mUtility.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
        (nil)))
(insn 110 210 111 8 (set (reg:XF 8 st [115])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S16 A128])) mUtility.c:295 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 9.9999999999999995474811182588625868561393872369080782e-8 [0x0.d6bf94d5e57a4p-23])
        (nil)))
(insn 111 110 112 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
            (reg:XF 8 st [115]))) mUtility.c:295 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [115])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:90 D.5132 ] [90])
            (nil))))
(jump_insn 112 111 116 8 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 204)
            (pc))) mUtility.c:295 612 {*jcc_1}
     (nil)
 -> 204)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 116 112 117 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 205 9 (set (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (const_int 0 [0])) mUtility.c:295 89 {*movsi_internal}
     (nil))
(jump_insn 205 117 206 9 (set (pc)
        (label_ref 167)) mUtility.c:295 650 {jump}
     (nil)
 -> 167)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 206 205 204)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 116 117 118 119 120 121 122 123 124 125 126
(code_label 204 206 121 10 113 "" [1 uses])
(note 121 204 122 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 10 (parallel [
            (set (reg:DI 1 dx [116])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:297 274 {*adddi_1}
     (nil))
(insn 123 122 124 10 (parallel [
            (set (reg:DI 0 ax [117])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:297 274 {*adddi_1}
     (nil))
(insn 124 123 125 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [116])) mUtility.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [116])
        (nil)))
(insn 125 124 126 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) mUtility.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [117])
        (nil)))
(call_insn 126 125 127 10 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:297 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 127 126 128 10 (set (reg:XF 8 st [118])
        (reg:XF 8 st)) mUtility.c:297 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 128 127 129 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [0 ax+0 S16 A128])
        (reg:XF 8 st [118])) mUtility.c:297 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [118])
        (nil)))
(insn 129 128 130 10 (parallel [
            (set (reg:DI 1 dx [119])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:298 274 {*adddi_1}
     (nil))
(insn 130 129 131 10 (parallel [
            (set (reg:DI 0 ax [120])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:298 274 {*adddi_1}
     (nil))
(insn 131 130 132 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [119])) mUtility.c:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [119])
        (nil)))
(insn 132 131 133 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [120])) mUtility.c:298 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [120])
        (nil)))
(call_insn 133 132 134 10 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:298 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 134 133 135 10 (set (reg:XF 8 st [121])
        (reg:XF 8 st)) mUtility.c:298 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 135 134 136 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 bx+0 S16 A128])
        (reg:XF 8 st [121])) mUtility.c:298 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [121])
        (nil)))
(insn 136 135 137 10 (parallel [
            (set (reg:DI 1 dx [122])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:299 274 {*adddi_1}
     (nil))
(insn 137 136 138 10 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:299 274 {*adddi_1}
     (nil))
(insn 138 137 139 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [122])) mUtility.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [122])
        (nil)))
(insn 139 138 140 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) mUtility.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [123])
        (nil)))
(call_insn 140 139 141 10 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:299 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 141 140 142 10 (set (reg:XF 8 st [124])
        (reg:XF 8 st)) mUtility.c:299 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 142 141 143 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 ab+0 S16 A128])
        (reg:XF 8 st [124])) mUtility.c:299 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [124])
        (nil)))
(insn 143 142 144 10 (set (reg:XF 9 st(1) [125])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 ab+0 S16 A128])) mUtility.c:301 131 {*movxf_internal_rex64}
     (nil))
(insn 144 143 145 10 (set (reg:XF 8 st [126])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [0 ax+0 S16 A128])) mUtility.c:301 131 {*movxf_internal_rex64}
     (nil))
(insn 145 144 146 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [125])
            (reg:XF 8 st [126]))) mUtility.c:301 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [126])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [125])
            (nil))))
(jump_insn 146 145 150 10 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 162)
            (pc))) mUtility.c:301 612 {*jcc_1}
     (nil)
 -> 162)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128
(note 150 146 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 11 (set (reg:XF 9 st(1) [127])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 ab+0 S16 A128])) mUtility.c:301 131 {*movxf_internal_rex64}
     (nil))
(insn 152 151 153 11 (set (reg:XF 8 st [128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 bx+0 S16 A128])) mUtility.c:301 131 {*movxf_internal_rex64}
     (nil))
(insn 153 152 154 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [127])
            (reg:XF 8 st [128]))) mUtility.c:301 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [128])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [127])
            (nil))))
(jump_insn 154 153 158 11 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 162)
            (pc))) mUtility.c:301 612 {*jcc_1}
     (nil)
 -> 162)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 158 154 159 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 207 12 (set (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (const_int 1 [0x1])) mUtility.c:301 89 {*movsi_internal}
     (nil))
(jump_insn 207 159 208 12 (set (pc)
        (label_ref 167)) mUtility.c:301 650 {jump}
     (nil)
 -> 167)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 208 207 162)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 162 208 163 13 102 "" [2 uses])
(note 163 162 164 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 167 13 (set (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (const_int 0 [0])) mUtility.c:302 89 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              9 [100.0%] 
;;              4 [100.0%] 
;;              7 [100.0%] 
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 91
(code_label 167 164 168 14 105 "" [4 uses])
(note 168 167 169 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 173 14 (set (reg:SI 0 ax [orig:91 <retval> ] [91])
        (reg:SI 0 ax [orig:59 D.5131 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5131 ] [59])
        (nil)))
(insn 173 169 176 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) mUtility.c:303 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:91 <retval> ] [91])
        (nil)))
(insn 176 173 0 14 (use (reg/i:SI 0 ax)) mUtility.c:303 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function freeTouch (freeTouch, funcdef_no=28, decl_uid=4067, cgraph_uid=28)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


freeTouch

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,8u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 91{69d,22u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 61
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mUtility.c:304 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [61])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:305 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:59 D.5134 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [61]) [0 *f_1(D)+0 S8 A64])) mUtility.c:305 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [61])
        (nil)))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:59 D.5134 ] [59])
            (const_int 0 [0]))) mUtility.c:305 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.5134 ] [59])
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 19)
            (pc))) mUtility.c:305 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 62 63
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [62])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:306 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:60 D.5134 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [62]) [0 *f_1(D)+0 S8 A64])) mUtility.c:306 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [62])
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:60 D.5134 ] [60])) mUtility.c:306 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.5134 ] [60])
        (nil)))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f4452db1000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mUtility.c:306 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [63])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:307 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 19 3 (set (mem/f:DI (reg/f:DI 0 ax [63]) [0 *f_1(D)+0 S8 A64])
        (const_int 0 [0])) mUtility.c:307 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [63])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 16 20 4 114 "" [1 uses])
(note 20 19 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function freeTouch2 (freeTouch2, funcdef_no=29, decl_uid=4070, cgraph_uid=29)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


freeTouch2

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,8u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 91{69d,22u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 61
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mUtility.c:310 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [61])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:59 D.5135 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [61]) [0 *f_1(D)+0 S8 A64])) mUtility.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [61])
        (nil)))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:59 D.5135 ] [59])
            (const_int 0 [0]))) mUtility.c:311 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.5135 ] [59])
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 19)
            (pc))) mUtility.c:311 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 62 63
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [62])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:312 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:60 D.5135 ] [60])
        (mem/f:DI (reg/f:DI 0 ax [62]) [0 *f_1(D)+0 S8 A64])) mUtility.c:312 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [62])
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:60 D.5135 ] [60])) mUtility.c:312 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.5135 ] [60])
        (nil)))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f4452db1000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mUtility.c:312 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [63])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 f+0 S8 A64])) mUtility.c:313 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 19 3 (set (mem/f:DI (reg/f:DI 0 ax [63]) [0 *f_1(D)+0 S8 A64])
        (const_int 0 [0])) mUtility.c:313 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [63])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 16 20 4 116 "" [1 uses])
(note 20 19 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function ffree_2D (ffree_2D, funcdef_no=30, decl_uid=1765, cgraph_uid=30)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 18:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 28.


ffree_2D

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,4u} r1={6d,3u} r2={3d} r4={3d,1u} r5={5d,3u} r6={1d,15u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 155{120d,35u,0e} in 19{17 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) mUtility.c:318 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mUtility.c:318 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 34 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:320 89 {*movsi_internal}
     (nil))
(jump_insn 34 7 35 2 (set (pc)
        (label_ref 19)) mUtility.c:320 650 {jump}
     (nil)
 -> 19)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 35 34 21)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63
(code_label 21 35 10 3 120 "" [1 uses])
(note 10 21 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:59 x.1 ] [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:322 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 dx [63])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mUtility.c:322 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 1 dx [orig:60 D.5136 ] [60])
        (sign_extend:DI (reg:SI 1 dx [63]))) mUtility.c:322 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [63])
        (nil)))
(insn 14 13 15 3 (parallel [
            (set (reg:DI 1 dx [orig:61 D.5136 ] [61])
                (ashift:DI (reg:DI 1 dx [orig:60 D.5136 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:322 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5136 ] [60])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5137 ] [62])
                (plus:DI (reg/f:DI 0 ax [orig:59 x.1 ] [59])
                    (reg:DI 1 dx [orig:61 D.5136 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:322 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5136 ] [61])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 x.1 ] [59])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:62 D.5137 ] [62])) mUtility.c:322 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5137 ] [62])
        (nil)))
(call_insn 17 16 18 3 (call (mem:QI (symbol_ref:DI ("freeTouch") [flags 0x3]  <function_decl 0x7f4452bcdf00 freeTouch>) [0 freeTouch S1 A8])
        (const_int 0 [0])) mUtility.c:322 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:320 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64
(code_label 19 18 20 4 119 "" [1 uses])
(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 20 23 4 (set (reg:SI 0 ax [64])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mUtility.c:320 89 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [64])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mUtility.c:320 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [64])
        (nil)))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) mUtility.c:320 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (parallel [
            (set (reg:DI 0 ax [65])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:325 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 27 26 28 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [65])) mUtility.c:325 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [65])
        (nil)))
(call_insn 28 27 33 5 (call (mem:QI (symbol_ref:DI ("freeTouch2") [flags 0x3]  <function_decl 0x7f4452bbad00 freeTouch2>) [0 freeTouch2 S1 A8])
        (const_int 0 [0])) mUtility.c:325 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 33 28 0 5 (const_int 0 [0]) mUtility.c:326 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function ffree_3D (ffree_3D, funcdef_no=31, decl_uid=1769, cgraph_uid=31)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 37:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 67: point = 0
   Insn 66: point = 0
   Insn 65: point = 1
  BB 10
   Insn 63: point = 2
   Insn 62: point = 2
   Insn 61: point = 3
  BB 8
   Insn 74: point = 4
   Insn 45: point = 4
  BB 7
   Insn 43: point = 4
   Insn 42: point = 4
   Insn 41: point = 5
  BB 2
   Insn 70: point = 6
   Insn 8: point = 6
   Insn 4: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 6
   Insn 37: point = 6
  BB 5
   Insn 35: point = 6
   Insn 34: point = 6
   Insn 33: point = 7
  BB 3
   Insn 72: point = 8
   Insn 12: point = 8
  BB 4
   Insn 29: point = 8
   Insn 28: point = 8
   Insn 27: point = 8
   Insn 26: point = 9
   Insn 25: point = 11
   Insn 24: point = 13
   Insn 23: point = 15
   Insn 22: point = 17
   Insn 21: point = 18
   Insn 20: point = 20
   Insn 19: point = 22
   Insn 18: point = 23
   Insn 17: point = 25
   Insn 16: point = 27
  BB 9
   Insn 57: point = 28
   Insn 56: point = 28
   Insn 55: point = 28
   Insn 54: point = 29
   Insn 53: point = 31
   Insn 52: point = 33
   Insn 51: point = 34
   Insn 50: point = 36
   Insn 49: point = 38
 r59: [24..25]
 r60: [21..23]
 r61: [19..20]
 r62: [12..18]
 r63: [14..15]
 r64: [12..13]
 r65: [10..11]
 r66: [8..9]
 r67: [35..36]
 r68: [32..34]
 r69: [30..31]
 r70: [28..29]
 r71: [26..27]
 r72: [21..22]
 r73: [16..17]
 r74: [6..7]
 r75: [4..5]
 r76: [37..38]
 r77: [32..33]
 r78: [2..3]
 r79: [0..1]
Compressing live ranges: from 39 to 36 - 92%
Ranges after the compression:
 r59: [22..23]
 r60: [20..21]
 r61: [18..19]
 r62: [12..17]
 r63: [14..15]
 r64: [12..13]
 r65: [10..11]
 r66: [8..9]
 r67: [32..33]
 r68: [30..31]
 r69: [28..29]
 r70: [26..27]
 r71: [24..25]
 r72: [20..21]
 r73: [16..17]
 r74: [6..7]
 r75: [4..5]
 r76: [34..35]
 r77: [30..31]
 r78: [2..3]
 r79: [0..1]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 67.


ffree_3D

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={20d,16u} r1={9d,6u,2e} r2={4d} r4={4d,1u} r5={7d,4u} r6={1d,35u} r7={1d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={15d,3u} r18={3d} r19={3d} r20={1d,1u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 270{186d,80u,4e} in 45{42 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) mUtility.c:328 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mUtility.c:328 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) mUtility.c:328 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ M ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 70 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(jump_insn 70 8 71 2 (set (pc)
        (label_ref 38)) mUtility.c:330 650 {jump}
     (nil)
 -> 38)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 40)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 40 71 11 3 126 "" [1 uses])
(note 11 40 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 72 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(jump_insn 72 12 73 3 (set (pc)
        (label_ref 30)) mUtility.c:330 650 {jump}
     (nil)
 -> 30)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 73 72 32)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 71 72 73
(code_label 32 73 15 4 125 "" [1 uses])
(note 15 32 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [71])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 0 ax [orig:59 D.5138 ] [59])
        (sign_extend:DI (reg:SI 0 ax [71]))) mUtility.c:330 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [71])
        (nil)))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 1 dx [orig:60 D.5138 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.5138 ] [59])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5138 ] [59])
        (nil)))
(insn 19 18 20 4 (set (reg/f:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:330 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.5139 ] [61])
                (plus:DI (reg/f:DI 0 ax [72])
                    (reg:DI 1 dx [orig:60 D.5138 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [72])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5138 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.5138 ] [60]))
                (nil)))))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [orig:62 D.5140 ] [62])
        (mem/f:DI (reg/f:DI 0 ax [orig:61 D.5139 ] [61]) [0 *_11+0 S8 A64])) mUtility.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.5139 ] [61])
        (nil)))
(insn 22 21 23 4 (set (reg:SI 1 dx [73])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 1 dx [orig:63 D.5138 ] [63])
        (sign_extend:DI (reg:SI 1 dx [73]))) mUtility.c:330 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [73])
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 1 dx [orig:64 D.5138 ] [64])
                (ashift:DI (reg:DI 1 dx [orig:63 D.5138 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.5138 ] [63])
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.5140 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:62 D.5140 ] [62])
                    (reg:DI 1 dx [orig:64 D.5138 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.5138 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5140 ] [62])
            (nil))))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:66 D.5141 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.5140 ] [65]) [0 *_15+0 S8 A64])) mUtility.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5140 ] [65])
        (nil)))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:66 D.5141 ] [66])) mUtility.c:330 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.5141 ] [66])
        (nil)))
(call_insn 28 27 29 4 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f4452db1000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mUtility.c:330 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 273 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74
(code_label 30 29 31 5 124 "" [1 uses])
(note 31 30 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 5 (set (reg:SI 0 ax [74])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [74])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 M+0 S4 A32]))) mUtility.c:330 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [74])
        (nil)))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) mUtility.c:330 612 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:330 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 75
(code_label 38 37 39 7 123 "" [1 uses])
(note 39 38 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 39 42 7 (set (reg:SI 0 ax [75])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:330 89 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [75])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mUtility.c:330 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [75])
        (nil)))
(jump_insn 43 42 44 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) mUtility.c:330 612 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 74 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:331 89 {*movsi_internal}
     (nil))
(jump_insn 74 45 75 8 (set (pc)
        (label_ref 58)) mUtility.c:331 650 {jump}
     (nil)
 -> 58)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 75 74 60)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 76 77
(code_label 60 75 48 9 128 "" [1 uses])
(note 48 60 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (set (reg:SI 0 ax [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:331 89 {*movsi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:DI 0 ax [orig:67 D.5138 ] [67])
        (sign_extend:DI (reg:SI 0 ax [76]))) mUtility.c:331 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [76])
        (nil)))
(insn 51 50 52 9 (parallel [
            (set (reg:DI 1 dx [orig:68 D.5138 ] [68])
                (ashift:DI (reg:DI 0 ax [orig:67 D.5138 ] [67])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:331 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.5138 ] [67])
        (nil)))
(insn 52 51 53 9 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:331 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 9 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.5139 ] [69])
                (plus:DI (reg/f:DI 0 ax [77])
                    (reg:DI 1 dx [orig:68 D.5138 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:331 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.5138 ] [68])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (reg:DI 1 dx [orig:68 D.5138 ] [68]))
                (nil)))))
(insn 54 53 55 9 (set (reg/f:DI 0 ax [orig:70 D.5140 ] [70])
        (mem/f:DI (reg/f:DI 0 ax [orig:69 D.5139 ] [69]) [0 *_22+0 S8 A64])) mUtility.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5139 ] [69])
        (nil)))
(insn 55 54 56 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:70 D.5140 ] [70])) mUtility.c:331 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.5140 ] [70])
        (nil)))
(call_insn 56 55 57 9 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f4452db1000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mUtility.c:331 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 57 56 58 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:331 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 78
(code_label 58 57 59 10 127 "" [1 uses])
(note 59 58 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 61 59 62 10 (set (reg:SI 0 ax [78])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:331 89 {*movsi_internal}
     (nil))
(insn 62 61 63 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [78])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mUtility.c:331 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [78])
        (nil)))
(jump_insn 63 62 64 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) mUtility.c:331 612 {*jcc_1}
     (nil)
 -> 60)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79
(note 64 63 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 11 (set (reg:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) mUtility.c:332 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [79])) mUtility.c:332 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [79])
        (nil)))
(call_insn 67 66 0 11 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f4452db1000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mUtility.c:332 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function find_st_indx (find_st_indx, funcdef_no=32, decl_uid=1775, cgraph_uid=32)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 73:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 91: point = 0
   Insn 88: point = 0
   Insn 84: point = 1
  BB 7
   Insn 98: point = 4
   Insn 68: point = 4
   Insn 67: point = 6
  BB 4
   Insn 94: point = 7
   Insn 35: point = 7
  BB 10
   Insn 81: point = 8
  BB 9
   Insn 79: point = 9
   Insn 78: point = 9
   Insn 77: point = 10
  BB 5
   Insn 96: point = 11
   Insn 41: point = 11
   Insn 40: point = 12
  BB 3
   Insn 33: point = 13
   Insn 32: point = 13
   Insn 31: point = 14
   Insn 30: point = 15
   Insn 29: point = 15
   Insn 28: point = 16
   Insn 27: point = 17
   Insn 26: point = 18
   Insn 25: point = 19
   Insn 24: point = 20
   Insn 23: point = 22
   Insn 22: point = 24
   Insn 21: point = 25
   Insn 20: point = 27
   Insn 19: point = 29
  BB 2
   Insn 17: point = 30
   Insn 16: point = 30
   Insn 15: point = 30
   Insn 14: point = 31
   Insn 13: point = 33
   Insn 6: point = 34
   Insn 5: point = 34
   Insn 4: point = 34
   Insn 3: point = 34
   Insn 2: point = 34
  BB 8
   Insn 73: point = 34
  BB 6
   Insn 65: point = 34
   Insn 64: point = 34
   Insn 63: point = 35
   Insn 62: point = 36
   Insn 61: point = 36
   Insn 60: point = 37
   Insn 59: point = 38
   Insn 58: point = 39
   Insn 57: point = 40
   Insn 56: point = 42
   Insn 55: point = 44
   Insn 54: point = 45
   Insn 53: point = 47
   Insn 52: point = 49
   Insn 51: point = 50
   Insn 50: point = 52
   Insn 49: point = 54
   Insn 48: point = 55
   Insn 47: point = 57
   Insn 46: point = 59
   Insn 45: point = 61
 r59: [7..8] [2..4]
 r60: [26..27]
 r61: [23..25]
 r62: [21..22]
 r63: [16..20]
 r64: [13..14]
 r65: [58..59]
 r66: [56..57]
 r67: [53..55]
 r68: [51..52]
 r69: [37..50]
 r70: [46..47]
 r71: [43..45]
 r72: [41..42]
 r73: [36..40]
 r74: [34..35]
 r75: [0..1]
 r78: [30..31]
 r79: [32..33]
 r80: [28..29]
 r81: [23..24]
 r82: [17..19]
 r83: [15..18]
 r84: [11..12]
 r85: [60..61]
 r86: [53..54]
 r87: [48..49]
 r88: [43..44]
 r89: [38..39]
 r90: [5..6]
 r91: [9..10]
Compressing live ranges: from 62 to 50 - 80%
Ranges after the compression:
 r59: [6..7] [2..3]
 r60: [20..21]
 r61: [18..19]
 r62: [16..17]
 r63: [14..15]
 r64: [12..13]
 r65: [46..47]
 r66: [44..45]
 r67: [42..43]
 r68: [40..41]
 r69: [30..39]
 r70: [36..37]
 r71: [34..35]
 r72: [32..33]
 r73: [30..31]
 r74: [28..29]
 r75: [0..1]
 r78: [24..25]
 r79: [26..27]
 r80: [22..23]
 r81: [18..19]
 r82: [14..15]
 r83: [14..15]
 r84: [10..11]
 r85: [48..49]
 r86: [42..43]
 r87: [38..39]
 r88: [34..35]
 r89: [30..31]
 r90: [4..5]
 r91: [8..9]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 81
changing reg in insn 68
changing reg in insn 35
changing reg in insn 84
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 60
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 84
changing reg in insn 88
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 29
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 67
changing reg in insn 68
changing reg in insn 77
changing reg in insn 78
starting the processing of deferred insns
ending the processing of deferred insns


find_st_indx

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={30d,28u} r1={10d,8u,3e} r2={5d,3u} r4={5d,3u} r5={5d,3u} r6={1d,36u} r7={1d,13u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={16d,4u} r18={2d} r19={2d} r20={1d,1u,5e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 268{160d,100u,8e} in 62{60 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 78 79
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])
        (reg:DI 5 di [ nvp ])) mUtility.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ nvp ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_nvp+0 S4 A32])
        (reg:SI 4 si [ n_nvp ])) mUtility.c:335 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ n_nvp ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 st_point+0 S8 A64])
        (reg:DI 1 dx [ st_point ])) mUtility.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ st_point ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 st_indx+0 S4 A32])
        (reg:SI 2 cx [ st_indx ])) mUtility.c:335 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ st_indx ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 old_st_point+0 S8 A64])
        (reg:DI 37 r8 [ old_st_point ])) mUtility.c:335 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ old_st_point ])
        (nil)))
(note 7 6 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 7 14 2 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 n_nvp+0 S4 A32])) mUtility.c:336 89 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [78])
                (plus:SI (reg:SI 0 ax [79])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:336 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 n_nvp+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 N+0 S4 A32])
        (reg:SI 0 ax [78])) mUtility.c:336 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [78])
        (nil)))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 st_indx+0 S4 A32])
            (const_int 0 [0]))) mUtility.c:337 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) mUtility.c:337 612 {*jcc_1}
     (nil)
 -> 38)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 80 81 82 83
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:SI 0 ax [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 st_indx+0 S4 A32])) mUtility.c:337 89 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:60 D.5143 ] [60])
        (sign_extend:DI (reg:SI 0 ax [80]))) mUtility.c:337 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [80])
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [orig:61 D.5143 ] [61])
                (ashift:DI (reg:DI 0 ax [orig:60 D.5143 ] [60])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:337 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.5143 ] [60])
        (nil)))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])) mUtility.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.5144 ] [62])
                (plus:DI (reg/f:DI 0 ax [81])
                    (reg:DI 1 dx [orig:61 D.5143 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:337 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.5143 ] [61])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:61 D.5143 ] [61]))
                (nil)))))
(insn 24 23 25 3 (set (reg/f:DI 2 cx [orig:63 D.5145 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.5144 ] [62]) [0 *_9+0 S8 A64])) mUtility.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.5144 ] [62])
        (nil)))
(insn 25 24 26 3 (set (reg:DI 1 dx [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 st_point+0 S8 A64])) mUtility.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg:DI 0 ax [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 old_st_point+0 S8 A64])) mUtility.c:337 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (set (reg:DI 1 dx)
        (reg:DI 1 dx [82])) mUtility.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [82])
        (nil)))
(insn 28 27 29 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:63 D.5145 ] [63])) mUtility.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:63 D.5145 ] [63])
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [83])) mUtility.c:337 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(call_insn 30 29 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x3]  <function_decl 0x7f4452e3cb00 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mUtility.c:337 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 31 30 32 3 (set (reg:SI 0 ax [orig:64 D.5142 ] [64])
        (reg:SI 0 ax)) mUtility.c:337 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 32 31 33 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 D.5142 ] [64])
            (const_int 0 [0]))) mUtility.c:337 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.5142 ] [64])
        (nil)))
(jump_insn 33 32 34 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) mUtility.c:337 612 {*jcc_1}
     (nil)
 -> 38)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 94 4 (set (reg:SI 0 ax [orig:59 D.5142 ] [59])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 st_indx+0 S4 A32])) mUtility.c:337 89 {*movsi_internal}
     (nil))
(jump_insn 94 35 95 4 (set (pc)
        (label_ref 82)) mUtility.c:337 650 {jump}
     (nil)
 -> 82)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 95 94 38)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 84
(code_label 38 95 39 5 130 "" [2 uses])
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 st_indx+0 S4 A32])) mUtility.c:338 89 {*movsi_internal}
     (nil))
(insn 41 40 96 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (reg:SI 0 ax [84])) mUtility.c:338 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [84])
        (nil)))
(jump_insn 96 41 97 5 (set (pc)
        (label_ref 74)) mUtility.c:338 650 {jump}
     (nil)
 -> 74)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 76)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 85 86 87 88 89
(code_label 76 97 44 6 134 "" [1 uses])
(note 44 76 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:339 89 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:DI 0 ax [orig:65 D.5146 ] [65])
        (sign_extend:DI (reg:SI 0 ax [85]))) mUtility.c:339 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [85])
        (nil)))
(insn 47 46 48 6 (parallel [
            (set (reg:DI 0 ax [orig:66 D.5146 ] [66])
                (plus:DI (reg:DI 0 ax [orig:65 D.5146 ] [65])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.5146 ] [65])
        (nil)))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 1 dx [orig:67 D.5146 ] [67])
                (ashift:DI (reg:DI 0 ax [orig:66 D.5146 ] [66])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.5146 ] [66])
        (nil)))
(insn 49 48 50 6 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])) mUtility.c:339 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.5144 ] [68])
                (plus:DI (reg/f:DI 0 ax [86])
                    (reg:DI 1 dx [orig:67 D.5146 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [86])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.5146 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:67 D.5146 ] [67]))
                (nil)))))
(insn 51 50 52 6 (set (reg/f:DI 2 cx [orig:69 D.5145 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [orig:68 D.5144 ] [68]) [0 *_19+0 S8 A64])) mUtility.c:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.5144 ] [68])
        (nil)))
(insn 52 51 53 6 (set (reg:SI 0 ax [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:339 89 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 0 ax [orig:70 D.5143 ] [70])
        (sign_extend:DI (reg:SI 0 ax [87]))) mUtility.c:339 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [87])
        (nil)))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 1 dx [orig:71 D.5143 ] [71])
                (ashift:DI (reg:DI 0 ax [orig:70 D.5143 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 D.5143 ] [70])
        (nil)))
(insn 55 54 56 6 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])) mUtility.c:339 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 0 ax [orig:72 D.5144 ] [72])
                (plus:DI (reg/f:DI 0 ax [88])
                    (reg:DI 1 dx [orig:71 D.5143 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.5143 ] [71])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 nvp+0 S8 A64])
                    (reg:DI 1 dx [orig:71 D.5143 ] [71]))
                (nil)))))
(insn 57 56 58 6 (set (reg/f:DI 0 ax [orig:73 D.5145 ] [73])
        (mem/f:DI (reg/f:DI 0 ax [orig:72 D.5144 ] [72]) [0 *_23+0 S8 A64])) mUtility.c:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:72 D.5144 ] [72])
        (nil)))
(insn 58 57 59 6 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 st_point+0 S8 A64])) mUtility.c:339 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 6 (set (reg:DI 1 dx)
        (reg:DI 1 dx [89])) mUtility.c:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [89])
        (nil)))
(insn 60 59 61 6 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:69 D.5145 ] [69])) mUtility.c:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:69 D.5145 ] [69])
        (nil)))
(insn 61 60 62 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:73 D.5145 ] [73])) mUtility.c:339 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.5145 ] [73])
        (nil)))
(call_insn 62 61 63 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x3]  <function_decl 0x7f4452e3cb00 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mUtility.c:339 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 63 62 64 6 (set (reg:SI 0 ax [orig:74 D.5142 ] [74])
        (reg:SI 0 ax)) mUtility.c:339 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 64 63 65 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:74 D.5142 ] [74])
            (const_int 0 [0]))) mUtility.c:339 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:74 D.5142 ] [74])
        (nil)))
(jump_insn 65 64 66 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) mUtility.c:339 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 90
(note 66 65 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 7 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:339 89 {*movsi_internal}
     (nil))
(insn 68 67 98 7 (parallel [
            (set (reg:SI 0 ax [orig:59 D.5142 ] [59])
                (plus:SI (reg:SI 0 ax [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:339 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [90])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(jump_insn 98 68 99 7 (set (pc)
        (label_ref 82)) mUtility.c:339 650 {jump}
     (nil)
 -> 82)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 99 98 71)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 71 99 72 8 133 "" [1 uses])
(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:338 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91
(code_label 74 73 75 9 132 "" [1 uses])
(note 75 74 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 75 78 9 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mUtility.c:338 89 {*movsi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [91])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 N+0 S4 A32]))) mUtility.c:338 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [91])
        (nil)))
(jump_insn 79 78 80 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) mUtility.c:338 612 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       6
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 80 79 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg:SI 0 ax [orig:59 D.5142 ] [59])
        (const_int -1 [0xffffffffffffffff])) mUtility.c:342 89 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              4 [100.0%] 
;;              7 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 75
(code_label 82 81 83 11 131 "" [2 uses])
(note 83 82 84 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 88 11 (set (reg:SI 0 ax [orig:75 <retval> ] [75])
        (reg:SI 0 ax [orig:59 D.5142 ] [59])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.5142 ] [59])
        (nil)))
(insn 88 84 91 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:75 <retval> ] [75])) mUtility.c:344 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:75 <retval> ] [75])
        (nil)))
(insn 91 88 0 11 (use (reg/i:SI 0 ax)) mUtility.c:344 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function mischia (mischia, funcdef_no=33, decl_uid=1778, cgraph_uid=33)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 18:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 67:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) ?mr {*cmpsi_ccno_1}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 78: point = 0
  BB 7
   Insn 72: point = 0
   Insn 71: point = 0
  BB 5
   Insn 81: point = 0
   Insn 31: point = 0
   Insn 30: point = 1
   Insn 29: point = 3
  BB 4
   Insn 24: point = 4
   Insn 23: point = 4
   Insn 22: point = 5
  BB 2
   Insn 79: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 3
   Insn 18: point = 6
   Insn 17: point = 6
   Insn 16: point = 7
   Insn 15: point = 8
   Insn 14: point = 10
   Insn 13: point = 11
   Insn 12: point = 13
   Insn 11: point = 15
  BB 6
   Insn 67: point = 16
   Insn 66: point = 16
   Insn 65: point = 17
   Insn 64: point = 18
   Insn 63: point = 20
   Insn 62: point = 21
   Insn 61: point = 23
   Insn 60: point = 25
   Insn 59: point = 26
   Insn 58: point = 27
   Insn 57: point = 29
   Insn 56: point = 31
   Insn 55: point = 32
   Insn 54: point = 34
   Insn 53: point = 36
   Insn 52: point = 37
   Insn 51: point = 39
   Insn 50: point = 40
   Insn 49: point = 42
   Insn 48: point = 44
   Insn 47: point = 45
   Insn 46: point = 46
   Insn 45: point = 48
   Insn 44: point = 50
   Insn 43: point = 51
   Insn 42: point = 53
   Insn 41: point = 55
   Insn 40: point = 56
   Insn 39: point = 57
   Insn 38: point = 58
   Insn 37: point = 58
   Insn 36: point = 59
   Insn 35: point = 61
 r59: [12..13]
 r60: [9..11]
 r61: [6..8]
 r62: [58..59]
 r63: [52..53]
 r64: [49..51]
 r65: [47..48]
 r66: [41..42]
 r67: [38..40]
 r68: [26..37]
 r69: [33..34]
 r70: [30..32]
 r71: [28..29]
 r72: [26..27]
 r73: [22..23]
 r74: [19..21]
 r75: [16..18]
 r76: [14..15]
 r77: [9..10]
 r78: [6..7]
 r79: [4..5]
 r82: [0..1]
 r83: [2..3]
 r84: [60..61]
 r85: [56..57]
 r86: [54..55]
 r87: [49..50]
 r88: [45..46]
 r89: [43..44]
 r90: [38..39]
 r91: [35..36]
 r92: [30..31]
 r93: [24..25]
 r94: [19..20]
 r95: [16..17]
Compressing live ranges: from 62 to 54 - 87%
Ranges after the compression:
 r59: [10..11]
 r60: [8..9]
 r61: [6..7]
 r62: [50..51]
 r63: [44..45]
 r64: [42..43]
 r65: [40..41]
 r66: [34..35]
 r67: [32..33]
 r68: [22..31]
 r69: [28..29]
 r70: [26..27]
 r71: [24..25]
 r72: [22..23]
 r73: [18..19]
 r74: [16..17]
 r75: [14..15]
 r76: [12..13]
 r77: [8..9]
 r78: [6..7]
 r79: [4..5]
 r82: [0..1]
 r83: [2..3]
 r84: [52..53]
 r85: [48..49]
 r86: [46..47]
 r87: [42..43]
 r88: [38..39]
 r89: [36..37]
 r90: [32..33]
 r91: [30..31]
 r92: [26..27]
 r93: [20..21]
 r94: [16..17]
 r95: [14..15]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 52
changing reg in insn 59
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 38.


mischia

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={29d,28u} r1={9d,7u,4e} r2={3d,1u,1e} r4={2d,1u} r5={3d,2u} r6={1d,35u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={17d,2u} r18={1d} r19={1d} r20={1d,1u,7e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 212{114d,86u,12e} in 55{54 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
        (reg:DI 5 di [ carte ])) mUtility.c:345 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ carte ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mUtility.c:345 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 79 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mUtility.c:348 89 {*movsi_internal}
     (nil))
(jump_insn 79 7 80 2 (set (pc)
        (label_ref 19)) mUtility.c:348 650 {jump}
     (nil)
 -> 19)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 21)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 76 77 78
(code_label 21 80 10 3 137 "" [1 uses])
(note 10 21 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [76])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:348 89 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 0 ax [orig:59 D.5147 ] [59])
        (sign_extend:DI (reg:SI 0 ax [76]))) mUtility.c:348 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [76])
        (nil)))
(insn 13 12 14 3 (parallel [
            (set (reg:DI 1 dx [orig:60 D.5147 ] [60])
                (ashift:DI (reg:DI 0 ax [orig:59 D.5147 ] [59])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:348 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.5147 ] [59])
        (nil)))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])) mUtility.c:348 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 1 dx [orig:61 D.5148 ] [61])
                (plus:DI (reg:DI 1 dx [orig:60 D.5147 ] [60])
                    (reg/f:DI 0 ax [77])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:348 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.5147 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.5147 ] [60]))
                (nil)))))
(insn 16 15 17 3 (set (reg:SI 0 ax [78])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:348 89 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (mem:SI (reg/f:DI 1 dx [orig:61 D.5148 ] [61]) [0 *_8+0 S4 A32])
        (reg:SI 0 ax [78])) mUtility.c:348 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [78])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:61 D.5148 ] [61])
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:348 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79
(code_label 19 18 20 4 136 "" [1 uses])
(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 20 23 4 (set (reg:SI 0 ax [79])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:348 89 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [79])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mUtility.c:348 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [79])
        (nil)))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) mUtility.c:348 612 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82 83
(note 25 24 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 25 30 5 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])) mUtility.c:349 89 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:SI 0 ax [82])
                (plus:SI (reg:SI 0 ax [83])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:349 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [83])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 31 30 81 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 0 ax [82])) mUtility.c:349 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [82])
        (nil)))
(jump_insn 81 31 82 5 (set (pc)
        (label_ref 68)) mUtility.c:349 650 {jump}
     (nil)
 -> 68)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 82 81 70)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 69 70 71 72 73 74 75 84 85 86 87 88 89 90 91 92 93 94 95
(code_label 70 82 34 6 139 "" [1 uses])
(note 34 70 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:350 89 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:SI 0 ax [orig:62 D.5149 ] [62])
                (plus:SI (reg:SI 0 ax [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:350 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [84])
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (const_int 1 [0x1]))
            (nil))))
(insn 37 36 38 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:62 D.5149 ] [62])) mUtility.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.5149 ] [62])
        (nil)))
(call_insn 38 37 39 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("irand") [flags 0x3]  <function_decl 0x7f4452e3ca00 irand>) [0 irand S1 A8])
            (const_int 0 [0]))) mUtility.c:350 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 39 38 40 6 (set (reg:SI 0 ax [85])
        (reg:SI 0 ax)) mUtility.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 40 39 41 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])
        (reg:SI 0 ax [85])) mUtility.c:350 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [85])
        (nil)))
(insn 41 40 42 6 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:351 89 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 0 ax [orig:63 D.5147 ] [63])
        (sign_extend:DI (reg:SI 0 ax [86]))) mUtility.c:351 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [86])
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 1 dx [orig:64 D.5147 ] [64])
                (ashift:DI (reg:DI 0 ax [orig:63 D.5147 ] [63])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:351 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:63 D.5147 ] [63])
        (nil)))
(insn 44 43 45 6 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])) mUtility.c:351 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.5148 ] [65])
                (plus:DI (reg/f:DI 0 ax [87])
                    (reg:DI 1 dx [orig:64 D.5147 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:351 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.5147 ] [64])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
                    (reg:DI 1 dx [orig:64 D.5147 ] [64]))
                (nil)))))
(insn 46 45 47 6 (set (reg:SI 0 ax [88])
        (mem:SI (reg/f:DI 0 ax [orig:65 D.5148 ] [65]) [0 *_15+0 S4 A32])) mUtility.c:351 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.5148 ] [65])
        (nil)))
(insn 47 46 48 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 comodo+0 S4 A32])
        (reg:SI 0 ax [88])) mUtility.c:351 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(insn 48 47 49 6 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mUtility.c:352 89 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:DI 0 ax [orig:66 D.5147 ] [66])
        (sign_extend:DI (reg:SI 0 ax [89]))) mUtility.c:352 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [89])
        (nil)))
(insn 50 49 51 6 (parallel [
            (set (reg:DI 1 dx [orig:67 D.5147 ] [67])
                (ashift:DI (reg:DI 0 ax [orig:66 D.5147 ] [66])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:352 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.5147 ] [66])
        (nil)))
(insn 51 50 52 6 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])) mUtility.c:352 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 6 (parallel [
            (set (reg/f:DI 1 dx [orig:68 D.5148 ] [68])
                (plus:DI (reg:DI 1 dx [orig:67 D.5147 ] [67])
                    (reg/f:DI 0 ax [90])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:352 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.5147 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
                    (reg:DI 1 dx [orig:67 D.5147 ] [67]))
                (nil)))))
(insn 53 52 54 6 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])) mUtility.c:352 89 {*movsi_internal}
     (nil))
(insn 54 53 55 6 (set (reg:DI 0 ax [orig:69 D.5147 ] [69])
        (sign_extend:DI (reg:SI 0 ax [91]))) mUtility.c:352 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [91])
        (nil)))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 2 cx [orig:70 D.5147 ] [70])
                (ashift:DI (reg:DI 0 ax [orig:69 D.5147 ] [69])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:352 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:69 D.5147 ] [69])
        (nil)))
(insn 56 55 57 6 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])) mUtility.c:352 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5148 ] [71])
                (plus:DI (reg/f:DI 0 ax [92])
                    (reg:DI 2 cx [orig:70 D.5147 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:352 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [92])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:70 D.5147 ] [70])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
                    (reg:DI 2 cx [orig:70 D.5147 ] [70]))
                (nil)))))
(insn 58 57 59 6 (set (reg:SI 0 ax [orig:72 D.5149 ] [72])
        (mem:SI (reg/f:DI 0 ax [orig:71 D.5148 ] [71]) [0 *_22+0 S4 A32])) mUtility.c:352 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5148 ] [71])
        (nil)))
(insn 59 58 60 6 (set (mem:SI (reg/f:DI 1 dx [orig:68 D.5148 ] [68]) [0 *_19+0 S4 A32])
        (reg:SI 0 ax [orig:72 D.5149 ] [72])) mUtility.c:352 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:72 D.5149 ] [72])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.5148 ] [68])
            (nil))))
(insn 60 59 61 6 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])) mUtility.c:353 89 {*movsi_internal}
     (nil))
(insn 61 60 62 6 (set (reg:DI 0 ax [orig:73 D.5147 ] [73])
        (sign_extend:DI (reg:SI 0 ax [93]))) mUtility.c:353 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [93])
        (nil)))
(insn 62 61 63 6 (parallel [
            (set (reg:DI 1 dx [orig:74 D.5147 ] [74])
                (ashift:DI (reg:DI 0 ax [orig:73 D.5147 ] [73])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:353 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:73 D.5147 ] [73])
        (nil)))
(insn 63 62 64 6 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])) mUtility.c:353 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg/f:DI 1 dx [orig:75 D.5148 ] [75])
                (plus:DI (reg:DI 1 dx [orig:74 D.5147 ] [74])
                    (reg/f:DI 0 ax [94])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:353 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.5147 ] [74])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 carte+0 S8 A64])
                    (reg:DI 1 dx [orig:74 D.5147 ] [74]))
                (nil)))))
(insn 65 64 66 6 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 comodo+0 S4 A32])) mUtility.c:353 89 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (mem:SI (reg/f:DI 1 dx [orig:75 D.5148 ] [75]) [0 *_26+0 S4 A32])
        (reg:SI 0 ax [95])) mUtility.c:353 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:75 D.5148 ] [75])
            (nil))))
(insn 67 66 68 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:349 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 68 67 69 7 138 "" [1 uses])
(note 69 68 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 71 69 72 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) mUtility.c:349 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 7 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) mUtility.c:349 612 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 73 72 78 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 78 73 0 8 (const_int 0 [0]) mUtility.c:355 676 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function coord (coord, funcdef_no=34, decl_uid=1790, cgraph_uid=34)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=272, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=256, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 19:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 27:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 48:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
      Creating newreg=176 from oldreg=166, assigning class FLOAT_REGS to r176
   48: r176:XF=r176:XF/r63:XF
      REG_DEAD r63:XF
      REG_DEAD r60:XF
    Inserting insn reload before:
  160: r176:XF=r60:XF
    Inserting insn reload after:
  161: r166:XF=r176:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 52:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 55:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 57:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 60:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 63:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 66:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 72:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 82:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=177 from oldreg=94, assigning class FLOAT_REGS to r177
   84: r177:XF=-r177:XF
      REG_DEAD r93:XF
    Inserting insn reload before:
  162: r177:XF=r93:XF
    Inserting insn reload after:
  163: r94:XF=r177:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 86:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 88:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 91:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 94:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 97:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 100:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 103:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 113:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 115:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=178 from oldreg=122, assigning class FLOAT_REGS to r178
  115: r178:XF=-r178:XF
      REG_DEAD r121:XF
    Inserting insn reload before:
  164: r178:XF=r121:XF
    Inserting insn reload after:
  165: r122:XF=r178:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 117:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 119:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 122:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 128:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 131:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 134:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 137:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 143:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=179 from oldreg=60, assigning class FLOAT_REGS to inheritance r179
    Original reg change 60->179 (bb2):
   39: r179:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  166: r60:XF=r179:XF

    Inheritance reuse change 60->179 (bb2):
  160: r176:XF=r179:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   166: r60:XF=r179:XF
deleting insn with uid = 166.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 157: point = 0
   Insn 154: point = 0
   Insn 150: point = 1
   Insn 147: point = 3
   Insn 146: point = 4
   Insn 145: point = 4
   Insn 144: point = 5
   Insn 143: point = 6
   Insn 142: point = 7
   Insn 141: point = 8
   Insn 140: point = 9
   Insn 139: point = 11
   Insn 138: point = 13
   Insn 137: point = 14
   Insn 136: point = 16
   Insn 135: point = 18
   Insn 134: point = 19
   Insn 133: point = 21
   Insn 132: point = 22
   Insn 131: point = 23
   Insn 130: point = 25
   Insn 129: point = 27
   Insn 128: point = 28
   Insn 127: point = 30
   Insn 126: point = 31
   Insn 125: point = 32
   Insn 124: point = 34
   Insn 123: point = 36
   Insn 122: point = 37
   Insn 121: point = 39
   Insn 120: point = 40
   Insn 119: point = 41
   Insn 118: point = 43
   Insn 117: point = 44
   Insn 116: point = 46
   Insn 165: point = 47
	Hard reg 10 is preferable by r178 with profit 1
   Insn 115: point = 49
   Insn 164: point = 49
	Hard reg 10 is preferable by r178 with profit 1
	Hard reg 8 is preferable by r178 with profit 1
   Insn 114: point = 51
   Insn 113: point = 52
   Insn 112: point = 54
   Insn 111: point = 55
   Insn 110: point = 56
   Insn 109: point = 57
   Insn 108: point = 59
   Insn 107: point = 61
   Insn 106: point = 62
   Insn 105: point = 64
   Insn 104: point = 66
   Insn 103: point = 67
   Insn 102: point = 69
   Insn 101: point = 70
   Insn 100: point = 71
   Insn 99: point = 73
   Insn 98: point = 75
   Insn 97: point = 76
   Insn 96: point = 78
   Insn 95: point = 79
   Insn 94: point = 80
   Insn 93: point = 82
   Insn 92: point = 84
   Insn 91: point = 85
   Insn 90: point = 87
   Insn 89: point = 88
   Insn 88: point = 89
   Insn 87: point = 91
   Insn 86: point = 92
   Insn 85: point = 94
   Insn 163: point = 95
	Hard reg 10 is preferable by r177 with profit 1
   Insn 84: point = 97
   Insn 162: point = 97
	Hard reg 10 is preferable by r177 with profit 1
	Hard reg 8 is preferable by r177 with profit 1
   Insn 83: point = 99
   Insn 82: point = 100
   Insn 81: point = 102
   Insn 80: point = 103
   Insn 79: point = 104
   Insn 78: point = 105
   Insn 77: point = 107
   Insn 76: point = 109
   Insn 75: point = 110
   Insn 74: point = 112
   Insn 73: point = 114
   Insn 72: point = 115
   Insn 71: point = 117
   Insn 70: point = 118
   Insn 69: point = 119
   Insn 68: point = 121
   Insn 67: point = 123
   Insn 66: point = 124
   Insn 65: point = 126
   Insn 64: point = 127
   Insn 63: point = 128
   Insn 62: point = 130
   Insn 61: point = 132
   Insn 60: point = 133
   Insn 59: point = 135
   Insn 58: point = 136
   Insn 57: point = 137
   Insn 56: point = 139
   Insn 55: point = 140
   Insn 54: point = 142
   Insn 53: point = 143
   Insn 52: point = 144
   Insn 51: point = 146
   Insn 50: point = 147
   Insn 49: point = 148
   Insn 161: point = 149
	Hard reg 8 is preferable by r176 with profit 1
   Insn 48: point = 151
   Insn 160: point = 152
	   Creating copy r176<-r179@1
   Insn 47: point = 154
   Insn 46: point = 156
   Insn 45: point = 157
   Insn 44: point = 159
   Insn 43: point = 160
   Insn 42: point = 161
   Insn 41: point = 161
   Insn 40: point = 162
   Insn 39: point = 163
	Hard reg 8 is preferable by r179 with profit 1
   Insn 38: point = 164
   Insn 37: point = 164
   Insn 36: point = 165
   Insn 35: point = 166
   Insn 34: point = 167
   Insn 33: point = 168
   Insn 32: point = 168
   Insn 31: point = 169
   Insn 30: point = 170
   Insn 29: point = 171
   Insn 28: point = 173
   Insn 27: point = 174
   Insn 26: point = 176
   Insn 25: point = 177
   Insn 24: point = 178
   Insn 23: point = 179
   Insn 22: point = 180
   Insn 21: point = 180
   Insn 20: point = 181
   Insn 19: point = 182
   Insn 18: point = 183
   Insn 17: point = 184
   Insn 16: point = 184
   Insn 15: point = 185
   Insn 14: point = 186
   Insn 13: point = 187
   Insn 12: point = 188
   Insn 11: point = 188
   Insn 10: point = 189
   Insn 9: point = 190
   Insn 8: point = 191
   Insn 4: point = 192
   Insn 3: point = 192
   Insn 2: point = 192
 r59: [172..174]
 r61: [158..160]
 r62: [155..157]
 r63: [151..154]
 r64: [145..147]
 r65: [106..144]
 r66: [141..143]
 r67: [141..142]
 r68: [138..140]
 r69: [138..139]
 r70: [129..137]
 r71: [134..136]
 r72: [134..135]
 r73: [131..133]
 r74: [131..132]
 r75: [129..130]
 r76: [120..128]
 r77: [125..127]
 r78: [125..126]
 r79: [122..124]
 r80: [122..123]
 r81: [120..121]
 r82: [111..119]
 r83: [116..118]
 r84: [116..117]
 r85: [113..115]
 r86: [113..114]
 r87: [111..112]
 r88: [108..110]
 r89: [106..107]
 r90: [104..105]
 r91: [101..103]
 r92: [58..100]
 r93: [98..99]
 r94: [93..95]
 r95: [93..94]
 r96: [90..92]
 r97: [90..91]
 r98: [81..89]
 r99: [86..88]
 r100: [86..87]
 r101: [83..85]
 r102: [83..84]
 r103: [81..82]
 r104: [72..80]
 r105: [77..79]
 r106: [77..78]
 r107: [74..76]
 r108: [74..75]
 r109: [72..73]
 r110: [63..71]
 r111: [68..70]
 r112: [68..69]
 r113: [65..67]
 r114: [65..66]
 r115: [63..64]
 r116: [60..62]
 r117: [58..59]
 r118: [56..57]
 r119: [53..55]
 r120: [10..52]
 r121: [50..51]
 r122: [45..47]
 r123: [45..46]
 r124: [42..44]
 r125: [42..43]
 r126: [33..41]
 r127: [38..40]
 r128: [38..39]
 r129: [35..37]
 r130: [35..36]
 r131: [33..34]
 r132: [24..32]
 r133: [29..31]
 r134: [29..30]
 r135: [26..28]
 r136: [26..27]
 r137: [24..25]
 r138: [15..23]
 r139: [20..22]
 r140: [20..21]
 r141: [17..19]
 r142: [17..18]
 r143: [15..16]
 r144: [12..14]
 r145: [10..11]
 r146: [8..9]
 r147: [2..3]
 r148: [0..1]
 r149: [189..191]
 r150: [188..190]
 r151: [185..187]
 r152: [184..186]
 r153: [181..183]
 r154: [180..182]
 r155: [178..179]
 r156: [175..177]
 r157: [175..176]
 r158: [170..171]
 r159: [172..173]
 r160: [168..169]
 r161: [166..167]
 r162: [164..165]
 r163: [161..162]
 r164: [158..159]
 r165: [155..156]
 r166: [148..149]
 r167: [145..146]
 r168: [108..109]
 r169: [101..102]
 r170: [60..61]
 r171: [53..54]
 r172: [12..13]
 r173: [5..7]
 r174: [4..6]
 r176: [150..152]
 r177: [96..97]
 r178: [48..49]
 r179: [153..163]
Compressing live ranges: from 192 to 136 - 70%
Ranges after the compression:
 r59: [124..125]
 r61: [112..113]
 r62: [110..111]
 r63: [106..109]
 r64: [102..103]
 r65: [76..101]
 r66: [100..101]
 r67: [100..101]
 r68: [98..99]
 r69: [98..99]
 r70: [92..97]
 r71: [96..97]
 r72: [96..97]
 r73: [94..95]
 r74: [94..95]
 r75: [92..93]
 r76: [86..91]
 r77: [90..91]
 r78: [90..91]
 r79: [88..89]
 r80: [88..89]
 r81: [86..87]
 r82: [80..85]
 r83: [84..85]
 r84: [84..85]
 r85: [82..83]
 r86: [82..83]
 r87: [80..81]
 r88: [78..79]
 r89: [76..77]
 r90: [74..75]
 r91: [72..73]
 r92: [42..71]
 r93: [70..71]
 r94: [66..67]
 r95: [66..67]
 r96: [64..65]
 r97: [64..65]
 r98: [58..63]
 r99: [62..63]
 r100: [62..63]
 r101: [60..61]
 r102: [60..61]
 r103: [58..59]
 r104: [52..57]
 r105: [56..57]
 r106: [56..57]
 r107: [54..55]
 r108: [54..55]
 r109: [52..53]
 r110: [46..51]
 r111: [50..51]
 r112: [50..51]
 r113: [48..49]
 r114: [48..49]
 r115: [46..47]
 r116: [44..45]
 r117: [42..43]
 r118: [40..41]
 r119: [38..39]
 r120: [8..37]
 r121: [36..37]
 r122: [32..33]
 r123: [32..33]
 r124: [30..31]
 r125: [30..31]
 r126: [24..29]
 r127: [28..29]
 r128: [28..29]
 r129: [26..27]
 r130: [26..27]
 r131: [24..25]
 r132: [18..23]
 r133: [22..23]
 r134: [22..23]
 r135: [20..21]
 r136: [20..21]
 r137: [18..19]
 r138: [12..17]
 r139: [16..17]
 r140: [16..17]
 r141: [14..15]
 r142: [14..15]
 r143: [12..13]
 r144: [10..11]
 r145: [8..9]
 r146: [6..7]
 r147: [2..3]
 r148: [0..1]
 r149: [134..135]
 r150: [134..135]
 r151: [132..133]
 r152: [132..133]
 r153: [130..131]
 r154: [130..131]
 r155: [128..129]
 r156: [126..127]
 r157: [126..127]
 r158: [122..123]
 r159: [124..125]
 r160: [120..121]
 r161: [118..119]
 r162: [116..117]
 r163: [114..115]
 r164: [112..113]
 r165: [110..111]
 r166: [104..105]
 r167: [102..103]
 r168: [78..79]
 r169: [72..73]
 r170: [44..45]
 r171: [38..39]
 r172: [10..11]
 r173: [4..5]
 r174: [4..5]
 r176: [106..107]
 r177: [68..69]
 r178: [34..35]
 r179: [108..115]
	 Assigning to 176 (cl=FLOAT_REGS, orig=166, freq=3, tfirst=176, tfreq=3)...
	   Assign 12 to reload r176 (freq=3)
	Hard reg 8 is preferable by r179 with profit 1
	Hard reg 12 is preferable by r179 with profit 1
	 Assigning to 179 (cl=FLOAT_REGS, orig=60, freq=2, tfirst=176, tfreq=3)...
	 Assigning to 177 (cl=FLOAT_REGS, orig=94, freq=3, tfirst=177, tfreq=3)...
	   Assign 10 to reload r177 (freq=3)
	 Assigning to 178 (cl=FLOAT_REGS, orig=122, freq=3, tfirst=178, tfreq=3)...
	   Assign 10 to reload r178 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  160: r176:XF=r60:XF
      REG_DEAD r60:XF
   Insn after restoring regs:
   39: r60:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 2
   Insn 157: point = 0
   Insn 154: point = 0
   Insn 150: point = 1
   Insn 147: point = 3
   Insn 146: point = 4
   Insn 145: point = 4
   Insn 144: point = 5
   Insn 143: point = 6
   Insn 142: point = 7
   Insn 141: point = 8
   Insn 140: point = 9
   Insn 139: point = 11
   Insn 138: point = 13
   Insn 137: point = 14
   Insn 136: point = 16
   Insn 135: point = 18
   Insn 134: point = 19
   Insn 133: point = 21
   Insn 132: point = 22
   Insn 131: point = 23
   Insn 130: point = 25
   Insn 129: point = 27
   Insn 128: point = 28
   Insn 127: point = 30
   Insn 126: point = 31
   Insn 125: point = 32
   Insn 124: point = 34
   Insn 123: point = 36
   Insn 122: point = 37
   Insn 121: point = 39
   Insn 120: point = 40
   Insn 119: point = 41
   Insn 118: point = 43
   Insn 117: point = 44
   Insn 116: point = 46
   Insn 165: point = 47
   Insn 115: point = 49
   Insn 164: point = 49
   Insn 114: point = 51
   Insn 113: point = 52
   Insn 112: point = 54
   Insn 111: point = 55
   Insn 110: point = 56
   Insn 109: point = 57
   Insn 108: point = 59
   Insn 107: point = 61
   Insn 106: point = 62
   Insn 105: point = 64
   Insn 104: point = 66
   Insn 103: point = 67
   Insn 102: point = 69
   Insn 101: point = 70
   Insn 100: point = 71
   Insn 99: point = 73
   Insn 98: point = 75
   Insn 97: point = 76
   Insn 96: point = 78
   Insn 95: point = 79
   Insn 94: point = 80
   Insn 93: point = 82
   Insn 92: point = 84
   Insn 91: point = 85
   Insn 90: point = 87
   Insn 89: point = 88
   Insn 88: point = 89
   Insn 87: point = 91
   Insn 86: point = 92
   Insn 85: point = 94
   Insn 163: point = 95
   Insn 84: point = 97
   Insn 162: point = 97
   Insn 83: point = 99
   Insn 82: point = 100
   Insn 81: point = 102
   Insn 80: point = 103
   Insn 79: point = 104
   Insn 78: point = 105
   Insn 77: point = 107
   Insn 76: point = 109
   Insn 75: point = 110
   Insn 74: point = 112
   Insn 73: point = 114
   Insn 72: point = 115
   Insn 71: point = 117
   Insn 70: point = 118
   Insn 69: point = 119
   Insn 68: point = 121
   Insn 67: point = 123
   Insn 66: point = 124
   Insn 65: point = 126
   Insn 64: point = 127
   Insn 63: point = 128
   Insn 62: point = 130
   Insn 61: point = 132
   Insn 60: point = 133
   Insn 59: point = 135
   Insn 58: point = 136
   Insn 57: point = 137
   Insn 56: point = 139
   Insn 55: point = 140
   Insn 54: point = 142
   Insn 53: point = 143
   Insn 52: point = 144
   Insn 51: point = 146
   Insn 50: point = 147
   Insn 49: point = 148
   Insn 161: point = 149
   Insn 48: point = 151
   Insn 160: point = 152
   Insn 47: point = 154
   Insn 46: point = 156
   Insn 45: point = 157
   Insn 44: point = 159
   Insn 43: point = 160
   Insn 42: point = 161
   Insn 41: point = 161
   Insn 40: point = 162
   Insn 39: point = 163
   Insn 38: point = 164
   Insn 37: point = 164
   Insn 36: point = 165
   Insn 35: point = 166
   Insn 34: point = 167
   Insn 33: point = 168
   Insn 32: point = 168
   Insn 31: point = 169
   Insn 30: point = 170
   Insn 29: point = 171
   Insn 28: point = 173
   Insn 27: point = 174
   Insn 26: point = 176
   Insn 25: point = 177
   Insn 24: point = 178
   Insn 23: point = 179
   Insn 22: point = 180
   Insn 21: point = 180
   Insn 20: point = 181
   Insn 19: point = 182
   Insn 18: point = 183
   Insn 17: point = 184
   Insn 16: point = 184
   Insn 15: point = 185
   Insn 14: point = 186
   Insn 13: point = 187
   Insn 12: point = 188
   Insn 11: point = 188
   Insn 10: point = 189
   Insn 9: point = 190
   Insn 8: point = 191
   Insn 4: point = 192
   Insn 3: point = 192
   Insn 2: point = 192
 r60: [153..163]
Compressing live ranges: from 192 to 2 - 1%
Ranges after the compression:
 r60: [0..1]
  Slot 0 regnos (width = 16):	 60
Changing spilled pseudos to memory in insn #39
Changing spilled pseudos to memory in insn #160

********** Local #3: **********

Reusing alternative 0 for insn #160
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #39
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=288, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=272, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 29
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 63
changing reg in insn 58
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 69
changing reg in insn 64
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 75
changing reg in insn 70
changing reg in insn 72
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 94
changing reg in insn 89
changing reg in insn 91
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 100
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 106
changing reg in insn 101
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 125
changing reg in insn 120
changing reg in insn 122
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 131
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 137
changing reg in insn 132
changing reg in insn 134
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 147
changing reg in insn 150
changing reg in insn 150
changing reg in insn 154
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 107
changing reg in insn 112
changing reg in insn 113
changing reg in insn 138
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 145
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 146.


coord

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 17[flags]
;;  ref usage 	r0={18d,11u} r1={15d,8u} r2={8d} r4={12d,5u} r5={12d,5u} r6={1d,72u} r7={1d,15u} r8={63d,60u} r9={17d,10u} r10={29d,22u} r11={25d,18u} r12={9d,2u} r13={7d} r14={7d} r15={7d} r17={12d} r18={7d} r19={7d} r20={1d,1u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={8d} r38={8d} r39={7d} r40={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} 
;;    total ref usage 693{464d,229u,0e} in 152{145 regular + 7 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [0 pa+0 S8 A64])
        (reg:DI 5 di [ pa ])) mUtility.c:357 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ pa ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 pb+0 S8 A64])
        (reg:DI 4 si [ pb ])) mUtility.c:357 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ pb ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [0 p+0 S8 A64])
        (reg:DI 1 dx [ p ])) mUtility.c:357 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ p ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (reg:DI 1 dx [149])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:360 274 {*adddi_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [0 pa+0 S8 A64])) mUtility.c:360 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [149])) mUtility.c:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [149])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) mUtility.c:360 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [150])
        (nil)))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:360 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 1 dx [151])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:361 274 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [0 pb+0 S8 A64])) mUtility.c:361 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [151])) mUtility.c:361 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [151])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [152])) mUtility.c:361 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [152])
        (nil)))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:361 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 1 dx [153])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:363 274 {*adddi_1}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:DI 0 ax [154])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:363 274 {*adddi_1}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [153])) mUtility.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [153])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [154])) mUtility.c:363 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [154])
        (nil)))
(call_insn 22 21 23 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:363 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 23 22 24 2 (set (reg:XF 8 st [155])
        (reg:XF 8 st)) mUtility.c:363 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 24 23 25 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 AB+0 S16 A128])
        (reg:XF 8 st [155])) mUtility.c:363 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [155])
        (nil)))
(insn 25 24 26 2 (set (reg:XF 9 st(1) [156])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 vel+0 S16 A128])) mUtility.c:364 131 {*movxf_internal_rex64}
     (nil))
(insn 26 25 27 2 (set (reg:XF 8 st [157])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 t+0 S16 A128])) mUtility.c:364 131 {*movxf_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (reg:XF 9 st(1) [orig:59 D.5150 ] [59])
        (mult:XF (reg:XF 9 st(1) [156])
            (reg:XF 8 st [157]))) mUtility.c:364 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [157])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [156])
            (nil))))
(insn 28 27 29 2 (set (reg:XF 8 st [159])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:364 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 29 28 30 2 (set (reg:XF 8 st [158])
        (div:XF (reg:XF 9 st(1) [orig:59 D.5150 ] [59])
            (reg:XF 8 st [159]))) mUtility.c:364 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [159])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5150 ] [59])
            (nil))))
(insn 30 29 31 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 AP+0 S16 A128])
        (reg:XF 8 st [158])) mUtility.c:364 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [158])
        (nil)))
(insn 31 30 32 2 (set (reg:XF 0 ax [160])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 AP+0 S16 A128])) mUtility.c:366 131 {*movxf_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [160])) mUtility.c:366 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [160])
        (nil)))
(call_insn/u 33 32 34 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("cosl") [flags 0x41]  <function_decl 0x7f4452d47d00 cosl>) [0 __builtin_cosl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:366 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 34 33 35 2 (set (reg:XF 8 st [161])
        (reg:XF 8 st)) mUtility.c:366 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 35 34 36 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 cos_ap+0 S16 A128])
        (reg:XF 8 st [161])) mUtility.c:366 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [161])
        (nil)))
(insn 36 35 37 2 (set (reg:XF 0 ax [162])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 AP+0 S16 A128])) mUtility.c:367 131 {*movxf_internal_rex64}
     (nil))
(insn 37 36 38 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [162])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [162])
        (nil)))
(call_insn/u 38 37 39 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:367 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 39 38 166 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 %sfp+-256 S16 A128])
        (reg:XF 8 st)) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 166 39 40 2 NOTE_INSN_DELETED)
(insn 40 166 41 2 (set (reg:XF 0 ax [163])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [0 AB+0 S16 A128])) mUtility.c:367 131 {*movxf_internal_rex64}
     (nil))
(insn 41 40 42 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [163])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [163])
        (nil)))
(call_insn/u 42 41 43 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:367 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 43 42 44 2 (set (reg:XF 8 st [orig:61 D.5150 ] [61])
        (reg:XF 8 st)) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 44 43 45 2 (set (reg:XF 9 st(1) [164])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 45 44 46 2 (set (reg:XF 9 st(1) [orig:62 D.5150 ] [62])
        (mult:XF (reg:XF 9 st(1) [164])
            (reg:XF 8 st [orig:61 D.5150 ] [61]))) mUtility.c:367 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [164])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5150 ] [61])
            (nil))))
(insn 46 45 47 2 (set (reg:XF 8 st [165])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 47 46 160 2 (set (reg:XF 8 st [orig:63 D.5150 ] [63])
        (mult:XF (reg:XF 8 st [165])
            (reg:XF 9 st(1) [orig:62 D.5150 ] [62]))) mUtility.c:367 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [165])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:62 D.5150 ] [62])
            (nil))))
(insn 160 47 48 2 (set (reg:XF 12 st(4) [166])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 %sfp+-256 S16 A128])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 60 [ D.5150 ])
        (nil)))
(insn 48 160 161 2 (set (reg:XF 12 st(4) [166])
        (div:XF (reg:XF 12 st(4) [166])
            (reg:XF 8 st [orig:63 D.5150 ] [63]))) mUtility.c:367 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5150 ] [63])
        (nil)))
(insn 161 48 49 2 (set (reg:XF 8 st [166])
        (reg:XF 12 st(4) [166])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [166])
        (nil)))
(insn 49 161 50 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 sin_rap+0 S16 A128])
        (reg:XF 8 st [166])) mUtility.c:367 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [166])
        (nil)))
(insn 50 49 51 2 (set (reg:XF 9 st(1) [orig:64 D.5150 ] [64])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 2 (set (reg:XF 8 st [167])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 cos_ap+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:XF 9 st(1) [orig:65 D.5150 ] [65])
        (mult:XF (reg:XF 9 st(1) [orig:64 D.5150 ] [64])
            (reg:XF 8 st [167]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [167])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:64 D.5150 ] [64])
            (nil))))
(insn 53 52 54 2 (set (reg:XF 10 st(2) [orig:66 D.5150 ] [66])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 54 53 55 2 (set (reg:XF 8 st [orig:67 D.5150 ] [67])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (reg:XF 10 st(2) [orig:68 D.5150 ] [68])
        (mult:XF (reg:XF 10 st(2) [orig:66 D.5150 ] [66])
            (reg:XF 8 st [orig:67 D.5150 ] [67]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5150 ] [67])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:66 D.5150 ] [66])
            (nil))))
(insn 56 55 57 2 (set (reg:XF 8 st [orig:69 D.5150 ] [69])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 B+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 57 56 58 2 (set (reg:XF 10 st(2) [orig:70 D.5150 ] [70])
        (mult:XF (reg:XF 10 st(2) [orig:68 D.5150 ] [68])
            (reg:XF 8 st [orig:69 D.5150 ] [69]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.5150 ] [69])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:68 D.5150 ] [68])
            (nil))))
(insn 58 57 59 2 (set (reg:XF 11 st(3) [orig:71 D.5150 ] [71])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (reg:XF 8 st [orig:72 D.5150 ] [72])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (reg:XF 11 st(3) [orig:73 D.5150 ] [73])
        (mult:XF (reg:XF 11 st(3) [orig:71 D.5150 ] [71])
            (reg:XF 8 st [orig:72 D.5150 ] [72]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5150 ] [72])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:71 D.5150 ] [71])
            (nil))))
(insn 61 60 62 2 (set (reg:XF 8 st [orig:74 D.5150 ] [74])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 B+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 62 61 63 2 (set (reg:XF 8 st [orig:75 D.5150 ] [75])
        (mult:XF (reg:XF 8 st [orig:74 D.5150 ] [74])
            (reg:XF 11 st(3) [orig:73 D.5150 ] [73]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.5150 ] [74])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:73 D.5150 ] [73])
            (nil))))
(insn 63 62 64 2 (set (reg:XF 10 st(2) [orig:76 D.5150 ] [76])
        (plus:XF (reg:XF 10 st(2) [orig:70 D.5150 ] [70])
            (reg:XF 8 st [orig:75 D.5150 ] [75]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5150 ] [75])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:70 D.5150 ] [70])
            (nil))))
(insn 64 63 65 2 (set (reg:XF 11 st(3) [orig:77 D.5150 ] [77])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (reg:XF 8 st [orig:78 D.5150 ] [78])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 66 65 67 2 (set (reg:XF 11 st(3) [orig:79 D.5150 ] [79])
        (mult:XF (reg:XF 11 st(3) [orig:77 D.5150 ] [77])
            (reg:XF 8 st [orig:78 D.5150 ] [78]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.5150 ] [78])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:77 D.5150 ] [77])
            (nil))))
(insn 67 66 68 2 (set (reg:XF 8 st [orig:80 D.5150 ] [80])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 B+16 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 68 67 69 2 (set (reg:XF 8 st [orig:81 D.5150 ] [81])
        (mult:XF (reg:XF 8 st [orig:80 D.5150 ] [80])
            (reg:XF 11 st(3) [orig:79 D.5150 ] [79]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.5150 ] [80])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:79 D.5150 ] [79])
            (nil))))
(insn 69 68 70 2 (set (reg:XF 10 st(2) [orig:82 D.5150 ] [82])
        (minus:XF (reg:XF 10 st(2) [orig:76 D.5150 ] [76])
            (reg:XF 8 st [orig:81 D.5150 ] [81]))) mUtility.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.5150 ] [81])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:76 D.5150 ] [76])
            (nil))))
(insn 70 69 71 2 (set (reg:XF 11 st(3) [orig:83 D.5150 ] [83])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 71 70 72 2 (set (reg:XF 8 st [orig:84 D.5150 ] [84])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 72 71 73 2 (set (reg:XF 11 st(3) [orig:85 D.5150 ] [85])
        (mult:XF (reg:XF 11 st(3) [orig:83 D.5150 ] [83])
            (reg:XF 8 st [orig:84 D.5150 ] [84]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.5150 ] [84])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:83 D.5150 ] [83])
            (nil))))
(insn 73 72 74 2 (set (reg:XF 8 st [orig:86 D.5150 ] [86])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 B+32 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 74 73 75 2 (set (reg:XF 8 st [orig:87 D.5150 ] [87])
        (mult:XF (reg:XF 8 st [orig:86 D.5150 ] [86])
            (reg:XF 11 st(3) [orig:85 D.5150 ] [85]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5150 ] [86])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:85 D.5150 ] [85])
            (nil))))
(insn 75 74 76 2 (set (reg:XF 10 st(2) [orig:88 D.5150 ] [88])
        (minus:XF (reg:XF 10 st(2) [orig:82 D.5150 ] [82])
            (reg:XF 8 st [orig:87 D.5150 ] [87]))) mUtility.c:369 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:87 D.5150 ] [87])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:82 D.5150 ] [82])
            (nil))))
(insn 76 75 77 2 (set (reg:XF 8 st [168])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 sin_rap+0 S16 A128])) mUtility.c:369 131 {*movxf_internal_rex64}
     (nil))
(insn 77 76 78 2 (set (reg:XF 8 st [orig:89 D.5150 ] [89])
        (mult:XF (reg:XF 8 st [168])
            (reg:XF 10 st(2) [orig:88 D.5150 ] [88]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [168])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:88 D.5150 ] [88])
            (nil))))
(insn 78 77 79 2 (set (reg:XF 8 st [orig:90 D.5150 ] [90])
        (plus:XF (reg:XF 8 st [orig:89 D.5150 ] [89])
            (reg:XF 9 st(1) [orig:65 D.5150 ] [65]))) mUtility.c:369 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5150 ] [89])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:65 D.5150 ] [65])
            (nil))))
(insn 79 78 80 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 P+0 S16 A128])
        (reg:XF 8 st [orig:90 D.5150 ] [90])) mUtility.c:369 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5150 ] [90])
        (nil)))
(insn 80 79 81 2 (set (reg:XF 9 st(1) [orig:91 D.5150 ] [91])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 81 80 82 2 (set (reg:XF 8 st [169])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 cos_ap+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 82 81 83 2 (set (reg:XF 9 st(1) [orig:92 D.5150 ] [92])
        (mult:XF (reg:XF 9 st(1) [orig:91 D.5150 ] [91])
            (reg:XF 8 st [169]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [169])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:91 D.5150 ] [91])
            (nil))))
(insn 83 82 162 2 (set (reg:XF 8 st [orig:93 D.5150 ] [93])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 162 83 84 2 (set (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
        (reg:XF 8 st [orig:93 D.5150 ] [93])) mUtility.c:371 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:93 D.5150 ] [93])
        (nil)))
(insn 84 162 163 2 (set (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
        (neg:XF (reg:XF 10 st(2) [orig:94 D.5150 ] [94]))) mUtility.c:371 481 {*negxf2_1}
     (nil))
(insn 163 84 85 2 (set (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
        (reg:XF 10 st(2) [orig:94 D.5150 ] [94])) mUtility.c:371 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
        (nil)))
(insn 85 163 86 2 (set (reg:XF 8 st [orig:95 D.5150 ] [95])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 86 85 87 2 (set (reg:XF 10 st(2) [orig:96 D.5150 ] [96])
        (mult:XF (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
            (reg:XF 8 st [orig:95 D.5150 ] [95]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:95 D.5150 ] [95])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:94 D.5150 ] [94])
            (nil))))
(insn 87 86 88 2 (set (reg:XF 8 st [orig:97 D.5150 ] [97])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 B+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 88 87 89 2 (set (reg:XF 10 st(2) [orig:98 D.5150 ] [98])
        (mult:XF (reg:XF 10 st(2) [orig:96 D.5150 ] [96])
            (reg:XF 8 st [orig:97 D.5150 ] [97]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:97 D.5150 ] [97])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:96 D.5150 ] [96])
            (nil))))
(insn 89 88 90 2 (set (reg:XF 11 st(3) [orig:99 D.5150 ] [99])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 2 (set (reg:XF 8 st [orig:100 D.5150 ] [100])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 91 90 92 2 (set (reg:XF 11 st(3) [orig:101 D.5150 ] [101])
        (mult:XF (reg:XF 11 st(3) [orig:99 D.5150 ] [99])
            (reg:XF 8 st [orig:100 D.5150 ] [100]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:100 D.5150 ] [100])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:99 D.5150 ] [99])
            (nil))))
(insn 92 91 93 2 (set (reg:XF 8 st [orig:102 D.5150 ] [102])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 B+16 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 93 92 94 2 (set (reg:XF 8 st [orig:103 D.5150 ] [103])
        (mult:XF (reg:XF 8 st [orig:102 D.5150 ] [102])
            (reg:XF 11 st(3) [orig:101 D.5150 ] [101]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:102 D.5150 ] [102])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:101 D.5150 ] [101])
            (nil))))
(insn 94 93 95 2 (set (reg:XF 10 st(2) [orig:104 D.5150 ] [104])
        (plus:XF (reg:XF 10 st(2) [orig:98 D.5150 ] [98])
            (reg:XF 8 st [orig:103 D.5150 ] [103]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:103 D.5150 ] [103])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:98 D.5150 ] [98])
            (nil))))
(insn 95 94 96 2 (set (reg:XF 11 st(3) [orig:105 D.5150 ] [105])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 96 95 97 2 (set (reg:XF 8 st [orig:106 D.5150 ] [106])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 97 96 98 2 (set (reg:XF 11 st(3) [orig:107 D.5150 ] [107])
        (mult:XF (reg:XF 11 st(3) [orig:105 D.5150 ] [105])
            (reg:XF 8 st [orig:106 D.5150 ] [106]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:106 D.5150 ] [106])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:105 D.5150 ] [105])
            (nil))))
(insn 98 97 99 2 (set (reg:XF 8 st [orig:108 D.5150 ] [108])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 B+16 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 99 98 100 2 (set (reg:XF 8 st [orig:109 D.5150 ] [109])
        (mult:XF (reg:XF 8 st [orig:108 D.5150 ] [108])
            (reg:XF 11 st(3) [orig:107 D.5150 ] [107]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:108 D.5150 ] [108])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:107 D.5150 ] [107])
            (nil))))
(insn 100 99 101 2 (set (reg:XF 10 st(2) [orig:110 D.5150 ] [110])
        (plus:XF (reg:XF 10 st(2) [orig:104 D.5150 ] [104])
            (reg:XF 8 st [orig:109 D.5150 ] [109]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:109 D.5150 ] [109])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:104 D.5150 ] [104])
            (nil))))
(insn 101 100 102 2 (set (reg:XF 11 st(3) [orig:111 D.5150 ] [111])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 102 101 103 2 (set (reg:XF 8 st [orig:112 D.5150 ] [112])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 103 102 104 2 (set (reg:XF 11 st(3) [orig:113 D.5150 ] [113])
        (mult:XF (reg:XF 11 st(3) [orig:111 D.5150 ] [111])
            (reg:XF 8 st [orig:112 D.5150 ] [112]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:112 D.5150 ] [112])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:111 D.5150 ] [111])
            (nil))))
(insn 104 103 105 2 (set (reg:XF 8 st [orig:114 D.5150 ] [114])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 B+32 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 105 104 106 2 (set (reg:XF 8 st [orig:115 D.5150 ] [115])
        (mult:XF (reg:XF 8 st [orig:114 D.5150 ] [114])
            (reg:XF 11 st(3) [orig:113 D.5150 ] [113]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:114 D.5150 ] [114])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:113 D.5150 ] [113])
            (nil))))
(insn 106 105 107 2 (set (reg:XF 10 st(2) [orig:116 D.5150 ] [116])
        (minus:XF (reg:XF 10 st(2) [orig:110 D.5150 ] [110])
            (reg:XF 8 st [orig:115 D.5150 ] [115]))) mUtility.c:371 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:115 D.5150 ] [115])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:110 D.5150 ] [110])
            (nil))))
(insn 107 106 108 2 (set (reg:XF 8 st [170])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 sin_rap+0 S16 A128])) mUtility.c:371 131 {*movxf_internal_rex64}
     (nil))
(insn 108 107 109 2 (set (reg:XF 8 st [orig:117 D.5150 ] [117])
        (mult:XF (reg:XF 8 st [170])
            (reg:XF 10 st(2) [orig:116 D.5150 ] [116]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [170])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:116 D.5150 ] [116])
            (nil))))
(insn 109 108 110 2 (set (reg:XF 8 st [orig:118 D.5150 ] [118])
        (plus:XF (reg:XF 8 st [orig:117 D.5150 ] [117])
            (reg:XF 9 st(1) [orig:92 D.5150 ] [92]))) mUtility.c:371 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:117 D.5150 ] [117])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:92 D.5150 ] [92])
            (nil))))
(insn 110 109 111 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 P+16 S16 A128])
        (reg:XF 8 st [orig:118 D.5150 ] [118])) mUtility.c:371 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:118 D.5150 ] [118])
        (nil)))
(insn 111 110 112 2 (set (reg:XF 9 st(1) [orig:119 D.5150 ] [119])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 112 111 113 2 (set (reg:XF 8 st [171])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 cos_ap+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 113 112 114 2 (set (reg:XF 9 st(1) [orig:120 D.5150 ] [120])
        (mult:XF (reg:XF 9 st(1) [orig:119 D.5150 ] [119])
            (reg:XF 8 st [171]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [171])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:119 D.5150 ] [119])
            (nil))))
(insn 114 113 164 2 (set (reg:XF 8 st [orig:121 D.5150 ] [121])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 164 114 115 2 (set (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
        (reg:XF 8 st [orig:121 D.5150 ] [121])) mUtility.c:373 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:121 D.5150 ] [121])
        (nil)))
(insn 115 164 165 2 (set (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
        (neg:XF (reg:XF 10 st(2) [orig:122 D.5150 ] [122]))) mUtility.c:373 481 {*negxf2_1}
     (nil))
(insn 165 115 116 2 (set (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
        (reg:XF 10 st(2) [orig:122 D.5150 ] [122])) mUtility.c:373 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
        (nil)))
(insn 116 165 117 2 (set (reg:XF 8 st [orig:123 D.5150 ] [123])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 117 116 118 2 (set (reg:XF 10 st(2) [orig:124 D.5150 ] [124])
        (mult:XF (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
            (reg:XF 8 st [orig:123 D.5150 ] [123]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:123 D.5150 ] [123])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:122 D.5150 ] [122])
            (nil))))
(insn 118 117 119 2 (set (reg:XF 8 st [orig:125 D.5150 ] [125])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 B+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 119 118 120 2 (set (reg:XF 10 st(2) [orig:126 D.5150 ] [126])
        (mult:XF (reg:XF 10 st(2) [orig:124 D.5150 ] [124])
            (reg:XF 8 st [orig:125 D.5150 ] [125]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:125 D.5150 ] [125])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:124 D.5150 ] [124])
            (nil))))
(insn 120 119 121 2 (set (reg:XF 11 st(3) [orig:127 D.5150 ] [127])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 121 120 122 2 (set (reg:XF 8 st [orig:128 D.5150 ] [128])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 A+32 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 122 121 123 2 (set (reg:XF 11 st(3) [orig:129 D.5150 ] [129])
        (mult:XF (reg:XF 11 st(3) [orig:127 D.5150 ] [127])
            (reg:XF 8 st [orig:128 D.5150 ] [128]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:128 D.5150 ] [128])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:127 D.5150 ] [127])
            (nil))))
(insn 123 122 124 2 (set (reg:XF 8 st [orig:130 D.5150 ] [130])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 B+16 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 124 123 125 2 (set (reg:XF 8 st [orig:131 D.5150 ] [131])
        (mult:XF (reg:XF 8 st [orig:130 D.5150 ] [130])
            (reg:XF 11 st(3) [orig:129 D.5150 ] [129]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:130 D.5150 ] [130])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:129 D.5150 ] [129])
            (nil))))
(insn 125 124 126 2 (set (reg:XF 10 st(2) [orig:132 D.5150 ] [132])
        (minus:XF (reg:XF 10 st(2) [orig:126 D.5150 ] [126])
            (reg:XF 8 st [orig:131 D.5150 ] [131]))) mUtility.c:373 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:131 D.5150 ] [131])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:126 D.5150 ] [126])
            (nil))))
(insn 126 125 127 2 (set (reg:XF 11 st(3) [orig:133 D.5150 ] [133])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 127 126 128 2 (set (reg:XF 8 st [orig:134 D.5150 ] [134])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 A+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 128 127 129 2 (set (reg:XF 11 st(3) [orig:135 D.5150 ] [135])
        (mult:XF (reg:XF 11 st(3) [orig:133 D.5150 ] [133])
            (reg:XF 8 st [orig:134 D.5150 ] [134]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:134 D.5150 ] [134])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:133 D.5150 ] [133])
            (nil))))
(insn 129 128 130 2 (set (reg:XF 8 st [orig:136 D.5150 ] [136])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 B+32 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 130 129 131 2 (set (reg:XF 8 st [orig:137 D.5150 ] [137])
        (mult:XF (reg:XF 8 st [orig:136 D.5150 ] [136])
            (reg:XF 11 st(3) [orig:135 D.5150 ] [135]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:136 D.5150 ] [136])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:135 D.5150 ] [135])
            (nil))))
(insn 131 130 132 2 (set (reg:XF 10 st(2) [orig:138 D.5150 ] [138])
        (plus:XF (reg:XF 10 st(2) [orig:132 D.5150 ] [132])
            (reg:XF 8 st [orig:137 D.5150 ] [137]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:137 D.5150 ] [137])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:132 D.5150 ] [132])
            (nil))))
(insn 132 131 133 2 (set (reg:XF 11 st(3) [orig:139 D.5150 ] [139])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 133 132 134 2 (set (reg:XF 8 st [orig:140 D.5150 ] [140])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 A+16 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 134 133 135 2 (set (reg:XF 11 st(3) [orig:141 D.5150 ] [141])
        (mult:XF (reg:XF 11 st(3) [orig:139 D.5150 ] [139])
            (reg:XF 8 st [orig:140 D.5150 ] [140]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:140 D.5150 ] [140])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:139 D.5150 ] [139])
            (nil))))
(insn 135 134 136 2 (set (reg:XF 8 st [orig:142 D.5150 ] [142])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 B+32 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 136 135 137 2 (set (reg:XF 8 st [orig:143 D.5150 ] [143])
        (mult:XF (reg:XF 8 st [orig:142 D.5150 ] [142])
            (reg:XF 11 st(3) [orig:141 D.5150 ] [141]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:142 D.5150 ] [142])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:141 D.5150 ] [141])
            (nil))))
(insn 137 136 138 2 (set (reg:XF 10 st(2) [orig:144 D.5150 ] [144])
        (plus:XF (reg:XF 10 st(2) [orig:138 D.5150 ] [138])
            (reg:XF 8 st [orig:143 D.5150 ] [143]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:143 D.5150 ] [143])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:138 D.5150 ] [138])
            (nil))))
(insn 138 137 139 2 (set (reg:XF 8 st [172])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 sin_rap+0 S16 A128])) mUtility.c:373 131 {*movxf_internal_rex64}
     (nil))
(insn 139 138 140 2 (set (reg:XF 8 st [orig:145 D.5150 ] [145])
        (mult:XF (reg:XF 8 st [172])
            (reg:XF 10 st(2) [orig:144 D.5150 ] [144]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [172])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:144 D.5150 ] [144])
            (nil))))
(insn 140 139 141 2 (set (reg:XF 8 st [orig:146 D.5150 ] [146])
        (plus:XF (reg:XF 8 st [orig:145 D.5150 ] [145])
            (reg:XF 9 st(1) [orig:120 D.5150 ] [120]))) mUtility.c:373 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:145 D.5150 ] [145])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:120 D.5150 ] [120])
            (nil))))
(insn 141 140 142 2 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 P+32 S16 A128])
        (reg:XF 8 st [orig:146 D.5150 ] [146])) mUtility.c:373 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:146 D.5150 ] [146])
        (nil)))
(insn 142 141 143 2 (set (reg:DI 1 dx [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [0 p+0 S8 A64])) mUtility.c:375 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 2 (parallel [
            (set (reg:DI 0 ax [174])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:375 274 {*adddi_1}
     (nil))
(insn 144 143 145 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [173])) mUtility.c:375 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [173])
        (nil)))
(insn 145 144 146 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [174])) mUtility.c:375 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [174])
        (nil)))
(call_insn 146 145 147 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_sphere") [flags 0x3]  <function_decl 0x7f4452bbaa00 _to_sphere>) [0 _to_sphere S1 A8])
            (const_int 0 [0]))) mUtility.c:375 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 147 146 150 2 (set (reg:SI 0 ax [orig:147 D.5151 ] [147])
        (const_int 1 [0x1])) mUtility.c:377 89 {*movsi_internal}
     (nil))
(insn 150 147 154 2 (set (reg:SI 0 ax [orig:148 <retval> ] [148])
        (reg:SI 0 ax [orig:147 D.5151 ] [147])) mUtility.c:377 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:147 D.5151 ] [147])
        (nil)))
(insn 154 150 157 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:148 <retval> ] [148])) mUtility.c:380 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:148 <retval> ] [148])
        (nil)))
(insn 157 154 0 2 (use (reg/i:SI 0 ax)) mUtility.c:380 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function coord3 (coord3, funcdef_no=35, decl_uid=1784, cgraph_uid=35)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 9:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 21:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=113 from oldreg=62, assigning class FLOAT_REGS to r113
   21: r113:XF=r113:XF*r61:XF
      REG_DEAD r61:XF
      REG_DEAD r60:XF
    Inserting insn reload before:
  107: r113:XF=r60:XF
    Inserting insn reload after:
  108: r62:XF=r113:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 44:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 50:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=114 from oldreg=72, assigning class FLOAT_REGS to r114
   50: r114:XF=r114:XF*r71:XF
      REG_DEAD r71:XF
      REG_DEAD r68:XF
    Inserting insn reload before:
  109: r114:XF=r68:XF
    Inserting insn reload after:
  110: r72:XF=r114:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=607,losers=1 -- reject
	 Choosing alt 1 in insn 51:  (0) m  (1) f {*movxf_internal_rex64}
      Creating newreg=115 from oldreg=65, assigning class FLOAT_REGS to r115
   51: [sp:DI+0x10]=r115:XF
      REG_DEAD r65:XF
    Inserting insn reload before:
  111: r115:XF=r65:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 72:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=116 from oldreg=74, assigning class FLOAT_REGS to r116
   72: r116:XF=[r106:DI]
      REG_DEAD r106:DI
    Inserting insn reload after:
  112: r74:XF=r116:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=117 from oldreg=74, assigning class FLOAT_REGS to r117
   77: r76:XF=r75:XF+r117:XF
      REG_DEAD r75:XF
      REG_DEAD r74:XF
    Inserting insn reload before:
  113: r117:XF=r74:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 81:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 84:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=118 from oldreg=79, assigning class FLOAT_REGS to r118
   84: r118:XF=[r78:DI]
      REG_DEAD r78:DI
    Inserting insn reload after:
  114: r79:XF=r118:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
      Creating newreg=119 from oldreg=79, assigning class FLOAT_REGS to r119
   89: r81:XF=r80:XF+r119:XF
      REG_DEAD r80:XF
      REG_DEAD r79:XF
    Inserting insn reload before:
  115: r119:XF=r79:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=120 from oldreg=68, assigning class FLOAT_REGS to inheritance r120
    Original reg change 68->120 (bb2):
   41: r120:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  116: r68:XF=r120:XF

    Inheritance reuse change 68->120 (bb2):
  109: r114:XF=r120:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=121 from oldreg=65, assigning class FLOAT_REGS to inheritance r121
    Original reg change 65->121 (bb2):
   33: r121:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  117: r65:XF=r121:XF

    Inheritance reuse change 65->121 (bb2):
  111: r115:XF=r121:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=122 from oldreg=60, assigning class FLOAT_REGS to inheritance r122
    Original reg change 60->122 (bb2):
   16: r122:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  118: r60:XF=r122:XF

    Inheritance reuse change 60->122 (bb2):
  107: r113:XF=r122:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   116: r68:XF=r120:XF
deleting insn with uid = 116.
	    Removing dead insn:
   117: r65:XF=r121:XF
deleting insn with uid = 117.
	    Removing dead insn:
   118: r60:XF=r122:XF
deleting insn with uid = 118.
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=123 from oldreg=79, assigning class FLOAT_REGS to inheritance r123
    Original reg change 79->123 (bb4):
  114: r123:XF=r118:XF
    Add original<-inheritance after:
  119: r79:XF=r123:XF

    Inheritance reuse change 79->123 (bb4):
  115: r119:XF=r123:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=124 from oldreg=74, assigning class FLOAT_REGS to inheritance r124
    Original reg change 74->124 (bb4):
  112: r124:XF=r116:XF
    Add original<-inheritance after:
  120: r74:XF=r124:XF

    Inheritance reuse change 74->124 (bb4):
  113: r117:XF=r124:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   119: r79:XF=r123:XF
deleting insn with uid = 119.
	    Removing dead insn:
   120: r74:XF=r124:XF
deleting insn with uid = 120.

********** Pseudo live ranges #1: **********

  BB 4
   Insn 101: point = 0
   Insn 98: point = 0
   Insn 94: point = 1
   Insn 91: point = 3
   Insn 90: point = 4
   Insn 89: point = 5
   Insn 115: point = 7
	   Creating copy r119<-r123@1
   Insn 88: point = 9
   Insn 87: point = 10
   Insn 86: point = 10
   Insn 85: point = 11
   Insn 114: point = 12
	   Creating copy r118->r123@1
   Insn 84: point = 14
   Insn 83: point = 16
   Insn 82: point = 18
   Insn 81: point = 19
   Insn 80: point = 21
   Insn 79: point = 22
   Insn 78: point = 23
   Insn 77: point = 24
   Insn 113: point = 26
	   Creating copy r117<-r124@1
   Insn 76: point = 28
   Insn 75: point = 29
   Insn 74: point = 29
   Insn 73: point = 30
   Insn 112: point = 31
	   Creating copy r116->r124@1
   Insn 72: point = 33
   Insn 71: point = 35
  BB 3
   Insn 68: point = 36
   Insn 67: point = 37
   Insn 66: point = 39
   Insn 65: point = 40
  BB 2
   Insn 60: point = 41
   Insn 59: point = 41
   Insn 58: point = 42
   Insn 57: point = 43
   Insn 56: point = 44
   Insn 55: point = 45
   Insn 54: point = 47
   Insn 53: point = 48
   Insn 52: point = 48
   Insn 51: point = 49
   Insn 111: point = 50
	   Creating copy r115<-r121@1
   Insn 110: point = 52
	Hard reg 8 is preferable by r114 with profit 1
   Insn 50: point = 54
   Insn 109: point = 55
	   Creating copy r114<-r120@1
   Insn 49: point = 57
   Insn 48: point = 58
   Insn 47: point = 58
   Insn 46: point = 59
   Insn 45: point = 61
   Insn 44: point = 62
   Insn 43: point = 64
   Insn 42: point = 65
   Insn 41: point = 66
	Hard reg 8 is preferable by r120 with profit 1
   Insn 40: point = 67
   Insn 39: point = 67
   Insn 38: point = 68
   Insn 37: point = 70
   Insn 36: point = 71
   Insn 35: point = 73
   Insn 34: point = 74
   Insn 33: point = 75
	Hard reg 8 is preferable by r121 with profit 1
   Insn 32: point = 76
   Insn 31: point = 76
   Insn 30: point = 77
   Insn 29: point = 79
   Insn 28: point = 80
   Insn 27: point = 82
   Insn 26: point = 83
   Insn 25: point = 84
   Insn 24: point = 85
   Insn 23: point = 86
   Insn 22: point = 86
   Insn 108: point = 87
	Hard reg 8 is preferable by r113 with profit 1
   Insn 21: point = 89
   Insn 107: point = 90
	   Creating copy r113<-r122@1
   Insn 20: point = 92
   Insn 19: point = 93
   Insn 18: point = 93
   Insn 17: point = 94
   Insn 16: point = 95
	Hard reg 8 is preferable by r122 with profit 1
   Insn 15: point = 96
   Insn 14: point = 96
   Insn 13: point = 97
   Insn 12: point = 98
   Insn 11: point = 99
   Insn 10: point = 101
   Insn 9: point = 102
   Insn 8: point = 104
   Insn 7: point = 105
   Insn 3: point = 106
   Insn 2: point = 106
 r59: [100..102]
 r61: [89..92]
 r62: [86..87]
 r63: [78..80]
 r64: [76..77]
 r66: [69..71]
 r67: [67..68]
 r69: [60..62]
 r70: [58..59]
 r71: [54..57]
 r72: [48..52]
 r73: [46..47]
 r75: [25..28]
 r76: [22..24]
 r77: [4..19]
 r78: [15..16]
 r80: [6..9]
 r81: [4..5]
 r82: [2..3]
 r83: [0..1]
 r84: [103..105]
 r85: [103..104]
 r86: [98..99]
 r87: [100..101]
 r88: [96..97]
 r89: [93..94]
 r90: [84..85]
 r91: [81..83]
 r92: [81..82]
 r93: [78..79]
 r94: [72..74]
 r95: [72..73]
 r96: [69..70]
 r97: [63..65]
 r98: [63..64]
 r99: [60..61]
 r100: [44..45]
 r101: [41..43]
 r102: [41..42]
 r103: [36..37]
 r104: [38..40]
 r105: [38..39]
 r106: [34..35]
 r107: [29..30]
 r108: [22..23]
 r109: [20..21]
 r110: [17..18]
 r111: [10..11]
 r113: [88..90]
 r114: [53..55]
 r115: [49..50]
 r116: [32..33]
 r117: [25..26]
 r118: [13..14]
 r119: [6..7]
 r120: [56..66]
 r121: [51..75]
 r122: [91..95]
 r123: [8..12]
 r124: [27..31]
Compressing live ranges: from 106 to 86 - 81%
Ranges after the compression:
 r59: [82..83]
 r61: [72..75]
 r62: [70..71]
 r63: [64..65]
 r64: [62..63]
 r66: [58..59]
 r67: [56..57]
 r69: [52..53]
 r70: [50..51]
 r71: [46..49]
 r72: [42..45]
 r73: [40..41]
 r75: [22..25]
 r76: [20..21]
 r77: [4..17]
 r78: [14..15]
 r80: [6..9]
 r81: [4..5]
 r82: [2..3]
 r83: [0..1]
 r84: [84..85]
 r85: [84..85]
 r86: [80..81]
 r87: [82..83]
 r88: [78..79]
 r89: [76..77]
 r90: [68..69]
 r91: [66..67]
 r92: [66..67]
 r93: [64..65]
 r94: [60..61]
 r95: [60..61]
 r96: [58..59]
 r97: [54..55]
 r98: [54..55]
 r99: [52..53]
 r100: [38..39]
 r101: [36..37]
 r102: [36..37]
 r103: [32..33]
 r104: [34..35]
 r105: [34..35]
 r106: [30..31]
 r107: [26..27]
 r108: [20..21]
 r109: [18..19]
 r110: [16..17]
 r111: [10..11]
 r113: [72..73]
 r114: [46..47]
 r115: [42..43]
 r116: [28..29]
 r117: [22..23]
 r118: [12..13]
 r119: [6..7]
 r120: [48..55]
 r121: [44..61]
 r122: [74..77]
 r123: [8..11]
 r124: [24..27]
	 Assigning to 113 (cl=FLOAT_REGS, orig=62, freq=3, tfirst=113, tfreq=3)...
	   Assign 10 to reload r113 (freq=3)
	Hard reg 8 is preferable by r122 with profit 1
	Hard reg 10 is preferable by r122 with profit 1
	 Assigning to 122 (cl=FLOAT_REGS, orig=60, freq=2, tfirst=113, tfreq=3)...
	 Assigning to 114 (cl=FLOAT_REGS, orig=72, freq=3, tfirst=114, tfreq=3)...
	   Assign 11 to reload r114 (freq=3)
	Hard reg 8 is preferable by r120 with profit 1
	Hard reg 11 is preferable by r120 with profit 1
	 Assigning to 120 (cl=FLOAT_REGS, orig=68, freq=2, tfirst=114, tfreq=3)...
	 Assigning to 115 (cl=FLOAT_REGS, orig=65, freq=2, tfirst=115, tfreq=2)...
	   Assign 12 to reload r115 (freq=2)
	Hard reg 8 is preferable by r121 with profit 1
	Hard reg 12 is preferable by r121 with profit 1
	 Assigning to 121 (cl=FLOAT_REGS, orig=65, freq=2, tfirst=115, tfreq=2)...
	 Assigning to 116 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=116, tfreq=2)...
	   Assign 13 to reload r116 (freq=2)
	Hard reg 13 is preferable by r124 with profit 1
	Hard reg 13 is preferable by r117 with profit 1
	 Assigning to 117 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=116, tfreq=2)...
	   Assign 13 to reload r117 (freq=2)
	Hard reg 13 is preferable by r124 with profit 2
	 Assigning to 124 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=116, tfreq=2)...
	 Assigning to 118 (cl=FLOAT_REGS, orig=79, freq=2, tfirst=118, tfreq=2)...
	   Assign 14 to reload r118 (freq=2)
	Hard reg 14 is preferable by r123 with profit 1
	Hard reg 14 is preferable by r119 with profit 1
	 Assigning to 119 (cl=FLOAT_REGS, orig=79, freq=2, tfirst=118, tfreq=2)...
	   Assign 14 to reload r119 (freq=2)
	Hard reg 14 is preferable by r123 with profit 2
	 Assigning to 123 (cl=FLOAT_REGS, orig=79, freq=2, tfirst=118, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 5 (0.00%)
   Insn after restoring regs:
  111: r115:XF=r65:XF
      REG_DEAD r65:XF
   Insn after restoring regs:
  109: r114:XF=r68:XF
      REG_DEAD r68:XF
   Insn after restoring regs:
   41: r68:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
   33: r65:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  107: r113:XF=r60:XF
      REG_DEAD r60:XF
   Insn after restoring regs:
   16: r60:XF=st:XF
      REG_DEAD st:XF
   Insn after restoring regs:
  115: r119:XF=r79:XF
      REG_DEAD r79:XF
   Insn after restoring regs:
  114: r79:XF=r118:XF
      REG_DEAD r118:XF
   Insn after restoring regs:
  113: r117:XF=r74:XF
      REG_DEAD r74:XF
   Insn after restoring regs:
  112: r74:XF=r116:XF
      REG_DEAD r116:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 4
   Insn 101: point = 0
   Insn 98: point = 0
   Insn 94: point = 1
   Insn 91: point = 3
   Insn 90: point = 4
   Insn 89: point = 5
   Insn 115: point = 7
   Insn 88: point = 9
   Insn 87: point = 10
   Insn 86: point = 10
   Insn 85: point = 11
   Insn 114: point = 12
   Insn 84: point = 14
   Insn 83: point = 16
   Insn 82: point = 18
   Insn 81: point = 19
   Insn 80: point = 21
   Insn 79: point = 22
   Insn 78: point = 23
   Insn 77: point = 24
   Insn 113: point = 26
   Insn 76: point = 28
   Insn 75: point = 29
   Insn 74: point = 29
   Insn 73: point = 30
   Insn 112: point = 31
   Insn 72: point = 33
   Insn 71: point = 35
  BB 3
   Insn 68: point = 36
   Insn 67: point = 37
   Insn 66: point = 39
   Insn 65: point = 40
  BB 2
   Insn 60: point = 41
   Insn 59: point = 41
   Insn 58: point = 42
   Insn 57: point = 43
   Insn 56: point = 44
   Insn 55: point = 45
   Insn 54: point = 47
   Insn 53: point = 48
   Insn 52: point = 48
   Insn 51: point = 49
   Insn 111: point = 50
   Insn 110: point = 52
   Insn 50: point = 54
   Insn 109: point = 55
   Insn 49: point = 57
   Insn 48: point = 58
   Insn 47: point = 58
   Insn 46: point = 59
   Insn 45: point = 61
   Insn 44: point = 62
   Insn 43: point = 64
   Insn 42: point = 65
   Insn 41: point = 66
   Insn 40: point = 67
   Insn 39: point = 67
   Insn 38: point = 68
   Insn 37: point = 70
   Insn 36: point = 71
   Insn 35: point = 73
   Insn 34: point = 74
   Insn 33: point = 75
   Insn 32: point = 76
   Insn 31: point = 76
   Insn 30: point = 77
   Insn 29: point = 79
   Insn 28: point = 80
   Insn 27: point = 82
   Insn 26: point = 83
   Insn 25: point = 84
   Insn 24: point = 85
   Insn 23: point = 86
   Insn 22: point = 86
   Insn 108: point = 87
   Insn 21: point = 89
   Insn 107: point = 90
   Insn 20: point = 92
   Insn 19: point = 93
   Insn 18: point = 93
   Insn 17: point = 94
   Insn 16: point = 95
   Insn 15: point = 96
   Insn 14: point = 96
   Insn 13: point = 97
   Insn 12: point = 98
   Insn 11: point = 99
   Insn 10: point = 101
   Insn 9: point = 102
   Insn 8: point = 104
   Insn 7: point = 105
   Insn 3: point = 106
   Insn 2: point = 106
 r60: [91..95]
 r65: [51..75]
 r68: [56..66]
 r74: [27..31]
 r79: [8..12]
Compressing live ranges: from 106 to 8 - 7%
Ranges after the compression:
 r60: [6..7]
 r65: [4..5]
 r68: [4..5]
 r74: [2..3]
 r79: [0..1]
  Slot 0 regnos (width = 16):	 60	 79	 74	 65
  Slot 1 regnos (width = 16):	 68
Changing spilled pseudos to memory in insn #16
Changing spilled pseudos to memory in insn #107
Changing spilled pseudos to memory in insn #33
Changing spilled pseudos to memory in insn #41
Changing spilled pseudos to memory in insn #109
Changing spilled pseudos to memory in insn #111
Changing spilled pseudos to memory in insn #112
Changing spilled pseudos to memory in insn #113
Changing spilled pseudos to memory in insn #114
Changing spilled pseudos to memory in insn #115

********** Local #3: **********

Reusing alternative 0 for insn #115
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #114
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #113
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #112
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #111
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 0 for insn #109
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #41
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 1 for insn #33
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #107
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #16
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 9
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 81
changing reg in insn 90
changing reg in insn 83
changing reg in insn 84
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 94
changing reg in insn 98
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 67
changing reg in insn 68
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 87.


coord3

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 13[st(5)] 14[st(6)] 17[flags]
;;  ref usage 	r0={22d,13u} r1={14d,4u} r2={10d} r3={1d,1u} r4={10d,1u} r5={10d,1u} r6={1d,36u} r7={1d,33u} r8={35d,36u} r9={19d,10u} r10={11d,2u} r11={11d,2u} r12={10d,1u} r13={11d,2u} r14={11d,2u} r15={9d} r17={12d,1u} r18={9d} r19={9d} r20={1d,1u,2e} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 627{479d,146u,2e} in 93{84 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pos+0 S8 A64])
        (reg:DI 5 di [ pos ])) mUtility.c:382 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ pos ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 p+0 S8 A64])
        (reg:DI 4 si [ p ])) mUtility.c:382 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ p ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:XF 9 st(1) [84])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 vel+0 S16 A128])) mUtility.c:383 131 {*movxf_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:XF 8 st [85])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 t+0 S16 A128])) mUtility.c:383 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 9 st(1) [orig:59 D.5152 ] [59])
        (mult:XF (reg:XF 9 st(1) [84])
            (reg:XF 8 st [85]))) mUtility.c:383 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [85])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [84])
            (nil))))
(insn 10 9 11 2 (set (reg:XF 8 st [87])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:383 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 11 10 12 2 (set (reg:XF 8 st [86])
        (div:XF (reg:XF 9 st(1) [orig:59 D.5152 ] [59])
            (reg:XF 8 st [87]))) mUtility.c:383 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [87])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:59 D.5152 ] [59])
            (nil))))
(insn 12 11 13 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 a+0 S16 A128])
        (reg:XF 8 st [86])) mUtility.c:383 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [86])
        (nil)))
(insn 13 12 14 2 (set (reg:XF 0 ax [88])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 a+0 S16 A128])) mUtility.c:384 131 {*movxf_internal_rex64}
     (nil))
(insn 14 13 15 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [88])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [88])
        (nil)))
(call_insn/u 15 14 16 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:384 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 16 15 118 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])
        (reg:XF 8 st)) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 118 16 17 2 NOTE_INSN_DELETED)
(insn 17 118 18 2 (set (reg:XF 0 ax [89])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 beta+0 S16 A128])) mUtility.c:384 131 {*movxf_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [89])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [89])
        (nil)))
(call_insn/u 19 18 20 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:384 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 20 19 107 2 (set (reg:XF 8 st [orig:61 D.5152 ] [61])
        (reg:XF 8 st)) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 107 20 21 2 (set (reg:XF 10 st(2) [orig:62 D.5152 ] [62])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 60 [ D.5152 ])
        (nil)))
(insn 21 107 108 2 (set (reg:XF 10 st(2) [orig:62 D.5152 ] [62])
        (mult:XF (reg:XF 10 st(2) [orig:62 D.5152 ] [62])
            (reg:XF 8 st [orig:61 D.5152 ] [61]))) mUtility.c:384 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5152 ] [61])
        (nil)))
(insn 108 21 22 2 (set (reg:XF 8 st [orig:62 D.5152 ] [62])
        (reg:XF 10 st(2) [orig:62 D.5152 ] [62])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:62 D.5152 ] [62])
        (nil)))
(insn 22 108 23 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:62 D.5152 ] [62])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5152 ] [62])
        (nil)))
(call_insn 23 22 24 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("asinl") [flags 0x41]  <function_decl 0x7f4452d40d00 asinl>) [0 __builtin_asinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:384 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 24 23 25 2 (set (reg:XF 8 st [90])
        (reg:XF 8 st)) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 25 24 26 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 b+0 S16 A128])
        (reg:XF 8 st [90])) mUtility.c:384 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [90])
        (nil)))
(insn 26 25 27 2 (set (reg:XF 9 st(1) [91])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.5707963267948965579989817342720925807952880859375e+0 [0x0.c90fdaa22168cp+1])
        (nil)))
(insn 27 26 28 2 (set (reg:XF 8 st [92])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 beta+0 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (reg:XF 9 st(1) [orig:63 D.5152 ] [63])
        (minus:XF (reg:XF 9 st(1) [91])
            (reg:XF 8 st [92]))) mUtility.c:386 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [92])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [91])
            (nil))))
(insn 29 28 30 2 (set (reg:XF 8 st [93])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 30 29 31 2 (set (reg:XF 8 st [orig:64 D.5152 ] [64])
        (mult:XF (reg:XF 8 st [93])
            (reg:XF 9 st(1) [orig:63 D.5152 ] [63]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [93])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:63 D.5152 ] [63])
            (nil))))
(insn 31 30 32 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:64 D.5152 ] [64])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.5152 ] [64])
        (nil)))
(call_insn/u 32 31 33 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:386 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 33 32 117 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])
        (reg:XF 8 st)) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 117 33 34 2 NOTE_INSN_DELETED)
(insn 34 117 35 2 (set (reg:XF 9 st(1) [94])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 a+0 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:XF 8 st [95])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 b+0 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (nil))
(insn 36 35 37 2 (set (reg:XF 9 st(1) [orig:66 D.5152 ] [66])
        (minus:XF (reg:XF 9 st(1) [94])
            (reg:XF 8 st [95]))) mUtility.c:386 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [95])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [94])
            (nil))))
(insn 37 36 38 2 (set (reg:XF 8 st [96])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 38 37 39 2 (set (reg:XF 8 st [orig:67 D.5152 ] [67])
        (mult:XF (reg:XF 8 st [96])
            (reg:XF 9 st(1) [orig:66 D.5152 ] [66]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [96])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:66 D.5152 ] [66])
            (nil))))
(insn 39 38 40 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:67 D.5152 ] [67])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5152 ] [67])
        (nil)))
(call_insn/u 40 39 41 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("tanl") [flags 0x41]  <function_decl 0x7f4452d77000 tanl>) [0 __builtin_tanl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:386 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 41 40 116 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 %sfp+-112 S16 A128])
        (reg:XF 8 st)) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 116 41 42 2 NOTE_INSN_DELETED)
(insn 42 116 43 2 (set (reg:XF 9 st(1) [97])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 beta+0 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (nil))
(insn 43 42 44 2 (set (reg:XF 8 st [98])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.5707963267948965579989817342720925807952880859375e+0 [0x0.c90fdaa22168cp+1])
        (nil)))
(insn 44 43 45 2 (set (reg:XF 9 st(1) [orig:69 D.5152 ] [69])
        (plus:XF (reg:XF 9 st(1) [97])
            (reg:XF 8 st [98]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [98])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [97])
            (nil))))
(insn 45 44 46 2 (set (reg:XF 8 st [99])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 46 45 47 2 (set (reg:XF 8 st [orig:70 D.5152 ] [70])
        (mult:XF (reg:XF 8 st [99])
            (reg:XF 9 st(1) [orig:69 D.5152 ] [69]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [99])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:69 D.5152 ] [69])
            (nil))))
(insn 47 46 48 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:70 D.5152 ] [70])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.5152 ] [70])
        (nil)))
(call_insn/u 48 47 49 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("sinl") [flags 0x41]  <function_decl 0x7f4452d73e00 sinl>) [0 __builtin_sinl S1 A8])
            (const_int 16 [0x10]))) mUtility.c:386 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 49 48 109 2 (set (reg:XF 8 st [orig:71 D.5152 ] [71])
        (reg:XF 8 st)) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 109 49 50 2 (set (reg:XF 11 st(3) [orig:72 D.5152 ] [72])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 %sfp+-112 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.5152 ])
        (nil)))
(insn 50 109 110 2 (set (reg:XF 11 st(3) [orig:72 D.5152 ] [72])
        (mult:XF (reg:XF 11 st(3) [orig:72 D.5152 ] [72])
            (reg:XF 8 st [orig:71 D.5152 ] [71]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5152 ] [71])
        (nil)))
(insn 110 50 111 2 (set (reg:XF 8 st [orig:72 D.5152 ] [72])
        (reg:XF 11 st(3) [orig:72 D.5152 ] [72])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:72 D.5152 ] [72])
        (nil)))
(insn 111 110 51 2 (set (reg:XF 12 st(4) [orig:65 D.5152 ] [65])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 65 [ D.5152 ])
        (nil)))
(insn 51 111 52 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 12 st(4) [orig:65 D.5152 ] [65])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:65 D.5152 ] [65])
        (nil)))
(insn 52 51 53 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 8 st [orig:72 D.5152 ] [72])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5152 ] [72])
        (nil)))
(call_insn 53 52 54 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("atan2l") [flags 0x41]  <function_decl 0x7f4452d42500 atan2l>) [0 __builtin_atan2l S1 A8])
            (const_int 32 [0x20]))) mUtility.c:386 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 54 53 55 2 (set (reg:XF 8 st [orig:73 D.5152 ] [73])
        (reg:XF 8 st)) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 55 54 56 2 (set (reg:XF 8 st [100])
        (plus:XF (reg:XF 8 st [orig:73 D.5152 ] [73])
            (reg:XF 8 st [orig:73 D.5152 ] [73]))) mUtility.c:386 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5152 ] [73])
        (nil)))
(insn 56 55 57 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 c+0 S16 A128])
        (reg:XF 8 st [100])) mUtility.c:386 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [100])
        (nil)))
(insn 57 56 58 2 (set (reg:XF 9 st(1) [101])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 c+0 S16 A128])) mUtility.c:387 131 {*movxf_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (reg:XF 8 st [102])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) mUtility.c:387 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.5707963267948965579989817342720925807952880859375e+0 [0x0.c90fdaa22168cp+1])
        (nil)))
(insn 59 58 60 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [101])
            (reg:XF 8 st [102]))) mUtility.c:387 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [102])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [101])
            (nil))))
(jump_insn 60 59 64 2 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 69)
            (pc))) mUtility.c:387 612 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 103 104 105
(note 64 60 65 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 3 (set (reg:XF 9 st(1) [104])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) mUtility.c:387 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.28318530717958623199592693708837032318115234375e+0 [0x0.c90fdaa22168cp+3])
        (nil)))
(insn 66 65 67 3 (set (reg:XF 8 st [105])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 c+0 S16 A128])) mUtility.c:387 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 3 (set (reg:XF 8 st [103])
        (minus:XF (reg:XF 9 st(1) [104])
            (reg:XF 8 st [105]))) mUtility.c:387 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [105])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [104])
            (nil))))
(insn 68 67 69 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 c+0 S16 A128])
        (reg:XF 8 st [103])) mUtility.c:387 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [103])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 78 79 80 81 82 83 106 107 108 109 110 111
(code_label 69 68 70 4 144 "" [1 uses])
(note 70 69 71 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 4 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pos+0 S8 A64])) mUtility.c:388 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 112 4 (set (reg:XF 13 st(5) [orig:74 D.5152 ] [74])
        (mem:XF (reg/f:DI 0 ax [106]) [0 *pos_24(D)+0 S16 A128])) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 112 72 120 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])
        (reg:XF 13 st(5) [orig:74 D.5152 ] [74])) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:74 D.5152 ] [74])
        (nil)))
(note 120 112 73 4 NOTE_INSN_DELETED)
(insn 73 120 74 4 (set (reg:XF 0 ax [107])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 c+0 S16 A128])) mUtility.c:388 131 {*movxf_internal_rex64}
     (nil))
(insn 74 73 75 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [107])) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [107])
        (nil)))
(call_insn 75 74 76 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("deg") [flags 0x3]  <function_decl 0x7f4452e41600 deg>) [0 deg S1 A8])
            (const_int 16 [0x10]))) mUtility.c:388 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 76 75 113 4 (set (reg:XF 8 st [orig:75 D.5152 ] [75])
        (reg:XF 8 st)) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 113 76 77 4 (set (reg:XF 13 st(5) [orig:74 D.5152 ] [74])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 74 [ D.5152 ])
        (nil)))
(insn 77 113 78 4 (set (reg:XF 8 st [orig:76 D.5152 ] [76])
        (plus:XF (reg:XF 8 st [orig:75 D.5152 ] [75])
            (reg:XF 13 st(5) [orig:74 D.5152 ] [74]))) mUtility.c:388 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:74 D.5152 ] [74])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5152 ] [75])
            (nil))))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 p+0 S8 A64])) mUtility.c:388 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 4 (set (mem:XF (reg/f:DI 0 ax [108]) [0 *p_28(D)+0 S16 A128])
        (reg:XF 8 st [orig:76 D.5152 ] [76])) mUtility.c:388 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [108])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.5152 ] [76])
            (nil))))
(insn 80 79 81 4 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 p+0 S8 A64])) mUtility.c:389 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 4 (parallel [
            (set (reg/f:DI 3 bx [orig:77 D.5153 ] [77])
                (plus:DI (reg/f:DI 0 ax [109])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:389 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -64 [0xffffffffffffffc0])) [0 p+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 82 81 83 4 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pos+0 S8 A64])) mUtility.c:389 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg/f:DI 0 ax [orig:78 D.5153 ] [78])
                (plus:DI (reg/f:DI 0 ax [110])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:389 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -56 [0xffffffffffffffc8])) [0 pos+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 84 83 114 4 (set (reg:XF 14 st(6) [orig:79 D.5152 ] [79])
        (mem:XF (reg/f:DI 0 ax [orig:78 D.5153 ] [78]) [0 *_30+0 S16 A128])) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:78 D.5153 ] [78])
        (nil)))
(insn 114 84 119 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])
        (reg:XF 14 st(6) [orig:79 D.5152 ] [79])) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 14 st(6) [orig:79 D.5152 ] [79])
        (nil)))
(note 119 114 85 4 NOTE_INSN_DELETED)
(insn 85 119 86 4 (set (reg:XF 0 ax [111])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 b+0 S16 A128])) mUtility.c:389 131 {*movxf_internal_rex64}
     (nil))
(insn 86 85 87 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [111])) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [111])
        (nil)))
(call_insn 87 86 88 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("deg") [flags 0x3]  <function_decl 0x7f4452e41600 deg>) [0 deg S1 A8])
            (const_int 16 [0x10]))) mUtility.c:389 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (nil)))
(insn 88 87 115 4 (set (reg:XF 8 st [orig:80 D.5152 ] [80])
        (reg:XF 8 st)) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 115 88 89 4 (set (reg:XF 14 st(6) [orig:79 D.5152 ] [79])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 %sfp+-96 S16 A128])) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 79 [ D.5152 ])
        (nil)))
(insn 89 115 90 4 (set (reg:XF 8 st [orig:81 D.5152 ] [81])
        (plus:XF (reg:XF 8 st [orig:80 D.5152 ] [80])
            (reg:XF 14 st(6) [orig:79 D.5152 ] [79]))) mUtility.c:389 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 14 st(6) [orig:79 D.5152 ] [79])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.5152 ] [80])
            (nil))))
(insn 90 89 91 4 (set (mem:XF (reg/f:DI 3 bx [orig:77 D.5153 ] [77]) [0 *_29+0 S16 A128])
        (reg:XF 8 st [orig:81 D.5152 ] [81])) mUtility.c:389 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.5152 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:77 D.5153 ] [77])
            (nil))))
(insn 91 90 94 4 (set (reg:SI 0 ax [orig:82 D.5154 ] [82])
        (const_int 0 [0])) mUtility.c:391 89 {*movsi_internal}
     (nil))
(insn 94 91 98 4 (set (reg:SI 0 ax [orig:83 <retval> ] [83])
        (reg:SI 0 ax [orig:82 D.5154 ] [82])) mUtility.c:391 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:82 D.5154 ] [82])
        (nil)))
(insn 98 94 101 4 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:83 <retval> ] [83])) mUtility.c:392 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 <retval> ] [83])
        (nil)))
(insn 101 98 0 4 (use (reg/i:SI 0 ax)) mUtility.c:392 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function angle_direction (angle_direction, funcdef_no=36, decl_uid=1794, cgraph_uid=36)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=288, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=272, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 42
changing reg in insn 45
changing reg in insn 45
changing reg in insn 49
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 34
changing reg in insn 32
changing reg in insn 35
changing reg in insn 37
changing reg in insn 39
changing reg in insn 38
changing reg in insn 40
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 41.


angle_direction

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={13d,6u} r1={15d,9u} r2={9d,2u} r4={13d,7u} r5={13d,7u} r6={1d,19u} r7={1d,8u} r8={9d,5u} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={17d} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 388{324d,64u,0e} in 41{35 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:394 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:394 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 c+0 S8 A64])
        (reg:DI 1 dx [ c ])) mUtility.c:394 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ c ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (reg:DI 1 dx [61])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:400 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [62])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [0 a+0 S8 A64])) mUtility.c:400 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [61])) mUtility.c:400 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [61])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [62])) mUtility.c:400 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [62])
        (nil)))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:400 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 1 dx [63])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:401 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 0 ax [64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [0 b+0 S8 A64])) mUtility.c:401 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [63])) mUtility.c:401 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [63])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [64])) mUtility.c:401 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [64])
        (nil)))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:401 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 1 dx [65])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:402 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 2 (set (reg:DI 0 ax [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [0 c+0 S8 A64])) mUtility.c:402 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [65])) mUtility.c:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [65])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [66])) mUtility.c:402 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [66])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:402 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 23 22 24 2 (parallel [
            (set (reg:DI 1 dx [67])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:406 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 2 cx [68])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:406 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 0 ax [69])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:406 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [67])) mUtility.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [67])
        (nil)))
(insn 27 26 28 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [68])) mUtility.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [68])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [69])) mUtility.c:406 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [69])
        (nil)))
(call_insn 29 28 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_cross_prod") [flags 0x3]  <function_decl 0x7f4452bcd100 _cross_prod>) [0 _cross_prod S1 A8])
            (const_int 0 [0]))) mUtility.c:406 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 1 dx [70])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:407 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 2 cx [71])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:407 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 0 ax [72])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:407 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 33 32 34 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [70])) mUtility.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [70])
        (nil)))
(insn 34 33 35 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [71])) mUtility.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [71])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [72])) mUtility.c:407 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(call_insn 36 35 37 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_cross_prod") [flags 0x3]  <function_decl 0x7f4452bcd100 _cross_prod>) [0 _cross_prod S1 A8])
            (const_int 0 [0]))) mUtility.c:407 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 1 dx [73])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:409 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 38 37 39 2 (parallel [
            (set (reg:DI 0 ax [74])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:409 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 39 38 40 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [73])) mUtility.c:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [73])
        (nil)))
(insn 40 39 41 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [74])) mUtility.c:409 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(call_insn 41 40 42 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:409 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 42 41 45 2 (set (reg:XF 8 st [orig:59 D.5155 ] [59])
        (reg:XF 8 st)) mUtility.c:409 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 45 42 49 2 (set (reg:XF 8 st [orig:60 <retval> ] [60])
        (reg:XF 8 st [orig:59 D.5155 ] [59])) mUtility.c:409 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.5155 ] [59])
        (nil)))
(insn 49 45 52 2 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:60 <retval> ] [60])) mUtility.c:411 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 <retval> ] [60])
        (nil)))
(insn 52 49 0 2 (use (reg/i:XF 8 st)) mUtility.c:411 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function proj_point_to_circle (proj_point_to_circle, funcdef_no=37, decl_uid=1804, cgraph_uid=37)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 42:  (0) =f  (1) 0 {*absxf2_1}
      Creating newreg=170 from oldreg=60, assigning class FLOAT_REGS to r170
   42: r170:XF=abs(r170:XF)
      REG_DEAD r108:XF
    Inserting insn reload before:
  242: r170:XF=r108:XF
    Inserting insn reload after:
  243: r60:XF=r170:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 49:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 113:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 134:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 141:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 147:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=171 from oldreg=74, assigning class FLOAT_REGS to r171
  147: r171:XF=-r171:XF
      REG_DEAD r73:XF
    Inserting insn reload before:
  244: r171:XF=r73:XF
    Inserting insn reload after:
  245: r74:XF=r171:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 153:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 160:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 166:  (0) =f  (1) 0 {*negxf2_1}
      Creating newreg=172 from oldreg=83, assigning class FLOAT_REGS to r172
  166: r172:XF=-r172:XF
      REG_DEAD r82:XF
    Inserting insn reload before:
  246: r172:XF=r82:XF
    Inserting insn reload after:
  247: r83:XF=r172:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 171:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =f  (1) 0 {*negxf2_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 182:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 187:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 188:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 193:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=173 from oldreg=91, assigning class FLOAT_REGS to r173
  193: flags:CCFPU=cmp(r92:XF,r173:XF)
      REG_DEAD r92:XF
      REG_DEAD r91:XF
    Inserting insn reload before:
  248: r173:XF=r91:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 200:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=174 from oldreg=91, assigning class FLOAT_REGS to inheritance r174
    Original reg change 91->174 (bb8):
  186: r174:XF=st:XF
      REG_DEAD st:XF
    Add original<-inheritance after:
  249: r91:XF=r174:XF

    Inheritance reuse change 91->174 (bb8):
  248: r173:XF=r174:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   249: r91:XF=r174:XF
deleting insn with uid = 249.
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 225: point = 0
   Insn 222: point = 0
   Insn 218: point = 1
   Insn 215: point = 3
  BB 9
   Insn 240: point = 4
   Insn 203: point = 4
   Insn 202: point = 4
   Insn 201: point = 5
   Insn 200: point = 6
   Insn 199: point = 7
  BB 10
   Insn 212: point = 8
   Insn 211: point = 8
   Insn 210: point = 9
   Insn 209: point = 10
   Insn 208: point = 11
  BB 8
   Insn 194: point = 12
   Insn 193: point = 12
   Insn 248: point = 13
	   Creating copy r173<-r174@1
   Insn 192: point = 15
   Insn 191: point = 16
   Insn 190: point = 16
   Insn 189: point = 17
   Insn 188: point = 18
   Insn 187: point = 19
   Insn 186: point = 20
	Hard reg 8 is preferable by r174 with profit 1
   Insn 185: point = 21
   Insn 184: point = 21
   Insn 183: point = 22
   Insn 182: point = 23
   Insn 181: point = 24
   Insn 180: point = 25
   Insn 179: point = 26
   Insn 178: point = 28
   Insn 177: point = 29
   Insn 176: point = 30
   Insn 175: point = 32
   Insn 174: point = 33
   Insn 173: point = 34
   Insn 172: point = 36
   Insn 171: point = 37
   Insn 170: point = 38
   Insn 169: point = 39
   Insn 168: point = 40
   Insn 167: point = 42
   Insn 247: point = 43
	Hard reg 9 is preferable by r172 with profit 1
   Insn 166: point = 45
   Insn 246: point = 45
	Hard reg 9 is preferable by r172 with profit 1
	Hard reg 8 is preferable by r172 with profit 1
   Insn 165: point = 47
   Insn 164: point = 49
   Insn 163: point = 51
   Insn 162: point = 53
   Insn 161: point = 54
   Insn 160: point = 55
   Insn 159: point = 57
   Insn 158: point = 58
   Insn 157: point = 59
   Insn 156: point = 61
   Insn 155: point = 63
   Insn 154: point = 64
   Insn 153: point = 65
   Insn 152: point = 67
   Insn 151: point = 68
   Insn 150: point = 69
   Insn 149: point = 70
   Insn 148: point = 72
   Insn 245: point = 73
	Hard reg 9 is preferable by r171 with profit 1
   Insn 147: point = 75
   Insn 244: point = 75
	Hard reg 9 is preferable by r171 with profit 1
	Hard reg 8 is preferable by r171 with profit 1
   Insn 146: point = 77
   Insn 145: point = 79
   Insn 144: point = 81
   Insn 143: point = 83
   Insn 142: point = 84
   Insn 141: point = 85
   Insn 140: point = 87
   Insn 139: point = 88
   Insn 138: point = 89
   Insn 137: point = 91
   Insn 136: point = 93
   Insn 135: point = 94
   Insn 134: point = 95
   Insn 133: point = 97
   Insn 132: point = 98
  BB 7
   Insn 129: point = 99
   Insn 128: point = 99
  BB 6
   Insn 123: point = 99
   Insn 122: point = 99
   Insn 121: point = 100
  BB 5
   Insn 120: point = 102
   Insn 119: point = 102
   Insn 118: point = 103
   Insn 117: point = 104
   Insn 116: point = 106
   Insn 115: point = 108
   Insn 114: point = 109
   Insn 113: point = 110
   Insn 112: point = 112
   Insn 111: point = 113
  BB 4
   Insn 108: point = 114
   Insn 107: point = 114
  BB 3
   Insn 102: point = 114
   Insn 101: point = 114
   Insn 100: point = 115
  BB 2
   Insn 99: point = 117
   Insn 98: point = 117
   Insn 97: point = 118
   Insn 96: point = 119
   Insn 95: point = 120
   Insn 94: point = 120
   Insn 93: point = 121
   Insn 92: point = 122
   Insn 91: point = 123
   Insn 90: point = 124
   Insn 89: point = 125
   Insn 88: point = 126
   Insn 87: point = 127
   Insn 86: point = 128
   Insn 85: point = 129
   Insn 84: point = 130
   Insn 83: point = 131
   Insn 82: point = 132
   Insn 81: point = 133
   Insn 80: point = 135
   Insn 79: point = 136
   Insn 78: point = 137
   Insn 77: point = 137
   Insn 76: point = 138
   Insn 75: point = 139
   Insn 74: point = 140
   Insn 73: point = 141
   Insn 72: point = 142
   Insn 71: point = 143
   Insn 70: point = 144
   Insn 69: point = 145
   Insn 68: point = 146
   Insn 67: point = 147
   Insn 66: point = 148
   Insn 65: point = 149
   Insn 64: point = 150
   Insn 63: point = 151
   Insn 62: point = 152
   Insn 61: point = 153
   Insn 60: point = 154
   Insn 59: point = 155
   Insn 58: point = 156
   Insn 57: point = 157
   Insn 56: point = 158
   Insn 55: point = 159
   Insn 54: point = 160
   Insn 53: point = 161
   Insn 52: point = 161
   Insn 51: point = 162
   Insn 50: point = 163
   Insn 49: point = 164
   Insn 48: point = 165
   Insn 47: point = 166
   Insn 46: point = 167
   Insn 45: point = 168
   Insn 44: point = 169
   Insn 43: point = 171
   Insn 243: point = 172
	Hard reg 9 is preferable by r170 with profit 1
   Insn 42: point = 174
   Insn 242: point = 174
	Hard reg 9 is preferable by r170 with profit 1
	Hard reg 8 is preferable by r170 with profit 1
   Insn 41: point = 176
   Insn 40: point = 177
   Insn 39: point = 178
   Insn 38: point = 180
   Insn 37: point = 181
   Insn 36: point = 182
   Insn 35: point = 182
   Insn 34: point = 183
   Insn 33: point = 184
   Insn 32: point = 185
   Insn 31: point = 186
   Insn 30: point = 186
   Insn 29: point = 187
   Insn 28: point = 188
   Insn 27: point = 189
   Insn 26: point = 190
   Insn 25: point = 191
   Insn 24: point = 192
   Insn 23: point = 192
   Insn 22: point = 193
   Insn 21: point = 194
   Insn 20: point = 195
   Insn 19: point = 196
   Insn 18: point = 196
   Insn 17: point = 197
   Insn 16: point = 198
   Insn 15: point = 199
   Insn 14: point = 200
   Insn 13: point = 200
   Insn 12: point = 201
   Insn 11: point = 202
   Insn 10: point = 203
   Insn 6: point = 204
   Insn 5: point = 204
   Insn 4: point = 204
   Insn 3: point = 204
   Insn 2: point = 204
 r59: [179..181]
 r60: [170..172]
 r61: [167..169]
 r62: [134..136]
 r63: [114..119]
 r64: [105..110]
 r65: [105..106]
 r66: [99..104]
 r67: [90..95]
 r68: [90..91]
 r69: [78..89]
 r70: [80..85]
 r71: [80..81]
 r72: [78..79]
 r73: [76..77]
 r74: [71..73]
 r75: [69..70]
 r76: [60..65]
 r77: [60..61]
 r78: [48..59]
 r79: [50..55]
 r80: [50..51]
 r81: [48..49]
 r82: [46..47]
 r83: [41..43]
 r84: [39..40]
 r85: [35..36]
 r86: [33..34]
 r87: [31..32]
 r88: [29..30]
 r89: [27..28]
 r90: [25..26]
 r92: [12..15]
 r93: [2..3]
 r94: [0..1]
 r95: [201..203]
 r96: [200..202]
 r97: [197..199]
 r98: [196..198]
 r99: [193..195]
 r100: [192..194]
 r101: [188..191]
 r102: [187..190]
 r103: [186..189]
 r104: [183..185]
 r105: [182..184]
 r106: [177..178]
 r107: [179..180]
 r108: [175..176]
 r109: [170..171]
 r110: [167..168]
 r111: [163..166]
 r112: [162..165]
 r113: [161..164]
 r114: [159..160]
 r115: [157..158]
 r116: [155..156]
 r117: [153..154]
 r118: [151..152]
 r119: [149..150]
 r120: [147..148]
 r121: [145..146]
 r122: [143..144]
 r123: [141..142]
 r124: [139..140]
 r125: [137..138]
 r126: [132..133]
 r127: [134..135]
 r128: [130..131]
 r129: [128..129]
 r130: [126..127]
 r131: [124..125]
 r132: [122..123]
 r133: [120..121]
 r134: [117..118]
 r135: [114..115]
 r136: [111..113]
 r137: [111..112]
 r138: [107..109]
 r139: [107..108]
 r140: [102..103]
 r141: [99..100]
 r142: [96..98]
 r143: [96..97]
 r144: [92..94]
 r145: [92..93]
 r146: [86..88]
 r147: [86..87]
 r148: [82..84]
 r149: [82..83]
 r150: [71..72]
 r151: [66..68]
 r152: [66..67]
 r153: [62..64]
 r154: [62..63]
 r155: [56..58]
 r156: [56..57]
 r157: [52..54]
 r158: [52..53]
 r159: [41..42]
 r160: [37..38]
 r161: [22..24]
 r162: [21..23]
 r163: [17..19]
 r164: [16..18]
 r165: [5..7]
 r166: [4..6]
 r167: [9..11]
 r168: [8..10]
 r170: [173..174]
 r171: [74..75]
 r172: [44..45]
 r173: [12..13]
 r174: [14..20]
Compressing live ranges: from 204 to 152 - 74%
Ranges after the compression:
 r59: [140..141]
 r60: [132..133]
 r61: [130..131]
 r62: [102..103]
 r63: [84..87]
 r64: [78..81]
 r65: [78..79]
 r66: [74..77]
 r67: [68..71]
 r68: [68..69]
 r69: [60..67]
 r70: [62..65]
 r71: [62..63]
 r72: [60..61]
 r73: [58..59]
 r74: [54..55]
 r75: [52..53]
 r76: [46..49]
 r77: [46..47]
 r78: [38..45]
 r79: [40..43]
 r80: [40..41]
 r81: [38..39]
 r82: [36..37]
 r83: [32..33]
 r84: [30..31]
 r85: [26..27]
 r86: [24..25]
 r87: [22..23]
 r88: [20..21]
 r89: [18..19]
 r90: [16..17]
 r92: [8..11]
 r93: [2..3]
 r94: [0..1]
 r95: [150..151]
 r96: [150..151]
 r97: [148..149]
 r98: [148..149]
 r99: [146..147]
 r100: [146..147]
 r101: [144..145]
 r102: [144..145]
 r103: [144..145]
 r104: [142..143]
 r105: [142..143]
 r106: [138..139]
 r107: [140..141]
 r108: [136..137]
 r109: [132..133]
 r110: [130..131]
 r111: [128..129]
 r112: [128..129]
 r113: [128..129]
 r114: [126..127]
 r115: [124..125]
 r116: [122..123]
 r117: [120..121]
 r118: [118..119]
 r119: [116..117]
 r120: [114..115]
 r121: [112..113]
 r122: [110..111]
 r123: [108..109]
 r124: [106..107]
 r125: [104..105]
 r126: [100..101]
 r127: [102..103]
 r128: [98..99]
 r129: [96..97]
 r130: [94..95]
 r131: [92..93]
 r132: [90..91]
 r133: [88..89]
 r134: [86..87]
 r135: [84..85]
 r136: [82..83]
 r137: [82..83]
 r138: [80..81]
 r139: [80..81]
 r140: [76..77]
 r141: [74..75]
 r142: [72..73]
 r143: [72..73]
 r144: [70..71]
 r145: [70..71]
 r146: [66..67]
 r147: [66..67]
 r148: [64..65]
 r149: [64..65]
 r150: [54..55]
 r151: [50..51]
 r152: [50..51]
 r153: [48..49]
 r154: [48..49]
 r155: [44..45]
 r156: [44..45]
 r157: [42..43]
 r158: [42..43]
 r159: [32..33]
 r160: [28..29]
 r161: [14..15]
 r162: [14..15]
 r163: [12..13]
 r164: [12..13]
 r165: [4..5]
 r166: [4..5]
 r167: [6..7]
 r168: [6..7]
 r170: [134..135]
 r171: [56..57]
 r172: [34..35]
 r173: [8..9]
 r174: [10..13]
	 Assigning to 170 (cl=FLOAT_REGS, orig=60, freq=3, tfirst=170, tfreq=3)...
	   Assign 9 to reload r170 (freq=3)
	 Assigning to 171 (cl=FLOAT_REGS, orig=74, freq=3, tfirst=171, tfreq=3)...
	   Assign 9 to reload r171 (freq=3)
	 Assigning to 172 (cl=FLOAT_REGS, orig=83, freq=3, tfirst=172, tfreq=3)...
	   Assign 9 to reload r172 (freq=3)
	 Assigning to 173 (cl=FLOAT_REGS, orig=91, freq=2, tfirst=173, tfreq=2)...
	   Assign 12 to reload r173 (freq=2)
	Hard reg 8 is preferable by r174 with profit 1
	Hard reg 12 is preferable by r174 with profit 1
	 Assigning to 174 (cl=FLOAT_REGS, orig=91, freq=2, tfirst=173, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  248: r173:XF=r91:XF
      REG_DEAD r91:XF
   Insn after restoring regs:
  186: r91:XF=st:XF
      REG_DEAD st:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 11
   Insn 225: point = 0
   Insn 222: point = 0
   Insn 218: point = 1
   Insn 215: point = 3
  BB 9
   Insn 240: point = 4
   Insn 203: point = 4
   Insn 202: point = 4
   Insn 201: point = 5
   Insn 200: point = 6
   Insn 199: point = 7
  BB 10
   Insn 212: point = 8
   Insn 211: point = 8
   Insn 210: point = 9
   Insn 209: point = 10
   Insn 208: point = 11
  BB 8
   Insn 194: point = 12
   Insn 193: point = 12
   Insn 248: point = 13
   Insn 192: point = 15
   Insn 191: point = 16
   Insn 190: point = 16
   Insn 189: point = 17
   Insn 188: point = 18
   Insn 187: point = 19
   Insn 186: point = 20
   Insn 185: point = 21
   Insn 184: point = 21
   Insn 183: point = 22
   Insn 182: point = 23
   Insn 181: point = 24
   Insn 180: point = 25
   Insn 179: point = 26
   Insn 178: point = 28
   Insn 177: point = 29
   Insn 176: point = 30
   Insn 175: point = 32
   Insn 174: point = 33
   Insn 173: point = 34
   Insn 172: point = 36
   Insn 171: point = 37
   Insn 170: point = 38
   Insn 169: point = 39
   Insn 168: point = 40
   Insn 167: point = 42
   Insn 247: point = 43
   Insn 166: point = 45
   Insn 246: point = 45
   Insn 165: point = 47
   Insn 164: point = 49
   Insn 163: point = 51
   Insn 162: point = 53
   Insn 161: point = 54
   Insn 160: point = 55
   Insn 159: point = 57
   Insn 158: point = 58
   Insn 157: point = 59
   Insn 156: point = 61
   Insn 155: point = 63
   Insn 154: point = 64
   Insn 153: point = 65
   Insn 152: point = 67
   Insn 151: point = 68
   Insn 150: point = 69
   Insn 149: point = 70
   Insn 148: point = 72
   Insn 245: point = 73
   Insn 147: point = 75
   Insn 244: point = 75
   Insn 146: point = 77
   Insn 145: point = 79
   Insn 144: point = 81
   Insn 143: point = 83
   Insn 142: point = 84
   Insn 141: point = 85
   Insn 140: point = 87
   Insn 139: point = 88
   Insn 138: point = 89
   Insn 137: point = 91
   Insn 136: point = 93
   Insn 135: point = 94
   Insn 134: point = 95
   Insn 133: point = 97
   Insn 132: point = 98
  BB 7
   Insn 129: point = 99
   Insn 128: point = 99
  BB 6
   Insn 123: point = 99
   Insn 122: point = 99
   Insn 121: point = 100
  BB 5
   Insn 120: point = 102
   Insn 119: point = 102
   Insn 118: point = 103
   Insn 117: point = 104
   Insn 116: point = 106
   Insn 115: point = 108
   Insn 114: point = 109
   Insn 113: point = 110
   Insn 112: point = 112
   Insn 111: point = 113
  BB 4
   Insn 108: point = 114
   Insn 107: point = 114
  BB 3
   Insn 102: point = 114
   Insn 101: point = 114
   Insn 100: point = 115
  BB 2
   Insn 99: point = 117
   Insn 98: point = 117
   Insn 97: point = 118
   Insn 96: point = 119
   Insn 95: point = 120
   Insn 94: point = 120
   Insn 93: point = 121
   Insn 92: point = 122
   Insn 91: point = 123
   Insn 90: point = 124
   Insn 89: point = 125
   Insn 88: point = 126
   Insn 87: point = 127
   Insn 86: point = 128
   Insn 85: point = 129
   Insn 84: point = 130
   Insn 83: point = 131
   Insn 82: point = 132
   Insn 81: point = 133
   Insn 80: point = 135
   Insn 79: point = 136
   Insn 78: point = 137
   Insn 77: point = 137
   Insn 76: point = 138
   Insn 75: point = 139
   Insn 74: point = 140
   Insn 73: point = 141
   Insn 72: point = 142
   Insn 71: point = 143
   Insn 70: point = 144
   Insn 69: point = 145
   Insn 68: point = 146
   Insn 67: point = 147
   Insn 66: point = 148
   Insn 65: point = 149
   Insn 64: point = 150
   Insn 63: point = 151
   Insn 62: point = 152
   Insn 61: point = 153
   Insn 60: point = 154
   Insn 59: point = 155
   Insn 58: point = 156
   Insn 57: point = 157
   Insn 56: point = 158
   Insn 55: point = 159
   Insn 54: point = 160
   Insn 53: point = 161
   Insn 52: point = 161
   Insn 51: point = 162
   Insn 50: point = 163
   Insn 49: point = 164
   Insn 48: point = 165
   Insn 47: point = 166
   Insn 46: point = 167
   Insn 45: point = 168
   Insn 44: point = 169
   Insn 43: point = 171
   Insn 243: point = 172
   Insn 42: point = 174
   Insn 242: point = 174
   Insn 41: point = 176
   Insn 40: point = 177
   Insn 39: point = 178
   Insn 38: point = 180
   Insn 37: point = 181
   Insn 36: point = 182
   Insn 35: point = 182
   Insn 34: point = 183
   Insn 33: point = 184
   Insn 32: point = 185
   Insn 31: point = 186
   Insn 30: point = 186
   Insn 29: point = 187
   Insn 28: point = 188
   Insn 27: point = 189
   Insn 26: point = 190
   Insn 25: point = 191
   Insn 24: point = 192
   Insn 23: point = 192
   Insn 22: point = 193
   Insn 21: point = 194
   Insn 20: point = 195
   Insn 19: point = 196
   Insn 18: point = 196
   Insn 17: point = 197
   Insn 16: point = 198
   Insn 15: point = 199
   Insn 14: point = 200
   Insn 13: point = 200
   Insn 12: point = 201
   Insn 11: point = 202
   Insn 10: point = 203
   Insn 6: point = 204
   Insn 5: point = 204
   Insn 4: point = 204
   Insn 3: point = 204
   Insn 2: point = 204
 r91: [14..20]
Compressing live ranges: from 204 to 2 - 0%
Ranges after the compression:
 r91: [0..1]
  Slot 0 regnos (width = 16):	 91
Changing spilled pseudos to memory in insn #186
Changing spilled pseudos to memory in insn #248

********** Local #3: **********

Reusing alternative 0 for insn #248
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #186
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=640, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 37
changing reg in insn 39
changing reg in insn 44
changing reg in insn 46
changing reg in insn 79
changing reg in insn 81
changing reg in insn 96
changing reg in insn 101
changing reg in insn 98
changing reg in insn 113
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 122
changing reg in insn 119
changing reg in insn 134
changing reg in insn 138
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 146
changing reg in insn 141
changing reg in insn 145
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 157
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 165
changing reg in insn 160
changing reg in insn 164
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 192
changing reg in insn 193
changing reg in insn 215
changing reg in insn 218
changing reg in insn 218
changing reg in insn 222
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 29
changing reg in insn 27
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 111
changing reg in insn 113
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 132
changing reg in insn 134
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 148
changing reg in insn 151
changing reg in insn 153
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 158
changing reg in insn 160
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 167
changing reg in insn 170
changing reg in insn 171
changing reg in insn 181
changing reg in insn 183
changing reg in insn 182
changing reg in insn 184
changing reg in insn 187
changing reg in insn 189
changing reg in insn 188
changing reg in insn 190
changing reg in insn 199
changing reg in insn 201
changing reg in insn 200
changing reg in insn 202
changing reg in insn 208
changing reg in insn 210
changing reg in insn 209
changing reg in insn 211
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 212.


proj_point_to_circle

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 17[flags] 37[r8]
;;  ref usage 	r0={48d,34u} r1={46d,32u} r2={17d,3u} r4={25d,11u} r5={27d,13u} r6={1d,100u} r7={1d,49u} r8={53d,46u} r9={37d,23u} r10={21d,7u} r11={16d,2u} r12={15d,1u} r13={14d} r14={14d} r15={14d} r17={36d,5u} r18={14d} r19={14d} r20={1d,1u} r21={15d} r22={15d} r23={15d} r24={15d} r25={15d} r26={15d} r27={15d} r28={15d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={15d,1u} r38={15d} r39={14d} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} 
;;    total ref usage 1144{816d,328u,0e} in 200{186 regular + 14 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 p0+0 S8 A64])
        (reg:DI 5 di [ p0 ])) mUtility.c:415 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p0 ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 p1+0 S8 A64])
        (reg:DI 4 si [ p1 ])) mUtility.c:415 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ p1 ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -488 [0xfffffffffffffe18])) [0 px+0 S8 A64])
        (reg:DI 1 dx [ px ])) mUtility.c:415 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ px ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -496 [0xfffffffffffffe10])) [0 ph+0 S8 A64])
        (reg:DI 2 cx [ ph ])) mUtility.c:415 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ ph ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -504 [0xfffffffffffffe08])) [0 dist+0 S8 A64])
        (reg:DI 37 r8 [ dist ])) mUtility.c:415 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ dist ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (parallel [
            (set (reg:DI 1 dx [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:418 274 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 p0+0 S8 A64])) mUtility.c:418 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [95])) mUtility.c:418 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [95])
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) mUtility.c:418 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:418 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 1 dx [97])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:419 274 {*adddi_1}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 p1+0 S8 A64])) mUtility.c:419 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [97])) mUtility.c:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [97])
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) mUtility.c:419 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:419 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 20 19 21 2 (parallel [
            (set (reg:DI 1 dx [99])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:420 274 {*adddi_1}
     (nil))
(insn 21 20 22 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -488 [0xfffffffffffffe18])) [0 px+0 S8 A64])) mUtility.c:420 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [99])) mUtility.c:420 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [99])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) mUtility.c:420 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_cart") [flags 0x3]  <function_decl 0x7f4452bbab00 _to_cart>) [0 _to_cart S1 A8])
            (const_int 0 [0]))) mUtility.c:420 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 1 dx [101])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:424 274 {*adddi_1}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg:DI 2 cx [102])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:424 274 {*adddi_1}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg:DI 0 ax [103])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:424 274 {*adddi_1}
     (nil))
(insn 28 27 29 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [101])) mUtility.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [101])
        (nil)))
(insn 29 28 30 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [102])) mUtility.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [102])
        (nil)))
(insn 30 29 31 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) mUtility.c:424 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [103])
        (nil)))
(call_insn 31 30 32 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_cross_prod") [flags 0x3]  <function_decl 0x7f4452bcd100 _cross_prod>) [0 _cross_prod S1 A8])
            (const_int 0 [0]))) mUtility.c:424 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 1 dx [104])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:428 274 {*adddi_1}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:428 274 {*adddi_1}
     (nil))
(insn 34 33 35 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [104])) mUtility.c:428 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [104])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) mUtility.c:428 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [105])
        (nil)))
(call_insn 36 35 37 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("angle_betw_0pi") [flags 0x3]  <function_decl 0x7f4452bbae00 angle_betw_0pi>) [0 angle_betw_0pi S1 A8])
            (const_int 0 [0]))) mUtility.c:428 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 37 36 38 2 (set (reg:XF 8 st [orig:59 D.5156 ] [59])
        (reg:XF 8 st)) mUtility.c:428 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 38 37 39 2 (set (reg:XF 9 st(1) [107])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) mUtility.c:428 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.5707963267948965579989817342720925807952880859375e+0 [0x0.c90fdaa22168cp+1])
        (nil)))
(insn 39 38 40 2 (set (reg:XF 8 st [106])
        (minus:XF (reg:XF 8 st [orig:59 D.5156 ] [59])
            (reg:XF 9 st(1) [107]))) mUtility.c:428 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [107])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.5156 ] [59])
            (nil))))
(insn 40 39 41 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -464 [0xfffffffffffffe30])) [0 theta+0 S16 A128])
        (reg:XF 8 st [106])) mUtility.c:428 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [106])
        (nil)))
(insn 41 40 242 2 (set (reg:XF 8 st [108])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -464 [0xfffffffffffffe30])) [0 theta+0 S16 A128])) mUtility.c:430 131 {*movxf_internal_rex64}
     (nil))
(insn 242 41 42 2 (set (reg:XF 9 st(1) [orig:60 D.5156 ] [60])
        (reg:XF 8 st [108])) mUtility.c:430 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [108])
        (nil)))
(insn 42 242 243 2 (set (reg:XF 9 st(1) [orig:60 D.5156 ] [60])
        (abs:XF (reg:XF 9 st(1) [orig:60 D.5156 ] [60]))) mUtility.c:430 480 {*absxf2_1}
     (nil))
(insn 243 42 43 2 (set (reg:XF 9 st(1) [orig:60 D.5156 ] [60])
        (reg:XF 9 st(1) [orig:60 D.5156 ] [60])) mUtility.c:430 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5156 ] [60])
        (nil)))
(insn 43 243 44 2 (set (reg:XF 8 st [109])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:430 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 44 43 45 2 (set (reg:XF 8 st [orig:61 D.5156 ] [61])
        (mult:XF (reg:XF 8 st [109])
            (reg:XF 9 st(1) [orig:60 D.5156 ] [60]))) mUtility.c:430 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [109])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:60 D.5156 ] [60])
            (nil))))
(insn 45 44 46 2 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -504 [0xfffffffffffffe08])) [0 dist+0 S8 A64])) mUtility.c:430 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 2 (set (mem:XF (reg/f:DI 0 ax [110]) [0 *dist_8(D)+0 S16 A128])
        (reg:XF 8 st [orig:61 D.5156 ] [61])) mUtility.c:430 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:61 D.5156 ] [61])
            (nil))))
(insn 47 46 48 2 (parallel [
            (set (reg:DI 1 dx [111])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:434 274 {*adddi_1}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg:DI 2 cx [112])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -240 [0xffffffffffffff10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:434 274 {*adddi_1}
     (nil))
(insn 49 48 50 2 (parallel [
            (set (reg:DI 0 ax [113])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:434 274 {*adddi_1}
     (nil))
(insn 50 49 51 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [111])) mUtility.c:434 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [111])
        (nil)))
(insn 51 50 52 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [112])) mUtility.c:434 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [112])
        (nil)))
(insn 52 51 53 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) mUtility.c:434 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(call_insn 53 52 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_cross_prod") [flags 0x3]  <function_decl 0x7f4452bcd100 _cross_prod>) [0 _cross_prod S1 A8])
            (const_int 0 [0]))) mUtility.c:434 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 54 53 55 2 (set (reg:XF 0 ax [114])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [0 N+0 S16 A128])) mUtility.c:436 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])
        (reg:XF 0 ax [114])) mUtility.c:436 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [114])
        (nil)))
(insn 56 55 57 2 (set (reg:XF 0 ax [115])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 N+16 S16 A128])) mUtility.c:437 131 {*movxf_internal_rex64}
     (nil))
(insn 57 56 58 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])
        (reg:XF 0 ax [115])) mUtility.c:437 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [115])
        (nil)))
(insn 58 57 59 2 (set (reg:XF 0 ax [116])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 N+32 S16 A128])) mUtility.c:438 131 {*movxf_internal_rex64}
     (nil))
(insn 59 58 60 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 c+0 S16 A128])
        (reg:XF 0 ax [116])) mUtility.c:438 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [116])
        (nil)))
(insn 60 59 61 2 (set (reg:XF 0 ax [117])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 T+0 S16 A128])) mUtility.c:439 131 {*movxf_internal_rex64}
     (nil))
(insn 61 60 62 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])
        (reg:XF 0 ax [117])) mUtility.c:439 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [117])
        (nil)))
(insn 62 61 63 2 (set (reg:XF 0 ax [118])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 T+16 S16 A128])) mUtility.c:440 131 {*movxf_internal_rex64}
     (nil))
(insn 63 62 64 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])
        (reg:XF 0 ax [118])) mUtility.c:440 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [118])
        (nil)))
(insn 64 63 65 2 (set (reg:XF 0 ax [119])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 T+32 S16 A128])) mUtility.c:441 131 {*movxf_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 f+0 S16 A128])
        (reg:XF 0 ax [119])) mUtility.c:441 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [119])
        (nil)))
(insn 66 65 67 2 (set (reg:XF 0 ax [120])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 f+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0  S16 A128])
        (reg:XF 0 ax [120])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [120])
        (nil)))
(insn 68 67 69 2 (set (reg:XF 0 ax [121])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 69 68 70 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0  S16 A128])
        (reg:XF 0 ax [121])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [121])
        (nil)))
(insn 70 69 71 2 (set (reg:XF 0 ax [122])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 71 70 72 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0  S16 A128])
        (reg:XF 0 ax [122])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [122])
        (nil)))
(insn 72 71 73 2 (set (reg:XF 0 ax [123])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 c+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 0 ax [123])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [123])
        (nil)))
(insn 74 73 75 2 (set (reg:XF 0 ax [124])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 75 74 76 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [124])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [124])
        (nil)))
(insn 76 75 77 2 (set (reg:XF 0 ax [125])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (nil))
(insn 77 76 78 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [125])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [125])
        (nil)))
(call_insn 78 77 79 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_den") [flags 0x3]  <function_decl 0x7f4452bcd800 _den>) [0 _den S1 A8])
            (const_int 96 [0x60]))) mUtility.c:444 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                            (const_int 32 [0x20])) [0  S16 A128]))
                (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                (const_int 48 [0x30])) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 64 [0x40])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 80 [0x50])) [0  S16 A128]))
                            (nil))))))))
(insn 79 78 80 2 (set (reg:XF 8 st [orig:62 D.5156 ] [62])
        (reg:XF 8 st)) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 80 79 81 2 (set (reg:XF 9 st(1) [127])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.371e+6 [0x0.c26d7p+23])
        (nil)))
(insn 81 80 82 2 (set (reg:XF 8 st [126])
        (div:XF (reg:XF 9 st(1) [127])
            (reg:XF 8 st [orig:62 D.5156 ] [62]))) mUtility.c:444 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [127])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.5156 ] [62])
            (nil))))
(insn 82 81 83 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 t+0 S16 A128])
        (reg:XF 8 st [126])) mUtility.c:444 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [126])
        (nil)))
(insn 83 82 84 2 (set (reg:XF 0 ax [128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 f+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 84 83 85 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [0  S16 A128])
        (reg:XF 0 ax [128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [128])
        (nil)))
(insn 85 84 86 2 (set (reg:XF 0 ax [129])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 86 85 87 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [0  S16 A128])
        (reg:XF 0 ax [129])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [129])
        (nil)))
(insn 87 86 88 2 (set (reg:XF 0 ax [130])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 88 87 89 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0  S16 A128])
        (reg:XF 0 ax [130])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [130])
        (nil)))
(insn 89 88 90 2 (set (reg:XF 0 ax [131])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 c+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0  S16 A128])
        (reg:XF 0 ax [131])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [131])
        (nil)))
(insn 91 90 92 2 (set (reg:XF 0 ax [132])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 92 91 93 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 0 ax [132])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [132])
        (nil)))
(insn 93 92 94 2 (set (reg:XF 0 ax [133])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (nil))
(insn 94 93 95 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [133])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [133])
        (nil)))
(call_insn 95 94 96 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_den") [flags 0x3]  <function_decl 0x7f4452bcd800 _den>) [0 _den S1 A8])
            (const_int 96 [0x60]))) mUtility.c:446 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                            (const_int 32 [0x20])) [0  S16 A128]))
                (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                (const_int 48 [0x30])) [0  S16 A128]))
                    (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                    (const_int 64 [0x40])) [0  S16 A128]))
                        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                                        (const_int 80 [0x50])) [0  S16 A128]))
                            (nil))))))))
(insn 96 95 97 2 (set (reg:XF 8 st [orig:63 D.5156 ] [63])
        (reg:XF 8 st)) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 97 96 98 2 (set (reg:XF 9 st(1) [134])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 98 97 99 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:63 D.5156 ] [63])
            (reg:XF 9 st(1) [134]))) mUtility.c:446 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [134])
        (nil)))
(jump_insn 99 98 227 2 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) mUtility.c:446 612 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63
;; lr  def 	 17 [flags] 135
(note 227 99 100 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 100 227 101 3 (set (reg:XF 9 st(1) [135])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mUtility.c:446 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 101 100 102 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:63 D.5156 ] [63])
            (reg:XF 9 st(1) [135]))) mUtility.c:446 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [135])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5156 ] [63])
            (nil))))
(jump_insn 102 101 106 3 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) mUtility.c:446 612 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 106 102 107 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f4452922260 *.LC10>)) mUtility.c:446 87 {*movdi_internal_rex64}
     (nil))
(call_insn 108 107 109 4 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x3]  <function_decl 0x7f4452e3c300 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mUtility.c:446 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 136 137 138 139 140
(code_label 109 108 110 5 151 "" [2 uses])
(note 110 109 111 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 5 (set (reg:XF 9 st(1) [136])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (nil))
(insn 112 111 113 5 (set (reg:XF 8 st [137])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (nil))
(insn 113 112 114 5 (set (reg:XF 9 st(1) [orig:64 D.5156 ] [64])
        (mult:XF (reg:XF 9 st(1) [136])
            (reg:XF 8 st [137]))) mUtility.c:447 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [137])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [136])
            (nil))))
(insn 114 113 115 5 (set (reg:XF 10 st(2) [138])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (nil))
(insn 115 114 116 5 (set (reg:XF 8 st [139])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (nil))
(insn 116 115 117 5 (set (reg:XF 8 st [orig:65 D.5156 ] [65])
        (mult:XF (reg:XF 8 st [139])
            (reg:XF 10 st(2) [138]))) mUtility.c:447 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [139])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [138])
            (nil))))
(insn 117 116 118 5 (set (reg:XF 8 st [orig:66 D.5156 ] [66])
        (minus:XF (reg:XF 9 st(1) [orig:64 D.5156 ] [64])
            (reg:XF 8 st [orig:65 D.5156 ] [65]))) mUtility.c:447 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.5156 ] [65])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:64 D.5156 ] [64])
            (nil))))
(insn 118 117 119 5 (set (reg:XF 9 st(1) [140])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 119 118 120 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:66 D.5156 ] [66])
            (reg:XF 9 st(1) [140]))) mUtility.c:447 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [140])
        (nil)))
(jump_insn 120 119 230 5 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 130)
            (pc))) mUtility.c:447 612 {*jcc_1}
     (nil)
 -> 130)
;;  succ:       8
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66
;; lr  def 	 17 [flags] 141
(note 230 120 121 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 121 230 122 6 (set (reg:XF 9 st(1) [141])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S16 A128])) mUtility.c:447 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(insn 122 121 123 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:66 D.5156 ] [66])
            (reg:XF 9 st(1) [141]))) mUtility.c:447 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [141])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:66 D.5156 ] [66])
            (nil))))
(jump_insn 123 122 127 6 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 130)
            (pc))) mUtility.c:447 612 {*jcc_1}
     (nil)
 -> 130)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 127 123 128 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f44529222f8 *.LC11>)) mUtility.c:447 87 {*movdi_internal_rex64}
     (nil))
(call_insn 129 128 130 7 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x3]  <function_decl 0x7f4452e3c300 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mUtility.c:447 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164
(code_label 130 129 131 8 153 "" [2 uses])
(note 131 130 132 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 8 (set (reg:XF 9 st(1) [142])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 133 132 134 8 (set (reg:XF 8 st [143])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 f+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 134 133 135 8 (set (reg:XF 9 st(1) [orig:67 D.5156 ] [67])
        (mult:XF (reg:XF 9 st(1) [142])
            (reg:XF 8 st [143]))) mUtility.c:451 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [143])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [142])
            (nil))))
(insn 135 134 136 8 (set (reg:XF 10 st(2) [144])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 c+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 136 135 137 8 (set (reg:XF 8 st [145])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 137 136 138 8 (set (reg:XF 8 st [orig:68 D.5156 ] [68])
        (mult:XF (reg:XF 8 st [145])
            (reg:XF 10 st(2) [144]))) mUtility.c:451 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [145])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [144])
            (nil))))
(insn 138 137 139 8 (set (reg:XF 9 st(1) [orig:69 D.5156 ] [69])
        (minus:XF (reg:XF 9 st(1) [orig:67 D.5156 ] [67])
            (reg:XF 8 st [orig:68 D.5156 ] [68]))) mUtility.c:451 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.5156 ] [68])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:67 D.5156 ] [67])
            (nil))))
(insn 139 138 140 8 (set (reg:XF 10 st(2) [146])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 140 139 141 8 (set (reg:XF 8 st [147])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 141 140 142 8 (set (reg:XF 10 st(2) [orig:70 D.5156 ] [70])
        (mult:XF (reg:XF 10 st(2) [146])
            (reg:XF 8 st [147]))) mUtility.c:451 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [147])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [146])
            (nil))))
(insn 142 141 143 8 (set (reg:XF 11 st(3) [148])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 143 142 144 8 (set (reg:XF 8 st [149])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 144 143 145 8 (set (reg:XF 8 st [orig:71 D.5156 ] [71])
        (mult:XF (reg:XF 8 st [149])
            (reg:XF 11 st(3) [148]))) mUtility.c:451 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [149])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [148])
            (nil))))
(insn 145 144 146 8 (set (reg:XF 8 st [orig:72 D.5156 ] [72])
        (minus:XF (reg:XF 10 st(2) [orig:70 D.5156 ] [70])
            (reg:XF 8 st [orig:71 D.5156 ] [71]))) mUtility.c:451 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:71 D.5156 ] [71])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:70 D.5156 ] [70])
            (nil))))
(insn 146 145 244 8 (set (reg:XF 8 st [orig:73 D.5156 ] [73])
        (div:XF (reg:XF 9 st(1) [orig:69 D.5156 ] [69])
            (reg:XF 8 st [orig:72 D.5156 ] [72]))) mUtility.c:451 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.5156 ] [72])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:69 D.5156 ] [69])
            (nil))))
(insn 244 146 147 8 (set (reg:XF 9 st(1) [orig:74 D.5156 ] [74])
        (reg:XF 8 st [orig:73 D.5156 ] [73])) mUtility.c:451 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5156 ] [73])
        (nil)))
(insn 147 244 245 8 (set (reg:XF 9 st(1) [orig:74 D.5156 ] [74])
        (neg:XF (reg:XF 9 st(1) [orig:74 D.5156 ] [74]))) mUtility.c:451 481 {*negxf2_1}
     (nil))
(insn 245 147 148 8 (set (reg:XF 9 st(1) [orig:74 D.5156 ] [74])
        (reg:XF 9 st(1) [orig:74 D.5156 ] [74])) mUtility.c:451 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.5156 ] [74])
        (nil)))
(insn 148 245 149 8 (set (reg:XF 8 st [150])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 t+0 S16 A128])) mUtility.c:451 131 {*movxf_internal_rex64}
     (nil))
(insn 149 148 150 8 (set (reg:XF 8 st [orig:75 D.5156 ] [75])
        (mult:XF (reg:XF 8 st [150])
            (reg:XF 9 st(1) [orig:74 D.5156 ] [74]))) mUtility.c:451 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [150])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.5156 ] [74])
            (nil))))
(insn 150 149 151 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 X1+0 S16 A128])
        (reg:XF 8 st [orig:75 D.5156 ] [75])) mUtility.c:451 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:75 D.5156 ] [75])
        (nil)))
(insn 151 150 152 8 (set (reg:XF 9 st(1) [151])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -416 [0xfffffffffffffe60])) [0 c+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 152 151 153 8 (set (reg:XF 8 st [152])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 153 152 154 8 (set (reg:XF 9 st(1) [orig:76 D.5156 ] [76])
        (mult:XF (reg:XF 9 st(1) [151])
            (reg:XF 8 st [152]))) mUtility.c:452 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [152])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [151])
            (nil))))
(insn 154 153 155 8 (set (reg:XF 10 st(2) [153])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 155 154 156 8 (set (reg:XF 8 st [154])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [0 f+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 156 155 157 8 (set (reg:XF 8 st [orig:77 D.5156 ] [77])
        (mult:XF (reg:XF 8 st [154])
            (reg:XF 10 st(2) [153]))) mUtility.c:452 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [154])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [153])
            (nil))))
(insn 157 156 158 8 (set (reg:XF 9 st(1) [orig:78 D.5156 ] [78])
        (minus:XF (reg:XF 9 st(1) [orig:76 D.5156 ] [76])
            (reg:XF 8 st [orig:77 D.5156 ] [77]))) mUtility.c:452 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:77 D.5156 ] [77])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:76 D.5156 ] [76])
            (nil))))
(insn 158 157 159 8 (set (reg:XF 10 st(2) [155])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [0 b+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 159 158 160 8 (set (reg:XF 8 st [156])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [0 d+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 160 159 161 8 (set (reg:XF 10 st(2) [orig:79 D.5156 ] [79])
        (mult:XF (reg:XF 10 st(2) [155])
            (reg:XF 8 st [156]))) mUtility.c:452 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [156])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [155])
            (nil))))
(insn 161 160 162 8 (set (reg:XF 11 st(3) [157])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -448 [0xfffffffffffffe40])) [0 a+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 162 161 163 8 (set (reg:XF 8 st [158])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [0 e+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 163 162 164 8 (set (reg:XF 8 st [orig:80 D.5156 ] [80])
        (mult:XF (reg:XF 8 st [158])
            (reg:XF 11 st(3) [157]))) mUtility.c:452 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [158])
        (expr_list:REG_DEAD (reg:XF 11 st(3) [157])
            (nil))))
(insn 164 163 165 8 (set (reg:XF 8 st [orig:81 D.5156 ] [81])
        (minus:XF (reg:XF 10 st(2) [orig:79 D.5156 ] [79])
            (reg:XF 8 st [orig:80 D.5156 ] [80]))) mUtility.c:452 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.5156 ] [80])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:79 D.5156 ] [79])
            (nil))))
(insn 165 164 246 8 (set (reg:XF 8 st [orig:82 D.5156 ] [82])
        (div:XF (reg:XF 9 st(1) [orig:78 D.5156 ] [78])
            (reg:XF 8 st [orig:81 D.5156 ] [81]))) mUtility.c:452 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.5156 ] [81])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:78 D.5156 ] [78])
            (nil))))
(insn 246 165 166 8 (set (reg:XF 9 st(1) [orig:83 D.5156 ] [83])
        (reg:XF 8 st [orig:82 D.5156 ] [82])) mUtility.c:452 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 D.5156 ] [82])
        (nil)))
(insn 166 246 247 8 (set (reg:XF 9 st(1) [orig:83 D.5156 ] [83])
        (neg:XF (reg:XF 9 st(1) [orig:83 D.5156 ] [83]))) mUtility.c:452 481 {*negxf2_1}
     (nil))
(insn 247 166 167 8 (set (reg:XF 9 st(1) [orig:83 D.5156 ] [83])
        (reg:XF 9 st(1) [orig:83 D.5156 ] [83])) mUtility.c:452 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:83 D.5156 ] [83])
        (nil)))
(insn 167 247 168 8 (set (reg:XF 8 st [159])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 t+0 S16 A128])) mUtility.c:452 131 {*movxf_internal_rex64}
     (nil))
(insn 168 167 169 8 (set (reg:XF 8 st [orig:84 D.5156 ] [84])
        (mult:XF (reg:XF 8 st [159])
            (reg:XF 9 st(1) [orig:83 D.5156 ] [83]))) mUtility.c:452 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [159])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:83 D.5156 ] [83])
            (nil))))
(insn 169 168 170 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 X1+16 S16 A128])
        (reg:XF 8 st [orig:84 D.5156 ] [84])) mUtility.c:452 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:84 D.5156 ] [84])
        (nil)))
(insn 170 169 171 8 (set (reg:XF 0 ax [160])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [0 t+0 S16 A128])) mUtility.c:453 131 {*movxf_internal_rex64}
     (nil))
(insn 171 170 172 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 X1+32 S16 A128])
        (reg:XF 0 ax [160])) mUtility.c:453 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [160])
        (nil)))
(insn 172 171 173 8 (set (reg:XF 8 st [orig:85 D.5156 ] [85])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 X1+0 S16 A128])) mUtility.c:455 131 {*movxf_internal_rex64}
     (nil))
(insn 173 172 174 8 (set (reg:XF 8 st [orig:86 D.5156 ] [86])
        (neg:XF (reg:XF 8 st [orig:85 D.5156 ] [85]))) mUtility.c:455 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 D.5156 ] [85])
        (nil)))
(insn 174 173 175 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 X2+0 S16 A128])
        (reg:XF 8 st [orig:86 D.5156 ] [86])) mUtility.c:455 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5156 ] [86])
        (nil)))
(insn 175 174 176 8 (set (reg:XF 8 st [orig:87 D.5156 ] [87])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 X1+16 S16 A128])) mUtility.c:456 131 {*movxf_internal_rex64}
     (nil))
(insn 176 175 177 8 (set (reg:XF 8 st [orig:88 D.5156 ] [88])
        (neg:XF (reg:XF 8 st [orig:87 D.5156 ] [87]))) mUtility.c:456 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:87 D.5156 ] [87])
        (nil)))
(insn 177 176 178 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 X2+16 S16 A128])
        (reg:XF 8 st [orig:88 D.5156 ] [88])) mUtility.c:456 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:88 D.5156 ] [88])
        (nil)))
(insn 178 177 179 8 (set (reg:XF 8 st [orig:89 D.5156 ] [89])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 X1+32 S16 A128])) mUtility.c:457 131 {*movxf_internal_rex64}
     (nil))
(insn 179 178 180 8 (set (reg:XF 8 st [orig:90 D.5156 ] [90])
        (neg:XF (reg:XF 8 st [orig:89 D.5156 ] [89]))) mUtility.c:457 481 {*negxf2_1}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:89 D.5156 ] [89])
        (nil)))
(insn 180 179 181 8 (set (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 X2+32 S16 A128])
        (reg:XF 8 st [orig:90 D.5156 ] [90])) mUtility.c:457 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.5156 ] [90])
        (nil)))
(insn 181 180 182 8 (parallel [
            (set (reg:DI 1 dx [161])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:459 274 {*adddi_1}
     (nil))
(insn 182 181 183 8 (parallel [
            (set (reg:DI 0 ax [162])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:459 274 {*adddi_1}
     (nil))
(insn 183 182 184 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [161])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [161])
        (nil)))
(insn 184 183 185 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [162])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [162])
        (nil)))
(call_insn 185 184 186 8 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("euclid_dist") [flags 0x3]  <function_decl 0x7f4452bcd400 euclid_dist>) [0 euclid_dist S1 A8])
            (const_int 0 [0]))) mUtility.c:459 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 186 185 249 8 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -528 [0xfffffffffffffdf0])) [0 %sfp+-528 S16 A128])
        (reg:XF 8 st)) mUtility.c:459 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(note 249 186 187 8 NOTE_INSN_DELETED)
(insn 187 249 188 8 (parallel [
            (set (reg:DI 1 dx [163])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:459 274 {*adddi_1}
     (nil))
(insn 188 187 189 8 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:459 274 {*adddi_1}
     (nil))
(insn 189 188 190 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [163])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [163])
        (nil)))
(insn 190 189 191 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [164])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(call_insn 191 190 192 8 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("euclid_dist") [flags 0x3]  <function_decl 0x7f4452bcd400 euclid_dist>) [0 euclid_dist S1 A8])
            (const_int 0 [0]))) mUtility.c:459 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 192 191 248 8 (set (reg:XF 8 st [orig:92 D.5156 ] [92])
        (reg:XF 8 st)) mUtility.c:459 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 248 192 193 8 (set (reg:XF 12 st(4) [orig:91 D.5156 ] [91])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -528 [0xfffffffffffffdf0])) [0 %sfp+-528 S16 A128])) mUtility.c:459 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 91 [ D.5156 ])
        (nil)))
(insn 193 248 194 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:92 D.5156 ] [92])
            (reg:XF 12 st(4) [orig:91 D.5156 ] [91]))) mUtility.c:459 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:91 D.5156 ] [91])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.5156 ] [92])
            (nil))))
(jump_insn 194 193 198 8 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 239)
            (pc))) mUtility.c:459 612 {*jcc_1}
     (nil)
 -> 239)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 165 166
(note 198 194 199 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 9 (set (reg:DI 1 dx [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -496 [0xfffffffffffffe10])) [0 ph+0 S8 A64])) mUtility.c:459 87 {*movdi_internal_rex64}
     (nil))
(insn 200 199 201 9 (parallel [
            (set (reg:DI 0 ax [166])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:459 274 {*adddi_1}
     (nil))
(insn 201 200 202 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [165])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [165])
        (nil)))
(insn 202 201 203 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [166])) mUtility.c:459 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [166])
        (nil)))
(call_insn 203 202 240 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_sphere") [flags 0x3]  <function_decl 0x7f4452bbaa00 _to_sphere>) [0 _to_sphere S1 A8])
            (const_int 0 [0]))) mUtility.c:459 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(jump_insn 240 203 241 9 (set (pc)
        (label_ref 213)) 650 {jump}
     (nil)
 -> 213)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 241 240 239)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 167 168
(code_label 239 241 207 10 162 "" [1 uses])
(note 207 239 208 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 10 (set (reg:DI 1 dx [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -496 [0xfffffffffffffe10])) [0 ph+0 S8 A64])) mUtility.c:460 87 {*movdi_internal_rex64}
     (nil))
(insn 209 208 210 10 (parallel [
            (set (reg:DI 0 ax [168])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:460 274 {*adddi_1}
     (nil))
(insn 210 209 211 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [167])) mUtility.c:460 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [167])
        (nil)))
(insn 211 210 212 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [168])) mUtility.c:460 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [168])
        (nil)))
(call_insn 212 211 213 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_to_sphere") [flags 0x3]  <function_decl 0x7f4452bbaa00 _to_sphere>) [0 _to_sphere S1 A8])
            (const_int 0 [0]))) mUtility.c:460 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 93 94
(code_label 213 212 214 11 157 "" [1 uses])
(note 214 213 215 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 218 11 (set (reg:SI 0 ax [orig:93 D.5157 ] [93])
        (const_int 1 [0x1])) mUtility.c:462 89 {*movsi_internal}
     (nil))
(insn 218 215 222 11 (set (reg:SI 0 ax [orig:94 <retval> ] [94])
        (reg:SI 0 ax [orig:93 D.5157 ] [93])) mUtility.c:462 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.5157 ] [93])
        (nil)))
(insn 222 218 225 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:94 <retval> ] [94])) mUtility.c:463 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:94 <retval> ] [94])
        (nil)))
(insn 225 222 0 11 (use (reg/i:SI 0 ax)) mUtility.c:463 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function distance_point_segment (distance_point_segment, funcdef_no=38, decl_uid=1798, cgraph_uid=38)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=103 from oldreg=60, assigning class FLOAT_REGS to r103
   19: r103:XF=[frame:DI-0x30]
    Inserting insn reload after:
  150: r60:XF=r103:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 28:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=104 from oldreg=60, assigning class FLOAT_REGS to r104
   28: flags:CCFPU=cmp(r104:XF,r63:XF)
      REG_DEAD r63:XF
      REG_DEAD r60:XF
    Inserting insn reload before:
  151: r104:XF=r60:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=105 from oldreg=64, assigning class FLOAT_REGS to r105
   34: r105:XF=[frame:DI-0x30]
    Inserting insn reload after:
  152: r64:XF=r105:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 43:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=106 from oldreg=64, assigning class FLOAT_REGS to r106
   43: flags:CCFPU=cmp(r67:XF,r106:XF)
      REG_DEAD r67:XF
      REG_DEAD r64:XF
    Inserting insn reload before:
  153: r106:XF=r64:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 49:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=107 from oldreg=68, assigning class FLOAT_REGS to r107
   49: r107:XF=[frame:DI-0x20]
    Inserting insn reload after:
  154: r68:XF=r107:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 60:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=108 from oldreg=68, assigning class FLOAT_REGS to r108
   60: flags:CCFPU=cmp(r108:XF,r73:XF)
      REG_DEAD r73:XF
      REG_DEAD r68:XF
    Inserting insn reload before:
  155: r108:XF=r68:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1 -- reject
          alt=3,overall=614,losers=1 -- reject
          alt=4,overall=611,losers=1 -- reject
	 Choosing alt 0 in insn 66:  (0) =f  (1) fm {*movxf_internal_rex64}
      Creating newreg=109 from oldreg=74, assigning class FLOAT_REGS to r109
   66: r109:XF=[frame:DI-0x20]
    Inserting insn reload after:
  156: r74:XF=r109:XF

          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 77:  (0) f  (1) f {*cmpiuxf_i387}
      Creating newreg=110 from oldreg=74, assigning class FLOAT_REGS to r110
   77: flags:CCFPU=cmp(r79:XF,r110:XF)
      REG_DEAD r79:XF
      REG_DEAD r74:XF
    Inserting insn reload before:
  157: r110:XF=r74:XF

          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=111, assigning class NO_REGS to secondary r111
  120: r111:XF=r59:XF
      REG_DEAD r59:XF
    Inserting the sec. move after:
  158: r82:XF=r111:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=112 from oldreg=60, assigning class FLOAT_REGS to inheritance r112
    Original reg change 60->112 (bb2):
  150: r112:XF=r103:XF
    Add original<-inheritance after:
  159: r60:XF=r112:XF

    Inheritance reuse change 60->112 (bb2):
  151: r104:XF=r112:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   159: r60:XF=r112:XF
deleting insn with uid = 159.
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=113 from oldreg=64, assigning class FLOAT_REGS to inheritance r113
    Original reg change 64->113 (bb3):
  152: r113:XF=r105:XF
    Add original<-inheritance after:
  160: r64:XF=r113:XF

    Inheritance reuse change 64->113 (bb3):
  153: r106:XF=r113:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   160: r64:XF=r113:XF
deleting insn with uid = 160.
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=114 from oldreg=68, assigning class FLOAT_REGS to inheritance r114
    Original reg change 68->114 (bb4):
  154: r114:XF=r107:XF
    Add original<-inheritance after:
  161: r68:XF=r114:XF

    Inheritance reuse change 68->114 (bb4):
  155: r108:XF=r114:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   161: r68:XF=r114:XF
deleting insn with uid = 161.
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=115 from oldreg=74, assigning class FLOAT_REGS to inheritance r115
    Original reg change 74->115 (bb5):
  156: r115:XF=r109:XF
    Add original<-inheritance after:
  162: r74:XF=r115:XF

    Inheritance reuse change 74->115 (bb5):
  157: r110:XF=r115:XF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   162: r74:XF=r115:XF
deleting insn with uid = 162.
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 127: point = 0
   Insn 124: point = 0
   Insn 158: point = 1
	Hard reg 8 is preferable by r111 with profit 1
   Insn 120: point = 3
	Hard reg 8 is preferable by r111 with profit 1
	Hard reg 0 is preferable by r111 with profit 1
  BB 8
   Insn 148: point = 6
   Insn 110: point = 6
  BB 6
   Insn 145: point = 7
   Insn 83: point = 7
  BB 9
   Insn 115: point = 8
  BB 7
   Insn 105: point = 9
   Insn 104: point = 9
   Insn 103: point = 10
   Insn 102: point = 11
   Insn 101: point = 12
   Insn 100: point = 13
   Insn 99: point = 14
   Insn 98: point = 14
   Insn 97: point = 15
   Insn 96: point = 16
   Insn 95: point = 17
   Insn 94: point = 18
   Insn 93: point = 19
   Insn 92: point = 20
   Insn 91: point = 20
   Insn 90: point = 21
   Insn 89: point = 22
   Insn 88: point = 23
  BB 5
   Insn 78: point = 24
   Insn 77: point = 24
   Insn 157: point = 25
	   Creating copy r110<-r115@1
   Insn 76: point = 27
   Insn 75: point = 28
   Insn 74: point = 28
   Insn 73: point = 29
   Insn 72: point = 30
   Insn 71: point = 32
   Insn 70: point = 34
   Insn 69: point = 35
   Insn 68: point = 37
   Insn 67: point = 39
   Insn 156: point = 40
	   Creating copy r109->r115@1
   Insn 66: point = 42
  BB 4
   Insn 61: point = 43
   Insn 60: point = 43
   Insn 155: point = 44
	   Creating copy r108<-r114@1
   Insn 59: point = 46
   Insn 58: point = 47
   Insn 57: point = 47
   Insn 56: point = 48
   Insn 55: point = 49
   Insn 54: point = 51
   Insn 53: point = 53
   Insn 52: point = 54
   Insn 51: point = 56
   Insn 50: point = 58
   Insn 154: point = 59
	   Creating copy r107->r114@1
   Insn 49: point = 61
  BB 3
   Insn 44: point = 62
   Insn 43: point = 62
   Insn 153: point = 63
	   Creating copy r106<-r113@1
   Insn 42: point = 65
   Insn 41: point = 66
   Insn 40: point = 66
   Insn 39: point = 67
   Insn 38: point = 68
   Insn 37: point = 70
   Insn 36: point = 71
   Insn 35: point = 73
   Insn 152: point = 74
	   Creating copy r105->r113@1
   Insn 34: point = 76
  BB 2
   Insn 29: point = 77
   Insn 28: point = 77
   Insn 151: point = 78
	   Creating copy r104<-r112@1
   Insn 27: point = 80
   Insn 26: point = 81
   Insn 25: point = 81
   Insn 24: point = 82
   Insn 23: point = 83
   Insn 22: point = 85
   Insn 21: point = 86
   Insn 20: point = 88
   Insn 150: point = 89
	   Creating copy r103->r112@1
   Insn 19: point = 91
   Insn 18: point = 92
   Insn 17: point = 92
   Insn 16: point = 93
   Insn 15: point = 94
   Insn 14: point = 95
   Insn 13: point = 96
   Insn 12: point = 97
   Insn 11: point = 98
   Insn 10: point = 99
   Insn 9: point = 100
   Insn 8: point = 101
   Insn 4: point = 102
   Insn 3: point = 102
   Insn 2: point = 102
 r59: [4..8]
 r61: [82..86]
 r62: [81..83]
 r63: [77..80]
 r65: [67..71]
 r66: [66..68]
 r67: [62..65]
 r69: [55..56]
 r70: [48..54]
 r71: [50..51]
 r72: [47..49]
 r73: [43..46]
 r75: [36..37]
 r76: [29..35]
 r77: [31..32]
 r78: [28..30]
 r79: [24..27]
 r80: [12..13]
 r81: [9..11]
 r82: [0..1]
 r83: [96..101]
 r84: [95..100]
 r85: [94..99]
 r86: [93..98]
 r87: [92..97]
 r88: [87..88]
 r89: [84..85]
 r90: [72..73]
 r91: [69..70]
 r92: [57..58]
 r93: [52..53]
 r94: [38..39]
 r95: [33..34]
 r96: [21..23]
 r97: [20..22]
 r98: [18..19]
 r99: [15..17]
 r100: [14..16]
 r101: [9..10]
 r103: [90..91]
 r104: [77..78]
 r105: [75..76]
 r106: [62..63]
 r107: [60..61]
 r108: [43..44]
 r109: [41..42]
 r110: [24..25]
 r111: [2..3]
 r112: [79..89]
 r113: [64..74]
 r114: [45..59]
 r115: [26..40]
Compressing live ranges: from 102 to 74 - 72%
Ranges after the compression:
 r59: [4..5]
 r61: [64..67]
 r62: [64..65]
 r63: [60..63]
 r65: [52..55]
 r66: [52..53]
 r67: [48..51]
 r69: [42..43]
 r70: [36..41]
 r71: [38..39]
 r72: [36..37]
 r73: [32..35]
 r75: [26..27]
 r76: [20..25]
 r77: [22..23]
 r78: [20..21]
 r79: [16..19]
 r80: [8..9]
 r81: [6..7]
 r82: [0..1]
 r83: [72..73]
 r84: [72..73]
 r85: [72..73]
 r86: [72..73]
 r87: [72..73]
 r88: [68..69]
 r89: [66..67]
 r90: [56..57]
 r91: [54..55]
 r92: [44..45]
 r93: [40..41]
 r94: [28..29]
 r95: [24..25]
 r96: [14..15]
 r97: [14..15]
 r98: [12..13]
 r99: [10..11]
 r100: [10..11]
 r101: [6..7]
 r103: [70..71]
 r104: [60..61]
 r105: [58..59]
 r106: [48..49]
 r107: [46..47]
 r108: [32..33]
 r109: [30..31]
 r110: [16..17]
 r111: [2..3]
 r112: [62..69]
 r113: [50..57]
 r114: [34..45]
 r115: [18..29]
	 Assigning to 103 (cl=FLOAT_REGS, orig=60, freq=2, tfirst=103, tfreq=2)...
	   Assign 10 to reload r103 (freq=2)
	Hard reg 10 is preferable by r112 with profit 1
	Hard reg 10 is preferable by r104 with profit 1
	 Assigning to 104 (cl=FLOAT_REGS, orig=60, freq=2, tfirst=103, tfreq=2)...
	   Assign 10 to reload r104 (freq=2)
	Hard reg 10 is preferable by r112 with profit 2
	 Assigning to 112 (cl=FLOAT_REGS, orig=60, freq=2, tfirst=103, tfreq=2)...
	 Assigning to 105 (cl=FLOAT_REGS, orig=64, freq=2, tfirst=105, tfreq=2)...
	   Assign 11 to reload r105 (freq=2)
	Hard reg 11 is preferable by r113 with profit 1
	Hard reg 11 is preferable by r106 with profit 1
	 Assigning to 106 (cl=FLOAT_REGS, orig=64, freq=2, tfirst=105, tfreq=2)...
	   Assign 11 to reload r106 (freq=2)
	Hard reg 11 is preferable by r113 with profit 2
	 Assigning to 113 (cl=FLOAT_REGS, orig=64, freq=2, tfirst=105, tfreq=2)...
	 Assigning to 107 (cl=FLOAT_REGS, orig=68, freq=2, tfirst=107, tfreq=2)...
	   Assign 12 to reload r107 (freq=2)
	Hard reg 12 is preferable by r114 with profit 1
	Hard reg 12 is preferable by r108 with profit 1
	 Assigning to 108 (cl=FLOAT_REGS, orig=68, freq=2, tfirst=107, tfreq=2)...
	   Assign 12 to reload r108 (freq=2)
	Hard reg 12 is preferable by r114 with profit 2
	 Assigning to 114 (cl=FLOAT_REGS, orig=68, freq=2, tfirst=107, tfreq=2)...
	 Assigning to 109 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=109, tfreq=2)...
	   Assign 13 to reload r109 (freq=2)
	Hard reg 13 is preferable by r115 with profit 1
	Hard reg 13 is preferable by r110 with profit 1
	 Assigning to 110 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=109, tfreq=2)...
	   Assign 13 to reload r110 (freq=2)
	Hard reg 13 is preferable by r115 with profit 2
	 Assigning to 115 (cl=FLOAT_REGS, orig=74, freq=2, tfirst=109, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  151: r104:XF=r60:XF
      REG_DEAD r60:XF
   Insn after restoring regs:
  150: r60:XF=r103:XF
      REG_DEAD r103:XF
   Insn after restoring regs:
  153: r106:XF=r64:XF
      REG_DEAD r64:XF
   Insn after restoring regs:
  152: r64:XF=r105:XF
      REG_DEAD r105:XF
   Insn after restoring regs:
  155: r108:XF=r68:XF
      REG_DEAD r68:XF
   Insn after restoring regs:
  154: r68:XF=r107:XF
      REG_DEAD r107:XF
   Insn after restoring regs:
  157: r110:XF=r74:XF
      REG_DEAD r74:XF
   Insn after restoring regs:
  156: r74:XF=r109:XF
      REG_DEAD r109:XF

********** Local #2: **********


********** Pseudo live ranges #2: **********

  BB 10
   Insn 127: point = 0
   Insn 124: point = 0
   Insn 158: point = 1
   Insn 120: point = 3
  BB 8
   Insn 148: point = 6
   Insn 110: point = 6
  BB 6
   Insn 145: point = 7
   Insn 83: point = 7
  BB 9
   Insn 115: point = 8
  BB 7
   Insn 105: point = 9
   Insn 104: point = 9
   Insn 103: point = 10
   Insn 102: point = 11
   Insn 101: point = 12
   Insn 100: point = 13
   Insn 99: point = 14
   Insn 98: point = 14
   Insn 97: point = 15
   Insn 96: point = 16
   Insn 95: point = 17
   Insn 94: point = 18
   Insn 93: point = 19
   Insn 92: point = 20
   Insn 91: point = 20
   Insn 90: point = 21
   Insn 89: point = 22
   Insn 88: point = 23
  BB 5
   Insn 78: point = 24
   Insn 77: point = 24
   Insn 157: point = 25
   Insn 76: point = 27
   Insn 75: point = 28
   Insn 74: point = 28
   Insn 73: point = 29
   Insn 72: point = 30
   Insn 71: point = 32
   Insn 70: point = 34
   Insn 69: point = 35
   Insn 68: point = 37
   Insn 67: point = 39
   Insn 156: point = 40
   Insn 66: point = 42
  BB 4
   Insn 61: point = 43
   Insn 60: point = 43
   Insn 155: point = 44
   Insn 59: point = 46
   Insn 58: point = 47
   Insn 57: point = 47
   Insn 56: point = 48
   Insn 55: point = 49
   Insn 54: point = 51
   Insn 53: point = 53
   Insn 52: point = 54
   Insn 51: point = 56
   Insn 50: point = 58
   Insn 154: point = 59
   Insn 49: point = 61
  BB 3
   Insn 44: point = 62
   Insn 43: point = 62
   Insn 153: point = 63
   Insn 42: point = 65
   Insn 41: point = 66
   Insn 40: point = 66
   Insn 39: point = 67
   Insn 38: point = 68
   Insn 37: point = 70
   Insn 36: point = 71
   Insn 35: point = 73
   Insn 152: point = 74
   Insn 34: point = 76
  BB 2
   Insn 29: point = 77
   Insn 28: point = 77
   Insn 151: point = 78
   Insn 27: point = 80
   Insn 26: point = 81
   Insn 25: point = 81
   Insn 24: point = 82
   Insn 23: point = 83
   Insn 22: point = 85
   Insn 21: point = 86
   Insn 20: point = 88
   Insn 150: point = 89
   Insn 19: point = 91
   Insn 18: point = 92
   Insn 17: point = 92
   Insn 16: point = 93
   Insn 15: point = 94
   Insn 14: point = 95
   Insn 13: point = 96
   Insn 12: point = 97
   Insn 11: point = 98
   Insn 10: point = 99
   Insn 9: point = 100
   Insn 8: point = 101
   Insn 4: point = 102
   Insn 3: point = 102
   Insn 2: point = 102
 r60: [79..89]
 r64: [64..74]
 r68: [45..59]
 r74: [26..40]
 r111: [2..3]
Compressing live ranges: from 102 to 10 - 9%
Ranges after the compression:
 r60: [8..9]
 r64: [6..7]
 r68: [4..5]
 r74: [2..3]
 r111: [0..1]
  Slot 0 regnos (width = 16):	 60	 111	 74	 68	 64
Changing spilled pseudos to memory in insn #150
Changing spilled pseudos to memory in insn #151
Changing spilled pseudos to memory in insn #152
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #154
Changing spilled pseudos to memory in insn #155
Changing spilled pseudos to memory in insn #156
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #120
Changing spilled pseudos to memory in insn #158

********** Local #3: **********

Reusing alternative 0 for insn #158
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 120:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
Reusing alternative 0 for insn #157
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #156
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #155
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #154
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #153
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #152
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) m  (1) f {*movxf_internal_rex64}
Reusing alternative 0 for insn #151
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =f  (1) fm {*movxf_internal_rex64}
Reusing alternative 1 for insn #150
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) f {*movxf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 115
changing reg in insn 110
changing reg in insn 83
changing reg in insn 120
changing reg in insn 21
changing reg in insn 24
changing reg in insn 23
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 36
changing reg in insn 39
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 56
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 73
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 124
changing reg in insn 8
changing reg in insn 13
changing reg in insn 9
changing reg in insn 14
changing reg in insn 10
changing reg in insn 15
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 88
changing reg in insn 90
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 98
changing reg in insn 103
changing reg in insn 104
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 99.


distance_point_segment

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 11[st(3)] 12[st(4)] 13[st(5)] 17[flags] 37[r8]
;;  ref usage 	r0={30d,20u} r1={19d,10u} r2={14d,6u} r3={4d,4u} r4={12d,5u} r5={12d,5u} r6={1d,51u} r7={1d,33u} r8={16d,16u} r9={8d,1u} r10={9d,2u} r11={9d,2u} r12={9d,2u} r13={9d,2u} r14={7d} r15={7d} r17={18d,5u} r18={7d} r19={7d} r20={1d,1u,4e} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={9d,1u} r38={8d} r39={7d} r40={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} 
;;    total ref usage 577{407d,166u,4e} in 97{90 regular + 7 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 83 84 85 86 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])
        (reg:DI 5 di [ a ])) mUtility.c:465 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])
        (reg:DI 4 si [ b ])) mUtility.c:465 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p+0 S8 A64])
        (reg:DI 1 dx [ p ])) mUtility.c:465 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ p ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (reg:DI 5 di [83])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:468 274 {*adddi_1}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 2 cx [84])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:468 274 {*adddi_1}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p+0 S8 A64])) mUtility.c:468 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:468 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:468 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:DI 37 r8)
        (reg:DI 5 di [83])) mUtility.c:468 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [83])
        (nil)))
(insn 14 13 15 2 (set (reg:DI 2 cx)
        (reg:DI 2 cx [84])) mUtility.c:468 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [84])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 1 dx)
        (reg:DI 1 dx [85])) mUtility.c:468 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [85])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (reg:DI 4 si [86])) mUtility.c:468 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [86])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) mUtility.c:468 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("proj_point_to_circle") [flags 0x3]  <function_decl 0x7f4452e41500 proj_point_to_circle>) [0 proj_point_to_circle S1 A8])
            (const_int 0 [0]))) mUtility.c:468 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 19 18 150 2 (set (reg:XF 10 st(2) [orig:60 D.5158 ] [60])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (nil))
(insn 150 19 159 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 10 st(2) [orig:60 D.5158 ] [60])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:60 D.5158 ] [60])
        (nil)))
(note 159 150 20 2 NOTE_INSN_DELETED)
(insn 20 159 21 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:XF 2 cx [orig:61 D.5158 ] [61])
        (mem:XF (reg/f:DI 0 ax [88]) [0 *b_3(D)+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (nil)))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:XF 0 ax [orig:62 D.5158 ] [62])
        (mem:XF (reg/f:DI 0 ax [89]) [0 *a_2(D)+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (nil)))
(insn 24 23 25 2 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:61 D.5158 ] [61])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:61 D.5158 ] [61])
        (nil)))
(insn 25 24 26 2 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:62 D.5158 ] [62])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:62 D.5158 ] [62])
        (nil)))
(call_insn 26 25 27 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_min") [flags 0x3]  <function_decl 0x7f4452bcd500 _min>) [0 _min S1 A8])
            (const_int 32 [0x20]))) mUtility.c:470 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 27 26 151 2 (set (reg:XF 8 st [orig:63 D.5158 ] [63])
        (reg:XF 8 st)) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 151 27 28 2 (set (reg:XF 10 st(2) [orig:60 D.5158 ] [60])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 60 [ D.5158 ])
        (nil)))
(insn 28 151 29 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 10 st(2) [orig:60 D.5158 ] [60])
            (reg:XF 8 st [orig:63 D.5158 ] [63]))) mUtility.c:470 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:60 D.5158 ] [60])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.5158 ] [63])
            (nil))))
(jump_insn 29 28 33 2 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mUtility.c:470 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 90 91
(note 33 29 34 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 152 3 (set (reg:XF 11 st(3) [orig:64 D.5158 ] [64])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (nil))
(insn 152 34 160 3 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 11 st(3) [orig:64 D.5158 ] [64])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:64 D.5158 ] [64])
        (nil)))
(note 160 152 35 3 NOTE_INSN_DELETED)
(insn 35 160 36 3 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 3 (set (reg:XF 2 cx [orig:65 D.5158 ] [65])
        (mem:XF (reg/f:DI 0 ax [90]) [0 *b_3(D)+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (nil)))
(insn 37 36 38 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 3 (set (reg:XF 0 ax [orig:66 D.5158 ] [66])
        (mem:XF (reg/f:DI 0 ax [91]) [0 *a_2(D)+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [91])
        (nil)))
(insn 39 38 40 3 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:65 D.5158 ] [65])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:65 D.5158 ] [65])
        (nil)))
(insn 40 39 41 3 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:66 D.5158 ] [66])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:66 D.5158 ] [66])
        (nil)))
(call_insn 41 40 42 3 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_max") [flags 0x3]  <function_decl 0x7f4452bcd600 _max>) [0 _max S1 A8])
            (const_int 32 [0x20]))) mUtility.c:470 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 42 41 153 3 (set (reg:XF 8 st [orig:67 D.5158 ] [67])
        (reg:XF 8 st)) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 153 42 43 3 (set (reg:XF 11 st(3) [orig:64 D.5158 ] [64])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 64 [ D.5158 ])
        (nil)))
(insn 43 153 44 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:67 D.5158 ] [67])
            (reg:XF 11 st(3) [orig:64 D.5158 ] [64]))) mUtility.c:470 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 11 st(3) [orig:64 D.5158 ] [64])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5158 ] [67])
            (nil))))
(jump_insn 44 43 48 3 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mUtility.c:470 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68 69 70 71 72 73 92 93
(note 48 44 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 154 4 (set (reg:XF 12 st(4) [orig:68 D.5158 ] [68])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 c+16 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (nil))
(insn 154 49 161 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 12 st(4) [orig:68 D.5158 ] [68])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:68 D.5158 ] [68])
        (nil)))
(note 161 154 50 4 NOTE_INSN_DELETED)
(insn 50 161 51 4 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.5159 ] [69])
                (plus:DI (reg/f:DI 0 ax [92])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [92])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80 [0xffffffffffffffb0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 52 51 53 4 (set (reg:XF 2 cx [orig:70 D.5158 ] [70])
        (mem:XF (reg/f:DI 0 ax [orig:69 D.5159 ] [69]) [0 *_14+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.5159 ] [69])
        (nil)))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.5159 ] [71])
                (plus:DI (reg/f:DI 0 ax [93])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 55 54 56 4 (set (reg:XF 0 ax [orig:72 D.5158 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.5159 ] [71]) [0 *_16+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.5159 ] [71])
        (nil)))
(insn 56 55 57 4 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:70 D.5158 ] [70])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:70 D.5158 ] [70])
        (nil)))
(insn 57 56 58 4 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:72 D.5158 ] [72])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:72 D.5158 ] [72])
        (nil)))
(call_insn 58 57 59 4 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_min") [flags 0x3]  <function_decl 0x7f4452bcd500 _min>) [0 _min S1 A8])
            (const_int 32 [0x20]))) mUtility.c:470 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 59 58 155 4 (set (reg:XF 8 st [orig:73 D.5158 ] [73])
        (reg:XF 8 st)) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 155 59 60 4 (set (reg:XF 12 st(4) [orig:68 D.5158 ] [68])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.5158 ])
        (nil)))
(insn 60 155 61 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 12 st(4) [orig:68 D.5158 ] [68])
            (reg:XF 8 st [orig:73 D.5158 ] [73]))) mUtility.c:470 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 12 st(4) [orig:68 D.5158 ] [68])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5158 ] [73])
            (nil))))
(jump_insn 61 60 65 4 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mUtility.c:470 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 78 79 94 95
(note 65 61 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 156 5 (set (reg:XF 13 st(5) [orig:74 D.5158 ] [74])
        (mem/j/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 c+16 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (nil))
(insn 156 66 162 5 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 13 st(5) [orig:74 D.5158 ] [74])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:74 D.5158 ] [74])
        (nil)))
(note 162 156 67 5 NOTE_INSN_DELETED)
(insn 67 162 68 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.5159 ] [75])
                (plus:DI (reg/f:DI 0 ax [94])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80 [0xffffffffffffffb0])) [0 b+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 69 68 70 5 (set (reg:XF 2 cx [orig:76 D.5158 ] [76])
        (mem:XF (reg/f:DI 0 ax [orig:75 D.5159 ] [75]) [0 *_20+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.5159 ] [75])
        (nil)))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:470 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 5 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.5159 ] [77])
                (plus:DI (reg/f:DI 0 ax [95])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:470 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 a+0 S8 A64])
                (const_int 16 [0x10]))
            (nil))))
(insn 72 71 73 5 (set (reg:XF 0 ax [orig:78 D.5158 ] [78])
        (mem:XF (reg/f:DI 0 ax [orig:77 D.5159 ] [77]) [0 *_22+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.5159 ] [77])
        (nil)))
(insn 73 72 74 5 (set (mem:XF (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [0  S16 A128])
        (reg:XF 2 cx [orig:76 D.5158 ] [76])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 2 cx [orig:76 D.5158 ] [76])
        (nil)))
(insn 74 73 75 5 (set (mem:XF (reg/f:DI 7 sp) [0  S16 A128])
        (reg:XF 0 ax [orig:78 D.5158 ] [78])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:78 D.5158 ] [78])
        (nil)))
(call_insn 75 74 76 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_max") [flags 0x3]  <function_decl 0x7f4452bcd600 _max>) [0 _max S1 A8])
            (const_int 32 [0x20]))) mUtility.c:470 663 {*call_value}
     (nil)
    (expr_list:XF (use (mem:XF (reg/f:DI 7 sp) [0  S16 A128]))
        (expr_list:XF (use (mem:XF (plus:DI (reg/f:DI 7 sp)
                        (const_int 16 [0x10])) [0  S16 A128]))
            (nil))))
(insn 76 75 157 5 (set (reg:XF 8 st [orig:79 D.5158 ] [79])
        (reg:XF 8 st)) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 157 76 77 5 (set (reg:XF 13 st(5) [orig:74 D.5158 ] [74])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 74 [ D.5158 ])
        (nil)))
(insn 77 157 78 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 8 st [orig:79 D.5158 ] [79])
            (reg:XF 13 st(5) [orig:74 D.5158 ] [74]))) mUtility.c:470 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 13 st(5) [orig:74 D.5158 ] [74])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5158 ] [79])
            (nil))))
(jump_insn 78 77 82 5 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mUtility.c:470 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 82 78 83 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 145 6 (set (reg:XF 0 ax [orig:59 D.5158 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 d+0 S16 A128])) mUtility.c:470 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 145 83 146 6 (set (pc)
        (label_ref 118)) mUtility.c:470 650 {jump}
     (nil)
 -> 118)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 146 145 86)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 80 81 96 97 98 99 100 101
(code_label 86 146 87 7 166 "" [4 uses])
(note 87 86 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 7 (set (reg:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p+0 S8 A64])) mUtility.c:472 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 7 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 a+0 S8 A64])) mUtility.c:472 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 7 (set (reg:DI 4 si)
        (reg:DI 1 dx [96])) mUtility.c:472 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [96])
        (nil)))
(insn 91 90 92 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) mUtility.c:472 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [97])
        (nil)))
(call_insn 92 91 93 7 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x3]  <function_decl 0x7f4452e3c400 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mUtility.c:472 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 93 92 94 7 (set (reg:XF 8 st [98])
        (reg:XF 8 st)) mUtility.c:472 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 94 93 95 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d2+0 S16 A128])
        (reg:XF 8 st [98])) mUtility.c:472 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [98])
        (nil)))
(insn 95 94 96 7 (set (reg:DI 1 dx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 p+0 S8 A64])) mUtility.c:473 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 7 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 b+0 S8 A64])) mUtility.c:473 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 7 (set (reg:DI 4 si)
        (reg:DI 1 dx [99])) mUtility.c:473 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [99])
        (nil)))
(insn 98 97 99 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) mUtility.c:473 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(call_insn 99 98 100 7 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x3]  <function_decl 0x7f4452e3c400 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mUtility.c:473 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 100 99 101 7 (set (reg:XF 8 st [orig:80 d.2 ] [80])
        (reg:XF 8 st)) mUtility.c:473 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 101 100 102 7 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 d+0 S16 A128])
        (reg:XF 8 st [orig:80 d.2 ] [80])) mUtility.c:473 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 d.2 ] [80])
        (nil)))
(insn 102 101 103 7 (set (reg:XF 9 st(1) [orig:81 d.3 ] [81])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 d+0 S16 A128])) mUtility.c:475 131 {*movxf_internal_rex64}
     (nil))
(insn 103 102 104 7 (set (reg:XF 8 st [101])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d2+0 S16 A128])) mUtility.c:475 131 {*movxf_internal_rex64}
     (nil))
(insn 104 103 105 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:81 d.3 ] [81])
            (reg:XF 8 st [101]))) mUtility.c:475 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [101])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 d.3 ] [81])
            (nil))))
(jump_insn 105 104 109 7 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 147)
            (pc))) mUtility.c:475 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 109 105 110 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 148 8 (set (reg:XF 0 ax [orig:59 D.5158 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 d2+0 S16 A128])) mUtility.c:475 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 148 110 149 8 (set (pc)
        (label_ref 118)) mUtility.c:475 650 {jump}
     (nil)
 -> 118)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 149 148 147)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 147 149 114 9 180 "" [1 uses])
(note 114 147 115 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 118 9 (set (reg:XF 0 ax [orig:59 D.5158 ] [59])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 d+0 S16 A128])) mUtility.c:476 131 {*movxf_internal_rex64}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 82
(code_label 118 115 119 10 174 "" [2 uses])
(note 119 118 120 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 158 10 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])
        (reg:XF 0 ax [orig:59 D.5158 ] [59])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:59 D.5158 ] [59])
        (nil)))
(insn 158 120 124 10 (set (reg:XF 8 st [orig:82 <retval> ] [82])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-128 S16 A128])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 111)
        (nil)))
(insn 124 158 127 10 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:82 <retval> ] [82])) mUtility.c:477 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:82 <retval> ] [82])
        (nil)))
(insn 127 124 0 10 (use (reg/i:XF 8 st)) mUtility.c:477 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function time_to_int (time_to_int, funcdef_no=39, decl_uid=1812, cgraph_uid=39)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 17:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 18:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=126 from oldreg=64, assigning class SSE_REGS to r126
   18: r126:DF=r126:DF*r107:DF
      REG_DEAD r107:DF
      REG_DEAD r63:DF
    Inserting insn reload before:
   99: r126:DF=r63:DF
    Inserting insn reload after:
  100: r64:DF=r126:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 100:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 31:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 32:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=127 from oldreg=72, assigning class SSE_REGS to r127
   32: r127:DF=r127:DF*r112:DF
      REG_DEAD r112:DF
      REG_DEAD r71:DF
    Inserting insn reload before:
  101: r127:DF=r71:DF
    Inserting insn reload after:
  102: r72:DF=r127:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 102:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 40:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 41:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=128 from oldreg=78, assigning class SSE_REGS to r128
   41: r128:DF=r128:DF*r115:DF
      REG_DEAD r115:DF
      REG_DEAD r77:DF
    Inserting insn reload before:
  103: r128:DF=r77:DF
    Inserting insn reload after:
  104: r78:DF=r128:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 104:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 51:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 52:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=129 from oldreg=85, assigning class SSE_REGS to r129
   52: r129:DF=r129:DF*r118:DF
      REG_DEAD r118:DF
      REG_DEAD r84:DF
    Inserting insn reload before:
  105: r129:DF=r84:DF
    Inserting insn reload after:
  106: r85:DF=r129:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 106:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) r {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 60:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 61:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=130 from oldreg=91, assigning class SSE_REGS to r130
   61: r130:DF=r130:DF*r121:DF
      REG_DEAD r121:DF
      REG_DEAD r90:DF
    Inserting insn reload before:
  107: r130:DF=r90:DF
    Inserting insn reload after:
  108: r91:DF=r130:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 108:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 91 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 85 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 78 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 72 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 64 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

********** Pseudo live ranges #1: **********

  BB 2
   Insn 83: point = 0
   Insn 80: point = 0
   Insn 76: point = 1
   Insn 73: point = 3
   Insn 72: point = 4
   Insn 90: point = 5
   Insn 70: point = 7
   Insn 69: point = 9
   Insn 68: point = 10
   Insn 89: point = 12
   Insn 66: point = 14
   Insn 65: point = 16
   Insn 64: point = 18
   Insn 63: point = 19
   Insn 62: point = 21
   Insn 108: point = 23
   Insn 61: point = 25
   Insn 107: point = 26
	Hard reg 21 is preferable by r130 with profit 1
   Insn 60: point = 28
   Insn 59: point = 29
   Insn 58: point = 31
   Insn 57: point = 33
   Insn 56: point = 35
   Insn 55: point = 36
   Insn 54: point = 38
   Insn 53: point = 39
   Insn 106: point = 41
   Insn 52: point = 43
   Insn 105: point = 44
	Hard reg 21 is preferable by r129 with profit 1
   Insn 51: point = 46
   Insn 50: point = 47
   Insn 49: point = 49
   Insn 48: point = 51
   Insn 47: point = 52
   Insn 46: point = 54
   Insn 45: point = 55
   Insn 88: point = 56
   Insn 43: point = 58
   Insn 42: point = 60
   Insn 104: point = 62
   Insn 41: point = 64
   Insn 103: point = 65
	Hard reg 21 is preferable by r128 with profit 1
   Insn 40: point = 67
   Insn 39: point = 68
   Insn 38: point = 70
   Insn 37: point = 72
   Insn 36: point = 74
   Insn 35: point = 75
   Insn 34: point = 77
   Insn 33: point = 78
   Insn 102: point = 80
   Insn 32: point = 82
   Insn 101: point = 83
	Hard reg 21 is preferable by r127 with profit 1
   Insn 31: point = 85
   Insn 30: point = 86
   Insn 29: point = 88
   Insn 28: point = 90
   Insn 27: point = 91
   Insn 26: point = 93
   Insn 25: point = 94
   Insn 87: point = 95
   Insn 23: point = 97
   Insn 22: point = 99
   Insn 21: point = 100
   Insn 20: point = 102
   Insn 19: point = 103
   Insn 100: point = 105
   Insn 18: point = 107
   Insn 99: point = 108
	Hard reg 21 is preferable by r126 with profit 1
   Insn 17: point = 110
   Insn 16: point = 111
   Insn 15: point = 113
   Insn 14: point = 115
   Insn 13: point = 116
   Insn 12: point = 118
   Insn 11: point = 119
   Insn 10: point = 120
   Insn 86: point = 121
   Insn 98: point = 123
   Insn 97: point = 124
   Insn 96: point = 124
   Insn 95: point = 125
   Insn 8: point = 125
   Insn 7: point = 127
   Insn 6: point = 128
   Insn 2: point = 129
 r59: [122..125]
 r60: [119..121]
 r61: [94..116]
 r62: [112..113]
 r63: [109..111]
 r64: [104..105]
 r65: [101..103]
 r66: [98..100]
 r67: [96..97]
 r68: [94..95]
 r69: [55..91]
 r70: [87..88]
 r71: [84..86]
 r72: [79..80]
 r73: [76..78]
 r74: [59..75]
 r75: [71..72]
 r76: [69..70]
 r77: [66..68]
 r78: [61..62]
 r79: [59..60]
 r80: [57..58]
 r81: [55..56]
 r82: [4..52]
 r83: [48..49]
 r84: [45..47]
 r85: [40..41]
 r86: [37..39]
 r87: [20..36]
 r88: [32..33]
 r89: [30..31]
 r90: [27..29]
 r91: [22..23]
 r92: [20..21]
 r93: [11..19]
 r94: [15..16]
 r95: [13..14]
 r96: [11..12]
 r97: [8..10]
 r98: [6..7]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [126..128]
 r103: [126..127]
 r104: [119..120]
 r105: [117..118]
 r106: [114..115]
 r107: [107..110]
 r108: [101..102]
 r109: [98..99]
 r110: [92..93]
 r111: [89..90]
 r112: [82..85]
 r113: [76..77]
 r114: [73..74]
 r115: [64..67]
 r116: [53..54]
 r117: [50..51]
 r118: [43..46]
 r119: [37..38]
 r120: [34..35]
 r121: [25..28]
 r122: [17..18]
 r123: [8..9]
 r125: [123..124]
 r126: [106..108]
 r127: [81..83]
 r128: [63..65]
 r129: [42..44]
 r130: [24..26]
Compressing live ranges: from 129 to 104 - 80%
Ranges after the compression:
 r59: [100..101]
 r60: [98..99]
 r61: [78..95]
 r62: [92..93]
 r63: [90..91]
 r64: [86..87]
 r65: [84..85]
 r66: [82..83]
 r67: [80..81]
 r68: [78..79]
 r69: [46..75]
 r70: [72..73]
 r71: [70..71]
 r72: [66..67]
 r73: [64..65]
 r74: [50..63]
 r75: [60..61]
 r76: [58..59]
 r77: [56..57]
 r78: [52..53]
 r79: [50..51]
 r80: [48..49]
 r81: [46..47]
 r82: [4..43]
 r83: [40..41]
 r84: [38..39]
 r85: [34..35]
 r86: [32..33]
 r87: [18..31]
 r88: [28..29]
 r89: [26..27]
 r90: [24..25]
 r91: [20..21]
 r92: [18..19]
 r93: [10..17]
 r94: [14..15]
 r95: [12..13]
 r96: [10..11]
 r97: [8..9]
 r98: [6..7]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [102..103]
 r103: [102..103]
 r104: [98..99]
 r105: [96..97]
 r106: [94..95]
 r107: [88..91]
 r108: [84..85]
 r109: [82..83]
 r110: [76..77]
 r111: [74..75]
 r112: [68..71]
 r113: [64..65]
 r114: [62..63]
 r115: [54..57]
 r116: [44..45]
 r117: [42..43]
 r118: [36..39]
 r119: [32..33]
 r120: [30..31]
 r121: [22..25]
 r122: [16..17]
 r123: [8..9]
 r125: [100..101]
 r126: [88..89]
 r127: [68..69]
 r128: [54..55]
 r129: [36..37]
 r130: [22..23]
	 Assigning to 126 (cl=SSE_REGS, orig=64, freq=3, tfirst=126, tfreq=3)...
	   Assign 21 to reload r126 (freq=3)
	 Assigning to 127 (cl=SSE_REGS, orig=72, freq=3, tfirst=127, tfreq=3)...
	   Assign 21 to reload r127 (freq=3)
	 Assigning to 128 (cl=SSE_REGS, orig=78, freq=3, tfirst=128, tfreq=3)...
	   Assign 21 to reload r128 (freq=3)
	 Assigning to 129 (cl=SSE_REGS, orig=85, freq=3, tfirst=129, tfreq=3)...
	   Assign 21 to reload r129 (freq=3)
	 Assigning to 130 (cl=SSE_REGS, orig=91, freq=3, tfirst=130, tfreq=3)...
	   Assign 21 to reload r130 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 64	 91	 85	 78	 72
Changing spilled pseudos to memory in insn #100
Changing spilled pseudos to memory in insn #19
Changing spilled pseudos to memory in insn #102
Changing spilled pseudos to memory in insn #33
Changing spilled pseudos to memory in insn #104
Changing spilled pseudos to memory in insn #42
Changing spilled pseudos to memory in insn #106
Changing spilled pseudos to memory in insn #53
Changing spilled pseudos to memory in insn #108
Changing spilled pseudos to memory in insn #62

********** Local #3: **********

Reusing alternative 0 for insn #62
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #108
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 108:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #53
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #106
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 106:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #42
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #104
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 104:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #33
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #102
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 102:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #19
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #100
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 100:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 86
changing reg in insn 86
changing reg in insn 11
changing reg in insn 13
changing reg in insn 25
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 87
changing reg in insn 87
changing reg in insn 25
changing reg in insn 27
changing reg in insn 45
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 43
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 88
changing reg in insn 88
changing reg in insn 45
changing reg in insn 47
changing reg in insn 72
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 63
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 68
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 89
changing reg in insn 89
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 90
changing reg in insn 90
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 76
changing reg in insn 80
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 97
changing reg in insn 96
changing reg in insn 98
changing reg in insn 97
starting the processing of deferred insns
ending the processing of deferred insns


time_to_int

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 8[st] 9[st(1)] 17[flags] 19[fpcr] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={28d,28u} r1={5d,4u} r2={1d} r4={1d} r5={1d,1u} r6={1d,43u} r7={1d,2u} r8={13d,13u} r9={9d,9u} r17={7d} r19={1u} r20={1d,1u,6e} r21={16d,15u} r22={6d,5u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 226{98d,122u,6e} in 86{86 regular + 0 call} insns.
(note 1 0 91 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 125
(note 91 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 91 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
        (reg:DI 5 di [ T ])) mUtility.c:479 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ T ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:XF 9 st(1) [102])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time+0 S16 A128])) mUtility.c:481 131 {*movxf_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:XF 8 st [103])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S16 A128])) mUtility.c:481 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 8 7 95 2 (set (reg:XF 8 st [orig:59 D.5160 ] [59])
        (div:XF (reg:XF 9 st(1) [102])
            (reg:XF 8 st [103]))) mUtility.c:481 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [103])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [102])
            (nil))))
(insn 95 8 96 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mUtility.c:481 199 {x86_fnstcw_1}
     (nil))
(insn 96 95 97 2 (set (reg:HI 0 ax [125])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0  S2 A16])) mUtility.c:481 90 {*movhi_internal}
     (nil))
(insn 97 96 98 2 (parallel [
            (set (reg:HI 0 ax [125])
                (ior:HI (reg:HI 0 ax [125])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:481 410 {*iorhi_1}
     (nil))
(insn 98 97 86 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0  S2 A16])
        (reg:HI 0 ax [125])) mUtility.c:481 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [125])
        (nil)))
(insn 86 98 10 2 (parallel [
            (set (reg:SI 1 dx [orig:60 D.5161 ] [60])
                (fix:SI (reg:XF 8 st [orig:59 D.5160 ] [59])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -10 [0xfffffffffffffff6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S4 A32]))
        ]) mUtility.c:481 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.5160 ] [59])
        (nil)))
(insn 10 86 11 2 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:481 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (mem:SI (reg/f:DI 0 ax [104]) [0 *T_4(D)+0 S4 A32])
        (reg:SI 1 dx [orig:60 D.5161 ] [60])) mUtility.c:481 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:60 D.5161 ] [60])
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:482 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 1 dx [orig:61 D.5162 ] [61])
                (plus:DI (reg/f:DI 0 ax [105])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:482 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 4 [0x4]))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:482 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [orig:62 D.5161 ] [62])
        (mem:SI (reg/f:DI 0 ax [106]) [0 *T_4(D)+0 S4 A32])) mUtility.c:482 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (nil)))
(insn 16 15 17 2 (set (reg:DF 21 xmm0 [orig:63 D.5163 ] [63])
        (float:DF (reg:SI 0 ax [orig:62 D.5161 ] [62]))) mUtility.c:482 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.5161 ] [62])
        (nil)))
(insn 17 16 99 2 (set (reg:DF 22 xmm1 [107])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) mUtility.c:482 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 99 17 18 2 (set (reg:DF 21 xmm0 [orig:64 D.5163 ] [64])
        (reg:DF 21 xmm0 [orig:63 D.5163 ] [63])) mUtility.c:482 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:63 D.5163 ] [63])
        (nil)))
(insn 18 99 100 2 (set (reg:DF 21 xmm0 [orig:64 D.5163 ] [64])
        (mult:DF (reg:DF 21 xmm0 [orig:64 D.5163 ] [64])
            (reg:DF 22 xmm1 [107]))) mUtility.c:482 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [107])
        (nil)))
(insn 100 18 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64])
        (reg:DF 21 xmm0 [orig:64 D.5163 ] [64])) mUtility.c:482 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:64 D.5163 ] [64])
        (nil)))
(insn 19 100 20 2 (set (reg:XF 8 st [orig:65 D.5160 ] [65])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64]))) mUtility.c:482 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 64 [ D.5163 ])
        (nil)))
(insn 20 19 21 2 (set (reg:XF 9 st(1) [108])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time+0 S16 A128])) mUtility.c:482 131 {*movxf_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:XF 9 st(1) [orig:66 D.5160 ] [66])
        (minus:XF (reg:XF 9 st(1) [108])
            (reg:XF 8 st [orig:65 D.5160 ] [65]))) mUtility.c:482 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [108])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.5160 ] [65])
            (nil))))
(insn 22 21 23 2 (set (reg:XF 8 st [109])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S16 A128])) mUtility.c:482 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 6.0e+1 [0x0.fp+6])
        (nil)))
(insn 23 22 87 2 (set (reg:XF 8 st [orig:67 D.5160 ] [67])
        (div:XF (reg:XF 9 st(1) [orig:66 D.5160 ] [66])
            (reg:XF 8 st [109]))) mUtility.c:482 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [109])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:66 D.5160 ] [66])
            (nil))))
(insn 87 23 25 2 (parallel [
            (set (reg:SI 0 ax [orig:68 D.5161 ] [68])
                (fix:SI (reg:XF 8 st [orig:67 D.5160 ] [67])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -10 [0xfffffffffffffff6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S4 A32]))
        ]) mUtility.c:482 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.5160 ] [67])
        (nil)))
(insn 25 87 26 2 (set (mem:SI (reg/f:DI 1 dx [orig:61 D.5162 ] [61]) [0 *_5+0 S4 A32])
        (reg:SI 0 ax [orig:68 D.5161 ] [68])) mUtility.c:482 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.5161 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:61 D.5162 ] [61])
            (nil))))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:DI 1 dx [orig:69 D.5162 ] [69])
                (plus:DI (reg/f:DI 0 ax [110])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:483 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn 28 27 29 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 2 (set (reg:SI 0 ax [orig:70 D.5161 ] [70])
        (mem:SI (reg/f:DI 0 ax [111]) [0 *T_4(D)+0 S4 A32])) mUtility.c:483 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (nil)))
(insn 30 29 31 2 (set (reg:DF 21 xmm0 [orig:71 D.5163 ] [71])
        (float:DF (reg:SI 0 ax [orig:70 D.5161 ] [70]))) mUtility.c:483 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.5161 ] [70])
        (nil)))
(insn 31 30 101 2 (set (reg:DF 22 xmm1 [112])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 101 31 32 2 (set (reg:DF 21 xmm0 [orig:72 D.5163 ] [72])
        (reg:DF 21 xmm0 [orig:71 D.5163 ] [71])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:71 D.5163 ] [71])
        (nil)))
(insn 32 101 102 2 (set (reg:DF 21 xmm0 [orig:72 D.5163 ] [72])
        (mult:DF (reg:DF 21 xmm0 [orig:72 D.5163 ] [72])
            (reg:DF 22 xmm1 [112]))) mUtility.c:483 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [112])
        (nil)))
(insn 102 32 33 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64])
        (reg:DF 21 xmm0 [orig:72 D.5163 ] [72])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:72 D.5163 ] [72])
        (nil)))
(insn 33 102 34 2 (set (reg:XF 8 st [orig:73 D.5160 ] [73])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64]))) mUtility.c:483 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 72 [ D.5163 ])
        (nil)))
(insn 34 33 35 2 (set (reg:XF 9 st(1) [113])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time+0 S16 A128])) mUtility.c:483 131 {*movxf_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:XF 9 st(1) [orig:74 D.5160 ] [74])
        (minus:XF (reg:XF 9 st(1) [113])
            (reg:XF 8 st [orig:73 D.5160 ] [73]))) mUtility.c:483 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [113])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.5160 ] [73])
            (nil))))
(insn 36 35 37 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:483 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 2 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.5162 ] [75])
                (plus:DI (reg/f:DI 0 ax [114])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:483 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [114])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 4 [0x4]))
            (nil))))
(insn 38 37 39 2 (set (reg:SI 0 ax [orig:76 D.5161 ] [76])
        (mem:SI (reg/f:DI 0 ax [orig:75 D.5162 ] [75]) [0 *_19+0 S4 A32])) mUtility.c:483 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.5162 ] [75])
        (nil)))
(insn 39 38 40 2 (set (reg:DF 21 xmm0 [orig:77 D.5163 ] [77])
        (float:DF (reg:SI 0 ax [orig:76 D.5161 ] [76]))) mUtility.c:483 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:76 D.5161 ] [76])
        (nil)))
(insn 40 39 103 2 (set (reg:DF 22 xmm1 [115])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 6.0e+1 [0x0.fp+6])
        (nil)))
(insn 103 40 41 2 (set (reg:DF 21 xmm0 [orig:78 D.5163 ] [78])
        (reg:DF 21 xmm0 [orig:77 D.5163 ] [77])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:77 D.5163 ] [77])
        (nil)))
(insn 41 103 104 2 (set (reg:DF 21 xmm0 [orig:78 D.5163 ] [78])
        (mult:DF (reg:DF 21 xmm0 [orig:78 D.5163 ] [78])
            (reg:DF 22 xmm1 [115]))) mUtility.c:483 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [115])
        (nil)))
(insn 104 41 42 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64])
        (reg:DF 21 xmm0 [orig:78 D.5163 ] [78])) mUtility.c:483 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:78 D.5163 ] [78])
        (nil)))
(insn 42 104 43 2 (set (reg:XF 8 st [orig:79 D.5160 ] [79])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64]))) mUtility.c:483 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 78 [ D.5163 ])
        (nil)))
(insn 43 42 88 2 (set (reg:XF 8 st [orig:80 D.5160 ] [80])
        (minus:XF (reg:XF 9 st(1) [orig:74 D.5160 ] [74])
            (reg:XF 8 st [orig:79 D.5160 ] [79]))) mUtility.c:483 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.5160 ] [79])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:74 D.5160 ] [74])
            (nil))))
(insn 88 43 45 2 (parallel [
            (set (reg:SI 0 ax [orig:81 D.5161 ] [81])
                (fix:SI (reg:XF 8 st [orig:80 D.5160 ] [80])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -10 [0xfffffffffffffff6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S4 A32]))
        ]) mUtility.c:483 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.5160 ] [80])
        (nil)))
(insn 45 88 46 2 (set (mem:SI (reg/f:DI 1 dx [orig:69 D.5162 ] [69]) [0 *_13+0 S4 A32])
        (reg:SI 0 ax [orig:81 D.5161 ] [81])) mUtility.c:483 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:81 D.5161 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:69 D.5162 ] [69])
            (nil))))
(insn 46 45 47 2 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:484 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 2 (parallel [
            (set (reg/f:DI 1 dx [orig:82 D.5162 ] [82])
                (plus:DI (reg/f:DI 0 ax [116])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:484 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [116])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 12 [0xc]))
            (nil))))
(insn 48 47 49 2 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:484 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg:SI 0 ax [orig:83 D.5161 ] [83])
        (mem:SI (reg/f:DI 0 ax [117]) [0 *T_4(D)+0 S4 A32])) mUtility.c:484 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 50 49 51 2 (set (reg:DF 21 xmm0 [orig:84 D.5163 ] [84])
        (float:DF (reg:SI 0 ax [orig:83 D.5161 ] [83]))) mUtility.c:484 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 D.5161 ] [83])
        (nil)))
(insn 51 50 105 2 (set (reg:DF 22 xmm1 [118])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 105 51 52 2 (set (reg:DF 21 xmm0 [orig:85 D.5163 ] [85])
        (reg:DF 21 xmm0 [orig:84 D.5163 ] [84])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:84 D.5163 ] [84])
        (nil)))
(insn 52 105 106 2 (set (reg:DF 21 xmm0 [orig:85 D.5163 ] [85])
        (mult:DF (reg:DF 21 xmm0 [orig:85 D.5163 ] [85])
            (reg:DF 22 xmm1 [118]))) mUtility.c:484 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [118])
        (nil)))
(insn 106 52 53 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64])
        (reg:DF 21 xmm0 [orig:85 D.5163 ] [85])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:85 D.5163 ] [85])
        (nil)))
(insn 53 106 54 2 (set (reg:XF 8 st [orig:86 D.5160 ] [86])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64]))) mUtility.c:484 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 85 [ D.5163 ])
        (nil)))
(insn 54 53 55 2 (set (reg:XF 9 st(1) [119])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 time+0 S16 A128])) mUtility.c:484 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 2 (set (reg:XF 9 st(1) [orig:87 D.5160 ] [87])
        (minus:XF (reg:XF 9 st(1) [119])
            (reg:XF 8 st [orig:86 D.5160 ] [86]))) mUtility.c:484 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [119])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:86 D.5160 ] [86])
            (nil))))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:484 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.5162 ] [88])
                (plus:DI (reg/f:DI 0 ax [120])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:484 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [120])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 4 [0x4]))
            (nil))))
(insn 58 57 59 2 (set (reg:SI 0 ax [orig:89 D.5161 ] [89])
        (mem:SI (reg/f:DI 0 ax [orig:88 D.5162 ] [88]) [0 *_32+0 S4 A32])) mUtility.c:484 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.5162 ] [88])
        (nil)))
(insn 59 58 60 2 (set (reg:DF 21 xmm0 [orig:90 D.5163 ] [90])
        (float:DF (reg:SI 0 ax [orig:89 D.5161 ] [89]))) mUtility.c:484 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:89 D.5161 ] [89])
        (nil)))
(insn 60 59 107 2 (set (reg:DF 22 xmm1 [121])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 6.0e+1 [0x0.fp+6])
        (nil)))
(insn 107 60 61 2 (set (reg:DF 21 xmm0 [orig:91 D.5163 ] [91])
        (reg:DF 21 xmm0 [orig:90 D.5163 ] [90])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:90 D.5163 ] [90])
        (nil)))
(insn 61 107 108 2 (set (reg:DF 21 xmm0 [orig:91 D.5163 ] [91])
        (mult:DF (reg:DF 21 xmm0 [orig:91 D.5163 ] [91])
            (reg:DF 22 xmm1 [121]))) mUtility.c:484 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [121])
        (nil)))
(insn 108 61 62 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64])
        (reg:DF 21 xmm0 [orig:91 D.5163 ] [91])) mUtility.c:484 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:91 D.5163 ] [91])
        (nil)))
(insn 62 108 63 2 (set (reg:XF 8 st [orig:92 D.5160 ] [92])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 %sfp+-24 S8 A64]))) mUtility.c:484 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 91 [ D.5163 ])
        (nil)))
(insn 63 62 64 2 (set (reg:XF 9 st(1) [orig:93 D.5160 ] [93])
        (minus:XF (reg:XF 9 st(1) [orig:87 D.5160 ] [87])
            (reg:XF 8 st [orig:92 D.5160 ] [92]))) mUtility.c:484 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:92 D.5160 ] [92])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:87 D.5160 ] [87])
            (nil))))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])) mUtility.c:484 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 2 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.5162 ] [94])
                (plus:DI (reg/f:DI 0 ax [122])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) mUtility.c:484 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [122])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 T+0 S8 A64])
                (const_int 8 [0x8]))
            (nil))))
(insn 66 65 89 2 (set (reg:SI 0 ax [orig:95 D.5161 ] [95])
        (mem:SI (reg/f:DI 0 ax [orig:94 D.5162 ] [94]) [0 *_38+0 S4 A32])) mUtility.c:484 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.5162 ] [94])
        (nil)))
(insn 89 66 68 2 (parallel [
            (set (reg:XF 8 st [orig:96 D.5160 ] [96])
                (float:XF (reg:SI 0 ax [orig:95 D.5161 ] [95])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S4 A32]))
        ]) mUtility.c:484 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:95 D.5161 ] [95])
        (nil)))
(insn 68 89 69 2 (set (reg:XF 9 st(1) [orig:97 D.5160 ] [97])
        (minus:XF (reg:XF 9 st(1) [orig:93 D.5160 ] [93])
            (reg:XF 8 st [orig:96 D.5160 ] [96]))) mUtility.c:484 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:96 D.5160 ] [96])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:93 D.5160 ] [93])
            (nil))))
(insn 69 68 70 2 (set (reg:XF 8 st [123])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC21") [flags 0x2]) [0  S16 A128])) mUtility.c:484 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 70 69 90 2 (set (reg:XF 8 st [orig:98 D.5160 ] [98])
        (mult:XF (reg:XF 8 st [123])
            (reg:XF 9 st(1) [orig:97 D.5160 ] [97]))) mUtility.c:484 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [123])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:97 D.5160 ] [97])
            (nil))))
(insn 90 70 72 2 (parallel [
            (set (reg:SI 0 ax [orig:99 D.5161 ] [99])
                (fix:SI (reg:XF 8 st [orig:98 D.5160 ] [98])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -10 [0xfffffffffffffff6])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S4 A32]))
        ]) mUtility.c:484 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:98 D.5160 ] [98])
        (nil)))
(insn 72 90 73 2 (set (mem:SI (reg/f:DI 1 dx [orig:82 D.5162 ] [82]) [0 *_26+0 S4 A32])
        (reg:SI 0 ax [orig:99 D.5161 ] [99])) mUtility.c:484 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:99 D.5161 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:82 D.5162 ] [82])
            (nil))))
(insn 73 72 76 2 (set (reg:SI 0 ax [orig:100 D.5161 ] [100])
        (const_int 1 [0x1])) mUtility.c:486 89 {*movsi_internal}
     (nil))
(insn 76 73 92 2 (set (reg:SI 0 ax [orig:101 <retval> ] [101])
        (reg:SI 0 ax [orig:100 D.5161 ] [100])) mUtility.c:486 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:100 D.5161 ] [100])
        (nil)))
(note 92 76 80 2 NOTE_INSN_DELETED)
(insn 80 92 83 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:101 <retval> ] [101])) mUtility.c:487 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:101 <retval> ] [101])
        (nil)))
(insn 83 80 0 2 (use (reg/i:SI 0 ax)) mUtility.c:487 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

