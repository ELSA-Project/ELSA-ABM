
;; Function _find_extrem (_find_extrem, funcdef_no=2, decl_uid=3943, cgraph_uid=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 16 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a3 (r121,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a15 (r117,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a26 (r113,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a34 (r109,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a45 (r105,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a57 (r101,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a0 (r98,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a14 (r90,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a46 (r71,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a1 (r59,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS

  a0(r98,l0) costs: AD_REGS:25 Q_REGS:25 NON_Q_REGS:25 INDEX_REGS:25 GENERAL_REGS:25 LEGACY_REGS:25 CLOBBERED_REGS:25 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:19
  a1(r59,l0) costs: AD_REGS:6 Q_REGS:6 NON_Q_REGS:6 INDEX_REGS:6 GENERAL_REGS:6 LEGACY_REGS:6 CLOBBERED_REGS:6 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:65 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:25
  a2(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r121,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a4(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a6(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a12(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r90,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a15(r117,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a16(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a18(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a24(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r113,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a27(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a29(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a33(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r109,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a35(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a37(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a43(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r105,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a46(r71,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a47(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a49(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a55(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a56(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r101,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a58(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a60(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 131(l0): point = 0
   Insn 128(l0): point = 2
   Insn 124(l0): point = 4
   Insn 121(l0): point = 7
   Insn 94(l0): point = 10
   Insn 93(l0): point = 12
   Insn 92(l0): point = 14
   Insn 91(l0): point = 16
   Insn 90(l0): point = 18
   Insn 89(l0): point = 20
   Insn 88(l0): point = 22
   Insn 87(l0): point = 24
   Insn 86(l0): point = 26
   Insn 85(l0): point = 28
   Insn 84(l0): point = 30
   Insn 83(l0): point = 32
   Insn 82(l0): point = 34
   Insn 81(l0): point = 36
   Insn 119(l0): point = 39
   Insn 118(l0): point = 41
   Insn 117(l0): point = 43
   Insn 113(l0): point = 46
   Insn 110(l0): point = 49
   Insn 109(l0): point = 51
   Insn 108(l0): point = 53
   Insn 107(l0): point = 55
   Insn 106(l0): point = 57
   Insn 105(l0): point = 59
   Insn 104(l0): point = 61
   Insn 103(l0): point = 63
   Insn 102(l0): point = 65
   Insn 101(l0): point = 67
   Insn 100(l0): point = 69
   Insn 99(l0): point = 71
   Insn 144(l0): point = 74
   Insn 77(l0): point = 76
   Insn 76(l0): point = 78
   Insn 75(l0): point = 80
   Insn 74(l0): point = 82
   Insn 73(l0): point = 84
   Insn 72(l0): point = 86
   Insn 71(l0): point = 88
   Insn 70(l0): point = 90
   Insn 69(l0): point = 92
   Insn 142(l0): point = 95
   Insn 64(l0): point = 97
   Insn 37(l0): point = 100
   Insn 36(l0): point = 102
   Insn 35(l0): point = 104
   Insn 34(l0): point = 106
   Insn 33(l0): point = 108
   Insn 32(l0): point = 110
   Insn 31(l0): point = 112
   Insn 30(l0): point = 114
   Insn 29(l0): point = 116
   Insn 28(l0): point = 118
   Insn 27(l0): point = 120
   Insn 26(l0): point = 122
   Insn 25(l0): point = 124
   Insn 24(l0): point = 126
   Insn 62(l0): point = 129
   Insn 61(l0): point = 131
   Insn 60(l0): point = 133
   Insn 56(l0): point = 136
   Insn 53(l0): point = 139
   Insn 52(l0): point = 141
   Insn 51(l0): point = 143
   Insn 50(l0): point = 145
   Insn 49(l0): point = 147
   Insn 48(l0): point = 149
   Insn 47(l0): point = 151
   Insn 46(l0): point = 153
   Insn 45(l0): point = 155
   Insn 44(l0): point = 157
   Insn 43(l0): point = 159
   Insn 42(l0): point = 161
   Insn 140(l0): point = 164
   Insn 20(l0): point = 166
   Insn 19(l0): point = 168
   Insn 18(l0): point = 170
   Insn 17(l0): point = 172
   Insn 16(l0): point = 174
   Insn 15(l0): point = 176
   Insn 14(l0): point = 178
   Insn 13(l0): point = 180
   Insn 12(l0): point = 182
   Insn 10(l0): point = 185
   Insn 9(l0): point = 187
   Insn 5(l0): point = 189
   Insn 4(l0): point = 191
   Insn 3(l0): point = 193
   Insn 2(l0): point = 195
 a0(r98): [3..4]
 a1(r59 [0]): [95..97] [5..7]
 a1(r59 [1]): [95..97] [5..7]
 a2(r122): [42..43]
 a3(r121 [0]): [50..51]
 a3(r121 [1]): [50..51]
 a4(r97): [52..53]
 a5(r96): [54..55]
 a6(r94): [54..61]
 a7(r95): [56..57]
 a8(r120): [58..59]
 a9(r93): [62..63]
 a10(r119): [64..65]
 a11(r92): [64..67]
 a12(r91): [68..69]
 a13(r118): [70..71]
 a14(r90): [13..16]
 a15(r117): [13..14]
 a16(r89): [17..18]
 a17(r88): [19..20]
 a18(r86): [19..26]
 a19(r87): [21..22]
 a20(r116): [23..24]
 a21(r85): [27..28]
 a22(r115): [29..30]
 a23(r84): [29..32]
 a24(r83): [33..34]
 a25(r114): [35..36]
 a26(r113 [0]): [77..78]
 a26(r113 [1]): [77..78]
 a27(r82): [79..80]
 a28(r81): [81..82]
 a29(r79): [81..88]
 a30(r80): [83..84]
 a31(r112): [85..86]
 a32(r111): [89..90]
 a33(r110): [132..133]
 a34(r109 [0]): [140..141]
 a34(r109 [1]): [140..141]
 a35(r78): [142..143]
 a36(r77): [144..145]
 a37(r75): [144..151]
 a38(r76): [146..147]
 a39(r108): [148..149]
 a40(r74): [152..153]
 a41(r107): [154..155]
 a42(r73): [154..157]
 a43(r72): [158..159]
 a44(r106): [160..161]
 a45(r105): [103..104]
 a46(r71): [103..106]
 a47(r70): [107..108]
 a48(r69): [109..110]
 a49(r67): [109..116]
 a50(r68): [111..112]
 a51(r104): [113..114]
 a52(r66): [117..118]
 a53(r103): [119..120]
 a54(r65): [119..122]
 a55(r64): [123..124]
 a56(r102): [125..126]
 a57(r101 [0]): [167..168]
 a57(r101 [1]): [167..168]
 a58(r63): [169..170]
 a59(r62): [171..172]
 a60(r60): [171..178]
 a61(r61): [173..174]
 a62(r100): [175..176]
 a63(r99): [179..180]
Compressing live ranges: from 198 to 106 - 53%
Ranges after the compression:
 a0(r98): [0..1]
 a1(r59 [0]): [54..55] [2..3]
 a1(r59 [1]): [54..55] [2..3]
 a2(r122): [22..23]
 a3(r121 [0]): [24..25]
 a3(r121 [1]): [24..25]
 a4(r97): [26..27]
 a5(r96): [28..29]
 a6(r94): [28..33]
 a7(r95): [30..31]
 a8(r120): [32..33]
 a9(r93): [34..35]
 a10(r119): [36..37]
 a11(r92): [36..37]
 a12(r91): [38..39]
 a13(r118): [40..41]
 a14(r90): [4..5]
 a15(r117): [4..5]
 a16(r89): [6..7]
 a17(r88): [8..9]
 a18(r86): [8..13]
 a19(r87): [10..11]
 a20(r116): [12..13]
 a21(r85): [14..15]
 a22(r115): [16..17]
 a23(r84): [16..17]
 a24(r83): [18..19]
 a25(r114): [20..21]
 a26(r113 [0]): [42..43]
 a26(r113 [1]): [42..43]
 a27(r82): [44..45]
 a28(r81): [46..47]
 a29(r79): [46..51]
 a30(r80): [48..49]
 a31(r112): [50..51]
 a32(r111): [52..53]
 a33(r110): [74..75]
 a34(r109 [0]): [76..77]
 a34(r109 [1]): [76..77]
 a35(r78): [78..79]
 a36(r77): [80..81]
 a37(r75): [80..85]
 a38(r76): [82..83]
 a39(r108): [84..85]
 a40(r74): [86..87]
 a41(r107): [88..89]
 a42(r73): [88..89]
 a43(r72): [90..91]
 a44(r106): [92..93]
 a45(r105): [56..57]
 a46(r71): [56..57]
 a47(r70): [58..59]
 a48(r69): [60..61]
 a49(r67): [60..65]
 a50(r68): [62..63]
 a51(r104): [64..65]
 a52(r66): [66..67]
 a53(r103): [68..69]
 a54(r65): [68..69]
 a55(r64): [70..71]
 a56(r102): [72..73]
 a57(r101 [0]): [94..95]
 a57(r101 [1]): [94..95]
 a58(r63): [96..97]
 a59(r62): [98..99]
 a60(r60): [98..103]
 a61(r61): [100..101]
 a62(r100): [102..103]
 a63(r99): [104..105]
  regions=1, blocks=16, points=106
    allocnos=64 (big 5), copies=0, conflicts=0, ranges=71
Disposition:
    1:r59  l0     0   60:r60  l0     0   61:r61  l0     1   59:r62  l0     1
   58:r63  l0     0   55:r64  l0     0   54:r65  l0     1   52:r66  l0     0
   49:r67  l0     0   50:r68  l0     1   48:r69  l0     1   47:r70  l0     0
   46:r71  l0     9   43:r72  l0     0   42:r73  l0     1   40:r74  l0     0
   37:r75  l0     0   38:r76  l0     1   36:r77  l0     1   35:r78  l0     0
   29:r79  l0     0   30:r80  l0     1   28:r81  l0     1   27:r82  l0     0
   24:r83  l0     0   23:r84  l0     1   21:r85  l0     0   18:r86  l0     0
   19:r87  l0     1   17:r88  l0     1   16:r89  l0     0   14:r90  l0     8
   12:r91  l0     0   11:r92  l0     1    9:r93  l0     0    6:r94  l0     0
    7:r95  l0     1    5:r96  l0     1    4:r97  l0     0    0:r98  l0     8
   63:r99  l0     0   62:r100 l0     1   57:r101 l0     0   56:r102 l0     0
   53:r103 l0     0   51:r104 l0     1   45:r105 l0     8   44:r106 l0     0
   41:r107 l0     0   39:r108 l0     1   34:r109 l0     0   33:r110 l0     0
   32:r111 l0     0   31:r112 l0     1   26:r113 l0     0   25:r114 l0     0
   22:r115 l0     0   20:r116 l0     1   15:r117 l0     9   13:r118 l0     0
   10:r119 l0     0    8:r120 l0     1    3:r121 l0     0    2:r122 l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_find_extrem

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 6[bp] 8[st] 17[flags]
;;  ref usage 	r0={1d} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,15u} r7={1d,15u} r8={1d,2u} r16={1d,14u} r17={27d,5u} r20={1d,54u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={2d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u,1e} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u,1e} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u,1e} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u,1e} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} 
;;    total ref usage 293{112d,173u,8e} in 92{92 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:19 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32])
        (reg:SI 4 si [ np ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ np ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])
        (reg:SI 1 dx [ c ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ c ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 Max+0 S4 A32])
        (reg:SI 2 cx [ Max ])) mSector.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ Max ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 Max+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:22 7 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:22 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 67)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 99 100 101
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 60 [ D.4955 ])
        (mem/f:DI (reg/f:DI 99) [0 *p_10(D)+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (nil)))
(insn 15 14 16 3 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 61 [ D.4956 ])
        (sign_extend:DI (reg:SI 100))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 62 [ D.4956 ])
                (ashift:DI (reg:DI 61 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 63 [ D.4955 ])
                (plus:DI (reg/f:DI 60 [ D.4955 ])
                    (reg:DI 62 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 62 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 20 3 (set (reg:XF 101)
        (mem:XF (reg/f:DI 63 [ D.4955 ]) [0 *_15+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.4955 ])
        (nil)))
(insn 20 19 140 3 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 101)) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 101)
        (nil)))
(jump_insn 140 20 141 3 (set (pc)
        (label_ref 57)) mSector.c:23 650 {jump}
     (nil)
 -> 57)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 141 140 59)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 102 103 104 105
(code_label 59 141 23 4 6 "" [1 uses])
(note 23 59 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 102)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 64 [ D.4956 ])
        (sign_extend:DI (reg:SI 102))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 65 [ D.4956 ])
                (ashift:DI (reg:DI 64 [ D.4956 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 27 26 28 4 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg/f:DI 66 [ D.4957 ])
                (plus:DI (reg:DI 65 [ D.4956 ])
                    (reg/f:DI 103)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (expr_list:REG_DEAD (reg:DI 65 [ D.4956 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                        (reg:DI 65 [ D.4956 ]))
                    (nil))))))
(insn 29 28 30 4 (set (reg/f:DI 67 [ D.4955 ])
        (mem/f:DI (reg/f:DI 66 [ D.4957 ]) [0 *_20+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ D.4957 ])
        (nil)))
(insn 30 29 31 4 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 68 [ D.4956 ])
        (sign_extend:DI (reg:SI 104))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 69 [ D.4956 ])
                (ashift:DI (reg:DI 68 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 68 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 70 [ D.4955 ])
                (plus:DI (reg/f:DI 67 [ D.4955 ])
                    (reg:DI 69 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 67 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 34 33 35 4 (set (reg:XF 71 [ D.4954 ])
        (mem:XF (reg/f:DI 70 [ D.4955 ]) [0 *_24+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.4955 ])
        (nil)))
(insn 35 34 36 4 (set (reg:XF 105)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (nil))
(insn 36 35 37 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 71 [ D.4954 ])
            (reg:XF 105))) mSector.c:23 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 105)
        (expr_list:REG_DEAD (reg:XF 71 [ D.4954 ])
            (nil))))
(jump_insn 37 36 41 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 54)
            (pc))) mSector.c:23 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 54)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72 73 74 75 76 77 78 106 107 108 109
(note 41 37 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 72 [ D.4956 ])
        (sign_extend:DI (reg:SI 106))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 44 43 45 5 (parallel [
            (set (reg:DI 73 [ D.4956 ])
                (ashift:DI (reg:DI 72 [ D.4956 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 45 44 46 5 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg/f:DI 74 [ D.4957 ])
                (plus:DI (reg:DI 73 [ D.4956 ])
                    (reg/f:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg:DI 73 [ D.4956 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                        (reg:DI 73 [ D.4956 ]))
                    (nil))))))
(insn 47 46 48 5 (set (reg/f:DI 75 [ D.4955 ])
        (mem/f:DI (reg/f:DI 74 [ D.4957 ]) [0 *_28+0 S8 A64])) mSector.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.4957 ])
        (nil)))
(insn 48 47 49 5 (set (reg:SI 108)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 76 [ D.4956 ])
        (sign_extend:DI (reg:SI 108))) mSector.c:23 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 108)
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 77 [ D.4956 ])
                (ashift:DI (reg:DI 76 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 51 50 52 5 (parallel [
            (set (reg/f:DI 78 [ D.4955 ])
                (plus:DI (reg/f:DI 75 [ D.4955 ])
                    (reg:DI 77 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 52 51 53 5 (set (reg:XF 109)
        (mem:XF (reg/f:DI 78 [ D.4955 ]) [0 *_32+0 S16 A128])) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 78 [ D.4955 ])
        (nil)))
(insn 53 52 54 5 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 109)) mSector.c:23 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 109)
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 6 4 "" [1 uses])
(note 55 54 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:23 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110
(code_label 57 56 58 7 3 "" [1 uses])
(note 58 57 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 58 61 7 (set (reg:SI 110)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:23 89 {*movsi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 110)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32]))) mSector.c:23 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 110)
        (nil)))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) mSector.c:23 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 59)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 142 8 (set (reg:XF 59 [ D.4954 ])
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:24 131 {*movxf_internal_rex64}
     (nil))
(jump_insn 142 64 143 8 (set (pc)
        (label_ref 122)) mSector.c:24 650 {jump}
     (nil)
 -> 122)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 143 142 67)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 81 82 111 112 113
(code_label 67 143 68 9 2 "" [1 uses])
(note 68 67 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 70 69 71 9 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 9 (set (reg/f:DI 79 [ D.4955 ])
        (mem/f:DI (reg/f:DI 111) [0 *p_10(D)+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (nil)))
(insn 72 71 73 9 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:DI 80 [ D.4956 ])
        (sign_extend:DI (reg:SI 112))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 74 73 75 9 (parallel [
            (set (reg:DI 81 [ D.4956 ])
                (ashift:DI (reg:DI 80 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 80 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 75 74 76 9 (parallel [
            (set (reg/f:DI 82 [ D.4955 ])
                (plus:DI (reg/f:DI 79 [ D.4955 ])
                    (reg:DI 81 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 79 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 76 75 77 9 (set (reg:XF 113)
        (mem:XF (reg/f:DI 82 [ D.4955 ]) [0 *_40+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 82 [ D.4955 ])
        (nil)))
(insn 77 76 144 9 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 113)) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 113)
        (nil)))
(jump_insn 144 77 145 9 (set (pc)
        (label_ref 114)) mSector.c:27 650 {jump}
     (nil)
 -> 114)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 145 144 116)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 114 115 116 117
(code_label 116 145 80 10 11 "" [1 uses])
(note 80 116 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg:SI 114)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 82 81 83 10 (set (reg:DI 83 [ D.4956 ])
        (sign_extend:DI (reg:SI 114))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 83 82 84 10 (parallel [
            (set (reg:DI 84 [ D.4956 ])
                (ashift:DI (reg:DI 83 [ D.4956 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 83 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 84 83 85 10 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 10 (parallel [
            (set (reg/f:DI 85 [ D.4957 ])
                (plus:DI (reg:DI 84 [ D.4956 ])
                    (reg/f:DI 115)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (expr_list:REG_DEAD (reg:DI 84 [ D.4956 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                        (reg:DI 84 [ D.4956 ]))
                    (nil))))))
(insn 86 85 87 10 (set (reg/f:DI 86 [ D.4955 ])
        (mem/f:DI (reg/f:DI 85 [ D.4957 ]) [0 *_44+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85 [ D.4957 ])
        (nil)))
(insn 87 86 88 10 (set (reg:SI 116)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 87 [ D.4956 ])
        (sign_extend:DI (reg:SI 116))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 89 88 90 10 (parallel [
            (set (reg:DI 88 [ D.4956 ])
                (ashift:DI (reg:DI 87 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 87 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 89 [ D.4955 ])
                (plus:DI (reg/f:DI 86 [ D.4955 ])
                    (reg:DI 88 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 86 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 91 90 92 10 (set (reg:XF 90 [ D.4954 ])
        (mem:XF (reg/f:DI 89 [ D.4955 ]) [0 *_48+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.4955 ])
        (nil)))
(insn 92 91 93 10 (set (reg:XF 117)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (nil))
(insn 93 92 94 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 117)
            (reg:XF 90 [ D.4954 ]))) mSector.c:27 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 117)
        (expr_list:REG_DEAD (reg:XF 90 [ D.4954 ])
            (nil))))
(jump_insn 94 93 98 10 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) mSector.c:27 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 111)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 118 119 120 121
(note 98 94 99 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 11 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 100 99 101 11 (set (reg:DI 91 [ D.4956 ])
        (sign_extend:DI (reg:SI 118))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 101 100 102 11 (parallel [
            (set (reg:DI 92 [ D.4956 ])
                (ashift:DI (reg:DI 91 [ D.4956 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 91 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 102 101 103 11 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 11 (parallel [
            (set (reg/f:DI 93 [ D.4957 ])
                (plus:DI (reg:DI 92 [ D.4956 ])
                    (reg/f:DI 119)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (expr_list:REG_DEAD (reg:DI 92 [ D.4956 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S8 A64])
                        (reg:DI 92 [ D.4956 ]))
                    (nil))))))
(insn 104 103 105 11 (set (reg/f:DI 94 [ D.4955 ])
        (mem/f:DI (reg/f:DI 93 [ D.4957 ]) [0 *_52+0 S8 A64])) mSector.c:27 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 93 [ D.4957 ])
        (nil)))
(insn 105 104 106 11 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 c+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 106 105 107 11 (set (reg:DI 95 [ D.4956 ])
        (sign_extend:DI (reg:SI 120))) mSector.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 107 106 108 11 (parallel [
            (set (reg:DI 96 [ D.4956 ])
                (ashift:DI (reg:DI 95 [ D.4956 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 95 [ D.4956 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 108 107 109 11 (parallel [
            (set (reg/f:DI 97 [ D.4955 ])
                (plus:DI (reg/f:DI 94 [ D.4955 ])
                    (reg:DI 96 [ D.4956 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ D.4956 ])
        (expr_list:REG_DEAD (reg/f:DI 94 [ D.4955 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 109 108 110 11 (set (reg:XF 121)
        (mem:XF (reg/f:DI 97 [ D.4955 ]) [0 *_56+0 S16 A128])) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.4955 ])
        (nil)))
(insn 110 109 111 11 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])
        (reg:XF 121)) mSector.c:27 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 121)
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 111 110 112 12 9 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:27 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122
(code_label 114 113 115 13 8 "" [1 uses])
(note 115 114 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 115 118 13 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:27 89 {*movsi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 122)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 np+0 S4 A32]))) mSector.c:27 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(jump_insn 119 118 120 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) mSector.c:27 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 116)
;;  succ:       10
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 120 119 121 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 14 (set (reg:XF 59 [ D.4954 ])
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S16 A128])) mSector.c:28 131 {*movxf_internal_rex64}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              8 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 8 [st] 98
(code_label 122 121 123 15 7 "" [1 uses])
(note 123 122 124 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 128 15 (set (reg:XF 98 [ <retval> ])
        (reg:XF 59 [ D.4954 ])) 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 59 [ D.4954 ])
        (nil)))
(insn 128 124 131 15 (set (reg/i:XF 8 st)
        (reg:XF 98 [ <retval> ])) mSector.c:30 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 98 [ <retval> ])
        (nil)))
(insn 131 128 0 15 (use (reg/i:XF 8 st)) mSector.c:30 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _point_proj (_point_proj, funcdef_no=3, decl_uid=3957, cgraph_uid=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r131: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a4 (r131,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r130: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a6 (r130,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r129: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a10 (r129,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r128: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a12 (r128,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r127: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a13 (r127,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r126: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a14 (r126,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a20 (r124,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a28 (r120,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r119: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a30 (r119,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r118: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a31 (r118,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r117: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a32 (r117,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a38 (r115,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a41 (r113,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r112: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a44 (r112,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a49 (r109,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r98,l0) best AREG, allocno GENERAL_REGS
    r97: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a3 (r97,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r96: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r96,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r95: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a7 (r95,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r94: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r94,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r93: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a11 (r93,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r92: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a9 (r92,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r91: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a15 (r91,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r90: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a16 (r90,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a17 (r88,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r87: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a21 (r87,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a25 (r85,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r84: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a26 (r84,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r83: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a29 (r83,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r82: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a27 (r82,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r81: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a33 (r81,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r80: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a34 (r80,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a35 (r78,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r77: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a39 (r77,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r76: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a42 (r76,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r75: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a45 (r75,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r74: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a43 (r74,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a50 (r72,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r71: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a52 (r71,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r70: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a53 (r70,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r69: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a51 (r69,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r68: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a56 (r68,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a57 (r66,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a63 (r64,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a67 (r62,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r61: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a69 (r61,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r60: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a70 (r60,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r98,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a2(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r97,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a4(r131,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a5(r96,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a6(r130,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a7(r95,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a8(r94,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a9(r92,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a10(r129,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a11(r93,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a12(r128,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a13(r127,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a14(r126,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a15(r91,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a16(r90,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a17(r88,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a18(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r124,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a21(r87,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a22(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a25(r85,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a26(r84,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a27(r82,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a28(r120,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a29(r83,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a30(r119,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a31(r118,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a32(r117,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a33(r81,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a34(r80,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a35(r78,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a36(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r115,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a39(r77,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a40(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a41(r113,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a42(r76,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a43(r74,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a44(r112,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a45(r75,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a46(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a47(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r109,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a50(r72,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a51(r69,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a52(r71,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a53(r70,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a54(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a55(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a56(r68,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a57(r66,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a58(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a60(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r64,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a64(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a65(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a66(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a67(r62,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a68(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a69(r61,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a70(r60,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a71(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a72(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 109(l0): point = 0
   Insn 106(l0): point = 2
   Insn 102(l0): point = 4
   Insn 99(l0): point = 7
   Insn 98(l0): point = 9
   Insn 97(l0): point = 11
   Insn 96(l0): point = 13
   Insn 95(l0): point = 15
   Insn 94(l0): point = 17
   Insn 93(l0): point = 19
   Insn 92(l0): point = 21
   Insn 91(l0): point = 23
   Insn 90(l0): point = 25
   Insn 89(l0): point = 27
   Insn 88(l0): point = 29
   Insn 87(l0): point = 31
   Insn 86(l0): point = 33
   Insn 85(l0): point = 35
   Insn 84(l0): point = 37
   Insn 83(l0): point = 39
   Insn 82(l0): point = 41
   Insn 81(l0): point = 43
   Insn 80(l0): point = 45
   Insn 79(l0): point = 47
   Insn 78(l0): point = 49
   Insn 77(l0): point = 51
   Insn 76(l0): point = 53
   Insn 75(l0): point = 55
   Insn 74(l0): point = 57
   Insn 73(l0): point = 59
   Insn 72(l0): point = 61
   Insn 71(l0): point = 63
   Insn 70(l0): point = 65
   Insn 69(l0): point = 67
   Insn 68(l0): point = 69
   Insn 67(l0): point = 71
   Insn 66(l0): point = 73
   Insn 65(l0): point = 75
   Insn 64(l0): point = 77
   Insn 63(l0): point = 79
   Insn 62(l0): point = 81
   Insn 61(l0): point = 83
   Insn 60(l0): point = 85
   Insn 59(l0): point = 87
   Insn 58(l0): point = 89
   Insn 57(l0): point = 91
   Insn 56(l0): point = 93
   Insn 55(l0): point = 95
   Insn 54(l0): point = 97
   Insn 53(l0): point = 99
   Insn 52(l0): point = 101
   Insn 51(l0): point = 103
   Insn 50(l0): point = 105
   Insn 49(l0): point = 107
   Insn 48(l0): point = 109
   Insn 47(l0): point = 111
   Insn 46(l0): point = 113
   Insn 45(l0): point = 115
   Insn 44(l0): point = 117
   Insn 43(l0): point = 119
   Insn 42(l0): point = 121
   Insn 41(l0): point = 123
   Insn 40(l0): point = 125
   Insn 39(l0): point = 127
   Insn 38(l0): point = 129
   Insn 37(l0): point = 131
   Insn 36(l0): point = 133
   Insn 35(l0): point = 135
   Insn 116(l0): point = 138
   Insn 30(l0): point = 140
   Insn 29(l0): point = 142
   Insn 28(l0): point = 144
   Insn 27(l0): point = 146
   Insn 26(l0): point = 148
   Insn 25(l0): point = 150
   Insn 24(l0): point = 152
   Insn 23(l0): point = 154
   Insn 22(l0): point = 156
   Insn 21(l0): point = 158
   Insn 16(l0): point = 161
   Insn 15(l0): point = 163
   Insn 14(l0): point = 166
   Insn 13(l0): point = 168
   Insn 12(l0): point = 170
   Insn 11(l0): point = 172
   Insn 10(l0): point = 174
   Insn 9(l0): point = 176
   Insn 5(l0): point = 178
   Insn 4(l0): point = 180
   Insn 3(l0): point = 182
   Insn 2(l0): point = 184
 a0(r98): [3..4]
 a1(r59): [138..140] [5..7]
 a2(r86): [10..51]
 a3(r97): [10..11]
 a4(r131): [12..13]
 a5(r96): [12..15]
 a6(r130): [16..17]
 a7(r95): [16..19]
 a8(r94): [20..21]
 a9(r92): [20..31]
 a10(r129): [22..23]
 a11(r93): [22..25]
 a12(r128): [26..27]
 a13(r127): [26..29]
 a14(r126): [32..33]
 a15(r91): [32..35]
 a16(r90): [36..37]
 a17(r88): [36..43]
 a18(r89): [38..39]
 a19(r125): [40..41]
 a20(r124): [44..45]
 a21(r87): [44..47]
 a22(r123): [48..49]
 a23(r122): [52..53]
 a24(r121): [56..57]
 a25(r85): [56..59]
 a26(r84): [60..61]
 a27(r82): [60..71]
 a28(r120): [62..63]
 a29(r83): [62..65]
 a30(r119): [66..67]
 a31(r118): [66..69]
 a32(r117): [72..73]
 a33(r81): [72..75]
 a34(r80): [76..77]
 a35(r78): [76..83]
 a36(r79): [78..79]
 a37(r116): [80..81]
 a38(r115): [84..85]
 a39(r77): [84..87]
 a40(r114): [88..89]
 a41(r113): [92..93]
 a42(r76): [94..95]
 a43(r74): [94..103]
 a44(r112): [96..97]
 a45(r75): [96..99]
 a46(r111): [100..101]
 a47(r73): [104..105]
 a48(r110): [106..107]
 a49(r109): [110..111]
 a50(r72): [112..113]
 a51(r69): [112..123]
 a52(r71): [114..115]
 a53(r70): [114..119]
 a54(r108): [116..117]
 a55(r107): [120..121]
 a56(r68): [124..125]
 a57(r66): [124..131]
 a58(r67): [126..127]
 a59(r106): [128..129]
 a60(r65): [132..133]
 a61(r105): [134..135]
 a62(r63): [143..148]
 a63(r64 [0]): [143..144]
 a63(r64 [1]): [143..144]
 a64(r104): [145..146]
 a65(r103): [149..150]
 a66(r102): [153..154]
 a67(r62 [0]): [153..156]
 a67(r62 [1]): [153..156]
 a68(r101): [157..158]
 a69(r61): [164..170]
 a70(r60): [164..174]
 a71(r100): [171..172]
 a72(r99): [175..176]
Compressing live ranges: from 187 to 100 - 53%
Ranges after the compression:
 a0(r98): [0..1]
 a1(r59): [82..83] [2..3]
 a2(r86): [4..27]
 a3(r97): [4..5]
 a4(r131): [6..7]
 a5(r96): [6..7]
 a6(r130): [8..9]
 a7(r95): [8..9]
 a8(r94): [10..11]
 a9(r92): [10..15]
 a10(r129): [12..13]
 a11(r93): [12..13]
 a12(r128): [14..15]
 a13(r127): [14..15]
 a14(r126): [16..17]
 a15(r91): [16..17]
 a16(r90): [18..19]
 a17(r88): [18..23]
 a18(r89): [20..21]
 a19(r125): [22..23]
 a20(r124): [24..25]
 a21(r87): [24..25]
 a22(r123): [26..27]
 a23(r122): [28..29]
 a24(r121): [30..31]
 a25(r85): [30..31]
 a26(r84): [32..33]
 a27(r82): [32..37]
 a28(r120): [34..35]
 a29(r83): [34..35]
 a30(r119): [36..37]
 a31(r118): [36..37]
 a32(r117): [38..39]
 a33(r81): [38..39]
 a34(r80): [40..41]
 a35(r78): [40..45]
 a36(r79): [42..43]
 a37(r116): [44..45]
 a38(r115): [46..47]
 a39(r77): [46..47]
 a40(r114): [48..49]
 a41(r113): [50..51]
 a42(r76): [52..53]
 a43(r74): [52..57]
 a44(r112): [54..55]
 a45(r75): [54..55]
 a46(r111): [56..57]
 a47(r73): [58..59]
 a48(r110): [60..61]
 a49(r109): [62..63]
 a50(r72): [64..65]
 a51(r69): [64..71]
 a52(r71): [66..67]
 a53(r70): [66..69]
 a54(r108): [68..69]
 a55(r107): [70..71]
 a56(r68): [72..73]
 a57(r66): [72..77]
 a58(r67): [74..75]
 a59(r106): [76..77]
 a60(r65): [78..79]
 a61(r105): [80..81]
 a62(r63): [84..87]
 a63(r64 [0]): [84..85]
 a63(r64 [1]): [84..85]
 a64(r104): [86..87]
 a65(r103): [88..89]
 a66(r102): [90..91]
 a67(r62 [0]): [90..91]
 a67(r62 [1]): [90..91]
 a68(r101): [92..93]
 a69(r61): [94..95]
 a70(r60): [94..97]
 a71(r100): [96..97]
 a72(r99): [98..99]
  regions=1, blocks=7, points=100
    allocnos=73 (big 2), copies=0, conflicts=0, ranges=76
Disposition:
    1:r59  l0     0   70:r60  l0     9   69:r61  l0     8   67:r62  l0     0
   62:r63  l0     2   63:r64  l0     0   60:r65  l0     0   57:r66  l0     9
   58:r67  l0     0   56:r68  l0     8   51:r69  l0     9   53:r70  l0    10
   52:r71  l0     8   50:r72  l0     8   47:r73  l0     0   43:r74  l0     9
   45:r75  l0    10   42:r76  l0     8   39:r77  l0     9   35:r78  l0     9
   36:r79  l0     0   34:r80  l0     8   33:r81  l0     9   27:r82  l0     9
   29:r83  l0    10   26:r84  l0     8   25:r85  l0     8    2:r86  l0     1
   21:r87  l0     9   17:r88  l0     9   18:r89  l0     0   16:r90  l0     8
   15:r91  l0     9    9:r92  l0     9   11:r93  l0    10    8:r94  l0     8
    7:r95  l0     9    5:r96  l0     9    3:r97  l0     8    0:r98  l0     0
   72:r99  l0     0   71:r100 l0     0   68:r101 l0     0   66:r102 l0     2
   65:r103 l0     0   64:r104 l0     0   61:r105 l0     0   59:r106 l0     0
   55:r107 l0     0   54:r108 l0     0   49:r109 l0     8   48:r110 l0     0
   46:r111 l0     0   44:r112 l0     8   41:r113 l0     8   40:r114 l0     0
   38:r115 l0     8   37:r116 l0     0   32:r117 l0     8   31:r118 l0    10
   30:r119 l0     8   28:r120 l0     8   24:r121 l0     0   23:r122 l0     0
   22:r123 l0     0   20:r124 l0     8   19:r125 l0     0   14:r126 l0     8
   13:r127 l0    10   12:r128 l0     8   10:r129 l0     8    6:r130 l0     8
    4:r131 l0     8
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_point_proj

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,6u} r16={1d,5u} r17={9d,2u} r20={1d,41u,7e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={2d,1u} r60={1d,2u} r61={1d,2u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} 
;;    total ref usage 251{103d,141u,7e} in 91{91 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 99 100
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
        (reg:DI 5 di [ P ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ P ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
        (reg:DI 4 si [ A ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ A ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])
        (reg:DI 1 dx [ B ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ B ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
        (reg:DI 2 cx [ H ])) mSector.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ H ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:34 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 60 [ D.4960 ])
        (mem:XF (reg/f:DI 99) [0 *B_2(D)+0 S16 A128])) mSector.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:34 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:XF 61 [ D.4960 ])
        (mem:XF (reg/f:DI 100) [0 *A_4(D)+0 S16 A128])) mSector.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (nil)))
(insn 13 12 14 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 60 [ D.4960 ])
            (reg:XF 61 [ D.4960 ]))) mSector.c:34 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 14 13 111 2 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mSector.c:34 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 33)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61
;; lr  def 	 17 [flags]
(note 111 14 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 111 16 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 60 [ D.4960 ])
            (reg:XF 61 [ D.4960 ]))) mSector.c:34 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 61 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 60 [ D.4960 ])
            (nil))))
(jump_insn 16 15 20 3 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 33)
            (pc))) mSector.c:34 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 33)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 62 63 64 101 102 103 104
(note 20 16 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 4 (set (reg:XF 62 [ D.4960 ])
        (mem:XF (reg/f:DI 101) [0 *B_2(D)+0 S16 A128])) mSector.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:35 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (set (mem:XF (reg/f:DI 102) [0 *H_7(D)+0 S16 A128])
        (reg:XF 62 [ D.4960 ])) mSector.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (expr_list:REG_DEAD (reg:XF 62 [ D.4960 ])
            (nil))))
(insn 25 24 26 4 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:DI 63 [ D.4961 ])
                (plus:DI (reg/f:DI 103)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:36 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 27 26 28 4 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (reg:XF 64 [ D.4960 ])
        (mem:XF (plus:DI (reg/f:DI 104)
                (const_int 16 [0x10])) [0 MEM[(long double *)P_9(D) + 16B]+0 S16 A128])) mSector.c:36 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 104)
        (nil)))
(insn 29 28 30 4 (set (mem:XF (reg/f:DI 63 [ D.4961 ]) [0 *_8+0 S16 A128])
        (reg:XF 64 [ D.4960 ])) mSector.c:36 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 64 [ D.4960 ])
        (expr_list:REG_DEAD (reg/f:DI 63 [ D.4961 ])
            (nil))))
(insn 30 29 116 4 (set (reg:SI 59 [ D.4959 ])
        (const_int 1 [0x1])) mSector.c:37 89 {*movsi_internal}
     (nil))
(jump_insn 116 30 117 4 (set (pc)
        (label_ref 100)) mSector.c:37 650 {jump}
     (nil)
 -> 100)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 117 116 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
(code_label 33 117 34 5 15 "" [2 uses])
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg/f:DI 65 [ D.4961 ])
                (plus:DI (reg/f:DI 105)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:40 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 37 36 38 5 (set (reg:XF 66 [ D.4960 ])
        (mem:XF (reg/f:DI 65 [ D.4961 ]) [0 *_12+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.4961 ])
        (nil)))
(insn 38 37 39 5 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 5 (parallel [
            (set (reg/f:DI 67 [ D.4961 ])
                (plus:DI (reg/f:DI 106)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:40 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 40 39 41 5 (set (reg:XF 68 [ D.4960 ])
        (mem:XF (reg/f:DI 67 [ D.4961 ]) [0 *_14+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.4961 ])
        (nil)))
(insn 41 40 42 5 (set (reg:XF 69 [ D.4960 ])
        (minus:XF (reg:XF 66 [ D.4960 ])
            (reg:XF 68 [ D.4960 ]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 68 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 66 [ D.4960 ])
            (nil))))
(insn 42 41 43 5 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 B+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 5 (set (reg:XF 70 [ D.4960 ])
        (mem:XF (reg/f:DI 107) [0 *B_2(D)+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (nil)))
(insn 44 43 45 5 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:40 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:XF 71 [ D.4960 ])
        (mem:XF (reg/f:DI 108) [0 *A_4(D)+0 S16 A128])) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 108)
        (nil)))
(insn 46 45 47 5 (set (reg:XF 72 [ D.4960 ])
        (minus:XF (reg:XF 70 [ D.4960 ])
            (reg:XF 71 [ D.4960 ]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 71 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 70 [ D.4960 ])
            (nil))))
(insn 47 46 48 5 (set (reg:XF 109)
        (div:XF (reg:XF 69 [ D.4960 ])
            (reg:XF 72 [ D.4960 ]))) mSector.c:40 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 72 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 69 [ D.4960 ])
            (nil))))
(insn 48 47 49 5 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])
        (reg:XF 109)) mSector.c:40 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 109)
        (nil)))
(insn 49 48 50 5 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg/f:DI 73 [ D.4961 ])
                (plus:DI (reg/f:DI 110)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 51 50 52 5 (set (reg:XF 74 [ D.4960 ])
        (mem:XF (reg/f:DI 73 [ D.4961 ]) [0 *_21+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.4961 ])
        (nil)))
(insn 52 51 53 5 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 A+0 S8 A64])) mSector.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 5 (set (reg:XF 75 [ D.4960 ])
        (mem:XF (reg/f:DI 111) [0 *A_4(D)+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (nil)))
(insn 54 53 55 5 (set (reg:XF 112)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:41 131 {*movxf_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (reg:XF 76 [ D.4960 ])
        (mult:XF (reg:XF 75 [ D.4960 ])
            (reg:XF 112))) mSector.c:41 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 112)
        (expr_list:REG_DEAD (reg:XF 75 [ D.4960 ])
            (nil))))
(insn 56 55 57 5 (set (reg:XF 113)
        (minus:XF (reg:XF 74 [ D.4960 ])
            (reg:XF 76 [ D.4960 ]))) mSector.c:41 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 76 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 74 [ D.4960 ])
            (nil))))
(insn 57 56 58 5 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])
        (reg:XF 113)) mSector.c:41 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 113)
        (nil)))
(insn 58 57 59 5 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (set (reg:XF 77 [ D.4960 ])
        (mem:XF (reg/f:DI 114) [0 *P_9(D)+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (nil)))
(insn 60 59 61 5 (set (reg:XF 115)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 61 60 62 5 (set (reg:XF 78 [ D.4960 ])
        (div:XF (reg:XF 77 [ D.4960 ])
            (reg:XF 115))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 115)
        (expr_list:REG_DEAD (reg:XF 77 [ D.4960 ])
            (nil))))
(insn 62 61 63 5 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg/f:DI 79 [ D.4961 ])
                (plus:DI (reg/f:DI 116)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 64 63 65 5 (set (reg:XF 80 [ D.4960 ])
        (mem:XF (reg/f:DI 79 [ D.4961 ]) [0 *_28+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.4961 ])
        (nil)))
(insn 65 64 66 5 (set (reg:XF 81 [ D.4960 ])
        (plus:XF (reg:XF 78 [ D.4960 ])
            (reg:XF 80 [ D.4960 ]))) mSector.c:43 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 80 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 78 [ D.4960 ])
            (nil))))
(insn 66 65 67 5 (set (reg:XF 117)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 67 66 68 5 (set (reg:XF 82 [ D.4960 ])
        (minus:XF (reg:XF 81 [ D.4960 ])
            (reg:XF 117))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 117)
        (expr_list:REG_DEAD (reg:XF 81 [ D.4960 ])
            (nil))))
(insn 68 67 69 5 (set (reg:XF 118)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 69 68 70 5 (set (reg:XF 119)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 70 69 71 5 (set (reg:XF 83 [ D.4960 ])
        (div:XF (reg:XF 118)
            (reg:XF 119))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 119)
        (expr_list:REG_DEAD (reg:XF 118)
            (nil))))
(insn 71 70 72 5 (set (reg:XF 120)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 72 71 73 5 (set (reg:XF 84 [ D.4960 ])
        (plus:XF (reg:XF 83 [ D.4960 ])
            (reg:XF 120))) mSector.c:43 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 120)
        (expr_list:REG_DEAD (reg:XF 83 [ D.4960 ])
            (nil))))
(insn 73 72 74 5 (set (reg:XF 85 [ D.4960 ])
        (div:XF (reg:XF 82 [ D.4960 ])
            (reg:XF 84 [ D.4960 ]))) mSector.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 84 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 82 [ D.4960 ])
            (nil))))
(insn 74 73 75 5 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 5 (set (mem:XF (reg/f:DI 121) [0 *H_7(D)+0 S16 A128])
        (reg:XF 85 [ D.4960 ])) mSector.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 121)
        (expr_list:REG_DEAD (reg:XF 85 [ D.4960 ])
            (nil))))
(insn 76 75 77 5 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg/f:DI 86 [ D.4961 ])
                (plus:DI (reg/f:DI 122)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 122)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -64 [0xffffffffffffffc0])) [0 H+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 78 77 79 5 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 5 (set (reg:XF 87 [ D.4960 ])
        (mem:XF (reg/f:DI 123) [0 *P_9(D)+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 123)
        (nil)))
(insn 80 79 81 5 (set (reg:XF 124)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 81 80 82 5 (set (reg:XF 88 [ D.4960 ])
        (div:XF (reg:XF 87 [ D.4960 ])
            (reg:XF 124))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 124)
        (expr_list:REG_DEAD (reg:XF 87 [ D.4960 ])
            (nil))))
(insn 82 81 83 5 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])) mSector.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg/f:DI 89 [ D.4961 ])
                (plus:DI (reg/f:DI 125)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 125)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 P+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 84 83 85 5 (set (reg:XF 90 [ D.4960 ])
        (mem:XF (reg/f:DI 89 [ D.4961 ]) [0 *_38+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.4961 ])
        (nil)))
(insn 85 84 86 5 (set (reg:XF 91 [ D.4960 ])
        (plus:XF (reg:XF 88 [ D.4960 ])
            (reg:XF 90 [ D.4960 ]))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 90 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 88 [ D.4960 ])
            (nil))))
(insn 86 85 87 5 (set (reg:XF 126)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 87 86 88 5 (set (reg:XF 92 [ D.4960 ])
        (minus:XF (reg:XF 91 [ D.4960 ])
            (reg:XF 126))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 126)
        (expr_list:REG_DEAD (reg:XF 91 [ D.4960 ])
            (nil))))
(insn 88 87 89 5 (set (reg:XF 127)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 89 88 90 5 (set (reg:XF 128)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 5 (set (reg:XF 93 [ D.4960 ])
        (div:XF (reg:XF 127)
            (reg:XF 128))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 128)
        (expr_list:REG_DEAD (reg:XF 127)
            (nil))))
(insn 91 90 92 5 (set (reg:XF 129)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 92 91 93 5 (set (reg:XF 94 [ D.4960 ])
        (plus:XF (reg:XF 93 [ D.4960 ])
            (reg:XF 129))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 129)
        (expr_list:REG_DEAD (reg:XF 93 [ D.4960 ])
            (nil))))
(insn 93 92 94 5 (set (reg:XF 95 [ D.4960 ])
        (div:XF (reg:XF 92 [ D.4960 ])
            (reg:XF 94 [ D.4960 ]))) mSector.c:44 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 94 [ D.4960 ])
        (expr_list:REG_DEAD (reg:XF 92 [ D.4960 ])
            (nil))))
(insn 94 93 95 5 (set (reg:XF 130)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 m+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 95 94 96 5 (set (reg:XF 96 [ D.4960 ])
        (mult:XF (reg:XF 95 [ D.4960 ])
            (reg:XF 130))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 130)
        (expr_list:REG_DEAD (reg:XF 95 [ D.4960 ])
            (nil))))
(insn 96 95 97 5 (set (reg:XF 131)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 c+0 S16 A128])) mSector.c:44 131 {*movxf_internal_rex64}
     (nil))
(insn 97 96 98 5 (set (reg:XF 97 [ D.4960 ])
        (plus:XF (reg:XF 96 [ D.4960 ])
            (reg:XF 131))) mSector.c:44 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 131)
        (expr_list:REG_DEAD (reg:XF 96 [ D.4960 ])
            (nil))))
(insn 98 97 99 5 (set (mem:XF (reg/f:DI 86 [ D.4961 ]) [0 *_35+0 S16 A128])
        (reg:XF 97 [ D.4960 ])) mSector.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 97 [ D.4960 ])
        (expr_list:REG_DEAD (reg/f:DI 86 [ D.4961 ])
            (nil))))
(insn 99 98 100 5 (set (reg:SI 59 [ D.4959 ])
        (const_int 1 [0x1])) mSector.c:46 89 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 98
(code_label 100 99 101 6 17 "" [1 uses])
(note 101 100 102 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 106 6 (set (reg:SI 98 [ <retval> ])
        (reg:SI 59 [ D.4959 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.4959 ])
        (nil)))
(insn 106 102 109 6 (set (reg/i:SI 0 ax)
        (reg:SI 98 [ <retval> ])) mSector.c:47 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98 [ <retval> ])
        (nil)))
(insn 109 106 0 6 (use (reg/i:SI 0 ax)) mSector.c:47 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _check_tmp_point (_check_tmp_point, funcdef_no=4, decl_uid=3963, cgraph_uid=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 11 (    1)
Building IRA IR
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r82: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r82,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r81: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r81,l0) best DREG, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r78,l0) best DIREG, allocno GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r77,l0) best AREG, allocno GENERAL_REGS
    r76: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a4 (r76,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r75: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r75,l0) best DIREG, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r70,l0) best SIREG, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r62,l0) best AREG, allocno GENERAL_REGS
    r61: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r61,l0) best SIREG, allocno GENERAL_REGS
    r60: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r60,l0) best DREG, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r77,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:52 SSE_REGS:52 MMX_REGS:52 FP_TOP_SSE_REGS:262140 FP_SECOND_SSE_REGS:262140 FLOAT_SSE_REGS:262140 FLOAT_INT_REGS:262140 INT_SSE_REGS:52 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:15
  a2(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r76,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a5(r82,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a6(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r81,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a11(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a16(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a18(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r62,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r60,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 76(l0): point = 0
   Insn 73(l0): point = 2
   Insn 69(l0): point = 4
   Insn 66(l0): point = 7
   Insn 87(l0): point = 10
   Insn 52(l0): point = 12
   Insn 47(l0): point = 15
   Insn 46(l0): point = 17
   Insn 45(l0): point = 19
   Insn 44(l0): point = 21
   Insn 43(l0): point = 23
   Insn 42(l0): point = 25
   Insn 41(l0): point = 27
   Insn 40(l0): point = 29
   Insn 39(l0): point = 31
   Insn 38(l0): point = 33
   Insn 37(l0): point = 35
   Insn 36(l0): point = 37
   Insn 35(l0): point = 39
   Insn 34(l0): point = 41
   Insn 33(l0): point = 43
   Insn 32(l0): point = 45
   Insn 31(l0): point = 47
   Insn 30(l0): point = 49
   Insn 29(l0): point = 51
   Insn 28(l0): point = 53
   Insn 27(l0): point = 55
   Insn 26(l0): point = 57
   Insn 64(l0): point = 60
   Insn 63(l0): point = 62
   Insn 61(l0): point = 64
   Insn 60(l0): point = 66
   Insn 57(l0): point = 69
   Insn 84(l0): point = 72
   Insn 22(l0): point = 74
   Insn 82(l0): point = 77
   Insn 17(l0): point = 79
   Insn 15(l0): point = 82
   Insn 14(l0): point = 84
   Insn 13(l0): point = 86
   Insn 12(l0): point = 88
   Insn 11(l0): point = 90
   Insn 10(l0): point = 92
   Insn 9(l0): point = 94
   Insn 8(l0): point = 96
   Insn 7(l0): point = 98
   Insn 6(l0): point = 100
   Insn 2(l0): point = 102
 a0(r77): [3..4]
 a1(r59): [77..79] [10..12] [5..7]
 a2(r64): [63..64]
 a3(r63): [65..66]
 a4(r76): [18..21]
 a5(r82): [18..19]
 a6(r75): [26..33]
 a7(r70): [28..45]
 a8(r81): [30..31]
 a9(r74): [34..35]
 a10(r73): [36..37]
 a11(r71): [36..43]
 a12(r72): [38..39]
 a13(r80): [40..41]
 a14(r69): [46..47]
 a15(r68): [48..49]
 a16(r65): [48..57]
 a17(r67): [50..51]
 a18(r66): [52..53]
 a19(r79): [54..55]
 a20(r62): [85..86]
 a21(r78): [91..96]
 a22(r61): [93..98]
 a23(r60): [95..100]
Compressing live ranges: from 105 to 38 - 36%
Ranges after the compression:
 a0(r77): [0..1]
 a1(r59): [32..33] [2..5]
 a2(r64): [28..29]
 a3(r63): [30..31]
 a4(r76): [6..7]
 a5(r82): [6..7]
 a6(r75): [8..9]
 a7(r70): [8..17]
 a8(r81): [8..9]
 a9(r74): [10..11]
 a10(r73): [12..13]
 a11(r71): [12..17]
 a12(r72): [14..15]
 a13(r80): [16..17]
 a14(r69): [18..19]
 a15(r68): [20..21]
 a16(r65): [20..27]
 a17(r67): [22..23]
 a18(r66): [24..25]
 a19(r79): [26..27]
 a20(r62): [34..35]
 a21(r78): [36..37]
 a22(r61): [36..37]
 a23(r60): [36..37]
  regions=1, blocks=11, points=38
    allocnos=24 (big 0), copies=0, conflicts=0, ranges=25
Disposition:
    1:r59  l0     0   23:r60  l0     1   22:r61  l0     2   20:r62  l0     0
    3:r63  l0     0    2:r64  l0     0   16:r65  l0     0   18:r66  l0     1
   17:r67  l0     1   15:r68  l0     1   14:r69  l0     0    7:r70  l0     2
   11:r71  l0     0   12:r72  l0     1   10:r73  l0     1    9:r74  l0     0
    6:r75  l0     0    4:r76  l0     8    0:r77  l0     0   21:r78  l0     0
   19:r79  l0     1   13:r80  l0     1    8:r81  l0     1    5:r82  l0     9
+++Costs: overall -9, reg -9, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_check_tmp_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={4d,3u} r1={5d,2u} r2={3d} r4={5d,2u} r5={5d,3u} r6={1d,10u} r7={1d,12u} r8={2d,1u} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,14u} r17={12d,3u} r18={2d} r19={2d} r20={1d,19u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={3d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} 
;;    total ref usage 243{150d,93u,0e} in 48{46 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 78
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:49 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 60 [ D.4962 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 conf.Nbound+0 S4 A128])) mSector.c:51 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 61 [ D.4963 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 conf.bound+0 S8 A64])) mSector.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 78)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 dx)
        (reg:SI 60 [ D.4962 ])) mSector.c:51 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 60 [ D.4962 ])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 61 [ D.4963 ])) mSector.c:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.4963 ])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 78)) mSector.c:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 78)
        (nil)))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:51 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 13 12 14 2 (set (reg:SI 62 [ D.4962 ])
        (reg:SI 0 ax)) mSector.c:51 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 62 [ D.4962 ])
            (const_int 0 [0]))) mSector.c:51 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 62 [ D.4962 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) mSector.c:51 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 82 3 (set (reg:SI 59 [ D.4962 ])
        (const_int 1 [0x1])) mSector.c:51 89 {*movsi_internal}
     (nil))
(jump_insn 82 17 83 3 (set (pc)
        (label_ref 67)) mSector.c:51 650 {jump}
     (nil)
 -> 67)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 83 82 20)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 83 21 4 21 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 84 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:52 89 {*movsi_internal}
     (nil))
(jump_insn 84 22 85 4 (set (pc)
        (label_ref 58)) mSector.c:52 650 {jump}
     (nil)
 -> 58)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 85 84 62)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 75 76 79 80 81 82
(code_label 62 85 25 5 26 "" [1 uses])
(note 25 62 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:DI 65 [ D.4963 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 conf.bound+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 5 (set (reg:SI 79)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 66 [ D.4964 ])
        (sign_extend:DI (reg:SI 79))) mSector.c:52 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 79)
        (nil)))
(insn 29 28 30 5 (parallel [
            (set (reg:DI 67 [ D.4964 ])
                (plus:DI (reg:DI 66 [ D.4964 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 66 [ D.4964 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 68 [ D.4964 ])
                (ashift:DI (reg:DI 67 [ D.4964 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 67 [ D.4964 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 69 [ D.4963 ])
                (plus:DI (reg/f:DI 65 [ D.4963 ])
                    (reg:DI 68 [ D.4964 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 68 [ D.4964 ])
        (expr_list:REG_DEAD (reg/f:DI 65 [ D.4963 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 32 31 33 5 (set (reg/f:DI 70 [ D.4965 ])
        (mem/f:DI (reg/f:DI 69 [ D.4963 ]) [0 *_15+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 69 [ D.4963 ])
        (nil)))
(insn 33 32 34 5 (set (reg/f:DI 71 [ D.4963 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 conf.bound+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 5 (set (reg:SI 80)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 72 [ D.4966 ])
        (sign_extend:DI (reg:SI 80))) mSector.c:52 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 80)
        (nil)))
(insn 36 35 37 5 (parallel [
            (set (reg:DI 73 [ D.4966 ])
                (ashift:DI (reg:DI 72 [ D.4966 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.4966 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 5 (parallel [
            (set (reg/f:DI 74 [ D.4963 ])
                (plus:DI (reg/f:DI 71 [ D.4963 ])
                    (reg:DI 73 [ D.4966 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 73 [ D.4966 ])
        (expr_list:REG_DEAD (reg/f:DI 71 [ D.4963 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 5 (set (reg/f:DI 75 [ D.4965 ])
        (mem/f:DI (reg/f:DI 74 [ D.4963 ]) [0 *_20+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.4963 ])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 81)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 5 (set (reg:DI 1 dx)
        (reg:DI 81)) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 81)
        (nil)))
(insn 41 40 42 5 (set (reg:DI 4 si)
        (reg/f:DI 70 [ D.4965 ])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.4965 ])
        (nil)))
(insn 42 41 43 5 (set (reg:DI 5 di)
        (reg/f:DI 75 [ D.4965 ])) mSector.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.4965 ])
        (nil)))
(call_insn 43 42 44 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("distance_point_segment") [flags 0x41]  <function_decl 0x7f44d29fca00 distance_point_segment>) [0 distance_point_segment S1 A8])
            (const_int 0 [0]))) mSector.c:52 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 44 43 45 5 (set (reg:XF 76 [ D.4967 ])
        (reg:XF 8 st)) mSector.c:52 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 45 44 46 5 (set (reg:XF 82)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mSector.c:52 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 46 45 47 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 82)
            (reg:XF 76 [ D.4967 ]))) mSector.c:52 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 82)
        (expr_list:REG_DEAD (reg:XF 76 [ D.4967 ])
            (nil))))
(jump_insn 47 46 51 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) mSector.c:52 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 86)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 51 47 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 87 6 (set (reg:SI 59 [ D.4962 ])
        (const_int 1 [0x1])) mSector.c:52 89 {*movsi_internal}
     (nil))
(jump_insn 87 52 88 6 (set (pc)
        (label_ref 67)) mSector.c:52 650 {jump}
     (nil)
 -> 67)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 88 87 86)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 86 88 56 7 28 "" [1 uses])
(note 56 86 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64
(code_label 58 57 59 8 23 "" [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg:SI 63 [ D.4962 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 conf.Nbound+0 S4 A128])) mSector.c:52 89 {*movsi_internal}
     (nil))
(insn 61 60 63 8 (parallel [
            (set (reg:SI 64 [ D.4962 ])
                (plus:SI (reg:SI 63 [ D.4962 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:52 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.4962 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 63 61 64 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 64 [ D.4962 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mSector.c:52 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 64 [ D.4962 ])
        (nil)))
(jump_insn 64 63 65 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mSector.c:52 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 62)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg:SI 59 [ D.4962 ])
        (const_int 0 [0])) mSector.c:54 89 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [100.0%] 
;;              6 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 77
(code_label 67 66 68 10 22 "" [2 uses])
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 73 10 (set (reg:SI 77 [ <retval> ])
        (reg:SI 59 [ D.4962 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.4962 ])
        (nil)))
(insn 73 69 76 10 (set (reg/i:SI 0 ax)
        (reg:SI 77 [ <retval> ])) mSector.c:55 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 77 [ <retval> ])
        (nil)))
(insn 76 73 0 10 (use (reg/i:SI 0 ax)) mSector.c:55 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function generate_temporary_point (generate_temporary_point, funcdef_no=5, decl_uid=1870, cgraph_uid=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 15 count 13 (    1)
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 109.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r95,l0) best DREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r80,l0) best AREG, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a7 (r78,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r77: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a8 (r77,l0) best NO_REGS, allocno NO_REGS
    r76: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r76,l0) best DIREG, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a24 (r68,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r67: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a25 (r67,l0) best NO_REGS, allocno NO_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r61,l0) best AREG, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r59,l0) best DIREG, allocno GENERAL_REGS

  a0(r80,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r61,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r95,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r78,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a8(r77,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a9(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a10(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a16(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a22(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a24(r68,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a25(r67,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a26(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a29(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a33(r84,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a35(r60,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a36(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a38(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 112(l0): point = 0
   Insn 109(l0): point = 3
   Insn 108(l0): point = 6
   Insn 107(l0): point = 8
   Insn 104(l0): point = 10
   Insn 100(l0): point = 12
   Insn 97(l0): point = 14
   Insn 96(l0): point = 16
   Insn 95(l0): point = 18
   Insn 94(l0): point = 20
   Insn 119(l0): point = 23
   Insn 48(l0): point = 25
   Insn 47(l0): point = 27
   Insn 46(l0): point = 29
   Insn 45(l0): point = 31
   Insn 44(l0): point = 33
   Insn 43(l0): point = 35
   Insn 42(l0): point = 37
   Insn 41(l0): point = 39
   Insn 40(l0): point = 41
   Insn 39(l0): point = 43
   Insn 38(l0): point = 45
   Insn 37(l0): point = 47
   Insn 36(l0): point = 49
   Insn 35(l0): point = 51
   Insn 92(l0): point = 54
   Insn 91(l0): point = 56
   Insn 89(l0): point = 58
   Insn 88(l0): point = 60
   Insn 87(l0): point = 62
   Insn 86(l0): point = 64
   Insn 85(l0): point = 66
   Insn 84(l0): point = 68
   Insn 83(l0): point = 70
   Insn 80(l0): point = 73
   Insn 79(l0): point = 75
   Insn 78(l0): point = 77
   Insn 77(l0): point = 79
   Insn 76(l0): point = 81
   Insn 75(l0): point = 83
   Insn 74(l0): point = 85
   Insn 73(l0): point = 87
   Insn 72(l0): point = 89
   Insn 71(l0): point = 91
   Insn 70(l0): point = 93
   Insn 69(l0): point = 95
   Insn 68(l0): point = 97
   Insn 67(l0): point = 99
   Insn 66(l0): point = 101
   Insn 65(l0): point = 103
   Insn 64(l0): point = 105
   Insn 63(l0): point = 107
   Insn 62(l0): point = 109
   Insn 60(l0): point = 112
   Insn 59(l0): point = 114
   Insn 57(l0): point = 116
   Insn 56(l0): point = 118
   Insn 55(l0): point = 120
   Insn 52(l0): point = 123
   Insn 117(l0): point = 126
   Insn 31(l0): point = 128
   Insn 28(l0): point = 131
   Insn 27(l0): point = 133
   Insn 25(l0): point = 136
   Insn 24(l0): point = 138
   Insn 23(l0): point = 140
   Insn 22(l0): point = 142
   Insn 21(l0): point = 144
   Insn 20(l0): point = 146
   Insn 19(l0): point = 148
   Insn 18(l0): point = 150
   Insn 17(l0): point = 152
   Insn 16(l0): point = 154
   Insn 15(l0): point = 156
   Insn 14(l0): point = 158
   Insn 13(l0): point = 160
   Insn 12(l0): point = 162
   Insn 11(l0): point = 164
   Insn 10(l0): point = 166
   Insn 9(l0): point = 168
   Insn 8(l0): point = 170
   Insn 7(l0): point = 172
   Insn 4(l0): point = 174
   Insn 2(l0): point = 176
 a0(r80): [11..12]
 a1(r79): [13..14]
 a2(r97): [19..20]
 a3(r61): [57..58]
 a4(r96): [63..68]
 a5(r95): [67..70]
 a6(r75): [76..95]
 a7(r78): [76..77]
 a8(r77): [78..79]
 a9(r76): [84..85]
 a10(r93): [86..87]
 a11(r92): [86..91]
 a12(r94): [88..89]
 a13(r74): [96..97]
 a14(r73): [98..99]
 a15(r72): [100..101]
 a16(r70): [100..107]
 a17(r71): [102..103]
 a18(r91): [104..105]
 a19(r90): [108..109]
 a20(r69): [115..116]
 a21(r88): [117..118]
 a22(r89): [119..120]
 a23(r66): [28..39]
 a24(r68): [28..29]
 a25(r67): [30..31]
 a26(r87): [36..37]
 a27(r65): [40..41]
 a28(r64): [42..43]
 a29(r62): [42..49]
 a30(r63): [44..45]
 a31(r86): [46..47]
 a32(r85): [50..51]
 a33(r84): [141..142]
 a34(r83): [155..156]
 a35(r60): [155..158]
 a36(r59): [163..166]
 a37(r82): [167..168]
 a38(r81): [171..172]
Compressing live ranges: from 179 to 64 - 35%
Ranges after the compression:
 a0(r80): [0..1]
 a1(r79): [2..3]
 a2(r97): [4..5]
 a3(r61): [22..23]
 a4(r96): [24..25]
 a5(r95): [24..25]
 a6(r75): [26..35]
 a7(r78): [26..27]
 a8(r77): [28..29]
 a9(r76): [30..31]
 a10(r93): [32..33]
 a11(r92): [32..35]
 a12(r94): [34..35]
 a13(r74): [36..37]
 a14(r73): [38..39]
 a15(r72): [40..41]
 a16(r70): [40..45]
 a17(r71): [42..43]
 a18(r91): [44..45]
 a19(r90): [46..47]
 a20(r69): [48..49]
 a21(r88): [50..51]
 a22(r89): [52..53]
 a23(r66): [6..11]
 a24(r68): [6..7]
 a25(r67): [8..9]
 a26(r87): [10..11]
 a27(r65): [12..13]
 a28(r64): [14..15]
 a29(r62): [14..19]
 a30(r63): [16..17]
 a31(r86): [18..19]
 a32(r85): [20..21]
 a33(r84): [54..55]
 a34(r83): [56..57]
 a35(r60): [56..57]
 a36(r59): [58..59]
 a37(r82): [60..61]
 a38(r81): [62..63]
  regions=1, blocks=13, points=64
    allocnos=39 (big 0), copies=0, conflicts=0, ranges=39
Disposition:
   36:r59  l0     0   35:r60  l0     0    3:r61  l0     0   29:r62  l0     0
   30:r63  l0     1   28:r64  l0     1   27:r65  l0     0   23:r66  l0     3
   25:r67  l0   mem   24:r68  l0     8   20:r69  l0     0   16:r70  l0     0
   17:r71  l0     1   15:r72  l0     1   14:r73  l0     0   13:r74  l0     0
    6:r75  l0     3    9:r76  l0     0    8:r77  l0   mem    7:r78  l0     8
    1:r79  l0     0    0:r80  l0     0   38:r81  l0     0   37:r82  l0     0
   34:r83  l0     1   33:r84  l0     0   32:r85  l0     0   31:r86  l0     1
   26:r87  l0     0   21:r88  l0     0   22:r89  l0     0   19:r90  l0     0
   18:r91  l0     1   11:r92  l0     1   10:r93  l0     0   12:r94  l0     0
    5:r95  l0     1    4:r96  l0     0    2:r97  l0     0
+++Costs: overall 28, reg -10, mem 38, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


generate_temporary_point

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={11d,5u} r1={11d,1u} r2={10d} r4={13d,3u} r5={18d,9u} r6={1d,12u} r7={1d,21u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1d,11u} r17={26d,4u} r18={9d} r19={9d} r20={1d,40u} r21={10d,2u} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} 
;;    total ref usage 631{484d,147u,0e} in 84{75 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 81 82 83 84
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])
        (reg:DI 5 di [ config ])) mSector.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config ])
        (nil)))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.4976+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:57 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 7 4 8 2 (set (reg/f:DI 81)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])) mSector.c:59 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (mem/j:SI (plus:DI (reg/f:DI 81)
                (const_int 48 [0x30])) [0 config_3(D)->n_tmp_nvp+0 S4 A128])
        (const_int 50000 [0xc350])) mSector.c:59 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 81)
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 82)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])) mSector.c:61 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:SI 59 [ D.4968 ])
        (mem/j:SI (plus:DI (reg/f:DI 82)
                (const_int 48 [0x30])) [0 config_3(D)->n_tmp_nvp+0 S4 A128])) mSector.c:61 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mSector.c:61 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (reg:SI 59 [ D.4968 ])) mSector.c:61 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.4968 ])
        (nil)))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:61 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 60 [ D.4969 ])
        (reg:DI 0 ax)) mSector.c:61 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 83)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])) mSector.c:61 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 83)
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])
        (reg/f:DI 60 [ D.4969 ])) mSector.c:61 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 83)
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.4969 ])
            (nil))))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f44d2849980 *.LC3>)) mSector.c:64 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:64 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f44d2849a18 *.LC4>)) mSector.c:67 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f44d2849ab0 *.LC5>)) mSector.c:67 87 {*movdi_internal_rex64}
     (nil))
(call_insn 21 20 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f44d2a89200 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mSector.c:67 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 22 21 23 2 (set (reg:DI 84)
        (reg:DI 0 ax)) mSector.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 23 22 24 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])
        (reg:DI 84)) mSector.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 84)
        (nil)))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mSector.c:68 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) mSector.c:68 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 26 25 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f44d2849b48 *.LC6>)) mSector.c:68 87 {*movdi_internal_rex64}
     (nil))
(call_insn 28 27 29 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:68 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 29 28 30 4 30 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 117 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 n+0 S4 A32])
        (const_int 0 [0])) mSector.c:69 89 {*movsi_internal}
     (nil))
(jump_insn 117 31 118 4 (set (pc)
        (label_ref 81)) mSector.c:69 650 {jump}
     (nil)
 -> 81)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 118 117 90)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 85 86 87
(code_label 90 118 34 5 34 "" [1 uses])
(note 34 90 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 5 (set (reg/f:DI 62 [ D.4969 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 85)
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (nil)))
(insn 37 36 38 5 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 n+0 S4 A32])) mSector.c:70 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 63 [ D.4971 ])
        (sign_extend:DI (reg:SI 86))) mSector.c:70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 86)
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 64 [ D.4971 ])
                (ashift:DI (reg:DI 63 [ D.4971 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 63 [ D.4971 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 5 (parallel [
            (set (reg/f:DI 65 [ D.4969 ])
                (plus:DI (reg/f:DI 62 [ D.4969 ])
                    (reg:DI 64 [ D.4971 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.4971 ])
        (expr_list:REG_DEAD (reg/f:DI 62 [ D.4969 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 41 40 42 5 (set (reg/f:DI 66 [ D.4972 ])
        (mem/f:DI (reg/f:DI 65 [ D.4969 ]) [0 *_12+0 S8 A64])) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.4969 ])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 87)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:70 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg:DI 87)) mSector.c:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(call_insn/i 44 43 45 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f44d2a12d00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mSector.c:70 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 5 (set (reg:DF 67 [ D.4973 ])
        (reg:DF 21 xmm0)) mSector.c:70 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 46 45 47 5 (set (reg:XF 68 [ D.4974 ])
        (float_extend:XF (reg:DF 67 [ D.4973 ]))) mSector.c:70 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.4973 ])
        (nil)))
(insn 47 46 48 5 (set (mem:XF (reg/f:DI 66 [ D.4972 ]) [0 *_13+0 S16 A128])
        (reg:XF 68 [ D.4974 ])) mSector.c:70 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.4974 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.4972 ])
            (nil))))
(insn 48 47 119 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:71 89 {*movsi_internal}
     (nil))
(jump_insn 119 48 120 5 (set (pc)
        (label_ref 53)) mSector.c:71 650 {jump}
     (nil)
 -> 53)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 58)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 58 120 51 6 33 "" [1 uses])
(note 51 58 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:71 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 88 89
(code_label 53 52 54 7 32 "" [1 uses])
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])) mSector.c:71 89 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg:DI 88)
        (sign_extend:DI (reg:SI 89))) mSector.c:71 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 57 56 59 7 (set (reg:QI 69 [ D.4975 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 88))
                (const_int -512 [0xfffffffffffffe00])) [0 c S1 A8])) mSector.c:71 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 59 57 60 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 69 [ D.4975 ])
            (const_int 9 [0x9]))) mSector.c:71 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 69 [ D.4975 ])
        (nil)))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) mSector.c:71 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 58)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 78 90 91 92 93 94
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -536 [0xfffffffffffffde8])) [0 config+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 70 [ D.4969 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 90)
                (const_int 40 [0x28])) [0 config_3(D)->tmp_nvp+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 64 63 65 8 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 n+0 S4 A32])) mSector.c:72 89 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 71 [ D.4971 ])
        (sign_extend:DI (reg:SI 91))) mSector.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 72 [ D.4971 ])
                (ashift:DI (reg:DI 71 [ D.4971 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.4971 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 73 [ D.4969 ])
                (plus:DI (reg/f:DI 70 [ D.4969 ])
                    (reg:DI 72 [ D.4971 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.4971 ])
        (expr_list:REG_DEAD (reg/f:DI 70 [ D.4969 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 68 67 69 8 (set (reg/f:DI 74 [ D.4972 ])
        (mem/f:DI (reg/f:DI 73 [ D.4969 ]) [0 *_22+0 S8 A64])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.4969 ])
        (nil)))
(insn 69 68 70 8 (parallel [
            (set (reg/f:DI 75 [ D.4972 ])
                (plus:DI (reg/f:DI 74 [ D.4972 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.4972 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 71 70 72 8 (parallel [
            (set (reg:DI 92)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 72 71 73 8 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 i+0 S4 A32])) mSector.c:72 89 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:DI 93)
        (sign_extend:DI (reg:SI 94))) mSector.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(insn 74 73 75 8 (parallel [
            (set (reg/f:DI 76 [ D.4970 ])
                (plus:DI (reg:DI 92)
                    (reg:DI 93)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93)
        (expr_list:REG_DEAD (reg:DI 92)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 75 74 76 8 (set (reg:DI 5 di)
        (reg/f:DI 76 [ D.4970 ])) mSector.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 76 [ D.4970 ])
        (nil)))
(call_insn/i 76 75 77 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f44d2a12d00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mSector.c:72 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 8 (set (reg:DF 77 [ D.4973 ])
        (reg:DF 21 xmm0)) mSector.c:72 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 78 77 79 8 (set (reg:XF 78 [ D.4974 ])
        (float_extend:XF (reg:DF 77 [ D.4973 ]))) mSector.c:72 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 77 [ D.4973 ])
        (nil)))
(insn 79 78 80 8 (set (mem:XF (reg/f:DI 75 [ D.4972 ]) [0 *_24+0 S16 A128])
        (reg:XF 78 [ D.4974 ])) mSector.c:72 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 78 [ D.4974 ])
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.4972 ])
            (nil))))
(insn 80 79 81 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -528 [0xfffffffffffffdf0])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -528 [0xfffffffffffffdf0])) [0 n+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:69 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 95 96
(code_label 81 80 82 9 31 "" [1 uses])
(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 9 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mSector.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 9 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:69 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 85 84 86 9 (set (reg:DI 1 dx)
        (reg:DI 95)) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 86 85 87 9 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mSector.c:69 89 {*movsi_internal}
     (nil))
(insn 87 86 88 9 (set (reg:DI 5 di)
        (reg:DI 96)) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(call_insn 88 87 89 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f44d2aa0300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mSector.c:69 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 89 88 91 9 (set (reg/f:DI 61 [ D.4970 ])
        (reg:DI 0 ax)) mSector.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 91 89 92 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 61 [ D.4970 ])
            (const_int 0 [0]))) mSector.c:69 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.4970 ])
        (nil)))
(jump_insn 92 91 93 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) mSector.c:69 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 90)
;;  succ:       5
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 97
(note 93 92 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 10 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mSector.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 10 (set (reg:DI 5 di)
        (reg:DI 97)) mSector.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(call_insn 96 95 97 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f44d2a83f00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mSector.c:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 97 96 100 10 (set (reg:SI 79 [ D.4968 ])
        (const_int 1 [0x1])) mSector.c:75 89 {*movsi_internal}
     (nil))
(insn 100 97 104 10 (set (reg:SI 80 [ <retval> ])
        (reg:SI 79 [ D.4968 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 79 [ D.4968 ])
        (nil)))
(insn 104 100 107 10 (set (reg/i:SI 0 ax)
        (reg:SI 80 [ <retval> ])) mSector.c:94 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 80 [ <retval> ])
        (nil)))
(insn 107 104 108 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.4976+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mSector.c:94 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 108 107 115 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) mSector.c:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 111)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 115 108 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 109 115 110 11 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f44d2852000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mSector.c:94 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 110 109 111)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 111 110 116 12 36 "" [1 uses])
(note 116 111 112 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 112 116 0 12 (use (reg/i:SI 0 ax)) mSector.c:94 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function cheak_traj_intersect_bound (cheak_traj_intersect_bound, funcdef_no=6, decl_uid=1874, cgraph_uid=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 23 count 18 (    1)
Building IRA IR
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 101.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r78,l0) best SIREG, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r72,l0) best DREG, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r86,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a8(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a10(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r84,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a14(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r72,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a19(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a24(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a26(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a30(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a37(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a38(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a39(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 122(l0): point = 0
   Insn 119(l0): point = 2
   Insn 115(l0): point = 4
   Insn 112(l0): point = 6
   Insn 127(l0): point = 9
   Insn 12(l0): point = 11
   Insn 11(l0): point = 13
   Insn 110(l0): point = 16
   Insn 109(l0): point = 18
   Insn 108(l0): point = 20
   Insn 104(l0): point = 23
   Insn 98(l0): point = 26
   Insn 97(l0): point = 28
   Insn 91(l0): point = 31
   Insn 90(l0): point = 33
   Insn 88(l0): point = 36
   Insn 87(l0): point = 38
   Insn 85(l0): point = 40
   Insn 84(l0): point = 42
   Insn 83(l0): point = 44
   Insn 82(l0): point = 46
   Insn 81(l0): point = 48
   Insn 80(l0): point = 50
   Insn 79(l0): point = 52
   Insn 78(l0): point = 54
   Insn 77(l0): point = 56
   Insn 76(l0): point = 58
   Insn 75(l0): point = 60
   Insn 72(l0): point = 63
   Insn 69(l0): point = 66
   Insn 68(l0): point = 68
   Insn 66(l0): point = 70
   Insn 65(l0): point = 72
   Insn 62(l0): point = 75
   Insn 129(l0): point = 78
   Insn 16(l0): point = 80
   Insn 131(l0): point = 83
   Insn 57(l0): point = 85
   Insn 55(l0): point = 88
   Insn 54(l0): point = 90
   Insn 53(l0): point = 92
   Insn 52(l0): point = 94
   Insn 51(l0): point = 96
   Insn 50(l0): point = 98
   Insn 49(l0): point = 100
   Insn 48(l0): point = 102
   Insn 47(l0): point = 104
   Insn 46(l0): point = 106
   Insn 45(l0): point = 108
   Insn 44(l0): point = 110
   Insn 43(l0): point = 112
   Insn 42(l0): point = 114
   Insn 41(l0): point = 116
   Insn 40(l0): point = 118
   Insn 39(l0): point = 120
   Insn 38(l0): point = 122
   Insn 37(l0): point = 124
   Insn 36(l0): point = 126
   Insn 35(l0): point = 128
   Insn 34(l0): point = 130
   Insn 33(l0): point = 132
   Insn 32(l0): point = 134
   Insn 31(l0): point = 136
   Insn 30(l0): point = 138
   Insn 29(l0): point = 140
   Insn 28(l0): point = 142
   Insn 27(l0): point = 144
   Insn 26(l0): point = 146
   Insn 25(l0): point = 148
   Insn 24(l0): point = 150
   Insn 23(l0): point = 152
   Insn 22(l0): point = 154
   Insn 21(l0): point = 156
   Insn 20(l0): point = 158
   Insn 94(l0): point = 161
   Insn 93(l0): point = 163
   Insn 101(l0): point = 166
   Insn 100(l0): point = 168
   Insn 125(l0): point = 171
   Insn 7(l0): point = 173
   Insn 3(l0): point = 175
   Insn 2(l0): point = 177
 a0(r86): [3..4]
 a1(r85): [5..6]
 a2(r98): [19..20]
 a3(r62): [39..40]
 a4(r61): [41..42]
 a5(r97): [43..44]
 a6(r60): [43..46]
 a7(r95): [51..56] [47..48]
 a8(r96): [49..50]
 a9(r59): [53..58]
 a10(r94): [59..60]
 a11(r64): [69..70]
 a12(r63): [71..72]
 a13(r84): [91..92]
 a14(r83): [97..102]
 a15(r78): [99..114]
 a16(r72): [101..128]
 a17(r82): [103..104]
 a18(r81): [105..106]
 a19(r79): [105..112]
 a20(r80): [107..108]
 a21(r93): [109..110]
 a22(r77): [115..116]
 a23(r76): [117..118]
 a24(r73): [117..126]
 a25(r75): [119..120]
 a26(r74): [121..122]
 a27(r92): [123..124]
 a28(r71): [129..130]
 a29(r70): [131..132]
 a30(r68): [131..138]
 a31(r69): [133..134]
 a32(r91): [135..136]
 a33(r67): [139..140]
 a34(r90): [141..142]
 a35(r66): [141..144]
 a36(r88): [149..154] [145..146]
 a37(r89): [147..148]
 a38(r65): [151..156]
 a39(r87): [157..158]
Compressing live ranges: from 180 to 66 - 36%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [2..3]
 a2(r98): [4..5]
 a3(r62): [6..7]
 a4(r61): [8..9]
 a5(r97): [10..11]
 a6(r60): [10..11]
 a7(r95): [16..17] [12..13]
 a8(r96): [14..15]
 a9(r59): [16..17]
 a10(r94): [18..19]
 a11(r64): [20..21]
 a12(r63): [22..23]
 a13(r84): [24..25]
 a14(r83): [26..27]
 a15(r78): [26..35]
 a16(r72): [26..45]
 a17(r82): [28..29]
 a18(r81): [30..31]
 a19(r79): [30..35]
 a20(r80): [32..33]
 a21(r93): [34..35]
 a22(r77): [36..37]
 a23(r76): [38..39]
 a24(r73): [38..45]
 a25(r75): [40..41]
 a26(r74): [42..43]
 a27(r92): [44..45]
 a28(r71): [46..47]
 a29(r70): [48..49]
 a30(r68): [48..53]
 a31(r69): [50..51]
 a32(r91): [52..53]
 a33(r67): [54..55]
 a34(r90): [56..57]
 a35(r66): [56..57]
 a36(r88): [62..63] [58..59]
 a37(r89): [60..61]
 a38(r65): [62..63]
 a39(r87): [64..65]
  regions=1, blocks=18, points=66
    allocnos=40 (big 0), copies=0, conflicts=0, ranges=42
Disposition:
    9:r59  l0     1    6:r60  l0     1    4:r61  l0     0    3:r62  l0     0
   12:r63  l0     0   11:r64  l0     0   38:r65  l0     1   35:r66  l0     1
   33:r67  l0     0   30:r68  l0     0   31:r69  l0     1   29:r70  l0     1
   28:r71  l0     0   16:r72  l0     1   24:r73  l0     0   26:r74  l0     2
   25:r75  l0     2   23:r76  l0     2   22:r77  l0     0   15:r78  l0     2
   19:r79  l0     0   20:r80  l0     4   18:r81  l0     4   17:r82  l0     0
   14:r83  l0     0   13:r84  l0     0    1:r85  l0     0    0:r86  l0     0
   39:r87  l0     0   36:r88  l0     0   37:r89  l0     0   34:r90  l0     0
   32:r91  l0     1   27:r92  l0     2   21:r93  l0     4   10:r94  l0     0
    7:r95  l0     0    8:r96  l0     0    5:r97  l0     0    2:r98  l0     0
+++Costs: overall -5, reg -5, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


cheak_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={5d,3u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,17u} r7={1d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,19u} r17={29d,6u} r18={3d} r19={3d} r20={1d,44u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={1d,2u,1e} r60={1d,1u,1e} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,2u,1e} r66={1d,1u,1e} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={4d,4u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={4d,4u} r96={1d,1u} r97={1d,1u} r98={1d,1u} 
;;    total ref usage 399{229d,164u,6e} in 82{79 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mSector.c:96 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 125 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:98 89 {*movsi_internal}
     (nil))
(jump_insn 125 7 126 2 (set (pc)
        (label_ref 105)) mSector.c:98 650 {jump}
     (nil)
 -> 105)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 126 125 107)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 107 126 10 3 47 "" [1 uses])
(note 10 107 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:99 89 {*movsi_internal}
     (nil))
(insn 12 11 127 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
        (const_int 0 [0])) mSector.c:99 89 {*movsi_internal}
     (nil))
(jump_insn 127 12 128 3 (set (pc)
        (label_ref 73)) mSector.c:99 650 {jump}
     (nil)
 -> 73)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 128 127 86)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 86 128 15 4 44 "" [1 uses])
(note 15 86 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 129 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (const_int 0 [0])) mSector.c:100 89 {*movsi_internal}
     (nil))
(jump_insn 129 16 130 4 (set (pc)
        (label_ref 63)) mSector.c:100 650 {jump}
     (nil)
 -> 63)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 67)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 87 88 89 90 91 92 93
(code_label 67 130 19 5 43 "" [1 uses])
(note 19 67 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:DI 65 [ D.4983 ])
        (sign_extend:DI (reg:SI 87))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87)
        (nil)))
(insn 22 21 23 5 (set (reg:DI 88)
        (reg:DI 65 [ D.4983 ])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg:DI 88)
                (ashift:DI (reg:DI 88)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 24 23 25 5 (parallel [
            (set (reg:DI 88)
                (plus:DI (reg:DI 88)
                    (reg:DI 65 [ D.4983 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.4983 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 65 [ D.4983 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 25 24 26 5 (parallel [
            (set (reg:DI 89)
                (ashift:DI (reg:DI 88)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 5 (set (reg:DI 88)
        (reg:DI 89)) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 27 26 28 5 (set (reg:DI 66 [ D.4983 ])
        (reg:DI 88)) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 28 27 29 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:DI 67 [ D.4984 ])
                (plus:DI (reg:DI 66 [ D.4983 ])
                    (reg/f:DI 90)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_DEAD (reg:DI 66 [ D.4983 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                        (reg:DI 66 [ D.4983 ]))
                    (nil))))))
(insn 30 29 31 5 (set (reg/f:DI 68 [ D.4986 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 67 [ D.4984 ])
                (const_int 8 [0x8])) [0 _20->nvp+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.4984 ])
        (nil)))
(insn 31 30 32 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:DI 69 [ D.4983 ])
        (sign_extend:DI (reg:SI 91))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 33 32 34 5 (parallel [
            (set (reg:DI 70 [ D.4983 ])
                (ashift:DI (reg:DI 69 [ D.4983 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.4983 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 71 [ D.4986 ])
                (plus:DI (reg/f:DI 68 [ D.4986 ])
                    (reg:DI 70 [ D.4983 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.4983 ])
        (expr_list:REG_DEAD (reg/f:DI 68 [ D.4986 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 35 34 36 5 (set (reg/f:DI 72 [ D.4987 ])
        (mem/f:DI (reg/f:DI 71 [ D.4986 ]) [0 *_24+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.4986 ])
        (nil)))
(insn 36 35 37 5 (set (reg/f:DI 73 [ D.4986 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 config.bound+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 5 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 74 [ D.4988 ])
        (sign_extend:DI (reg:SI 92))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 75 [ D.4988 ])
                (plus:DI (reg:DI 74 [ D.4988 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 74 [ D.4988 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 76 [ D.4988 ])
                (ashift:DI (reg:DI 75 [ D.4988 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 75 [ D.4988 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 5 (parallel [
            (set (reg/f:DI 77 [ D.4986 ])
                (plus:DI (reg/f:DI 73 [ D.4986 ])
                    (reg:DI 76 [ D.4988 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.4988 ])
        (expr_list:REG_DEAD (reg/f:DI 73 [ D.4986 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 42 41 43 5 (set (reg/f:DI 78 [ D.4987 ])
        (mem/f:DI (reg/f:DI 77 [ D.4986 ]) [0 *_30+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 77 [ D.4986 ])
        (nil)))
(insn 43 42 44 5 (set (reg/f:DI 79 [ D.4986 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 config.bound+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 5 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:101 89 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 80 [ D.4983 ])
        (sign_extend:DI (reg:SI 93))) mSector.c:101 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 81 [ D.4983 ])
                (ashift:DI (reg:DI 80 [ D.4983 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 80 [ D.4983 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 82 [ D.4986 ])
                (plus:DI (reg/f:DI 79 [ D.4986 ])
                    (reg:DI 81 [ D.4983 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:101 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.4983 ])
        (expr_list:REG_DEAD (reg/f:DI 79 [ D.4986 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 48 47 49 5 (set (reg/f:DI 83 [ D.4987 ])
        (mem/f:DI (reg/f:DI 82 [ D.4986 ]) [0 *_35+0 S8 A64])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 82 [ D.4986 ])
        (nil)))
(insn 49 48 50 5 (set (reg:DI 1 dx)
        (reg/f:DI 72 [ D.4987 ])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 72 [ D.4987 ])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 4 si)
        (reg/f:DI 78 [ D.4987 ])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 78 [ D.4987 ])
        (nil)))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg/f:DI 83 [ D.4987 ])) mSector.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 83 [ D.4987 ])
        (nil)))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:101 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 53 52 54 5 (set (reg:SI 84 [ D.4985 ])
        (reg:SI 0 ax)) mSector.c:101 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 54 53 55 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ D.4985 ])
            (const_int 0 [0]))) mSector.c:101 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 84 [ D.4985 ])
        (nil)))
(jump_insn 55 54 56 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) mSector.c:101 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 60)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 131 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:102 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 131 57 132 6 (set (pc)
        (label_ref 70)) mSector.c:103 650 {jump}
     (nil)
 -> 70)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 132 131 60)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 60 132 61 7 41 "" [1 uses])
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:100 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64
(code_label 63 62 64 8 40 "" [1 uses])
(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 8 (set (reg:SI 63 [ D.4985 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 config.Nbound+0 S4 A128])) mSector.c:100 89 {*movsi_internal}
     (nil))
(insn 66 65 68 8 (parallel [
            (set (reg:SI 64 [ D.4985 ])
                (plus:SI (reg:SI 63 [ D.4985 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:100 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.4985 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 68 66 69 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 64 [ D.4985 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32]))) mSector.c:100 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 64 [ D.4985 ])
        (nil)))
(jump_insn 69 68 70 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 67)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 70 69 71 9 42 "" [1 uses])
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 94 95 96 97
(code_label 73 72 74 10 39 "" [1 uses])
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 10 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:99 89 {*movsi_internal}
     (nil))
(insn 76 75 77 10 (set (reg:DI 59 [ D.4983 ])
        (sign_extend:DI (reg:SI 94))) mSector.c:99 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(insn 77 76 78 10 (set (reg:DI 95)
        (reg:DI 59 [ D.4983 ])) mSector.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 10 (parallel [
            (set (reg:DI 95)
                (ashift:DI (reg:DI 95)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 79 78 80 10 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg:DI 95)
                    (reg:DI 59 [ D.4983 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 59 [ D.4983 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 59 [ D.4983 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 80 79 81 10 (parallel [
            (set (reg:DI 96)
                (ashift:DI (reg:DI 95)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 95)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 81 80 82 10 (set (reg:DI 95)
        (reg:DI 96)) mSector.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 82 81 83 10 (set (reg:DI 60 [ D.4983 ])
        (reg:DI 95)) mSector.c:99 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 83 82 84 10 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 10 (parallel [
            (set (reg/f:DI 61 [ D.4984 ])
                (plus:DI (reg:DI 60 [ D.4983 ])
                    (reg/f:DI 97)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:99 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_DEAD (reg:DI 60 [ D.4983 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
                        (reg:DI 60 [ D.4983 ]))
                    (nil))))))
(insn 85 84 87 10 (set (reg:SI 62 [ D.4985 ])
        (mem/j:SI (plus:DI (reg/f:DI 61 [ D.4984 ])
                (const_int 4 [0x4])) [0 _13->n_nvp+0 S4 A32])) mSector.c:99 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.4984 ])
        (nil)))
(insn 87 85 88 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 62 [ D.4985 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32]))) mSector.c:99 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 62 [ D.4985 ])
        (nil)))
(jump_insn 88 87 89 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) mSector.c:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 86)
;;  succ:       4
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 89 88 90 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:105 7 {*cmpsi_1}
     (nil))
(jump_insn 91 90 92 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) mSector.c:105 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 95)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f44d2858ab0 *.LC7>)) mSector.c:105 87 {*movdi_internal_rex64}
     (nil))
(call_insn 94 93 95 12 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:105 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 95 94 96 13 45 "" [1 uses])
(note 96 95 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 n_inter+0 S4 A32])
            (const_int 2 [0x2]))) mSector.c:107 7 {*cmpsi_1}
     (nil))
(jump_insn 98 97 99 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) mSector.c:107 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 102)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f44d2858b48 *.LC8>)) mSector.c:107 87 {*movdi_internal_rex64}
     (nil))
(call_insn 101 100 102 14 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:107 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 102 101 103 15 46 "" [1 uses])
(note 103 102 104 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:98 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98
(code_label 105 104 106 16 38 "" [1 uses])
(note 106 105 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 108 106 109 16 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:98 89 {*movsi_internal}
     (nil))
(insn 109 108 110 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 98)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 Nflight+0 S4 A32]))) mSector.c:98 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(jump_insn 110 109 111 16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) mSector.c:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 107)
;;  succ:       3
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 85 86
(note 111 110 112 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 115 17 (set (reg:SI 85 [ D.4985 ])
        (const_int 1 [0x1])) mSector.c:109 89 {*movsi_internal}
     (nil))
(insn 115 112 119 17 (set (reg:SI 86 [ <retval> ])
        (reg:SI 85 [ D.4985 ])) mSector.c:109 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ D.4985 ])
        (nil)))
(insn 119 115 122 17 (set (reg/i:SI 0 ax)
        (reg:SI 86 [ <retval> ])) mSector.c:110 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ <retval> ])
        (nil)))
(insn 122 119 0 17 (use (reg/i:SI 0 ax)) mSector.c:110 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function init_traj_intersect_bound (init_traj_intersect_bound, funcdef_no=7, decl_uid=1878, cgraph_uid=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 19 count 15 (    1)
Building IRA IR
verify found no changes in insn with uid = 53.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r93,l0) best AREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r80,l0) best SIREG, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r74,l0) best DREG, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r93,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a8(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a10(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a12(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a17(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a19(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a23(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a24(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a25(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a27(r86,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r74,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a33(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a38(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a40(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a44(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a51(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a52(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a53(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 131(l0): point = 0
   Insn 128(l0): point = 2
   Insn 124(l0): point = 4
   Insn 121(l0): point = 6
   Insn 136(l0): point = 9
   Insn 12(l0): point = 11
   Insn 11(l0): point = 13
   Insn 119(l0): point = 16
   Insn 118(l0): point = 18
   Insn 117(l0): point = 20
   Insn 113(l0): point = 23
   Insn 106(l0): point = 26
   Insn 105(l0): point = 28
   Insn 104(l0): point = 30
   Insn 103(l0): point = 32
   Insn 102(l0): point = 34
   Insn 101(l0): point = 36
   Insn 100(l0): point = 38
   Insn 99(l0): point = 40
   Insn 98(l0): point = 42
   Insn 97(l0): point = 44
   Insn 96(l0): point = 46
   Insn 95(l0): point = 48
   Insn 94(l0): point = 50
   Insn 93(l0): point = 52
   Insn 90(l0): point = 55
   Insn 87(l0): point = 58
   Insn 86(l0): point = 60
   Insn 84(l0): point = 62
   Insn 83(l0): point = 64
   Insn 80(l0): point = 67
   Insn 138(l0): point = 70
   Insn 16(l0): point = 72
   Insn 140(l0): point = 75
   Insn 75(l0): point = 77
   Insn 74(l0): point = 79
   Insn 73(l0): point = 81
   Insn 72(l0): point = 83
   Insn 71(l0): point = 85
   Insn 70(l0): point = 87
   Insn 69(l0): point = 89
   Insn 68(l0): point = 91
   Insn 67(l0): point = 93
   Insn 66(l0): point = 95
   Insn 65(l0): point = 97
   Insn 64(l0): point = 99
   Insn 63(l0): point = 101
   Insn 62(l0): point = 103
   Insn 61(l0): point = 105
   Insn 60(l0): point = 107
   Insn 59(l0): point = 109
   Insn 58(l0): point = 111
   Insn 56(l0): point = 114
   Insn 55(l0): point = 116
   Insn 54(l0): point = 118
   Insn 53(l0): point = 120
   Insn 52(l0): point = 122
   Insn 51(l0): point = 124
   Insn 50(l0): point = 126
   Insn 49(l0): point = 128
   Insn 48(l0): point = 130
   Insn 47(l0): point = 132
   Insn 46(l0): point = 134
   Insn 45(l0): point = 136
   Insn 44(l0): point = 138
   Insn 43(l0): point = 140
   Insn 42(l0): point = 142
   Insn 41(l0): point = 144
   Insn 40(l0): point = 146
   Insn 39(l0): point = 148
   Insn 38(l0): point = 150
   Insn 37(l0): point = 152
   Insn 36(l0): point = 154
   Insn 35(l0): point = 156
   Insn 34(l0): point = 158
   Insn 33(l0): point = 160
   Insn 32(l0): point = 162
   Insn 31(l0): point = 164
   Insn 30(l0): point = 166
   Insn 29(l0): point = 168
   Insn 28(l0): point = 170
   Insn 27(l0): point = 172
   Insn 26(l0): point = 174
   Insn 25(l0): point = 176
   Insn 24(l0): point = 178
   Insn 23(l0): point = 180
   Insn 22(l0): point = 182
   Insn 21(l0): point = 184
   Insn 20(l0): point = 186
   Insn 110(l0): point = 189
   Insn 109(l0): point = 191
   Insn 134(l0): point = 194
   Insn 7(l0): point = 196
   Insn 3(l0): point = 198
   Insn 2(l0): point = 200
 a0(r93): [3..4]
 a1(r92): [5..6]
 a2(r113): [19..20]
 a3(r63): [29..30]
 a4(r62): [31..32]
 a5(r61): [33..34]
 a6(r59): [33..50]
 a7(r111): [39..44] [35..36]
 a8(r112): [37..38]
 a9(r60): [41..46]
 a10(r110): [47..48]
 a11(r109): [51..52]
 a12(r65): [61..62]
 a13(r64): [63..64]
 a14(r90): [78..91]
 a15(r107): [78..81]
 a16(r108): [78..79]
 a17(r106): [82..83]
 a18(r91): [84..89]
 a19(r105): [86..87]
 a20(r89): [92..93]
 a21(r87): [92..109]
 a22(r103): [98..103] [94..95]
 a23(r104): [96..97]
 a24(r88): [100..105]
 a25(r102): [106..107]
 a26(r101): [110..111]
 a27(r86): [117..118]
 a28(r85): [123..128]
 a29(r80): [125..140]
 a30(r74): [127..154]
 a31(r84): [129..130]
 a32(r83): [131..132]
 a33(r81): [131..138]
 a34(r82): [133..134]
 a35(r100): [135..136]
 a36(r79): [141..142]
 a37(r78): [143..144]
 a38(r75): [143..152]
 a39(r77): [145..146]
 a40(r76): [147..148]
 a41(r99): [149..150]
 a42(r73): [155..156]
 a43(r72): [157..158]
 a44(r70): [157..164]
 a45(r71): [159..160]
 a46(r98): [161..162]
 a47(r69): [165..166]
 a48(r68): [167..168]
 a49(r66): [167..184]
 a50(r96): [173..178] [169..170]
 a51(r97): [171..172]
 a52(r67): [175..180]
 a53(r95): [181..182]
 a54(r94): [185..186]
Compressing live ranges: from 203 to 88 - 43%
Ranges after the compression:
 a0(r93): [0..1]
 a1(r92): [2..3]
 a2(r113): [4..5]
 a3(r63): [6..7]
 a4(r62): [8..9]
 a5(r61): [10..11]
 a6(r59): [10..19]
 a7(r111): [16..17] [12..13]
 a8(r112): [14..15]
 a9(r60): [16..17]
 a10(r110): [18..19]
 a11(r109): [20..21]
 a12(r65): [22..23]
 a13(r64): [24..25]
 a14(r90): [26..31]
 a15(r107): [26..27]
 a16(r108): [26..27]
 a17(r106): [28..29]
 a18(r91): [30..31]
 a19(r105): [30..31]
 a20(r89): [32..33]
 a21(r87): [32..41]
 a22(r103): [38..39] [34..35]
 a23(r104): [36..37]
 a24(r88): [38..39]
 a25(r102): [40..41]
 a26(r101): [42..43]
 a27(r86): [44..45]
 a28(r85): [46..47]
 a29(r80): [46..55]
 a30(r74): [46..65]
 a31(r84): [48..49]
 a32(r83): [50..51]
 a33(r81): [50..55]
 a34(r82): [52..53]
 a35(r100): [54..55]
 a36(r79): [56..57]
 a37(r78): [58..59]
 a38(r75): [58..65]
 a39(r77): [60..61]
 a40(r76): [62..63]
 a41(r99): [64..65]
 a42(r73): [66..67]
 a43(r72): [68..69]
 a44(r70): [68..73]
 a45(r71): [70..71]
 a46(r98): [72..73]
 a47(r69): [74..75]
 a48(r68): [76..77]
 a49(r66): [76..85]
 a50(r96): [82..83] [78..79]
 a51(r97): [80..81]
 a52(r67): [82..83]
 a53(r95): [84..85]
 a54(r94): [86..87]
  regions=1, blocks=15, points=88
    allocnos=55 (big 0), copies=0, conflicts=0, ranges=58
Disposition:
    6:r59  l0     2    9:r60  l0     1    5:r61  l0     0    4:r62  l0     0
    3:r63  l0     0   13:r64  l0     0   12:r65  l0     0   49:r66  l0     2
   52:r67  l0     1   48:r68  l0     0   47:r69  l0     0   44:r70  l0     0
   45:r71  l0     1   43:r72  l0     1   42:r73  l0     0   30:r74  l0     1
   38:r75  l0     0   40:r76  l0     2   39:r77  l0     2   37:r78  l0     2
   36:r79  l0     0   29:r80  l0     2   33:r81  l0     0   34:r82  l0     4
   32:r83  l0     4   31:r84  l0     0   28:r85  l0     0   27:r86  l0     0
   21:r87  l0     2   24:r88  l0     1   20:r89  l0     0   14:r90  l0     2
   18:r91  l0     0    1:r92  l0     0    0:r93  l0     0   54:r94  l0     0
   53:r95  l0     0   50:r96  l0     0   51:r97  l0     0   46:r98  l0     1
   41:r99  l0     2   35:r100 l0     4   26:r101 l0     0   25:r102 l0     0
   22:r103 l0     0   23:r104 l0     0   19:r105 l0     1   17:r106 l0     0
   15:r107 l0     1   16:r108 l0     0   11:r109 l0     0   10:r110 l0     0
    7:r111 l0     0    8:r112 l0     0    2:r113 l0     0
+++Costs: overall -5, reg -5, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


init_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,14u} r7={1d,15u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,16u} r17={31d,5u} r18={1d} r19={1d} r20={1d,43u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,2u,1e} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,2u,1e} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,2u,1e} r89={1d,1u} r90={1d,1u} r91={1d,2u,1e} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={4d,4u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={4d,4u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={4d,4u} r112={1d,1u} r113={1d,1u} 
;;    total ref usage 334{161d,169u,4e} in 95{94 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 Nfligth+0 S4 A32])
        (reg:SI 4 si [ Nfligth ])) mSector.c:112 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nfligth ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 134 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:115 89 {*movsi_internal}
     (nil))
(jump_insn 134 7 135 2 (set (pc)
        (label_ref 114)) mSector.c:115 650 {jump}
     (nil)
 -> 114)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 135 134 116)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 116 135 10 3 58 "" [1 uses])
(note 10 116 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:116 89 {*movsi_internal}
     (nil))
(insn 12 11 136 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
        (const_int 0 [0])) mSector.c:116 89 {*movsi_internal}
     (nil))
(jump_insn 136 12 137 3 (set (pc)
        (label_ref 91)) mSector.c:116 650 {jump}
     (nil)
 -> 91)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 108)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 108 137 15 4 57 "" [1 uses])
(note 15 108 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 138 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (const_int 0 [0])) mSector.c:117 89 {*movsi_internal}
     (nil))
(jump_insn 138 16 139 4 (set (pc)
        (label_ref 81)) mSector.c:117 650 {jump}
     (nil)
 -> 81)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 139 138 85)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 94 95 96 97 98 99 100
(code_label 85 139 19 5 55 "" [1 uses])
(note 19 85 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 5 (set (reg/f:DI 66 [ D.4991 ])
        (mem/f:DI (reg/f:DI 94) [0 *flight_10(D)+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 22 21 23 5 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 67 [ D.4992 ])
        (sign_extend:DI (reg:SI 95))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 24 23 25 5 (set (reg:DI 96)
        (reg:DI 67 [ D.4992 ])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:DI 96)
                (ashift:DI (reg:DI 96)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg:DI 96)
                    (reg:DI 67 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 67 [ D.4992 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 67 [ D.4992 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 27 26 28 5 (parallel [
            (set (reg:DI 97)
                (ashift:DI (reg:DI 96)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 28 27 29 5 (set (reg:DI 96)
        (reg:DI 97)) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(insn 29 28 30 5 (set (reg:DI 68 [ D.4992 ])
        (reg:DI 96)) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 30 29 31 5 (parallel [
            (set (reg/f:DI 69 [ D.4991 ])
                (plus:DI (reg/f:DI 66 [ D.4991 ])
                    (reg:DI 68 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 68 [ D.4992 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.4991 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 31 30 32 5 (set (reg/f:DI 70 [ D.4994 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 69 [ D.4991 ])
                (const_int 8 [0x8])) [0 _22->nvp+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 69 [ D.4991 ])
        (nil)))
(insn 32 31 33 5 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 71 [ D.4992 ])
        (sign_extend:DI (reg:SI 98))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 34 33 35 5 (parallel [
            (set (reg:DI 72 [ D.4992 ])
                (ashift:DI (reg:DI 71 [ D.4992 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.4992 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 35 34 36 5 (parallel [
            (set (reg/f:DI 73 [ D.4994 ])
                (plus:DI (reg/f:DI 70 [ D.4994 ])
                    (reg:DI 72 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.4992 ])
        (expr_list:REG_DEAD (reg/f:DI 70 [ D.4994 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 36 35 37 5 (set (reg/f:DI 74 [ D.4995 ])
        (mem/f:DI (reg/f:DI 73 [ D.4994 ]) [0 *_26+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.4994 ])
        (nil)))
(insn 37 36 38 5 (set (reg/f:DI 75 [ D.4994 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 config.bound+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 5 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 76 [ D.4996 ])
        (sign_extend:DI (reg:SI 99))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 77 [ D.4996 ])
                (plus:DI (reg:DI 76 [ D.4996 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.4996 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 5 (parallel [
            (set (reg:DI 78 [ D.4996 ])
                (ashift:DI (reg:DI 77 [ D.4996 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.4996 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 79 [ D.4994 ])
                (plus:DI (reg/f:DI 75 [ D.4994 ])
                    (reg:DI 78 [ D.4996 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 78 [ D.4996 ])
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.4994 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 43 42 44 5 (set (reg/f:DI 80 [ D.4995 ])
        (mem/f:DI (reg/f:DI 79 [ D.4994 ]) [0 *_32+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.4994 ])
        (nil)))
(insn 44 43 45 5 (set (reg/f:DI 81 [ D.4994 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 config.bound+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 5 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:118 89 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 82 [ D.4992 ])
        (sign_extend:DI (reg:SI 100))) mSector.c:118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 47 46 48 5 (parallel [
            (set (reg:DI 83 [ D.4992 ])
                (ashift:DI (reg:DI 82 [ D.4992 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 82 [ D.4992 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 5 (parallel [
            (set (reg/f:DI 84 [ D.4994 ])
                (plus:DI (reg/f:DI 81 [ D.4994 ])
                    (reg:DI 83 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:118 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ D.4992 ])
        (expr_list:REG_DEAD (reg/f:DI 81 [ D.4994 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 49 48 50 5 (set (reg/f:DI 85 [ D.4995 ])
        (mem/f:DI (reg/f:DI 84 [ D.4994 ]) [0 *_37+0 S8 A64])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 84 [ D.4994 ])
        (nil)))
(insn 50 49 51 5 (set (reg:DI 1 dx)
        (reg/f:DI 74 [ D.4995 ])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.4995 ])
        (nil)))
(insn 51 50 52 5 (set (reg:DI 4 si)
        (reg/f:DI 80 [ D.4995 ])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 80 [ D.4995 ])
        (nil)))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (reg/f:DI 85 [ D.4995 ])) mSector.c:118 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85 [ D.4995 ])
        (nil)))
(call_insn 53 52 54 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:118 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 54 53 55 5 (set (reg:SI 86 [ D.4993 ])
        (reg:SI 0 ax)) mSector.c:118 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 55 54 56 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ D.4993 ])
            (const_int 0 [0]))) mSector.c:118 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 86 [ D.4993 ])
        (nil)))
(jump_insn 56 55 57 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) mSector.c:118 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 101 102 103 104 105 106 107 108
(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:119 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 6 (set (reg/f:DI 87 [ D.4991 ])
        (mem/f:DI (reg/f:DI 101) [0 *flight_10(D)+0 S8 A64])) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (nil)))
(insn 60 59 61 6 (set (reg:SI 102)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 61 60 62 6 (set (reg:DI 88 [ D.4992 ])
        (sign_extend:DI (reg:SI 102))) mSector.c:119 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(insn 62 61 63 6 (set (reg:DI 103)
        (reg:DI 88 [ D.4992 ])) mSector.c:119 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 6 (parallel [
            (set (reg:DI 103)
                (ashift:DI (reg:DI 103)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 103)
                (plus:DI (reg:DI 103)
                    (reg:DI 88 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.4992 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 88 [ D.4992 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 65 64 66 6 (parallel [
            (set (reg:DI 104)
                (ashift:DI (reg:DI 103)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 103)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 66 65 67 6 (set (reg:DI 103)
        (reg:DI 104)) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(insn 67 66 68 6 (set (reg:DI 89 [ D.4992 ])
        (reg:DI 103)) mSector.c:119 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(insn 68 67 69 6 (parallel [
            (set (reg/f:DI 90 [ D.4991 ])
                (plus:DI (reg/f:DI 87 [ D.4991 ])
                    (reg:DI 89 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.4992 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ D.4991 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 69 68 70 6 (set (reg:SI 91 [ c.0 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 70 69 71 6 (parallel [
            (set (reg:SI 105)
                (plus:SI (reg:SI 91 [ c.0 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 71 70 72 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
        (reg:SI 105)) mSector.c:119 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 91 [ c.0 ])
                (const_int 1 [0x1]))
            (nil))))
(insn 72 71 73 6 (set (reg:DI 106)
        (sign_extend:DI (reg:SI 91 [ c.0 ]))) mSector.c:119 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 91 [ c.0 ])
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 107)
                (plus:DI (reg:DI 106)
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:119 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 74 73 75 6 (set (reg:SI 108)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) mSector.c:119 89 {*movsi_internal}
     (nil))
(insn 75 74 140 6 (set (mem/j:SI (plus:DI (mult:DI (reg:DI 107)
                    (const_int 4 [0x4]))
                (reg/f:DI 90 [ D.4991 ])) [0 _43->bound S4 A32])
        (reg:SI 108)) mSector.c:119 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108)
        (expr_list:REG_DEAD (reg:DI 107)
            (expr_list:REG_DEAD (reg/f:DI 90 [ D.4991 ])
                (nil)))))
(jump_insn 140 75 141 6 (set (pc)
        (label_ref 88)) mSector.c:120 650 {jump}
     (nil)
 -> 88)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 141 140 78)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 78 141 79 7 53 "" [1 uses])
(note 79 78 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:117 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65
(code_label 81 80 82 8 52 "" [1 uses])
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 8 (set (reg:SI 64 [ D.4993 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 config.Nbound+0 S4 A128])) mSector.c:117 89 {*movsi_internal}
     (nil))
(insn 84 83 86 8 (parallel [
            (set (reg:SI 65 [ D.4993 ])
                (plus:SI (reg:SI 64 [ D.4993 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:117 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 64 [ D.4993 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 84 87 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 65 [ D.4993 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32]))) mSector.c:117 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 65 [ D.4993 ])
        (nil)))
(jump_insn 87 86 88 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) mSector.c:117 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 85)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 88 87 89 9 54 "" [1 uses])
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 109 110 111 112
(code_label 91 90 92 10 51 "" [1 uses])
(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 10 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 94 93 95 10 (set (reg/f:DI 59 [ D.4991 ])
        (mem/f:DI (reg/f:DI 109) [0 *flight_10(D)+0 S8 A64])) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 109)
        (nil)))
(insn 95 94 96 10 (set (reg:SI 110)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:116 89 {*movsi_internal}
     (nil))
(insn 96 95 97 10 (set (reg:DI 60 [ D.4992 ])
        (sign_extend:DI (reg:SI 110))) mSector.c:116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 110)
        (nil)))
(insn 97 96 98 10 (set (reg:DI 111)
        (reg:DI 60 [ D.4992 ])) mSector.c:116 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 10 (parallel [
            (set (reg:DI 111)
                (ashift:DI (reg:DI 111)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg:DI 111)
                    (reg:DI 60 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 60 [ D.4992 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 60 [ D.4992 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 100 99 101 10 (parallel [
            (set (reg:DI 112)
                (ashift:DI (reg:DI 111)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 101 100 102 10 (set (reg:DI 111)
        (reg:DI 112)) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(insn 102 101 103 10 (set (reg:DI 61 [ D.4992 ])
        (reg:DI 111)) mSector.c:116 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 111)
        (nil)))
(insn 103 102 104 10 (parallel [
            (set (reg/f:DI 62 [ D.4991 ])
                (plus:DI (reg/f:DI 59 [ D.4991 ])
                    (reg:DI 61 [ D.4992 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:116 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.4992 ])
        (expr_list:REG_DEAD (reg/f:DI 59 [ D.4991 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 104 103 105 10 (set (reg:SI 63 [ D.4993 ])
        (mem/j:SI (plus:DI (reg/f:DI 62 [ D.4991 ])
                (const_int 4 [0x4])) [0 _14->n_nvp+0 S4 A32])) mSector.c:116 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 62 [ D.4991 ])
        (nil)))
(insn 105 104 106 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 63 [ D.4993 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32]))) mSector.c:116 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.4993 ])
        (nil)))
(jump_insn 106 105 107 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) mSector.c:116 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 111)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 107 106 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 109 107 110 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 c+0 S4 A32])
            (const_int 1 [0x1]))) mSector.c:116 7 {*cmpsi_1}
     (nil))
(jump_insn 110 109 111 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) mSector.c:116 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 108)
;;  succ:       4
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 111 110 112 12 56 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:115 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113
(code_label 114 113 115 13 50 "" [1 uses])
(note 115 114 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 115 118 13 (set (reg:SI 113)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:115 89 {*movsi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 113)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 Nfligth+0 S4 A32]))) mSector.c:115 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 113)
        (nil)))
(jump_insn 119 118 120 13 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) mSector.c:115 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 116)
;;  succ:       3
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(note 120 119 121 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 124 14 (set (reg:SI 92 [ D.4993 ])
        (const_int 1 [0x1])) mSector.c:122 89 {*movsi_internal}
     (nil))
(insn 124 121 128 14 (set (reg:SI 93 [ <retval> ])
        (reg:SI 92 [ D.4993 ])) mSector.c:122 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.4993 ])
        (nil)))
(insn 128 124 131 14 (set (reg/i:SI 0 ax)
        (reg:SI 93 [ <retval> ])) mSector.c:123 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ <retval> ])
        (nil)))
(insn 131 128 0 14 (use (reg/i:SI 0 ax)) mSector.c:123 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function remove_aircraft (remove_aircraft, funcdef_no=8, decl_uid=1904, cgraph_uid=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
Building IRA IR
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r92,l0) best CREG, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r80,l0) best AREG, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r76,l0) best AREG, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r72,l0) best DIREG, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r62,l0) best DIREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r76,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a6(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a7(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a8(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a10(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a11(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a12(r92,l0) costs: AREG:4 DREG:4 CREG:0 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a13(r90,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:0 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a14(r91,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:0 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a15(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a16(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a20(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a21(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a22(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a24(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a27(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a28(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a29(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a30(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a32(r80,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a33(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a35(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a36(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a37(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a38(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 98(l0): point = 0
   Insn 95(l0): point = 2
   Insn 91(l0): point = 4
   Insn 88(l0): point = 6
   Insn 87(l0): point = 8
   Insn 86(l0): point = 10
   Insn 85(l0): point = 12
   Insn 84(l0): point = 14
   Insn 83(l0): point = 16
   Insn 82(l0): point = 18
   Insn 81(l0): point = 20
   Insn 80(l0): point = 22
   Insn 79(l0): point = 24
   Insn 78(l0): point = 26
   Insn 77(l0): point = 28
   Insn 76(l0): point = 30
   Insn 36(l0): point = 33
   Insn 35(l0): point = 35
   Insn 34(l0): point = 37
   Insn 74(l0): point = 40
   Insn 73(l0): point = 42
   Insn 71(l0): point = 44
   Insn 70(l0): point = 46
   Insn 67(l0): point = 49
   Insn 64(l0): point = 52
   Insn 63(l0): point = 54
   Insn 62(l0): point = 56
   Insn 61(l0): point = 58
   Insn 60(l0): point = 60
   Insn 59(l0): point = 62
   Insn 58(l0): point = 64
   Insn 57(l0): point = 66
   Insn 56(l0): point = 68
   Insn 55(l0): point = 70
   Insn 54(l0): point = 72
   Insn 53(l0): point = 74
   Insn 52(l0): point = 76
   Insn 51(l0): point = 78
   Insn 50(l0): point = 80
   Insn 49(l0): point = 82
   Insn 48(l0): point = 84
   Insn 47(l0): point = 86
   Insn 46(l0): point = 88
   Insn 45(l0): point = 90
   Insn 44(l0): point = 92
   Insn 43(l0): point = 94
   Insn 42(l0): point = 96
   Insn 41(l0): point = 98
   Insn 40(l0): point = 100
   Insn 39(l0): point = 102
   Insn 38(l0): point = 104
   Insn 101(l0): point = 107
   Insn 30(l0): point = 109
   Insn 29(l0): point = 111
   Insn 26(l0): point = 114
   Insn 25(l0): point = 116
   Insn 23(l0): point = 119
   Insn 22(l0): point = 121
   Insn 21(l0): point = 123
   Insn 20(l0): point = 125
   Insn 19(l0): point = 127
   Insn 18(l0): point = 129
   Insn 17(l0): point = 131
   Insn 16(l0): point = 133
   Insn 15(l0): point = 135
   Insn 14(l0): point = 137
   Insn 13(l0): point = 139
   Insn 12(l0): point = 141
   Insn 11(l0): point = 143
   Insn 10(l0): point = 145
   Insn 9(l0): point = 147
   Insn 8(l0): point = 149
   Insn 4(l0): point = 151
   Insn 3(l0): point = 153
   Insn 2(l0): point = 155
 a0(r76): [3..4]
 a1(r75): [5..6]
 a2(r98): [9..10]
 a3(r74): [9..12]
 a4(r73): [13..14]
 a5(r97): [15..16]
 a6(r95): [19..22]
 a7(r96): [19..20]
 a8(r72): [27..28]
 a9(r94): [29..30]
 a10(r63): [43..44]
 a11(r93): [45..46]
 a12(r92): [52..54]
 a13(r90): [52..58]
 a14(r91): [52..56]
 a15(r71): [57..60]
 a16(r67): [59..82]
 a17(r70): [61..62]
 a18(r68): [61..78]
 a19(r88): [67..72] [63..64]
 a20(r89): [65..66]
 a21(r69): [69..74]
 a22(r87): [75..76]
 a23(r86): [79..80]
 a24(r85): [83..84]
 a25(r66): [83..86]
 a26(r83): [91..96] [87..88]
 a27(r84): [89..90]
 a28(r65): [93..98]
 a29(r64): [99..104]
 a30(r82): [101..102]
 a31(r81): [36..37]
 a32(r80): [124..125]
 a33(r62): [130..131]
 a34(r78): [136..141] [132..133]
 a35(r79): [134..135]
 a36(r61): [138..143]
 a37(r60): [144..145]
 a38(r59): [146..147]
 a39(r77): [148..149]
Compressing live ranges: from 158 to 66 - 41%
Ranges after the compression:
 a0(r76): [0..1]
 a1(r75): [2..3]
 a2(r98): [4..5]
 a3(r74): [4..5]
 a4(r73): [6..7]
 a5(r97): [8..9]
 a6(r95): [10..11]
 a7(r96): [10..11]
 a8(r72): [12..13]
 a9(r94): [14..15]
 a10(r63): [18..19]
 a11(r93): [20..21]
 a12(r92): [22..23]
 a13(r90): [22..25]
 a14(r91): [22..23]
 a15(r71): [24..27]
 a16(r67): [26..39]
 a17(r70): [28..29]
 a18(r68): [28..37]
 a19(r88): [34..35] [30..31]
 a20(r89): [32..33]
 a21(r69): [34..35]
 a22(r87): [36..37]
 a23(r86): [38..39]
 a24(r85): [40..41]
 a25(r66): [40..41]
 a26(r83): [46..47] [42..43]
 a27(r84): [44..45]
 a28(r65): [46..47]
 a29(r64): [48..49]
 a30(r82): [48..49]
 a31(r81): [16..17]
 a32(r80): [50..51]
 a33(r62): [52..53]
 a34(r78): [58..59] [54..55]
 a35(r79): [56..57]
 a36(r61): [58..59]
 a37(r60): [60..61]
 a38(r59): [62..63]
 a39(r77): [64..65]
  regions=1, blocks=10, points=66
    allocnos=40 (big 0), copies=0, conflicts=0, ranges=43
Disposition:
   38:r59  l0     0   37:r60  l0     0   36:r61  l0     1   33:r62  l0     0
   10:r63  l0     0   29:r64  l0     0   28:r65  l0     1   25:r66  l0     1
   16:r67  l0     4   18:r68  l0     2   21:r69  l0     1   17:r70  l0     0
   15:r71  l0     0    8:r72  l0     0    4:r73  l0     0    3:r74  l0     1
    1:r75  l0     0    0:r76  l0     0   39:r77  l0     0   34:r78  l0     0
   35:r79  l0     0   32:r80  l0     0   31:r81  l0     0   30:r82  l0     1
   26:r83  l0     0   27:r84  l0     0   24:r85  l0     0   23:r86  l0     0
   22:r87  l0     0   19:r88  l0     0   20:r89  l0     0   13:r90  l0     1
   14:r91  l0     4   12:r92  l0     0   11:r93  l0     0    9:r94  l0     0
    6:r95  l0     0    7:r96  l0     1    5:r97  l0     0    2:r98  l0     0
+++Costs: overall -4, reg -4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


remove_aircraft

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={4d} r4={4d,1u} r5={7d,4u} r6={1d,9u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,8u} r17={21d,3u} r18={3d} r19={3d} r20={1d,33u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={1d,1u} r60={1d,1u} r61={1d,2u,1e} r62={1d,1u} r63={1d,1u} r64={1d,2u,1e} r65={1d,2u,1e} r66={1d,1u,1e} r67={1d,1u} r68={1d,1u} r69={1d,2u,1e} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={4d,4u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={4d,4u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={4d,4u} r89={1d,1u} r90={2d,2u} r91={2d,2u} r92={2d,3u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} 
;;    total ref usage 362{225d,131u,6e} in 75{72 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 77 78 79 80
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])
        (reg:DI 5 di [ fligth ])) mSector.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ fligth ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])
        (reg:DI 4 si [ Nfligth ])) mSector.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nfligth ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 sel+0 S4 A32])
        (reg:SI 1 dx [ sel ])) mSector.c:125 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ sel ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 77)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 59 [ D.4997 ])
        (mem:SI (reg/f:DI 77) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:126 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 77)
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 60 [ D.4997 ])
                (plus:SI (reg:SI 59 [ D.4997 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 59 [ D.4997 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 11 10 12 2 (set (reg:DI 61 [ D.4998 ])
        (sign_extend:DI (reg:SI 60 [ D.4997 ]))) mSector.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 60 [ D.4997 ])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 78)
        (reg:DI 61 [ D.4998 ])) mSector.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 78)
                (ashift:DI (reg:DI 78)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 78)
                (plus:DI (reg:DI 78)
                    (reg:DI 61 [ D.4998 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.4998 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 61 [ D.4998 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 79)
                (ashift:DI (reg:DI 78)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:126 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 78)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 2 (set (reg:DI 78)
        (reg:DI 79)) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 79)
        (nil)))
(insn 17 16 18 2 (set (reg:DI 62 [ D.4998 ])
        (reg:DI 78)) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 78)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 62 [ D.4998 ])) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 62 [ D.4998 ])
        (nil)))
(call_insn 19 18 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f44d2970b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mSector.c:126 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 80)
        (reg:DI 0 ax)) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 80)
            (nil))))
(insn 21 20 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
        (reg/f:DI 80)) mSector.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 80)
        (nil)))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
            (const_int 0 [0]))) mSector.c:127 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) mSector.c:127 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f44d286ced8 *.LC9>)) mSector.c:127 87 {*movdi_internal_rex64}
     (nil))
(call_insn 26 25 27 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:127 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 27 26 28 4 61 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 30 29 101 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (const_int 0 [0])) mSector.c:129 89 {*movsi_internal}
     (nil))
(jump_insn 101 30 102 4 (set (pc)
        (label_ref 68)) mSector.c:129 650 {jump}
     (nil)
 -> 68)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 72)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81
(code_label 72 102 33 5 64 "" [1 uses])
(note 33 72 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg:SI 81)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 81)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 sel+0 S4 A32]))) mSector.c:129 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 81)
        (nil)))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) mSector.c:129 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 65)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 82 83 84 85 86 87 88 89 90 91 92
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:SI 64 [ h.1 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg:SI 82)
                (plus:SI (reg:SI 64 [ h.1 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 39 41 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 h+0 S4 A32])
        (reg:SI 82)) mSector.c:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 64 [ h.1 ])
                (const_int 1 [0x1]))
            (nil))))
(insn 41 40 42 6 (set (reg:DI 65 [ D.4998 ])
        (sign_extend:DI (reg:SI 64 [ h.1 ]))) mSector.c:129 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 64 [ h.1 ])
        (nil)))
(insn 42 41 43 6 (set (reg:DI 83)
        (reg:DI 65 [ D.4998 ])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 83)
                (ashift:DI (reg:DI 83)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 83)
                (plus:DI (reg:DI 83)
                    (reg:DI 65 [ D.4998 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.4998 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 65 [ D.4998 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 84)
                (ashift:DI (reg:DI 83)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 83)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 45 47 6 (set (reg:DI 83)
        (reg:DI 84)) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 84)
        (nil)))
(insn 47 46 48 6 (set (reg:DI 66 [ D.4998 ])
        (reg:DI 83)) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 83)
        (nil)))
(insn 48 47 49 6 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg/f:DI 67 [ D.4999 ])
                (plus:DI (reg:DI 66 [ D.4998 ])
                    (reg/f:DI 85)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (expr_list:REG_DEAD (reg:DI 66 [ D.4998 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])
                        (reg:DI 66 [ D.4998 ]))
                    (nil))))))
(insn 50 49 51 6 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 6 (set (reg/f:DI 68 [ D.4999 ])
        (mem/f:DI (reg/f:DI 86) [0 *fligth_19(D)+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 86)
        (nil)))
(insn 52 51 53 6 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 69 [ D.4998 ])
        (sign_extend:DI (reg:SI 87))) mSector.c:129 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 87)
        (nil)))
(insn 54 53 55 6 (set (reg:DI 88)
        (reg:DI 69 [ D.4998 ])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 6 (parallel [
            (set (reg:DI 88)
                (ashift:DI (reg:DI 88)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 88)
                (plus:DI (reg:DI 88)
                    (reg:DI 69 [ D.4998 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.4998 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 69 [ D.4998 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 89)
                (ashift:DI (reg:DI 88)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 6 (set (reg:DI 88)
        (reg:DI 89)) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 59 58 60 6 (set (reg:DI 70 [ D.4998 ])
        (reg:DI 88)) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 60 59 61 6 (parallel [
            (set (reg/f:DI 71 [ D.4999 ])
                (plus:DI (reg/f:DI 68 [ D.4999 ])
                    (reg:DI 70 [ D.4998 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.4998 ])
        (expr_list:REG_DEAD (reg/f:DI 68 [ D.4999 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 61 60 62 6 (set (reg:DI 90)
        (reg/f:DI 67 [ D.4999 ])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.4999 ])
        (nil)))
(insn 62 61 63 6 (set (reg:DI 91)
        (reg/f:DI 71 [ D.4999 ])) mSector.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.4999 ])
        (nil)))
(insn 63 62 64 6 (set (reg:DI 92)
        (const_int 20 [0x14])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 65 6 (parallel [
            (set (reg:DI 92)
                (const_int 0 [0]))
            (set (reg:DI 90)
                (plus:DI (ashift:DI (reg:DI 92)
                        (const_int 3 [0x3]))
                    (reg:DI 90)))
            (set (reg:DI 91)
                (plus:DI (ashift:DI (reg:DI 92)
                        (const_int 3 [0x3]))
                    (reg:DI 91)))
            (set (mem:BLK (reg:DI 90) [0 *_18+0 S160 A128])
                (mem:BLK (reg:DI 91) [0 *_23+0 S160 A128]))
            (use (reg:DI 92))
        ]) mSector.c:129 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 92)
        (expr_list:REG_UNUSED (reg:DI 91)
            (expr_list:REG_UNUSED (reg:DI 90)
                (nil)))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 65 64 66 7 63 "" [1 uses])
(note 66 65 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:129 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 93
(code_label 68 67 69 8 62 "" [1 uses])
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 8 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 73 8 (set (reg:SI 63 [ D.4997 ])
        (mem:SI (reg/f:DI 93) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:129 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 73 71 74 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 63 [ D.4997 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) mSector.c:129 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.4997 ])
        (nil)))
(jump_insn 74 73 75 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) mSector.c:129 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 72)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 75 76 94 95 96 97 98
(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 9 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:130 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 9 (set (reg/f:DI 72 [ D.4999 ])
        (mem/f:DI (reg/f:DI 94) [0 *fligth_19(D)+0 S8 A64])) mSector.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 78 77 79 9 (set (reg:DI 5 di)
        (reg/f:DI 72 [ D.4999 ])) mSector.c:130 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 72 [ D.4999 ])
        (nil)))
(call_insn 79 78 80 9 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:130 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 80 79 81 9 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fligth+0 S8 A64])) mSector.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 9 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 New_fligth+0 S8 A64])) mSector.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 9 (set (mem/f:DI (reg/f:DI 95) [0 *fligth_19(D)+0 S8 A64])
        (reg/f:DI 96)) mSector.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (expr_list:REG_DEAD (reg/f:DI 95)
            (nil))))
(insn 83 82 84 9 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 9 (set (reg:SI 73 [ D.4997 ])
        (mem:SI (reg/f:DI 97) [0 *Nfligth_4(D)+0 S4 A32])) mSector.c:133 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 85 84 86 9 (parallel [
            (set (reg:SI 74 [ D.4997 ])
                (plus:SI (reg:SI 73 [ D.4997 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:133 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 73 [ D.4997 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 9 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nfligth+0 S8 A64])) mSector.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 9 (set (mem:SI (reg/f:DI 98) [0 *Nfligth_4(D)+0 S4 A32])
        (reg:SI 74 [ D.4997 ])) mSector.c:133 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (expr_list:REG_DEAD (reg:SI 74 [ D.4997 ])
            (nil))))
(insn 88 87 91 9 (set (reg:SI 75 [ D.4997 ])
        (const_int 1 [0x1])) mSector.c:135 89 {*movsi_internal}
     (nil))
(insn 91 88 95 9 (set (reg:SI 76 [ <retval> ])
        (reg:SI 75 [ D.4997 ])) mSector.c:135 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 75 [ D.4997 ])
        (nil)))
(insn 95 91 98 9 (set (reg/i:SI 0 ax)
        (reg:SI 76 [ <retval> ])) mSector.c:136 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 76 [ <retval> ])
        (nil)))
(insn 98 95 0 9 (use (reg/i:SI 0 ax)) mSector.c:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function add_nvp (add_nvp, funcdef_no=9, decl_uid=1886, cgraph_uid=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 22 count 17 (    1)
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 215.
verify found no changes in insn with uid = 219.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a149 (r164,l0) best AREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a152 (r162,l0) best AREG, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r160,l0) best AREG, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r153,l0) best DIREG, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a38 (r141,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a67 (r119,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a80 (r110,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a95 (r99,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a123 (r82,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a150 (r63,l0) best DIREG, allocno GENERAL_REGS
    r62: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a153 (r62,l0) best DIREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r160,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a6(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a7(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a10(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a11(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a12(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a13(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a14(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a16(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a18(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a22(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a26(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a28(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a29(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a37(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r141,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a39(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a41(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a45(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a47(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a48(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a52(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a54(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a55(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a56(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a58(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a60(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a61(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a66(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a67(r119,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a68(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a69(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a70(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a71(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a72(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a73(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a74(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a75(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a76(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a77(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a78(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a79(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a80(r110,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a81(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a82(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a83(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a84(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a85(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a86(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a87(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a88(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a89(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a90(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a91(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a92(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a93(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a94(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a95(r99,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a96(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a97(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a98(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a99(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a100(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a101(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a102(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a103(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a104(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a105(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a106(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a107(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a108(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a109(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a110(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a111(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a112(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a113(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a114(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a115(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a116(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a117(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a118(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a119(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a120(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a121(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a122(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a123(r82,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a124(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a125(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a126(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a127(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a128(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a129(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a130(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a131(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a132(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a133(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a134(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a135(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a136(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a137(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a138(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a139(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a140(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a141(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a142(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a143(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a144(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a145(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a146(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a147(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a148(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a149(r164,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a150(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a151(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a152(r162,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a153(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a154(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a155(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a156(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a157(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 246(l0): point = 0
   Insn 243(l0): point = 2
   Insn 239(l0): point = 4
   Insn 236(l0): point = 6
   Insn 235(l0): point = 8
   Insn 234(l0): point = 10
   Insn 233(l0): point = 12
   Insn 232(l0): point = 14
   Insn 231(l0): point = 16
   Insn 230(l0): point = 18
   Insn 229(l0): point = 20
   Insn 228(l0): point = 22
   Insn 227(l0): point = 24
   Insn 226(l0): point = 26
   Insn 225(l0): point = 28
   Insn 224(l0): point = 30
   Insn 223(l0): point = 32
   Insn 222(l0): point = 34
   Insn 221(l0): point = 36
   Insn 220(l0): point = 38
   Insn 219(l0): point = 40
   Insn 218(l0): point = 42
   Insn 217(l0): point = 44
   Insn 216(l0): point = 46
   Insn 215(l0): point = 48
   Insn 214(l0): point = 50
   Insn 213(l0): point = 52
   Insn 212(l0): point = 54
   Insn 211(l0): point = 56
   Insn 210(l0): point = 58
   Insn 209(l0): point = 60
   Insn 208(l0): point = 62
   Insn 207(l0): point = 64
   Insn 206(l0): point = 66
   Insn 205(l0): point = 68
   Insn 204(l0): point = 70
   Insn 203(l0): point = 72
   Insn 202(l0): point = 74
   Insn 201(l0): point = 76
   Insn 200(l0): point = 78
   Insn 199(l0): point = 80
   Insn 198(l0): point = 82
   Insn 195(l0): point = 85
   Insn 194(l0): point = 87
   Insn 192(l0): point = 90
   Insn 191(l0): point = 92
   Insn 190(l0): point = 94
   Insn 189(l0): point = 96
   Insn 188(l0): point = 98
   Insn 144(l0): point = 101
   Insn 143(l0): point = 103
   Insn 142(l0): point = 105
   Insn 141(l0): point = 107
   Insn 140(l0): point = 109
   Insn 186(l0): point = 112
   Insn 185(l0): point = 114
   Insn 183(l0): point = 116
   Insn 182(l0): point = 118
   Insn 181(l0): point = 120
   Insn 178(l0): point = 123
   Insn 177(l0): point = 125
   Insn 176(l0): point = 127
   Insn 175(l0): point = 129
   Insn 174(l0): point = 131
   Insn 173(l0): point = 133
   Insn 172(l0): point = 135
   Insn 171(l0): point = 137
   Insn 170(l0): point = 139
   Insn 169(l0): point = 141
   Insn 168(l0): point = 143
   Insn 167(l0): point = 145
   Insn 166(l0): point = 147
   Insn 165(l0): point = 149
   Insn 164(l0): point = 151
   Insn 163(l0): point = 153
   Insn 162(l0): point = 155
   Insn 161(l0): point = 157
   Insn 160(l0): point = 159
   Insn 159(l0): point = 161
   Insn 158(l0): point = 163
   Insn 157(l0): point = 165
   Insn 156(l0): point = 167
   Insn 155(l0): point = 169
   Insn 154(l0): point = 171
   Insn 153(l0): point = 173
   Insn 152(l0): point = 175
   Insn 151(l0): point = 177
   Insn 150(l0): point = 179
   Insn 147(l0): point = 182
   Insn 146(l0): point = 184
   Insn 251(l0): point = 187
   Insn 136(l0): point = 189
   Insn 135(l0): point = 191
   Insn 134(l0): point = 193
   Insn 133(l0): point = 195
   Insn 132(l0): point = 197
   Insn 131(l0): point = 199
   Insn 130(l0): point = 201
   Insn 129(l0): point = 203
   Insn 128(l0): point = 205
   Insn 127(l0): point = 207
   Insn 126(l0): point = 209
   Insn 125(l0): point = 211
   Insn 124(l0): point = 213
   Insn 123(l0): point = 215
   Insn 122(l0): point = 217
   Insn 121(l0): point = 219
   Insn 120(l0): point = 221
   Insn 119(l0): point = 223
   Insn 118(l0): point = 225
   Insn 117(l0): point = 227
   Insn 116(l0): point = 229
   Insn 115(l0): point = 231
   Insn 114(l0): point = 233
   Insn 113(l0): point = 235
   Insn 112(l0): point = 237
   Insn 111(l0): point = 239
   Insn 110(l0): point = 241
   Insn 109(l0): point = 243
   Insn 108(l0): point = 245
   Insn 107(l0): point = 247
   Insn 106(l0): point = 249
   Insn 105(l0): point = 251
   Insn 104(l0): point = 253
   Insn 103(l0): point = 255
   Insn 102(l0): point = 257
   Insn 101(l0): point = 259
   Insn 100(l0): point = 261
   Insn 99(l0): point = 263
   Insn 98(l0): point = 265
   Insn 97(l0): point = 267
   Insn 96(l0): point = 269
   Insn 95(l0): point = 271
   Insn 94(l0): point = 273
   Insn 93(l0): point = 275
   Insn 92(l0): point = 277
   Insn 91(l0): point = 279
   Insn 90(l0): point = 281
   Insn 89(l0): point = 283
   Insn 88(l0): point = 285
   Insn 87(l0): point = 287
   Insn 86(l0): point = 289
   Insn 85(l0): point = 291
   Insn 84(l0): point = 293
   Insn 81(l0): point = 296
   Insn 80(l0): point = 298
   Insn 78(l0): point = 301
   Insn 77(l0): point = 303
   Insn 76(l0): point = 305
   Insn 75(l0): point = 307
   Insn 74(l0): point = 309
   Insn 73(l0): point = 311
   Insn 72(l0): point = 313
   Insn 31(l0): point = 316
   Insn 30(l0): point = 318
   Insn 29(l0): point = 320
   Insn 28(l0): point = 322
   Insn 27(l0): point = 324
   Insn 70(l0): point = 327
   Insn 69(l0): point = 329
   Insn 67(l0): point = 331
   Insn 66(l0): point = 333
   Insn 63(l0): point = 336
   Insn 62(l0): point = 338
   Insn 61(l0): point = 340
   Insn 60(l0): point = 342
   Insn 59(l0): point = 344
   Insn 58(l0): point = 346
   Insn 57(l0): point = 348
   Insn 56(l0): point = 350
   Insn 55(l0): point = 352
   Insn 54(l0): point = 354
   Insn 53(l0): point = 356
   Insn 52(l0): point = 358
   Insn 51(l0): point = 360
   Insn 50(l0): point = 362
   Insn 49(l0): point = 364
   Insn 48(l0): point = 366
   Insn 47(l0): point = 368
   Insn 46(l0): point = 370
   Insn 45(l0): point = 372
   Insn 44(l0): point = 374
   Insn 43(l0): point = 376
   Insn 42(l0): point = 378
   Insn 41(l0): point = 380
   Insn 40(l0): point = 382
   Insn 39(l0): point = 384
   Insn 38(l0): point = 386
   Insn 37(l0): point = 388
   Insn 34(l0): point = 391
   Insn 33(l0): point = 393
   Insn 249(l0): point = 396
   Insn 23(l0): point = 398
   Insn 22(l0): point = 400
   Insn 21(l0): point = 402
   Insn 20(l0): point = 404
   Insn 19(l0): point = 406
   Insn 18(l0): point = 408
   Insn 17(l0): point = 410
   Insn 16(l0): point = 412
   Insn 15(l0): point = 414
   Insn 14(l0): point = 416
   Insn 13(l0): point = 418
   Insn 12(l0): point = 420
   Insn 11(l0): point = 422
   Insn 10(l0): point = 424
   Insn 9(l0): point = 426
   Insn 8(l0): point = 428
   Insn 4(l0): point = 430
   Insn 3(l0): point = 432
   Insn 2(l0): point = 434
 a0(r160): [3..4]
 a1(r159): [5..6]
 a2(r216): [9..10]
 a3(r158): [9..12]
 a4(r157): [13..14]
 a5(r215): [15..16]
 a6(r214): [19..20]
 a7(r156): [19..22]
 a8(r155): [23..24]
 a9(r213): [25..26]
 a10(r211): [29..32]
 a11(r212): [29..30]
 a12(r209): [35..38]
 a13(r210): [35..36]
 a14(r154): [43..44]
 a15(r208): [45..46]
 a16(r153): [51..52]
 a17(r207): [53..54]
 a18(r147): [57..72]
 a19(r152): [57..58]
 a20(r151): [59..60]
 a21(r150): [61..62]
 a22(r148): [61..68]
 a23(r149): [63..64]
 a24(r206): [65..66]
 a25(r205): [69..70]
 a26(r204): [73..74]
 a27(r146): [73..76]
 a28(r145): [77..78]
 a29(r144): [79..80]
 a30(r203): [81..82]
 a31(r143): [93..94]
 a32(r142): [95..96]
 a33(r202): [97..98]
 a34(r121): [115..116]
 a35(r120): [117..118]
 a36(r201): [119..120]
 a37(r136): [126..141]
 a38(r141 [0]): [126..127]
 a38(r141 [1]): [126..127]
 a39(r140): [128..129]
 a40(r139): [130..131]
 a41(r137): [130..137]
 a42(r138): [132..133]
 a43(r200): [134..135]
 a44(r199): [138..139]
 a45(r198): [142..143]
 a46(r135): [142..145]
 a47(r134): [146..147]
 a48(r133): [148..149]
 a49(r197): [150..151]
 a50(r127): [154..169]
 a51(r132): [154..155]
 a52(r131): [156..157]
 a53(r130): [158..159]
 a54(r128): [158..165]
 a55(r129): [160..161]
 a56(r196): [162..163]
 a57(r195): [166..167]
 a58(r194): [170..171]
 a59(r126): [170..173]
 a60(r125): [174..175]
 a61(r124): [176..177]
 a62(r193): [178..179]
 a63(r123): [104..105]
 a64(r122): [106..107]
 a65(r192): [108..109]
 a66(r113): [190..207]
 a67(r119 [0]): [190..191]
 a67(r119 [1]): [190..191]
 a68(r118): [192..193]
 a69(r117): [194..195]
 a70(r114): [194..203]
 a71(r116): [196..197]
 a72(r115): [198..199]
 a73(r191): [200..201]
 a74(r190): [204..205]
 a75(r189): [208..209]
 a76(r112): [208..211]
 a77(r111): [212..213]
 a78(r188): [214..215]
 a79(r104): [218..235]
 a80(r110 [0]): [218..219]
 a80(r110 [1]): [218..219]
 a81(r109): [220..221]
 a82(r108): [222..223]
 a83(r187): [224..225]
 a84(r107): [224..227]
 a85(r106): [228..229]
 a86(r105): [230..231]
 a87(r186): [232..233]
 a88(r103): [236..237]
 a89(r102): [238..239]
 a90(r185): [240..241]
 a91(r101): [240..243]
 a92(r100): [244..245]
 a93(r184): [246..247]
 a94(r93): [250..267]
 a95(r99 [0]): [250..251]
 a95(r99 [1]): [250..251]
 a96(r98): [252..253]
 a97(r97): [254..255]
 a98(r183): [256..257]
 a99(r96): [256..259]
 a100(r95): [260..261]
 a101(r94): [262..263]
 a102(r182): [264..265]
 a103(r92): [268..269]
 a104(r91): [270..271]
 a105(r181): [272..273]
 a106(r90): [272..275]
 a107(r89): [276..277]
 a108(r180): [278..279]
 a109(r88): [282..285]
 a110(r179): [282..283]
 a111(r178): [286..287]
 a112(r87): [286..289]
 a113(r86): [290..291]
 a114(r177): [292..293]
 a115(r85): [304..305]
 a116(r83): [304..311]
 a117(r84): [306..307]
 a118(r176): [308..309]
 a119(r175): [312..313]
 a120(r64): [330..331]
 a121(r174): [332..333]
 a122(r77): [339..354]
 a123(r82 [0]): [339..340]
 a123(r82 [1]): [339..340]
 a124(r81): [341..342]
 a125(r80): [343..344]
 a126(r78): [343..350]
 a127(r79): [345..346]
 a128(r173): [347..348]
 a129(r172): [351..352]
 a130(r171): [355..356]
 a131(r76): [355..358]
 a132(r75): [359..360]
 a133(r170): [361..362]
 a134(r69): [365..380]
 a135(r74): [365..366]
 a136(r73): [367..368]
 a137(r72): [369..370]
 a138(r70): [369..376]
 a139(r71): [371..372]
 a140(r169): [373..374]
 a141(r168): [377..378]
 a142(r167): [381..382]
 a143(r68): [381..384]
 a144(r67): [385..386]
 a145(r166): [387..388]
 a146(r66): [319..320]
 a147(r65): [321..322]
 a148(r165): [323..324]
 a149(r164): [401..402]
 a150(r63): [407..408]
 a151(r163): [409..410]
 a152(r162): [413..414]
 a153(r62): [419..420]
 a154(r61): [421..422]
 a155(r60): [423..424]
 a156(r59): [425..426]
 a157(r161): [427..428]
Compressing live ranges: from 437 to 254 - 58%
Ranges after the compression:
 a0(r160): [0..1]
 a1(r159): [2..3]
 a2(r216): [4..5]
 a3(r158): [4..5]
 a4(r157): [6..7]
 a5(r215): [8..9]
 a6(r214): [10..11]
 a7(r156): [10..11]
 a8(r155): [12..13]
 a9(r213): [14..15]
 a10(r211): [16..17]
 a11(r212): [16..17]
 a12(r209): [18..19]
 a13(r210): [18..19]
 a14(r154): [20..21]
 a15(r208): [22..23]
 a16(r153): [24..25]
 a17(r207): [26..27]
 a18(r147): [28..39]
 a19(r152): [28..29]
 a20(r151): [30..31]
 a21(r150): [32..33]
 a22(r148): [32..37]
 a23(r149): [34..35]
 a24(r206): [36..37]
 a25(r205): [38..39]
 a26(r204): [40..41]
 a27(r146): [40..41]
 a28(r145): [42..43]
 a29(r144): [44..45]
 a30(r203): [46..47]
 a31(r143): [48..49]
 a32(r142): [50..51]
 a33(r202): [52..53]
 a34(r121): [60..61]
 a35(r120): [62..63]
 a36(r201): [64..65]
 a37(r136): [66..77]
 a38(r141 [0]): [66..67]
 a38(r141 [1]): [66..67]
 a39(r140): [68..69]
 a40(r139): [70..71]
 a41(r137): [70..75]
 a42(r138): [72..73]
 a43(r200): [74..75]
 a44(r199): [76..77]
 a45(r198): [78..79]
 a46(r135): [78..79]
 a47(r134): [80..81]
 a48(r133): [82..83]
 a49(r197): [84..85]
 a50(r127): [86..97]
 a51(r132): [86..87]
 a52(r131): [88..89]
 a53(r130): [90..91]
 a54(r128): [90..95]
 a55(r129): [92..93]
 a56(r196): [94..95]
 a57(r195): [96..97]
 a58(r194): [98..99]
 a59(r126): [98..99]
 a60(r125): [100..101]
 a61(r124): [102..103]
 a62(r193): [104..105]
 a63(r123): [54..55]
 a64(r122): [56..57]
 a65(r192): [58..59]
 a66(r113): [106..119]
 a67(r119 [0]): [106..107]
 a67(r119 [1]): [106..107]
 a68(r118): [108..109]
 a69(r117): [110..111]
 a70(r114): [110..117]
 a71(r116): [112..113]
 a72(r115): [114..115]
 a73(r191): [116..117]
 a74(r190): [118..119]
 a75(r189): [120..121]
 a76(r112): [120..121]
 a77(r111): [122..123]
 a78(r188): [124..125]
 a79(r104): [126..139]
 a80(r110 [0]): [126..127]
 a80(r110 [1]): [126..127]
 a81(r109): [128..129]
 a82(r108): [130..131]
 a83(r187): [132..133]
 a84(r107): [132..133]
 a85(r106): [134..135]
 a86(r105): [136..137]
 a87(r186): [138..139]
 a88(r103): [140..141]
 a89(r102): [142..143]
 a90(r185): [144..145]
 a91(r101): [144..145]
 a92(r100): [146..147]
 a93(r184): [148..149]
 a94(r93): [150..163]
 a95(r99 [0]): [150..151]
 a95(r99 [1]): [150..151]
 a96(r98): [152..153]
 a97(r97): [154..155]
 a98(r183): [156..157]
 a99(r96): [156..157]
 a100(r95): [158..159]
 a101(r94): [160..161]
 a102(r182): [162..163]
 a103(r92): [164..165]
 a104(r91): [166..167]
 a105(r181): [168..169]
 a106(r90): [168..169]
 a107(r89): [170..171]
 a108(r180): [172..173]
 a109(r88): [174..175]
 a110(r179): [174..175]
 a111(r178): [176..177]
 a112(r87): [176..177]
 a113(r86): [178..179]
 a114(r177): [180..181]
 a115(r85): [182..183]
 a116(r83): [182..187]
 a117(r84): [184..185]
 a118(r176): [186..187]
 a119(r175): [188..189]
 a120(r64): [196..197]
 a121(r174): [198..199]
 a122(r77): [200..211]
 a123(r82 [0]): [200..201]
 a123(r82 [1]): [200..201]
 a124(r81): [202..203]
 a125(r80): [204..205]
 a126(r78): [204..209]
 a127(r79): [206..207]
 a128(r173): [208..209]
 a129(r172): [210..211]
 a130(r171): [212..213]
 a131(r76): [212..213]
 a132(r75): [214..215]
 a133(r170): [216..217]
 a134(r69): [218..229]
 a135(r74): [218..219]
 a136(r73): [220..221]
 a137(r72): [222..223]
 a138(r70): [222..227]
 a139(r71): [224..225]
 a140(r169): [226..227]
 a141(r168): [228..229]
 a142(r167): [230..231]
 a143(r68): [230..231]
 a144(r67): [232..233]
 a145(r166): [234..235]
 a146(r66): [190..191]
 a147(r65): [192..193]
 a148(r165): [194..195]
 a149(r164): [236..237]
 a150(r63): [238..239]
 a151(r163): [240..241]
 a152(r162): [242..243]
 a153(r62): [244..245]
 a154(r61): [246..247]
 a155(r60): [248..249]
 a156(r59): [250..251]
 a157(r161): [252..253]
  regions=1, blocks=17, points=254
    allocnos=158 (big 5), copies=0, conflicts=0, ranges=163
Disposition:
  156:r59  l0     0  155:r60  l0     0  154:r61  l0     0  153:r62  l0     0
  150:r63  l0     0  120:r64  l0     0  147:r65  l0     0  146:r66  l0     0
  144:r67  l0     0  143:r68  l0     1  134:r69  l0     1  138:r70  l0     0
  139:r71  l0     2  137:r72  l0     2  136:r73  l0     0  135:r74  l0     0
  132:r75  l0     0  131:r76  l0     1  122:r77  l0     2  126:r78  l0     0
  127:r79  l0     1  125:r80  l0     1  124:r81  l0     0  123:r82  l0     0
  116:r83  l0     1  117:r84  l0     0  115:r85  l0     0  113:r86  l0     0
  112:r87  l0     1  109:r88  l0     1  107:r89  l0     0  106:r90  l0     1
  104:r91  l0     0  103:r92  l0     0   94:r93  l0     2  101:r94  l0     0
  100:r95  l0     0   99:r96  l0     1   97:r97  l0     0   96:r98  l0     0
   95:r99  l0     0   92:r100 l0     0   91:r101 l0     1   89:r102 l0     0
   88:r103 l0     0   79:r104 l0     2   86:r105 l0     0   85:r106 l0     0
   84:r107 l0     1   82:r108 l0     0   81:r109 l0     0   80:r110 l0     0
   77:r111 l0     0   76:r112 l0     1   66:r113 l0     2   70:r114 l0     0
   72:r115 l0     1   71:r116 l0     1   69:r117 l0     1   68:r118 l0     0
   67:r119 l0     0   35:r120 l0     0   34:r121 l0     0   64:r122 l0     0
   63:r123 l0     0   61:r124 l0     0   60:r125 l0     0   59:r126 l0     1
   50:r127 l0     1   54:r128 l0     0   55:r129 l0     2   53:r130 l0     2
   52:r131 l0     0   51:r132 l0     0   48:r133 l0     0   47:r134 l0     0
   46:r135 l0     1   37:r136 l0     2   41:r137 l0     0   42:r138 l0     1
   40:r139 l0     1   39:r140 l0     0   38:r141 l0     0   32:r142 l0     0
   31:r143 l0     0   29:r144 l0     0   28:r145 l0     0   27:r146 l0     1
   18:r147 l0     1   22:r148 l0     0   23:r149 l0     2   21:r150 l0     2
   20:r151 l0     0   19:r152 l0     0   16:r153 l0     0   14:r154 l0     0
    8:r155 l0     0    7:r156 l0     1    4:r157 l0     0    3:r158 l0     1
    1:r159 l0     0    0:r160 l0     0  157:r161 l0     0  152:r162 l0     0
  151:r163 l0     0  149:r164 l0     0  148:r165 l0     0  145:r166 l0     0
  142:r167 l0     0  141:r168 l0     0  140:r169 l0     2  133:r170 l0     0
  130:r171 l0     0  129:r172 l0     0  128:r173 l0     1  121:r174 l0     0
  119:r175 l0     0  118:r176 l0     0  114:r177 l0     0  111:r178 l0     0
  110:r179 l0     0  108:r180 l0     0  105:r181 l0     0  102:r182 l0     0
   98:r183 l0     0   93:r184 l0     0   90:r185 l0     0   87:r186 l0     0
   83:r187 l0     0   78:r188 l0     0   75:r189 l0     0   74:r190 l0     0
   73:r191 l0     1   65:r192 l0     0   62:r193 l0     0   58:r194 l0     0
   57:r195 l0     0   56:r196 l0     2   49:r197 l0     0   45:r198 l0     0
   44:r199 l0     0   43:r200 l0     1   36:r201 l0     0   33:r202 l0     0
   30:r203 l0     0   26:r204 l0     0   25:r205 l0     0   24:r206 l0     2
   17:r207 l0     0   15:r208 l0     0   12:r209 l0     0   13:r210 l0     1
   10:r211 l0     0   11:r212 l0     1    9:r213 l0     0    6:r214 l0     0
    5:r215 l0     0    2:r216 l0     0
+++Costs: overall -7, reg -7, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


add_nvp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={10d,4u} r1={9d,1u} r2={9d} r4={9d,1u} r5={17d,9u} r6={1d,16u} r7={1d,24u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,15u} r17={68d,6u} r18={8d} r19={8d} r20={1d,85u,12e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u,1e} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u,1e} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u,1e} r88={1d,1u} r89={1d,1u} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u,1e} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u,1e} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u,1e} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u,1e} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u,1e} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u,1e} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u,1e} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} 
;;    total ref usage 940{598d,319u,23e} in 211{203 regular + 8 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 161 162 163 164
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])
        (reg:DI 4 si [ st_indx ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ st_indx ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])
        (reg:DI 1 dx [ p ])) mSector.c:138 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ p ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:SI 59 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 161)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:140 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 60 [ D.5001 ])
                (plus:SI (reg:SI 59 [ D.5001 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:140 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 11 10 12 2 (set (reg:DI 61 [ D.5002 ])
        (sign_extend:DI (reg:SI 60 [ D.5001 ]))) mSector.c:140 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 60 [ D.5001 ])
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 62 [ D.5002 ])
                (ashift:DI (reg:DI 61 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:140 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 62 [ D.5002 ])) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 62 [ D.5002 ])
        (nil)))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f44d2970b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mSector.c:140 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 162)
        (reg:DI 0 ax)) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 162)
            (nil))))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
        (reg/f:DI 162)) mSector.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg:SI 63 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 163)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 5 di)
        (reg:SI 63 [ D.5001 ])) mSector.c:141 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 63 [ D.5001 ])
        (nil)))
(call_insn 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f44d29f7700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mSector.c:141 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 21 20 22 2 (set (reg:DI 164)
        (reg:DI 0 ax)) mSector.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
        (reg:DI 164)) mSector.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 164)
        (nil)))
(insn 23 22 249 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:145 89 {*movsi_internal}
     (nil))
(jump_insn 249 23 250 2 (set (pc)
        (label_ref 64)) mSector.c:145 650 {jump}
     (nil)
 -> 64)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 250 249 68)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 165
(code_label 68 250 26 3 69 "" [1 uses])
(note 26 68 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (set (reg:SI 65 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 165)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:146 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 29 28 30 3 (parallel [
            (set (reg:SI 66 [ D.5001 ])
                (plus:SI (reg:SI 65 [ D.5001 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:146 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 65 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 66 [ D.5001 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:146 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 66 [ D.5001 ])
        (nil)))
(jump_insn 31 30 32 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) mSector.c:146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:146 87 {*movdi_internal_rex64}
     (nil))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:146 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 166 167 168 169 170 171 172 173
(code_label 35 34 36 5 68 "" [1 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:SI 166)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:147 89 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 67 [ D.5002 ])
        (sign_extend:DI (reg:SI 166))) mSector.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 166)
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 68 [ D.5002 ])
                (ashift:DI (reg:DI 67 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 67 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 5 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg/f:DI 69 [ D.5003 ])
                (plus:DI (reg:DI 68 [ D.5002 ])
                    (reg/f:DI 167)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (expr_list:REG_DEAD (reg:DI 68 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 68 [ D.5002 ]))
                    (nil))))))
(insn 42 41 43 5 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 5 (set (reg/f:DI 70 [ D.5003 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 168)
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 44 43 45 5 (set (reg:SI 169)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:147 89 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 71 [ D.5002 ])
        (sign_extend:DI (reg:SI 169))) mSector.c:147 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 169)
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 72 [ D.5002 ])
                (ashift:DI (reg:DI 71 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 73 [ D.5003 ])
                (plus:DI (reg/f:DI 70 [ D.5003 ])
                    (reg:DI 72 [ D.5002 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:147 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.5002 ])
        (expr_list:REG_DEAD (reg/f:DI 70 [ D.5003 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 48 47 49 5 (set (reg/f:DI 74 [ D.5004 ])
        (mem/f:DI (reg/f:DI 73 [ D.5003 ]) [0 *_22+0 S8 A64])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.5003 ])
        (nil)))
(insn 49 48 50 5 (set (mem/f:DI (reg/f:DI 69 [ D.5003 ]) [0 *_18+0 S8 A64])
        (reg/f:DI 74 [ D.5004 ])) mSector.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.5004 ])
        (expr_list:REG_DEAD (reg/f:DI 69 [ D.5003 ])
            (nil))))
(insn 50 49 51 5 (set (reg:SI 170)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:148 89 {*movsi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:DI 75 [ D.5002 ])
        (sign_extend:DI (reg:SI 170))) mSector.c:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 170)
        (nil)))
(insn 52 51 53 5 (parallel [
            (set (reg:DI 76 [ D.5002 ])
                (ashift:DI (reg:DI 75 [ D.5002 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 75 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 5 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 5 (parallel [
            (set (reg/f:DI 77 [ D.5004 ])
                (plus:DI (reg:DI 76 [ D.5002 ])
                    (reg/f:DI 171)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (expr_list:REG_DEAD (reg:DI 76 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                        (reg:DI 76 [ D.5002 ]))
                    (nil))))))
(insn 55 54 56 5 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 56 55 57 5 (set (reg/f:DI 78 [ D.5004 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 172)
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (nil)))
(insn 57 56 58 5 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:148 89 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:DI 79 [ D.5002 ])
        (sign_extend:DI (reg:SI 173))) mSector.c:148 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 59 58 60 5 (parallel [
            (set (reg:DI 80 [ D.5002 ])
                (ashift:DI (reg:DI 79 [ D.5002 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 79 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 60 59 61 5 (parallel [
            (set (reg/f:DI 81 [ D.5004 ])
                (plus:DI (reg/f:DI 78 [ D.5004 ])
                    (reg:DI 80 [ D.5002 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:148 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 80 [ D.5002 ])
        (expr_list:REG_DEAD (reg/f:DI 78 [ D.5004 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 61 60 62 5 (set (reg:XF 82 [ D.5005 ])
        (mem:XF (reg/f:DI 81 [ D.5004 ]) [0 *_30+0 S16 A128])) mSector.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 81 [ D.5004 ])
        (nil)))
(insn 62 61 63 5 (set (mem:XF (reg/f:DI 77 [ D.5004 ]) [0 *_26+0 S16 A128])
        (reg:XF 82 [ D.5005 ])) mSector.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 82 [ D.5005 ])
        (expr_list:REG_DEAD (reg/f:DI 77 [ D.5004 ])
            (nil))))
(insn 63 62 64 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:145 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 174
(code_label 64 63 65 6 67 "" [1 uses])
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 6 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 69 6 (set (reg:SI 64 [ D.5001 ])
        (mem:SI (reg/f:DI 174) [0 *st_indx_12(D)+0 S4 A32])) mSector.c:145 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 69 67 70 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 64 [ D.5001 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:145 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 64 [ D.5001 ])
        (nil)))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) mSector.c:145 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 68)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 175 176
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg:SI 175)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:152 89 {*movsi_internal}
     (nil))
(insn 73 72 74 7 (parallel [
            (set (reg:SI 83 [ D.5001 ])
                (plus:SI (reg:SI 175)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:152 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 175)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 74 73 75 7 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 7 (set (reg:SI 84 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 176)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:152 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 76 75 77 7 (parallel [
            (set (reg:SI 85 [ D.5001 ])
                (plus:SI (reg:SI 84 [ D.5001 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:152 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 84 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 77 76 78 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 83 [ D.5001 ])
            (reg:SI 85 [ D.5001 ]))) mSector.c:152 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 85 [ D.5001 ])
        (expr_list:REG_DEAD (reg:SI 83 [ D.5001 ])
            (nil))))
(jump_insn 78 77 79 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) mSector.c:152 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 82)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:152 87 {*movdi_internal_rex64}
     (nil))
(call_insn 81 80 82 8 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:152 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
(code_label 82 81 83 9 70 "" [1 uses])
(note 83 82 84 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 9 (set (reg:SI 177)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:153 89 {*movsi_internal}
     (nil))
(insn 85 84 86 9 (set (reg:DI 86 [ D.5002 ])
        (sign_extend:DI (reg:SI 177))) mSector.c:153 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 87 [ D.5002 ])
                (ashift:DI (reg:DI 86 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:153 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 86 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 9 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 9 (parallel [
            (set (reg/f:DI 88 [ D.5003 ])
                (plus:DI (reg:DI 87 [ D.5002 ])
                    (reg/f:DI 178)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:153 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (expr_list:REG_DEAD (reg:DI 87 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 87 [ D.5002 ]))
                    (nil))))))
(insn 89 88 90 9 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 p+0 S8 A64])) mSector.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 9 (set (mem/f:DI (reg/f:DI 88 [ D.5003 ]) [0 *_38+0 S8 A64])
        (reg/f:DI 179)) mSector.c:153 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (expr_list:REG_DEAD (reg/f:DI 88 [ D.5003 ])
            (nil))))
(insn 91 90 92 9 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:154 89 {*movsi_internal}
     (nil))
(insn 92 91 93 9 (set (reg:DI 89 [ D.5002 ])
        (sign_extend:DI (reg:SI 180))) mSector.c:154 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180)
        (nil)))
(insn 93 92 94 9 (parallel [
            (set (reg:DI 90 [ D.5002 ])
                (ashift:DI (reg:DI 89 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 94 93 95 9 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 9 (parallel [
            (set (reg/f:DI 91 [ D.5003 ])
                (plus:DI (reg:DI 90 [ D.5002 ])
                    (reg/f:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (expr_list:REG_DEAD (reg:DI 90 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 90 [ D.5002 ]))
                    (nil))))))
(insn 96 95 97 9 (set (reg/f:DI 92 [ D.5004 ])
        (mem/f:DI (reg/f:DI 91 [ D.5003 ]) [0 *_42+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.5003 ])
        (nil)))
(insn 97 96 98 9 (parallel [
            (set (reg/f:DI 93 [ D.5004 ])
                (plus:DI (reg/f:DI 92 [ D.5004 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 92 [ D.5004 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 98 97 99 9 (set (reg:SI 182)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:154 89 {*movsi_internal}
     (nil))
(insn 99 98 100 9 (set (reg:DI 94 [ D.5002 ])
        (sign_extend:DI (reg:SI 182))) mSector.c:154 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 182)
        (nil)))
(insn 100 99 101 9 (parallel [
            (set (reg:DI 95 [ D.5002 ])
                (ashift:DI (reg:DI 94 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 94 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 101 100 102 9 (parallel [
            (set (reg:DI 96 [ D.5006 ])
                (plus:DI (reg:DI 95 [ D.5002 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 102 101 103 9 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 103 102 104 9 (parallel [
            (set (reg/f:DI 97 [ D.5003 ])
                (plus:DI (reg:DI 96 [ D.5006 ])
                    (reg/f:DI 183)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:154 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (expr_list:REG_DEAD (reg:DI 96 [ D.5006 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 96 [ D.5006 ]))
                    (nil))))))
(insn 104 103 105 9 (set (reg/f:DI 98 [ D.5004 ])
        (mem/f:DI (reg/f:DI 97 [ D.5003 ]) [0 *_48+0 S8 A64])) mSector.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.5003 ])
        (nil)))
(insn 105 104 106 9 (set (reg:XF 99 [ D.5005 ])
        (mem:XF (plus:DI (reg/f:DI 98 [ D.5004 ])
                (const_int 32 [0x20])) [0 MEM[(long double *)_49 + 32B]+0 S16 A128])) mSector.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 98 [ D.5004 ])
        (nil)))
(insn 106 105 107 9 (set (mem:XF (reg/f:DI 93 [ D.5004 ]) [0 *_44+0 S16 A128])
        (reg:XF 99 [ D.5005 ])) mSector.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 99 [ D.5005 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ D.5004 ])
            (nil))))
(insn 107 106 108 9 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:155 89 {*movsi_internal}
     (nil))
(insn 108 107 109 9 (set (reg:DI 100 [ D.5002 ])
        (sign_extend:DI (reg:SI 184))) mSector.c:155 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(insn 109 108 110 9 (parallel [
            (set (reg:DI 101 [ D.5002 ])
                (ashift:DI (reg:DI 100 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 100 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 110 109 111 9 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 102 [ D.5003 ])
                (plus:DI (reg:DI 101 [ D.5002 ])
                    (reg/f:DI 185)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (expr_list:REG_DEAD (reg:DI 101 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 101 [ D.5002 ]))
                    (nil))))))
(insn 112 111 113 9 (set (reg/f:DI 103 [ D.5004 ])
        (mem/f:DI (reg/f:DI 102 [ D.5003 ]) [0 *_53+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 102 [ D.5003 ])
        (nil)))
(insn 113 112 114 9 (parallel [
            (set (reg/f:DI 104 [ D.5004 ])
                (plus:DI (reg/f:DI 103 [ D.5004 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 103 [ D.5004 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 115 9 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:155 89 {*movsi_internal}
     (nil))
(insn 115 114 116 9 (set (reg:DI 105 [ D.5002 ])
        (sign_extend:DI (reg:SI 186))) mSector.c:155 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 116 115 117 9 (parallel [
            (set (reg:DI 106 [ D.5002 ])
                (ashift:DI (reg:DI 105 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 105 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 117 116 118 9 (parallel [
            (set (reg:DI 107 [ D.5006 ])
                (plus:DI (reg:DI 106 [ D.5002 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 118 117 119 9 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 9 (parallel [
            (set (reg/f:DI 108 [ D.5003 ])
                (plus:DI (reg:DI 107 [ D.5006 ])
                    (reg/f:DI 187)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:155 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (expr_list:REG_DEAD (reg:DI 107 [ D.5006 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 107 [ D.5006 ]))
                    (nil))))))
(insn 120 119 121 9 (set (reg/f:DI 109 [ D.5004 ])
        (mem/f:DI (reg/f:DI 108 [ D.5003 ]) [0 *_59+0 S8 A64])) mSector.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 108 [ D.5003 ])
        (nil)))
(insn 121 120 122 9 (set (reg:XF 110 [ D.5005 ])
        (mem:XF (plus:DI (reg/f:DI 109 [ D.5004 ])
                (const_int 48 [0x30])) [0 MEM[(long double *)_60 + 48B]+0 S16 A128])) mSector.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.5004 ])
        (nil)))
(insn 122 121 123 9 (set (mem:XF (reg/f:DI 104 [ D.5004 ]) [0 *_55+0 S16 A128])
        (reg:XF 110 [ D.5005 ])) mSector.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 110 [ D.5005 ])
        (expr_list:REG_DEAD (reg/f:DI 104 [ D.5004 ])
            (nil))))
(insn 123 122 124 9 (set (reg:SI 188)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:157 89 {*movsi_internal}
     (nil))
(insn 124 123 125 9 (set (reg:DI 111 [ D.5002 ])
        (sign_extend:DI (reg:SI 188))) mSector.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 188)
        (nil)))
(insn 125 124 126 9 (parallel [
            (set (reg:DI 112 [ D.5002 ])
                (ashift:DI (reg:DI 111 [ D.5002 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 126 125 127 9 (set (reg/f:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 9 (parallel [
            (set (reg/f:DI 113 [ D.5004 ])
                (plus:DI (reg:DI 112 [ D.5002 ])
                    (reg/f:DI 189)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (expr_list:REG_DEAD (reg:DI 112 [ D.5002 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                        (reg:DI 112 [ D.5002 ]))
                    (nil))))))
(insn 128 127 129 9 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 129 128 130 9 (set (reg/f:DI 114 [ D.5004 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 190)
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:157 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 130 129 131 9 (set (reg:SI 191)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:157 89 {*movsi_internal}
     (nil))
(insn 131 130 132 9 (set (reg:DI 115 [ D.5002 ])
        (sign_extend:DI (reg:SI 191))) mSector.c:157 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
(insn 132 131 133 9 (parallel [
            (set (reg:DI 116 [ D.5002 ])
                (ashift:DI (reg:DI 115 [ D.5002 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 115 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 133 132 134 9 (parallel [
            (set (reg:DI 117 [ D.5006 ])
                (plus:DI (reg:DI 116 [ D.5002 ])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 134 133 135 9 (parallel [
            (set (reg/f:DI 118 [ D.5004 ])
                (plus:DI (reg/f:DI 114 [ D.5004 ])
                    (reg:DI 117 [ D.5006 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:157 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ D.5006 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ D.5004 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 135 134 136 9 (set (reg:XF 119 [ D.5005 ])
        (mem:XF (reg/f:DI 118 [ D.5004 ]) [0 *_69+0 S16 A128])) mSector.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 118 [ D.5004 ])
        (nil)))
(insn 136 135 251 9 (set (mem:XF (reg/f:DI 113 [ D.5004 ]) [0 *_64+0 S16 A128])
        (reg:XF 119 [ D.5005 ])) mSector.c:157 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 119 [ D.5005 ])
        (expr_list:REG_DEAD (reg/f:DI 113 [ D.5004 ])
            (nil))))
(jump_insn 251 136 252 9 (set (pc)
        (label_ref 179)) mSector.c:161 650 {jump}
     (nil)
 -> 179)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 252 251 184)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 192
(code_label 184 252 139 10 73 "" [1 uses])
(note 139 184 140 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 10 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:162 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 10 (set (reg:SI 122 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 192)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:162 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 192)
        (nil)))
(insn 142 141 143 10 (parallel [
            (set (reg:SI 123 [ D.5001 ])
                (plus:SI (reg:SI 122 [ D.5001 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:162 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 122 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 123 [ D.5001 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:162 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 123 [ D.5001 ])
        (nil)))
(jump_insn 144 143 145 10 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) mSector.c:162 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 148)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 145 144 146 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:162 87 {*movdi_internal_rex64}
     (nil))
(call_insn 147 146 148 11 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:162 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 193 194 195 196 197 198 199 200
(code_label 148 147 149 12 72 "" [1 uses])
(note 149 148 150 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 12 (set (reg:SI 193)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:163 89 {*movsi_internal}
     (nil))
(insn 151 150 152 12 (set (reg:DI 124 [ D.5006 ])
        (sign_extend:DI (reg:SI 193))) mSector.c:163 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(insn 152 151 153 12 (parallel [
            (set (reg:DI 125 [ D.5006 ])
                (plus:DI (reg:DI 124 [ D.5006 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 124 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 152 154 12 (parallel [
            (set (reg:DI 126 [ D.5006 ])
                (ashift:DI (reg:DI 125 [ D.5006 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 125 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 12 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (nil))
(insn 155 154 156 12 (parallel [
            (set (reg/f:DI 127 [ D.5003 ])
                (plus:DI (reg:DI 126 [ D.5006 ])
                    (reg/f:DI 194)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (expr_list:REG_DEAD (reg:DI 126 [ D.5006 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 126 [ D.5006 ]))
                    (nil))))))
(insn 156 155 157 12 (set (reg/f:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (nil))
(insn 157 156 158 12 (set (reg/f:DI 128 [ D.5003 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 195)
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (nil)))
(insn 158 157 159 12 (set (reg:SI 196)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:163 89 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 129 [ D.5002 ])
        (sign_extend:DI (reg:SI 196))) mSector.c:163 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 196)
        (nil)))
(insn 160 159 161 12 (parallel [
            (set (reg:DI 130 [ D.5002 ])
                (ashift:DI (reg:DI 129 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 129 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 12 (parallel [
            (set (reg/f:DI 131 [ D.5003 ])
                (plus:DI (reg/f:DI 128 [ D.5003 ])
                    (reg:DI 130 [ D.5002 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:163 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ D.5002 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ D.5003 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 162 161 163 12 (set (reg/f:DI 132 [ D.5004 ])
        (mem/f:DI (reg/f:DI 131 [ D.5003 ]) [0 *_82+0 S8 A64])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 131 [ D.5003 ])
        (nil)))
(insn 163 162 164 12 (set (mem/f:DI (reg/f:DI 127 [ D.5003 ]) [0 *_78+0 S8 A64])
        (reg/f:DI 132 [ D.5004 ])) mSector.c:163 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 132 [ D.5004 ])
        (expr_list:REG_DEAD (reg/f:DI 127 [ D.5003 ])
            (nil))))
(insn 164 163 165 12 (set (reg:SI 197)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:164 89 {*movsi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 133 [ D.5006 ])
        (sign_extend:DI (reg:SI 197))) mSector.c:164 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 197)
        (nil)))
(insn 166 165 167 12 (parallel [
            (set (reg:DI 134 [ D.5006 ])
                (plus:DI (reg:DI 133 [ D.5006 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 167 166 168 12 (parallel [
            (set (reg:DI 135 [ D.5006 ])
                (ashift:DI (reg:DI 134 [ D.5006 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 134 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 168 167 169 12 (set (reg/f:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (nil))
(insn 169 168 170 12 (parallel [
            (set (reg/f:DI 136 [ D.5004 ])
                (plus:DI (reg:DI 135 [ D.5006 ])
                    (reg/f:DI 198)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 198)
        (expr_list:REG_DEAD (reg:DI 135 [ D.5006 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])
                        (reg:DI 135 [ D.5006 ]))
                    (nil))))))
(insn 170 169 171 12 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (nil))
(insn 171 170 172 12 (set (reg/f:DI 137 [ D.5004 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 199)
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:164 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (nil)))
(insn 172 171 173 12 (set (reg:SI 200)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:164 89 {*movsi_internal}
     (nil))
(insn 173 172 174 12 (set (reg:DI 138 [ D.5002 ])
        (sign_extend:DI (reg:SI 200))) mSector.c:164 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 200)
        (nil)))
(insn 174 173 175 12 (parallel [
            (set (reg:DI 139 [ D.5002 ])
                (ashift:DI (reg:DI 138 [ D.5002 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 138 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 175 174 176 12 (parallel [
            (set (reg/f:DI 140 [ D.5004 ])
                (plus:DI (reg/f:DI 137 [ D.5004 ])
                    (reg:DI 139 [ D.5002 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:164 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 139 [ D.5002 ])
        (expr_list:REG_DEAD (reg/f:DI 137 [ D.5004 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 176 175 177 12 (set (reg:XF 141 [ D.5005 ])
        (mem:XF (reg/f:DI 140 [ D.5004 ]) [0 *_91+0 S16 A128])) mSector.c:164 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 140 [ D.5004 ])
        (nil)))
(insn 177 176 178 12 (set (mem:XF (reg/f:DI 136 [ D.5004 ]) [0 *_87+0 S16 A128])
        (reg:XF 141 [ D.5005 ])) mSector.c:164 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 141 [ D.5005 ])
        (expr_list:REG_DEAD (reg/f:DI 136 [ D.5004 ])
            (nil))))
(insn 178 177 179 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:161 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 201
(code_label 179 178 180 13 71 "" [1 uses])
(note 180 179 181 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 13 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:161 87 {*movdi_internal_rex64}
     (nil))
(insn 182 181 183 13 (set (reg:SI 120 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 201)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:161 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (nil)))
(insn 183 182 185 13 (parallel [
            (set (reg:SI 121 [ D.5001 ])
                (plus:SI (reg:SI 120 [ D.5001 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:161 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 120 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 185 183 186 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 121 [ D.5001 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:161 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 121 [ D.5001 ])
        (nil)))
(jump_insn 186 185 187 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) mSector.c:161 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 184)
;;  succ:       10
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202
(note 187 186 188 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 14 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:167 87 {*movdi_internal_rex64}
     (nil))
(insn 189 188 190 14 (set (reg:SI 142 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 202)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:167 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 190 189 191 14 (parallel [
            (set (reg:SI 143 [ D.5001 ])
                (plus:SI (reg:SI 142 [ D.5001 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:167 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 142 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 191 190 192 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 143 [ D.5001 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) mSector.c:167 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 143 [ D.5001 ])
        (nil)))
(jump_insn 192 191 193 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) mSector.c:167 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 196)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 193 192 194 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44d2875b48 *.LC10>)) mSector.c:167 87 {*movdi_internal_rex64}
     (nil))
(call_insn 195 194 196 15 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f44d29f7900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mSector.c:167 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 203 204 205 206 207 208 209 210 211 212 213 214 215 216
(code_label 196 195 197 16 74 "" [1 uses])
(note 197 196 198 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 16 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:168 89 {*movsi_internal}
     (nil))
(insn 199 198 200 16 (set (reg:DI 144 [ D.5006 ])
        (sign_extend:DI (reg:SI 203))) mSector.c:168 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 203)
        (nil)))
(insn 200 199 201 16 (parallel [
            (set (reg:DI 145 [ D.5006 ])
                (plus:DI (reg:DI 144 [ D.5006 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 144 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 201 200 202 16 (parallel [
            (set (reg:DI 146 [ D.5006 ])
                (ashift:DI (reg:DI 145 [ D.5006 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 145 [ D.5006 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 202 201 203 16 (set (reg/f:DI 204)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 203 202 204 16 (parallel [
            (set (reg/f:DI 147 [ D.5003 ])
                (plus:DI (reg:DI 146 [ D.5006 ])
                    (reg/f:DI 204)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 204)
        (expr_list:REG_DEAD (reg:DI 146 [ D.5006 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])
                        (reg:DI 146 [ D.5006 ]))
                    (nil))))))
(insn 204 203 205 16 (set (reg/f:DI 205)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 205 204 206 16 (set (reg/f:DI 148 [ D.5003 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 205)
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 205)
        (nil)))
(insn 206 205 207 16 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) mSector.c:168 89 {*movsi_internal}
     (nil))
(insn 207 206 208 16 (set (reg:DI 149 [ D.5002 ])
        (sign_extend:DI (reg:SI 206))) mSector.c:168 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 208 207 209 16 (parallel [
            (set (reg:DI 150 [ D.5002 ])
                (ashift:DI (reg:DI 149 [ D.5002 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 149 [ D.5002 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 16 (parallel [
            (set (reg/f:DI 151 [ D.5003 ])
                (plus:DI (reg/f:DI 148 [ D.5003 ])
                    (reg:DI 150 [ D.5002 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:168 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ D.5002 ])
        (expr_list:REG_DEAD (reg/f:DI 148 [ D.5003 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 210 209 211 16 (set (reg/f:DI 152 [ D.5004 ])
        (mem/f:DI (reg/f:DI 151 [ D.5003 ]) [0 *_103+0 S8 A64])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 151 [ D.5003 ])
        (nil)))
(insn 211 210 212 16 (set (mem/f:DI (reg/f:DI 147 [ D.5003 ]) [0 *_99+0 S8 A64])
        (reg/f:DI 152 [ D.5004 ])) mSector.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 152 [ D.5004 ])
        (expr_list:REG_DEAD (reg/f:DI 147 [ D.5003 ])
            (nil))))
(insn 212 211 213 16 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:171 87 {*movdi_internal_rex64}
     (nil))
(insn 213 212 214 16 (set (reg/f:DI 153 [ D.5003 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 207)
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])) mSector.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (nil)))
(insn 214 213 215 16 (set (reg:DI 5 di)
        (reg/f:DI 153 [ D.5003 ])) mSector.c:171 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 153 [ D.5003 ])
        (nil)))
(call_insn 215 214 216 16 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:171 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 216 215 217 16 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:172 87 {*movdi_internal_rex64}
     (nil))
(insn 217 216 218 16 (set (reg/f:DI 154 [ D.5004 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 208)
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])) mSector.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (nil)))
(insn 218 217 219 16 (set (reg:DI 5 di)
        (reg/f:DI 154 [ D.5004 ])) mSector.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 154 [ D.5004 ])
        (nil)))
(call_insn 219 218 220 16 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f44d2969000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) mSector.c:172 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 220 219 221 16 (set (reg/f:DI 209)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 221 220 222 16 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 nvp+0 S8 A64])) mSector.c:175 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 16 (set (mem/f/j:DI (plus:DI (reg/f:DI 209)
                (const_int 8 [0x8])) [0 f_3(D)->nvp+0 S8 A64])
        (reg/f:DI 210)) mSector.c:175 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (expr_list:REG_DEAD (reg/f:DI 209)
            (nil))))
(insn 223 222 224 16 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 224 223 225 16 (set (reg/f:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 vel+0 S8 A64])) mSector.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 16 (set (mem/f/j:DI (plus:DI (reg/f:DI 211)
                (const_int 24 [0x18])) [0 f_3(D)->vel+0 S8 A64])
        (reg/f:DI 212)) mSector.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 212)
        (expr_list:REG_DEAD (reg/f:DI 211)
            (nil))))
(insn 226 225 227 16 (set (reg/f:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 227 226 228 16 (set (reg:SI 155 [ D.5001 ])
        (mem/j:SI (plus:DI (reg/f:DI 213)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])) mSector.c:179 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 213)
        (nil)))
(insn 228 227 229 16 (parallel [
            (set (reg:SI 156 [ D.5001 ])
                (plus:SI (reg:SI 155 [ D.5001 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:179 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 155 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 229 228 230 16 (set (reg/f:DI 214)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 f+0 S8 A64])) mSector.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 230 229 231 16 (set (mem/j:SI (plus:DI (reg/f:DI 214)
                (const_int 4 [0x4])) [0 f_3(D)->n_nvp+0 S4 A32])
        (reg:SI 156 [ D.5001 ])) mSector.c:179 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 214)
        (expr_list:REG_DEAD (reg:SI 156 [ D.5001 ])
            (nil))))
(insn 231 230 232 16 (set (reg/f:DI 215)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:180 87 {*movdi_internal_rex64}
     (nil))
(insn 232 231 233 16 (set (reg:SI 157 [ D.5001 ])
        (mem:SI (reg/f:DI 215) [0 *st_indx_12(D)+0 S4 A32])) mSector.c:180 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 215)
        (nil)))
(insn 233 232 234 16 (parallel [
            (set (reg:SI 158 [ D.5001 ])
                (plus:SI (reg:SI 157 [ D.5001 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:180 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 157 [ D.5001 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 234 233 235 16 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 st_indx+0 S8 A64])) mSector.c:180 87 {*movdi_internal_rex64}
     (nil))
(insn 235 234 236 16 (set (mem:SI (reg/f:DI 216) [0 *st_indx_12(D)+0 S4 A32])
        (reg:SI 158 [ D.5001 ])) mSector.c:180 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 216)
        (expr_list:REG_DEAD (reg:SI 158 [ D.5001 ])
            (nil))))
(insn 236 235 239 16 (set (reg:SI 159 [ D.5001 ])
        (const_int 1 [0x1])) mSector.c:182 89 {*movsi_internal}
     (nil))
(insn 239 236 243 16 (set (reg:SI 160 [ <retval> ])
        (reg:SI 159 [ D.5001 ])) mSector.c:182 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159 [ D.5001 ])
        (nil)))
(insn 243 239 246 16 (set (reg/i:SI 0 ax)
        (reg:SI 160 [ <retval> ])) mSector.c:183 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 160 [ <retval> ])
        (nil)))
(insn 246 243 0 16 (use (reg/i:SI 0 ax)) mSector.c:183 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _add_nvp_bound (_add_nvp_bound, funcdef_no=10, decl_uid=4061, cgraph_uid=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 88.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r116: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r116,l0) best SIREG, allocno GENERAL_REGS
    r115: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r115,l0) best DREG, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a55 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r93,l0) best AREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r78,l0) best SIREG, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r68,l0) best DREG, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r64,l0) best CREG, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r93,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a3(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r115,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a8(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a10(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a12(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r68,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r64,l0) costs: AREG:0 DREG:0 CREG:-1 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a19(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a26(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a27(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a28(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a30(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a32(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a34(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a40(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a41(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a42(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a44(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a47(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a52(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a53(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a55(r95,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a56(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 99(l0): point = 0
   Insn 96(l0): point = 2
   Insn 92(l0): point = 4
   Insn 89(l0): point = 6
   Insn 88(l0): point = 8
   Insn 87(l0): point = 10
   Insn 86(l0): point = 12
   Insn 85(l0): point = 14
   Insn 84(l0): point = 16
   Insn 83(l0): point = 18
   Insn 82(l0): point = 20
   Insn 81(l0): point = 22
   Insn 80(l0): point = 24
   Insn 79(l0): point = 26
   Insn 78(l0): point = 28
   Insn 77(l0): point = 30
   Insn 76(l0): point = 32
   Insn 75(l0): point = 34
   Insn 74(l0): point = 36
   Insn 73(l0): point = 38
   Insn 72(l0): point = 40
   Insn 71(l0): point = 42
   Insn 70(l0): point = 44
   Insn 69(l0): point = 46
   Insn 68(l0): point = 48
   Insn 67(l0): point = 50
   Insn 66(l0): point = 52
   Insn 65(l0): point = 54
   Insn 64(l0): point = 56
   Insn 63(l0): point = 58
   Insn 62(l0): point = 60
   Insn 61(l0): point = 62
   Insn 60(l0): point = 64
   Insn 59(l0): point = 66
   Insn 58(l0): point = 68
   Insn 57(l0): point = 70
   Insn 56(l0): point = 72
   Insn 55(l0): point = 74
   Insn 54(l0): point = 76
   Insn 53(l0): point = 78
   Insn 52(l0): point = 80
   Insn 51(l0): point = 82
   Insn 50(l0): point = 84
   Insn 49(l0): point = 86
   Insn 48(l0): point = 88
   Insn 47(l0): point = 90
   Insn 46(l0): point = 92
   Insn 45(l0): point = 94
   Insn 44(l0): point = 96
   Insn 43(l0): point = 98
   Insn 42(l0): point = 100
   Insn 41(l0): point = 102
   Insn 40(l0): point = 104
   Insn 39(l0): point = 106
   Insn 38(l0): point = 108
   Insn 37(l0): point = 110
   Insn 36(l0): point = 112
   Insn 35(l0): point = 114
   Insn 34(l0): point = 116
   Insn 33(l0): point = 118
   Insn 32(l0): point = 120
   Insn 31(l0): point = 122
   Insn 30(l0): point = 124
   Insn 29(l0): point = 126
   Insn 28(l0): point = 128
   Insn 27(l0): point = 130
   Insn 26(l0): point = 132
   Insn 25(l0): point = 134
   Insn 24(l0): point = 136
   Insn 23(l0): point = 138
   Insn 22(l0): point = 140
   Insn 21(l0): point = 142
   Insn 20(l0): point = 144
   Insn 19(l0): point = 146
   Insn 18(l0): point = 148
   Insn 17(l0): point = 150
   Insn 16(l0): point = 152
   Insn 15(l0): point = 154
   Insn 14(l0): point = 156
   Insn 13(l0): point = 158
   Insn 12(l0): point = 160
   Insn 11(l0): point = 162
   Insn 10(l0): point = 164
   Insn 6(l0): point = 166
   Insn 5(l0): point = 168
   Insn 4(l0): point = 170
   Insn 3(l0): point = 172
   Insn 2(l0): point = 174
 a0(r93): [3..4]
 a1(r92): [5..6]
 a2(r91): [11..20]
 a3(r116): [13..16]
 a4(r115): [15..18]
 a5(r90): [21..22]
 a6(r88): [21..38]
 a7(r113): [27..32] [23..24]
 a8(r114): [25..26]
 a9(r89): [29..34]
 a10(r112): [35..36]
 a11(r111): [39..40]
 a12(r87): [45..56]
 a13(r78): [47..90]
 a14(r68): [49..126]
 a15(r64): [51..138]
 a16(r110): [53..54]
 a17(r86): [57..58]
 a18(r85): [59..60]
 a19(r83): [59..66]
 a20(r84): [61..62]
 a21(r109): [63..64]
 a22(r82): [67..68]
 a23(r81): [69..70]
 a24(r79): [69..86]
 a25(r107): [75..80] [71..72]
 a26(r108): [73..74]
 a27(r80): [77..82]
 a28(r106): [83..84]
 a29(r105): [87..88]
 a30(r77): [91..92]
 a31(r76): [93..94]
 a32(r73): [93..102]
 a33(r75): [95..96]
 a34(r74): [97..98]
 a35(r104): [99..100]
 a36(r72): [103..104]
 a37(r71): [105..106]
 a38(r69): [105..122]
 a39(r102): [111..116] [107..108]
 a40(r103): [109..110]
 a41(r70): [113..118]
 a42(r101): [119..120]
 a43(r100): [123..124]
 a44(r67): [127..128]
 a45(r99): [129..130]
 a46(r66): [129..132]
 a47(r65): [133..134]
 a48(r98): [135..136]
 a49(r63): [139..140]
 a50(r97): [141..142]
 a51(r62): [141..144]
 a52(r61): [145..146]
 a53(r60): [147..148]
 a54(r96): [149..150]
 a55(r95): [153..154]
 a56(r59): [161..162]
 a57(r94): [163..164]
Compressing live ranges: from 177 to 90 - 50%
Ranges after the compression:
 a0(r93): [0..1]
 a1(r92): [2..3]
 a2(r91): [4..5]
 a3(r116): [4..5]
 a4(r115): [4..5]
 a5(r90): [6..7]
 a6(r88): [6..15]
 a7(r113): [12..13] [8..9]
 a8(r114): [10..11]
 a9(r89): [12..13]
 a10(r112): [14..15]
 a11(r111): [16..17]
 a12(r87): [18..19]
 a13(r78): [18..41]
 a14(r68): [18..65]
 a15(r64): [18..73]
 a16(r110): [18..19]
 a17(r86): [20..21]
 a18(r85): [22..23]
 a19(r83): [22..27]
 a20(r84): [24..25]
 a21(r109): [26..27]
 a22(r82): [28..29]
 a23(r81): [30..31]
 a24(r79): [30..39]
 a25(r107): [36..37] [32..33]
 a26(r108): [34..35]
 a27(r80): [36..37]
 a28(r106): [38..39]
 a29(r105): [40..41]
 a30(r77): [42..43]
 a31(r76): [44..45]
 a32(r73): [44..51]
 a33(r75): [46..47]
 a34(r74): [48..49]
 a35(r104): [50..51]
 a36(r72): [52..53]
 a37(r71): [54..55]
 a38(r69): [54..63]
 a39(r102): [60..61] [56..57]
 a40(r103): [58..59]
 a41(r70): [60..61]
 a42(r101): [62..63]
 a43(r100): [64..65]
 a44(r67): [66..67]
 a45(r99): [68..69]
 a46(r66): [68..69]
 a47(r65): [70..71]
 a48(r98): [72..73]
 a49(r63): [74..75]
 a50(r97): [76..77]
 a51(r62): [76..77]
 a52(r61): [78..79]
 a53(r60): [80..81]
 a54(r96): [82..83]
 a55(r95): [84..85]
 a56(r59): [86..87]
 a57(r94): [88..89]
  regions=1, blocks=3, points=90
    allocnos=58 (big 0), copies=0, conflicts=0, ranges=61
Disposition:
   56:r59  l0     0   53:r60  l0     0   52:r61  l0     0   51:r62  l0     1
   49:r63  l0     0   15:r64  l0     2   47:r65  l0     0   46:r66  l0     1
   44:r67  l0     0   14:r68  l0     5   38:r69  l0     4   41:r70  l0     1
   37:r71  l0     0   36:r72  l0     0   32:r73  l0     0   34:r74  l0     1
   33:r75  l0     1   31:r76  l0     1   30:r77  l0     0   13:r78  l0     4
   24:r79  l0    37   27:r80  l0     1   23:r81  l0     0   22:r82  l0     0
   19:r83  l0     0   20:r84  l0     1   18:r85  l0     1   17:r86  l0     0
   12:r87  l0     0    6:r88  l0     2    9:r89  l0     1    5:r90  l0     0
    2:r91  l0     2    1:r92  l0     0    0:r93  l0     0   57:r94  l0     0
   55:r95  l0     0   54:r96  l0     0   50:r97  l0     0   48:r98  l0     0
   45:r99  l0     0   43:r100 l0     0   42:r101 l0     0   39:r102 l0     0
   40:r103 l0     0   35:r104 l0     1   29:r105 l0     0   28:r106 l0     0
   25:r107 l0     0   26:r108 l0     0   21:r109 l0     1   16:r110 l0     1
   11:r111 l0     0   10:r112 l0     0    7:r113 l0     0    8:r114 l0     0
    4:r115 l0     1    3:r116 l0     0
+++Costs: overall -9, reg -9, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_add_nvp_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d,3u} r1={6d,3u} r2={5d,2u} r4={6d,3u} r5={7d,4u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,1u} r17={27d} r18={3d} r19={3d} r20={1d,25u,3e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,2u} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u,1e} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u,1e} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,2u,1e} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,2u,1e} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,2u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={4d,4u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={4d,4u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={4d,4u} r114={1d,1u} r115={1d,1u} r116={1d,1u} 
;;    total ref usage 380{252d,120u,8e} in 88{85 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:185 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (reg:SI 4 si [ i ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ i ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])
        (reg:SI 1 dx [ j ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ j ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
        (reg:DI 2 cx [ bound ])) mSector.c:185 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ bound ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])
        (reg:SI 37 r8 [ k ])) mSector.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ k ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:186 89 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 59 [ st_indx.2 ])
                (plus:SI (reg:SI 94)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:186 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 94)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 st_indx+0 S4 A32])
        (reg:SI 59 [ st_indx.2 ])) mSector.c:186 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ st_indx.2 ])
        (nil)))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 4 [0x4])) mSector.c:187 89 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f44d29f7700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mSector.c:187 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 95)
        (reg:DI 0 ax)) mSector.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])
        (reg:DI 95)) mSector.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 17 16 18 2 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 60 [ D.5008 ])
        (sign_extend:DI (reg:SI 96))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 96)
        (nil)))
(insn 19 18 20 2 (parallel [
            (set (reg:DI 61 [ D.5008 ])
                (plus:DI (reg:DI 60 [ D.5008 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 60 [ D.5008 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 20 19 21 2 (parallel [
            (set (reg:DI 62 [ D.5008 ])
                (ashift:DI (reg:DI 61 [ D.5008 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5008 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 2 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg/f:DI 63 [ D.5009 ])
                (plus:DI (reg:DI 62 [ D.5008 ])
                    (reg/f:DI 97)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_DEAD (reg:DI 62 [ D.5008 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
                        (reg:DI 62 [ D.5008 ]))
                    (nil))))))
(insn 23 22 24 2 (set (reg/f:DI 64 [ D.5010 ])
        (mem/f:DI (reg/f:DI 63 [ D.5009 ]) [0 *_9+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.5009 ])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 k+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 65 [ D.5011 ])
        (sign_extend:DI (reg:SI 98))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg:DI 66 [ D.5011 ])
                (ashift:DI (reg:DI 65 [ D.5011 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.5011 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 27 26 28 2 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 67 [ D.5009 ])
                (plus:DI (reg:DI 66 [ D.5011 ])
                    (reg/f:DI 99)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (expr_list:REG_DEAD (reg:DI 66 [ D.5011 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 bound+0 S8 A64])
                        (reg:DI 66 [ D.5011 ]))
                    (nil))))))
(insn 29 28 30 2 (set (reg/f:DI 68 [ D.5010 ])
        (mem/f:DI (reg/f:DI 67 [ D.5009 ]) [0 *_13+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.5009 ])
        (nil)))
(insn 30 29 31 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 69 [ D.5012 ])
        (mem/f:DI (reg/f:DI 100) [0 *f_15(D)+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (nil)))
(insn 32 31 33 2 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 70 [ D.5011 ])
        (sign_extend:DI (reg:SI 101))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 101)
        (nil)))
(insn 34 33 35 2 (set (reg:DI 102)
        (reg:DI 70 [ D.5011 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:DI 102)
                (ashift:DI (reg:DI 102)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 36 35 37 2 (parallel [
            (set (reg:DI 102)
                (plus:DI (reg:DI 102)
                    (reg:DI 70 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.5011 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 70 [ D.5011 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 103)
                (ashift:DI (reg:DI 102)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 102)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 38 37 39 2 (set (reg:DI 102)
        (reg:DI 103)) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(insn 39 38 40 2 (set (reg:DI 71 [ D.5011 ])
        (reg:DI 102)) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(insn 40 39 41 2 (parallel [
            (set (reg/f:DI 72 [ D.5012 ])
                (plus:DI (reg/f:DI 69 [ D.5012 ])
                    (reg:DI 71 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.5011 ])
        (expr_list:REG_DEAD (reg/f:DI 69 [ D.5012 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 41 40 42 2 (set (reg/f:DI 73 [ D.5009 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 72 [ D.5012 ])
                (const_int 8 [0x8])) [0 _20->nvp+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 72 [ D.5012 ])
        (nil)))
(insn 42 41 43 2 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 74 [ D.5008 ])
        (sign_extend:DI (reg:SI 104))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
(insn 44 43 45 2 (parallel [
            (set (reg:DI 75 [ D.5008 ])
                (plus:DI (reg:DI 74 [ D.5008 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 74 [ D.5008 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 45 44 46 2 (parallel [
            (set (reg:DI 76 [ D.5008 ])
                (ashift:DI (reg:DI 75 [ D.5008 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 75 [ D.5008 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 45 47 2 (parallel [
            (set (reg/f:DI 77 [ D.5009 ])
                (plus:DI (reg/f:DI 73 [ D.5009 ])
                    (reg:DI 76 [ D.5008 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.5008 ])
        (expr_list:REG_DEAD (reg/f:DI 73 [ D.5009 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 47 46 48 2 (set (reg/f:DI 78 [ D.5010 ])
        (mem/f:DI (reg/f:DI 77 [ D.5009 ]) [0 *_25+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 77 [ D.5009 ])
        (nil)))
(insn 48 47 49 2 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg/f:DI 79 [ D.5012 ])
        (mem/f:DI (reg/f:DI 105) [0 *f_15(D)+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (nil)))
(insn 50 49 51 2 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 80 [ D.5011 ])
        (sign_extend:DI (reg:SI 106))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 52 51 53 2 (set (reg:DI 107)
        (reg:DI 80 [ D.5011 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 107)
                (ashift:DI (reg:DI 107)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 54 53 55 2 (parallel [
            (set (reg:DI 107)
                (plus:DI (reg:DI 107)
                    (reg:DI 80 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 80 [ D.5011 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 80 [ D.5011 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 55 54 56 2 (parallel [
            (set (reg:DI 108)
                (ashift:DI (reg:DI 107)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 107)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 56 55 57 2 (set (reg:DI 107)
        (reg:DI 108)) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(insn 57 56 58 2 (set (reg:DI 81 [ D.5011 ])
        (reg:DI 107)) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 107)
        (nil)))
(insn 58 57 59 2 (parallel [
            (set (reg/f:DI 82 [ D.5012 ])
                (plus:DI (reg/f:DI 79 [ D.5012 ])
                    (reg:DI 81 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.5011 ])
        (expr_list:REG_DEAD (reg/f:DI 79 [ D.5012 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 59 58 60 2 (set (reg/f:DI 83 [ D.5009 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 82 [ D.5012 ])
                (const_int 8 [0x8])) [0 _30->nvp+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 82 [ D.5012 ])
        (nil)))
(insn 60 59 61 2 (set (reg:SI 109)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 j+0 S4 A32])) mSector.c:189 89 {*movsi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:DI 84 [ D.5011 ])
        (sign_extend:DI (reg:SI 109))) mSector.c:189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 109)
        (nil)))
(insn 62 61 63 2 (parallel [
            (set (reg:DI 85 [ D.5011 ])
                (ashift:DI (reg:DI 84 [ D.5011 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 84 [ D.5011 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 63 62 64 2 (parallel [
            (set (reg/f:DI 86 [ D.5009 ])
                (plus:DI (reg/f:DI 83 [ D.5009 ])
                    (reg:DI 85 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:189 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ D.5011 ])
        (expr_list:REG_DEAD (reg/f:DI 83 [ D.5009 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 64 63 65 2 (set (reg/f:DI 87 [ D.5010 ])
        (mem/f:DI (reg/f:DI 86 [ D.5009 ]) [0 *_34+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 86 [ D.5009 ])
        (nil)))
(insn 65 64 66 2 (set (reg:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mSector.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 2 (set (reg:DI 37 r8)
        (reg:DI 110)) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 110)
        (nil)))
(insn 67 66 68 2 (set (reg:DI 2 cx)
        (reg/f:DI 64 [ D.5010 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ D.5010 ])
        (nil)))
(insn 68 67 69 2 (set (reg:DI 1 dx)
        (reg/f:DI 68 [ D.5010 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.5010 ])
        (nil)))
(insn 69 68 70 2 (set (reg:DI 4 si)
        (reg/f:DI 78 [ D.5010 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 78 [ D.5010 ])
        (nil)))
(insn 70 69 71 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.5010 ])) mSector.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 87 [ D.5010 ])
        (nil)))
(call_insn 71 70 72 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_intersection") [flags 0x41]  <function_decl 0x7f44d29fc200 find_intersection>) [0 find_intersection S1 A8])
            (const_int 0 [0]))) mSector.c:189 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (nil)))))))
(insn 72 71 73 2 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (reg/f:DI 88 [ D.5012 ])
        (mem/f:DI (reg/f:DI 111) [0 *f_15(D)+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (nil)))
(insn 74 73 75 2 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) mSector.c:190 89 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:DI 89 [ D.5011 ])
        (sign_extend:DI (reg:SI 112))) mSector.c:190 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 76 75 77 2 (set (reg:DI 113)
        (reg:DI 89 [ D.5011 ])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 113)
                (ashift:DI (reg:DI 113)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 78 77 79 2 (parallel [
            (set (reg:DI 113)
                (plus:DI (reg:DI 113)
                    (reg:DI 89 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.5011 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 89 [ D.5011 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 79 78 80 2 (parallel [
            (set (reg:DI 114)
                (ashift:DI (reg:DI 113)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 113)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 80 79 81 2 (set (reg:DI 113)
        (reg:DI 114)) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 114)
        (nil)))
(insn 81 80 82 2 (set (reg:DI 90 [ D.5011 ])
        (reg:DI 113)) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(insn 82 81 83 2 (parallel [
            (set (reg/f:DI 91 [ D.5012 ])
                (plus:DI (reg/f:DI 88 [ D.5012 ])
                    (reg:DI 90 [ D.5011 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ D.5011 ])
        (expr_list:REG_DEAD (reg/f:DI 88 [ D.5012 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 83 82 84 2 (set (reg:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 p+0 S8 A64])) mSector.c:190 87 {*movdi_internal_rex64}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg:DI 116)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:190 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 85 84 86 2 (set (reg:DI 1 dx)
        (reg:DI 115)) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 115)
        (nil)))
(insn 86 85 87 2 (set (reg:DI 4 si)
        (reg:DI 116)) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 116)
        (nil)))
(insn 87 86 88 2 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.5012 ])) mSector.c:190 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.5012 ])
        (nil)))
(call_insn 88 87 89 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add_nvp") [flags 0x3]  <function_decl 0x7f44d2a01300 add_nvp>) [0 add_nvp S1 A8])
            (const_int 0 [0]))) mSector.c:190 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 89 88 92 2 (set (reg:SI 92 [ D.5013 ])
        (const_int 1 [0x1])) mSector.c:191 89 {*movsi_internal}
     (nil))
(insn 92 89 96 2 (set (reg:SI 93 [ <retval> ])
        (reg:SI 92 [ D.5013 ])) mSector.c:191 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.5013 ])
        (nil)))
(insn 96 92 99 2 (set (reg/i:SI 0 ax)
        (reg:SI 93 [ <retval> ])) mSector.c:192 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ <retval> ])
        (nil)))
(insn 99 96 0 2 (use (reg/i:SI 0 ax)) mSector.c:192 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _is_to_add (_is_to_add, funcdef_no=11, decl_uid=4069, cgraph_uid=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)
Building IRA IR
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 93.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r112,l0) best AREG, allocno GENERAL_REGS
    r111: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r111,l0) best AREG, allocno GENERAL_REGS
    r110: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r110,l0) best DIREG, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r106,l0) best SIREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r101,l0) best DREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r86,l0) best DREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r80,l0) best AREG, allocno GENERAL_REGS
    r79: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a44 (r79,l0) best DIREG, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r74,l0) best SIREG, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r68,l0) best DREG, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r64,l0) best CREG, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r112,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a2(r111,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r101,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a14(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a15(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a19(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r96,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r86,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a29(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a34(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a35(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a39(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a41(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r80,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a44(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r68,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r64,l0) costs: AREG:0 DREG:0 CREG:-1 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a50(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a55(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a56(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a57(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a58(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a60(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a62(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a66(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a67(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a68(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a69(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 113(l0): point = 0
   Insn 110(l0): point = 2
   Insn 106(l0): point = 4
   Insn 103(l0): point = 7
   Insn 116(l0): point = 10
   Insn 98(l0): point = 12
   Insn 96(l0): point = 15
   Insn 95(l0): point = 17
   Insn 94(l0): point = 19
   Insn 93(l0): point = 21
   Insn 92(l0): point = 23
   Insn 91(l0): point = 25
   Insn 90(l0): point = 27
   Insn 89(l0): point = 29
   Insn 88(l0): point = 31
   Insn 87(l0): point = 33
   Insn 86(l0): point = 35
   Insn 85(l0): point = 37
   Insn 84(l0): point = 39
   Insn 83(l0): point = 41
   Insn 82(l0): point = 43
   Insn 81(l0): point = 45
   Insn 80(l0): point = 47
   Insn 79(l0): point = 49
   Insn 78(l0): point = 51
   Insn 77(l0): point = 53
   Insn 76(l0): point = 55
   Insn 75(l0): point = 57
   Insn 74(l0): point = 59
   Insn 73(l0): point = 61
   Insn 72(l0): point = 63
   Insn 71(l0): point = 65
   Insn 69(l0): point = 68
   Insn 68(l0): point = 70
   Insn 67(l0): point = 72
   Insn 66(l0): point = 74
   Insn 65(l0): point = 76
   Insn 64(l0): point = 78
   Insn 63(l0): point = 80
   Insn 62(l0): point = 82
   Insn 61(l0): point = 84
   Insn 60(l0): point = 86
   Insn 59(l0): point = 88
   Insn 58(l0): point = 90
   Insn 57(l0): point = 92
   Insn 56(l0): point = 94
   Insn 55(l0): point = 96
   Insn 54(l0): point = 98
   Insn 53(l0): point = 100
   Insn 52(l0): point = 102
   Insn 51(l0): point = 104
   Insn 50(l0): point = 106
   Insn 49(l0): point = 108
   Insn 48(l0): point = 110
   Insn 47(l0): point = 112
   Insn 46(l0): point = 114
   Insn 45(l0): point = 116
   Insn 44(l0): point = 118
   Insn 43(l0): point = 120
   Insn 41(l0): point = 123
   Insn 40(l0): point = 125
   Insn 39(l0): point = 127
   Insn 38(l0): point = 129
   Insn 37(l0): point = 131
   Insn 36(l0): point = 133
   Insn 35(l0): point = 135
   Insn 34(l0): point = 137
   Insn 33(l0): point = 139
   Insn 32(l0): point = 141
   Insn 31(l0): point = 143
   Insn 30(l0): point = 145
   Insn 29(l0): point = 147
   Insn 28(l0): point = 149
   Insn 27(l0): point = 151
   Insn 26(l0): point = 153
   Insn 25(l0): point = 155
   Insn 24(l0): point = 157
   Insn 23(l0): point = 159
   Insn 22(l0): point = 161
   Insn 21(l0): point = 163
   Insn 20(l0): point = 165
   Insn 19(l0): point = 167
   Insn 18(l0): point = 169
   Insn 17(l0): point = 171
   Insn 16(l0): point = 173
   Insn 15(l0): point = 175
   Insn 14(l0): point = 177
   Insn 13(l0): point = 179
   Insn 12(l0): point = 181
   Insn 11(l0): point = 183
   Insn 10(l0): point = 185
   Insn 9(l0): point = 187
   Insn 8(l0): point = 189
   Insn 4(l0): point = 191
   Insn 3(l0): point = 193
   Insn 2(l0): point = 195
 a0(r112): [3..4]
 a1(r59): [10..12] [5..7]
 a2(r111): [18..19]
 a3(r110): [24..29]
 a4(r106): [26..41]
 a5(r101): [28..55]
 a6(r109): [30..31]
 a7(r128): [32..33]
 a8(r108): [32..35]
 a9(r107): [36..37]
 a10(r127): [38..39]
 a11(r105): [42..43]
 a12(r126): [44..45]
 a13(r104): [44..47]
 a14(r103): [48..49]
 a15(r102): [50..51]
 a16(r125): [52..53]
 a17(r100): [56..57]
 a18(r99): [58..59]
 a19(r97): [58..65]
 a20(r98): [60..61]
 a21(r124): [62..63]
 a22(r96): [71..72]
 a23(r95): [77..82]
 a24(r91): [79..94]
 a25(r86): [81..108]
 a26(r94): [83..84]
 a27(r123): [85..86]
 a28(r93): [85..88]
 a29(r92): [89..90]
 a30(r122): [91..92]
 a31(r90): [95..96]
 a32(r121): [97..98]
 a33(r89): [97..100]
 a34(r88): [101..102]
 a35(r87): [103..104]
 a36(r120): [105..106]
 a37(r85): [109..110]
 a38(r84): [111..112]
 a39(r81): [111..120]
 a40(r83): [113..114]
 a41(r82): [115..116]
 a42(r119): [117..118]
 a43(r80): [126..127]
 a44(r79): [132..139]
 a45(r74): [134..151]
 a46(r68): [136..165]
 a47(r64): [138..177]
 a48(r78): [140..141]
 a49(r77): [142..143]
 a50(r75): [142..149]
 a51(r76): [144..145]
 a52(r118): [146..147]
 a53(r73): [152..153]
 a54(r72): [154..155]
 a55(r69): [154..163]
 a56(r71): [156..157]
 a57(r70): [158..159]
 a58(r117): [160..161]
 a59(r67): [166..167]
 a60(r116): [168..169]
 a61(r66): [168..171]
 a62(r65): [172..173]
 a63(r115): [174..175]
 a64(r63): [178..179]
 a65(r114): [180..181]
 a66(r62): [180..183]
 a67(r61): [184..185]
 a68(r60): [186..187]
 a69(r113): [188..189]
Compressing live ranges: from 198 to 108 - 54%
Ranges after the compression:
 a0(r112): [0..1]
 a1(r59): [2..5]
 a2(r111): [6..7]
 a3(r110): [8..9]
 a4(r106): [8..17]
 a5(r101): [8..27]
 a6(r109): [10..11]
 a7(r128): [12..13]
 a8(r108): [12..13]
 a9(r107): [14..15]
 a10(r127): [16..17]
 a11(r105): [18..19]
 a12(r126): [20..21]
 a13(r104): [20..21]
 a14(r103): [22..23]
 a15(r102): [24..25]
 a16(r125): [26..27]
 a17(r100): [28..29]
 a18(r99): [30..31]
 a19(r97): [30..35]
 a20(r98): [32..33]
 a21(r124): [34..35]
 a22(r96): [36..37]
 a23(r95): [38..39]
 a24(r91): [38..47]
 a25(r86): [38..57]
 a26(r94): [40..41]
 a27(r123): [42..43]
 a28(r93): [42..43]
 a29(r92): [44..45]
 a30(r122): [46..47]
 a31(r90): [48..49]
 a32(r121): [50..51]
 a33(r89): [50..51]
 a34(r88): [52..53]
 a35(r87): [54..55]
 a36(r120): [56..57]
 a37(r85): [58..59]
 a38(r84): [60..61]
 a39(r81): [60..67]
 a40(r83): [62..63]
 a41(r82): [64..65]
 a42(r119): [66..67]
 a43(r80): [68..69]
 a44(r79): [70..71]
 a45(r74): [70..79]
 a46(r68): [70..89]
 a47(r64): [70..97]
 a48(r78): [72..73]
 a49(r77): [74..75]
 a50(r75): [74..79]
 a51(r76): [76..77]
 a52(r118): [78..79]
 a53(r73): [80..81]
 a54(r72): [82..83]
 a55(r69): [82..89]
 a56(r71): [84..85]
 a57(r70): [86..87]
 a58(r117): [88..89]
 a59(r67): [90..91]
 a60(r116): [92..93]
 a61(r66): [92..93]
 a62(r65): [94..95]
 a63(r115): [96..97]
 a64(r63): [98..99]
 a65(r114): [100..101]
 a66(r62): [100..101]
 a67(r61): [102..103]
 a68(r60): [104..105]
 a69(r113): [106..107]
  regions=1, blocks=8, points=108
    allocnos=70 (big 0), copies=0, conflicts=0, ranges=70
Disposition:
    1:r59  l0     0   68:r60  l0     0   67:r61  l0     0   66:r62  l0     1
   64:r63  l0     0   47:r64  l0     2   62:r65  l0     0   61:r66  l0     1
   59:r67  l0     0   46:r68  l0     1   55:r69  l0     0   57:r70  l0     4
   56:r71  l0     4   54:r72  l0     4   53:r73  l0     0   45:r74  l0     4
   50:r75  l0     0   51:r76  l0     5   49:r77  l0     5   48:r78  l0     0
   44:r79  l0     0   43:r80  l0     0   39:r81  l0     0   41:r82  l0     1
   40:r83  l0     1   38:r84  l0     1   37:r85  l0     0   25:r86  l0     1
   35:r87  l0     0   34:r88  l0     0   33:r89  l0     2   31:r90  l0     0
   24:r91  l0     2   29:r92  l0     0   28:r93  l0     4   26:r94  l0     0
   23:r95  l0     0   22:r96  l0     0   19:r97  l0     0   20:r98  l0     1
   18:r99  l0     1   17:r100 l0     0    5:r101 l0     1   15:r102 l0     0
   14:r103 l0     0   13:r104 l0     2   11:r105 l0     0    4:r106 l0     2
    9:r107 l0     0    8:r108 l0     4    6:r109 l0     0    3:r110 l0     0
    2:r111 l0     0    0:r112 l0     0   69:r113 l0     0   65:r114 l0     0
   63:r115 l0     0   60:r116 l0     0   58:r117 l0     4   52:r118 l0     5
   42:r119 l0     1   36:r120 l0     0   32:r121 l0     0   30:r122 l0     0
   27:r123 l0     0   21:r124 l0     1   16:r125 l0     0   12:r126 l0     0
   10:r127 l0     0    7:r128 l0     0
+++Costs: overall -14, reg -14, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_is_to_add

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={5d,5u} r1={7d,4u} r2={5d,1u} r4={7d,4u} r5={7d,4u} r6={1d,7u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,10u} r17={31d,3u} r18={3d} r19={3d} r20={1d,26u,6e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={2d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u,1e} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u,1e} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u,1e} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u,1e} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u,1e} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} 
;;    total ref usage 417{261d,144u,12e} in 96{93 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 113 114 115 116 117 118
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])
        (reg:SI 5 di [ xp ])) mSector.c:194 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ xp ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
        (reg:DI 4 si [ bound ])) mSector.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bound ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])
        (reg:SI 1 dx [ k ])) mSector.c:194 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ k ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 113)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 60 [ D.5015 ])
        (sign_extend:DI (reg:SI 113))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 113)
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:DI 61 [ D.5015 ])
                (plus:DI (reg:DI 60 [ D.5015 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 60 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 62 [ D.5015 ])
                (ashift:DI (reg:DI 61 [ D.5015 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 63 [ D.5016 ])
                (plus:DI (reg:DI 62 [ D.5015 ])
                    (reg/f:DI 114)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (expr_list:REG_DEAD (reg:DI 62 [ D.5015 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 62 [ D.5015 ]))
                    (nil))))))
(insn 14 13 15 2 (set (reg/f:DI 64 [ D.5017 ])
        (mem/f:DI (reg/f:DI 63 [ D.5016 ]) [0 *_7+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.5016 ])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 115)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 65 [ D.5018 ])
        (sign_extend:DI (reg:SI 115))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 66 [ D.5018 ])
                (ashift:DI (reg:DI 65 [ D.5018 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.5018 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 2 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 67 [ D.5016 ])
                (plus:DI (reg:DI 66 [ D.5018 ])
                    (reg/f:DI 116)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (expr_list:REG_DEAD (reg:DI 66 [ D.5018 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 66 [ D.5018 ]))
                    (nil))))))
(insn 20 19 21 2 (set (reg/f:DI 68 [ D.5017 ])
        (mem/f:DI (reg/f:DI 67 [ D.5016 ]) [0 *_11+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.5016 ])
        (nil)))
(insn 21 20 22 2 (set (reg/f:DI 69 [ D.5016 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 70 [ D.5015 ])
        (sign_extend:DI (reg:SI 117))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 71 [ D.5015 ])
                (plus:DI (reg:DI 70 [ D.5015 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 72 [ D.5015 ])
                (ashift:DI (reg:DI 71 [ D.5015 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 73 [ D.5016 ])
                (plus:DI (reg/f:DI 69 [ D.5016 ])
                    (reg:DI 72 [ D.5015 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.5015 ])
        (expr_list:REG_DEAD (reg/f:DI 69 [ D.5016 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 27 26 28 2 (set (reg/f:DI 74 [ D.5017 ])
        (mem/f:DI (reg/f:DI 73 [ D.5016 ]) [0 *_18+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.5016 ])
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 75 [ D.5016 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 2 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 76 [ D.5018 ])
        (sign_extend:DI (reg:SI 118))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 77 [ D.5018 ])
                (ashift:DI (reg:DI 76 [ D.5018 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.5018 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 32 31 33 2 (parallel [
            (set (reg/f:DI 78 [ D.5016 ])
                (plus:DI (reg/f:DI 75 [ D.5016 ])
                    (reg:DI 77 [ D.5018 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.5018 ])
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.5016 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 33 32 34 2 (set (reg/f:DI 79 [ D.5017 ])
        (mem/f:DI (reg/f:DI 78 [ D.5016 ]) [0 *_23+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 78 [ D.5016 ])
        (nil)))
(insn 34 33 35 2 (set (reg:DI 2 cx)
        (reg/f:DI 64 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ D.5017 ])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 1 dx)
        (reg/f:DI 68 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.5017 ])
        (nil)))
(insn 36 35 37 2 (set (reg:DI 4 si)
        (reg/f:DI 74 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.5017 ])
        (nil)))
(insn 37 36 38 2 (set (reg:DI 5 di)
        (reg/f:DI 79 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.5017 ])
        (nil)))
(call_insn 38 37 39 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("segments_intersect") [flags 0x41]  <function_decl 0x7f44d29f7d00 segments_intersect>) [0 segments_intersect S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 39 38 40 2 (set (reg:SI 80 [ D.5014 ])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 40 39 41 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 80 [ D.5014 ])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 80 [ D.5014 ])
        (nil)))
(jump_insn 41 40 42 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 101)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 119 120 121 122 123
(note 42 41 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 3 (set (reg/f:DI 81 [ D.5016 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 3 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DI 82 [ D.5015 ])
        (sign_extend:DI (reg:SI 119))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(insn 46 45 47 3 (parallel [
            (set (reg:DI 83 [ D.5015 ])
                (plus:DI (reg:DI 82 [ D.5015 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 84 [ D.5015 ])
                (ashift:DI (reg:DI 83 [ D.5015 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 83 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 85 [ D.5016 ])
                (plus:DI (reg/f:DI 81 [ D.5016 ])
                    (reg:DI 84 [ D.5015 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ D.5015 ])
        (expr_list:REG_DEAD (reg/f:DI 81 [ D.5016 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 49 48 50 3 (set (reg/f:DI 86 [ D.5017 ])
        (mem/f:DI (reg/f:DI 85 [ D.5016 ]) [0 *_30+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85 [ D.5016 ])
        (nil)))
(insn 50 49 51 3 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 87 [ D.5015 ])
        (sign_extend:DI (reg:SI 120))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 88 [ D.5015 ])
                (plus:DI (reg:DI 87 [ D.5015 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 89 [ D.5015 ])
                (ashift:DI (reg:DI 88 [ D.5015 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 3 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 90 [ D.5016 ])
                (plus:DI (reg:DI 89 [ D.5015 ])
                    (reg/f:DI 121)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 121)
        (expr_list:REG_DEAD (reg:DI 89 [ D.5015 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 89 [ D.5015 ]))
                    (nil))))))
(insn 56 55 57 3 (set (reg/f:DI 91 [ D.5017 ])
        (mem/f:DI (reg/f:DI 90 [ D.5016 ]) [0 *_35+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 90 [ D.5016 ])
        (nil)))
(insn 57 56 58 3 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 58 57 59 3 (set (reg:DI 92 [ D.5018 ])
        (sign_extend:DI (reg:SI 122))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 59 58 60 3 (parallel [
            (set (reg:DI 93 [ D.5018 ])
                (ashift:DI (reg:DI 92 [ D.5018 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 92 [ D.5018 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 60 59 61 3 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg/f:DI 94 [ D.5016 ])
                (plus:DI (reg:DI 93 [ D.5018 ])
                    (reg/f:DI 123)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 123)
        (expr_list:REG_DEAD (reg:DI 93 [ D.5018 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 93 [ D.5018 ]))
                    (nil))))))
(insn 62 61 63 3 (set (reg/f:DI 95 [ D.5017 ])
        (mem/f:DI (reg/f:DI 94 [ D.5016 ]) [0 *_39+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 94 [ D.5016 ])
        (nil)))
(insn 63 62 64 3 (set (reg:DI 1 dx)
        (reg/f:DI 86 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 86 [ D.5017 ])
        (nil)))
(insn 64 63 65 3 (set (reg:DI 4 si)
        (reg/f:DI 91 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.5017 ])
        (nil)))
(insn 65 64 66 3 (set (reg:DI 5 di)
        (reg/f:DI 95 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 95 [ D.5017 ])
        (nil)))
(call_insn 66 65 67 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 67 66 68 3 (set (reg:SI 96 [ D.5014 ])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 68 67 69 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.5014 ])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 96 [ D.5014 ])
        (nil)))
(jump_insn 69 68 70 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 101)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 124 125 126 127 128
(note 70 69 71 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 4 (set (reg/f:DI 97 [ D.5016 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 f.nvp+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 4 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 xp+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 98 [ D.5018 ])
        (sign_extend:DI (reg:SI 124))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(insn 74 73 75 4 (parallel [
            (set (reg:DI 99 [ D.5018 ])
                (ashift:DI (reg:DI 98 [ D.5018 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ D.5018 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 75 74 76 4 (parallel [
            (set (reg/f:DI 100 [ D.5016 ])
                (plus:DI (reg/f:DI 97 [ D.5016 ])
                    (reg:DI 99 [ D.5018 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ D.5018 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ D.5016 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 76 75 77 4 (set (reg/f:DI 101 [ D.5017 ])
        (mem/f:DI (reg/f:DI 100 [ D.5016 ]) [0 *_45+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 100 [ D.5016 ])
        (nil)))
(insn 77 76 78 4 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 102 [ D.5015 ])
        (sign_extend:DI (reg:SI 125))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 79 78 80 4 (parallel [
            (set (reg:DI 103 [ D.5015 ])
                (plus:DI (reg:DI 102 [ D.5015 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 80 79 81 4 (parallel [
            (set (reg:DI 104 [ D.5015 ])
                (ashift:DI (reg:DI 103 [ D.5015 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 103 [ D.5015 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 81 80 82 4 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg/f:DI 105 [ D.5016 ])
                (plus:DI (reg:DI 104 [ D.5015 ])
                    (reg/f:DI 126)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 126)
        (expr_list:REG_DEAD (reg:DI 104 [ D.5015 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 104 [ D.5015 ]))
                    (nil))))))
(insn 83 82 84 4 (set (reg/f:DI 106 [ D.5017 ])
        (mem/f:DI (reg/f:DI 105 [ D.5016 ]) [0 *_50+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.5016 ])
        (nil)))
(insn 84 83 85 4 (set (reg:SI 127)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 k+0 S4 A32])) mSector.c:196 89 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DI 107 [ D.5018 ])
        (sign_extend:DI (reg:SI 127))) mSector.c:196 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 108 [ D.5018 ])
                (ashift:DI (reg:DI 107 [ D.5018 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 107 [ D.5018 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 4 (set (reg/f:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg/f:DI 109 [ D.5016 ])
                (plus:DI (reg:DI 108 [ D.5018 ])
                    (reg/f:DI 128)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:196 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 128)
        (expr_list:REG_DEAD (reg:DI 108 [ D.5018 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 bound+0 S8 A64])
                        (reg:DI 108 [ D.5018 ]))
                    (nil))))))
(insn 89 88 90 4 (set (reg/f:DI 110 [ D.5017 ])
        (mem/f:DI (reg/f:DI 109 [ D.5016 ]) [0 *_54+0 S8 A64])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.5016 ])
        (nil)))
(insn 90 89 91 4 (set (reg:DI 1 dx)
        (reg/f:DI 101 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 101 [ D.5017 ])
        (nil)))
(insn 91 90 92 4 (set (reg:DI 4 si)
        (reg/f:DI 106 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 106 [ D.5017 ])
        (nil)))
(insn 92 91 93 4 (set (reg:DI 5 di)
        (reg/f:DI 110 [ D.5017 ])) mSector.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 110 [ D.5017 ])
        (nil)))
(call_insn 93 92 94 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:196 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 94 93 95 4 (set (reg:SI 111 [ D.5014 ])
        (reg:SI 0 ax)) mSector.c:196 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 95 94 96 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 111 [ D.5014 ])
            (const_int 0 [0]))) mSector.c:196 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 111 [ D.5014 ])
        (nil)))
(jump_insn 96 95 97 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) mSector.c:196 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 101)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 97 96 98 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 116 5 (set (reg:SI 59 [ D.5014 ])
        (const_int 1 [0x1])) mSector.c:197 89 {*movsi_internal}
     (nil))
(jump_insn 116 98 117 5 (set (pc)
        (label_ref 104)) mSector.c:197 650 {jump}
     (nil)
 -> 104)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 117 116 101)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(code_label 101 117 102 6 79 "" [3 uses])
(note 102 101 103 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 6 (set (reg:SI 59 [ D.5014 ])
        (const_int 0 [0])) mSector.c:199 89 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 112
(code_label 104 103 105 7 80 "" [1 uses])
(note 105 104 106 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 110 7 (set (reg:SI 112 [ <retval> ])
        (reg:SI 59 [ D.5014 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5014 ])
        (nil)))
(insn 110 106 113 7 (set (reg/i:SI 0 ax)
        (reg:SI 112 [ <retval> ])) mSector.c:200 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112 [ <retval> ])
        (nil)))
(insn 113 110 0 7 (use (reg/i:SI 0 ax)) mSector.c:200 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function modify_traj_intersect_bound (modify_traj_intersect_bound, funcdef_no=12, decl_uid=1882, cgraph_uid=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a5 (r115,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a31 (r105,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a47 (r99,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r94,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r115,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a6(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a16(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a18(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a26(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a27(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a28(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a30(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r105,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a32(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a35(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a42(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a43(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a44(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a46(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r99,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a48(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a50(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a54(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a55(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a56(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 110(l0): point = 0
   Insn 107(l0): point = 2
   Insn 103(l0): point = 4
   Insn 100(l0): point = 6
   Insn 115(l0): point = 9
   Insn 27(l0): point = 11
   Insn 26(l0): point = 13
   Insn 25(l0): point = 15
   Insn 24(l0): point = 17
   Insn 23(l0): point = 19
   Insn 22(l0): point = 21
   Insn 21(l0): point = 23
   Insn 20(l0): point = 25
   Insn 19(l0): point = 27
   Insn 18(l0): point = 29
   Insn 17(l0): point = 31
   Insn 16(l0): point = 33
   Insn 15(l0): point = 35
   Insn 14(l0): point = 37
   Insn 13(l0): point = 39
   Insn 12(l0): point = 41
   Insn 11(l0): point = 43
   Insn 98(l0): point = 46
   Insn 97(l0): point = 48
   Insn 95(l0): point = 50
   Insn 94(l0): point = 52
   Insn 91(l0): point = 55
   Insn 90(l0): point = 57
   Insn 89(l0): point = 59
   Insn 88(l0): point = 61
   Insn 87(l0): point = 63
   Insn 86(l0): point = 65
   Insn 85(l0): point = 67
   Insn 84(l0): point = 69
   Insn 83(l0): point = 71
   Insn 82(l0): point = 73
   Insn 81(l0): point = 75
   Insn 80(l0): point = 77
   Insn 79(l0): point = 79
   Insn 78(l0): point = 81
   Insn 77(l0): point = 83
   Insn 76(l0): point = 85
   Insn 75(l0): point = 87
   Insn 74(l0): point = 89
   Insn 73(l0): point = 91
   Insn 72(l0): point = 93
   Insn 71(l0): point = 95
   Insn 69(l0): point = 98
   Insn 68(l0): point = 100
   Insn 66(l0): point = 102
   Insn 65(l0): point = 104
   Insn 64(l0): point = 106
   Insn 63(l0): point = 108
   Insn 62(l0): point = 110
   Insn 61(l0): point = 112
   Insn 60(l0): point = 114
   Insn 59(l0): point = 116
   Insn 58(l0): point = 118
   Insn 57(l0): point = 120
   Insn 56(l0): point = 122
   Insn 55(l0): point = 124
   Insn 54(l0): point = 126
   Insn 51(l0): point = 129
   Insn 50(l0): point = 131
   Insn 49(l0): point = 133
   Insn 48(l0): point = 135
   Insn 47(l0): point = 137
   Insn 46(l0): point = 139
   Insn 45(l0): point = 141
   Insn 44(l0): point = 143
   Insn 43(l0): point = 145
   Insn 42(l0): point = 147
   Insn 41(l0): point = 149
   Insn 40(l0): point = 151
   Insn 39(l0): point = 153
   Insn 38(l0): point = 155
   Insn 37(l0): point = 157
   Insn 36(l0): point = 159
   Insn 35(l0): point = 161
   Insn 34(l0): point = 163
   Insn 33(l0): point = 165
   Insn 32(l0): point = 167
   Insn 31(l0): point = 169
   Insn 113(l0): point = 172
   Insn 7(l0): point = 174
   Insn 3(l0): point = 176
   Insn 2(l0): point = 178
 a0(r94): [3..4]
 a1(r93): [5..6]
 a2(r59): [49..50]
 a3(r116): [51..52]
 a4(r92): [58..61]
 a5(r115 [0]): [58..59]
 a5(r115 [1]): [58..59]
 a6(r91): [62..63]
 a7(r90): [64..65]
 a8(r89): [66..67]
 a9(r87): [66..73]
 a10(r88): [68..69]
 a11(r114): [70..71]
 a12(r86): [74..75]
 a13(r85): [76..77]
 a14(r83): [76..93]
 a15(r112): [82..87] [78..79]
 a16(r113): [80..81]
 a17(r84): [84..89]
 a18(r111): [90..91]
 a19(r110): [94..95]
 a20(r72): [101..102]
 a21(r71): [103..104]
 a22(r70): [105..106]
 a23(r69): [107..108]
 a24(r67): [107..124]
 a25(r108): [113..118] [109..110]
 a26(r109): [111..112]
 a27(r68): [115..120]
 a28(r107): [121..122]
 a29(r106): [125..126]
 a30(r82): [132..135]
 a31(r105 [0]): [132..133]
 a31(r105 [1]): [132..133]
 a32(r81): [136..137]
 a33(r80): [138..139]
 a34(r79): [140..141]
 a35(r77): [140..147]
 a36(r78): [142..143]
 a37(r104): [144..145]
 a38(r76): [148..149]
 a39(r75): [150..151]
 a40(r73): [150..167]
 a41(r102): [156..161] [152..153]
 a42(r103): [154..155]
 a43(r74): [158..163]
 a44(r101): [164..165]
 a45(r100): [168..169]
 a46(r66): [14..17]
 a47(r99 [0]): [14..15]
 a47(r99 [1]): [14..15]
 a48(r65): [18..19]
 a49(r64): [20..21]
 a50(r63): [22..23]
 a51(r62): [24..25]
 a52(r60): [24..41]
 a53(r97): [30..35] [26..27]
 a54(r98): [28..29]
 a55(r61): [32..37]
 a56(r96): [38..39]
 a57(r95): [42..43]
Compressing live ranges: from 181 to 98 - 54%
Ranges after the compression:
 a0(r94): [0..1]
 a1(r93): [2..3]
 a2(r59): [24..25]
 a3(r116): [26..27]
 a4(r92): [28..29]
 a5(r115 [0]): [28..29]
 a5(r115 [1]): [28..29]
 a6(r91): [30..31]
 a7(r90): [32..33]
 a8(r89): [34..35]
 a9(r87): [34..39]
 a10(r88): [36..37]
 a11(r114): [38..39]
 a12(r86): [40..41]
 a13(r85): [42..43]
 a14(r83): [42..51]
 a15(r112): [48..49] [44..45]
 a16(r113): [46..47]
 a17(r84): [48..49]
 a18(r111): [50..51]
 a19(r110): [52..53]
 a20(r72): [54..55]
 a21(r71): [56..57]
 a22(r70): [58..59]
 a23(r69): [60..61]
 a24(r67): [60..69]
 a25(r108): [66..67] [62..63]
 a26(r109): [64..65]
 a27(r68): [66..67]
 a28(r107): [68..69]
 a29(r106): [70..71]
 a30(r82): [72..73]
 a31(r105 [0]): [72..73]
 a31(r105 [1]): [72..73]
 a32(r81): [74..75]
 a33(r80): [76..77]
 a34(r79): [78..79]
 a35(r77): [78..83]
 a36(r78): [80..81]
 a37(r104): [82..83]
 a38(r76): [84..85]
 a39(r75): [86..87]
 a40(r73): [86..95]
 a41(r102): [92..93] [88..89]
 a42(r103): [90..91]
 a43(r74): [92..93]
 a44(r101): [94..95]
 a45(r100): [96..97]
 a46(r66): [4..5]
 a47(r99 [0]): [4..5]
 a47(r99 [1]): [4..5]
 a48(r65): [6..7]
 a49(r64): [8..9]
 a50(r63): [10..11]
 a51(r62): [12..13]
 a52(r60): [12..21]
 a53(r97): [18..19] [14..15]
 a54(r98): [16..17]
 a55(r61): [18..19]
 a56(r96): [20..21]
 a57(r95): [22..23]
  regions=1, blocks=9, points=98
    allocnos=58 (big 3), copies=0, conflicts=0, ranges=65
Disposition:
    2:r59  l0     0   52:r60  l0     2   55:r61  l0     1   51:r62  l0     0
   50:r63  l0     0   49:r64  l0     0   48:r65  l0     0   46:r66  l0     2
   24:r67  l0     2   27:r68  l0     1   23:r69  l0     0   22:r70  l0     0
   21:r71  l0     0   20:r72  l0     0   40:r73  l0     2   43:r74  l0     1
   39:r75  l0     0   38:r76  l0     0   35:r77  l0     0   36:r78  l0     1
   34:r79  l0     1   33:r80  l0     0   32:r81  l0     0   30:r82  l0     2
   14:r83  l0     2   17:r84  l0     1   13:r85  l0     0   12:r86  l0     0
    9:r87  l0     0   10:r88  l0     1    8:r89  l0     1    7:r90  l0     0
    6:r91  l0     0    4:r92  l0     2    1:r93  l0     0    0:r94  l0     0
   57:r95  l0     0   56:r96  l0     0   53:r97  l0     0   54:r98  l0     0
   47:r99  l0     0   45:r100 l0     0   44:r101 l0     0   41:r102 l0     0
   42:r103 l0     0   37:r104 l0     1   31:r105 l0     0   29:r106 l0     0
   28:r107 l0     0   25:r108 l0     0   26:r109 l0     0   19:r110 l0     0
   18:r111 l0     0   15:r112 l0     0   16:r113 l0     0   11:r114 l0     1
    5:r115 l0     0    3:r116 l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


modify_traj_intersect_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,8u} r7={1d,8u} r16={1d,7u} r17={28d,2u} r20={1d,29u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={1d,1u} r60={1d,1u} r61={1d,2u,1e} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,2u,1e} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,2u,1e} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,2u,1e} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={4d,4u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={4d,4u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={4d,4u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={4d,4u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} 
;;    total ref usage 254{118d,132u,4e} in 87{87 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 113 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:214 89 {*movsi_internal}
     (nil))
(jump_insn 113 7 114 2 (set (pc)
        (label_ref 92)) mSector.c:214 650 {jump}
     (nil)
 -> 92)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 114 113 96)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 95 96 97 98 99
(code_label 96 114 10 3 85 "" [1 uses])
(note 10 96 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 60 [ D.5020 ])
        (mem/f:DI (reg/f:DI 95) [0 *flight_6(D)+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:215 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 61 [ D.5021 ])
        (sign_extend:DI (reg:SI 96))) mSector.c:215 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 96)
        (nil)))
(insn 15 14 16 3 (set (reg:DI 97)
        (reg:DI 61 [ D.5021 ])) mSector.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 97)
                (ashift:DI (reg:DI 97)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 97)
                (plus:DI (reg:DI 97)
                    (reg:DI 61 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 61 [ D.5021 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 98)
                (ashift:DI (reg:DI 97)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 97)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 19 18 20 3 (set (reg:DI 97)
        (reg:DI 98)) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 20 19 21 3 (set (reg:DI 62 [ D.5021 ])
        (reg:DI 97)) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 63 [ D.5020 ])
                (plus:DI (reg/f:DI 60 [ D.5020 ])
                    (reg:DI 62 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 62 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.5020 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 22 21 23 3 (set (reg/f:DI 64 [ D.5022 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 63 [ D.5020 ])
                (const_int 8 [0x8])) [0 _10->nvp+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.5020 ])
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 65 [ D.5023 ])
        (mem/f:DI (reg/f:DI 64 [ D.5022 ]) [0 *_11+0 S8 A64])) mSector.c:215 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ D.5022 ])
        (nil)))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 66 [ D.5023 ])
                (plus:DI (reg/f:DI 65 [ D.5023 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.5023 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 25 24 26 3 (set (reg:XF 99)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:215 131 {*movxf_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (mem:XF (reg/f:DI 66 [ D.5023 ]) [0 *_13+0 S16 A128])
        (reg:XF 99)) mSector.c:215 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 99)
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.5023 ])
            (nil))))
(insn 27 26 115 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:216 89 {*movsi_internal}
     (nil))
(jump_insn 115 27 116 3 (set (pc)
        (label_ref 52)) mSector.c:216 650 {jump}
     (nil)
 -> 52)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 116 115 67)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74 75 76 77 78 79 80 81 82 100 101 102 103 104 105
(code_label 67 116 30 4 84 "" [1 uses])
(note 30 67 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 73 [ D.5020 ])
        (mem/f:DI (reg/f:DI 100) [0 *flight_6(D)+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (nil)))
(insn 33 32 34 4 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 74 [ D.5021 ])
        (sign_extend:DI (reg:SI 101))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 101)
        (nil)))
(insn 35 34 36 4 (set (reg:DI 102)
        (reg:DI 74 [ D.5021 ])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 102)
                (ashift:DI (reg:DI 102)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 102)
                (plus:DI (reg:DI 102)
                    (reg:DI 74 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 74 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 74 [ D.5021 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 103)
                (ashift:DI (reg:DI 102)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 102)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 38 40 4 (set (reg:DI 102)
        (reg:DI 103)) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(insn 40 39 41 4 (set (reg:DI 75 [ D.5021 ])
        (reg:DI 102)) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 76 [ D.5020 ])
                (plus:DI (reg/f:DI 73 [ D.5020 ])
                    (reg:DI 75 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 75 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 73 [ D.5020 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 42 41 43 4 (set (reg/f:DI 77 [ D.5022 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 76 [ D.5020 ])
                (const_int 8 [0x8])) [0 _24->nvp+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 76 [ D.5020 ])
        (nil)))
(insn 43 42 44 4 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 78 [ D.5021 ])
        (sign_extend:DI (reg:SI 104))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 79 [ D.5021 ])
                (ashift:DI (reg:DI 78 [ D.5021 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 78 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 80 [ D.5022 ])
                (plus:DI (reg/f:DI 77 [ D.5022 ])
                    (reg:DI 79 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 79 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 77 [ D.5022 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 47 46 48 4 (set (reg/f:DI 81 [ D.5023 ])
        (mem/f:DI (reg/f:DI 80 [ D.5022 ]) [0 *_28+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 80 [ D.5022 ])
        (nil)))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 82 [ D.5023 ])
                (plus:DI (reg/f:DI 81 [ D.5023 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 81 [ D.5023 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 48 50 4 (set (reg:XF 105)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:216 131 {*movxf_internal_rex64}
     (nil))
(insn 50 49 51 4 (set (mem:XF (reg/f:DI 82 [ D.5023 ]) [0 *_30+0 S16 A128])
        (reg:XF 105)) mSector.c:216 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 105)
        (expr_list:REG_DEAD (reg/f:DI 82 [ D.5023 ])
            (nil))))
(insn 51 50 52 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69 70 71 72 106 107 108 109
(code_label 52 51 53 5 83 "" [1 uses])
(note 53 52 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 5 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 5 (set (reg/f:DI 67 [ D.5020 ])
        (mem/f:DI (reg/f:DI 106) [0 *flight_6(D)+0 S8 A64])) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (nil)))
(insn 56 55 57 5 (set (reg:SI 107)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:DI 68 [ D.5021 ])
        (sign_extend:DI (reg:SI 107))) mSector.c:216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(insn 58 57 59 5 (set (reg:DI 108)
        (reg:DI 68 [ D.5021 ])) mSector.c:216 87 {*movdi_internal_rex64}
     (nil))
(insn 59 58 60 5 (parallel [
            (set (reg:DI 108)
                (ashift:DI (reg:DI 108)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 60 59 61 5 (parallel [
            (set (reg:DI 108)
                (plus:DI (reg:DI 108)
                    (reg:DI 68 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 68 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 68 [ D.5021 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 61 60 62 5 (parallel [
            (set (reg:DI 109)
                (ashift:DI (reg:DI 108)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 62 61 63 5 (set (reg:DI 108)
        (reg:DI 109)) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(insn 63 62 64 5 (set (reg:DI 69 [ D.5021 ])
        (reg:DI 108)) mSector.c:216 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(insn 64 63 65 5 (parallel [
            (set (reg/f:DI 70 [ D.5020 ])
                (plus:DI (reg/f:DI 67 [ D.5020 ])
                    (reg:DI 69 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 67 [ D.5020 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 71 [ D.5019 ])
        (mem/j:SI (plus:DI (reg/f:DI 70 [ D.5020 ])
                (const_int 4 [0x4])) [0 _18->n_nvp+0 S4 A32])) mSector.c:216 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.5020 ])
        (nil)))
(insn 66 65 68 5 (parallel [
            (set (reg:SI 72 [ D.5019 ])
                (plus:SI (reg:SI 71 [ D.5019 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:216 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 71 [ D.5019 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 68 66 69 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 72 [ D.5019 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) mSector.c:216 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 72 [ D.5019 ])
        (nil)))
(jump_insn 69 68 70 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) mSector.c:216 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 67)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 110 111 112 113 114 115
(note 70 69 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 6 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 flight+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 6 (set (reg/f:DI 83 [ D.5020 ])
        (mem/f:DI (reg/f:DI 110) [0 *flight_6(D)+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))
(insn 73 72 74 6 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) mSector.c:217 89 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 84 [ D.5021 ])
        (sign_extend:DI (reg:SI 111))) mSector.c:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 75 74 76 6 (set (reg:DI 112)
        (reg:DI 84 [ D.5021 ])) mSector.c:217 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 6 (parallel [
            (set (reg:DI 112)
                (ashift:DI (reg:DI 112)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 112)
                (plus:DI (reg:DI 112)
                    (reg:DI 84 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 84 [ D.5021 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 113)
                (ashift:DI (reg:DI 112)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 112)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 80 6 (set (reg:DI 112)
        (reg:DI 113)) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(insn 80 79 81 6 (set (reg:DI 85 [ D.5021 ])
        (reg:DI 112)) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(insn 81 80 82 6 (parallel [
            (set (reg/f:DI 86 [ D.5020 ])
                (plus:DI (reg/f:DI 83 [ D.5020 ])
                    (reg:DI 85 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 83 [ D.5020 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 82 81 83 6 (set (reg/f:DI 87 [ D.5022 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 86 [ D.5020 ])
                (const_int 8 [0x8])) [0 _35->nvp+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 86 [ D.5020 ])
        (nil)))
(insn 83 82 84 6 (set (reg:SI 114)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) mSector.c:217 89 {*movsi_internal}
     (nil))
(insn 84 83 85 6 (set (reg:DI 88 [ D.5021 ])
        (sign_extend:DI (reg:SI 114))) mSector.c:217 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 85 84 86 6 (parallel [
            (set (reg:DI 89 [ D.5021 ])
                (ashift:DI (reg:DI 88 [ D.5021 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.5021 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 6 (parallel [
            (set (reg/f:DI 90 [ D.5022 ])
                (plus:DI (reg/f:DI 87 [ D.5022 ])
                    (reg:DI 89 [ D.5021 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.5021 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ D.5022 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 87 86 88 6 (set (reg/f:DI 91 [ D.5023 ])
        (mem/f:DI (reg/f:DI 90 [ D.5022 ]) [0 *_39+0 S8 A64])) mSector.c:217 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 90 [ D.5022 ])
        (nil)))
(insn 88 87 89 6 (parallel [
            (set (reg/f:DI 92 [ D.5023 ])
                (plus:DI (reg/f:DI 91 [ D.5023 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:217 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.5023 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 89 88 90 6 (set (reg:XF 115)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:217 131 {*movxf_internal_rex64}
     (nil))
(insn 90 89 91 6 (set (mem:XF (reg/f:DI 92 [ D.5023 ]) [0 *_41+0 S16 A128])
        (reg:XF 115)) mSector.c:217 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 115)
        (expr_list:REG_DEAD (reg/f:DI 92 [ D.5023 ])
            (nil))))
(insn 91 90 92 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:214 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 116
(code_label 92 91 93 7 82 "" [1 uses])
(note 93 92 94 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 7 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:214 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 97 7 (set (reg:SI 59 [ D.5019 ])
        (mem:SI (reg/f:DI 116) [0 *Nflight_4(D)+0 S4 A32])) mSector.c:214 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (nil)))
(insn 97 95 98 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 59 [ D.5019 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32]))) mSector.c:214 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5019 ])
        (nil)))
(jump_insn 98 97 99 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) mSector.c:214 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 96)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 93 94
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 103 8 (set (reg:SI 93 [ D.5019 ])
        (const_int 1 [0x1])) mSector.c:220 89 {*movsi_internal}
     (nil))
(insn 103 100 107 8 (set (reg:SI 94 [ <retval> ])
        (reg:SI 93 [ D.5019 ])) mSector.c:220 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ D.5019 ])
        (nil)))
(insn 107 103 110 8 (set (reg/i:SI 0 ax)
        (reg:SI 94 [ <retval> ])) mSector.c:221 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ <retval> ])
        (nil)))
(insn 110 107 0 8 (use (reg/i:SI 0 ax)) mSector.c:221 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function set_boundary_flag_onFlight (set_boundary_flag_onFlight, funcdef_no=13, decl_uid=1890, cgraph_uid=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 45 count 32 (    1)
Building IRA IR
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 326.
verify found no changes in insn with uid = 357.
verify found no changes in insn with uid = 385.
verify found no changes in insn with uid = 486.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r357: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r357,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r356,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r355,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r354,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r353,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r352,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r351,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r350,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r349,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r348,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r347,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r346,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r345,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r344,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r341,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r340,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r339,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r338,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r337,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r335,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r322,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r319,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a121 (r308,l0) best DIREG, allocno GENERAL_REGS
    r307: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a122 (r307,l0) best SIREG, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a200 (r278,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a216 (r272,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a229 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a231 (r266,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a239 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a244 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a243 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a247 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a257 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a262 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a261 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a264 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a265 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a274 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a279 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a278 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a281 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a282 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a287 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a286 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a289 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a290 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a295 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a294 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a297 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a298 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r242,l0) best AREG, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r206,l0) best AREG, allocno GENERAL_REGS
    r205: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r205,l0) best DIREG, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r195,l0) best SIREG, allocno GENERAL_REGS
    r194: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a80 (r194,l0) best DREG, allocno GENERAL_REGS
    r193: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a95 (r193,l0) best AREG, allocno GENERAL_REGS
    r192: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a96 (r192,l0) best DIREG, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a97 (r183,l0) best SIREG, allocno GENERAL_REGS
    r182: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r182,l0) best DREG, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a112 (r176,l0) best SIREG, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a123 (r171,l0) best DREG, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a154 (r160,l0) best AREG, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a155 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a156 (r149,l0) best SIREG, allocno GENERAL_REGS
    r148: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a157 (r148,l0) best DREG, allocno GENERAL_REGS
    r147: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a172 (r147,l0) best AREG, allocno GENERAL_REGS
    r146: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a173 (r146,l0) best DIREG, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a174 (r137,l0) best SIREG, allocno GENERAL_REGS
    r136: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a175 (r136,l0) best DREG, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a232 (r109,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a235 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a236 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a245 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a248 (r98,l0) best AREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a249 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a255 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a254 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a263 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a250 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a251 (r86,l0) best DREG, allocno GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a266 (r85,l0) best AREG, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a267 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a270 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a271 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a273 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a272 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a275 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a276 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a280 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a268 (r75,l0) best SIREG, allocno GENERAL_REGS
    r74: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a269 (r74,l0) best DREG, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a283 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a284 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a288 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a285 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a291 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a292 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a296 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a293 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r242,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r357,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r355,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a11(r356,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a12(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a13(r354,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r353,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a15(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r351,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a18(r352,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a19(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a20(r350,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r349,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a22(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r347,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a28(r348,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a29(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a30(r346,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r345,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a32(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r343,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a36(r344,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a37(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a38(r342,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r341,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a40(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r340,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r338,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a46(r339,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a47(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a48(r337,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a50(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a51(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a55(r335,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a56(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a57(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a58(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a59(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a60(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a64(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a65(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a66(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a67(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a68(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a69(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a70(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a71(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a72(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a73(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a74(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a75(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a76(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a77(r206,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a78(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a79(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a80(r194,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a81(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a82(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a83(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a84(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a85(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a86(r322,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a87(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a88(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a89(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a90(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a91(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a92(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a93(r319,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a94(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a95(r193,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a96(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a97(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a98(r182,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a99(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a100(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a101(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a102(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a103(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a104(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a105(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a106(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a107(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a108(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a109(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a110(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a111(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a112(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a113(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a114(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a115(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a116(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a117(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a118(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a119(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a120(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a121(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a122(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a123(r171,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a124(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a125(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a126(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a127(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a128(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a129(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a130(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a131(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a132(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a133(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a134(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a135(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a136(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a137(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a138(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a139(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a140(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a141(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a142(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a143(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a144(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a145(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a146(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a147(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a148(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a149(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a150(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a151(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a152(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a153(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a154(r160,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a155(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a156(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a157(r148,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a158(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a159(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a160(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a161(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a162(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a163(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a164(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a165(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a166(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a167(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a168(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a169(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a170(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a171(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a172(r147,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a173(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a174(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a175(r136,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a176(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a177(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a178(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a179(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a180(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a181(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a182(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a183(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a184(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a185(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a186(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a187(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a188(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a189(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a190(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a191(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a192(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a193(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a194(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a195(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a196(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a197(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a198(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a199(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a200(r278,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a201(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a202(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a203(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a204(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a205(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a206(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a207(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a208(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a209(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a210(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a211(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a212(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a213(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a214(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a215(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a216(r272,l0) costs: AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a217(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a218(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a219(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a220(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a221(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a222(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a223(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a224(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a225(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a226(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a227(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a228(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a229(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a230(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a231(r266,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a232(r109,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a233(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a234(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a235(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a236(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a237(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a238(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a239(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a240(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a241(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a242(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a243(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a244(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a245(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a246(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a247(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a248(r98,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a249(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a250(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a251(r86,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a252(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a253(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a254(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a255(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a256(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a257(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a258(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a259(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a260(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a261(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a262(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a263(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a264(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a265(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a266(r85,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a267(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a268(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a269(r74,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a270(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a271(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a272(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a273(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a274(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a275(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a276(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a277(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a278(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a279(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a280(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a281(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a282(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a283(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a284(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a285(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a286(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a287(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a288(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a289(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a290(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a291(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a292(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a293(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a294(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a295(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a296(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a297(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a298(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 533(l0): point = 0
   Insn 530(l0): point = 2
   Insn 526(l0): point = 4
   Insn 523(l0): point = 6
   Insn 541(l0): point = 9
   Insn 36(l0): point = 11
   Insn 35(l0): point = 13
   Insn 34(l0): point = 15
   Insn 33(l0): point = 17
   Insn 32(l0): point = 19
   Insn 31(l0): point = 21
   Insn 30(l0): point = 23
   Insn 29(l0): point = 25
   Insn 28(l0): point = 27
   Insn 27(l0): point = 29
   Insn 26(l0): point = 31
   Insn 25(l0): point = 33
   Insn 24(l0): point = 35
   Insn 23(l0): point = 37
   Insn 22(l0): point = 39
   Insn 21(l0): point = 41
   Insn 20(l0): point = 43
   Insn 19(l0): point = 45
   Insn 18(l0): point = 47
   Insn 17(l0): point = 49
   Insn 16(l0): point = 51
   Insn 15(l0): point = 53
   Insn 14(l0): point = 55
   Insn 13(l0): point = 57
   Insn 12(l0): point = 59
   Insn 11(l0): point = 61
   Insn 521(l0): point = 64
   Insn 520(l0): point = 66
   Insn 518(l0): point = 68
   Insn 517(l0): point = 70
   Insn 514(l0): point = 73
   Insn 511(l0): point = 76
   Insn 510(l0): point = 78
   Insn 509(l0): point = 80
   Insn 508(l0): point = 82
   Insn 507(l0): point = 84
   Insn 506(l0): point = 86
   Insn 505(l0): point = 88
   Insn 504(l0): point = 90
   Insn 503(l0): point = 92
   Insn 502(l0): point = 94
   Insn 501(l0): point = 96
   Insn 500(l0): point = 98
   Insn 499(l0): point = 100
   Insn 498(l0): point = 102
   Insn 497(l0): point = 104
   Insn 496(l0): point = 106
   Insn 495(l0): point = 108
   Insn 494(l0): point = 110
   Insn 493(l0): point = 112
   Insn 492(l0): point = 114
   Insn 491(l0): point = 116
   Insn 490(l0): point = 118
   Insn 489(l0): point = 120
   Insn 488(l0): point = 122
   Insn 487(l0): point = 124
   Insn 486(l0): point = 126
   Insn 485(l0): point = 128
   Insn 483(l0): point = 131
   Insn 482(l0): point = 133
   Insn 481(l0): point = 135
   Insn 480(l0): point = 137
   Insn 479(l0): point = 139
   Insn 478(l0): point = 141
   Insn 477(l0): point = 143
   Insn 476(l0): point = 145
   Insn 475(l0): point = 147
   Insn 474(l0): point = 149
   Insn 473(l0): point = 151
   Insn 472(l0): point = 153
   Insn 471(l0): point = 155
   Insn 470(l0): point = 157
   Insn 469(l0): point = 159
   Insn 468(l0): point = 161
   Insn 467(l0): point = 163
   Insn 466(l0): point = 165
   Insn 465(l0): point = 167
   Insn 464(l0): point = 169
   Insn 463(l0): point = 171
   Insn 462(l0): point = 173
   Insn 461(l0): point = 175
   Insn 460(l0): point = 177
   Insn 459(l0): point = 179
   Insn 458(l0): point = 181
   Insn 440(l0): point = 184
   Insn 439(l0): point = 186
   Insn 438(l0): point = 188
   Insn 437(l0): point = 190
   Insn 436(l0): point = 192
   Insn 435(l0): point = 194
   Insn 434(l0): point = 196
   Insn 433(l0): point = 198
   Insn 432(l0): point = 200
   Insn 431(l0): point = 202
   Insn 430(l0): point = 204
   Insn 429(l0): point = 206
   Insn 428(l0): point = 208
   Insn 427(l0): point = 210
   Insn 424(l0): point = 213
   Insn 423(l0): point = 215
   Insn 421(l0): point = 217
   Insn 420(l0): point = 219
   Insn 419(l0): point = 221
   Insn 418(l0): point = 223
   Insn 417(l0): point = 225
   Insn 416(l0): point = 227
   Insn 415(l0): point = 229
   Insn 414(l0): point = 231
   Insn 413(l0): point = 233
   Insn 412(l0): point = 235
   Insn 411(l0): point = 237
   Insn 410(l0): point = 239
   Insn 407(l0): point = 242
   Insn 551(l0): point = 245
   Insn 331(l0): point = 247
   Insn 553(l0): point = 250
   Insn 402(l0): point = 252
   Insn 401(l0): point = 254
   Insn 400(l0): point = 256
   Insn 399(l0): point = 258
   Insn 398(l0): point = 260
   Insn 397(l0): point = 262
   Insn 396(l0): point = 264
   Insn 395(l0): point = 266
   Insn 394(l0): point = 268
   Insn 393(l0): point = 270
   Insn 392(l0): point = 272
   Insn 391(l0): point = 274
   Insn 390(l0): point = 276
   Insn 388(l0): point = 279
   Insn 387(l0): point = 281
   Insn 386(l0): point = 283
   Insn 385(l0): point = 285
   Insn 384(l0): point = 287
   Insn 383(l0): point = 289
   Insn 382(l0): point = 291
   Insn 381(l0): point = 293
   Insn 380(l0): point = 295
   Insn 379(l0): point = 297
   Insn 378(l0): point = 299
   Insn 377(l0): point = 301
   Insn 376(l0): point = 303
   Insn 375(l0): point = 305
   Insn 374(l0): point = 307
   Insn 373(l0): point = 309
   Insn 372(l0): point = 311
   Insn 371(l0): point = 313
   Insn 370(l0): point = 315
   Insn 369(l0): point = 317
   Insn 368(l0): point = 319
   Insn 367(l0): point = 321
   Insn 366(l0): point = 323
   Insn 365(l0): point = 325
   Insn 364(l0): point = 327
   Insn 363(l0): point = 329
   Insn 362(l0): point = 331
   Insn 360(l0): point = 334
   Insn 359(l0): point = 336
   Insn 358(l0): point = 338
   Insn 357(l0): point = 340
   Insn 356(l0): point = 342
   Insn 355(l0): point = 344
   Insn 354(l0): point = 346
   Insn 353(l0): point = 348
   Insn 352(l0): point = 350
   Insn 351(l0): point = 352
   Insn 350(l0): point = 354
   Insn 349(l0): point = 356
   Insn 348(l0): point = 358
   Insn 347(l0): point = 360
   Insn 346(l0): point = 362
   Insn 345(l0): point = 364
   Insn 344(l0): point = 366
   Insn 343(l0): point = 368
   Insn 342(l0): point = 370
   Insn 341(l0): point = 372
   Insn 340(l0): point = 374
   Insn 339(l0): point = 376
   Insn 338(l0): point = 378
   Insn 337(l0): point = 380
   Insn 336(l0): point = 382
   Insn 335(l0): point = 384
   Insn 455(l0): point = 387
   Insn 454(l0): point = 389
   Insn 453(l0): point = 391
   Insn 452(l0): point = 393
   Insn 451(l0): point = 395
   Insn 450(l0): point = 397
   Insn 449(l0): point = 399
   Insn 448(l0): point = 401
   Insn 447(l0): point = 403
   Insn 446(l0): point = 405
   Insn 445(l0): point = 407
   Insn 444(l0): point = 409
   Insn 443(l0): point = 411
   Insn 442(l0): point = 413
   Insn 549(l0): point = 416
   Insn 326(l0): point = 418
   Insn 325(l0): point = 420
   Insn 324(l0): point = 422
   Insn 323(l0): point = 424
   Insn 322(l0): point = 426
   Insn 321(l0): point = 428
   Insn 320(l0): point = 430
   Insn 319(l0): point = 432
   Insn 318(l0): point = 434
   Insn 317(l0): point = 436
   Insn 316(l0): point = 438
   Insn 315(l0): point = 440
   Insn 314(l0): point = 442
   Insn 313(l0): point = 444
   Insn 312(l0): point = 446
   Insn 311(l0): point = 448
   Insn 310(l0): point = 450
   Insn 309(l0): point = 452
   Insn 308(l0): point = 454
   Insn 307(l0): point = 456
   Insn 306(l0): point = 458
   Insn 305(l0): point = 460
   Insn 304(l0): point = 462
   Insn 303(l0): point = 464
   Insn 302(l0): point = 466
   Insn 300(l0): point = 469
   Insn 299(l0): point = 471
   Insn 298(l0): point = 473
   Insn 297(l0): point = 475
   Insn 296(l0): point = 477
   Insn 295(l0): point = 479
   Insn 294(l0): point = 481
   Insn 293(l0): point = 483
   Insn 292(l0): point = 485
   Insn 291(l0): point = 487
   Insn 290(l0): point = 489
   Insn 289(l0): point = 491
   Insn 288(l0): point = 493
   Insn 287(l0): point = 495
   Insn 286(l0): point = 497
   Insn 283(l0): point = 500
   Insn 282(l0): point = 502
   Insn 280(l0): point = 504
   Insn 279(l0): point = 506
   Insn 278(l0): point = 508
   Insn 277(l0): point = 510
   Insn 276(l0): point = 512
   Insn 275(l0): point = 514
   Insn 274(l0): point = 516
   Insn 273(l0): point = 518
   Insn 272(l0): point = 520
   Insn 271(l0): point = 522
   Insn 270(l0): point = 524
   Insn 269(l0): point = 526
   Insn 268(l0): point = 528
   Insn 265(l0): point = 531
   Insn 545(l0): point = 534
   Insn 188(l0): point = 536
   Insn 186(l0): point = 539
   Insn 185(l0): point = 541
   Insn 183(l0): point = 543
   Insn 182(l0): point = 545
   Insn 181(l0): point = 547
   Insn 180(l0): point = 549
   Insn 179(l0): point = 551
   Insn 178(l0): point = 553
   Insn 177(l0): point = 555
   Insn 176(l0): point = 557
   Insn 175(l0): point = 559
   Insn 174(l0): point = 561
   Insn 173(l0): point = 563
   Insn 172(l0): point = 565
   Insn 171(l0): point = 567
   Insn 168(l0): point = 570
   Insn 165(l0): point = 573
   Insn 164(l0): point = 575
   Insn 163(l0): point = 577
   Insn 162(l0): point = 579
   Insn 161(l0): point = 581
   Insn 160(l0): point = 583
   Insn 159(l0): point = 585
   Insn 158(l0): point = 587
   Insn 157(l0): point = 589
   Insn 156(l0): point = 591
   Insn 155(l0): point = 593
   Insn 154(l0): point = 595
   Insn 153(l0): point = 597
   Insn 152(l0): point = 599
   Insn 151(l0): point = 601
   Insn 150(l0): point = 603
   Insn 149(l0): point = 605
   Insn 148(l0): point = 607
   Insn 147(l0): point = 609
   Insn 146(l0): point = 611
   Insn 543(l0): point = 614
   Insn 141(l0): point = 616
   Insn 140(l0): point = 618
   Insn 139(l0): point = 620
   Insn 138(l0): point = 622
   Insn 137(l0): point = 624
   Insn 136(l0): point = 626
   Insn 135(l0): point = 628
   Insn 134(l0): point = 630
   Insn 133(l0): point = 632
   Insn 132(l0): point = 634
   Insn 131(l0): point = 636
   Insn 130(l0): point = 638
   Insn 129(l0): point = 640
   Insn 128(l0): point = 642
   Insn 127(l0): point = 644
   Insn 126(l0): point = 646
   Insn 125(l0): point = 648
   Insn 124(l0): point = 650
   Insn 123(l0): point = 652
   Insn 122(l0): point = 654
   Insn 117(l0): point = 657
   Insn 116(l0): point = 659
   Insn 115(l0): point = 661
   Insn 114(l0): point = 663
   Insn 113(l0): point = 665
   Insn 112(l0): point = 667
   Insn 111(l0): point = 669
   Insn 110(l0): point = 671
   Insn 109(l0): point = 673
   Insn 108(l0): point = 675
   Insn 107(l0): point = 677
   Insn 106(l0): point = 679
   Insn 105(l0): point = 681
   Insn 104(l0): point = 683
   Insn 103(l0): point = 685
   Insn 102(l0): point = 687
   Insn 101(l0): point = 689
   Insn 100(l0): point = 691
   Insn 99(l0): point = 693
   Insn 98(l0): point = 695
   Insn 97(l0): point = 697
   Insn 96(l0): point = 699
   Insn 65(l0): point = 702
   Insn 64(l0): point = 704
   Insn 63(l0): point = 706
   Insn 62(l0): point = 708
   Insn 61(l0): point = 710
   Insn 60(l0): point = 712
   Insn 59(l0): point = 714
   Insn 58(l0): point = 716
   Insn 57(l0): point = 718
   Insn 56(l0): point = 720
   Insn 55(l0): point = 722
   Insn 54(l0): point = 724
   Insn 53(l0): point = 726
   Insn 52(l0): point = 728
   Insn 51(l0): point = 730
   Insn 50(l0): point = 732
   Insn 49(l0): point = 734
   Insn 48(l0): point = 736
   Insn 47(l0): point = 738
   Insn 46(l0): point = 740
   Insn 45(l0): point = 742
   Insn 44(l0): point = 744
   Insn 43(l0): point = 746
   Insn 42(l0): point = 748
   Insn 41(l0): point = 750
   Insn 40(l0): point = 752
   Insn 93(l0): point = 755
   Insn 92(l0): point = 757
   Insn 91(l0): point = 759
   Insn 90(l0): point = 761
   Insn 89(l0): point = 763
   Insn 88(l0): point = 765
   Insn 87(l0): point = 767
   Insn 86(l0): point = 769
   Insn 85(l0): point = 771
   Insn 84(l0): point = 773
   Insn 83(l0): point = 775
   Insn 82(l0): point = 777
   Insn 81(l0): point = 779
   Insn 80(l0): point = 781
   Insn 79(l0): point = 783
   Insn 78(l0): point = 785
   Insn 77(l0): point = 787
   Insn 76(l0): point = 789
   Insn 75(l0): point = 791
   Insn 74(l0): point = 793
   Insn 73(l0): point = 795
   Insn 72(l0): point = 797
   Insn 71(l0): point = 799
   Insn 70(l0): point = 801
   Insn 69(l0): point = 803
   Insn 68(l0): point = 805
   Insn 67(l0): point = 807
   Insn 547(l0): point = 810
   Insn 260(l0): point = 812
   Insn 259(l0): point = 814
   Insn 258(l0): point = 816
   Insn 257(l0): point = 818
   Insn 256(l0): point = 820
   Insn 255(l0): point = 822
   Insn 254(l0): point = 824
   Insn 253(l0): point = 826
   Insn 252(l0): point = 828
   Insn 251(l0): point = 830
   Insn 250(l0): point = 832
   Insn 249(l0): point = 834
   Insn 248(l0): point = 836
   Insn 217(l0): point = 839
   Insn 216(l0): point = 841
   Insn 215(l0): point = 843
   Insn 214(l0): point = 845
   Insn 213(l0): point = 847
   Insn 212(l0): point = 849
   Insn 211(l0): point = 851
   Insn 210(l0): point = 853
   Insn 209(l0): point = 855
   Insn 208(l0): point = 857
   Insn 207(l0): point = 859
   Insn 206(l0): point = 861
   Insn 205(l0): point = 863
   Insn 204(l0): point = 865
   Insn 203(l0): point = 867
   Insn 202(l0): point = 869
   Insn 201(l0): point = 871
   Insn 200(l0): point = 873
   Insn 199(l0): point = 875
   Insn 198(l0): point = 877
   Insn 197(l0): point = 879
   Insn 196(l0): point = 881
   Insn 195(l0): point = 883
   Insn 194(l0): point = 885
   Insn 193(l0): point = 887
   Insn 192(l0): point = 889
   Insn 245(l0): point = 892
   Insn 244(l0): point = 894
   Insn 243(l0): point = 896
   Insn 242(l0): point = 898
   Insn 241(l0): point = 900
   Insn 240(l0): point = 902
   Insn 239(l0): point = 904
   Insn 238(l0): point = 906
   Insn 237(l0): point = 908
   Insn 236(l0): point = 910
   Insn 235(l0): point = 912
   Insn 234(l0): point = 914
   Insn 233(l0): point = 916
   Insn 232(l0): point = 918
   Insn 231(l0): point = 920
   Insn 230(l0): point = 922
   Insn 229(l0): point = 924
   Insn 228(l0): point = 926
   Insn 227(l0): point = 928
   Insn 226(l0): point = 930
   Insn 225(l0): point = 932
   Insn 224(l0): point = 934
   Insn 223(l0): point = 936
   Insn 222(l0): point = 938
   Insn 221(l0): point = 940
   Insn 220(l0): point = 942
   Insn 219(l0): point = 944
   Insn 539(l0): point = 947
   Insn 7(l0): point = 949
   Insn 3(l0): point = 951
   Insn 2(l0): point = 953
 a0(r242): [3..4]
 a1(r241): [5..6]
 a2(r59): [67..68]
 a3(r357): [69..70]
 a4(r234): [77..104]
 a5(r240): [77..78]
 a6(r239): [79..80]
 a7(r238): [81..82]
 a8(r237): [83..84]
 a9(r235): [83..100]
 a10(r355): [89..94] [85..86]
 a11(r356): [87..88]
 a12(r236): [91..96]
 a13(r354): [97..98]
 a14(r353): [101..102]
 a15(r233): [105..106]
 a16(r231): [105..122]
 a17(r351): [111..116] [107..108]
 a18(r352): [109..110]
 a19(r232): [113..118]
 a20(r350): [119..120]
 a21(r349): [123..124]
 a22(r230): [134..135]
 a23(r225): [134..159]
 a24(r229): [136..137]
 a25(r228): [138..139]
 a26(r226): [138..155]
 a27(r347): [144..149] [140..141]
 a28(r348): [142..143]
 a29(r227): [146..151]
 a30(r346): [152..153]
 a31(r345): [156..157]
 a32(r224): [160..161]
 a33(r223): [162..163]
 a34(r221): [162..179]
 a35(r343): [168..173] [164..165]
 a36(r344): [166..167]
 a37(r222): [170..175]
 a38(r342): [176..177]
 a39(r341): [180..181]
 a40(r219): [388..393]
 a41(r220): [388..389]
 a42(r340): [390..391]
 a43(r218): [394..395]
 a44(r216): [394..411]
 a45(r338): [400..405] [396..397]
 a46(r339): [398..399]
 a47(r217): [402..407]
 a48(r337): [408..409]
 a49(r336): [412..413]
 a50(r215): [187..188]
 a51(r214): [189..190]
 a52(r213): [191..192]
 a53(r211): [191..208]
 a54(r334): [197..202] [193..194]
 a55(r335): [195..196]
 a56(r212): [199..204]
 a57(r333): [205..206]
 a58(r332): [209..210]
 a59(r181): [216..217]
 a60(r180): [218..219]
 a61(r179): [220..221]
 a62(r177): [220..237]
 a63(r330): [226..231] [222..223]
 a64(r331): [224..225]
 a65(r178): [228..233]
 a66(r329): [234..235]
 a67(r328): [238..239]
 a68(r210): [253..256]
 a69(r327): [253..254]
 a70(r209): [257..258]
 a71(r207): [257..274]
 a72(r325): [263..268] [259..260]
 a73(r326): [261..262]
 a74(r208): [265..270]
 a75(r324): [271..272]
 a76(r323): [275..276]
 a77(r206): [282..283]
 a78(r205): [288..293]
 a79(r195): [290..329]
 a80(r194): [292..331]
 a81(r204): [294..295]
 a82(r203): [296..297]
 a83(r200): [296..305]
 a84(r202): [298..299]
 a85(r201): [300..301]
 a86(r322): [302..303]
 a87(r199): [306..307]
 a88(r198): [308..309]
 a89(r196): [308..325]
 a90(r320): [314..319] [310..311]
 a91(r321): [312..313]
 a92(r197): [316..321]
 a93(r319): [322..323]
 a94(r318): [326..327]
 a95(r193): [337..338]
 a96(r192): [343..348]
 a97(r183): [345..382]
 a98(r182): [347..384]
 a99(r191): [349..350]
 a100(r190): [351..352]
 a101(r188): [351..358]
 a102(r189): [353..354]
 a103(r317): [355..356]
 a104(r187): [359..360]
 a105(r186): [361..362]
 a106(r184): [361..378]
 a107(r315): [367..372] [363..364]
 a108(r316): [365..366]
 a109(r185): [369..374]
 a110(r314): [375..376]
 a111(r313): [379..380]
 a112(r176): [425..426]
 a113(r175): [427..428]
 a114(r174): [429..430]
 a115(r172): [429..446]
 a116(r311): [435..440] [431..432]
 a117(r312): [433..434]
 a118(r173): [437..442]
 a119(r310): [443..444]
 a120(r309): [447..448]
 a121(r308): [453..458]
 a122(r307): [455..460]
 a123(r171): [457..466]
 a124(r306): [463..464]
 a125(r170): [472..473]
 a126(r169): [474..475]
 a127(r168): [476..477]
 a128(r167): [478..479]
 a129(r165): [478..495]
 a130(r304): [484..489] [480..481]
 a131(r305): [482..483]
 a132(r166): [486..491]
 a133(r303): [492..493]
 a134(r302): [496..497]
 a135(r135): [503..504]
 a136(r134): [505..506]
 a137(r133): [507..508]
 a138(r132): [509..510]
 a139(r130): [509..526]
 a140(r300): [515..520] [511..512]
 a141(r301): [513..514]
 a142(r131): [517..522]
 a143(r299): [523..524]
 a144(r298): [527..528]
 a145(r164): [813..816]
 a146(r297): [813..814]
 a147(r163): [817..818]
 a148(r161): [817..834]
 a149(r295): [823..828] [819..820]
 a150(r296): [821..822]
 a151(r162): [825..830]
 a152(r294): [831..832]
 a153(r293): [835..836]
 a154(r160): [895..896]
 a155(r159): [901..906]
 a156(r149): [903..942]
 a157(r148): [905..944]
 a158(r158): [907..908]
 a159(r157): [909..910]
 a160(r154): [909..918]
 a161(r156): [911..912]
 a162(r155): [913..914]
 a163(r292): [915..916]
 a164(r153): [919..920]
 a165(r152): [921..922]
 a166(r150): [921..938]
 a167(r290): [927..932] [923..924]
 a168(r291): [925..926]
 a169(r151): [929..934]
 a170(r289): [935..936]
 a171(r288): [939..940]
 a172(r147): [842..843]
 a173(r146): [848..853]
 a174(r137): [850..887]
 a175(r136): [852..889]
 a176(r145): [854..855]
 a177(r144): [856..857]
 a178(r142): [856..863]
 a179(r143): [858..859]
 a180(r287): [860..861]
 a181(r141): [864..865]
 a182(r140): [866..867]
 a183(r138): [866..883]
 a184(r285): [872..877] [868..869]
 a185(r286): [870..871]
 a186(r139): [874..879]
 a187(r284): [880..881]
 a188(r283): [884..885]
 a189(r73): [542..543]
 a190(r72): [544..545]
 a191(r71): [546..547]
 a192(r70): [548..549]
 a193(r68): [548..565]
 a194(r281): [554..559] [550..551]
 a195(r282): [552..553]
 a196(r69): [556..561]
 a197(r280): [562..563]
 a198(r279): [566..567]
 a199(r129): [574..577]
 a200(r278 [0]): [574..575]
 a200(r278 [1]): [574..575]
 a201(r128): [578..579]
 a202(r127): [580..581]
 a203(r126): [582..583]
 a204(r124): [582..589]
 a205(r125): [584..585]
 a206(r277): [586..587]
 a207(r123): [590..591]
 a208(r122): [592..593]
 a209(r120): [592..609]
 a210(r275): [598..603] [594..595]
 a211(r276): [596..597]
 a212(r121): [600..605]
 a213(r274): [606..607]
 a214(r273): [610..611]
 a215(r119): [617..620]
 a216(r272 [0]): [617..618]
 a216(r272 [1]): [617..618]
 a217(r118): [621..622]
 a218(r117): [623..624]
 a219(r116): [625..626]
 a220(r114): [625..632]
 a221(r115): [627..628]
 a222(r271): [629..630]
 a223(r113): [633..634]
 a224(r112): [635..636]
 a225(r110): [635..652]
 a226(r269): [641..646] [637..638]
 a227(r270): [639..640]
 a228(r111): [643..648]
 a229(r268): [649..650]
 a230(r267): [653..654]
 a231(r266): [660..661]
 a232(r109): [660..663]
 a233(r108): [664..665]
 a234(r107): [666..667]
 a235(r106): [668..669]
 a236(r105): [670..671]
 a237(r103): [670..677]
 a238(r104): [672..673]
 a239(r265): [674..675]
 a240(r102): [678..679]
 a241(r101): [680..681]
 a242(r99): [680..697]
 a243(r263): [686..691] [682..683]
 a244(r264): [684..685]
 a245(r100): [688..693]
 a246(r262): [694..695]
 a247(r261): [698..699]
 a248(r98): [758..759]
 a249(r97): [764..769]
 a250(r87): [766..805]
 a251(r86): [768..807]
 a252(r96): [770..771]
 a253(r95): [772..773]
 a254(r92): [772..781]
 a255(r94): [774..775]
 a256(r93): [776..777]
 a257(r260): [778..779]
 a258(r91): [782..783]
 a259(r90): [784..785]
 a260(r88): [784..801]
 a261(r258): [790..795] [786..787]
 a262(r259): [788..789]
 a263(r89): [792..797]
 a264(r257): [798..799]
 a265(r256): [802..803]
 a266(r85): [705..706]
 a267(r84): [711..716]
 a268(r75): [713..750]
 a269(r74): [715..752]
 a270(r83): [717..718]
 a271(r82): [719..720]
 a272(r80): [719..726]
 a273(r81): [721..722]
 a274(r255): [723..724]
 a275(r79): [727..728]
 a276(r78): [729..730]
 a277(r76): [729..746]
 a278(r253): [735..740] [731..732]
 a279(r254): [733..734]
 a280(r77): [737..742]
 a281(r252): [743..744]
 a282(r251): [747..748]
 a283(r67): [16..17]
 a284(r66): [18..19]
 a285(r64): [18..35]
 a286(r249): [24..29] [20..21]
 a287(r250): [22..23]
 a288(r65): [26..31]
 a289(r248): [32..33]
 a290(r247): [36..37]
 a291(r63): [40..41]
 a292(r62): [42..43]
 a293(r60): [42..59]
 a294(r245): [48..53] [44..45]
 a295(r246): [46..47]
 a296(r61): [50..55]
 a297(r244): [56..57]
 a298(r243): [60..61]
Compressing live ranges: from 956 to 488 - 51%
Ranges after the compression:
 a0(r242): [0..1]
 a1(r241): [2..3]
 a2(r59): [32..33]
 a3(r357): [34..35]
 a4(r234): [36..53]
 a5(r240): [36..37]
 a6(r239): [38..39]
 a7(r238): [40..41]
 a8(r237): [42..43]
 a9(r235): [42..51]
 a10(r355): [48..49] [44..45]
 a11(r356): [46..47]
 a12(r236): [48..49]
 a13(r354): [50..51]
 a14(r353): [52..53]
 a15(r233): [54..55]
 a16(r231): [54..63]
 a17(r351): [60..61] [56..57]
 a18(r352): [58..59]
 a19(r232): [60..61]
 a20(r350): [62..63]
 a21(r349): [64..65]
 a22(r230): [66..67]
 a23(r225): [66..81]
 a24(r229): [68..69]
 a25(r228): [70..71]
 a26(r226): [70..79]
 a27(r347): [76..77] [72..73]
 a28(r348): [74..75]
 a29(r227): [76..77]
 a30(r346): [78..79]
 a31(r345): [80..81]
 a32(r224): [82..83]
 a33(r223): [84..85]
 a34(r221): [84..93]
 a35(r343): [90..91] [86..87]
 a36(r344): [88..89]
 a37(r222): [90..91]
 a38(r342): [92..93]
 a39(r341): [94..95]
 a40(r219): [196..199]
 a41(r220): [196..197]
 a42(r340): [198..199]
 a43(r218): [200..201]
 a44(r216): [200..209]
 a45(r338): [206..207] [202..203]
 a46(r339): [204..205]
 a47(r217): [206..207]
 a48(r337): [208..209]
 a49(r336): [210..211]
 a50(r215): [96..97]
 a51(r214): [98..99]
 a52(r213): [100..101]
 a53(r211): [100..109]
 a54(r334): [106..107] [102..103]
 a55(r335): [104..105]
 a56(r212): [106..107]
 a57(r333): [108..109]
 a58(r332): [110..111]
 a59(r181): [112..113]
 a60(r180): [114..115]
 a61(r179): [116..117]
 a62(r177): [116..125]
 a63(r330): [122..123] [118..119]
 a64(r331): [120..121]
 a65(r178): [122..123]
 a66(r329): [124..125]
 a67(r328): [126..127]
 a68(r210): [128..129]
 a69(r327): [128..129]
 a70(r209): [130..131]
 a71(r207): [130..139]
 a72(r325): [136..137] [132..133]
 a73(r326): [134..135]
 a74(r208): [136..137]
 a75(r324): [138..139]
 a76(r323): [140..141]
 a77(r206): [142..143]
 a78(r205): [144..145]
 a79(r195): [144..169]
 a80(r194): [144..169]
 a81(r204): [146..147]
 a82(r203): [148..149]
 a83(r200): [148..155]
 a84(r202): [150..151]
 a85(r201): [152..153]
 a86(r322): [154..155]
 a87(r199): [156..157]
 a88(r198): [158..159]
 a89(r196): [158..167]
 a90(r320): [164..165] [160..161]
 a91(r321): [162..163]
 a92(r197): [164..165]
 a93(r319): [166..167]
 a94(r318): [168..169]
 a95(r193): [170..171]
 a96(r192): [172..173]
 a97(r183): [172..195]
 a98(r182): [172..195]
 a99(r191): [174..175]
 a100(r190): [176..177]
 a101(r188): [176..181]
 a102(r189): [178..179]
 a103(r317): [180..181]
 a104(r187): [182..183]
 a105(r186): [184..185]
 a106(r184): [184..193]
 a107(r315): [190..191] [186..187]
 a108(r316): [188..189]
 a109(r185): [190..191]
 a110(r314): [192..193]
 a111(r313): [194..195]
 a112(r176): [212..213]
 a113(r175): [214..215]
 a114(r174): [216..217]
 a115(r172): [216..225]
 a116(r311): [222..223] [218..219]
 a117(r312): [220..221]
 a118(r173): [222..223]
 a119(r310): [224..225]
 a120(r309): [226..227]
 a121(r308): [228..229]
 a122(r307): [228..229]
 a123(r171): [228..231]
 a124(r306): [230..231]
 a125(r170): [232..233]
 a126(r169): [234..235]
 a127(r168): [236..237]
 a128(r167): [238..239]
 a129(r165): [238..247]
 a130(r304): [244..245] [240..241]
 a131(r305): [242..243]
 a132(r166): [244..245]
 a133(r303): [246..247]
 a134(r302): [248..249]
 a135(r135): [250..251]
 a136(r134): [252..253]
 a137(r133): [254..255]
 a138(r132): [256..257]
 a139(r130): [256..265]
 a140(r300): [262..263] [258..259]
 a141(r301): [260..261]
 a142(r131): [262..263]
 a143(r299): [264..265]
 a144(r298): [266..267]
 a145(r164): [420..421]
 a146(r297): [420..421]
 a147(r163): [422..423]
 a148(r161): [422..431]
 a149(r295): [428..429] [424..425]
 a150(r296): [426..427]
 a151(r162): [428..429]
 a152(r294): [430..431]
 a153(r293): [432..433]
 a154(r160): [460..461]
 a155(r159): [462..463]
 a156(r149): [462..487]
 a157(r148): [462..487]
 a158(r158): [464..465]
 a159(r157): [466..467]
 a160(r154): [466..473]
 a161(r156): [468..469]
 a162(r155): [470..471]
 a163(r292): [472..473]
 a164(r153): [474..475]
 a165(r152): [476..477]
 a166(r150): [476..485]
 a167(r290): [482..483] [478..479]
 a168(r291): [480..481]
 a169(r151): [482..483]
 a170(r289): [484..485]
 a171(r288): [486..487]
 a172(r147): [434..435]
 a173(r146): [436..437]
 a174(r137): [436..459]
 a175(r136): [436..459]
 a176(r145): [438..439]
 a177(r144): [440..441]
 a178(r142): [440..445]
 a179(r143): [442..443]
 a180(r287): [444..445]
 a181(r141): [446..447]
 a182(r140): [448..449]
 a183(r138): [448..457]
 a184(r285): [454..455] [450..451]
 a185(r286): [452..453]
 a186(r139): [454..455]
 a187(r284): [456..457]
 a188(r283): [458..459]
 a189(r73): [268..269]
 a190(r72): [270..271]
 a191(r71): [272..273]
 a192(r70): [274..275]
 a193(r68): [274..283]
 a194(r281): [280..281] [276..277]
 a195(r282): [278..279]
 a196(r69): [280..281]
 a197(r280): [282..283]
 a198(r279): [284..285]
 a199(r129): [286..287]
 a200(r278 [0]): [286..287]
 a200(r278 [1]): [286..287]
 a201(r128): [288..289]
 a202(r127): [290..291]
 a203(r126): [292..293]
 a204(r124): [292..297]
 a205(r125): [294..295]
 a206(r277): [296..297]
 a207(r123): [298..299]
 a208(r122): [300..301]
 a209(r120): [300..309]
 a210(r275): [306..307] [302..303]
 a211(r276): [304..305]
 a212(r121): [306..307]
 a213(r274): [308..309]
 a214(r273): [310..311]
 a215(r119): [312..313]
 a216(r272 [0]): [312..313]
 a216(r272 [1]): [312..313]
 a217(r118): [314..315]
 a218(r117): [316..317]
 a219(r116): [318..319]
 a220(r114): [318..323]
 a221(r115): [320..321]
 a222(r271): [322..323]
 a223(r113): [324..325]
 a224(r112): [326..327]
 a225(r110): [326..335]
 a226(r269): [332..333] [328..329]
 a227(r270): [330..331]
 a228(r111): [332..333]
 a229(r268): [334..335]
 a230(r267): [336..337]
 a231(r266): [338..339]
 a232(r109): [338..339]
 a233(r108): [340..341]
 a234(r107): [342..343]
 a235(r106): [344..345]
 a236(r105): [346..347]
 a237(r103): [346..351]
 a238(r104): [348..349]
 a239(r265): [350..351]
 a240(r102): [352..353]
 a241(r101): [354..355]
 a242(r99): [354..363]
 a243(r263): [360..361] [356..357]
 a244(r264): [358..359]
 a245(r100): [360..361]
 a246(r262): [362..363]
 a247(r261): [364..365]
 a248(r98): [392..393]
 a249(r97): [394..395]
 a250(r87): [394..419]
 a251(r86): [394..419]
 a252(r96): [396..397]
 a253(r95): [398..399]
 a254(r92): [398..405]
 a255(r94): [400..401]
 a256(r93): [402..403]
 a257(r260): [404..405]
 a258(r91): [406..407]
 a259(r90): [408..409]
 a260(r88): [408..417]
 a261(r258): [414..415] [410..411]
 a262(r259): [412..413]
 a263(r89): [414..415]
 a264(r257): [416..417]
 a265(r256): [418..419]
 a266(r85): [366..367]
 a267(r84): [368..369]
 a268(r75): [368..391]
 a269(r74): [368..391]
 a270(r83): [370..371]
 a271(r82): [372..373]
 a272(r80): [372..377]
 a273(r81): [374..375]
 a274(r255): [376..377]
 a275(r79): [378..379]
 a276(r78): [380..381]
 a277(r76): [380..389]
 a278(r253): [386..387] [382..383]
 a279(r254): [384..385]
 a280(r77): [386..387]
 a281(r252): [388..389]
 a282(r251): [390..391]
 a283(r67): [4..5]
 a284(r66): [6..7]
 a285(r64): [6..15]
 a286(r249): [12..13] [8..9]
 a287(r250): [10..11]
 a288(r65): [12..13]
 a289(r248): [14..15]
 a290(r247): [16..17]
 a291(r63): [18..19]
 a292(r62): [20..21]
 a293(r60): [20..29]
 a294(r245): [26..27] [22..23]
 a295(r246): [24..25]
 a296(r61): [26..27]
 a297(r244): [28..29]
 a298(r243): [30..31]
  regions=1, blocks=32, points=488
    allocnos=299 (big 2), copies=0, conflicts=0, ranges=325
Disposition:
    2:r59  l0     0  293:r60  l0     2  296:r61  l0     1  292:r62  l0     0
  291:r63  l0     0  285:r64  l0     2  288:r65  l0     1  284:r66  l0     0
  283:r67  l0     0  193:r68  l0     2  196:r69  l0     1  192:r70  l0     0
  191:r71  l0     0  190:r72  l0     0  189:r73  l0     0  269:r74  l0     4
  268:r75  l0     2  277:r76  l0     5  280:r77  l0     1  276:r78  l0     0
  275:r79  l0     0  272:r80  l0     0  273:r81  l0     1  271:r82  l0     1
  270:r83  l0     0  267:r84  l0     0  266:r85  l0     0  251:r86  l0     4
  250:r87  l0     2  260:r88  l0     5  263:r89  l0     1  259:r90  l0     0
  258:r91  l0     0  254:r92  l0     0  256:r93  l0     1  255:r94  l0     1
  253:r95  l0     1  252:r96  l0     0  249:r97  l0     0  248:r98  l0     0
  242:r99  l0     2  245:r100 l0     1  241:r101 l0     0  240:r102 l0     0
  237:r103 l0     0  238:r104 l0     1  236:r105 l0     1  235:r106 l0     0
  234:r107 l0     0  233:r108 l0     0  232:r109 l0     9  225:r110 l0     2
  228:r111 l0     1  224:r112 l0     0  223:r113 l0     0  220:r114 l0     0
  221:r115 l0     1  219:r116 l0     1  218:r117 l0     0  217:r118 l0     0
  215:r119 l0     2  209:r120 l0     2  212:r121 l0     1  208:r122 l0     0
  207:r123 l0     0  204:r124 l0     0  205:r125 l0     1  203:r126 l0     1
  202:r127 l0     0  201:r128 l0     0  199:r129 l0     2  139:r130 l0     2
  142:r131 l0     1  138:r132 l0     0  137:r133 l0     0  136:r134 l0     0
  135:r135 l0     0  175:r136 l0     4  174:r137 l0     2  183:r138 l0     5
  186:r139 l0     1  182:r140 l0     0  181:r141 l0     0  178:r142 l0     0
  179:r143 l0     1  177:r144 l0     1  176:r145 l0     0  173:r146 l0     0
  172:r147 l0     0  157:r148 l0     4  156:r149 l0     2  166:r150 l0     5
  169:r151 l0     1  165:r152 l0     0  164:r153 l0     0  160:r154 l0     0
  162:r155 l0     1  161:r156 l0     1  159:r157 l0     1  158:r158 l0     0
  155:r159 l0     0  154:r160 l0     0  148:r161 l0     2  151:r162 l0     1
  147:r163 l0     0  145:r164 l0     1  129:r165 l0     2  132:r166 l0     1
  128:r167 l0     0  127:r168 l0     0  126:r169 l0     0  125:r170 l0     0
  123:r171 l0     0  115:r172 l0     2  118:r173 l0     1  114:r174 l0     0
  113:r175 l0     0  112:r176 l0     0   62:r177 l0     2   65:r178 l0     1
   61:r179 l0     0   60:r180 l0     0   59:r181 l0     0   98:r182 l0     4
   97:r183 l0     2  106:r184 l0     5  109:r185 l0     1  105:r186 l0     0
  104:r187 l0     0  101:r188 l0     0  102:r189 l0     1  100:r190 l0     1
   99:r191 l0     0   96:r192 l0     0   95:r193 l0     0   80:r194 l0     4
   79:r195 l0     2   89:r196 l0     5   92:r197 l0     1   88:r198 l0     0
   87:r199 l0     0   83:r200 l0     0   85:r201 l0     1   84:r202 l0     1
   82:r203 l0     1   81:r204 l0     0   78:r205 l0     0   77:r206 l0     0
   71:r207 l0     2   74:r208 l0     1   70:r209 l0     0   68:r210 l0     1
   53:r211 l0     2   56:r212 l0     1   52:r213 l0     0   51:r214 l0     0
   50:r215 l0     0   44:r216 l0     2   47:r217 l0     1   43:r218 l0     0
   40:r219 l0     0   41:r220 l0     1   34:r221 l0     2   37:r222 l0     1
   33:r223 l0     0   32:r224 l0     0   23:r225 l0     2   26:r226 l0     4
   29:r227 l0     1   25:r228 l0     0   24:r229 l0     0   22:r230 l0     0
   16:r231 l0     2   19:r232 l0     1   15:r233 l0     0    4:r234 l0     2
    9:r235 l0     4   12:r236 l0     1    8:r237 l0     0    7:r238 l0     0
    6:r239 l0     0    5:r240 l0     0    1:r241 l0     0    0:r242 l0     0
  298:r243 l0     0  297:r244 l0     0  294:r245 l0     0  295:r246 l0     0
  290:r247 l0     0  289:r248 l0     0  286:r249 l0     0  287:r250 l0     0
  282:r251 l0     0  281:r252 l0     0  278:r253 l0     0  279:r254 l0     0
  274:r255 l0     1  265:r256 l0     0  264:r257 l0     0  261:r258 l0     0
  262:r259 l0     0  257:r260 l0     1  247:r261 l0     0  246:r262 l0     0
  243:r263 l0     0  244:r264 l0     0  239:r265 l0     1  231:r266 l0     8
  230:r267 l0     0  229:r268 l0     0  226:r269 l0     0  227:r270 l0     0
  222:r271 l0     1  216:r272 l0     0  214:r273 l0     0  213:r274 l0     0
  210:r275 l0     0  211:r276 l0     0  206:r277 l0     1  200:r278 l0     0
  198:r279 l0     0  197:r280 l0     0  194:r281 l0     0  195:r282 l0     0
  188:r283 l0     0  187:r284 l0     0  184:r285 l0     0  185:r286 l0     0
  180:r287 l0     1  171:r288 l0     0  170:r289 l0     0  167:r290 l0     0
  168:r291 l0     0  163:r292 l0     1  153:r293 l0     0  152:r294 l0     0
  149:r295 l0     0  150:r296 l0     0  146:r297 l0     0  144:r298 l0     0
  143:r299 l0     0  140:r300 l0     0  141:r301 l0     0  134:r302 l0     0
  133:r303 l0     0  130:r304 l0     0  131:r305 l0     0  124:r306 l0     1
  122:r307 l0     4  121:r308 l0     2  120:r309 l0     0  119:r310 l0     0
  116:r311 l0     0  117:r312 l0     0  111:r313 l0     0  110:r314 l0     0
  107:r315 l0     0  108:r316 l0     0  103:r317 l0     1   94:r318 l0     0
   93:r319 l0     0   90:r320 l0     0   91:r321 l0     0   86:r322 l0     1
   76:r323 l0     0   75:r324 l0     0   72:r325 l0     0   73:r326 l0     0
   69:r327 l0     0   67:r328 l0     0   66:r329 l0     0   63:r330 l0     0
   64:r331 l0     0   58:r332 l0     0   57:r333 l0     0   54:r334 l0     0
   55:r335 l0     0   49:r336 l0     0   48:r337 l0     0   45:r338 l0     0
   46:r339 l0     0   42:r340 l0     1   39:r341 l0     0   38:r342 l0     0
   35:r343 l0     0   36:r344 l0     0   31:r345 l0     0   30:r346 l0     0
   27:r347 l0     0   28:r348 l0     0   21:r349 l0     0   20:r350 l0     0
   17:r351 l0     0   18:r352 l0     0   14:r353 l0     0   13:r354 l0     0
   10:r355 l0     0   11:r356 l0     0    3:r357 l0     0
+++Costs: overall -29, reg -29, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


set_boundary_flag_onFlight

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,9u} r1={17d,7u} r2={10d} r4={18d,9u} r5={19d,10u} r6={1d,31u} r7={1d,40u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1d,42u} r17={154d,14u} r18={9d} r19={9d} r20={1d,118u,1e} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r59={1d,1u} r60={1d,1u} r61={1d,2u,1e} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,2u,1e} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,2u,1e} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,2u,1e} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,2u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,2u,1e} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,2u,1e} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,2u,1e} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,2u,1e} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,2u,1e} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,2u,1e} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,2u,1e} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,2u,1e} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,2u,1e} r172={1d,1u} r173={1d,2u,1e} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,2u,1e} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,2u,1e} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,2u,1e} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,2u,1e} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,2u,1e} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,2u,1e} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,2u,1e} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,2u,1e} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,2u,1e} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,2u,1e} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={4d,4u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={4d,4u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={4d,4u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={4d,4u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={4d,4u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={4d,4u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={4d,4u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={4d,4u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={4d,4u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={4d,4u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={4d,4u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={4d,4u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={4d,4u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={4d,4u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={4d,4u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={4d,4u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={4d,4u} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={4d,4u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={4d,4u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={4d,4u} r339={1d,1u} r340={1d,1u} r341={1d,1u} r342={1d,1u} r343={4d,4u} r344={1d,1u} r345={1d,1u} r346={1d,1u} r347={4d,4u} r348={1d,1u} r349={1d,1u} r350={1d,1u} r351={4d,4u} r352={1d,1u} r353={1d,1u} r354={1d,1u} r355={4d,4u} r356={1d,1u} r357={1d,1u} 
;;    total ref usage 1659{957d,676u,26e} in 463{454 regular + 9 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 539 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:225 89 {*movsi_internal}
     (nil))
(jump_insn 539 7 540 2 (set (pc)
        (label_ref 515)) mSector.c:225 650 {jump}
     (nil)
 -> 515)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 540 539 519)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 66 67 243 244 245 246 247 248 249 250
(code_label 519 540 10 3 107 "" [1 uses])
(note 10 519 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 243)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:226 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 60 [ D.5025 ])
        (mem/f:DI (reg/f:DI 243) [0 *f_9(D)+0 S8 A64])) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 243)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 244)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:226 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 61 [ D.5026 ])
        (sign_extend:DI (reg:SI 244))) mSector.c:226 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 244)
        (nil)))
(insn 15 14 16 3 (set (reg:DI 245)
        (reg:DI 61 [ D.5026 ])) mSector.c:226 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 245)
                (ashift:DI (reg:DI 245)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 245)
                (plus:DI (reg:DI 245)
                    (reg:DI 61 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 61 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 246)
                (ashift:DI (reg:DI 245)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 245)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 19 18 20 3 (set (reg:DI 245)
        (reg:DI 246)) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 246)
        (nil)))
(insn 20 19 21 3 (set (reg:DI 62 [ D.5026 ])
        (reg:DI 245)) mSector.c:226 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 245)
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 63 [ D.5025 ])
                (plus:DI (reg/f:DI 60 [ D.5025 ])
                    (reg:DI 62 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:226 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 62 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 22 21 23 3 (set (mem/j:SI (plus:DI (reg/f:DI 63 [ D.5025 ])
                (const_int 44 [0x2c])) [0 _13->st_indx+0 S4 A32])
        (const_int 1 [0x1])) mSector.c:226 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.5025 ])
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 247)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:227 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 64 [ D.5025 ])
        (mem/f:DI (reg/f:DI 247) [0 *f_9(D)+0 S8 A64])) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 247)
        (nil)))
(insn 25 24 26 3 (set (reg:SI 248)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:227 89 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 65 [ D.5026 ])
        (sign_extend:DI (reg:SI 248))) mSector.c:227 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 248)
        (nil)))
(insn 27 26 28 3 (set (reg:DI 249)
        (reg:DI 65 [ D.5026 ])) mSector.c:227 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 249)
                (ashift:DI (reg:DI 249)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 249)
                (plus:DI (reg:DI 249)
                    (reg:DI 65 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 65 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 250)
                (ashift:DI (reg:DI 249)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 249)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 3 (set (reg:DI 249)
        (reg:DI 250)) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 250)
        (nil)))
(insn 32 31 33 3 (set (reg:DI 66 [ D.5026 ])
        (reg:DI 249)) mSector.c:227 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 249)
        (nil)))
(insn 33 32 34 3 (parallel [
            (set (reg/f:DI 67 [ D.5025 ])
                (plus:DI (reg/f:DI 64 [ D.5025 ])
                    (reg:DI 66 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:227 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 66 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 64 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 34 33 35 3 (set (mem/j:SI (plus:DI (reg/f:DI 67 [ D.5025 ])
                (const_int 40 [0x28])) [0 _17->ready+0 S4 A64])
        (const_int 0 [0])) mSector.c:227 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 67 [ D.5025 ])
        (nil)))
(insn 35 34 36 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:228 89 {*movsi_internal}
     (nil))
(insn 36 35 541 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 N+0 S4 A32])
        (const_int 0 [0])) mSector.c:228 89 {*movsi_internal}
     (nil))
(jump_insn 541 36 542 3 (set (pc)
        (label_ref 169)) mSector.c:228 650 {jump}
     (nil)
 -> 169)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 542 541 184)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 78 79 80 81 82 83 84 85 251 252 253 254 255
(code_label 184 542 39 4 94 "" [1 uses])
(note 39 184 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:SI 74 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 75 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 4 (set (reg/f:DI 251)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 76 [ D.5025 ])
        (mem/f:DI (reg/f:DI 251) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 251)
        (nil)))
(insn 44 43 45 4 (set (reg:SI 252)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 77 [ D.5026 ])
        (sign_extend:DI (reg:SI 252))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 252)
        (nil)))
(insn 46 45 47 4 (set (reg:DI 253)
        (reg:DI 77 [ D.5026 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 253)
                (ashift:DI (reg:DI 253)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 253)
                (plus:DI (reg:DI 253)
                    (reg:DI 77 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 77 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 49 48 50 4 (parallel [
            (set (reg:DI 254)
                (ashift:DI (reg:DI 253)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 253)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 50 49 51 4 (set (reg:DI 253)
        (reg:DI 254)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 254)
        (nil)))
(insn 51 50 52 4 (set (reg:DI 78 [ D.5026 ])
        (reg:DI 253)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 253)
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg/f:DI 79 [ D.5025 ])
                (plus:DI (reg/f:DI 76 [ D.5025 ])
                    (reg:DI 78 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 78 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 76 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 53 52 54 4 (set (reg/f:DI 80 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 79 [ D.5025 ])
                (const_int 8 [0x8])) [0 _31->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.5025 ])
        (nil)))
(insn 54 53 55 4 (set (reg:SI 255)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 81 [ D.5026 ])
        (sign_extend:DI (reg:SI 255))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 255)
        (nil)))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 82 [ D.5026 ])
                (ashift:DI (reg:DI 81 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 4 (parallel [
            (set (reg/f:DI 83 [ D.5027 ])
                (plus:DI (reg/f:DI 80 [ D.5027 ])
                    (reg:DI 82 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 80 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 58 57 59 4 (set (reg/f:DI 84 [ D.5028 ])
        (mem/f:DI (reg/f:DI 83 [ D.5027 ]) [0 *_35+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 83 [ D.5027 ])
        (nil)))
(insn 59 58 60 4 (set (reg:SI 1 dx)
        (reg:SI 74 [ D.5024 ])) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 74 [ D.5024 ])
        (nil)))
(insn 60 59 61 4 (set (reg:DI 4 si)
        (reg/f:DI 75 [ D.5027 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.5027 ])
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg/f:DI 84 [ D.5028 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 84 [ D.5028 ])
        (nil)))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:229 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 63 62 64 4 (set (reg:SI 85 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 64 63 65 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 85 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:229 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 85 [ D.5024 ])
        (nil)))
(jump_insn 65 64 66 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mSector.c:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 94)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 86 87 88 89 90 91 92 93 94 95 96 97 98 256 257 258 259 260
(note 66 65 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 5 (set (reg:SI 86 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg/f:DI 87 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 5 (set (reg/f:DI 256)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 5 (set (reg/f:DI 88 [ D.5025 ])
        (mem/f:DI (reg/f:DI 256) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 256)
        (nil)))
(insn 71 70 72 5 (set (reg:SI 257)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:DI 89 [ D.5026 ])
        (sign_extend:DI (reg:SI 257))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 257)
        (nil)))
(insn 73 72 74 5 (set (reg:DI 258)
        (reg:DI 89 [ D.5026 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 5 (parallel [
            (set (reg:DI 258)
                (ashift:DI (reg:DI 258)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 258)
                (plus:DI (reg:DI 258)
                    (reg:DI 89 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 89 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 259)
                (ashift:DI (reg:DI 258)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 258)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 77 76 78 5 (set (reg:DI 258)
        (reg:DI 259)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 259)
        (nil)))
(insn 78 77 79 5 (set (reg:DI 90 [ D.5026 ])
        (reg:DI 258)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 258)
        (nil)))
(insn 79 78 80 5 (parallel [
            (set (reg/f:DI 91 [ D.5025 ])
                (plus:DI (reg/f:DI 88 [ D.5025 ])
                    (reg:DI 90 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 88 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 80 79 81 5 (set (reg/f:DI 92 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 91 [ D.5025 ])
                (const_int 8 [0x8])) [0 _43->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.5025 ])
        (nil)))
(insn 81 80 82 5 (set (reg:SI 260)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:DI 93 [ D.5029 ])
        (sign_extend:DI (reg:SI 260))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 260)
        (nil)))
(insn 83 82 84 5 (parallel [
            (set (reg:DI 94 [ D.5029 ])
                (plus:DI (reg:DI 93 [ D.5029 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93 [ D.5029 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 84 83 85 5 (parallel [
            (set (reg:DI 95 [ D.5029 ])
                (ashift:DI (reg:DI 94 [ D.5029 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 94 [ D.5029 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 85 84 86 5 (parallel [
            (set (reg/f:DI 96 [ D.5027 ])
                (plus:DI (reg/f:DI 92 [ D.5027 ])
                    (reg:DI 95 [ D.5029 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ D.5029 ])
        (expr_list:REG_DEAD (reg/f:DI 92 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 86 85 87 5 (set (reg/f:DI 97 [ D.5028 ])
        (mem/f:DI (reg/f:DI 96 [ D.5027 ]) [0 *_48+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.5027 ])
        (nil)))
(insn 87 86 88 5 (set (reg:SI 1 dx)
        (reg:SI 86 [ D.5024 ])) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ D.5024 ])
        (nil)))
(insn 88 87 89 5 (set (reg:DI 4 si)
        (reg/f:DI 87 [ D.5027 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 87 [ D.5027 ])
        (nil)))
(insn 89 88 90 5 (set (reg:DI 5 di)
        (reg/f:DI 97 [ D.5028 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.5028 ])
        (nil)))
(call_insn 90 89 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:229 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 91 90 92 5 (set (reg:SI 98 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 92 91 93 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 98 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:229 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 98 [ D.5024 ])
        (nil)))
(jump_insn 93 92 94 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) mSector.c:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 144)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 105 106 107 108 109 261 262 263 264 265 266
(code_label 94 93 95 6 90 "" [1 uses])
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (set (reg/f:DI 261)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 6 (set (reg/f:DI 99 [ D.5025 ])
        (mem/f:DI (reg/f:DI 261) [0 *f_9(D)+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 261)
        (nil)))
(insn 98 97 99 6 (set (reg:SI 262)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 99 98 100 6 (set (reg:DI 100 [ D.5026 ])
        (sign_extend:DI (reg:SI 262))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 262)
        (nil)))
(insn 100 99 101 6 (set (reg:DI 263)
        (reg:DI 100 [ D.5026 ])) mSector.c:229 87 {*movdi_internal_rex64}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 263)
                (ashift:DI (reg:DI 263)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 102 101 103 6 (parallel [
            (set (reg:DI 263)
                (plus:DI (reg:DI 263)
                    (reg:DI 100 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 100 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 103 102 104 6 (parallel [
            (set (reg:DI 264)
                (ashift:DI (reg:DI 263)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 263)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 6 (set (reg:DI 263)
        (reg:DI 264)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 264)
        (nil)))
(insn 105 104 106 6 (set (reg:DI 101 [ D.5026 ])
        (reg:DI 263)) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 263)
        (nil)))
(insn 106 105 107 6 (parallel [
            (set (reg/f:DI 102 [ D.5025 ])
                (plus:DI (reg/f:DI 99 [ D.5025 ])
                    (reg:DI 101 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 101 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 107 106 108 6 (set (reg/f:DI 103 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 102 [ D.5025 ])
                (const_int 8 [0x8])) [0 _54->nvp+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 102 [ D.5025 ])
        (nil)))
(insn 108 107 109 6 (set (reg:SI 265)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:229 89 {*movsi_internal}
     (nil))
(insn 109 108 110 6 (set (reg:DI 104 [ D.5026 ])
        (sign_extend:DI (reg:SI 265))) mSector.c:229 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 265)
        (nil)))
(insn 110 109 111 6 (parallel [
            (set (reg:DI 105 [ D.5026 ])
                (ashift:DI (reg:DI 104 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 104 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 106 [ D.5027 ])
                (plus:DI (reg/f:DI 103 [ D.5027 ])
                    (reg:DI 105 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 105 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 103 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 6 (set (reg/f:DI 107 [ D.5028 ])
        (mem/f:DI (reg/f:DI 106 [ D.5027 ]) [0 *_58+0 S8 A64])) mSector.c:229 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 106 [ D.5027 ])
        (nil)))
(insn 113 112 114 6 (parallel [
            (set (reg/f:DI 108 [ D.5028 ])
                (plus:DI (reg/f:DI 107 [ D.5028 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:229 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 107 [ D.5028 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 115 6 (set (reg:XF 109 [ D.5030 ])
        (mem:XF (reg/f:DI 108 [ D.5028 ]) [0 *_60+0 S16 A128])) mSector.c:229 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 108 [ D.5028 ])
        (nil)))
(insn 115 114 116 6 (set (reg:XF 266)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) mSector.c:229 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 2.4e+2 [0x0.fp+8])
        (nil)))
(insn 116 115 117 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 109 [ D.5030 ])
            (reg:XF 266))) mSector.c:229 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 266)
        (expr_list:REG_DEAD (reg:XF 109 [ D.5030 ])
            (nil))))
(jump_insn 117 116 121 6 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) mSector.c:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 144)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 267 268 269 270 271 272
(note 121 117 122 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 7 (set (reg/f:DI 267)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (nil))
(insn 123 122 124 7 (set (reg/f:DI 110 [ D.5025 ])
        (mem/f:DI (reg/f:DI 267) [0 *f_9(D)+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 267)
        (nil)))
(insn 124 123 125 7 (set (reg:SI 268)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:230 89 {*movsi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:DI 111 [ D.5026 ])
        (sign_extend:DI (reg:SI 268))) mSector.c:230 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 268)
        (nil)))
(insn 126 125 127 7 (set (reg:DI 269)
        (reg:DI 111 [ D.5026 ])) mSector.c:230 87 {*movdi_internal_rex64}
     (nil))
(insn 127 126 128 7 (parallel [
            (set (reg:DI 269)
                (ashift:DI (reg:DI 269)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 128 127 129 7 (parallel [
            (set (reg:DI 269)
                (plus:DI (reg:DI 269)
                    (reg:DI 111 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 111 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 111 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 129 128 130 7 (parallel [
            (set (reg:DI 270)
                (ashift:DI (reg:DI 269)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 269)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 130 129 131 7 (set (reg:DI 269)
        (reg:DI 270)) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 270)
        (nil)))
(insn 131 130 132 7 (set (reg:DI 112 [ D.5026 ])
        (reg:DI 269)) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 269)
        (nil)))
(insn 132 131 133 7 (parallel [
            (set (reg/f:DI 113 [ D.5025 ])
                (plus:DI (reg/f:DI 110 [ D.5025 ])
                    (reg:DI 112 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 133 132 134 7 (set (reg/f:DI 114 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 113 [ D.5025 ])
                (const_int 8 [0x8])) [0 _65->nvp+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 113 [ D.5025 ])
        (nil)))
(insn 134 133 135 7 (set (reg:SI 271)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:230 89 {*movsi_internal}
     (nil))
(insn 135 134 136 7 (set (reg:DI 115 [ D.5026 ])
        (sign_extend:DI (reg:SI 271))) mSector.c:230 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 271)
        (nil)))
(insn 136 135 137 7 (parallel [
            (set (reg:DI 116 [ D.5026 ])
                (ashift:DI (reg:DI 115 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 115 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 137 136 138 7 (parallel [
            (set (reg/f:DI 117 [ D.5027 ])
                (plus:DI (reg/f:DI 114 [ D.5027 ])
                    (reg:DI 116 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 138 137 139 7 (set (reg/f:DI 118 [ D.5028 ])
        (mem/f:DI (reg/f:DI 117 [ D.5027 ]) [0 *_69+0 S8 A64])) mSector.c:230 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 117 [ D.5027 ])
        (nil)))
(insn 139 138 140 7 (parallel [
            (set (reg/f:DI 119 [ D.5028 ])
                (plus:DI (reg/f:DI 118 [ D.5028 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:230 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 118 [ D.5028 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 140 139 141 7 (set (reg:XF 272)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S16 A128])) mSector.c:230 131 {*movxf_internal_rex64}
     (nil))
(insn 141 140 543 7 (set (mem:XF (reg/f:DI 119 [ D.5028 ]) [0 *_71+0 S16 A128])
        (reg:XF 272)) mSector.c:230 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 272)
        (expr_list:REG_DEAD (reg/f:DI 119 [ D.5028 ])
            (nil))))
(jump_insn 543 141 544 7 (set (pc)
        (label_ref 166)) mSector.c:230 650 {jump}
     (nil)
 -> 166)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 544 543 144)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 273 274 275 276 277 278
(code_label 144 544 145 8 91 "" [2 uses])
(note 145 144 146 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 8 (set (reg/f:DI 273)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 8 (set (reg/f:DI 120 [ D.5025 ])
        (mem/f:DI (reg/f:DI 273) [0 *f_9(D)+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 273)
        (nil)))
(insn 148 147 149 8 (set (reg:SI 274)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:232 89 {*movsi_internal}
     (nil))
(insn 149 148 150 8 (set (reg:DI 121 [ D.5026 ])
        (sign_extend:DI (reg:SI 274))) mSector.c:232 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 274)
        (nil)))
(insn 150 149 151 8 (set (reg:DI 275)
        (reg:DI 121 [ D.5026 ])) mSector.c:232 87 {*movdi_internal_rex64}
     (nil))
(insn 151 150 152 8 (parallel [
            (set (reg:DI 275)
                (ashift:DI (reg:DI 275)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 152 151 153 8 (parallel [
            (set (reg:DI 275)
                (plus:DI (reg:DI 275)
                    (reg:DI 121 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 121 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 121 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 153 152 154 8 (parallel [
            (set (reg:DI 276)
                (ashift:DI (reg:DI 275)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 275)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 8 (set (reg:DI 275)
        (reg:DI 276)) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 276)
        (nil)))
(insn 155 154 156 8 (set (reg:DI 122 [ D.5026 ])
        (reg:DI 275)) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 275)
        (nil)))
(insn 156 155 157 8 (parallel [
            (set (reg/f:DI 123 [ D.5025 ])
                (plus:DI (reg/f:DI 120 [ D.5025 ])
                    (reg:DI 122 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 157 156 158 8 (set (reg/f:DI 124 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 123 [ D.5025 ])
                (const_int 8 [0x8])) [0 _75->nvp+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 123 [ D.5025 ])
        (nil)))
(insn 158 157 159 8 (set (reg:SI 277)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:232 89 {*movsi_internal}
     (nil))
(insn 159 158 160 8 (set (reg:DI 125 [ D.5026 ])
        (sign_extend:DI (reg:SI 277))) mSector.c:232 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 277)
        (nil)))
(insn 160 159 161 8 (parallel [
            (set (reg:DI 126 [ D.5026 ])
                (ashift:DI (reg:DI 125 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 125 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 8 (parallel [
            (set (reg/f:DI 127 [ D.5027 ])
                (plus:DI (reg/f:DI 124 [ D.5027 ])
                    (reg:DI 126 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 162 161 163 8 (set (reg/f:DI 128 [ D.5028 ])
        (mem/f:DI (reg/f:DI 127 [ D.5027 ]) [0 *_79+0 S8 A64])) mSector.c:232 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 127 [ D.5027 ])
        (nil)))
(insn 163 162 164 8 (parallel [
            (set (reg/f:DI 129 [ D.5028 ])
                (plus:DI (reg/f:DI 128 [ D.5028 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:232 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 128 [ D.5028 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 164 163 165 8 (set (reg:XF 278)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) mSector.c:232 131 {*movxf_internal_rex64}
     (nil))
(insn 165 164 166 8 (set (mem:XF (reg/f:DI 129 [ D.5028 ]) [0 *_81+0 S16 A128])
        (reg:XF 278)) mSector.c:232 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 278)
        (expr_list:REG_DEAD (reg/f:DI 129 [ D.5028 ])
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 166 165 167 9 93 "" [1 uses])
(note 167 166 168 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 69 70 71 72 73 279 280 281 282
(code_label 169 168 170 10 89 "" [1 uses])
(note 170 169 171 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 10 (set (reg/f:DI 279)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:228 87 {*movdi_internal_rex64}
     (nil))
(insn 172 171 173 10 (set (reg/f:DI 68 [ D.5025 ])
        (mem/f:DI (reg/f:DI 279) [0 *f_9(D)+0 S8 A64])) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 279)
        (nil)))
(insn 173 172 174 10 (set (reg:SI 280)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:228 89 {*movsi_internal}
     (nil))
(insn 174 173 175 10 (set (reg:DI 69 [ D.5026 ])
        (sign_extend:DI (reg:SI 280))) mSector.c:228 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 280)
        (nil)))
(insn 175 174 176 10 (set (reg:DI 281)
        (reg:DI 69 [ D.5026 ])) mSector.c:228 87 {*movdi_internal_rex64}
     (nil))
(insn 176 175 177 10 (parallel [
            (set (reg:DI 281)
                (ashift:DI (reg:DI 281)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 177 176 178 10 (parallel [
            (set (reg:DI 281)
                (plus:DI (reg:DI 281)
                    (reg:DI 69 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 69 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 178 177 179 10 (parallel [
            (set (reg:DI 282)
                (ashift:DI (reg:DI 281)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 281)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 10 (set (reg:DI 281)
        (reg:DI 282)) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 282)
        (nil)))
(insn 180 179 181 10 (set (reg:DI 70 [ D.5026 ])
        (reg:DI 281)) mSector.c:228 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 281)
        (nil)))
(insn 181 180 182 10 (parallel [
            (set (reg/f:DI 71 [ D.5025 ])
                (plus:DI (reg/f:DI 68 [ D.5025 ])
                    (reg:DI 70 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 68 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 182 181 183 10 (set (reg:SI 72 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 71 [ D.5025 ])
                (const_int 4 [0x4])) [0 _23->n_nvp+0 S4 A32])) mSector.c:228 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.5025 ])
        (nil)))
(insn 183 182 185 10 (parallel [
            (set (reg:SI 73 [ D.5024 ])
                (plus:SI (reg:SI 72 [ D.5024 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:228 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 72 [ D.5024 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 185 183 186 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 73 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:228 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 73 [ D.5024 ])
        (nil)))
(jump_insn 186 185 187 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) mSector.c:228 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 184)
;;  succ:       4
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 187 186 188 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 545 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) mSector.c:238 89 {*movsi_internal}
     (nil))
(jump_insn 545 188 546 11 (set (pc)
        (label_ref 266)) mSector.c:238 650 {jump}
     (nil)
 -> 266)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 546 545 281)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 136 137 138 139 140 141 142 143 144 145 146 147 283 284 285 286 287
(code_label 281 546 191 12 99 "" [1 uses])
(note 191 281 192 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 12 (set (reg:SI 136 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 193 192 194 12 (set (reg/f:DI 137 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 194 193 195 12 (set (reg/f:DI 283)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 195 194 196 12 (set (reg/f:DI 138 [ D.5025 ])
        (mem/f:DI (reg/f:DI 283) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 283)
        (nil)))
(insn 196 195 197 12 (set (reg:SI 284)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 197 196 198 12 (set (reg:DI 139 [ D.5026 ])
        (sign_extend:DI (reg:SI 284))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 284)
        (nil)))
(insn 198 197 199 12 (set (reg:DI 285)
        (reg:DI 139 [ D.5026 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 199 198 200 12 (parallel [
            (set (reg:DI 285)
                (ashift:DI (reg:DI 285)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 200 199 201 12 (parallel [
            (set (reg:DI 285)
                (plus:DI (reg:DI 285)
                    (reg:DI 139 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 139 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 139 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 201 200 202 12 (parallel [
            (set (reg:DI 286)
                (ashift:DI (reg:DI 285)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 285)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 202 201 203 12 (set (reg:DI 285)
        (reg:DI 286)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 286)
        (nil)))
(insn 203 202 204 12 (set (reg:DI 140 [ D.5026 ])
        (reg:DI 285)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 285)
        (nil)))
(insn 204 203 205 12 (parallel [
            (set (reg/f:DI 141 [ D.5025 ])
                (plus:DI (reg/f:DI 138 [ D.5025 ])
                    (reg:DI 140 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 138 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 205 204 206 12 (set (reg/f:DI 142 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 141 [ D.5025 ])
                (const_int 8 [0x8])) [0 _95->nvp+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 141 [ D.5025 ])
        (nil)))
(insn 206 205 207 12 (set (reg:SI 287)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 207 206 208 12 (set (reg:DI 143 [ D.5026 ])
        (sign_extend:DI (reg:SI 287))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 287)
        (nil)))
(insn 208 207 209 12 (parallel [
            (set (reg:DI 144 [ D.5026 ])
                (ashift:DI (reg:DI 143 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 143 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 12 (parallel [
            (set (reg/f:DI 145 [ D.5027 ])
                (plus:DI (reg/f:DI 142 [ D.5027 ])
                    (reg:DI 144 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 144 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 142 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 210 209 211 12 (set (reg/f:DI 146 [ D.5028 ])
        (mem/f:DI (reg/f:DI 145 [ D.5027 ]) [0 *_99+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 145 [ D.5027 ])
        (nil)))
(insn 211 210 212 12 (set (reg:SI 1 dx)
        (reg:SI 136 [ D.5024 ])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 136 [ D.5024 ])
        (nil)))
(insn 212 211 213 12 (set (reg:DI 4 si)
        (reg/f:DI 137 [ D.5027 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 137 [ D.5027 ])
        (nil)))
(insn 213 212 214 12 (set (reg:DI 5 di)
        (reg/f:DI 146 [ D.5028 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 146 [ D.5028 ])
        (nil)))
(call_insn 214 213 215 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:238 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 215 214 216 12 (set (reg:SI 147 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 216 215 217 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 147 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:238 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 147 [ D.5024 ])
        (nil)))
(jump_insn 217 216 218 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) mSector.c:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 246)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 148 149 150 151 152 153 154 155 156 157 158 159 160 288 289 290 291 292
(note 218 217 219 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 13 (set (reg:SI 148 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 220 219 221 13 (set (reg/f:DI 149 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 221 220 222 13 (set (reg/f:DI 288)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 13 (set (reg/f:DI 150 [ D.5025 ])
        (mem/f:DI (reg/f:DI 288) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 288)
        (nil)))
(insn 223 222 224 13 (set (reg:SI 289)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 224 223 225 13 (set (reg:DI 151 [ D.5026 ])
        (sign_extend:DI (reg:SI 289))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 289)
        (nil)))
(insn 225 224 226 13 (set (reg:DI 290)
        (reg:DI 151 [ D.5026 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 226 225 227 13 (parallel [
            (set (reg:DI 290)
                (ashift:DI (reg:DI 290)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 227 226 228 13 (parallel [
            (set (reg:DI 290)
                (plus:DI (reg:DI 290)
                    (reg:DI 151 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 151 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 228 227 229 13 (parallel [
            (set (reg:DI 291)
                (ashift:DI (reg:DI 290)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 290)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 229 228 230 13 (set (reg:DI 290)
        (reg:DI 291)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 291)
        (nil)))
(insn 230 229 231 13 (set (reg:DI 152 [ D.5026 ])
        (reg:DI 290)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 290)
        (nil)))
(insn 231 230 232 13 (parallel [
            (set (reg/f:DI 153 [ D.5025 ])
                (plus:DI (reg/f:DI 150 [ D.5025 ])
                    (reg:DI 152 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 152 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 150 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 232 231 233 13 (set (reg/f:DI 154 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 153 [ D.5025 ])
                (const_int 8 [0x8])) [0 _107->nvp+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 153 [ D.5025 ])
        (nil)))
(insn 233 232 234 13 (set (reg:SI 292)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 234 233 235 13 (set (reg:DI 155 [ D.5029 ])
        (sign_extend:DI (reg:SI 292))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 292)
        (nil)))
(insn 235 234 236 13 (parallel [
            (set (reg:DI 156 [ D.5029 ])
                (plus:DI (reg:DI 155 [ D.5029 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ D.5029 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 236 235 237 13 (parallel [
            (set (reg:DI 157 [ D.5029 ])
                (ashift:DI (reg:DI 156 [ D.5029 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 156 [ D.5029 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 237 236 238 13 (parallel [
            (set (reg/f:DI 158 [ D.5027 ])
                (plus:DI (reg/f:DI 154 [ D.5027 ])
                    (reg:DI 157 [ D.5029 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 157 [ D.5029 ])
        (expr_list:REG_DEAD (reg/f:DI 154 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 238 237 239 13 (set (reg/f:DI 159 [ D.5028 ])
        (mem/f:DI (reg/f:DI 158 [ D.5027 ]) [0 *_112+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 158 [ D.5027 ])
        (nil)))
(insn 239 238 240 13 (set (reg:SI 1 dx)
        (reg:SI 148 [ D.5024 ])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 148 [ D.5024 ])
        (nil)))
(insn 240 239 241 13 (set (reg:DI 4 si)
        (reg/f:DI 149 [ D.5027 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 149 [ D.5027 ])
        (nil)))
(insn 241 240 242 13 (set (reg:DI 5 di)
        (reg/f:DI 159 [ D.5028 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 159 [ D.5028 ])
        (nil)))
(call_insn 242 241 243 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:238 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 243 242 244 13 (set (reg:SI 160 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 244 243 245 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:238 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 160 [ D.5024 ])
        (nil)))
(jump_insn 245 244 246 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) mSector.c:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 263)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 164 293 294 295 296 297
(code_label 246 245 247 14 96 "" [1 uses])
(note 247 246 248 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 14 (set (reg/f:DI 293)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 249 248 250 14 (set (reg/f:DI 161 [ D.5025 ])
        (mem/f:DI (reg/f:DI 293) [0 *f_9(D)+0 S8 A64])) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 293)
        (nil)))
(insn 250 249 251 14 (set (reg:SI 294)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:239 89 {*movsi_internal}
     (nil))
(insn 251 250 252 14 (set (reg:DI 162 [ D.5026 ])
        (sign_extend:DI (reg:SI 294))) mSector.c:239 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 294)
        (nil)))
(insn 252 251 253 14 (set (reg:DI 295)
        (reg:DI 162 [ D.5026 ])) mSector.c:239 87 {*movdi_internal_rex64}
     (nil))
(insn 253 252 254 14 (parallel [
            (set (reg:DI 295)
                (ashift:DI (reg:DI 295)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 254 253 255 14 (parallel [
            (set (reg:DI 295)
                (plus:DI (reg:DI 295)
                    (reg:DI 162 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 162 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 162 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 255 254 256 14 (parallel [
            (set (reg:DI 296)
                (ashift:DI (reg:DI 295)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 295)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 256 255 257 14 (set (reg:DI 295)
        (reg:DI 296)) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(insn 257 256 258 14 (set (reg:DI 163 [ D.5026 ])
        (reg:DI 295)) mSector.c:239 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 295)
        (nil)))
(insn 258 257 259 14 (parallel [
            (set (reg/f:DI 164 [ D.5025 ])
                (plus:DI (reg/f:DI 161 [ D.5025 ])
                    (reg:DI 163 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:239 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 163 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 161 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 259 258 260 14 (set (reg:SI 297)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:239 89 {*movsi_internal}
     (nil))
(insn 260 259 547 14 (set (mem/j:SI (plus:DI (reg/f:DI 164 [ D.5025 ])
                (const_int 112 [0x70])) [0 _119->bound+0 S4 A128])
        (reg:SI 297)) mSector.c:239 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 297)
        (expr_list:REG_DEAD (reg/f:DI 164 [ D.5025 ])
            (nil))))
(jump_insn 547 260 548 14 (set (pc)
        (label_ref 284)) mSector.c:240 650 {jump}
     (nil)
 -> 284)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 548 547 263)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 263 548 264 15 97 "" [1 uses])
(note 264 263 265 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 134 135 298 299 300 301
(code_label 266 265 267 16 95 "" [1 uses])
(note 267 266 268 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 16 (set (reg/f:DI 298)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 269 268 270 16 (set (reg/f:DI 130 [ D.5025 ])
        (mem/f:DI (reg/f:DI 298) [0 *f_9(D)+0 S8 A64])) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 298)
        (nil)))
(insn 270 269 271 16 (set (reg:SI 299)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (nil))
(insn 271 270 272 16 (set (reg:DI 131 [ D.5026 ])
        (sign_extend:DI (reg:SI 299))) mSector.c:238 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 299)
        (nil)))
(insn 272 271 273 16 (set (reg:DI 300)
        (reg:DI 131 [ D.5026 ])) mSector.c:238 87 {*movdi_internal_rex64}
     (nil))
(insn 273 272 274 16 (parallel [
            (set (reg:DI 300)
                (ashift:DI (reg:DI 300)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 274 273 275 16 (parallel [
            (set (reg:DI 300)
                (plus:DI (reg:DI 300)
                    (reg:DI 131 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 131 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 131 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 275 274 276 16 (parallel [
            (set (reg:DI 301)
                (ashift:DI (reg:DI 300)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 300)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 276 275 277 16 (set (reg:DI 300)
        (reg:DI 301)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 301)
        (nil)))
(insn 277 276 278 16 (set (reg:DI 132 [ D.5026 ])
        (reg:DI 300)) mSector.c:238 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 300)
        (nil)))
(insn 278 277 279 16 (parallel [
            (set (reg/f:DI 133 [ D.5025 ])
                (plus:DI (reg/f:DI 130 [ D.5025 ])
                    (reg:DI 132 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 132 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 130 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 279 278 280 16 (set (reg:SI 134 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 133 [ D.5025 ])
                (const_int 4 [0x4])) [0 _87->n_nvp+0 S4 A32])) mSector.c:238 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ D.5025 ])
        (nil)))
(insn 280 279 282 16 (parallel [
            (set (reg:SI 135 [ D.5024 ])
                (plus:SI (reg:SI 134 [ D.5024 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:238 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 134 [ D.5024 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 282 280 283 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 135 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:238 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 135 [ D.5024 ])
        (nil)))
(jump_insn 283 282 284 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) mSector.c:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 281)
;;  succ:       12
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 166 167 168 169 170 302 303 304 305
(code_label 284 283 285 17 98 "" [1 uses])
(note 285 284 286 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 17 (set (reg/f:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:242 87 {*movdi_internal_rex64}
     (nil))
(insn 287 286 288 17 (set (reg/f:DI 165 [ D.5025 ])
        (mem/f:DI (reg/f:DI 302) [0 *f_9(D)+0 S8 A64])) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 302)
        (nil)))
(insn 288 287 289 17 (set (reg:SI 303)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:242 89 {*movsi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:DI 166 [ D.5026 ])
        (sign_extend:DI (reg:SI 303))) mSector.c:242 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 303)
        (nil)))
(insn 290 289 291 17 (set (reg:DI 304)
        (reg:DI 166 [ D.5026 ])) mSector.c:242 87 {*movdi_internal_rex64}
     (nil))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 304)
                (ashift:DI (reg:DI 304)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 292 291 293 17 (parallel [
            (set (reg:DI 304)
                (plus:DI (reg:DI 304)
                    (reg:DI 166 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 166 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 166 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 293 292 294 17 (parallel [
            (set (reg:DI 305)
                (ashift:DI (reg:DI 304)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 304)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 294 293 295 17 (set (reg:DI 304)
        (reg:DI 305)) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 305)
        (nil)))
(insn 295 294 296 17 (set (reg:DI 167 [ D.5026 ])
        (reg:DI 304)) mSector.c:242 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 304)
        (nil)))
(insn 296 295 297 17 (parallel [
            (set (reg/f:DI 168 [ D.5025 ])
                (plus:DI (reg/f:DI 165 [ D.5025 ])
                    (reg:DI 167 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 167 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 165 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 297 296 298 17 (set (reg:SI 169 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 168 [ D.5025 ])
                (const_int 4 [0x4])) [0 _123->n_nvp+0 S4 A32])) mSector.c:242 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168 [ D.5025 ])
        (nil)))
(insn 298 297 299 17 (parallel [
            (set (reg:SI 170 [ D.5024 ])
                (plus:SI (reg:SI 169 [ D.5024 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:242 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 169 [ D.5024 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 299 298 300 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 170 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:242 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 170 [ D.5024 ])
        (nil)))
(jump_insn 300 299 301 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 329)
            (pc))) mSector.c:242 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 329)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 171 172 173 174 175 176 306 307 308 309 310 311 312
(note 301 300 302 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 18 (set (reg:SI 171 [ i.3 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:243 89 {*movsi_internal}
     (nil))
(insn 303 302 304 18 (parallel [
            (set (reg:SI 306)
                (plus:SI (reg:SI 171 [ i.3 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:243 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 304 303 305 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 306)) mSector.c:243 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 306)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 171 [ i.3 ])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 305 304 306 18 (set (reg:DI 307)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:243 87 {*movdi_internal_rex64}
     (nil))
(insn 306 305 307 18 (set (reg:DI 308)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:243 87 {*movdi_internal_rex64}
     (nil))
(insn 307 306 308 18 (set (reg:SI 1 dx)
        (reg:SI 171 [ i.3 ])) mSector.c:243 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 171 [ i.3 ])
        (nil)))
(insn 308 307 309 18 (set (reg:DI 4 si)
        (reg:DI 307)) mSector.c:243 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 307)
        (nil)))
(insn 309 308 310 18 (set (reg:DI 5 di)
        (reg:DI 308)) mSector.c:243 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 308)
        (nil)))
(call_insn 310 309 311 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("remove_aircraft") [flags 0x3]  <function_decl 0x7f44d2a01700 remove_aircraft>) [0 remove_aircraft S1 A8])
            (const_int 0 [0]))) mSector.c:243 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 311 310 312 18 (set (reg/f:DI 309)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 312 311 313 18 (set (reg/f:DI 172 [ D.5025 ])
        (mem/f:DI (reg/f:DI 309) [0 *f_9(D)+0 S8 A64])) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 309)
        (nil)))
(insn 313 312 314 18 (set (reg:SI 310)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:244 89 {*movsi_internal}
     (nil))
(insn 314 313 315 18 (set (reg:DI 173 [ D.5026 ])
        (sign_extend:DI (reg:SI 310))) mSector.c:244 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 310)
        (nil)))
(insn 315 314 316 18 (set (reg:DI 311)
        (reg:DI 173 [ D.5026 ])) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 316 315 317 18 (parallel [
            (set (reg:DI 311)
                (ashift:DI (reg:DI 311)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 317 316 318 18 (parallel [
            (set (reg:DI 311)
                (plus:DI (reg:DI 311)
                    (reg:DI 173 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 173 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 173 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 318 317 319 18 (parallel [
            (set (reg:DI 312)
                (ashift:DI (reg:DI 311)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 311)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 319 318 320 18 (set (reg:DI 311)
        (reg:DI 312)) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 312)
        (nil)))
(insn 320 319 321 18 (set (reg:DI 174 [ D.5026 ])
        (reg:DI 311)) mSector.c:244 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 311)
        (nil)))
(insn 321 320 322 18 (parallel [
            (set (reg/f:DI 175 [ D.5025 ])
                (plus:DI (reg/f:DI 172 [ D.5025 ])
                    (reg:DI 174 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:244 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 174 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 172 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 322 321 323 18 (set (reg:SI 176 [ D.5024 ])
        (mem/j:SI (reg/f:DI 175 [ D.5025 ]) [0 _131->ID+0 S4 A128])) mSector.c:244 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175 [ D.5025 ])
        (nil)))
(insn 323 322 324 18 (set (reg:SI 4 si)
        (reg:SI 176 [ D.5024 ])) mSector.c:244 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 176 [ D.5024 ])
        (nil)))
(insn 324 323 325 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f44d28a47b8 *.LC13>)) mSector.c:244 87 {*movdi_internal_rex64}
     (nil))
(insn 325 324 326 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) mSector.c:244 91 {*movqi_internal}
     (nil))
(call_insn 326 325 549 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f44d2950f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mSector.c:244 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
(jump_insn 549 326 550 18 (set (pc)
        (label_ref 512)) mSector.c:245 650 {jump}
     (nil)
 -> 512)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 550 549 329)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 329 550 330 19 100 "" [1 uses])
(note 330 329 331 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 551 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 551 331 552 19 (set (pc)
        (label_ref 408)) mSector.c:248 650 {jump}
     (nil)
 -> 408)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 552 551 422)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 182 183 184 185 186 187 188 189 190 191 192 193 313 314 315 316 317
(code_label 422 552 334 20 105 "" [1 uses])
(note 334 422 335 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 336 20 (set (reg:SI 182 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 336 335 337 20 (set (reg/f:DI 183 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 337 336 338 20 (set (reg/f:DI 313)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 338 337 339 20 (set (reg/f:DI 184 [ D.5025 ])
        (mem/f:DI (reg/f:DI 313) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 313)
        (nil)))
(insn 339 338 340 20 (set (reg:SI 314)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 340 339 341 20 (set (reg:DI 185 [ D.5026 ])
        (sign_extend:DI (reg:SI 314))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 314)
        (nil)))
(insn 341 340 342 20 (set (reg:DI 315)
        (reg:DI 185 [ D.5026 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 342 341 343 20 (parallel [
            (set (reg:DI 315)
                (ashift:DI (reg:DI 315)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 343 342 344 20 (parallel [
            (set (reg:DI 315)
                (plus:DI (reg:DI 315)
                    (reg:DI 185 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 185 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 185 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 344 343 345 20 (parallel [
            (set (reg:DI 316)
                (ashift:DI (reg:DI 315)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 315)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 345 344 346 20 (set (reg:DI 315)
        (reg:DI 316)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 316)
        (nil)))
(insn 346 345 347 20 (set (reg:DI 186 [ D.5026 ])
        (reg:DI 315)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 315)
        (nil)))
(insn 347 346 348 20 (parallel [
            (set (reg/f:DI 187 [ D.5025 ])
                (plus:DI (reg/f:DI 184 [ D.5025 ])
                    (reg:DI 186 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 186 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 184 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 348 347 349 20 (set (reg/f:DI 188 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 187 [ D.5025 ])
                (const_int 8 [0x8])) [0 _144->nvp+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 187 [ D.5025 ])
        (nil)))
(insn 349 348 350 20 (set (reg:SI 317)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 350 349 351 20 (set (reg:DI 189 [ D.5026 ])
        (sign_extend:DI (reg:SI 317))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 317)
        (nil)))
(insn 351 350 352 20 (parallel [
            (set (reg:DI 190 [ D.5026 ])
                (ashift:DI (reg:DI 189 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 189 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 352 351 353 20 (parallel [
            (set (reg/f:DI 191 [ D.5027 ])
                (plus:DI (reg/f:DI 188 [ D.5027 ])
                    (reg:DI 190 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 190 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 188 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 353 352 354 20 (set (reg/f:DI 192 [ D.5028 ])
        (mem/f:DI (reg/f:DI 191 [ D.5027 ]) [0 *_148+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 191 [ D.5027 ])
        (nil)))
(insn 354 353 355 20 (set (reg:SI 1 dx)
        (reg:SI 182 [ D.5024 ])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 182 [ D.5024 ])
        (nil)))
(insn 355 354 356 20 (set (reg:DI 4 si)
        (reg/f:DI 183 [ D.5027 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 183 [ D.5027 ])
        (nil)))
(insn 356 355 357 20 (set (reg:DI 5 di)
        (reg/f:DI 192 [ D.5028 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 192 [ D.5028 ])
        (nil)))
(call_insn 357 356 358 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:248 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 358 357 359 20 (set (reg:SI 193 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 359 358 360 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 193 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:248 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 193 [ D.5024 ])
        (nil)))
(jump_insn 360 359 361 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) mSector.c:248 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 405)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 194 195 196 197 198 199 200 201 202 203 204 205 206 318 319 320 321 322
(note 361 360 362 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 21 (set (reg:SI 194 [ D.5024 ])
        (mem/j/c:SI (reg/f:DI 16 argp) [0 c.Nbound+0 S4 A128])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 363 362 364 21 (set (reg/f:DI 195 [ D.5027 ])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 c.bound+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 364 363 365 21 (set (reg/f:DI 318)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 365 364 366 21 (set (reg/f:DI 196 [ D.5025 ])
        (mem/f:DI (reg/f:DI 318) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 318)
        (nil)))
(insn 366 365 367 21 (set (reg:SI 319)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 367 366 368 21 (set (reg:DI 197 [ D.5026 ])
        (sign_extend:DI (reg:SI 319))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 319)
        (nil)))
(insn 368 367 369 21 (set (reg:DI 320)
        (reg:DI 197 [ D.5026 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 369 368 370 21 (parallel [
            (set (reg:DI 320)
                (ashift:DI (reg:DI 320)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 370 369 371 21 (parallel [
            (set (reg:DI 320)
                (plus:DI (reg:DI 320)
                    (reg:DI 197 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 197 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 371 370 372 21 (parallel [
            (set (reg:DI 321)
                (ashift:DI (reg:DI 320)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 320)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 372 371 373 21 (set (reg:DI 320)
        (reg:DI 321)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 321)
        (nil)))
(insn 373 372 374 21 (set (reg:DI 198 [ D.5026 ])
        (reg:DI 320)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 320)
        (nil)))
(insn 374 373 375 21 (parallel [
            (set (reg/f:DI 199 [ D.5025 ])
                (plus:DI (reg/f:DI 196 [ D.5025 ])
                    (reg:DI 198 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 196 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 375 374 376 21 (set (reg/f:DI 200 [ D.5027 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 199 [ D.5025 ])
                (const_int 8 [0x8])) [0 _156->nvp+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 199 [ D.5025 ])
        (nil)))
(insn 376 375 377 21 (set (reg:SI 322)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 377 376 378 21 (set (reg:DI 201 [ D.5026 ])
        (sign_extend:DI (reg:SI 322))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 322)
        (nil)))
(insn 378 377 379 21 (parallel [
            (set (reg:DI 202 [ D.5026 ])
                (ashift:DI (reg:DI 201 [ D.5026 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 201 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 379 378 380 21 (parallel [
            (set (reg:DI 203 [ D.5029 ])
                (plus:DI (reg:DI 202 [ D.5026 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 202 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 380 379 381 21 (parallel [
            (set (reg/f:DI 204 [ D.5027 ])
                (plus:DI (reg/f:DI 200 [ D.5027 ])
                    (reg:DI 203 [ D.5029 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 203 [ D.5029 ])
        (expr_list:REG_DEAD (reg/f:DI 200 [ D.5027 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 381 380 382 21 (set (reg/f:DI 205 [ D.5028 ])
        (mem/f:DI (reg/f:DI 204 [ D.5027 ]) [0 *_161+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 204 [ D.5027 ])
        (nil)))
(insn 382 381 383 21 (set (reg:SI 1 dx)
        (reg:SI 194 [ D.5024 ])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 194 [ D.5024 ])
        (nil)))
(insn 383 382 384 21 (set (reg:DI 4 si)
        (reg/f:DI 195 [ D.5027 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 195 [ D.5027 ])
        (nil)))
(insn 384 383 385 21 (set (reg:DI 5 di)
        (reg/f:DI 205 [ D.5028 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 205 [ D.5028 ])
        (nil)))
(call_insn 385 384 386 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("point_in_polygon") [flags 0x41]  <function_decl 0x7f44d29f7e00 point_in_polygon>) [0 point_in_polygon S1 A8])
            (const_int 0 [0]))) mSector.c:248 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 386 385 387 21 (set (reg:SI 206 [ D.5024 ])
        (reg:SI 0 ax)) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 387 386 388 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 206 [ D.5024 ])
            (const_int 0 [0]))) mSector.c:248 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 206 [ D.5024 ])
        (nil)))
(jump_insn 388 387 389 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) mSector.c:248 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 405)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 323 324 325 326 327
(note 389 388 390 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 22 (set (reg/f:DI 323)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 391 390 392 22 (set (reg/f:DI 207 [ D.5025 ])
        (mem/f:DI (reg/f:DI 323) [0 *f_9(D)+0 S8 A64])) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 323)
        (nil)))
(insn 392 391 393 22 (set (reg:SI 324)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:249 89 {*movsi_internal}
     (nil))
(insn 393 392 394 22 (set (reg:DI 208 [ D.5026 ])
        (sign_extend:DI (reg:SI 324))) mSector.c:249 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 324)
        (nil)))
(insn 394 393 395 22 (set (reg:DI 325)
        (reg:DI 208 [ D.5026 ])) mSector.c:249 87 {*movdi_internal_rex64}
     (nil))
(insn 395 394 396 22 (parallel [
            (set (reg:DI 325)
                (ashift:DI (reg:DI 325)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 396 395 397 22 (parallel [
            (set (reg:DI 325)
                (plus:DI (reg:DI 325)
                    (reg:DI 208 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 208 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 397 396 398 22 (parallel [
            (set (reg:DI 326)
                (ashift:DI (reg:DI 325)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 325)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 398 397 399 22 (set (reg:DI 325)
        (reg:DI 326)) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 326)
        (nil)))
(insn 399 398 400 22 (set (reg:DI 209 [ D.5026 ])
        (reg:DI 325)) mSector.c:249 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 325)
        (nil)))
(insn 400 399 401 22 (parallel [
            (set (reg/f:DI 210 [ D.5025 ])
                (plus:DI (reg/f:DI 207 [ D.5025 ])
                    (reg:DI 209 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:249 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 209 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 207 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 401 400 402 22 (set (reg:SI 327)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:249 89 {*movsi_internal}
     (nil))
(insn 402 401 553 22 (set (mem/j:SI (plus:DI (reg/f:DI 210 [ D.5025 ])
                (const_int 116 [0x74])) [0 _167->bound+4 S4 A32])
        (reg:SI 327)) mSector.c:249 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 327)
        (expr_list:REG_DEAD (reg/f:DI 210 [ D.5025 ])
            (nil))))
(jump_insn 553 402 554 22 (set (pc)
        (label_ref 425)) mSector.c:250 650 {jump}
     (nil)
 -> 425)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 405)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 405 554 406 23 103 "" [2 uses])
(note 406 405 407 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177 178 179 180 181 328 329 330 331
(code_label 408 407 409 24 102 "" [1 uses])
(note 409 408 410 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 410 409 411 24 (set (reg/f:DI 328)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 411 410 412 24 (set (reg/f:DI 177 [ D.5025 ])
        (mem/f:DI (reg/f:DI 328) [0 *f_9(D)+0 S8 A64])) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 328)
        (nil)))
(insn 412 411 413 24 (set (reg:SI 329)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (nil))
(insn 413 412 414 24 (set (reg:DI 178 [ D.5026 ])
        (sign_extend:DI (reg:SI 329))) mSector.c:248 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 329)
        (nil)))
(insn 414 413 415 24 (set (reg:DI 330)
        (reg:DI 178 [ D.5026 ])) mSector.c:248 87 {*movdi_internal_rex64}
     (nil))
(insn 415 414 416 24 (parallel [
            (set (reg:DI 330)
                (ashift:DI (reg:DI 330)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 416 415 417 24 (parallel [
            (set (reg:DI 330)
                (plus:DI (reg:DI 330)
                    (reg:DI 178 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 178 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 178 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 417 416 418 24 (parallel [
            (set (reg:DI 331)
                (ashift:DI (reg:DI 330)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 330)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 418 417 419 24 (set (reg:DI 330)
        (reg:DI 331)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 331)
        (nil)))
(insn 419 418 420 24 (set (reg:DI 179 [ D.5026 ])
        (reg:DI 330)) mSector.c:248 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 330)
        (nil)))
(insn 420 419 421 24 (parallel [
            (set (reg/f:DI 180 [ D.5025 ])
                (plus:DI (reg/f:DI 177 [ D.5025 ])
                    (reg:DI 179 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:248 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 179 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 177 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 421 420 423 24 (set (reg:SI 181 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 180 [ D.5025 ])
                (const_int 4 [0x4])) [0 _137->n_nvp+0 S4 A32])) mSector.c:248 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180 [ D.5025 ])
        (nil)))
(insn 423 421 424 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 181 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:248 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 181 [ D.5024 ])
        (nil)))
(jump_insn 424 423 425 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 422)
            (pc))) mSector.c:248 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 422)
;;  succ:       20
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              22 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211 212 213 214 215 332 333 334 335
(code_label 425 424 426 25 104 "" [1 uses])
(note 426 425 427 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 427 426 428 25 (set (reg/f:DI 332)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 428 427 429 25 (set (reg/f:DI 211 [ D.5025 ])
        (mem/f:DI (reg/f:DI 332) [0 *f_9(D)+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 332)
        (nil)))
(insn 429 428 430 25 (set (reg:SI 333)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 430 429 431 25 (set (reg:DI 212 [ D.5026 ])
        (sign_extend:DI (reg:SI 333))) mSector.c:252 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 333)
        (nil)))
(insn 431 430 432 25 (set (reg:DI 334)
        (reg:DI 212 [ D.5026 ])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 432 431 433 25 (parallel [
            (set (reg:DI 334)
                (ashift:DI (reg:DI 334)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 433 432 434 25 (parallel [
            (set (reg:DI 334)
                (plus:DI (reg:DI 334)
                    (reg:DI 212 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 212 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 434 433 435 25 (parallel [
            (set (reg:DI 335)
                (ashift:DI (reg:DI 334)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 334)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 435 434 436 25 (set (reg:DI 334)
        (reg:DI 335)) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 335)
        (nil)))
(insn 436 435 437 25 (set (reg:DI 213 [ D.5026 ])
        (reg:DI 334)) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 334)
        (nil)))
(insn 437 436 438 25 (parallel [
            (set (reg/f:DI 214 [ D.5025 ])
                (plus:DI (reg/f:DI 211 [ D.5025 ])
                    (reg:DI 213 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 213 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 211 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 438 437 439 25 (set (reg:SI 215 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 214 [ D.5025 ])
                (const_int 4 [0x4])) [0 _172->n_nvp+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 214 [ D.5025 ])
        (nil)))
(insn 439 438 440 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 215 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) mSector.c:252 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 215 [ D.5024 ])
        (nil)))
(jump_insn 440 439 441 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 456)
            (pc))) mSector.c:252 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 456)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 218 219 220 336 337 338 339 340
(note 441 440 442 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 442 441 443 26 (set (reg/f:DI 336)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 443 442 444 26 (set (reg/f:DI 216 [ D.5025 ])
        (mem/f:DI (reg/f:DI 336) [0 *f_9(D)+0 S8 A64])) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 336)
        (nil)))
(insn 444 443 445 26 (set (reg:SI 337)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 445 444 446 26 (set (reg:DI 217 [ D.5026 ])
        (sign_extend:DI (reg:SI 337))) mSector.c:252 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 337)
        (nil)))
(insn 446 445 447 26 (set (reg:DI 338)
        (reg:DI 217 [ D.5026 ])) mSector.c:252 87 {*movdi_internal_rex64}
     (nil))
(insn 447 446 448 26 (parallel [
            (set (reg:DI 338)
                (ashift:DI (reg:DI 338)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 448 447 449 26 (parallel [
            (set (reg:DI 338)
                (plus:DI (reg:DI 338)
                    (reg:DI 217 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 217 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 217 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 449 448 450 26 (parallel [
            (set (reg:DI 339)
                (ashift:DI (reg:DI 338)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 338)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 450 449 451 26 (set (reg:DI 338)
        (reg:DI 339)) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 339)
        (nil)))
(insn 451 450 452 26 (set (reg:DI 218 [ D.5026 ])
        (reg:DI 338)) mSector.c:252 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 338)
        (nil)))
(insn 452 451 453 26 (parallel [
            (set (reg/f:DI 219 [ D.5025 ])
                (plus:DI (reg/f:DI 216 [ D.5025 ])
                    (reg:DI 218 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 218 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 216 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 453 452 454 26 (set (reg:SI 340)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) mSector.c:252 89 {*movsi_internal}
     (nil))
(insn 454 453 455 26 (parallel [
            (set (reg:SI 220 [ D.5024 ])
                (plus:SI (reg:SI 340)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:252 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 340)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 455 454 456 26 (set (mem/j:SI (plus:DI (reg/f:DI 219 [ D.5025 ])
                (const_int 116 [0x74])) [0 _177->bound+4 S4 A32])
        (reg:SI 220 [ D.5024 ])) mSector.c:252 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 220 [ D.5024 ])
        (expr_list:REG_DEAD (reg/f:DI 219 [ D.5025 ])
            (nil))))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 223 224 225 226 227 228 229 230 341 342 343 344 345 346 347 348
(code_label 456 455 457 27 106 "" [1 uses])
(note 457 456 458 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 458 457 459 27 (set (reg/f:DI 341)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 459 458 460 27 (set (reg/f:DI 221 [ D.5025 ])
        (mem/f:DI (reg/f:DI 341) [0 *f_9(D)+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 341)
        (nil)))
(insn 460 459 461 27 (set (reg:SI 342)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (nil))
(insn 461 460 462 27 (set (reg:DI 222 [ D.5026 ])
        (sign_extend:DI (reg:SI 342))) mSector.c:255 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 342)
        (nil)))
(insn 462 461 463 27 (set (reg:DI 343)
        (reg:DI 222 [ D.5026 ])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 463 462 464 27 (parallel [
            (set (reg:DI 343)
                (ashift:DI (reg:DI 343)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 464 463 465 27 (parallel [
            (set (reg:DI 343)
                (plus:DI (reg:DI 343)
                    (reg:DI 222 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 222 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 222 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 465 464 466 27 (parallel [
            (set (reg:DI 344)
                (ashift:DI (reg:DI 343)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 343)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 466 465 467 27 (set (reg:DI 343)
        (reg:DI 344)) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 344)
        (nil)))
(insn 467 466 468 27 (set (reg:DI 223 [ D.5026 ])
        (reg:DI 343)) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 343)
        (nil)))
(insn 468 467 469 27 (parallel [
            (set (reg/f:DI 224 [ D.5025 ])
                (plus:DI (reg/f:DI 221 [ D.5025 ])
                    (reg:DI 223 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 223 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 221 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 469 468 470 27 (set (reg:SI 225 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 224 [ D.5025 ])
                (const_int 112 [0x70])) [0 _182->bound+0 S4 A128])) mSector.c:255 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 224 [ D.5025 ])
        (nil)))
(insn 470 469 471 27 (set (reg/f:DI 345)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 471 470 472 27 (set (reg/f:DI 226 [ D.5025 ])
        (mem/f:DI (reg/f:DI 345) [0 *f_9(D)+0 S8 A64])) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 345)
        (nil)))
(insn 472 471 473 27 (set (reg:SI 346)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (nil))
(insn 473 472 474 27 (set (reg:DI 227 [ D.5026 ])
        (sign_extend:DI (reg:SI 346))) mSector.c:255 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 346)
        (nil)))
(insn 474 473 475 27 (set (reg:DI 347)
        (reg:DI 227 [ D.5026 ])) mSector.c:255 87 {*movdi_internal_rex64}
     (nil))
(insn 475 474 476 27 (parallel [
            (set (reg:DI 347)
                (ashift:DI (reg:DI 347)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 476 475 477 27 (parallel [
            (set (reg:DI 347)
                (plus:DI (reg:DI 347)
                    (reg:DI 227 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 227 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 227 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 477 476 478 27 (parallel [
            (set (reg:DI 348)
                (ashift:DI (reg:DI 347)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 347)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 478 477 479 27 (set (reg:DI 347)
        (reg:DI 348)) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 348)
        (nil)))
(insn 479 478 480 27 (set (reg:DI 228 [ D.5026 ])
        (reg:DI 347)) mSector.c:255 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 347)
        (nil)))
(insn 480 479 481 27 (parallel [
            (set (reg/f:DI 229 [ D.5025 ])
                (plus:DI (reg/f:DI 226 [ D.5025 ])
                    (reg:DI 228 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:255 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 228 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 226 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 481 480 482 27 (set (reg:SI 230 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 229 [ D.5025 ])
                (const_int 116 [0x74])) [0 _187->bound+4 S4 A32])) mSector.c:255 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 229 [ D.5025 ])
        (nil)))
(insn 482 481 483 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 225 [ D.5024 ])
            (reg:SI 230 [ D.5024 ]))) mSector.c:255 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 230 [ D.5024 ])
        (expr_list:REG_DEAD (reg:SI 225 [ D.5024 ])
            (nil))))
(jump_insn 483 482 484 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 512)
            (pc))) mSector.c:255 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 512)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 231 232 233 234 235 236 237 238 239 240 349 350 351 352 353 354 355 356
(note 484 483 485 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 485 484 486 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f44d28a4850 *.LC14>)) mSector.c:256 87 {*movdi_internal_rex64}
     (nil))
(call_insn 486 485 487 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:256 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 487 486 488 28 (set (reg/f:DI 349)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 488 487 489 28 (set (reg/f:DI 231 [ D.5025 ])
        (mem/f:DI (reg/f:DI 349) [0 *f_9(D)+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 349)
        (nil)))
(insn 489 488 490 28 (set (reg:SI 350)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (nil))
(insn 490 489 491 28 (set (reg:DI 232 [ D.5026 ])
        (sign_extend:DI (reg:SI 350))) mSector.c:257 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 350)
        (nil)))
(insn 491 490 492 28 (set (reg:DI 351)
        (reg:DI 232 [ D.5026 ])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 492 491 493 28 (parallel [
            (set (reg:DI 351)
                (ashift:DI (reg:DI 351)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 493 492 494 28 (parallel [
            (set (reg:DI 351)
                (plus:DI (reg:DI 351)
                    (reg:DI 232 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 232 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 232 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 494 493 495 28 (parallel [
            (set (reg:DI 352)
                (ashift:DI (reg:DI 351)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 351)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 495 494 496 28 (set (reg:DI 351)
        (reg:DI 352)) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 352)
        (nil)))
(insn 496 495 497 28 (set (reg:DI 233 [ D.5026 ])
        (reg:DI 351)) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 351)
        (nil)))
(insn 497 496 498 28 (parallel [
            (set (reg/f:DI 234 [ D.5025 ])
                (plus:DI (reg/f:DI 231 [ D.5025 ])
                    (reg:DI 233 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 233 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 231 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 498 497 499 28 (set (reg/f:DI 353)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 499 498 500 28 (set (reg/f:DI 235 [ D.5025 ])
        (mem/f:DI (reg/f:DI 353) [0 *f_9(D)+0 S8 A64])) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 353)
        (nil)))
(insn 500 499 501 28 (set (reg:SI 354)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (nil))
(insn 501 500 502 28 (set (reg:DI 236 [ D.5026 ])
        (sign_extend:DI (reg:SI 354))) mSector.c:257 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 354)
        (nil)))
(insn 502 501 503 28 (set (reg:DI 355)
        (reg:DI 236 [ D.5026 ])) mSector.c:257 87 {*movdi_internal_rex64}
     (nil))
(insn 503 502 504 28 (parallel [
            (set (reg:DI 355)
                (ashift:DI (reg:DI 355)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 504 503 505 28 (parallel [
            (set (reg:DI 355)
                (plus:DI (reg:DI 355)
                    (reg:DI 236 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 236 [ D.5026 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 236 [ D.5026 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 505 504 506 28 (parallel [
            (set (reg:DI 356)
                (ashift:DI (reg:DI 355)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 355)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 506 505 507 28 (set (reg:DI 355)
        (reg:DI 356)) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 356)
        (nil)))
(insn 507 506 508 28 (set (reg:DI 237 [ D.5026 ])
        (reg:DI 355)) mSector.c:257 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 355)
        (nil)))
(insn 508 507 509 28 (parallel [
            (set (reg/f:DI 238 [ D.5025 ])
                (plus:DI (reg/f:DI 235 [ D.5025 ])
                    (reg:DI 237 [ D.5026 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 237 [ D.5026 ])
        (expr_list:REG_DEAD (reg/f:DI 235 [ D.5025 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 509 508 510 28 (set (reg:SI 239 [ D.5024 ])
        (mem/j:SI (plus:DI (reg/f:DI 238 [ D.5025 ])
                (const_int 116 [0x74])) [0 _196->bound+4 S4 A32])) mSector.c:257 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 238 [ D.5025 ])
        (nil)))
(insn 510 509 511 28 (parallel [
            (set (reg:SI 240 [ D.5024 ])
                (plus:SI (reg:SI 239 [ D.5024 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:257 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 239 [ D.5024 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 511 510 512 28 (set (mem/j:SI (plus:DI (reg/f:DI 234 [ D.5025 ])
                (const_int 116 [0x74])) [0 _192->bound+4 S4 A32])
        (reg:SI 240 [ D.5024 ])) mSector.c:257 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 240 [ D.5024 ])
        (expr_list:REG_DEAD (reg/f:DI 234 [ D.5025 ])
            (nil))))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;;              27
;;              18 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 512 511 513 29 101 "" [2 uses])
(note 513 512 514 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 514 513 515 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:225 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 357
(code_label 515 514 516 30 88 "" [1 uses])
(note 516 515 517 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 30 (set (reg/f:DI 357)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 Nflight+0 S8 A64])) mSector.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 518 517 520 30 (set (reg:SI 59 [ D.5024 ])
        (mem:SI (reg/f:DI 357) [0 *Nflight_7(D)+0 S4 A32])) mSector.c:225 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 357)
        (nil)))
(insn 520 518 521 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 59 [ D.5024 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) mSector.c:225 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5024 ])
        (nil)))
(jump_insn 521 520 522 30 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 519)
            (pc))) mSector.c:225 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 519)
;;  succ:       3
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 241 242
(note 522 521 523 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 523 522 526 31 (set (reg:SI 241 [ D.5024 ])
        (const_int 1 [0x1])) mSector.c:262 89 {*movsi_internal}
     (nil))
(insn 526 523 530 31 (set (reg:SI 242 [ <retval> ])
        (reg:SI 241 [ D.5024 ])) mSector.c:262 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 241 [ D.5024 ])
        (nil)))
(insn 530 526 533 31 (set (reg/i:SI 0 ax)
        (reg:SI 242 [ <retval> ])) mSector.c:263 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 242 [ <retval> ])
        (nil)))
(insn 533 530 0 31 (use (reg/i:SI 0 ax)) mSector.c:263 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function is_on_bound (is_on_bound, funcdef_no=14, decl_uid=1900, cgraph_uid=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r76,l0) best DREG, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r71,l0) best AREG, allocno GENERAL_REGS
    r70: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r70,l0) best AREG, allocno GENERAL_REGS
    r69: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r69,l0) best DIREG, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r65,l0) best SIREG, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r71,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a2(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r70,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a5(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r76,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a11(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a16(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 58(l0): point = 0
   Insn 55(l0): point = 2
   Insn 51(l0): point = 4
   Insn 48(l0): point = 7
   Insn 63(l0): point = 10
   Insn 34(l0): point = 12
   Insn 32(l0): point = 15
   Insn 31(l0): point = 17
   Insn 30(l0): point = 19
   Insn 29(l0): point = 21
   Insn 28(l0): point = 23
   Insn 27(l0): point = 25
   Insn 26(l0): point = 27
   Insn 25(l0): point = 29
   Insn 24(l0): point = 31
   Insn 23(l0): point = 33
   Insn 22(l0): point = 35
   Insn 21(l0): point = 37
   Insn 20(l0): point = 39
   Insn 19(l0): point = 41
   Insn 18(l0): point = 43
   Insn 17(l0): point = 45
   Insn 16(l0): point = 47
   Insn 15(l0): point = 49
   Insn 14(l0): point = 51
   Insn 13(l0): point = 53
   Insn 12(l0): point = 55
   Insn 46(l0): point = 58
   Insn 45(l0): point = 60
   Insn 43(l0): point = 62
   Insn 42(l0): point = 64
   Insn 39(l0): point = 67
   Insn 61(l0): point = 70
   Insn 8(l0): point = 72
   Insn 4(l0): point = 74
   Insn 3(l0): point = 76
   Insn 2(l0): point = 78
 a0(r71): [3..4]
 a1(r59): [10..12] [5..7]
 a2(r60): [61..62]
 a3(r77): [63..64]
 a4(r70): [18..19]
 a5(r69): [24..31]
 a6(r65): [26..43]
 a7(r76): [28..29]
 a8(r68): [32..33]
 a9(r75): [34..35]
 a10(r67): [34..37]
 a11(r66): [38..39]
 a12(r74): [40..41]
 a13(r64): [44..45]
 a14(r73): [46..47]
 a15(r63): [46..49]
 a16(r62): [50..51]
 a17(r61): [52..53]
 a18(r72): [54..55]
Compressing live ranges: from 81 to 32 - 39%
Ranges after the compression:
 a0(r71): [0..1]
 a1(r59): [2..5]
 a2(r60): [28..29]
 a3(r77): [30..31]
 a4(r70): [6..7]
 a5(r69): [8..9]
 a6(r65): [8..17]
 a7(r76): [8..9]
 a8(r68): [10..11]
 a9(r75): [12..13]
 a10(r67): [12..13]
 a11(r66): [14..15]
 a12(r74): [16..17]
 a13(r64): [18..19]
 a14(r73): [20..21]
 a15(r63): [20..21]
 a16(r62): [22..23]
 a17(r61): [24..25]
 a18(r72): [26..27]
  regions=1, blocks=9, points=32
    allocnos=19 (big 0), copies=0, conflicts=0, ranges=19
Disposition:
    1:r59  l0     0    2:r60  l0     0   17:r61  l0     0   16:r62  l0     0
   15:r63  l0     1   13:r64  l0     0    6:r65  l0     2   11:r66  l0     0
   10:r67  l0     1    8:r68  l0     0    5:r69  l0     0    4:r70  l0     0
    0:r71  l0     0   18:r72  l0     0   14:r73  l0     0   12:r74  l0     0
    9:r75  l0     0    7:r76  l0     1    3:r77  l0     0
+++Costs: overall -5, reg -5, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


is_on_bound

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,7u} r17={10d,2u} r18={1d} r19={1d} r20={1d,21u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={2d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u,1e} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u,1e} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} 
;;    total ref usage 176{96d,75u,5e} in 37{36 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])
        (reg:DI 5 di [ p ])) mSector.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ p ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
        (reg:DI 4 si [ bound ])) mSector.c:265 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bound ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])
        (reg:SI 1 dx [ N ])) mSector.c:265 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ N ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 61 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:267 89 {*movsi_internal}
     (nil))
(jump_insn 61 8 62 2 (set (pc)
        (label_ref 40)) mSector.c:267 650 {jump}
     (nil)
 -> 40)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 62 61 44)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76
(code_label 44 62 11 3 114 "" [1 uses])
(note 11 44 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 72)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 61 [ D.5034 ])
        (sign_extend:DI (reg:SI 72))) mSector.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 72)
        (nil)))
(insn 14 13 15 3 (parallel [
            (set (reg:DI 62 [ D.5034 ])
                (plus:DI (reg:DI 61 [ D.5034 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5034 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 63 [ D.5034 ])
                (ashift:DI (reg:DI 62 [ D.5034 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 62 [ D.5034 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 3 (set (reg/f:DI 73)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:DI 64 [ D.5035 ])
                (plus:DI (reg:DI 63 [ D.5034 ])
                    (reg/f:DI 73)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 73)
        (expr_list:REG_DEAD (reg:DI 63 [ D.5034 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
                        (reg:DI 63 [ D.5034 ]))
                    (nil))))))
(insn 18 17 19 3 (set (reg/f:DI 65 [ D.5036 ])
        (mem/f:DI (reg/f:DI 64 [ D.5035 ]) [0 *_10+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ D.5035 ])
        (nil)))
(insn 19 18 20 3 (set (reg:SI 74)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 66 [ D.5037 ])
        (sign_extend:DI (reg:SI 74))) mSector.c:267 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 74)
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 67 [ D.5037 ])
                (ashift:DI (reg:DI 66 [ D.5037 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 66 [ D.5037 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 22 21 23 3 (set (reg/f:DI 75)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 68 [ D.5035 ])
                (plus:DI (reg:DI 67 [ D.5037 ])
                    (reg/f:DI 75)))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 75)
        (expr_list:REG_DEAD (reg:DI 67 [ D.5037 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [0 bound+0 S8 A64])
                        (reg:DI 67 [ D.5037 ]))
                    (nil))))))
(insn 24 23 25 3 (set (reg/f:DI 69 [ D.5036 ])
        (mem/f:DI (reg/f:DI 68 [ D.5035 ]) [0 *_14+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.5035 ])
        (nil)))
(insn 25 24 26 3 (set (reg:DI 76)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 p+0 S8 A64])) mSector.c:267 87 {*movdi_internal_rex64}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx)
        (reg:DI 76)) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 76)
        (nil)))
(insn 27 26 28 3 (set (reg:DI 4 si)
        (reg/f:DI 65 [ D.5036 ])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.5036 ])
        (nil)))
(insn 28 27 29 3 (set (reg:DI 5 di)
        (reg/f:DI 69 [ D.5036 ])) mSector.c:267 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 69 [ D.5036 ])
        (nil)))
(call_insn 29 28 30 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isbetween") [flags 0x41]  <function_decl 0x7f44d29fc100 isbetween>) [0 isbetween S1 A8])
            (const_int 0 [0]))) mSector.c:267 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 30 29 31 3 (set (reg:SI 70 [ D.5033 ])
        (reg:SI 0 ax)) mSector.c:267 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.5033 ])
            (const_int 0 [0]))) mSector.c:267 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 70 [ D.5033 ])
        (nil)))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) mSector.c:267 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 63 4 (set (reg:SI 59 [ D.5033 ])
        (const_int 1 [0x1])) mSector.c:267 89 {*movsi_internal}
     (nil))
(jump_insn 63 34 64 4 (set (pc)
        (label_ref 49)) mSector.c:267 650 {jump}
     (nil)
 -> 49)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 64 63 37)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 37 64 38 5 112 "" [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 77
(code_label 40 39 41 6 111 "" [1 uses])
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 6 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])) mSector.c:267 89 {*movsi_internal}
     (nil))
(insn 43 42 45 6 (parallel [
            (set (reg:SI 60 [ D.5033 ])
                (plus:SI (reg:SI 77)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:267 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 77)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 N+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 45 43 46 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 60 [ D.5033 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) mSector.c:267 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 60 [ D.5033 ])
        (nil)))
(jump_insn 46 45 47 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) mSector.c:267 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 44)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg:SI 59 [ D.5033 ])
        (const_int 0 [0])) mSector.c:268 89 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 71
(code_label 49 48 50 8 113 "" [1 uses])
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 55 8 (set (reg:SI 71 [ <retval> ])
        (reg:SI 59 [ D.5033 ])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5033 ])
        (nil)))
(insn 55 51 58 8 (set (reg/i:SI 0 ax)
        (reg:SI 71 [ <retval> ])) mSector.c:269 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 71 [ <retval> ])
        (nil)))
(insn 58 55 0 8 (use (reg/i:SI 0 ax)) mSector.c:269 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _alloc_shock (_alloc_shock, funcdef_no=15, decl_uid=4116, cgraph_uid=15)

verify found no changes in insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
verify found no changes in insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a15 (r74,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r73: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r73,l0) best AREG, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r71,l0) best AREG, allocno GENERAL_REGS
    r70: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r70,l0) best DIREG, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r68,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r67: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a10 (r67,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a11 (r65,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r64: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a13 (r64,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r63: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a16 (r63,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r62: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a17 (r62,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r61: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a18 (r61,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r60: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a14 (r60,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r73,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r71,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a6(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a7(r69,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a8(r68,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:2 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a9(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a10(r67,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:2 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a11(r65,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a12(r66,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a13(r64,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a14(r60,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:2 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a15(r74,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a16(r63,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a17(r62,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a18(r61,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a19(r59,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10

   Insn 38(l0): point = 0
   Insn 35(l0): point = 2
   Insn 31(l0): point = 4
   Insn 28(l0): point = 6
   Insn 27(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 24(l0): point = 14
   Insn 23(l0): point = 16
   Insn 22(l0): point = 18
   Insn 21(l0): point = 20
   Insn 20(l0): point = 22
   Insn 19(l0): point = 24
   Insn 18(l0): point = 26
   Insn 43(l0): point = 28
   Insn 51(l0): point = 30
   Insn 50(l0): point = 32
   Insn 49(l0): point = 34
   Insn 48(l0): point = 36
   Insn 16(l0): point = 38
   Insn 42(l0): point = 40
   Insn 14(l0): point = 42
   Insn 13(l0): point = 44
   Insn 12(l0): point = 46
   Insn 11(l0): point = 48
   Insn 10(l0): point = 50
   Insn 9(l0): point = 52
   Insn 8(l0): point = 54
   Insn 41(l0): point = 56
   Insn 6(l0): point = 58
   Insn 2(l0): point = 60
 a0(r73): [3..4]
 a1(r72): [5..6]
 a2(r77): [9..10]
 a3(r71): [9..12]
 a4(r70): [17..20]
 a5(r76): [21..22]
 a6(r75): [25..26]
 a7(r69): [25..28]
 a8(r68): [29..38]
 a9(r79): [31..34]
 a10(r67): [39..40]
 a11(r65): [39..44]
 a12(r66): [41..42]
 a13(r64): [45..46]
 a14(r60): [45..56]
 a15(r74): [47..48]
 a16(r63): [47..50]
 a17(r62): [51..52]
 a18(r61): [51..54]
 a19(r59): [57..58]
Compressing live ranges: from 63 to 26 - 41%
Ranges after the compression:
 a0(r73): [0..1]
 a1(r72): [2..3]
 a2(r77): [4..5]
 a3(r71): [4..5]
 a4(r70): [6..7]
 a5(r76): [8..9]
 a6(r75): [10..11]
 a7(r69): [10..11]
 a8(r68): [12..13]
 a9(r79): [12..13]
 a10(r67): [14..15]
 a11(r65): [14..17]
 a12(r66): [16..17]
 a13(r64): [18..19]
 a14(r60): [18..23]
 a15(r74): [20..21]
 a16(r63): [20..21]
 a17(r62): [22..23]
 a18(r61): [22..23]
 a19(r59): [24..25]
  regions=1, blocks=3, points=26
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   19:r59  l0     0   14:r60  l0     9   18:r61  l0    10   17:r62  l0     8
   16:r63  l0    10   13:r64  l0     8   11:r65  l0     9   12:r66  l0     0
   10:r67  l0     8    8:r68  l0     8    7:r69  l0     1    4:r70  l0     0
    3:r71  l0     0    1:r72  l0     0    0:r73  l0     0   15:r74  l0     8
    6:r75  l0     0    5:r76  l0     0    2:r77  l0     1    9:r79  l0     0
+++Costs: overall 9, reg 9, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_alloc_shock

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 19[fpcr]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,5u} r17={2d} r18={1d} r19={1d,1u} r20={1d,14u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r79={2d,2u} 
;;    total ref usage 140{88d,52u,0e} in 31{30 regular + 1 call} insns.
(note 1 0 44 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 79
(note 44 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 44 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])
        (reg:DI 5 di [ shock ])) mSector.c:271 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ shock ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 41 2 (set (reg:SI 59 [ D.5038 ])
        (mem/j/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 conf.nsim+0 S4 A128])) mSector.c:272 89 {*movsi_internal}
     (nil))
(insn 41 6 8 2 (parallel [
            (set (reg:XF 60 [ D.5039 ])
                (float:XF (reg:SI 59 [ D.5038 ])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 59 [ D.5038 ])
        (nil)))
(insn 8 41 9 2 (set (reg:XF 61 [ D.5039 ])
        (mem/j/c:XF (plus:DI (reg/f:DI 16 argp)
                (const_int 176 [0xb0])) [0 conf.f_lvl+16 S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:XF 62 [ D.5039 ])
        (mem/j/c:XF (plus:DI (reg/f:DI 16 argp)
                (const_int 160 [0xa0])) [0 conf.f_lvl+0 S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:XF 63 [ D.5039 ])
        (minus:XF (reg:XF 61 [ D.5039 ])
            (reg:XF 62 [ D.5039 ]))) mSector.c:272 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 62 [ D.5039 ])
        (expr_list:REG_DEAD (reg:XF 61 [ D.5039 ])
            (nil))))
(insn 11 10 12 2 (set (reg:XF 74)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S16 A128])) mSector.c:272 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 12 11 13 2 (set (reg:XF 64 [ D.5039 ])
        (div:XF (reg:XF 63 [ D.5039 ])
            (reg:XF 74))) mSector.c:272 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 74)
        (expr_list:REG_DEAD (reg:XF 63 [ D.5039 ])
            (nil))))
(insn 13 12 14 2 (set (reg:XF 65 [ D.5039 ])
        (mult:XF (reg:XF 60 [ D.5039 ])
            (reg:XF 64 [ D.5039 ]))) mSector.c:272 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 64 [ D.5039 ])
        (expr_list:REG_DEAD (reg:XF 60 [ D.5039 ])
            (nil))))
(insn 14 13 42 2 (set (reg:SI 66 [ D.5038 ])
        (mem/j/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 116 [0x74])) [0 conf.Nm_shock+0 S4 A32])) mSector.c:272 89 {*movsi_internal}
     (nil))
(insn 42 14 16 2 (parallel [
            (set (reg:XF 67 [ D.5039 ])
                (float:XF (reg:SI 66 [ D.5038 ])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 66 [ D.5038 ])
        (nil)))
(insn 16 42 48 2 (set (reg:XF 68 [ D.5039 ])
        (mult:XF (reg:XF 65 [ D.5039 ])
            (reg:XF 67 [ D.5039 ]))) mSector.c:272 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 67 [ D.5039 ])
        (expr_list:REG_DEAD (reg:XF 65 [ D.5039 ])
            (nil))))
(insn 48 16 49 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mSector.c:272 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 49 48 50 2 (set (reg:HI 79)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -14 [0xfffffffffffffff2])) [0  S2 A16])) mSector.c:272 90 {*movhi_internal}
     (nil))
(insn 50 49 51 2 (parallel [
            (set (reg:HI 79)
                (ior:HI (reg:HI 79)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:272 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 51 50 43 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0  S2 A16])
        (reg:HI 79)) mSector.c:272 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 79)
        (nil)))
(insn 43 51 18 2 (parallel [
            (set (reg:SI 69 [ D.5038 ])
                (fix:SI (reg:XF 68 [ D.5039 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -14 [0xfffffffffffffff2])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0  S4 A32]))
        ]) mSector.c:272 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 68 [ D.5039 ])
        (nil)))
(insn 18 43 19 2 (set (reg/f:DI 75)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:272 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 2 (set (mem/j:SI (reg/f:DI 75) [0 shock_12(D)->Nshock+0 S4 A64])
        (reg:SI 69 [ D.5038 ])) mSector.c:272 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 75)
        (expr_list:REG_DEAD (reg:SI 69 [ D.5038 ])
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 76)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:273 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:SI 70 [ D.5038 ])
        (mem/j:SI (reg/f:DI 76) [0 shock_12(D)->Nshock+0 S4 A64])) mSector.c:273 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 76)
        (nil)))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (const_int 6 [0x6])) mSector.c:273 89 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 5 di)
        (reg:SI 70 [ D.5038 ])) mSector.c:273 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 70 [ D.5038 ])
        (nil)))
(call_insn 24 23 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:273 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 25 24 26 2 (set (reg/f:DI 71 [ D.5040 ])
        (reg:DI 0 ax)) mSector.c:273 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 26 25 27 2 (set (reg/f:DI 77)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 shock+0 S8 A64])) mSector.c:273 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 77)
                (const_int 8 [0x8])) [0 shock_12(D)->shock+0 S8 A64])
        (reg/f:DI 71 [ D.5040 ])) mSector.c:273 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 77)
        (expr_list:REG_DEAD (reg/f:DI 71 [ D.5040 ])
            (nil))))
(insn 28 27 31 2 (set (reg:SI 72 [ D.5038 ])
        (const_int 1 [0x1])) mSector.c:274 89 {*movsi_internal}
     (nil))
(insn 31 28 45 2 (set (reg:SI 73 [ <retval> ])
        (reg:SI 72 [ D.5038 ])) mSector.c:274 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 72 [ D.5038 ])
        (nil)))
(note 45 31 35 2 NOTE_INSN_DELETED)
(insn 35 45 38 2 (set (reg/i:SI 0 ax)
        (reg:SI 73 [ <retval> ])) mSector.c:275 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 73 [ <retval> ])
        (nil)))
(insn 38 35 0 2 (use (reg/i:SI 0 ax)) mSector.c:275 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _set_cross_timeM1 (_set_cross_timeM1, funcdef_no=16, decl_uid=4120, cgraph_uid=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r93,l0) best AREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a4 (r91,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r90: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r90,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a6 (r76,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r93,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r91,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a5(r90,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a6(r76,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a7(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a9(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a16(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a18(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a24(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a25(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a26(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a30(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a37(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a38(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a39(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a41(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a45(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a46(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a47(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a49(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a52(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a53(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a54(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a55(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 98(l0): point = 0
   Insn 95(l0): point = 2
   Insn 91(l0): point = 4
   Insn 88(l0): point = 6
   Insn 80(l0): point = 9
   Insn 79(l0): point = 11
   Insn 78(l0): point = 13
   Insn 77(l0): point = 15
   Insn 76(l0): point = 17
   Insn 75(l0): point = 19
   Insn 74(l0): point = 21
   Insn 73(l0): point = 23
   Insn 72(l0): point = 25
   Insn 71(l0): point = 27
   Insn 70(l0): point = 29
   Insn 69(l0): point = 31
   Insn 68(l0): point = 33
   Insn 67(l0): point = 35
   Insn 66(l0): point = 37
   Insn 65(l0): point = 39
   Insn 64(l0): point = 41
   Insn 63(l0): point = 43
   Insn 62(l0): point = 45
   Insn 61(l0): point = 47
   Insn 60(l0): point = 49
   Insn 59(l0): point = 51
   Insn 58(l0): point = 53
   Insn 57(l0): point = 55
   Insn 56(l0): point = 57
   Insn 55(l0): point = 59
   Insn 54(l0): point = 61
   Insn 53(l0): point = 63
   Insn 52(l0): point = 65
   Insn 51(l0): point = 67
   Insn 50(l0): point = 69
   Insn 49(l0): point = 71
   Insn 48(l0): point = 73
   Insn 47(l0): point = 75
   Insn 46(l0): point = 77
   Insn 45(l0): point = 79
   Insn 44(l0): point = 81
   Insn 43(l0): point = 83
   Insn 42(l0): point = 85
   Insn 41(l0): point = 87
   Insn 40(l0): point = 89
   Insn 39(l0): point = 91
   Insn 38(l0): point = 93
   Insn 37(l0): point = 95
   Insn 36(l0): point = 97
   Insn 35(l0): point = 99
   Insn 34(l0): point = 101
   Insn 33(l0): point = 103
   Insn 32(l0): point = 105
   Insn 31(l0): point = 107
   Insn 30(l0): point = 109
   Insn 29(l0): point = 111
   Insn 28(l0): point = 113
   Insn 27(l0): point = 115
   Insn 26(l0): point = 117
   Insn 25(l0): point = 119
   Insn 24(l0): point = 121
   Insn 23(l0): point = 123
   Insn 22(l0): point = 125
   Insn 21(l0): point = 127
   Insn 20(l0): point = 129
   Insn 19(l0): point = 131
   Insn 18(l0): point = 133
   Insn 17(l0): point = 135
   Insn 16(l0): point = 137
   Insn 15(l0): point = 139
   Insn 14(l0): point = 141
   Insn 13(l0): point = 143
   Insn 12(l0): point = 145
   Insn 11(l0): point = 147
   Insn 86(l0): point = 150
   Insn 85(l0): point = 152
   Insn 84(l0): point = 154
   Insn 101(l0): point = 157
   Insn 7(l0): point = 159
   Insn 3(l0): point = 161
   Insn 2(l0): point = 163
 a0(r93): [3..4]
 a1(r92): [5..6]
 a2(r114): [153..154]
 a3(r62): [12..127]
 a4(r91): [12..13]
 a5(r90): [14..15]
 a6(r76): [14..71]
 a7(r89): [16..17]
 a8(r88): [18..19]
 a9(r81): [18..47]
 a10(r87): [20..21]
 a11(r86): [22..23]
 a12(r85): [24..25]
 a13(r84): [26..27]
 a14(r82): [26..43]
 a15(r112): [32..37] [28..29]
 a16(r113): [30..31]
 a17(r83): [34..39]
 a18(r111): [40..41]
 a19(r110): [44..45]
 a20(r80): [48..49]
 a21(r79): [50..51]
 a22(r77): [50..67]
 a23(r108): [56..61] [52..53]
 a24(r109): [54..55]
 a25(r78): [58..63]
 a26(r107): [64..65]
 a27(r106): [68..69]
 a28(r75): [72..73]
 a29(r74): [74..75]
 a30(r67): [74..103]
 a31(r73): [76..77]
 a32(r72): [78..79]
 a33(r71): [80..81]
 a34(r70): [82..83]
 a35(r68): [82..99]
 a36(r104): [88..93] [84..85]
 a37(r105): [86..87]
 a38(r69): [90..95]
 a39(r103): [96..97]
 a40(r102): [100..101]
 a41(r66): [104..105]
 a42(r65): [106..107]
 a43(r63): [106..123]
 a44(r100): [112..117] [108..109]
 a45(r101): [110..111]
 a46(r64): [114..119]
 a47(r99): [120..121]
 a48(r98): [124..125]
 a49(r61): [128..129]
 a50(r59): [128..145]
 a51(r96): [134..139] [130..131]
 a52(r97): [132..133]
 a53(r60): [136..141]
 a54(r95): [142..143]
 a55(r94): [146..147]
Compressing live ranges: from 166 to 94 - 56%
Ranges after the compression:
 a0(r93): [0..1]
 a1(r92): [2..3]
 a2(r114): [92..93]
 a3(r62): [4..79]
 a4(r91): [4..5]
 a5(r90): [6..7]
 a6(r76): [6..43]
 a7(r89): [8..9]
 a8(r88): [10..11]
 a9(r81): [10..29]
 a10(r87): [12..13]
 a11(r86): [14..15]
 a12(r85): [16..17]
 a13(r84): [18..19]
 a14(r82): [18..27]
 a15(r112): [24..25] [20..21]
 a16(r113): [22..23]
 a17(r83): [24..25]
 a18(r111): [26..27]
 a19(r110): [28..29]
 a20(r80): [30..31]
 a21(r79): [32..33]
 a22(r77): [32..41]
 a23(r108): [38..39] [34..35]
 a24(r109): [36..37]
 a25(r78): [38..39]
 a26(r107): [40..41]
 a27(r106): [42..43]
 a28(r75): [44..45]
 a29(r74): [46..47]
 a30(r67): [46..65]
 a31(r73): [48..49]
 a32(r72): [50..51]
 a33(r71): [52..53]
 a34(r70): [54..55]
 a35(r68): [54..63]
 a36(r104): [60..61] [56..57]
 a37(r105): [58..59]
 a38(r69): [60..61]
 a39(r103): [62..63]
 a40(r102): [64..65]
 a41(r66): [66..67]
 a42(r65): [68..69]
 a43(r63): [68..77]
 a44(r100): [74..75] [70..71]
 a45(r101): [72..73]
 a46(r64): [74..75]
 a47(r99): [76..77]
 a48(r98): [78..79]
 a49(r61): [80..81]
 a50(r59): [80..89]
 a51(r96): [86..87] [82..83]
 a52(r97): [84..85]
 a53(r60): [86..87]
 a54(r95): [88..89]
 a55(r94): [90..91]
  regions=1, blocks=6, points=94
    allocnos=56 (big 0), copies=0, conflicts=0, ranges=61
Disposition:
   50:r59  l0     2   53:r60  l0     1   49:r61  l0     0    3:r62  l0     2
   43:r63  l0     4   46:r64  l0     1   42:r65  l0     0   41:r66  l0     0
   30:r67  l0     4   35:r68  l0     5   38:r69  l0     1   34:r70  l0     0
   33:r71  l0     0   32:r72  l0     0   31:r73  l0     0   29:r74  l0     0
   28:r75  l0     0    6:r76  l0     9   22:r77  l0     4   25:r78  l0     1
   21:r79  l0     0   20:r80  l0     0    9:r81  l0     4   14:r82  l0     5
   17:r83  l0     1   13:r84  l0     0   12:r85  l0     0   11:r86  l0     0
   10:r87  l0     0    8:r88  l0     0    7:r89  l0     0    5:r90  l0     8
    4:r91  l0     8    1:r92  l0     0    0:r93  l0     0   55:r94  l0     0
   54:r95  l0     0   51:r96  l0     0   52:r97  l0     0   48:r98  l0     0
   47:r99  l0     0   44:r100 l0     0   45:r101 l0     0   40:r102 l0     0
   39:r103 l0     0   36:r104 l0     0   37:r105 l0     0   27:r106 l0     0
   26:r107 l0     0   23:r108 l0     0   24:r109 l0     0   19:r110 l0     0
   18:r111 l0     0   15:r112 l0     0   16:r113 l0     0    2:r114 l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_set_cross_timeM1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,5u} r7={1d,5u} r16={1d,4u} r17={26d,1u} r20={1d,22u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={1d,1u} r60={1d,2u,1e} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,2u,1e} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,2u,1e} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,2u,1e} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,2u,1e} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={4d,4u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={4d,4u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={4d,4u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={4d,4u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={4d,4u} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 239{117d,117u,5e} in 81{81 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:277 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32])
        (reg:SI 4 si [ N ])) mSector.c:277 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 101 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:279 89 {*movsi_internal}
     (nil))
(jump_insn 101 7 102 2 (set (pc)
        (label_ref 81)) mSector.c:279 650 {jump}
     (nil)
 -> 81)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 83)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113
(code_label 83 102 10 3 119 "" [1 uses])
(note 10 83 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 59 [ D.5041 ])
        (mem/f:DI (reg/f:DI 94) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 60 [ D.5042 ])
        (sign_extend:DI (reg:SI 95))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 15 14 16 3 (set (reg:DI 96)
        (reg:DI 60 [ D.5042 ])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 96)
                (ashift:DI (reg:DI 96)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg:DI 96)
                    (reg:DI 60 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 60 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 60 [ D.5042 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 97)
                (ashift:DI (reg:DI 96)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 19 18 20 3 (set (reg:DI 96)
        (reg:DI 97)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(insn 20 19 21 3 (set (reg:DI 61 [ D.5042 ])
        (reg:DI 96)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 62 [ D.5041 ])
                (plus:DI (reg/f:DI 59 [ D.5041 ])
                    (reg:DI 61 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 59 [ D.5041 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 22 21 23 3 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 63 [ D.5041 ])
        (mem/f:DI (reg/f:DI 98) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (nil)))
(insn 24 23 25 3 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 64 [ D.5042 ])
        (sign_extend:DI (reg:SI 99))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 26 25 27 3 (set (reg:DI 100)
        (reg:DI 64 [ D.5042 ])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 100)
                (ashift:DI (reg:DI 100)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 100)
                (plus:DI (reg:DI 100)
                    (reg:DI 64 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 64 [ D.5042 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 101)
                (ashift:DI (reg:DI 100)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 100)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 3 (set (reg:DI 100)
        (reg:DI 101)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(insn 31 30 32 3 (set (reg:DI 65 [ D.5042 ])
        (reg:DI 100)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(insn 32 31 33 3 (parallel [
            (set (reg/f:DI 66 [ D.5041 ])
                (plus:DI (reg/f:DI 63 [ D.5041 ])
                    (reg:DI 65 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 63 [ D.5041 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 33 32 34 3 (set (reg/f:DI 67 [ D.5043 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 66 [ D.5041 ])
                (const_int 16 [0x10])) [0 _12->time+0 S8 A128])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ D.5041 ])
        (nil)))
(insn 34 33 35 3 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 3 (set (reg/f:DI 68 [ D.5041 ])
        (mem/f:DI (reg/f:DI 102) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (nil)))
(insn 36 35 37 3 (set (reg:SI 103)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 69 [ D.5042 ])
        (sign_extend:DI (reg:SI 103))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 103)
        (nil)))
(insn 38 37 39 3 (set (reg:DI 104)
        (reg:DI 69 [ D.5042 ])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 104)
                (ashift:DI (reg:DI 104)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 39 41 3 (parallel [
            (set (reg:DI 104)
                (plus:DI (reg:DI 104)
                    (reg:DI 69 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 69 [ D.5042 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 41 40 42 3 (parallel [
            (set (reg:DI 105)
                (ashift:DI (reg:DI 104)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 104)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 42 41 43 3 (set (reg:DI 104)
        (reg:DI 105)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 105)
        (nil)))
(insn 43 42 44 3 (set (reg:DI 70 [ D.5042 ])
        (reg:DI 104)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 71 [ D.5041 ])
                (plus:DI (reg/f:DI 68 [ D.5041 ])
                    (reg:DI 70 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 68 [ D.5041 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 45 44 46 3 (set (reg:SI 72 [ D.5044 ])
        (mem/j:SI (plus:DI (reg/f:DI 71 [ D.5041 ])
                (const_int 116 [0x74])) [0 _17->bound+4 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.5041 ])
        (nil)))
(insn 46 45 47 3 (set (reg:DI 73 [ D.5042 ])
        (sign_extend:DI (reg:SI 72 [ D.5044 ]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 72 [ D.5044 ])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 74 [ D.5042 ])
                (ashift:DI (reg:DI 73 [ D.5042 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 73 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 75 [ D.5043 ])
                (plus:DI (reg/f:DI 67 [ D.5043 ])
                    (reg:DI 74 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 74 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 67 [ D.5043 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 49 48 50 3 (set (reg:XF 76 [ D.5045 ])
        (mem:XF (reg/f:DI 75 [ D.5043 ]) [0 *_21+0 S16 A128])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.5043 ])
        (nil)))
(insn 50 49 51 3 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 3 (set (reg/f:DI 77 [ D.5041 ])
        (mem/f:DI (reg/f:DI 106) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (nil)))
(insn 52 51 53 3 (set (reg:SI 107)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 53 52 54 3 (set (reg:DI 78 [ D.5042 ])
        (sign_extend:DI (reg:SI 107))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(insn 54 53 55 3 (set (reg:DI 108)
        (reg:DI 78 [ D.5042 ])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg:DI 108)
                (ashift:DI (reg:DI 108)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 56 55 57 3 (parallel [
            (set (reg:DI 108)
                (plus:DI (reg:DI 108)
                    (reg:DI 78 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 78 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 78 [ D.5042 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 57 56 58 3 (parallel [
            (set (reg:DI 109)
                (ashift:DI (reg:DI 108)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 3 (set (reg:DI 108)
        (reg:DI 109)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(insn 59 58 60 3 (set (reg:DI 79 [ D.5042 ])
        (reg:DI 108)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(insn 60 59 61 3 (parallel [
            (set (reg/f:DI 80 [ D.5041 ])
                (plus:DI (reg/f:DI 77 [ D.5041 ])
                    (reg:DI 79 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 79 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 77 [ D.5041 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 61 60 62 3 (set (reg/f:DI 81 [ D.5043 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 80 [ D.5041 ])
                (const_int 16 [0x10])) [0 _26->time+0 S8 A128])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 80 [ D.5041 ])
        (nil)))
(insn 62 61 63 3 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 3 (set (reg/f:DI 82 [ D.5041 ])
        (mem/f:DI (reg/f:DI 110) [0 *f_4(D)+0 S8 A64])) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))
(insn 64 63 65 3 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 65 64 66 3 (set (reg:DI 83 [ D.5042 ])
        (sign_extend:DI (reg:SI 111))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 66 65 67 3 (set (reg:DI 112)
        (reg:DI 83 [ D.5042 ])) mSector.c:279 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg:DI 112)
                (ashift:DI (reg:DI 112)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 68 67 69 3 (parallel [
            (set (reg:DI 112)
                (plus:DI (reg:DI 112)
                    (reg:DI 83 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 83 [ D.5042 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 69 68 70 3 (parallel [
            (set (reg:DI 113)
                (ashift:DI (reg:DI 112)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 112)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 3 (set (reg:DI 112)
        (reg:DI 113)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(insn 71 70 72 3 (set (reg:DI 84 [ D.5042 ])
        (reg:DI 112)) mSector.c:279 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(insn 72 71 73 3 (parallel [
            (set (reg/f:DI 85 [ D.5041 ])
                (plus:DI (reg/f:DI 82 [ D.5041 ])
                    (reg:DI 84 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 82 [ D.5041 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 73 72 74 3 (set (reg:SI 86 [ D.5044 ])
        (mem/j:SI (plus:DI (reg/f:DI 85 [ D.5041 ])
                (const_int 112 [0x70])) [0 _31->bound+0 S4 A128])) mSector.c:279 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ D.5041 ])
        (nil)))
(insn 74 73 75 3 (set (reg:DI 87 [ D.5042 ])
        (sign_extend:DI (reg:SI 86 [ D.5044 ]))) mSector.c:279 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 86 [ D.5044 ])
        (nil)))
(insn 75 74 76 3 (parallel [
            (set (reg:DI 88 [ D.5042 ])
                (ashift:DI (reg:DI 87 [ D.5042 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 87 [ D.5042 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 76 75 77 3 (parallel [
            (set (reg/f:DI 89 [ D.5043 ])
                (plus:DI (reg/f:DI 81 [ D.5043 ])
                    (reg:DI 88 [ D.5042 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.5042 ])
        (expr_list:REG_DEAD (reg/f:DI 81 [ D.5043 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 77 76 78 3 (set (reg:XF 90 [ D.5045 ])
        (mem:XF (reg/f:DI 89 [ D.5043 ]) [0 *_35+0 S16 A128])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.5043 ])
        (nil)))
(insn 78 77 79 3 (set (reg:XF 91 [ D.5045 ])
        (minus:XF (reg:XF 76 [ D.5045 ])
            (reg:XF 90 [ D.5045 ]))) mSector.c:279 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 90 [ D.5045 ])
        (expr_list:REG_DEAD (reg:XF 76 [ D.5045 ])
            (nil))))
(insn 79 78 80 3 (set (mem/j:XF (plus:DI (reg/f:DI 62 [ D.5041 ])
                (const_int 128 [0x80])) [0 _8->delta_t+0 S16 A128])
        (reg:XF 91 [ D.5045 ])) mSector.c:279 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 91 [ D.5045 ])
        (expr_list:REG_DEAD (reg/f:DI 62 [ D.5041 ])
            (nil))))
(insn 80 79 81 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:279 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114
(code_label 81 80 82 4 118 "" [1 uses])
(note 82 81 84 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 4 (set (reg:SI 114)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:279 89 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 114)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 N+0 S4 A32]))) mSector.c:279 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 86 85 87 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) mSector.c:279 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 83)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 91 5 (set (reg:SI 92 [ D.5044 ])
        (const_int 1 [0x1])) mSector.c:280 89 {*movsi_internal}
     (nil))
(insn 91 88 95 5 (set (reg:SI 93 [ <retval> ])
        (reg:SI 92 [ D.5044 ])) mSector.c:280 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.5044 ])
        (nil)))
(insn 95 91 98 5 (set (reg/i:SI 0 ax)
        (reg:SI 93 [ <retval> ])) mSector.c:281 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ <retval> ])
        (nil)))
(insn 98 95 0 5 (use (reg/i:SI 0 ax)) mSector.c:281 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _alloc_flight_pos (_alloc_flight_pos, funcdef_no=17, decl_uid=4129, cgraph_uid=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
verify found no changes in insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r67,l0) best AREG, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r65,l0) best AREG, allocno GENERAL_REGS
    r64: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r64,l0) best DIREG, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r67,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r65,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a5(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a6(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a8(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a11(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a12(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a13(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 49(l0): point = 0
   Insn 46(l0): point = 2
   Insn 42(l0): point = 4
   Insn 39(l0): point = 6
   Insn 31(l0): point = 9
   Insn 30(l0): point = 11
   Insn 29(l0): point = 13
   Insn 28(l0): point = 15
   Insn 27(l0): point = 17
   Insn 26(l0): point = 19
   Insn 25(l0): point = 21
   Insn 24(l0): point = 23
   Insn 23(l0): point = 25
   Insn 22(l0): point = 27
   Insn 21(l0): point = 29
   Insn 20(l0): point = 31
   Insn 19(l0): point = 33
   Insn 18(l0): point = 35
   Insn 17(l0): point = 37
   Insn 16(l0): point = 39
   Insn 15(l0): point = 41
   Insn 14(l0): point = 43
   Insn 13(l0): point = 45
   Insn 12(l0): point = 47
   Insn 37(l0): point = 50
   Insn 36(l0): point = 52
   Insn 35(l0): point = 54
   Insn 52(l0): point = 57
   Insn 8(l0): point = 59
   Insn 4(l0): point = 61
   Insn 3(l0): point = 63
   Insn 2(l0): point = 65
 a0(r67): [3..4]
 a1(r66): [5..6]
 a2(r73): [53..54]
 a3(r62): [12..27]
 a4(r65): [12..13]
 a5(r64): [18..21]
 a6(r63): [22..23]
 a7(r72): [24..25]
 a8(r61): [28..29]
 a9(r59): [28..45]
 a10(r70): [34..39] [30..31]
 a11(r71): [32..33]
 a12(r60): [36..41]
 a13(r69): [42..43]
 a14(r68): [46..47]
Compressing live ranges: from 68 to 26 - 38%
Ranges after the compression:
 a0(r67): [0..1]
 a1(r66): [2..3]
 a2(r73): [24..25]
 a3(r62): [4..11]
 a4(r65): [4..5]
 a5(r64): [6..7]
 a6(r63): [8..9]
 a7(r72): [10..11]
 a8(r61): [12..13]
 a9(r59): [12..21]
 a10(r70): [18..19] [14..15]
 a11(r71): [16..17]
 a12(r60): [18..19]
 a13(r69): [20..21]
 a14(r68): [22..23]
  regions=1, blocks=6, points=26
    allocnos=15 (big 0), copies=0, conflicts=0, ranges=16
Disposition:
    9:r59  l0     2   12:r60  l0     1    8:r61  l0     0    3:r62  l0     3
    6:r63  l0     0    5:r64  l0     0    4:r65  l0     0    1:r66  l0     0
    0:r67  l0     0   14:r68  l0     0   13:r69  l0     0   10:r70  l0     0
   11:r71  l0     0    7:r72  l0     0    2:r73  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_alloc_flight_pos

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={8d,1u} r18={1d} r19={1d} r20={1d,16u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} r60={1d,2u,1e} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={4d,4u} r71={1d,1u} r72={1d,1u} r73={1d,1u} 
;;    total ref usage 151{91d,59u,1e} in 32{31 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])
        (reg:DI 5 di [ f ])) mSector.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ f ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 N_f+0 S4 A32])
        (reg:SI 4 si [ N_f ])) mSector.c:283 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ N_f ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 conf+0 S8 A64])
        (reg:DI 1 dx [ conf ])) mSector.c:283 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ conf ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 52 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mSector.c:285 89 {*movsi_internal}
     (nil))
(jump_insn 52 8 53 2 (set (pc)
        (label_ref 32)) mSector.c:285 650 {jump}
     (nil)
 -> 32)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 34)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 68 69 70 71 72
(code_label 34 53 11 3 123 "" [1 uses])
(note 11 34 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 68)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 f+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 59 [ D.5046 ])
        (mem/f:DI (reg/f:DI 68) [0 *f_4(D)+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68)
        (nil)))
(insn 14 13 15 3 (set (reg:SI 69)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 60 [ D.5047 ])
        (sign_extend:DI (reg:SI 69))) mSector.c:285 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 69)
        (nil)))
(insn 16 15 17 3 (set (reg:DI 70)
        (reg:DI 60 [ D.5047 ])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 70)
                (ashift:DI (reg:DI 70)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 70)
                (plus:DI (reg:DI 70)
                    (reg:DI 60 [ D.5047 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 60 [ D.5047 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 60 [ D.5047 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 71)
                (ashift:DI (reg:DI 70)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 70)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 20 19 21 3 (set (reg:DI 70)
        (reg:DI 71)) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 71)
        (nil)))
(insn 21 20 22 3 (set (reg:DI 61 [ D.5047 ])
        (reg:DI 70)) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 70)
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 62 [ D.5046 ])
                (plus:DI (reg/f:DI 59 [ D.5046 ])
                    (reg:DI 61 [ D.5047 ])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ D.5047 ])
        (expr_list:REG_DEAD (reg/f:DI 59 [ D.5046 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 23 22 24 3 (set (reg/f:DI 72)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 conf+0 S8 A64])) mSector.c:285 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 3 (set (reg:SI 63 [ D.5048 ])
        (mem/j:SI (plus:DI (reg/f:DI 72)
                (const_int 192 [0xc0])) [0 conf_9(D)->t_w+0 S4 A128])) mSector.c:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 72)
        (nil)))
(insn 25 24 26 3 (parallel [
            (set (reg:SI 64 [ D.5048 ])
                (ashift:SI (reg:SI 63 [ D.5048 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 512 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.5048 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 3 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SI 5 di)
        (reg:SI 64 [ D.5048 ])) mSector.c:285 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 64 [ D.5048 ])
        (nil)))
(call_insn 28 27 29 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f44d29f7600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mSector.c:285 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 65 [ D.5049 ])
        (reg:DI 0 ax)) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 30 29 31 3 (set (mem/f/j:DI (plus:DI (reg/f:DI 62 [ D.5046 ])
                (const_int 32 [0x20])) [0 _8->pos+0 S8 A128])
        (reg/f:DI 65 [ D.5049 ])) mSector.c:285 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.5049 ])
        (expr_list:REG_DEAD (reg/f:DI 62 [ D.5046 ])
            (nil))))
(insn 31 30 32 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mSector.c:285 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73
(code_label 32 31 33 4 122 "" [1 uses])
(note 33 32 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 33 36 4 (set (reg:SI 73)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) mSector.c:285 89 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 73)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 N_f+0 S4 A32]))) mSector.c:285 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 73)
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) mSector.c:285 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 34)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 66 67
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 42 5 (set (reg:SI 66 [ D.5048 ])
        (const_int 1 [0x1])) mSector.c:286 89 {*movsi_internal}
     (nil))
(insn 42 39 46 5 (set (reg:SI 67 [ <retval> ])
        (reg:SI 66 [ D.5048 ])) mSector.c:286 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 66 [ D.5048 ])
        (nil)))
(insn 46 42 49 5 (set (reg/i:SI 0 ax)
        (reg:SI 67 [ <retval> ])) mSector.c:287 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 67 [ <retval> ])
        (nil)))
(insn 49 46 0 5 (use (reg/i:SI 0 ax)) mSector.c:287 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function init_Sector (init_Sector, funcdef_no=18, decl_uid=1896, cgraph_uid=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r82,l0) best CREG, allocno GENERAL_REGS
    r81: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r81,l0) best SIREG, allocno GENERAL_REGS
    r80: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r80,l0) best DIREG, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r78,l0) best DIREG, allocno GENERAL_REGS
    r77: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r77,l0) best DIREG, allocno GENERAL_REGS
    r76: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r76,l0) best DREG, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r74,l0) best CREG, allocno GENERAL_REGS
    r73: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r73,l0) best SIREG, allocno GENERAL_REGS
    r72: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r72,l0) best DIREG, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r70,l0) best DIREG, allocno GENERAL_REGS
    r69: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r69,l0) best SIREG, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r67,l0) best DIREG, allocno GENERAL_REGS
    r66: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r66,l0) best SIREG, allocno GENERAL_REGS
    r65: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r65,l0) best DIREG, allocno GENERAL_REGS
    r64: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r64,l0) best SIREG, allocno GENERAL_REGS
    r63: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r63,l0) best SIREG, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r62,l0) best AREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r60,l0) best SIREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r62,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r82,l0) costs: AREG:4 DREG:4 CREG:0 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a5(r80,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:0 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a6(r81,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:0 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a7(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r76,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a12(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r74,l0) costs: AREG:4 DREG:4 CREG:0 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a15(r72,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:0 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a16(r73,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:0 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a17(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a19(r59,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 70(l0): point = 0
   Insn 67(l0): point = 2
   Insn 63(l0): point = 4
   Insn 60(l0): point = 6
   Insn 59(l0): point = 8
   Insn 58(l0): point = 10
   Insn 57(l0): point = 12
   Insn 56(l0): point = 14
   Insn 55(l0): point = 16
   Insn 54(l0): point = 18
   Insn 53(l0): point = 20
   Insn 52(l0): point = 22
   Insn 51(l0): point = 24
   Insn 50(l0): point = 26
   Insn 49(l0): point = 28
   Insn 48(l0): point = 30
   Insn 47(l0): point = 32
   Insn 46(l0): point = 34
   Insn 45(l0): point = 36
   Insn 44(l0): point = 38
   Insn 43(l0): point = 40
   Insn 42(l0): point = 42
   Insn 41(l0): point = 44
   Insn 40(l0): point = 46
   Insn 39(l0): point = 48
   Insn 38(l0): point = 50
   Insn 37(l0): point = 52
   Insn 36(l0): point = 54
   Insn 35(l0): point = 56
   Insn 34(l0): point = 58
   Insn 33(l0): point = 60
   Insn 32(l0): point = 62
   Insn 31(l0): point = 64
   Insn 30(l0): point = 66
   Insn 29(l0): point = 68
   Insn 28(l0): point = 70
   Insn 27(l0): point = 72
   Insn 26(l0): point = 74
   Insn 25(l0): point = 76
   Insn 24(l0): point = 78
   Insn 23(l0): point = 80
   Insn 22(l0): point = 82
   Insn 21(l0): point = 84
   Insn 20(l0): point = 86
   Insn 19(l0): point = 88
   Insn 18(l0): point = 90
   Insn 17(l0): point = 92
   Insn 16(l0): point = 94
   Insn 15(l0): point = 96
   Insn 14(l0): point = 98
   Insn 13(l0): point = 100
   Insn 12(l0): point = 102
   Insn 11(l0): point = 104
   Insn 10(l0): point = 106
   Insn 6(l0): point = 108
   Insn 5(l0): point = 110
   Insn 4(l0): point = 112
   Insn 3(l0): point = 114
   Insn 2(l0): point = 116
 a0(r62): [3..4]
 a1(r61): [5..6]
 a2(r83): [11..12]
 a3(r78): [17..28]
 a4(r82): [18..20]
 a5(r80): [18..24]
 a6(r81): [18..22]
 a7(r79): [23..26]
 a8(r77): [33..38]
 a9(r60): [35..42]
 a10(r76): [37..40]
 a11(r75): [43..44]
 a12(r70): [49..62]
 a13(r69): [51..64]
 a14(r74): [52..54]
 a15(r72): [52..58]
 a16(r73): [52..56]
 a17(r71): [57..60]
 a18(r68): [67..68]
 a19(r59): [67..70]
 a20(r67): [75..78]
 a21(r66): [77..80]
 a22(r65): [85..86]
 a23(r64): [97..98]
 a24(r63): [105..106]
Compressing live ranges: from 119 to 28 - 23%
Ranges after the compression:
 a0(r62): [0..1]
 a1(r61): [2..3]
 a2(r83): [4..5]
 a3(r78): [6..9]
 a4(r82): [6..7]
 a5(r80): [6..9]
 a6(r81): [6..7]
 a7(r79): [8..9]
 a8(r77): [10..11]
 a9(r60): [10..11]
 a10(r76): [10..11]
 a11(r75): [12..13]
 a12(r70): [14..17]
 a13(r69): [14..17]
 a14(r74): [14..15]
 a15(r72): [14..17]
 a16(r73): [14..15]
 a17(r71): [16..17]
 a18(r68): [18..19]
 a19(r59): [18..19]
 a20(r67): [20..21]
 a21(r66): [20..21]
 a22(r65): [22..23]
 a23(r64): [24..25]
 a24(r63): [26..27]
  regions=1, blocks=3, points=28
    allocnos=25 (big 0), copies=0, conflicts=0, ranges=25
Disposition:
   19:r59  l0     0    9:r60  l0     2    1:r61  l0     0    0:r62  l0     0
   24:r63  l0     0   23:r64  l0     0   22:r65  l0     0   21:r66  l0     1
   20:r67  l0     0   18:r68  l0     1   13:r69  l0    38   12:r70  l0    37
   17:r71  l0     0   15:r72  l0     1   16:r73  l0     4   14:r74  l0     0
   11:r75  l0     0   10:r76  l0     1    8:r77  l0     0    3:r78  l0    37
    7:r79  l0     0    5:r80  l0     1    6:r81  l0     4    4:r82  l0     0
    2:r83  l0     0
+++Costs: overall -14, reg -14, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


init_Sector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 37[r8]
;;  ref usage 	r0={11d,3u} r1={11d,2u} r2={10d,1u} r4={15d,6u} r5={19d,10u} r6={1d,2u} r7={1d,15u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1d,1u} r17={9d} r18={9d} r19={9d} r20={1d,22u} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d,1u} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={2d,2u} r73={2d,2u} r74={2d,3u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={2d,2u} r81={2d,2u} r82={2d,3u} r83={1d,1u} 
;;    total ref usage 558{462d,96u,0e} in 59{50 regular + 9 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])
        (reg:DI 4 si [ Nflight ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ Nflight ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])
        (reg:DI 1 dx [ config ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ config ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 shock+0 S8 A64])
        (reg:DI 2 cx [ shock ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ shock ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 input_ABM+0 S8 A64])
        (reg:DI 37 r8 [ input_ABM ])) mSector.c:289 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ input_ABM ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 63)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:291 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg:DI 63)) mSector.c:291 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 63)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f44d24df4c0 *.LC16>)) mSector.c:291 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_boundary") [flags 0x41]  <function_decl 0x7f44d29f7200 get_boundary>) [0 get_boundary S1 A8])
            (const_int 0 [0]))) mSector.c:291 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg:DI 64)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:292 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 64)) mSector.c:292 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 64)
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f44d24df558 *.LC17>)) mSector.c:292 87 {*movdi_internal_rex64}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_configuration") [flags 0x41]  <function_decl 0x7f44d29f7300 get_configuration>) [0 get_configuration S1 A8])
            (const_int 0 [0]))) mSector.c:292 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f44d24df5f0 *.LC18>)) mSector.c:294 87 {*movdi_internal_rex64}
     (nil))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f44d2952600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) mSector.c:294 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 2 (set (reg:DI 65)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:295 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 65)) mSector.c:295 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 65)
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("generate_temporary_point") [flags 0x3]  <function_decl 0x7f44d29fcf00 generate_temporary_point>) [0 generate_temporary_point S1 A8])
            (const_int 0 [0]))) mSector.c:295 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 2 (set (reg:DI 66)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (reg:DI 67)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 input_ABM+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg:DI 4 si)
        (reg:DI 66)) mSector.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 66)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 67)) mSector.c:297 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 67)
        (nil)))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_M1") [flags 0x41]  <function_decl 0x7f44d29f7100 get_M1>) [0 get_M1 S1 A8])
            (const_int 0 [0]))) mSector.c:297 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 28 27 29 2 (set (reg:SI 59 [ D.5050 ])
        (reg:SI 0 ax)) mSector.c:297 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 29 28 30 2 (set (reg/f:DI 68)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:297 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 68) [0 *Nflight_5(D)+0 S4 A32])
        (reg:SI 59 [ D.5050 ])) mSector.c:297 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 68)
        (expr_list:REG_DEAD (reg:SI 59 [ D.5050 ])
            (nil))))
(insn 31 30 32 2 (set (reg:DI 69)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 2 (set (reg:DI 70)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 71)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 2 (set (reg:DI 72)
        (reg/f:DI 7 sp)) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:DI 73)
        (reg/f:DI 71)) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71)
        (nil)))
(insn 36 35 37 2 (set (reg:DI 74)
        (const_int 38 [0x26])) mSector.c:299 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 74)
                (const_int 0 [0]))
            (set (reg:DI 72)
                (plus:DI (ashift:DI (reg:DI 74)
                        (const_int 3 [0x3]))
                    (reg:DI 72)))
            (set (reg:DI 73)
                (plus:DI (ashift:DI (reg:DI 74)
                        (const_int 3 [0x3]))
                    (reg:DI 73)))
            (set (mem:BLK (reg:DI 72) [0  S304 A128])
                (mem:BLK (reg:DI 73) [0 *config_1(D)+0 S304 A128]))
            (use (reg:DI 74))
        ]) mSector.c:299 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 74)
        (expr_list:REG_UNUSED (reg:DI 73)
            (expr_list:REG_UNUSED (reg:DI 72)
                (nil)))))
(insn 38 37 39 2 (set (reg:DI 4 si)
        (reg:DI 69)) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 69)
        (nil)))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (reg:DI 70)) mSector.c:299 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 70)
        (nil)))
(call_insn 40 39 41 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("modify_traj_intersect_bound") [flags 0x3]  <function_decl 0x7f44d2a01200 modify_traj_intersect_bound>) [0 modify_traj_intersect_bound S1 A8])
            (const_int 304 [0x130]))) mSector.c:299 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
                (nil)))))
(insn 41 40 42 2 (set (reg/f:DI 75)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 Nflight+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:SI 60 [ D.5050 ])
        (mem:SI (reg/f:DI 75) [0 *Nflight_5(D)+0 S4 A32])) mSector.c:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 75)
        (nil)))
(insn 43 42 44 2 (set (reg:DI 76)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:DI 77)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 flight+0 S8 A64])) mSector.c:309 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 1 dx)
        (reg:DI 76)) mSector.c:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 76)
        (nil)))
(insn 46 45 47 2 (set (reg:SI 4 si)
        (reg:SI 60 [ D.5050 ])) mSector.c:309 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 60 [ D.5050 ])
        (nil)))
(insn 47 46 48 2 (set (reg:DI 5 di)
        (reg:DI 77)) mSector.c:309 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 77)
        (nil)))
(call_insn 48 47 49 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_alloc_flight_pos") [flags 0x3]  <function_decl 0x7f44d278ca00 _alloc_flight_pos>) [0 _alloc_flight_pos S1 A8])
            (const_int 0 [0]))) mSector.c:309 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 49 48 50 2 (set (reg:DI 78)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 shock+0 S8 A64])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (reg/f:DI 79)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 2 (set (reg:DI 80)
        (reg/f:DI 7 sp)) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:DI 81)
        (reg/f:DI 79)) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79)
        (nil)))
(insn 53 52 54 2 (set (reg:DI 82)
        (const_int 38 [0x26])) mSector.c:311 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg:DI 82)
                (const_int 0 [0]))
            (set (reg:DI 80)
                (plus:DI (ashift:DI (reg:DI 82)
                        (const_int 3 [0x3]))
                    (reg:DI 80)))
            (set (reg:DI 81)
                (plus:DI (ashift:DI (reg:DI 82)
                        (const_int 3 [0x3]))
                    (reg:DI 81)))
            (set (mem:BLK (reg:DI 80) [0  S304 A128])
                (mem:BLK (reg:DI 81) [0 *config_1(D)+0 S304 A128]))
            (use (reg:DI 82))
        ]) mSector.c:311 901 {*rep_movdi_rex64}
     (expr_list:REG_UNUSED (reg:DI 82)
        (expr_list:REG_UNUSED (reg:DI 81)
            (expr_list:REG_UNUSED (reg:DI 80)
                (nil)))))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (reg:DI 78)) mSector.c:311 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 78)
        (nil)))
(call_insn 56 55 57 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_alloc_shock") [flags 0x3]  <function_decl 0x7f44d278c800 _alloc_shock>) [0 _alloc_shock S1 A8])
            (const_int 304 [0x130]))) mSector.c:311 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_DEAD (use (mem:BLK (reg/f:DI 7 sp) [0  S304 A128]))
            (nil))))
(insn 57 56 58 2 (set (reg:DI 83)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 config+0 S8 A64])) mSector.c:312 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (reg:DI 5 di)
        (reg:DI 83)) mSector.c:312 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 83)
        (nil)))
(call_insn 59 58 60 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_temp_shock") [flags 0x41]  <function_decl 0x7f44d29f7400 get_temp_shock>) [0 get_temp_shock S1 A8])
            (const_int 0 [0]))) mSector.c:312 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 60 59 63 2 (set (reg:SI 61 [ D.5050 ])
        (const_int 1 [0x1])) mSector.c:315 89 {*movsi_internal}
     (nil))
(insn 63 60 67 2 (set (reg:SI 62 [ <retval> ])
        (reg:SI 61 [ D.5050 ])) mSector.c:315 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 61 [ D.5050 ])
        (nil)))
(insn 67 63 70 2 (set (reg/i:SI 0 ax)
        (reg:SI 62 [ <retval> ])) mSector.c:316 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 62 [ <retval> ])
        (nil)))
(insn 70 67 0 2 (use (reg/i:SI 0 ax)) mSector.c:316 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

