
;; Function _convert_time (_convert_time, funcdef_no=2, decl_uid=3111, cgraph_uid=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 12 (    1)
Building IRA IR
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 81.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r106: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a2 (r106,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r105: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a5 (r105,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r104: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a12 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a14 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r102,l0) best AREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r97,l0) best AREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a0 (r85,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r84: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_INT_REGS
    a1 (r84,l0) best FLOAT_REGS, allocno FLOAT_INT_REGS
    r83: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a3 (r83,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r82: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a6 (r82,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r81: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a4 (r81,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r80: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a7 (r80,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r79: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r79,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r78: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a9 (r78,l0) best NO_REGS, allocno NO_REGS
    r77: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a10 (r77,l0) best SSE_REGS, allocno SSE_REGS
    r76: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r76,l0) best SSE_REGS, allocno SSE_REGS
    r75: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a11 (r75,l0) best SSE_REGS, allocno SSE_REGS
    r74: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a15 (r74,l0) best SSE_REGS, allocno SSE_REGS
    r73: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r73,l0) best DIREG, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r68,l0) best DIREG, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r63,l0) best DIREG, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r85,l0) costs: AD_REGS:25 Q_REGS:25 NON_Q_REGS:25 INDEX_REGS:25 GENERAL_REGS:25 LEGACY_REGS:25 CLOBBERED_REGS:25 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:19
  a1(r84,l0) costs: AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:44 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:17
  a2(r106,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a3(r83,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a4(r81,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a5(r105,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a6(r82,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a7(r80,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a8(r79,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a9(r78,l0) costs: AREG:30 DREG:30 CREG:30 BREG:30 SIREG:30 DIREG:30 AD_REGS:30 Q_REGS:30 NON_Q_REGS:30 INDEX_REGS:30 GENERAL_REGS:30 LEGACY_REGS:30 CLOBBERED_REGS:30 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:21 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a10(r77,l0) costs: AREG:26 DREG:26 CREG:26 BREG:26 SIREG:26 DIREG:26 AD_REGS:26 Q_REGS:26 NON_Q_REGS:26 INDEX_REGS:26 GENERAL_REGS:26 LEGACY_REGS:26 CLOBBERED_REGS:26 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:15
  a11(r75,l0) costs: AREG:26 DREG:26 CREG:26 BREG:26 SIREG:26 DIREG:26 AD_REGS:26 Q_REGS:26 NON_Q_REGS:26 INDEX_REGS:26 GENERAL_REGS:26 LEGACY_REGS:26 CLOBBERED_REGS:26 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:15
  a12(r104,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 INDEX_REGS:15 GENERAL_REGS:15 LEGACY_REGS:15 CLOBBERED_REGS:15 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:40 ALL_REGS:131070 MEM:13
  a13(r76,l0) costs: AREG:26 DREG:26 CREG:26 BREG:26 SIREG:26 DIREG:26 AD_REGS:26 Q_REGS:26 NON_Q_REGS:26 INDEX_REGS:26 GENERAL_REGS:26 LEGACY_REGS:26 CLOBBERED_REGS:26 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:15
  a14(r103,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 INDEX_REGS:15 GENERAL_REGS:15 LEGACY_REGS:15 CLOBBERED_REGS:15 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:40 ALL_REGS:131070 MEM:13
  a15(r74,l0) costs: AREG:26 DREG:26 CREG:26 BREG:26 SIREG:26 DIREG:26 AD_REGS:26 Q_REGS:26 NON_Q_REGS:26 INDEX_REGS:26 GENERAL_REGS:26 LEGACY_REGS:26 CLOBBERED_REGS:26 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 SSE_REGS:0 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:15
  a16(r102,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a17(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a18(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r97,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a27(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a28(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r92,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a37(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a38(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r87,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a47(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 109(l0): point = 0
   Insn 106(l0): point = 2
   Insn 102(l0): point = 4
   Insn 99(l0): point = 6
   Insn 98(l0): point = 8
   Insn 97(l0): point = 10
   Insn 96(l0): point = 12
   Insn 95(l0): point = 14
   Insn 94(l0): point = 16
   Insn 93(l0): point = 18
   Insn 92(l0): point = 20
   Insn 91(l0): point = 22
   Insn 90(l0): point = 24
   Insn 89(l0): point = 26
   Insn 88(l0): point = 28
   Insn 87(l0): point = 30
   Insn 86(l0): point = 32
   Insn 85(l0): point = 34
   Insn 84(l0): point = 36
   Insn 83(l0): point = 38
   Insn 82(l0): point = 40
   Insn 81(l0): point = 42
   Insn 80(l0): point = 44
   Insn 79(l0): point = 46
   Insn 78(l0): point = 48
   Insn 77(l0): point = 50
   Insn 76(l0): point = 52
   Insn 75(l0): point = 54
   Insn 63(l0): point = 57
   Insn 73(l0): point = 60
   Insn 72(l0): point = 62
   Insn 70(l0): point = 64
   Insn 69(l0): point = 66
   Insn 68(l0): point = 68
   Insn 67(l0): point = 70
   Insn 66(l0): point = 72
   Insn 116(l0): point = 75
   Insn 59(l0): point = 77
   Insn 58(l0): point = 79
   Insn 57(l0): point = 81
   Insn 56(l0): point = 83
   Insn 55(l0): point = 85
   Insn 54(l0): point = 87
   Insn 53(l0): point = 89
   Insn 52(l0): point = 91
   Insn 51(l0): point = 93
   Insn 39(l0): point = 96
   Insn 49(l0): point = 99
   Insn 48(l0): point = 101
   Insn 46(l0): point = 103
   Insn 45(l0): point = 105
   Insn 44(l0): point = 107
   Insn 43(l0): point = 109
   Insn 42(l0): point = 111
   Insn 114(l0): point = 114
   Insn 35(l0): point = 116
   Insn 34(l0): point = 118
   Insn 33(l0): point = 120
   Insn 32(l0): point = 122
   Insn 31(l0): point = 124
   Insn 30(l0): point = 126
   Insn 29(l0): point = 128
   Insn 28(l0): point = 130
   Insn 27(l0): point = 132
   Insn 15(l0): point = 135
   Insn 25(l0): point = 138
   Insn 24(l0): point = 140
   Insn 22(l0): point = 142
   Insn 21(l0): point = 144
   Insn 20(l0): point = 146
   Insn 19(l0): point = 148
   Insn 18(l0): point = 150
   Insn 112(l0): point = 153
   Insn 11(l0): point = 155
   Insn 10(l0): point = 157
   Insn 9(l0): point = 159
   Insn 8(l0): point = 161
   Insn 7(l0): point = 163
   Insn 6(l0): point = 165
   Insn 2(l0): point = 167
 a0(r85): [3..4]
 a1(r84 [0]): [5..6]
 a1(r84 [1]): [5..6]
 a2(r106): [9..10]
 a3(r83): [11..12]
 a4(r81): [11..18]
 a5(r105): [13..14]
 a6(r82): [13..16]
 a7(r80): [19..20]
 a8(r79): [19..22]
 a9(r78): [23..24]
 a10(r77): [25..26]
 a11(r75): [25..32]
 a12(r104): [27..28]
 a13(r76): [27..30]
 a14(r103): [33..34]
 a15(r74): [33..36]
 a16(r102): [39..40]
 a17(r73): [45..46]
 a18(r101): [47..48]
 a19(r72): [47..50]
 a20(r100): [51..52]
 a21(r71): [63..64]
 a22(r70): [65..66]
 a23(r99): [67..68]
 a24(r69): [67..70]
 a25(r98): [71..72]
 a26(r97): [78..79]
 a27(r68): [84..85]
 a28(r96): [86..87]
 a29(r67): [86..89]
 a30(r95): [90..91]
 a31(r66): [102..103]
 a32(r65): [104..105]
 a33(r94): [106..107]
 a34(r64): [106..109]
 a35(r93): [110..111]
 a36(r92): [117..118]
 a37(r63): [123..124]
 a38(r91): [125..126]
 a39(r62): [125..128]
 a40(r90): [129..130]
 a41(r61): [141..142]
 a42(r60): [143..144]
 a43(r89): [145..146]
 a44(r59): [145..148]
 a45(r88): [149..150]
 a46(r87): [158..159]
 a47(r86): [164..165]
Compressing live ranges: from 170 to 72 - 42%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r84 [0]): [2..3]
 a1(r84 [1]): [2..3]
 a2(r106): [4..5]
 a3(r83): [6..7]
 a4(r81): [6..9]
 a5(r105): [8..9]
 a6(r82): [8..9]
 a7(r80): [10..11]
 a8(r79): [10..11]
 a9(r78): [12..13]
 a10(r77): [14..15]
 a11(r75): [14..17]
 a12(r104): [16..17]
 a13(r76): [16..17]
 a14(r103): [18..19]
 a15(r74): [18..19]
 a16(r102): [20..21]
 a17(r73): [22..23]
 a18(r101): [24..25]
 a19(r72): [24..25]
 a20(r100): [26..27]
 a21(r71): [28..29]
 a22(r70): [30..31]
 a23(r99): [32..33]
 a24(r69): [32..33]
 a25(r98): [34..35]
 a26(r97): [36..37]
 a27(r68): [38..39]
 a28(r96): [40..41]
 a29(r67): [40..41]
 a30(r95): [42..43]
 a31(r66): [44..45]
 a32(r65): [46..47]
 a33(r94): [48..49]
 a34(r64): [48..49]
 a35(r93): [50..51]
 a36(r92): [52..53]
 a37(r63): [54..55]
 a38(r91): [56..57]
 a39(r62): [56..57]
 a40(r90): [58..59]
 a41(r61): [60..61]
 a42(r60): [62..63]
 a43(r89): [64..65]
 a44(r59): [64..65]
 a45(r88): [66..67]
 a46(r87): [68..69]
 a47(r86): [70..71]
  regions=1, blocks=12, points=72
    allocnos=48 (big 1), copies=0, conflicts=0, ranges=49
Disposition:
   44:r59  l0     1   42:r60  l0     0   41:r61  l0     0   39:r62  l0     1
   37:r63  l0     0   34:r64  l0     1   32:r65  l0     0   31:r66  l0     0
   29:r67  l0     1   27:r68  l0     0   24:r69  l0     1   22:r70  l0     0
   21:r71  l0     0   19:r72  l0     1   17:r73  l0     0   15:r74  l0    21
   11:r75  l0    22   13:r76  l0    21   10:r77  l0    21    9:r78  l0   mem
    8:r79  l0     9    7:r80  l0     8    4:r81  l0     9    6:r82  l0    10
    3:r83  l0     8    1:r84  l0     0    0:r85  l0     8   47:r86  l0     0
   46:r87  l0     0   45:r88  l0     0   43:r89  l0     0   40:r90  l0     0
   38:r91  l0     0   36:r92  l0     0   35:r93  l0     0   33:r94  l0     0
   30:r95  l0     0   28:r96  l0     0   26:r97  l0     0   25:r98  l0     0
   23:r99  l0     0   20:r100 l0     0   18:r101 l0     0   16:r102 l0     0
   14:r103 l0    22   12:r104 l0    23    5:r105 l0     8    2:r106 l0     8
+++Costs: overall 10, reg -9, mem 19, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_convert_time

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={5d,4u} r1={5d} r2={5d} r4={5d} r5={9d,5u} r6={1d,11u} r7={1d,15u} r8={5d,2u} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,10u} r17={19d,3u} r18={4d} r19={4d} r20={1d,48u,6e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r59={1d,1u,1e} r60={1d,1u} r61={1d,1u} r62={1d,1u,1e} r63={1d,1u} r64={1d,1u,1e} r65={1d,1u} r66={1d,1u} r67={1d,1u,1e} r68={1d,1u} r69={1d,1u,1e} r70={1d,1u} r71={1d,1u} r72={1d,1u,1e} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} 
;;    total ref usage 421{263d,146u,12e} in 80{76 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 86 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
        (reg:DI 5 di [ c ])) mQuery.c:20 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ c ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 86)) mQuery.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 86)
        (nil)))
(call_insn/i 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:24 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 87)
        (reg:SI 0 ax)) mQuery.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 H+0 S4 A32])
        (reg:SI 87)) mQuery.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87)
        (nil)))
(insn 11 10 112 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:25 89 {*movsi_internal}
     (nil))
(jump_insn 112 11 113 2 (set (pc)
        (label_ref 16)) mQuery.c:25 650 {jump}
     (nil)
 -> 16)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 23)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 23 113 14 3 3 "" [1 uses])
(note 14 23 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:25 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 88 89
(code_label 16 15 17 4 2 "" [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 88)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:25 89 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 59 [ D.3671 ])
        (sign_extend:DI (reg:SI 88))) mQuery.c:25 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88)
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:25 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 60 [ D.3672 ])
                (plus:DI (reg:DI 59 [ D.3671 ])
                    (reg/f:DI 89)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:25 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_DEAD (reg:DI 59 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 59 [ D.3671 ]))
                    (nil))))))
(insn 22 21 24 4 (set (reg:QI 61 [ D.3673 ])
        (mem:QI (reg/f:DI 60 [ D.3672 ]) [0 *_8+0 S1 A8])) mQuery.c:25 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 60 [ D.3672 ])
        (nil)))
(insn 24 22 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 61 [ D.3673 ])
            (const_int 58 [0x3a]))) mQuery.c:25 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 61 [ D.3673 ])
        (nil)))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) mQuery.c:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 23)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 90 91 92
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:26 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 28 27 29 5 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:26 89 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 62 [ D.3671 ])
        (sign_extend:DI (reg:SI 90))) mQuery.c:26 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 30 29 31 5 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:26 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 63 [ D.3674 ])
                (plus:DI (reg:DI 62 [ D.3671 ])
                    (reg/f:DI 91)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:26 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_DEAD (reg:DI 62 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 62 [ D.3671 ]))
                    (nil))))))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg/f:DI 63 [ D.3674 ])) mQuery.c:26 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.3674 ])
        (nil)))
(call_insn/i 33 32 34 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:26 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 5 (set (reg:SI 92)
        (reg:SI 0 ax)) mQuery.c:26 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 35 34 114 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 m+0 S4 A32])
        (reg:SI 92)) mQuery.c:26 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(jump_insn 114 35 115 5 (set (pc)
        (label_ref 40)) mQuery.c:27 650 {jump}
     (nil)
 -> 40)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 115 114 47)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 47 115 38 6 5 "" [1 uses])
(note 38 47 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:27 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 93 94
(code_label 40 39 41 7 4 "" [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:27 89 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:DI 64 [ D.3671 ])
        (sign_extend:DI (reg:SI 93))) mQuery.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 44 43 45 7 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg/f:DI 65 [ D.3672 ])
                (plus:DI (reg:DI 64 [ D.3671 ])
                    (reg/f:DI 94)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (expr_list:REG_DEAD (reg:DI 64 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 64 [ D.3671 ]))
                    (nil))))))
(insn 46 45 48 7 (set (reg:QI 66 [ D.3673 ])
        (mem:QI (reg/f:DI 65 [ D.3672 ]) [0 *_16+0 S1 A8])) mQuery.c:27 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.3672 ])
        (nil)))
(insn 48 46 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 66 [ D.3673 ])
            (const_int 58 [0x3a]))) mQuery.c:27 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 66 [ D.3673 ])
        (nil)))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) mQuery.c:27 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 47)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 95 96 97
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:28 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 52 51 53 8 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:28 89 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:DI 67 [ D.3671 ])
        (sign_extend:DI (reg:SI 95))) mQuery.c:28 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 54 53 55 8 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:28 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 8 (parallel [
            (set (reg/f:DI 68 [ D.3674 ])
                (plus:DI (reg:DI 67 [ D.3671 ])
                    (reg/f:DI 96)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:28 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (expr_list:REG_DEAD (reg:DI 67 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 67 [ D.3671 ]))
                    (nil))))))
(insn 56 55 57 8 (set (reg:DI 5 di)
        (reg/f:DI 68 [ D.3674 ])) mQuery.c:28 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.3674 ])
        (nil)))
(call_insn/i 57 56 58 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:28 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 58 57 59 8 (set (reg:SI 97)
        (reg:SI 0 ax)) mQuery.c:28 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 59 58 116 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 s+0 S4 A32])
        (reg:SI 97)) mQuery.c:28 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(jump_insn 116 59 117 8 (set (pc)
        (label_ref 64)) mQuery.c:29 650 {jump}
     (nil)
 -> 64)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 117 116 71)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 71 117 62 9 7 "" [1 uses])
(note 62 71 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:29 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 70 71 98 99
(code_label 64 63 65 10 6 "" [1 uses])
(note 65 64 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 10 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:29 89 {*movsi_internal}
     (nil))
(insn 67 66 68 10 (set (reg:DI 69 [ D.3671 ])
        (sign_extend:DI (reg:SI 98))) mQuery.c:29 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 68 67 69 10 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:29 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg/f:DI 70 [ D.3672 ])
                (plus:DI (reg:DI 69 [ D.3671 ])
                    (reg/f:DI 99)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:29 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (expr_list:REG_DEAD (reg:DI 69 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 69 [ D.3671 ]))
                    (nil))))))
(insn 70 69 72 10 (set (reg:QI 71 [ D.3673 ])
        (mem:QI (reg/f:DI 70 [ D.3672 ]) [0 *_24+0 S1 A8])) mQuery.c:29 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.3672 ])
        (nil)))
(insn 72 70 73 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 71 [ D.3673 ])
            (const_int 58 [0x3a]))) mQuery.c:29 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 71 [ D.3673 ])
        (nil)))
(jump_insn 73 72 74 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) mQuery.c:29 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 71)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 100 101 102 103 104 105 106
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:30 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 76 75 77 11 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:30 89 {*movsi_internal}
     (nil))
(insn 77 76 78 11 (set (reg:DI 72 [ D.3671 ])
        (sign_extend:DI (reg:SI 100))) mQuery.c:30 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 78 77 79 11 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:30 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 11 (parallel [
            (set (reg/f:DI 73 [ D.3674 ])
                (plus:DI (reg:DI 72 [ D.3671 ])
                    (reg/f:DI 101)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:30 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_DEAD (reg:DI 72 [ D.3671 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                        (reg:DI 72 [ D.3671 ]))
                    (nil))))))
(insn 80 79 81 11 (set (reg:DI 5 di)
        (reg/f:DI 73 [ D.3674 ])) mQuery.c:30 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.3674 ])
        (nil)))
(call_insn/i 81 80 82 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:30 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 82 81 83 11 (set (reg:SI 102)
        (reg:SI 0 ax)) mQuery.c:30 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 83 82 84 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 f+0 S4 A32])
        (reg:SI 102)) mQuery.c:30 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(insn 84 83 85 11 (set (reg:DF 74 [ D.3675 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 H+0 S4 A32]))) mQuery.c:32 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 85 84 86 11 (set (reg:DF 103)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 86 85 87 11 (set (reg:DF 75 [ D.3675 ])
        (mult:DF (reg:DF 74 [ D.3675 ])
            (reg:DF 103))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 103)
        (expr_list:REG_DEAD (reg:DF 74 [ D.3675 ])
            (nil))))
(insn 87 86 88 11 (set (reg:DF 76 [ D.3675 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 m+0 S4 A32]))) mQuery.c:32 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 88 87 89 11 (set (reg:DF 104)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 6.0e+1 [0x0.fp+6])
        (nil)))
(insn 89 88 90 11 (set (reg:DF 77 [ D.3675 ])
        (mult:DF (reg:DF 76 [ D.3675 ])
            (reg:DF 104))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 104)
        (expr_list:REG_DEAD (reg:DF 76 [ D.3675 ])
            (nil))))
(insn 90 89 91 11 (set (reg:DF 78 [ D.3675 ])
        (plus:DF (reg:DF 75 [ D.3675 ])
            (reg:DF 77 [ D.3675 ]))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 77 [ D.3675 ])
        (expr_list:REG_DEAD (reg:DF 75 [ D.3675 ])
            (nil))))
(insn 91 90 92 11 (set (reg:XF 79 [ D.3676 ])
        (float_extend:XF (reg:DF 78 [ D.3675 ]))) mQuery.c:32 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 78 [ D.3675 ])
        (nil)))
(insn 92 91 93 11 (set (reg:XF 80 [ D.3676 ])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 s+0 S4 A32]))) mQuery.c:32 256 {*floatsixf2_i387}
     (nil))
(insn 93 92 94 11 (set (reg:XF 81 [ D.3676 ])
        (plus:XF (reg:XF 79 [ D.3676 ])
            (reg:XF 80 [ D.3676 ]))) mQuery.c:32 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 80 [ D.3676 ])
        (expr_list:REG_DEAD (reg:XF 79 [ D.3676 ])
            (nil))))
(insn 94 93 95 11 (set (reg:XF 82 [ D.3676 ])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 f+0 S4 A32]))) mQuery.c:32 256 {*floatsixf2_i387}
     (nil))
(insn 95 94 96 11 (set (reg:XF 105)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mQuery.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 96 95 97 11 (set (reg:XF 83 [ D.3676 ])
        (div:XF (reg:XF 82 [ D.3676 ])
            (reg:XF 105))) mQuery.c:32 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 105)
        (expr_list:REG_DEAD (reg:XF 82 [ D.3676 ])
            (nil))))
(insn 97 96 98 11 (set (reg:XF 106)
        (plus:XF (reg:XF 81 [ D.3676 ])
            (reg:XF 83 [ D.3676 ]))) mQuery.c:32 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 83 [ D.3676 ])
        (expr_list:REG_DEAD (reg:XF 81 [ D.3676 ])
            (nil))))
(insn 98 97 99 11 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 time+0 S16 A128])
        (reg:XF 106)) mQuery.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 106)
        (nil)))
(insn 99 98 102 11 (set (reg:XF 84 [ D.3676 ])
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 time+0 S16 A128])) mQuery.c:34 131 {*movxf_internal_rex64}
     (nil))
(insn 102 99 106 11 (set (reg:XF 85 [ <retval> ])
        (reg:XF 84 [ D.3676 ])) mQuery.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 84 [ D.3676 ])
        (nil)))
(insn 106 102 109 11 (set (reg/i:XF 8 st)
        (reg:XF 85 [ <retval> ])) mQuery.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 85 [ <retval> ])
        (nil)))
(insn 109 106 0 11 (use (reg/i:XF 8 st)) mQuery.c:35 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _calculate_velocity (_calculate_velocity, funcdef_no=3, decl_uid=3130, cgraph_uid=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 12 (    1)
Building IRA IR
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 167.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a54 (r162,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a94 (r146,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r145: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a95 (r145,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r144: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a96 (r144,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r133,l0) best AREG, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a13 (r131,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r130: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r130,l0) best DIREG, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r122,l0) best SIREG, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a53 (r106,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r105: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a55 (r105,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a57 (r96,l0) best SIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a97 (r80,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a98 (r72,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r133,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a9(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a10(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a11(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r131,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a14(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a18(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a25(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a26(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a27(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a30(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a32(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a38(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a39(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a40(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a42(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a49(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a50(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a51(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r106,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a54(r162,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a55(r105,l0) costs: AD_REGS:62 Q_REGS:62 NON_Q_REGS:62 INDEX_REGS:62 GENERAL_REGS:62 LEGACY_REGS:62 CLOBBERED_REGS:62 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a56(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a58(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a60(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a66(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a67(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a68(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a69(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a70(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a71(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a72(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a73(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a74(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a75(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a76(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a77(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a78(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a79(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a80(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a81(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a82(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a83(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a84(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a85(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a86(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a87(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a88(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a89(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a90(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a91(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a92(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a93(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a94(r146,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a95(r145,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a96(r144,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a97(r80,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a98(r72,l0) costs: AD_REGS:43 Q_REGS:43 NON_Q_REGS:43 INDEX_REGS:43 GENERAL_REGS:43 LEGACY_REGS:43 CLOBBERED_REGS:43 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:20
  a99(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a100(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a101(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a102(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a103(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a104(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a105(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a106(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a107(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a108(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a109(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a110(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a111(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a112(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a113(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a114(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a115(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a116(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a117(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a118(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a119(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a120(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a121(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a122(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a123(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 209(l0): point = 0
   Insn 206(l0): point = 2
   Insn 202(l0): point = 4
   Insn 199(l0): point = 6
   Insn 217(l0): point = 9
   Insn 11(l0): point = 11
   Insn 197(l0): point = 14
   Insn 196(l0): point = 16
   Insn 195(l0): point = 18
   Insn 191(l0): point = 21
   Insn 189(l0): point = 24
   Insn 188(l0): point = 26
   Insn 186(l0): point = 28
   Insn 185(l0): point = 30
   Insn 184(l0): point = 32
   Insn 183(l0): point = 34
   Insn 182(l0): point = 36
   Insn 181(l0): point = 38
   Insn 180(l0): point = 40
   Insn 179(l0): point = 42
   Insn 178(l0): point = 44
   Insn 177(l0): point = 46
   Insn 176(l0): point = 48
   Insn 175(l0): point = 50
   Insn 172(l0): point = 53
   Insn 169(l0): point = 56
   Insn 168(l0): point = 58
   Insn 167(l0): point = 60
   Insn 166(l0): point = 62
   Insn 165(l0): point = 64
   Insn 164(l0): point = 66
   Insn 163(l0): point = 68
   Insn 162(l0): point = 70
   Insn 161(l0): point = 72
   Insn 160(l0): point = 74
   Insn 159(l0): point = 76
   Insn 158(l0): point = 78
   Insn 157(l0): point = 80
   Insn 156(l0): point = 82
   Insn 155(l0): point = 84
   Insn 154(l0): point = 86
   Insn 153(l0): point = 88
   Insn 152(l0): point = 90
   Insn 151(l0): point = 92
   Insn 150(l0): point = 94
   Insn 149(l0): point = 96
   Insn 148(l0): point = 98
   Insn 147(l0): point = 100
   Insn 146(l0): point = 102
   Insn 145(l0): point = 104
   Insn 144(l0): point = 106
   Insn 143(l0): point = 108
   Insn 142(l0): point = 110
   Insn 141(l0): point = 112
   Insn 140(l0): point = 114
   Insn 139(l0): point = 116
   Insn 138(l0): point = 118
   Insn 137(l0): point = 120
   Insn 136(l0): point = 122
   Insn 135(l0): point = 124
   Insn 134(l0): point = 126
   Insn 133(l0): point = 128
   Insn 132(l0): point = 130
   Insn 131(l0): point = 132
   Insn 130(l0): point = 134
   Insn 129(l0): point = 136
   Insn 128(l0): point = 138
   Insn 127(l0): point = 140
   Insn 126(l0): point = 142
   Insn 125(l0): point = 144
   Insn 124(l0): point = 146
   Insn 123(l0): point = 148
   Insn 122(l0): point = 150
   Insn 121(l0): point = 152
   Insn 120(l0): point = 154
   Insn 119(l0): point = 156
   Insn 118(l0): point = 158
   Insn 117(l0): point = 160
   Insn 220(l0): point = 163
   Insn 112(l0): point = 165
   Insn 111(l0): point = 167
   Insn 110(l0): point = 169
   Insn 109(l0): point = 171
   Insn 108(l0): point = 173
   Insn 107(l0): point = 175
   Insn 106(l0): point = 177
   Insn 105(l0): point = 179
   Insn 104(l0): point = 181
   Insn 103(l0): point = 183
   Insn 102(l0): point = 185
   Insn 101(l0): point = 187
   Insn 100(l0): point = 189
   Insn 99(l0): point = 191
   Insn 98(l0): point = 193
   Insn 97(l0): point = 195
   Insn 96(l0): point = 197
   Insn 95(l0): point = 199
   Insn 94(l0): point = 201
   Insn 93(l0): point = 203
   Insn 92(l0): point = 205
   Insn 91(l0): point = 207
   Insn 90(l0): point = 209
   Insn 89(l0): point = 211
   Insn 88(l0): point = 213
   Insn 87(l0): point = 215
   Insn 86(l0): point = 217
   Insn 85(l0): point = 219
   Insn 84(l0): point = 221
   Insn 83(l0): point = 223
   Insn 82(l0): point = 225
   Insn 81(l0): point = 227
   Insn 80(l0): point = 229
   Insn 79(l0): point = 231
   Insn 78(l0): point = 233
   Insn 77(l0): point = 235
   Insn 76(l0): point = 237
   Insn 75(l0): point = 239
   Insn 74(l0): point = 241
   Insn 73(l0): point = 243
   Insn 72(l0): point = 245
   Insn 71(l0): point = 247
   Insn 70(l0): point = 249
   Insn 69(l0): point = 251
   Insn 68(l0): point = 253
   Insn 67(l0): point = 255
   Insn 66(l0): point = 257
   Insn 65(l0): point = 259
   Insn 64(l0): point = 261
   Insn 63(l0): point = 263
   Insn 62(l0): point = 265
   Insn 61(l0): point = 267
   Insn 60(l0): point = 269
   Insn 59(l0): point = 271
   Insn 58(l0): point = 273
   Insn 53(l0): point = 276
   Insn 52(l0): point = 278
   Insn 51(l0): point = 280
   Insn 50(l0): point = 282
   Insn 49(l0): point = 284
   Insn 48(l0): point = 286
   Insn 47(l0): point = 288
   Insn 46(l0): point = 290
   Insn 45(l0): point = 292
   Insn 44(l0): point = 294
   Insn 43(l0): point = 296
   Insn 42(l0): point = 298
   Insn 41(l0): point = 300
   Insn 40(l0): point = 302
   Insn 39(l0): point = 304
   Insn 38(l0): point = 306
   Insn 37(l0): point = 308
   Insn 36(l0): point = 310
   Insn 35(l0): point = 312
   Insn 34(l0): point = 314
   Insn 33(l0): point = 316
   Insn 32(l0): point = 318
   Insn 31(l0): point = 320
   Insn 30(l0): point = 322
   Insn 29(l0): point = 324
   Insn 28(l0): point = 326
   Insn 27(l0): point = 328
   Insn 26(l0): point = 330
   Insn 25(l0): point = 332
   Insn 24(l0): point = 334
   Insn 23(l0): point = 336
   Insn 22(l0): point = 338
   Insn 21(l0): point = 340
   Insn 20(l0): point = 342
   Insn 19(l0): point = 344
   Insn 18(l0): point = 346
   Insn 17(l0): point = 348
   Insn 16(l0): point = 350
   Insn 15(l0): point = 352
   Insn 215(l0): point = 355
   Insn 7(l0): point = 357
   Insn 3(l0): point = 359
   Insn 2(l0): point = 361
 a0(r133): [3..4]
 a1(r132): [5..6]
 a2(r182): [17..18]
 a3(r63): [27..28]
 a4(r62): [29..30]
 a5(r61): [31..32]
 a6(r181): [33..34]
 a7(r60): [33..36]
 a8(r179): [41..46] [37..38]
 a9(r180): [39..40]
 a10(r59): [43..48]
 a11(r178): [49..50]
 a12(r113): [57..132]
 a13(r131): [57..58]
 a14(r130): [63..66]
 a15(r122): [65..98]
 a16(r129): [67..68]
 a17(r128): [69..70]
 a18(r126): [69..76]
 a19(r127): [71..72]
 a20(r177): [73..74]
 a21(r125): [77..78]
 a22(r176): [79..80]
 a23(r124): [79..82]
 a24(r174): [87..92] [83..84]
 a25(r175): [85..86]
 a26(r123): [89..94]
 a27(r173): [95..96]
 a28(r121): [99..100]
 a29(r120): [101..102]
 a30(r117): [101..110]
 a31(r119): [103..104]
 a32(r118): [105..106]
 a33(r172): [107..108]
 a34(r116): [111..112]
 a35(r171): [113..114]
 a36(r115): [113..116]
 a37(r169): [121..126] [117..118]
 a38(r170): [119..120]
 a39(r114): [123..128]
 a40(r168): [129..130]
 a41(r112): [133..134]
 a42(r110): [133..140]
 a43(r111): [135..136]
 a44(r167): [137..138]
 a45(r109): [141..142]
 a46(r166): [143..144]
 a47(r108): [143..146]
 a48(r164): [151..156] [147..148]
 a49(r165): [149..150]
 a50(r107): [153..158]
 a51(r163): [159..160]
 a52(r87): [166..245]
 a53(r106): [166..167]
 a54(r162): [168..169]
 a55(r105): [168..171]
 a56(r104): [176..179]
 a57(r96): [178..211]
 a58(r103): [180..181]
 a59(r102): [182..183]
 a60(r100): [182..189]
 a61(r101): [184..185]
 a62(r161): [186..187]
 a63(r99): [190..191]
 a64(r160): [192..193]
 a65(r98): [192..195]
 a66(r158): [200..205] [196..197]
 a67(r159): [198..199]
 a68(r97): [202..207]
 a69(r157): [208..209]
 a70(r95): [212..213]
 a71(r94): [214..215]
 a72(r91): [214..223]
 a73(r93): [216..217]
 a74(r92): [218..219]
 a75(r156): [220..221]
 a76(r90): [224..225]
 a77(r155): [226..227]
 a78(r89): [226..229]
 a79(r153): [234..239] [230..231]
 a80(r154): [232..233]
 a81(r88): [236..241]
 a82(r152): [242..243]
 a83(r86): [246..247]
 a84(r84): [246..253]
 a85(r85): [248..249]
 a86(r151): [250..251]
 a87(r83): [254..255]
 a88(r150): [256..257]
 a89(r82): [256..259]
 a90(r148): [264..269] [260..261]
 a91(r149): [262..263]
 a92(r81): [266..271]
 a93(r147): [272..273]
 a94(r146): [279..280]
 a95(r145): [279..282]
 a96(r144): [285..286]
 a97(r80): [287..288]
 a98(r72): [287..320]
 a99(r79): [289..290]
 a100(r78): [291..292]
 a101(r76): [291..298]
 a102(r77): [293..294]
 a103(r143): [295..296]
 a104(r75): [299..300]
 a105(r142): [301..302]
 a106(r74): [301..304]
 a107(r140): [309..314] [305..306]
 a108(r141): [307..308]
 a109(r73): [311..316]
 a110(r139): [317..318]
 a111(r71): [321..322]
 a112(r70): [323..324]
 a113(r67): [323..332]
 a114(r69): [325..326]
 a115(r68): [327..328]
 a116(r138): [329..330]
 a117(r66): [333..334]
 a118(r137): [335..336]
 a119(r65): [335..338]
 a120(r135): [343..348] [339..340]
 a121(r136): [341..342]
 a122(r64): [345..350]
 a123(r134): [351..352]
Compressing live ranges: from 364 to 200 - 54%
Ranges after the compression:
 a0(r133): [0..1]
 a1(r132): [2..3]
 a2(r182): [4..5]
 a3(r63): [6..7]
 a4(r62): [8..9]
 a5(r61): [10..11]
 a6(r181): [12..13]
 a7(r60): [12..13]
 a8(r179): [18..19] [14..15]
 a9(r180): [16..17]
 a10(r59): [18..19]
 a11(r178): [20..21]
 a12(r113): [22..67]
 a13(r131): [22..23]
 a14(r130): [24..25]
 a15(r122): [24..45]
 a16(r129): [26..27]
 a17(r128): [28..29]
 a18(r126): [28..33]
 a19(r127): [30..31]
 a20(r177): [32..33]
 a21(r125): [34..35]
 a22(r176): [36..37]
 a23(r124): [36..37]
 a24(r174): [42..43] [38..39]
 a25(r175): [40..41]
 a26(r123): [42..43]
 a27(r173): [44..45]
 a28(r121): [46..47]
 a29(r120): [48..49]
 a30(r117): [48..55]
 a31(r119): [50..51]
 a32(r118): [52..53]
 a33(r172): [54..55]
 a34(r116): [56..57]
 a35(r171): [58..59]
 a36(r115): [58..59]
 a37(r169): [64..65] [60..61]
 a38(r170): [62..63]
 a39(r114): [64..65]
 a40(r168): [66..67]
 a41(r112): [68..69]
 a42(r110): [68..73]
 a43(r111): [70..71]
 a44(r167): [72..73]
 a45(r109): [74..75]
 a46(r166): [76..77]
 a47(r108): [76..77]
 a48(r164): [82..83] [78..79]
 a49(r165): [80..81]
 a50(r107): [82..83]
 a51(r163): [84..85]
 a52(r87): [86..133]
 a53(r106): [86..87]
 a54(r162): [88..89]
 a55(r105): [88..89]
 a56(r104): [90..91]
 a57(r96): [90..111]
 a58(r103): [92..93]
 a59(r102): [94..95]
 a60(r100): [94..99]
 a61(r101): [96..97]
 a62(r161): [98..99]
 a63(r99): [100..101]
 a64(r160): [102..103]
 a65(r98): [102..103]
 a66(r158): [108..109] [104..105]
 a67(r159): [106..107]
 a68(r97): [108..109]
 a69(r157): [110..111]
 a70(r95): [112..113]
 a71(r94): [114..115]
 a72(r91): [114..121]
 a73(r93): [116..117]
 a74(r92): [118..119]
 a75(r156): [120..121]
 a76(r90): [122..123]
 a77(r155): [124..125]
 a78(r89): [124..125]
 a79(r153): [130..131] [126..127]
 a80(r154): [128..129]
 a81(r88): [130..131]
 a82(r152): [132..133]
 a83(r86): [134..135]
 a84(r84): [134..139]
 a85(r85): [136..137]
 a86(r151): [138..139]
 a87(r83): [140..141]
 a88(r150): [142..143]
 a89(r82): [142..143]
 a90(r148): [148..149] [144..145]
 a91(r149): [146..147]
 a92(r81): [148..149]
 a93(r147): [150..151]
 a94(r146): [152..153]
 a95(r145): [152..153]
 a96(r144): [154..155]
 a97(r80): [156..157]
 a98(r72): [156..177]
 a99(r79): [158..159]
 a100(r78): [160..161]
 a101(r76): [160..165]
 a102(r77): [162..163]
 a103(r143): [164..165]
 a104(r75): [166..167]
 a105(r142): [168..169]
 a106(r74): [168..169]
 a107(r140): [174..175] [170..171]
 a108(r141): [172..173]
 a109(r73): [174..175]
 a110(r139): [176..177]
 a111(r71): [178..179]
 a112(r70): [180..181]
 a113(r67): [180..187]
 a114(r69): [182..183]
 a115(r68): [184..185]
 a116(r138): [186..187]
 a117(r66): [188..189]
 a118(r137): [190..191]
 a119(r65): [190..191]
 a120(r135): [196..197] [192..193]
 a121(r136): [194..195]
 a122(r64): [196..197]
 a123(r134): [198..199]
  regions=1, blocks=12, points=200
    allocnos=124 (big 0), copies=0, conflicts=0, ranges=133
Disposition:
   10:r59  l0     1    7:r60  l0     1    5:r61  l0     0    4:r62  l0     0
    3:r63  l0     0  122:r64  l0     1  119:r65  l0     1  117:r66  l0     0
  113:r67  l0     0  115:r68  l0     1  114:r69  l0     1  112:r70  l0     1
  111:r71  l0     0   98:r72  l0     9  109:r73  l0     1  106:r74  l0     1
  104:r75  l0     0  101:r76  l0     0  102:r77  l0     1  100:r78  l0     1
   99:r79  l0     0   97:r80  l0     8   92:r81  l0     1   89:r82  l0     1
   87:r83  l0     0   84:r84  l0     0   85:r85  l0     1   83:r86  l0     1
   52:r87  l0     3   81:r88  l0     1   78:r89  l0     1   76:r90  l0     0
   72:r91  l0     0   74:r92  l0     1   73:r93  l0     1   71:r94  l0     1
   70:r95  l0     0   57:r96  l0     2   68:r97  l0     1   65:r98  l0     1
   63:r99  l0     0   60:r100 l0     0   61:r101 l0     1   59:r102 l0     1
   58:r103 l0     0   56:r104 l0     0   55:r105 l0     8   53:r106 l0     8
   50:r107 l0     1   47:r108 l0     1   45:r109 l0     0   42:r110 l0     0
   43:r111 l0     1   41:r112 l0     1   12:r113 l0     3   39:r114 l0     1
   36:r115 l0     1   34:r116 l0     0   30:r117 l0     0   32:r118 l0     1
   31:r119 l0     1   29:r120 l0     1   28:r121 l0     0   15:r122 l0     2
   26:r123 l0     1   23:r124 l0     1   21:r125 l0     0   18:r126 l0     0
   19:r127 l0     1   17:r128 l0     1   16:r129 l0     0   14:r130 l0     0
   13:r131 l0     8    1:r132 l0     0    0:r133 l0     0  123:r134 l0     0
  120:r135 l0     0  121:r136 l0     0  118:r137 l0     0  116:r138 l0     1
  110:r139 l0     0  107:r140 l0     0  108:r141 l0     0  105:r142 l0     0
  103:r143 l0     1   96:r144 l0     8   95:r145 l0     9   94:r146 l0     8
   93:r147 l0     0   90:r148 l0     0   91:r149 l0     0   88:r150 l0     0
   86:r151 l0     1   82:r152 l0     0   79:r153 l0     0   80:r154 l0     0
   77:r155 l0     0   75:r156 l0     1   69:r157 l0     0   66:r158 l0     0
   67:r159 l0     0   64:r160 l0     0   62:r161 l0     1   54:r162 l0     9
   51:r163 l0     0   48:r164 l0     0   49:r165 l0     0   46:r166 l0     0
   44:r167 l0     1   40:r168 l0     0   37:r169 l0     0   38:r170 l0     0
   35:r171 l0     0   33:r172 l0     1   27:r173 l0     0   24:r174 l0     0
   25:r175 l0     0   22:r176 l0     0   20:r177 l0     1   11:r178 l0     0
    8:r179 l0     0    9:r180 l0     0    6:r181 l0     0    2:r182 l0     0
+++Costs: overall -7, reg -7, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_calculate_velocity

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags]
;;  ref usage 	r0={4d,2u} r1={3d} r2={3d} r4={5d,3u} r5={5d,3u} r6={1d,11u} r7={1d,13u} r8={2d,2u} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,10u} r17={63d,3u} r18={2d} r19={2d} r20={1d,51u,9e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={1d,2u,1e} r60={1d,1u,1e} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,2u,1e} r65={1d,1u,1e} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,2u,1e} r74={1d,1u,1e} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,2u,1e} r82={1d,1u,1e} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,2u,1e} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,2u,1e} r98={1d,1u,1e} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,2u,1e} r108={1d,1u,1e} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,2u,1e} r115={1d,1u,1e} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,2u,1e} r124={1d,1u,1e} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={4d,4u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={4d,4u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={4d,4u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={4d,4u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={4d,4u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={4d,4u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={4d,4u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={4d,4u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={4d,4u} r180={1d,1u} r181={1d,1u} r182={1d,1u} 
;;    total ref usage 609{324d,258u,27e} in 177{175 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mQuery.c:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mQuery.c:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 215 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:40 89 {*movsi_internal}
     (nil))
(jump_insn 215 7 216 2 (set (pc)
        (label_ref 192)) mQuery.c:40 650 {jump}
     (nil)
 -> 192)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 216 215 194)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 194 216 10 3 16 "" [1 uses])
(note 10 194 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 217 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:41 89 {*movsi_internal}
     (nil))
(jump_insn 217 11 218 3 (set (pc)
        (label_ref 173)) mQuery.c:41 650 {jump}
     (nil)
 -> 173)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 218 217 187)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 134 135 136 137 138 139 140 141 142 143 144 145 146
(code_label 187 218 14 4 15 "" [1 uses])
(note 14 187 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 134)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 64 [ D.3678 ])
        (sign_extend:DI (reg:SI 134))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 17 16 18 4 (set (reg:DI 135)
        (reg:DI 64 [ D.3678 ])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 135)
                (ashift:DI (reg:DI 135)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 135)
                (plus:DI (reg:DI 135)
                    (reg:DI 64 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 64 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 136)
                (ashift:DI (reg:DI 135)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 135)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 4 (set (reg:DI 135)
        (reg:DI 136)) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 136)
        (nil)))
(insn 22 21 23 4 (set (reg:DI 65 [ D.3678 ])
        (reg:DI 135)) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 135)
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 66 [ D.3679 ])
                (plus:DI (reg:DI 65 [ D.3678 ])
                    (reg/f:DI 137)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 137)
        (expr_list:REG_DEAD (reg:DI 65 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 65 [ D.3678 ]))
                    (nil))))))
(insn 25 24 26 4 (set (reg/f:DI 67 [ D.3681 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 66 [ D.3679 ])
                (const_int 16 [0x10])) [0 _14->time+0 S8 A128])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ D.3679 ])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 138)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 68 [ D.3682 ])
        (sign_extend:DI (reg:SI 138))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 69 [ D.3682 ])
                (plus:DI (reg:DI 68 [ D.3682 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 68 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 70 [ D.3682 ])
                (ashift:DI (reg:DI 69 [ D.3682 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 4 (parallel [
            (set (reg/f:DI 71 [ D.3681 ])
                (plus:DI (reg/f:DI 67 [ D.3681 ])
                    (reg:DI 70 [ D.3682 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.3682 ])
        (expr_list:REG_DEAD (reg/f:DI 67 [ D.3681 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 31 30 32 4 (set (reg:XF 72 [ D.3683 ])
        (mem:XF (reg/f:DI 71 [ D.3681 ]) [0 *_19+0 S16 A128])) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.3681 ])
        (nil)))
(insn 32 31 33 4 (set (reg:SI 139)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 73 [ D.3678 ])
        (sign_extend:DI (reg:SI 139))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 34 33 35 4 (set (reg:DI 140)
        (reg:DI 73 [ D.3678 ])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 140)
                (ashift:DI (reg:DI 140)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 140)
                (plus:DI (reg:DI 140)
                    (reg:DI 73 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 73 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 73 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 141)
                (ashift:DI (reg:DI 140)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 140)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 38 37 39 4 (set (reg:DI 140)
        (reg:DI 141)) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 141)
        (nil)))
(insn 39 38 40 4 (set (reg:DI 74 [ D.3678 ])
        (reg:DI 140)) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 140)
        (nil)))
(insn 40 39 41 4 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 75 [ D.3679 ])
                (plus:DI (reg:DI 74 [ D.3678 ])
                    (reg/f:DI 142)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 142)
        (expr_list:REG_DEAD (reg:DI 74 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 74 [ D.3678 ]))
                    (nil))))))
(insn 42 41 43 4 (set (reg/f:DI 76 [ D.3681 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 75 [ D.3679 ])
                (const_int 16 [0x10])) [0 _23->time+0 S8 A128])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.3679 ])
        (nil)))
(insn 43 42 44 4 (set (reg:SI 143)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 77 [ D.3678 ])
        (sign_extend:DI (reg:SI 143))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 78 [ D.3678 ])
                (ashift:DI (reg:DI 77 [ D.3678 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 79 [ D.3681 ])
                (plus:DI (reg/f:DI 76 [ D.3681 ])
                    (reg:DI 78 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 78 [ D.3678 ])
        (expr_list:REG_DEAD (reg/f:DI 76 [ D.3681 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 47 46 48 4 (set (reg:XF 80 [ D.3683 ])
        (mem:XF (reg/f:DI 79 [ D.3681 ]) [0 *_27+0 S16 A128])) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.3681 ])
        (nil)))
(insn 48 47 49 4 (set (reg:XF 144)
        (minus:XF (reg:XF 72 [ D.3683 ])
            (reg:XF 80 [ D.3683 ]))) mQuery.c:42 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 80 [ D.3683 ])
        (expr_list:REG_DEAD (reg:XF 72 [ D.3683 ])
            (nil))))
(insn 49 48 50 4 (set (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 t+0 S16 A128])
        (reg:XF 144)) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 144)
        (nil)))
(insn 50 49 51 4 (set (reg:XF 145)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 t+0 S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 4 (set (reg:XF 146)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0000000000000000208166817117216851329430937767028809e-3 [0x0.83126e978d4fep-9])
        (nil)))
(insn 52 51 53 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 145)
            (reg:XF 146))) mQuery.c:43 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 146)
        (expr_list:REG_DEAD (reg:XF 145)
            (nil))))
(jump_insn 53 52 57 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 219)
            (pc))) mQuery.c:43 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 219)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
(note 57 53 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:SI 147)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:DI 81 [ D.3678 ])
        (sign_extend:DI (reg:SI 147))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 60 59 61 5 (set (reg:DI 148)
        (reg:DI 81 [ D.3678 ])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 5 (parallel [
            (set (reg:DI 148)
                (ashift:DI (reg:DI 148)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 62 61 63 5 (parallel [
            (set (reg:DI 148)
                (plus:DI (reg:DI 148)
                    (reg:DI 81 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 81 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 149)
                (ashift:DI (reg:DI 148)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 148)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 5 (set (reg:DI 148)
        (reg:DI 149)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 149)
        (nil)))
(insn 65 64 66 5 (set (reg:DI 82 [ D.3678 ])
        (reg:DI 148)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 148)
        (nil)))
(insn 66 65 67 5 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg/f:DI 83 [ D.3679 ])
                (plus:DI (reg:DI 82 [ D.3678 ])
                    (reg/f:DI 150)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (expr_list:REG_DEAD (reg:DI 82 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 82 [ D.3678 ]))
                    (nil))))))
(insn 68 67 69 5 (set (reg/f:DI 84 [ D.3681 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 83 [ D.3679 ])
                (const_int 24 [0x18])) [0 _32->vel+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 83 [ D.3679 ])
        (nil)))
(insn 69 68 70 5 (set (reg:SI 151)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:DI 85 [ D.3678 ])
        (sign_extend:DI (reg:SI 151))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 71 70 72 5 (parallel [
            (set (reg:DI 86 [ D.3678 ])
                (ashift:DI (reg:DI 85 [ D.3678 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 85 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 72 71 73 5 (parallel [
            (set (reg/f:DI 87 [ D.3681 ])
                (plus:DI (reg/f:DI 84 [ D.3681 ])
                    (reg:DI 86 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ D.3678 ])
        (expr_list:REG_DEAD (reg/f:DI 84 [ D.3681 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 73 72 74 5 (set (reg:SI 152)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:DI 88 [ D.3678 ])
        (sign_extend:DI (reg:SI 152))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 75 74 76 5 (set (reg:DI 153)
        (reg:DI 88 [ D.3678 ])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 153)
                (ashift:DI (reg:DI 153)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 153)
                (plus:DI (reg:DI 153)
                    (reg:DI 88 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 88 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 78 77 79 5 (parallel [
            (set (reg:DI 154)
                (ashift:DI (reg:DI 153)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 153)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 80 5 (set (reg:DI 153)
        (reg:DI 154)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 154)
        (nil)))
(insn 80 79 81 5 (set (reg:DI 89 [ D.3678 ])
        (reg:DI 153)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 153)
        (nil)))
(insn 81 80 82 5 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg/f:DI 90 [ D.3679 ])
                (plus:DI (reg:DI 89 [ D.3678 ])
                    (reg/f:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (expr_list:REG_DEAD (reg:DI 89 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 89 [ D.3678 ]))
                    (nil))))))
(insn 83 82 84 5 (set (reg/f:DI 91 [ D.3684 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 90 [ D.3679 ])
                (const_int 8 [0x8])) [0 _39->nvp+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 90 [ D.3679 ])
        (nil)))
(insn 84 83 85 5 (set (reg:SI 156)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:DI 92 [ D.3682 ])
        (sign_extend:DI (reg:SI 156))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 156)
        (nil)))
(insn 86 85 87 5 (parallel [
            (set (reg:DI 93 [ D.3682 ])
                (plus:DI (reg:DI 92 [ D.3682 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 92 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 5 (parallel [
            (set (reg:DI 94 [ D.3682 ])
                (ashift:DI (reg:DI 93 [ D.3682 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 88 87 89 5 (parallel [
            (set (reg/f:DI 95 [ D.3684 ])
                (plus:DI (reg/f:DI 91 [ D.3684 ])
                    (reg:DI 94 [ D.3682 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ D.3682 ])
        (expr_list:REG_DEAD (reg/f:DI 91 [ D.3684 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 89 88 90 5 (set (reg/f:DI 96 [ D.3681 ])
        (mem/f:DI (reg/f:DI 95 [ D.3684 ]) [0 *_44+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 95 [ D.3684 ])
        (nil)))
(insn 90 89 91 5 (set (reg:SI 157)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 91 90 92 5 (set (reg:DI 97 [ D.3678 ])
        (sign_extend:DI (reg:SI 157))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 157)
        (nil)))
(insn 92 91 93 5 (set (reg:DI 158)
        (reg:DI 97 [ D.3678 ])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg:DI 158)
                (ashift:DI (reg:DI 158)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 94 93 95 5 (parallel [
            (set (reg:DI 158)
                (plus:DI (reg:DI 158)
                    (reg:DI 97 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 97 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 97 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 95 94 96 5 (parallel [
            (set (reg:DI 159)
                (ashift:DI (reg:DI 158)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 158)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 96 95 97 5 (set (reg:DI 158)
        (reg:DI 159)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 159)
        (nil)))
(insn 97 96 98 5 (set (reg:DI 98 [ D.3678 ])
        (reg:DI 158)) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 158)
        (nil)))
(insn 98 97 99 5 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 5 (parallel [
            (set (reg/f:DI 99 [ D.3679 ])
                (plus:DI (reg:DI 98 [ D.3678 ])
                    (reg/f:DI 160)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (expr_list:REG_DEAD (reg:DI 98 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 98 [ D.3678 ]))
                    (nil))))))
(insn 100 99 101 5 (set (reg/f:DI 100 [ D.3684 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 99 [ D.3679 ])
                (const_int 8 [0x8])) [0 _48->nvp+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 99 [ D.3679 ])
        (nil)))
(insn 101 100 102 5 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 102 101 103 5 (set (reg:DI 101 [ D.3678 ])
        (sign_extend:DI (reg:SI 161))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 103 102 104 5 (parallel [
            (set (reg:DI 102 [ D.3678 ])
                (ashift:DI (reg:DI 101 [ D.3678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 5 (parallel [
            (set (reg/f:DI 103 [ D.3684 ])
                (plus:DI (reg/f:DI 100 [ D.3684 ])
                    (reg:DI 102 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ D.3678 ])
        (expr_list:REG_DEAD (reg/f:DI 100 [ D.3684 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 105 104 106 5 (set (reg/f:DI 104 [ D.3681 ])
        (mem/f:DI (reg/f:DI 103 [ D.3684 ]) [0 *_52+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 103 [ D.3684 ])
        (nil)))
(insn 106 105 107 5 (set (reg:DI 4 si)
        (reg/f:DI 96 [ D.3681 ])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.3681 ])
        (nil)))
(insn 107 106 108 5 (set (reg:DI 5 di)
        (reg/f:DI 104 [ D.3681 ])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 104 [ D.3681 ])
        (nil)))
(call_insn 108 107 109 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f87349e8a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mQuery.c:43 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 109 108 110 5 (set (reg:XF 105 [ D.3683 ])
        (reg:XF 8 st)) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 110 109 111 5 (set (reg:XF 162)
        (mem/c:XF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 t+0 S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 111 110 112 5 (set (reg:XF 106 [ D.3683 ])
        (div:XF (reg:XF 105 [ D.3683 ])
            (reg:XF 162))) mQuery.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 162)
        (expr_list:REG_DEAD (reg:XF 105 [ D.3683 ])
            (nil))))
(insn 112 111 220 5 (set (mem:XF (reg/f:DI 87 [ D.3681 ]) [0 *_36+0 S16 A128])
        (reg:XF 106 [ D.3683 ])) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 106 [ D.3683 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ D.3681 ])
            (nil))))
(jump_insn 220 112 221 5 (set (pc)
        (label_ref 170)) 650 {jump}
     (nil)
 -> 170)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 221 220 219)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 219 221 116 6 19 "" [1 uses])
(note 116 219 117 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 6 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 118 117 119 6 (set (reg:DI 107 [ D.3678 ])
        (sign_extend:DI (reg:SI 163))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 163)
        (nil)))
(insn 119 118 120 6 (set (reg:DI 164)
        (reg:DI 107 [ D.3678 ])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 6 (parallel [
            (set (reg:DI 164)
                (ashift:DI (reg:DI 164)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 121 120 122 6 (parallel [
            (set (reg:DI 164)
                (plus:DI (reg:DI 164)
                    (reg:DI 107 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 107 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 122 121 123 6 (parallel [
            (set (reg:DI 165)
                (ashift:DI (reg:DI 164)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 164)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 123 122 124 6 (set (reg:DI 164)
        (reg:DI 165)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 165)
        (nil)))
(insn 124 123 125 6 (set (reg:DI 108 [ D.3678 ])
        (reg:DI 164)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 164)
        (nil)))
(insn 125 124 126 6 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 6 (parallel [
            (set (reg/f:DI 109 [ D.3679 ])
                (plus:DI (reg:DI 108 [ D.3678 ])
                    (reg/f:DI 166)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (expr_list:REG_DEAD (reg:DI 108 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 108 [ D.3678 ]))
                    (nil))))))
(insn 127 126 128 6 (set (reg/f:DI 110 [ D.3681 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 109 [ D.3679 ])
                (const_int 24 [0x18])) [0 _58->vel+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.3679 ])
        (nil)))
(insn 128 127 129 6 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 129 128 130 6 (set (reg:DI 111 [ D.3678 ])
        (sign_extend:DI (reg:SI 167))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 167)
        (nil)))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 112 [ D.3678 ])
                (ashift:DI (reg:DI 111 [ D.3678 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 131 130 132 6 (parallel [
            (set (reg/f:DI 113 [ D.3681 ])
                (plus:DI (reg/f:DI 110 [ D.3681 ])
                    (reg:DI 112 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ D.3678 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ D.3681 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 132 131 133 6 (set (reg:SI 168)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 133 132 134 6 (set (reg:DI 114 [ D.3678 ])
        (sign_extend:DI (reg:SI 168))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(insn 134 133 135 6 (set (reg:DI 169)
        (reg:DI 114 [ D.3678 ])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 135 134 136 6 (parallel [
            (set (reg:DI 169)
                (ashift:DI (reg:DI 169)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 169)
                (plus:DI (reg:DI 169)
                    (reg:DI 114 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 114 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 137 136 138 6 (parallel [
            (set (reg:DI 170)
                (ashift:DI (reg:DI 169)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 169)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 138 137 139 6 (set (reg:DI 169)
        (reg:DI 170)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
(insn 139 138 140 6 (set (reg:DI 115 [ D.3678 ])
        (reg:DI 169)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 169)
        (nil)))
(insn 140 139 141 6 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 6 (parallel [
            (set (reg/f:DI 116 [ D.3679 ])
                (plus:DI (reg:DI 115 [ D.3678 ])
                    (reg/f:DI 171)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (expr_list:REG_DEAD (reg:DI 115 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 115 [ D.3678 ]))
                    (nil))))))
(insn 142 141 143 6 (set (reg/f:DI 117 [ D.3684 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 116 [ D.3679 ])
                (const_int 8 [0x8])) [0 _65->nvp+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 116 [ D.3679 ])
        (nil)))
(insn 143 142 144 6 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 144 143 145 6 (set (reg:DI 118 [ D.3682 ])
        (sign_extend:DI (reg:SI 172))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 145 144 146 6 (parallel [
            (set (reg:DI 119 [ D.3682 ])
                (plus:DI (reg:DI 118 [ D.3682 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 146 145 147 6 (parallel [
            (set (reg:DI 120 [ D.3682 ])
                (ashift:DI (reg:DI 119 [ D.3682 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 119 [ D.3682 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 6 (parallel [
            (set (reg/f:DI 121 [ D.3684 ])
                (plus:DI (reg/f:DI 117 [ D.3684 ])
                    (reg:DI 120 [ D.3682 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 120 [ D.3682 ])
        (expr_list:REG_DEAD (reg/f:DI 117 [ D.3684 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 148 147 149 6 (set (reg/f:DI 122 [ D.3681 ])
        (mem/f:DI (reg/f:DI 121 [ D.3684 ]) [0 *_70+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 121 [ D.3684 ])
        (nil)))
(insn 149 148 150 6 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 150 149 151 6 (set (reg:DI 123 [ D.3678 ])
        (sign_extend:DI (reg:SI 173))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 151 150 152 6 (set (reg:DI 174)
        (reg:DI 123 [ D.3678 ])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 152 151 153 6 (parallel [
            (set (reg:DI 174)
                (ashift:DI (reg:DI 174)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 174)
                (plus:DI (reg:DI 174)
                    (reg:DI 123 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 123 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 123 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 154 153 155 6 (parallel [
            (set (reg:DI 175)
                (ashift:DI (reg:DI 174)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 155 154 156 6 (set (reg:DI 174)
        (reg:DI 175)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 175)
        (nil)))
(insn 156 155 157 6 (set (reg:DI 124 [ D.3678 ])
        (reg:DI 174)) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 174)
        (nil)))
(insn 157 156 158 6 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 158 157 159 6 (parallel [
            (set (reg/f:DI 125 [ D.3679 ])
                (plus:DI (reg:DI 124 [ D.3678 ])
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (expr_list:REG_DEAD (reg:DI 124 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 124 [ D.3678 ]))
                    (nil))))))
(insn 159 158 160 6 (set (reg/f:DI 126 [ D.3684 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 125 [ D.3679 ])
                (const_int 8 [0x8])) [0 _74->nvp+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 125 [ D.3679 ])
        (nil)))
(insn 160 159 161 6 (set (reg:SI 177)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 161 160 162 6 (set (reg:DI 127 [ D.3678 ])
        (sign_extend:DI (reg:SI 177))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
(insn 162 161 163 6 (parallel [
            (set (reg:DI 128 [ D.3678 ])
                (ashift:DI (reg:DI 127 [ D.3678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 127 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 163 162 164 6 (parallel [
            (set (reg/f:DI 129 [ D.3684 ])
                (plus:DI (reg/f:DI 126 [ D.3684 ])
                    (reg:DI 128 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 128 [ D.3678 ])
        (expr_list:REG_DEAD (reg/f:DI 126 [ D.3684 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 164 163 165 6 (set (reg/f:DI 130 [ D.3681 ])
        (mem/f:DI (reg/f:DI 129 [ D.3684 ]) [0 *_78+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 129 [ D.3684 ])
        (nil)))
(insn 165 164 166 6 (set (reg:DI 4 si)
        (reg/f:DI 122 [ D.3681 ])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 122 [ D.3681 ])
        (nil)))
(insn 166 165 167 6 (set (reg:DI 5 di)
        (reg/f:DI 130 [ D.3681 ])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 130 [ D.3681 ])
        (nil)))
(call_insn 167 166 168 6 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f87349e8a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mQuery.c:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 168 167 169 6 (set (reg:XF 131 [ D.3683 ])
        (reg:XF 8 st)) mQuery.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 169 168 170 6 (set (mem:XF (reg/f:DI 113 [ D.3681 ]) [0 *_62+0 S16 A128])
        (reg:XF 131 [ D.3683 ])) mQuery.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 131 [ D.3683 ])
        (expr_list:REG_DEAD (reg/f:DI 113 [ D.3681 ])
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 170 169 171 7 14 "" [1 uses])
(note 171 170 172 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 178 179 180 181
(code_label 173 172 174 8 11 "" [1 uses])
(note 174 173 175 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 8 (set (reg:SI 178)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:41 89 {*movsi_internal}
     (nil))
(insn 176 175 177 8 (set (reg:DI 59 [ D.3678 ])
        (sign_extend:DI (reg:SI 178))) mQuery.c:41 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(insn 177 176 178 8 (set (reg:DI 179)
        (reg:DI 59 [ D.3678 ])) mQuery.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 8 (parallel [
            (set (reg:DI 179)
                (ashift:DI (reg:DI 179)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 179 178 180 8 (parallel [
            (set (reg:DI 179)
                (plus:DI (reg:DI 179)
                    (reg:DI 59 [ D.3678 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 59 [ D.3678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 59 [ D.3678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 180 179 181 8 (parallel [
            (set (reg:DI 180)
                (ashift:DI (reg:DI 179)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 179)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 181 180 182 8 (set (reg:DI 179)
        (reg:DI 180)) mQuery.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(insn 182 181 183 8 (set (reg:DI 60 [ D.3678 ])
        (reg:DI 179)) mQuery.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 179)
        (nil)))
(insn 183 182 184 8 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])) mQuery.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 184 183 185 8 (parallel [
            (set (reg/f:DI 61 [ D.3679 ])
                (plus:DI (reg:DI 60 [ D.3678 ])
                    (reg/f:DI 181)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (expr_list:REG_DEAD (reg:DI 60 [ D.3678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                        (reg:DI 60 [ D.3678 ]))
                    (nil))))))
(insn 185 184 186 8 (set (reg:SI 62 [ D.3680 ])
        (mem/j:SI (plus:DI (reg/f:DI 61 [ D.3679 ])
                (const_int 4 [0x4])) [0 _9->n_nvp+0 S4 A32])) mQuery.c:41 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.3679 ])
        (nil)))
(insn 186 185 188 8 (parallel [
            (set (reg:SI 63 [ D.3680 ])
                (plus:SI (reg:SI 62 [ D.3680 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 62 [ D.3680 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 188 186 189 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 63 [ D.3680 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 j+0 S4 A32]))) mQuery.c:41 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 63 [ D.3680 ])
        (nil)))
(jump_insn 189 188 190 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) mQuery.c:41 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 187)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 190 189 191 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:40 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182
(code_label 192 191 193 10 10 "" [1 uses])
(note 193 192 195 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 195 193 196 10 (set (reg:SI 182)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) mQuery.c:40 89 {*movsi_internal}
     (nil))
(insn 196 195 197 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 182)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 Nflight+0 S4 A32]))) mQuery.c:40 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 182)
        (nil)))
(jump_insn 197 196 198 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) mQuery.c:40 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 194)
;;  succ:       3
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 132 133
(note 198 197 199 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 202 11 (set (reg:SI 132 [ D.3680 ])
        (const_int 1 [0x1])) mQuery.c:47 89 {*movsi_internal}
     (nil))
(insn 202 199 206 11 (set (reg:SI 133 [ <retval> ])
        (reg:SI 132 [ D.3680 ])) mQuery.c:47 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 132 [ D.3680 ])
        (nil)))
(insn 206 202 209 11 (set (reg/i:SI 0 ax)
        (reg:SI 133 [ <retval> ])) mQuery.c:48 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 133 [ <retval> ])
        (nil)))
(insn 209 206 0 11 (use (reg/i:SI 0 ax)) mQuery.c:48 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_M1 (get_M1, funcdef_no=4, decl_uid=1760, cgraph_uid=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 52 n_edges 75 count 52 (    1)
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 194.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 268.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 333.
verify found no changes in insn with uid = 371.
verify found no changes in insn with uid = 398.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 486.
verify found no changes in insn with uid = 521.
verify found no changes in insn with uid = 534.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r308: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r308,l0) best SIREG, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a225 (r198,l0) best DIREG, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a229 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a231 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a232 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a234 (r193,l0) best DIREG, allocno GENERAL_REGS
    r192: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a235 (r192,l0) best DREG, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a236 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a238 (r190,l0) best AREG, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a243 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a244 (r186,l0) best AREG, allocno GENERAL_REGS
    r185: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a245 (r185,l0) best DIREG, allocno GENERAL_REGS
    r184: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a246 (r184,l0) best DIREG, allocno GENERAL_REGS
    r183: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a247 (r183,l0) best DREG, allocno GENERAL_REGS
    r182: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a248 (r182,l0) best AREG, allocno GENERAL_REGS
    r181: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a249 (r181,l0) best DIREG, allocno GENERAL_REGS
    r180: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r180,l0) best AREG, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r178,l0) best DIREG, allocno GENERAL_REGS
    r177: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a16 (r177,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r176: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r176,l0) best DIREG, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a52 (r161,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r160: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a53 (r160,l0) best NO_REGS, allocno NO_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a54 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a85 (r144,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r143: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a86 (r143,l0) best NO_REGS, allocno NO_REGS
    r142: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a87 (r142,l0) best DIREG, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a118 (r127,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r126: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a119 (r126,l0) best NO_REGS, allocno NO_REGS
    r125: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r125,l0) best DIREG, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a153 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a154 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a172 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a173 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a190 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a191 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a208 (r74,l0) best AREG, allocno GENERAL_REGS
    r73: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a209 (r73,l0) best DIREG, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a224 (r67,l0) best AREG, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a233 (r62,l0) best AREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a239 (r60,l0) best DIREG, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r180,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a5(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a6(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a7(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a11(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a12(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a13(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a15(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r177,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a17(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a18(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a22(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a29(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a30(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a31(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a33(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a35(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a37(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a38(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a41(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a43(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a44(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a46(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a47(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a50(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r161,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a53(r160,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a54(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a55(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a56(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a58(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a59(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a60(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a61(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a63(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a66(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a67(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a68(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a69(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a70(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a71(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a72(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a73(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a74(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a75(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a76(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a77(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a78(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a79(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a80(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a81(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a82(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a83(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a84(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a85(r144,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a86(r143,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a87(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a88(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a89(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a90(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a91(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a92(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a93(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a94(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a95(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a96(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a97(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a98(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a99(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a100(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a101(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a102(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a103(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a104(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a105(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a106(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a107(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a108(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a109(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a110(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a111(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a112(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a113(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a114(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a115(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a116(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a117(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a118(r127,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a119(r126,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a120(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a121(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a122(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a123(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a124(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a125(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a126(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a127(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a128(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a129(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a130(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a131(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a132(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a133(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a134(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a135(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a136(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a137(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a138(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a139(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a140(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a141(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a142(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a143(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a144(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a145(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a146(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a147(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a148(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a149(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a150(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a151(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a152(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a153(r105,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a154(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a155(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a156(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a157(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a158(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a159(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a160(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a161(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a162(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a163(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a164(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a165(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a166(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a167(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a168(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a169(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a170(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a171(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a172(r94,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a173(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a174(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a175(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a176(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a177(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a178(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a179(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a180(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a181(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a182(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a183(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a184(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a185(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a186(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a187(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a188(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a189(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a190(r84,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a191(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a192(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a193(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a194(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a195(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a196(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a197(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a198(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a199(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a200(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a201(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a202(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a203(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a204(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a205(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a206(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a207(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a208(r74,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a209(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a210(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a211(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a212(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a213(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a214(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a215(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a216(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a217(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a218(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a219(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a220(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a221(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a222(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a223(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a224(r67,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a225(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a226(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a227(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a228(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a229(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a230(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a231(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a232(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a233(r62,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a234(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a235(r192,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a236(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a237(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a238(r190,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a239(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a240(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:104 SSE_REGS:104 MMX_REGS:104 FP_TOP_SSE_REGS:524280 FP_SECOND_SSE_REGS:524280 FLOAT_SSE_REGS:524280 FLOAT_INT_REGS:524280 INT_SSE_REGS:104 FLOAT_INT_SSE_REGS:524280 ALL_REGS:524280 MEM:26
  a241(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a242(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:10
  a243(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a244(r186,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a245(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a246(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a247(r183,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a248(r182,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a249(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 537(l0): point = 0
   Insn 534(l0): point = 3
   Insn 533(l0): point = 6
   Insn 532(l0): point = 8
   Insn 529(l0): point = 10
   Insn 525(l0): point = 12
   Insn 522(l0): point = 14
   Insn 521(l0): point = 16
   Insn 520(l0): point = 18
   Insn 519(l0): point = 20
   Insn 518(l0): point = 22
   Insn 517(l0): point = 24
   Insn 516(l0): point = 26
   Insn 58(l0): point = 29
   Insn 57(l0): point = 31
   Insn 56(l0): point = 33
   Insn 55(l0): point = 35
   Insn 54(l0): point = 37
   Insn 53(l0): point = 39
   Insn 52(l0): point = 41
   Insn 51(l0): point = 43
   Insn 50(l0): point = 45
   Insn 514(l0): point = 48
   Insn 513(l0): point = 50
   Insn 512(l0): point = 52
   Insn 508(l0): point = 55
   Insn 506(l0): point = 58
   Insn 505(l0): point = 60
   Insn 503(l0): point = 62
   Insn 502(l0): point = 64
   Insn 501(l0): point = 66
   Insn 500(l0): point = 68
   Insn 499(l0): point = 70
   Insn 498(l0): point = 72
   Insn 497(l0): point = 74
   Insn 496(l0): point = 76
   Insn 495(l0): point = 78
   Insn 494(l0): point = 80
   Insn 493(l0): point = 82
   Insn 492(l0): point = 84
   Insn 489(l0): point = 87
   Insn 488(l0): point = 89
   Insn 487(l0): point = 91
   Insn 486(l0): point = 93
   Insn 485(l0): point = 95
   Insn 484(l0): point = 97
   Insn 483(l0): point = 99
   Insn 482(l0): point = 101
   Insn 481(l0): point = 103
   Insn 480(l0): point = 105
   Insn 479(l0): point = 107
   Insn 478(l0): point = 109
   Insn 477(l0): point = 111
   Insn 476(l0): point = 113
   Insn 475(l0): point = 115
   Insn 474(l0): point = 117
   Insn 473(l0): point = 119
   Insn 472(l0): point = 121
   Insn 471(l0): point = 123
   Insn 470(l0): point = 125
   Insn 469(l0): point = 127
   Insn 468(l0): point = 129
   Insn 467(l0): point = 131
   Insn 466(l0): point = 133
   Insn 465(l0): point = 135
   Insn 464(l0): point = 137
   Insn 458(l0): point = 140
   Insn 457(l0): point = 142
   Insn 456(l0): point = 144
   Insn 455(l0): point = 146
   Insn 454(l0): point = 148
   Insn 444(l0): point = 151
   Insn 443(l0): point = 153
   Insn 442(l0): point = 155
   Insn 441(l0): point = 157
   Insn 440(l0): point = 159
   Insn 437(l0): point = 162
   Insn 556(l0): point = 165
   Insn 433(l0): point = 167
   Insn 427(l0): point = 170
   Insn 426(l0): point = 172
   Insn 425(l0): point = 174
   Insn 424(l0): point = 176
   Insn 423(l0): point = 178
   Insn 413(l0): point = 181
   Insn 412(l0): point = 183
   Insn 411(l0): point = 185
   Insn 410(l0): point = 187
   Insn 409(l0): point = 189
   Insn 406(l0): point = 192
   Insn 554(l0): point = 195
   Insn 402(l0): point = 197
   Insn 401(l0): point = 199
   Insn 400(l0): point = 201
   Insn 399(l0): point = 203
   Insn 398(l0): point = 205
   Insn 397(l0): point = 207
   Insn 396(l0): point = 209
   Insn 395(l0): point = 211
   Insn 394(l0): point = 213
   Insn 393(l0): point = 215
   Insn 392(l0): point = 217
   Insn 391(l0): point = 219
   Insn 390(l0): point = 221
   Insn 389(l0): point = 223
   Insn 388(l0): point = 225
   Insn 387(l0): point = 227
   Insn 386(l0): point = 229
   Insn 385(l0): point = 231
   Insn 384(l0): point = 233
   Insn 383(l0): point = 235
   Insn 382(l0): point = 237
   Insn 381(l0): point = 239
   Insn 380(l0): point = 241
   Insn 379(l0): point = 243
   Insn 378(l0): point = 245
   Insn 377(l0): point = 247
   Insn 376(l0): point = 249
   Insn 375(l0): point = 251
   Insn 374(l0): point = 253
   Insn 368(l0): point = 256
   Insn 367(l0): point = 258
   Insn 366(l0): point = 260
   Insn 365(l0): point = 262
   Insn 364(l0): point = 264
   Insn 348(l0): point = 267
   Insn 347(l0): point = 269
   Insn 346(l0): point = 271
   Insn 345(l0): point = 273
   Insn 344(l0): point = 275
   Insn 341(l0): point = 278
   Insn 552(l0): point = 281
   Insn 337(l0): point = 283
   Insn 336(l0): point = 285
   Insn 335(l0): point = 287
   Insn 334(l0): point = 289
   Insn 333(l0): point = 291
   Insn 332(l0): point = 293
   Insn 331(l0): point = 295
   Insn 330(l0): point = 297
   Insn 329(l0): point = 299
   Insn 328(l0): point = 301
   Insn 327(l0): point = 303
   Insn 326(l0): point = 305
   Insn 325(l0): point = 307
   Insn 324(l0): point = 309
   Insn 323(l0): point = 311
   Insn 322(l0): point = 313
   Insn 321(l0): point = 315
   Insn 320(l0): point = 317
   Insn 319(l0): point = 319
   Insn 318(l0): point = 321
   Insn 317(l0): point = 323
   Insn 316(l0): point = 325
   Insn 315(l0): point = 327
   Insn 314(l0): point = 329
   Insn 313(l0): point = 331
   Insn 312(l0): point = 333
   Insn 311(l0): point = 335
   Insn 310(l0): point = 337
   Insn 309(l0): point = 339
   Insn 303(l0): point = 342
   Insn 302(l0): point = 344
   Insn 301(l0): point = 346
   Insn 300(l0): point = 348
   Insn 299(l0): point = 350
   Insn 283(l0): point = 353
   Insn 282(l0): point = 355
   Insn 281(l0): point = 357
   Insn 280(l0): point = 359
   Insn 279(l0): point = 361
   Insn 276(l0): point = 364
   Insn 550(l0): point = 367
   Insn 272(l0): point = 369
   Insn 271(l0): point = 371
   Insn 270(l0): point = 373
   Insn 269(l0): point = 375
   Insn 268(l0): point = 377
   Insn 267(l0): point = 379
   Insn 266(l0): point = 381
   Insn 265(l0): point = 383
   Insn 264(l0): point = 385
   Insn 263(l0): point = 387
   Insn 262(l0): point = 389
   Insn 261(l0): point = 391
   Insn 260(l0): point = 393
   Insn 259(l0): point = 395
   Insn 258(l0): point = 397
   Insn 257(l0): point = 399
   Insn 256(l0): point = 401
   Insn 255(l0): point = 403
   Insn 254(l0): point = 405
   Insn 253(l0): point = 407
   Insn 252(l0): point = 409
   Insn 251(l0): point = 411
   Insn 250(l0): point = 413
   Insn 249(l0): point = 415
   Insn 248(l0): point = 417
   Insn 247(l0): point = 419
   Insn 246(l0): point = 421
   Insn 245(l0): point = 423
   Insn 238(l0): point = 426
   Insn 237(l0): point = 428
   Insn 236(l0): point = 430
   Insn 235(l0): point = 432
   Insn 234(l0): point = 434
   Insn 242(l0): point = 437
   Insn 241(l0): point = 439
   Insn 232(l0): point = 442
   Insn 231(l0): point = 444
   Insn 230(l0): point = 446
   Insn 229(l0): point = 448
   Insn 228(l0): point = 450
   Insn 212(l0): point = 453
   Insn 211(l0): point = 455
   Insn 210(l0): point = 457
   Insn 209(l0): point = 459
   Insn 208(l0): point = 461
   Insn 205(l0): point = 464
   Insn 548(l0): point = 467
   Insn 201(l0): point = 469
   Insn 218(l0): point = 472
   Insn 217(l0): point = 474
   Insn 216(l0): point = 476
   Insn 215(l0): point = 478
   Insn 214(l0): point = 480
   Insn 225(l0): point = 483
   Insn 224(l0): point = 485
   Insn 222(l0): point = 487
   Insn 221(l0): point = 489
   Insn 220(l0): point = 491
   Insn 289(l0): point = 494
   Insn 288(l0): point = 496
   Insn 287(l0): point = 498
   Insn 286(l0): point = 500
   Insn 285(l0): point = 502
   Insn 296(l0): point = 505
   Insn 295(l0): point = 507
   Insn 293(l0): point = 509
   Insn 292(l0): point = 511
   Insn 291(l0): point = 513
   Insn 306(l0): point = 516
   Insn 305(l0): point = 518
   Insn 354(l0): point = 521
   Insn 353(l0): point = 523
   Insn 352(l0): point = 525
   Insn 351(l0): point = 527
   Insn 350(l0): point = 529
   Insn 361(l0): point = 532
   Insn 360(l0): point = 534
   Insn 358(l0): point = 536
   Insn 357(l0): point = 538
   Insn 356(l0): point = 540
   Insn 371(l0): point = 543
   Insn 370(l0): point = 545
   Insn 420(l0): point = 548
   Insn 419(l0): point = 550
   Insn 417(l0): point = 552
   Insn 416(l0): point = 554
   Insn 415(l0): point = 556
   Insn 430(l0): point = 559
   Insn 429(l0): point = 561
   Insn 451(l0): point = 564
   Insn 450(l0): point = 566
   Insn 448(l0): point = 568
   Insn 447(l0): point = 570
   Insn 446(l0): point = 572
   Insn 461(l0): point = 575
   Insn 460(l0): point = 577
   Insn 546(l0): point = 580
   Insn 197(l0): point = 582
   Insn 196(l0): point = 584
   Insn 195(l0): point = 586
   Insn 194(l0): point = 588
   Insn 193(l0): point = 590
   Insn 192(l0): point = 592
   Insn 191(l0): point = 594
   Insn 190(l0): point = 596
   Insn 189(l0): point = 598
   Insn 188(l0): point = 600
   Insn 187(l0): point = 602
   Insn 186(l0): point = 604
   Insn 185(l0): point = 606
   Insn 184(l0): point = 608
   Insn 183(l0): point = 610
   Insn 182(l0): point = 612
   Insn 181(l0): point = 614
   Insn 180(l0): point = 616
   Insn 179(l0): point = 618
   Insn 178(l0): point = 620
   Insn 177(l0): point = 622
   Insn 176(l0): point = 624
   Insn 175(l0): point = 626
   Insn 174(l0): point = 628
   Insn 173(l0): point = 630
   Insn 172(l0): point = 632
   Insn 171(l0): point = 634
   Insn 170(l0): point = 636
   Insn 169(l0): point = 638
   Insn 168(l0): point = 640
   Insn 167(l0): point = 642
   Insn 166(l0): point = 644
   Insn 165(l0): point = 646
   Insn 164(l0): point = 648
   Insn 163(l0): point = 650
   Insn 162(l0): point = 652
   Insn 161(l0): point = 654
   Insn 160(l0): point = 656
   Insn 159(l0): point = 658
   Insn 158(l0): point = 660
   Insn 157(l0): point = 662
   Insn 156(l0): point = 664
   Insn 155(l0): point = 666
   Insn 154(l0): point = 668
   Insn 153(l0): point = 670
   Insn 152(l0): point = 672
   Insn 151(l0): point = 674
   Insn 150(l0): point = 676
   Insn 149(l0): point = 678
   Insn 148(l0): point = 680
   Insn 147(l0): point = 682
   Insn 146(l0): point = 684
   Insn 145(l0): point = 686
   Insn 144(l0): point = 688
   Insn 143(l0): point = 690
   Insn 142(l0): point = 692
   Insn 141(l0): point = 694
   Insn 140(l0): point = 696
   Insn 139(l0): point = 698
   Insn 138(l0): point = 700
   Insn 137(l0): point = 702
   Insn 136(l0): point = 704
   Insn 135(l0): point = 706
   Insn 134(l0): point = 708
   Insn 133(l0): point = 710
   Insn 132(l0): point = 712
   Insn 131(l0): point = 714
   Insn 130(l0): point = 716
   Insn 129(l0): point = 718
   Insn 128(l0): point = 720
   Insn 127(l0): point = 722
   Insn 126(l0): point = 724
   Insn 125(l0): point = 726
   Insn 124(l0): point = 728
   Insn 123(l0): point = 730
   Insn 122(l0): point = 732
   Insn 121(l0): point = 734
   Insn 120(l0): point = 736
   Insn 119(l0): point = 738
   Insn 118(l0): point = 740
   Insn 117(l0): point = 742
   Insn 116(l0): point = 744
   Insn 115(l0): point = 746
   Insn 114(l0): point = 748
   Insn 113(l0): point = 750
   Insn 112(l0): point = 752
   Insn 111(l0): point = 754
   Insn 110(l0): point = 756
   Insn 109(l0): point = 758
   Insn 108(l0): point = 760
   Insn 107(l0): point = 762
   Insn 106(l0): point = 764
   Insn 105(l0): point = 766
   Insn 104(l0): point = 768
   Insn 103(l0): point = 770
   Insn 102(l0): point = 772
   Insn 101(l0): point = 774
   Insn 100(l0): point = 776
   Insn 99(l0): point = 778
   Insn 98(l0): point = 780
   Insn 97(l0): point = 782
   Insn 96(l0): point = 784
   Insn 95(l0): point = 786
   Insn 94(l0): point = 788
   Insn 92(l0): point = 791
   Insn 91(l0): point = 793
   Insn 89(l0): point = 795
   Insn 88(l0): point = 797
   Insn 87(l0): point = 799
   Insn 84(l0): point = 802
   Insn 544(l0): point = 805
   Insn 80(l0): point = 807
   Insn 79(l0): point = 809
   Insn 78(l0): point = 811
   Insn 77(l0): point = 813
   Insn 76(l0): point = 815
   Insn 75(l0): point = 817
   Insn 74(l0): point = 819
   Insn 73(l0): point = 821
   Insn 72(l0): point = 823
   Insn 71(l0): point = 825
   Insn 70(l0): point = 827
   Insn 69(l0): point = 829
   Insn 68(l0): point = 831
   Insn 67(l0): point = 833
   Insn 66(l0): point = 835
   Insn 65(l0): point = 837
   Insn 64(l0): point = 839
   Insn 61(l0): point = 842
   Insn 60(l0): point = 844
   Insn 542(l0): point = 847
   Insn 46(l0): point = 849
   Insn 45(l0): point = 851
   Insn 44(l0): point = 853
   Insn 43(l0): point = 855
   Insn 42(l0): point = 857
   Insn 41(l0): point = 859
   Insn 40(l0): point = 861
   Insn 39(l0): point = 863
   Insn 38(l0): point = 865
   Insn 37(l0): point = 867
   Insn 36(l0): point = 869
   Insn 35(l0): point = 871
   Insn 34(l0): point = 873
   Insn 33(l0): point = 875
   Insn 32(l0): point = 877
   Insn 31(l0): point = 879
   Insn 30(l0): point = 881
   Insn 29(l0): point = 883
   Insn 28(l0): point = 885
   Insn 27(l0): point = 887
   Insn 26(l0): point = 889
   Insn 25(l0): point = 891
   Insn 24(l0): point = 893
   Insn 23(l0): point = 895
   Insn 22(l0): point = 897
   Insn 21(l0): point = 899
   Insn 18(l0): point = 902
   Insn 17(l0): point = 904
   Insn 15(l0): point = 907
   Insn 14(l0): point = 909
   Insn 13(l0): point = 911
   Insn 12(l0): point = 913
   Insn 11(l0): point = 915
   Insn 10(l0): point = 917
   Insn 9(l0): point = 919
   Insn 8(l0): point = 921
   Insn 5(l0): point = 923
   Insn 3(l0): point = 925
   Insn 2(l0): point = 927
 a0(r180): [11..12]
 a1(r179): [13..14]
 a2(r178): [19..24]
 a3(r308): [21..22]
 a4(r307): [25..26]
 a5(r306): [51..52]
 a6(r110): [61..62]
 a7(r109): [63..64]
 a8(r108): [65..66]
 a9(r106): [65..82]
 a10(r304): [71..76] [67..68]
 a11(r305): [69..70]
 a12(r107): [73..78]
 a13(r303): [79..80]
 a14(r302): [83..84]
 a15(r175): [90..107]
 a16(r177): [90..91]
 a17(r176): [96..97]
 a18(r300): [98..99]
 a19(r299): [98..103]
 a20(r301): [100..101]
 a21(r174): [108..109]
 a22(r172): [108..115]
 a23(r173): [110..111]
 a24(r298): [112..113]
 a25(r171): [116..117]
 a26(r170): [118..119]
 a27(r168): [118..135]
 a28(r296): [124..129] [120..121]
 a29(r297): [122..123]
 a30(r169): [126..131]
 a31(r295): [132..133]
 a32(r294): [136..137]
 a33(r167): [143..144]
 a34(r292): [145..146]
 a35(r293): [147..148]
 a36(r166): [567..568]
 a37(r290): [569..570]
 a38(r291): [571..572]
 a39(r165): [154..155]
 a40(r288): [156..157]
 a41(r289): [158..159]
 a42(r164): [173..174]
 a43(r286): [175..176]
 a44(r287): [177..178]
 a45(r163): [551..552]
 a46(r284): [553..554]
 a47(r285): [555..556]
 a48(r162): [184..185]
 a49(r282): [186..187]
 a50(r283): [188..189]
 a51(r158): [200..219]
 a52(r161): [200..201]
 a53(r160): [202..203]
 a54(r159): [208..209]
 a55(r280): [210..211]
 a56(r279): [210..215]
 a57(r281): [212..213]
 a58(r157): [220..221]
 a59(r156): [222..223]
 a60(r155): [224..225]
 a61(r153): [224..231]
 a62(r154): [226..227]
 a63(r278): [228..229]
 a64(r152): [232..233]
 a65(r151): [234..235]
 a66(r149): [234..251]
 a67(r276): [240..245] [236..237]
 a68(r277): [238..239]
 a69(r150): [242..247]
 a70(r275): [248..249]
 a71(r274): [252..253]
 a72(r148): [259..260]
 a73(r272): [261..262]
 a74(r273): [263..264]
 a75(r147): [535..536]
 a76(r270): [537..538]
 a77(r271): [539..540]
 a78(r146): [524..525]
 a79(r268): [526..527]
 a80(r269): [528..529]
 a81(r145): [270..271]
 a82(r266): [272..273]
 a83(r267): [274..275]
 a84(r141): [286..305]
 a85(r144): [286..287]
 a86(r143): [288..289]
 a87(r142): [294..295]
 a88(r264): [296..297]
 a89(r263): [296..301]
 a90(r265): [298..299]
 a91(r140): [306..307]
 a92(r139): [308..309]
 a93(r138): [310..311]
 a94(r136): [310..317]
 a95(r137): [312..313]
 a96(r262): [314..315]
 a97(r135): [318..319]
 a98(r134): [320..321]
 a99(r132): [320..337]
 a100(r260): [326..331] [322..323]
 a101(r261): [324..325]
 a102(r133): [328..333]
 a103(r259): [334..335]
 a104(r258): [338..339]
 a105(r131): [345..346]
 a106(r256): [347..348]
 a107(r257): [349..350]
 a108(r130): [508..509]
 a109(r254): [510..511]
 a110(r255): [512..513]
 a111(r129): [497..498]
 a112(r252): [499..500]
 a113(r253): [501..502]
 a114(r128): [356..357]
 a115(r250): [358..359]
 a116(r251): [360..361]
 a117(r124): [372..391]
 a118(r127): [372..373]
 a119(r126): [374..375]
 a120(r125): [380..381]
 a121(r248): [382..383]
 a122(r247): [382..387]
 a123(r249): [384..385]
 a124(r123): [392..393]
 a125(r122): [394..395]
 a126(r120): [394..401]
 a127(r121): [396..397]
 a128(r246): [398..399]
 a129(r119): [402..403]
 a130(r118): [404..405]
 a131(r116): [404..421]
 a132(r244): [410..415] [406..407]
 a133(r245): [408..409]
 a134(r117): [412..417]
 a135(r243): [418..419]
 a136(r242): [422..423]
 a137(r115): [429..430]
 a138(r240): [431..432]
 a139(r241): [433..434]
 a140(r114): [445..446]
 a141(r238): [447..448]
 a142(r239): [449..450]
 a143(r113): [486..487]
 a144(r236): [488..489]
 a145(r237): [490..491]
 a146(r112): [475..476]
 a147(r234): [477..478]
 a148(r235): [479..480]
 a149(r111): [456..457]
 a150(r232): [458..459]
 a151(r233): [460..461]
 a152(r98): [585..618]
 a153(r105): [585..586]
 a154(r104): [591..592]
 a155(r103): [593..594]
 a156(r102): [595..596]
 a157(r101): [597..598]
 a158(r99): [597..614]
 a159(r230): [603..608] [599..600]
 a160(r231): [601..602]
 a161(r100): [605..610]
 a162(r229): [611..612]
 a163(r228): [615..616]
 a164(r97): [619..620]
 a165(r95): [619..636]
 a166(r226): [625..630] [621..622]
 a167(r227): [623..624]
 a168(r96): [627..632]
 a169(r225): [633..634]
 a170(r224): [637..638]
 a171(r88): [641..672]
 a172(r94): [641..642]
 a173(r93): [647..648]
 a174(r92): [649..650]
 a175(r91): [651..652]
 a176(r89): [651..668]
 a177(r222): [657..662] [653..654]
 a178(r223): [655..656]
 a179(r90): [659..664]
 a180(r221): [665..666]
 a181(r220): [669..670]
 a182(r87): [673..674]
 a183(r85): [673..690]
 a184(r218): [679..684] [675..676]
 a185(r219): [677..678]
 a186(r86): [681..686]
 a187(r217): [687..688]
 a188(r216): [691..692]
 a189(r78): [695..728]
 a190(r84): [695..696]
 a191(r83): [701..704]
 a192(r82): [705..706]
 a193(r81): [707..708]
 a194(r79): [707..724]
 a195(r214): [713..718] [709..710]
 a196(r215): [711..712]
 a197(r80): [715..720]
 a198(r213): [721..722]
 a199(r212): [725..726]
 a200(r77): [729..730]
 a201(r75): [729..746]
 a202(r210): [735..740] [731..732]
 a203(r211): [733..734]
 a204(r76): [737..742]
 a205(r209): [743..744]
 a206(r208): [747..748]
 a207(r72): [751..768]
 a208(r74): [751..752]
 a209(r73): [757..758]
 a210(r206): [759..760]
 a211(r205): [759..764]
 a212(r207): [761..762]
 a213(r71): [769..770]
 a214(r69): [769..786]
 a215(r203): [775..780] [771..772]
 a216(r204): [773..774]
 a217(r70): [777..782]
 a218(r202): [783..784]
 a219(r201): [787..788]
 a220(r68): [794..795]
 a221(r199): [796..797]
 a222(r200): [798..799]
 a223(r66): [810..819]
 a224(r67): [810..811]
 a225(r198): [816..817]
 a226(r65): [820..821]
 a227(r63): [820..837]
 a228(r196): [826..831] [822..823]
 a229(r197): [824..825]
 a230(r64): [828..833]
 a231(r195): [834..835]
 a232(r194): [838..839]
 a233(r62): [32..33]
 a234(r193): [38..43]
 a235(r192): [42..45]
 a236(r191): [852..853]
 a237(r61): [852..855]
 a238(r190): [856..857]
 a239(r60): [862..863]
 a240(r188): [868..873] [864..865]
 a241(r189): [866..867]
 a242(r59): [870..875]
 a243(r187): [876..877]
 a244(r186): [880..881]
 a245(r185): [886..887]
 a246(r184): [892..897]
 a247(r183): [896..899]
 a248(r182): [912..913]
 a249(r181): [918..921]
Compressing live ranges: from 930 to 430 - 46%
Ranges after the compression:
 a0(r180): [0..1]
 a1(r179): [2..3]
 a2(r178): [4..5]
 a3(r308): [4..5]
 a4(r307): [6..7]
 a5(r306): [12..13]
 a6(r110): [14..15]
 a7(r109): [16..17]
 a8(r108): [18..19]
 a9(r106): [18..27]
 a10(r304): [24..25] [20..21]
 a11(r305): [22..23]
 a12(r107): [24..25]
 a13(r303): [26..27]
 a14(r302): [28..29]
 a15(r175): [30..37]
 a16(r177): [30..31]
 a17(r176): [32..33]
 a18(r300): [34..35]
 a19(r299): [34..37]
 a20(r301): [36..37]
 a21(r174): [38..39]
 a22(r172): [38..43]
 a23(r173): [40..41]
 a24(r298): [42..43]
 a25(r171): [44..45]
 a26(r170): [46..47]
 a27(r168): [46..55]
 a28(r296): [52..53] [48..49]
 a29(r297): [50..51]
 a30(r169): [52..53]
 a31(r295): [54..55]
 a32(r294): [56..57]
 a33(r167): [58..59]
 a34(r292): [60..61]
 a35(r293): [62..63]
 a36(r166): [266..267]
 a37(r290): [268..269]
 a38(r291): [270..271]
 a39(r165): [64..65]
 a40(r288): [66..67]
 a41(r289): [68..69]
 a42(r164): [70..71]
 a43(r286): [72..73]
 a44(r287): [74..75]
 a45(r163): [260..261]
 a46(r284): [262..263]
 a47(r285): [264..265]
 a48(r162): [76..77]
 a49(r282): [78..79]
 a50(r283): [80..81]
 a51(r158): [82..91]
 a52(r161): [82..83]
 a53(r160): [84..85]
 a54(r159): [86..87]
 a55(r280): [88..89]
 a56(r279): [88..91]
 a57(r281): [90..91]
 a58(r157): [92..93]
 a59(r156): [94..95]
 a60(r155): [96..97]
 a61(r153): [96..101]
 a62(r154): [98..99]
 a63(r278): [100..101]
 a64(r152): [102..103]
 a65(r151): [104..105]
 a66(r149): [104..113]
 a67(r276): [110..111] [106..107]
 a68(r277): [108..109]
 a69(r150): [110..111]
 a70(r275): [112..113]
 a71(r274): [114..115]
 a72(r148): [116..117]
 a73(r272): [118..119]
 a74(r273): [120..121]
 a75(r147): [254..255]
 a76(r270): [256..257]
 a77(r271): [258..259]
 a78(r146): [248..249]
 a79(r268): [250..251]
 a80(r269): [252..253]
 a81(r145): [122..123]
 a82(r266): [124..125]
 a83(r267): [126..127]
 a84(r141): [128..137]
 a85(r144): [128..129]
 a86(r143): [130..131]
 a87(r142): [132..133]
 a88(r264): [134..135]
 a89(r263): [134..137]
 a90(r265): [136..137]
 a91(r140): [138..139]
 a92(r139): [140..141]
 a93(r138): [142..143]
 a94(r136): [142..147]
 a95(r137): [144..145]
 a96(r262): [146..147]
 a97(r135): [148..149]
 a98(r134): [150..151]
 a99(r132): [150..159]
 a100(r260): [156..157] [152..153]
 a101(r261): [154..155]
 a102(r133): [156..157]
 a103(r259): [158..159]
 a104(r258): [160..161]
 a105(r131): [162..163]
 a106(r256): [164..165]
 a107(r257): [166..167]
 a108(r130): [242..243]
 a109(r254): [244..245]
 a110(r255): [246..247]
 a111(r129): [236..237]
 a112(r252): [238..239]
 a113(r253): [240..241]
 a114(r128): [168..169]
 a115(r250): [170..171]
 a116(r251): [172..173]
 a117(r124): [174..183]
 a118(r127): [174..175]
 a119(r126): [176..177]
 a120(r125): [178..179]
 a121(r248): [180..181]
 a122(r247): [180..183]
 a123(r249): [182..183]
 a124(r123): [184..185]
 a125(r122): [186..187]
 a126(r120): [186..191]
 a127(r121): [188..189]
 a128(r246): [190..191]
 a129(r119): [192..193]
 a130(r118): [194..195]
 a131(r116): [194..203]
 a132(r244): [200..201] [196..197]
 a133(r245): [198..199]
 a134(r117): [200..201]
 a135(r243): [202..203]
 a136(r242): [204..205]
 a137(r115): [206..207]
 a138(r240): [208..209]
 a139(r241): [210..211]
 a140(r114): [212..213]
 a141(r238): [214..215]
 a142(r239): [216..217]
 a143(r113): [230..231]
 a144(r236): [232..233]
 a145(r237): [234..235]
 a146(r112): [224..225]
 a147(r234): [226..227]
 a148(r235): [228..229]
 a149(r111): [218..219]
 a150(r232): [220..221]
 a151(r233): [222..223]
 a152(r98): [272..291]
 a153(r105): [272..273]
 a154(r104): [274..275]
 a155(r103): [276..277]
 a156(r102): [278..279]
 a157(r101): [280..281]
 a158(r99): [280..289]
 a159(r230): [286..287] [282..283]
 a160(r231): [284..285]
 a161(r100): [286..287]
 a162(r229): [288..289]
 a163(r228): [290..291]
 a164(r97): [292..293]
 a165(r95): [292..301]
 a166(r226): [298..299] [294..295]
 a167(r227): [296..297]
 a168(r96): [298..299]
 a169(r225): [300..301]
 a170(r224): [302..303]
 a171(r88): [304..321]
 a172(r94): [304..305]
 a173(r93): [306..307]
 a174(r92): [308..309]
 a175(r91): [310..311]
 a176(r89): [310..319]
 a177(r222): [316..317] [312..313]
 a178(r223): [314..315]
 a179(r90): [316..317]
 a180(r221): [318..319]
 a181(r220): [320..321]
 a182(r87): [322..323]
 a183(r85): [322..331]
 a184(r218): [328..329] [324..325]
 a185(r219): [326..327]
 a186(r86): [328..329]
 a187(r217): [330..331]
 a188(r216): [332..333]
 a189(r78): [334..351]
 a190(r84): [334..335]
 a191(r83): [336..337]
 a192(r82): [338..339]
 a193(r81): [340..341]
 a194(r79): [340..349]
 a195(r214): [346..347] [342..343]
 a196(r215): [344..345]
 a197(r80): [346..347]
 a198(r213): [348..349]
 a199(r212): [350..351]
 a200(r77): [352..353]
 a201(r75): [352..361]
 a202(r210): [358..359] [354..355]
 a203(r211): [356..357]
 a204(r76): [358..359]
 a205(r209): [360..361]
 a206(r208): [362..363]
 a207(r72): [364..371]
 a208(r74): [364..365]
 a209(r73): [366..367]
 a210(r206): [368..369]
 a211(r205): [368..371]
 a212(r207): [370..371]
 a213(r71): [372..373]
 a214(r69): [372..381]
 a215(r203): [378..379] [374..375]
 a216(r204): [376..377]
 a217(r70): [378..379]
 a218(r202): [380..381]
 a219(r201): [382..383]
 a220(r68): [384..385]
 a221(r199): [386..387]
 a222(r200): [388..389]
 a223(r66): [390..393]
 a224(r67): [390..391]
 a225(r198): [392..393]
 a226(r65): [394..395]
 a227(r63): [394..403]
 a228(r196): [400..401] [396..397]
 a229(r197): [398..399]
 a230(r64): [400..401]
 a231(r195): [402..403]
 a232(r194): [404..405]
 a233(r62): [8..9]
 a234(r193): [10..11]
 a235(r192): [10..11]
 a236(r191): [406..407]
 a237(r61): [406..407]
 a238(r190): [408..409]
 a239(r60): [410..411]
 a240(r188): [416..417] [412..413]
 a241(r189): [414..415]
 a242(r59): [416..417]
 a243(r187): [418..419]
 a244(r186): [420..421]
 a245(r185): [422..423]
 a246(r184): [424..425]
 a247(r183): [424..425]
 a248(r182): [426..427]
 a249(r181): [428..429]
  regions=1, blocks=52, points=430
    allocnos=250 (big 0), copies=0, conflicts=0, ranges=264
Disposition:
  242:r59  l0     1  239:r60  l0     0  237:r61  l0     1  233:r62  l0     0
  227:r63  l0     2  230:r64  l0     1  226:r65  l0     0  223:r66  l0     3
  224:r67  l0     0  220:r68  l0     0  214:r69  l0     2  217:r70  l0     1
  213:r71  l0     0  207:r72  l0     3  209:r73  l0     0  208:r74  l0     0
  201:r75  l0     2  204:r76  l0     1  200:r77  l0     0  189:r78  l0     3
  194:r79  l0     2  197:r80  l0     1  193:r81  l0     0  192:r82  l0     0
  191:r83  l0     0  190:r84  l0     0  183:r85  l0     2  186:r86  l0     1
  182:r87  l0     0  171:r88  l0     3  176:r89  l0     2  179:r90  l0     1
  175:r91  l0     0  174:r92  l0     0  173:r93  l0     0  172:r94  l0     0
  165:r95  l0     2  168:r96  l0     1  164:r97  l0     0  152:r98  l0     3
  158:r99  l0     2  161:r100 l0     1  157:r101 l0     0  156:r102 l0     0
  155:r103 l0     0  154:r104 l0     0  153:r105 l0     0    9:r106 l0     2
   12:r107 l0     1    8:r108 l0     0    7:r109 l0     0    6:r110 l0     0
  149:r111 l0     0  146:r112 l0     0  143:r113 l0     0  140:r114 l0     0
  137:r115 l0     0  131:r116 l0     2  134:r117 l0     1  130:r118 l0     0
  129:r119 l0     0  126:r120 l0     0  127:r121 l0     1  125:r122 l0     1
  124:r123 l0     0  117:r124 l0     3  120:r125 l0     0  119:r126 l0   mem
  118:r127 l0     8  114:r128 l0     0  111:r129 l0     0  108:r130 l0     0
  105:r131 l0     0   99:r132 l0     2  102:r133 l0     1   98:r134 l0     0
   97:r135 l0     0   94:r136 l0     0   95:r137 l0     1   93:r138 l0     1
   92:r139 l0     0   91:r140 l0     0   84:r141 l0     3   87:r142 l0     0
   86:r143 l0   mem   85:r144 l0     8   81:r145 l0     0   78:r146 l0     0
   75:r147 l0     0   72:r148 l0     0   66:r149 l0     2   69:r150 l0     1
   65:r151 l0     0   64:r152 l0     0   61:r153 l0     0   62:r154 l0     1
   60:r155 l0     1   59:r156 l0     0   58:r157 l0     0   51:r158 l0     3
   54:r159 l0     0   53:r160 l0   mem   52:r161 l0     8   48:r162 l0     0
   45:r163 l0     0   42:r164 l0     0   39:r165 l0     0   36:r166 l0     0
   33:r167 l0     0   27:r168 l0     2   30:r169 l0     1   26:r170 l0     0
   25:r171 l0     0   22:r172 l0     0   23:r173 l0     1   21:r174 l0     1
   15:r175 l0     3   17:r176 l0     0   16:r177 l0     8    2:r178 l0     0
    1:r179 l0     0    0:r180 l0     0  249:r181 l0     0  248:r182 l0     0
  247:r183 l0     1  246:r184 l0     0  245:r185 l0     0  244:r186 l0     0
  243:r187 l0     0  240:r188 l0     0  241:r189 l0     0  238:r190 l0     0
  236:r191 l0     0  235:r192 l0     1  234:r193 l0     0  232:r194 l0     0
  231:r195 l0     0  228:r196 l0     0  229:r197 l0     0  225:r198 l0     0
  221:r199 l0     0  222:r200 l0     0  219:r201 l0     0  218:r202 l0     0
  215:r203 l0     0  216:r204 l0     0  211:r205 l0     1  210:r206 l0     0
  212:r207 l0     0  206:r208 l0     0  205:r209 l0     0  202:r210 l0     0
  203:r211 l0     0  199:r212 l0     0  198:r213 l0     0  195:r214 l0     0
  196:r215 l0     0  188:r216 l0     0  187:r217 l0     0  184:r218 l0     0
  185:r219 l0     0  181:r220 l0     0  180:r221 l0     0  177:r222 l0     0
  178:r223 l0     0  170:r224 l0     0  169:r225 l0     0  166:r226 l0     0
  167:r227 l0     0  163:r228 l0     0  162:r229 l0     0  159:r230 l0     0
  160:r231 l0     0  150:r232 l0     0  151:r233 l0     0  147:r234 l0     0
  148:r235 l0     0  144:r236 l0     0  145:r237 l0     0  141:r238 l0     0
  142:r239 l0     0  138:r240 l0     0  139:r241 l0     0  136:r242 l0     0
  135:r243 l0     0  132:r244 l0     0  133:r245 l0     0  128:r246 l0     1
  122:r247 l0     1  121:r248 l0     0  123:r249 l0     0  115:r250 l0     0
  116:r251 l0     0  112:r252 l0     0  113:r253 l0     0  109:r254 l0     0
  110:r255 l0     0  106:r256 l0     0  107:r257 l0     0  104:r258 l0     0
  103:r259 l0     0  100:r260 l0     0  101:r261 l0     0   96:r262 l0     1
   89:r263 l0     1   88:r264 l0     0   90:r265 l0     0   82:r266 l0     0
   83:r267 l0     0   79:r268 l0     0   80:r269 l0     0   76:r270 l0     0
   77:r271 l0     0   73:r272 l0     0   74:r273 l0     0   71:r274 l0     0
   70:r275 l0     0   67:r276 l0     0   68:r277 l0     0   63:r278 l0     1
   56:r279 l0     1   55:r280 l0     0   57:r281 l0     0   49:r282 l0     0
   50:r283 l0     0   46:r284 l0     0   47:r285 l0     0   43:r286 l0     0
   44:r287 l0     0   40:r288 l0     0   41:r289 l0     0   37:r290 l0     0
   38:r291 l0     0   34:r292 l0     0   35:r293 l0     0   32:r294 l0     0
   31:r295 l0     0   28:r296 l0     0   29:r297 l0     0   24:r298 l0     1
   19:r299 l0     1   18:r300 l0     0   20:r301 l0     0   14:r302 l0     0
   13:r303 l0     0   10:r304 l0     0   11:r305 l0     0    5:r306 l0     0
    4:r307 l0     0    3:r308 l0     1
+++Costs: overall 28, reg -29, mem 57, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


get_M1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={25d,11u} r1={26d,2u} r2={24d} r4={29d,6u} r5={46d,23u} r6={1d,51u} r7={1d,74u} r8={23d,1u} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r16={1d,50u} r17={147d,25u} r18={23d} r19={23d} r20={1d,192u} r21={24d,3u} r22={24d} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={24d} r38={24d} r39={23d} r40={23d} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} r59={1d,2u,1e} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,2u,1e} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,2u,1e} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,2u,1e} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,2u,1e} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,2u,1e} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,2u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,2u,1e} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,2u,1e} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,2u,1e} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,2u,1e} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,2u,1e} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,2u,1e} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,2u,1e} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={4d,4u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={4d,4u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={4d,4u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={4d,4u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={4d,4u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={4d,4u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={4d,4u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={4d,4u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={4d,4u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={4d,4u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={4d,4u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={4d,4u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={4d,4u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={4d,4u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} 
;;    total ref usage 2235{1477d,744u,14e} in 440{417 regular + 23 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 181 182
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 m1_file+0 S8 A64])
        (reg:DI 5 di [ m1_file ])) mQuery.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ m1_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mQuery.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3695+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:50 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 5 9 2 (set (reg:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 m1_file+0 S8 A64])) mQuery.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 181)) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 181)
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:54 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 182)
        (reg:DI 0 ax)) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
        (reg:DI 182)) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 182)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:55 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:55 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8734751e40 *.LC6>)) mQuery.c:55 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:55 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 183 184 185 186 187 188 189 190 191
(code_label 19 18 20 4 21 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:58 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 23 22 24 4 (set (reg:DI 1 dx)
        (reg:DI 183)) mQuery.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 183)
        (nil)))
(insn 24 23 25 4 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:58 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg:DI 184)) mQuery.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 184)
        (nil)))
(call_insn 26 25 27 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:58 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:60 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg:DI 185)) mQuery.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 185)
        (nil)))
(call_insn/i 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:60 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 30 29 31 4 (set (reg:SI 186)
        (reg:SI 0 ax)) mQuery.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 Nflight+0 S4 A32])
        (reg:SI 186)) mQuery.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 32 31 33 4 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 Nflight+0 S4 A32])) mQuery.c:64 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 59 [ D.3685 ])
        (sign_extend:DI (reg:SI 187))) mQuery.c:64 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(insn 34 33 35 4 (set (reg:DI 188)
        (reg:DI 59 [ D.3685 ])) mQuery.c:64 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 188)
                (ashift:DI (reg:DI 188)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 188)
                (plus:DI (reg:DI 188)
                    (reg:DI 59 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 59 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 59 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 189)
                (ashift:DI (reg:DI 188)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 188)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 38 37 39 4 (set (reg:DI 188)
        (reg:DI 189)) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 189)
        (nil)))
(insn 39 38 40 4 (set (reg:DI 60 [ D.3685 ])
        (reg:DI 188)) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 188)
        (nil)))
(insn 40 39 41 4 (set (reg:DI 5 di)
        (reg:DI 60 [ D.3685 ])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 60 [ D.3685 ])
        (nil)))
(call_insn 41 40 42 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f8734961b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mQuery.c:64 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 42 41 43 4 (set (reg/f:DI 190)
        (reg:DI 0 ax)) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 190)
            (nil))))
(insn 43 42 44 4 (set (reg/f:DI 61 [ D.3686 ])
        (reg/f:DI 190)) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 44 43 45 4 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:64 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 4 (set (mem/f:DI (reg/f:DI 191) [0 *flight_16(D)+0 S8 A64])
        (reg/f:DI 61 [ D.3686 ])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (expr_list:REG_DEAD (reg/f:DI 61 [ D.3686 ])
            (nil))))
(insn 46 45 542 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:66 89 {*movsi_internal}
     (nil))
(jump_insn 542 46 543 4 (set (pc)
        (label_ref 509)) mQuery.c:66 650 {jump}
     (nil)
 -> 509)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 543 542 511)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 192 193
(code_label 511 543 49 5 49 "" [1 uses])
(note 49 511 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:67 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 193)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:67 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 52 51 53 5 (set (reg:DI 1 dx)
        (reg:DI 192)) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 192)
        (nil)))
(insn 53 52 54 5 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:67 89 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 5 di)
        (reg:DI 193)) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 193)
        (nil)))
(call_insn 55 54 56 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:67 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 56 55 57 5 (set (reg/f:DI 62 [ D.3687 ])
        (reg:DI 0 ax)) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 57 56 58 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 62 [ D.3687 ])
            (const_int 0 [0]))) mQuery.c:67 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 62 [ D.3687 ])
        (nil)))
(jump_insn 58 57 59 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mQuery.c:67 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f8734751ed8 *.LC7>)) mQuery.c:67 87 {*movdi_internal_rex64}
     (nil))
(call_insn 61 60 62 6 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:67 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 66 67 194 195 196 197 198
(code_label 62 61 63 7 23 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 7 (set (reg/f:DI 63 [ D.3688 ])
        (mem/f:DI (reg/f:DI 194) [0 *flight_16(D)+0 S8 A64])) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (nil)))
(insn 66 65 67 7 (set (reg:SI 195)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:69 89 {*movsi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 64 [ D.3685 ])
        (sign_extend:DI (reg:SI 195))) mQuery.c:69 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 195)
        (nil)))
(insn 68 67 69 7 (set (reg:DI 196)
        (reg:DI 64 [ D.3685 ])) mQuery.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 7 (parallel [
            (set (reg:DI 196)
                (ashift:DI (reg:DI 196)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 70 69 71 7 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg:DI 196)
                    (reg:DI 64 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 64 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 71 70 72 7 (parallel [
            (set (reg:DI 197)
                (ashift:DI (reg:DI 196)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 72 71 73 7 (set (reg:DI 196)
        (reg:DI 197)) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 197)
        (nil)))
(insn 73 72 74 7 (set (reg:DI 65 [ D.3685 ])
        (reg:DI 196)) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 196)
        (nil)))
(insn 74 73 75 7 (parallel [
            (set (reg/f:DI 66 [ D.3688 ])
                (plus:DI (reg/f:DI 63 [ D.3688 ])
                    (reg:DI 65 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 63 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 75 74 76 7 (parallel [
            (set (reg:DI 198)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 76 75 77 7 (set (reg:DI 5 di)
        (reg:DI 198)) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 198)
        (nil)))
(call_insn/i 77 76 78 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:69 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 78 77 79 7 (set (reg:SI 67 [ D.3689 ])
        (reg:SI 0 ax)) mQuery.c:69 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 79 78 80 7 (set (mem/j:SI (reg/f:DI 66 [ D.3688 ]) [0 _22->ID+0 S4 A128])
        (reg:SI 67 [ D.3689 ])) mQuery.c:69 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 67 [ D.3689 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.3688 ])
            (nil))))
(insn 80 79 544 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) mQuery.c:70 89 {*movsi_internal}
     (nil))
(jump_insn 544 80 545 7 (set (pc)
        (label_ref 85)) mQuery.c:70 650 {jump}
     (nil)
 -> 85)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 545 544 90)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 90 545 83 8 25 "" [1 uses])
(note 83 90 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:70 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 199 200
(code_label 85 84 86 9 24 "" [1 uses])
(note 86 85 87 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 9 (set (reg:SI 200)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:70 89 {*movsi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:DI 199)
        (sign_extend:DI (reg:SI 200))) mQuery.c:70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 200)
        (nil)))
(insn 89 88 91 9 (set (reg:QI 68 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 199))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:70 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 199)
        (nil)))
(insn 91 89 92 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 68 [ D.3690 ])
            (const_int 9 [0x9]))) mQuery.c:70 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 68 [ D.3690 ])
        (nil)))
(jump_insn 92 91 93 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) mQuery.c:70 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 90)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231
(note 93 92 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 10 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 10 (set (reg/f:DI 69 [ D.3688 ])
        (mem/f:DI (reg/f:DI 201) [0 *flight_16(D)+0 S8 A64])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (nil)))
(insn 96 95 97 10 (set (reg:SI 202)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:72 89 {*movsi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:DI 70 [ D.3685 ])
        (sign_extend:DI (reg:SI 202))) mQuery.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 202)
        (nil)))
(insn 98 97 99 10 (set (reg:DI 203)
        (reg:DI 70 [ D.3685 ])) mQuery.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 203)
                (ashift:DI (reg:DI 203)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 100 99 101 10 (parallel [
            (set (reg:DI 203)
                (plus:DI (reg:DI 203)
                    (reg:DI 70 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 70 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 70 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 101 100 102 10 (parallel [
            (set (reg:DI 204)
                (ashift:DI (reg:DI 203)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 203)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 102 101 103 10 (set (reg:DI 203)
        (reg:DI 204)) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 204)
        (nil)))
(insn 103 102 104 10 (set (reg:DI 71 [ D.3685 ])
        (reg:DI 203)) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 203)
        (nil)))
(insn 104 103 105 10 (parallel [
            (set (reg/f:DI 72 [ D.3688 ])
                (plus:DI (reg/f:DI 69 [ D.3688 ])
                    (reg:DI 71 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 71 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 69 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 105 104 106 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 106 105 107 10 (parallel [
            (set (reg:DI 205)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 107 106 108 10 (set (reg:SI 207)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:72 89 {*movsi_internal}
     (nil))
(insn 108 107 109 10 (set (reg:DI 206)
        (sign_extend:DI (reg:SI 207))) mQuery.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 207)
        (nil)))
(insn 109 108 110 10 (parallel [
            (set (reg/f:DI 73 [ D.3687 ])
                (plus:DI (reg:DI 205)
                    (reg:DI 206)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 206)
        (expr_list:REG_DEAD (reg:DI 205)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 110 109 111 10 (set (reg:DI 5 di)
        (reg/f:DI 73 [ D.3687 ])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.3687 ])
        (nil)))
(call_insn/i 111 110 112 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:72 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 112 111 113 10 (set (reg:SI 74 [ D.3689 ])
        (reg:SI 0 ax)) mQuery.c:72 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 113 112 114 10 (set (mem/j:SI (plus:DI (reg/f:DI 72 [ D.3688 ])
                (const_int 4 [0x4])) [0 _30->n_nvp+0 S4 A32])
        (reg:SI 74 [ D.3689 ])) mQuery.c:72 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 74 [ D.3689 ])
        (expr_list:REG_DEAD (reg/f:DI 72 [ D.3688 ])
            (nil))))
(insn 114 113 115 10 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 10 (set (reg/f:DI 75 [ D.3688 ])
        (mem/f:DI (reg/f:DI 208) [0 *flight_16(D)+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (nil)))
(insn 116 115 117 10 (set (reg:SI 209)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:DI 76 [ D.3685 ])
        (sign_extend:DI (reg:SI 209))) mQuery.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 209)
        (nil)))
(insn 118 117 119 10 (set (reg:DI 210)
        (reg:DI 76 [ D.3685 ])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 10 (parallel [
            (set (reg:DI 210)
                (ashift:DI (reg:DI 210)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 210)
                (plus:DI (reg:DI 210)
                    (reg:DI 76 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 76 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 76 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 211)
                (ashift:DI (reg:DI 210)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 210)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 122 121 123 10 (set (reg:DI 210)
        (reg:DI 211)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 211)
        (nil)))
(insn 123 122 124 10 (set (reg:DI 77 [ D.3685 ])
        (reg:DI 210)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 210)
        (nil)))
(insn 124 123 125 10 (parallel [
            (set (reg/f:DI 78 [ D.3688 ])
                (plus:DI (reg/f:DI 75 [ D.3688 ])
                    (reg:DI 77 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 77 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 125 124 126 10 (set (reg/f:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 10 (set (reg/f:DI 79 [ D.3688 ])
        (mem/f:DI (reg/f:DI 212) [0 *flight_16(D)+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 212)
        (nil)))
(insn 127 126 128 10 (set (reg:SI 213)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 128 127 129 10 (set (reg:DI 80 [ D.3685 ])
        (sign_extend:DI (reg:SI 213))) mQuery.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 213)
        (nil)))
(insn 129 128 130 10 (set (reg:DI 214)
        (reg:DI 80 [ D.3685 ])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 130 129 131 10 (parallel [
            (set (reg:DI 214)
                (ashift:DI (reg:DI 214)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 131 130 132 10 (parallel [
            (set (reg:DI 214)
                (plus:DI (reg:DI 214)
                    (reg:DI 80 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 80 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 80 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 132 131 133 10 (parallel [
            (set (reg:DI 215)
                (ashift:DI (reg:DI 214)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 214)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 133 132 134 10 (set (reg:DI 214)
        (reg:DI 215)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 215)
        (nil)))
(insn 134 133 135 10 (set (reg:DI 81 [ D.3685 ])
        (reg:DI 214)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 214)
        (nil)))
(insn 135 134 136 10 (parallel [
            (set (reg/f:DI 82 [ D.3688 ])
                (plus:DI (reg/f:DI 79 [ D.3688 ])
                    (reg:DI 81 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 81 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 79 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 136 135 137 10 (set (reg:SI 83 [ D.3689 ])
        (mem/j:SI (plus:DI (reg/f:DI 82 [ D.3688 ])
                (const_int 4 [0x4])) [0 _41->n_nvp+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ D.3688 ])
        (nil)))
(insn 137 136 138 10 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 138 137 139 10 (set (reg:SI 5 di)
        (reg:SI 83 [ D.3689 ])) mQuery.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ D.3689 ])
        (nil)))
(call_insn 139 138 140 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 140 139 141 10 (set (reg/f:DI 84 [ D.3691 ])
        (reg:DI 0 ax)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 141 140 142 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 78 [ D.3688 ])
                (const_int 8 [0x8])) [0 _37->nvp+0 S8 A64])
        (reg/f:DI 84 [ D.3691 ])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 84 [ D.3691 ])
        (expr_list:REG_DEAD (reg/f:DI 78 [ D.3688 ])
            (nil))))
(insn 142 141 143 10 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 10 (set (reg/f:DI 85 [ D.3688 ])
        (mem/f:DI (reg/f:DI 216) [0 *flight_16(D)+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 216)
        (nil)))
(insn 144 143 145 10 (set (reg:SI 217)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (nil))
(insn 145 144 146 10 (set (reg:DI 86 [ D.3685 ])
        (sign_extend:DI (reg:SI 217))) mQuery.c:75 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 146 145 147 10 (set (reg:DI 218)
        (reg:DI 86 [ D.3685 ])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 10 (parallel [
            (set (reg:DI 218)
                (ashift:DI (reg:DI 218)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 148 147 149 10 (parallel [
            (set (reg:DI 218)
                (plus:DI (reg:DI 218)
                    (reg:DI 86 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 86 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 149 148 150 10 (parallel [
            (set (reg:DI 219)
                (ashift:DI (reg:DI 218)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 218)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 150 149 151 10 (set (reg:DI 218)
        (reg:DI 219)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 219)
        (nil)))
(insn 151 150 152 10 (set (reg:DI 87 [ D.3685 ])
        (reg:DI 218)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 218)
        (nil)))
(insn 152 151 153 10 (parallel [
            (set (reg/f:DI 88 [ D.3688 ])
                (plus:DI (reg/f:DI 85 [ D.3688 ])
                    (reg:DI 87 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 85 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 153 152 154 10 (set (reg/f:DI 220)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 10 (set (reg/f:DI 89 [ D.3688 ])
        (mem/f:DI (reg/f:DI 220) [0 *flight_16(D)+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 220)
        (nil)))
(insn 155 154 156 10 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (nil))
(insn 156 155 157 10 (set (reg:DI 90 [ D.3685 ])
        (sign_extend:DI (reg:SI 221))) mQuery.c:75 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 157 156 158 10 (set (reg:DI 222)
        (reg:DI 90 [ D.3685 ])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 158 157 159 10 (parallel [
            (set (reg:DI 222)
                (ashift:DI (reg:DI 222)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 159 158 160 10 (parallel [
            (set (reg:DI 222)
                (plus:DI (reg:DI 222)
                    (reg:DI 90 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 90 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 160 159 161 10 (parallel [
            (set (reg:DI 223)
                (ashift:DI (reg:DI 222)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 222)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 10 (set (reg:DI 222)
        (reg:DI 223)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 223)
        (nil)))
(insn 162 161 163 10 (set (reg:DI 91 [ D.3685 ])
        (reg:DI 222)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 222)
        (nil)))
(insn 163 162 164 10 (parallel [
            (set (reg/f:DI 92 [ D.3688 ])
                (plus:DI (reg/f:DI 89 [ D.3688 ])
                    (reg:DI 91 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 164 163 165 10 (set (reg:SI 93 [ D.3689 ])
        (mem/j:SI (plus:DI (reg/f:DI 92 [ D.3688 ])
                (const_int 4 [0x4])) [0 _51->n_nvp+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ D.3688 ])
        (nil)))
(insn 165 164 166 10 (set (reg:SI 5 di)
        (reg:SI 93 [ D.3689 ])) mQuery.c:75 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ D.3689 ])
        (nil)))
(call_insn 166 165 167 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f87349e8700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mQuery.c:75 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 167 166 168 10 (set (reg/f:DI 94 [ D.3692 ])
        (reg:DI 0 ax)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 168 167 169 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 88 [ D.3688 ])
                (const_int 16 [0x10])) [0 _47->time+0 S8 A128])
        (reg/f:DI 94 [ D.3692 ])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 94 [ D.3692 ])
        (expr_list:REG_DEAD (reg/f:DI 88 [ D.3688 ])
            (nil))))
(insn 169 168 170 10 (set (reg/f:DI 224)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 170 169 171 10 (set (reg/f:DI 95 [ D.3688 ])
        (mem/f:DI (reg/f:DI 224) [0 *flight_16(D)+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 224)
        (nil)))
(insn 171 170 172 10 (set (reg:SI 225)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (nil))
(insn 172 171 173 10 (set (reg:DI 96 [ D.3685 ])
        (sign_extend:DI (reg:SI 225))) mQuery.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 225)
        (nil)))
(insn 173 172 174 10 (set (reg:DI 226)
        (reg:DI 96 [ D.3685 ])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 174 173 175 10 (parallel [
            (set (reg:DI 226)
                (ashift:DI (reg:DI 226)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 175 174 176 10 (parallel [
            (set (reg:DI 226)
                (plus:DI (reg:DI 226)
                    (reg:DI 96 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 96 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 176 175 177 10 (parallel [
            (set (reg:DI 227)
                (ashift:DI (reg:DI 226)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 226)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 10 (set (reg:DI 226)
        (reg:DI 227)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 227)
        (nil)))
(insn 178 177 179 10 (set (reg:DI 97 [ D.3685 ])
        (reg:DI 226)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 226)
        (nil)))
(insn 179 178 180 10 (parallel [
            (set (reg/f:DI 98 [ D.3688 ])
                (plus:DI (reg/f:DI 95 [ D.3688 ])
                    (reg:DI 97 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 97 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 180 179 181 10 (set (reg/f:DI 228)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 181 180 182 10 (set (reg/f:DI 99 [ D.3688 ])
        (mem/f:DI (reg/f:DI 228) [0 *flight_16(D)+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 228)
        (nil)))
(insn 182 181 183 10 (set (reg:SI 229)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (nil))
(insn 183 182 184 10 (set (reg:DI 100 [ D.3685 ])
        (sign_extend:DI (reg:SI 229))) mQuery.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 229)
        (nil)))
(insn 184 183 185 10 (set (reg:DI 230)
        (reg:DI 100 [ D.3685 ])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 185 184 186 10 (parallel [
            (set (reg:DI 230)
                (ashift:DI (reg:DI 230)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 186 185 187 10 (parallel [
            (set (reg:DI 230)
                (plus:DI (reg:DI 230)
                    (reg:DI 100 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 100 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 187 186 188 10 (parallel [
            (set (reg:DI 231)
                (ashift:DI (reg:DI 230)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 230)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 188 187 189 10 (set (reg:DI 230)
        (reg:DI 231)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 231)
        (nil)))
(insn 189 188 190 10 (set (reg:DI 101 [ D.3685 ])
        (reg:DI 230)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 230)
        (nil)))
(insn 190 189 191 10 (parallel [
            (set (reg/f:DI 102 [ D.3688 ])
                (plus:DI (reg/f:DI 99 [ D.3688 ])
                    (reg:DI 101 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 101 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 191 190 192 10 (set (reg:SI 103 [ D.3689 ])
        (mem/j:SI (plus:DI (reg/f:DI 102 [ D.3688 ])
                (const_int 4 [0x4])) [0 _61->n_nvp+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ D.3688 ])
        (nil)))
(insn 192 191 193 10 (parallel [
            (set (reg:SI 104 [ D.3689 ])
                (plus:SI (reg:SI 103 [ D.3689 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 103 [ D.3689 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 193 192 194 10 (set (reg:SI 5 di)
        (reg:SI 104 [ D.3689 ])) mQuery.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104 [ D.3689 ])
        (nil)))
(call_insn 194 193 195 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f87349e8700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mQuery.c:76 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 195 194 196 10 (set (reg/f:DI 105 [ D.3692 ])
        (reg:DI 0 ax)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 196 195 197 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 98 [ D.3688 ])
                (const_int 24 [0x18])) [0 _57->vel+0 S8 A64])
        (reg/f:DI 105 [ D.3692 ])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.3692 ])
        (expr_list:REG_DEAD (reg/f:DI 98 [ D.3688 ])
            (nil))))
(insn 197 196 546 10 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])
        (const_int 0 [0])) mQuery.c:78 89 {*movsi_internal}
     (nil))
(jump_insn 546 197 547 10 (set (pc)
        (label_ref 490)) mQuery.c:78 650 {jump}
     (nil)
 -> 490)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 547 546 504)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 504 547 200 11 48 "" [1 uses])
(note 200 504 201 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 548 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:79 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 548 201 549 11 (set (pc)
        (label_ref 206)) mQuery.c:79 650 {jump}
     (nil)
 -> 206)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 549 548 223)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 549 204 12 29 "" [1 uses])
(note 204 223 205 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:79 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 232 233
(code_label 206 205 207 13 27 "" [1 uses])
(note 207 206 208 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 13 (set (reg:SI 233)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 209 208 210 13 (set (reg:DI 232)
        (sign_extend:DI (reg:SI 233))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 233)
        (nil)))
(insn 210 209 211 13 (set (reg:QI 111 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 232))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 232)
        (nil)))
(insn 211 210 212 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 111 [ D.3690 ])
            (const_int 9 [0x9]))) mQuery.c:79 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 111 [ D.3690 ])
        (nil)))
(jump_insn 212 211 213 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 226)
;;  succ:       14 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 234 235
(note 213 212 214 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 14 (set (reg:SI 235)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 215 214 216 14 (set (reg:DI 234)
        (sign_extend:DI (reg:SI 235))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 235)
        (nil)))
(insn 216 215 217 14 (set (reg:QI 112 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 234))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 234)
        (nil)))
(insn 217 216 218 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 112 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:79 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 112 [ D.3690 ])
        (nil)))
(jump_insn 218 217 219 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 226)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 236 237
(note 219 218 220 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 15 (set (reg:SI 237)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 221 220 222 15 (set (reg:DI 236)
        (sign_extend:DI (reg:SI 237))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 237)
        (nil)))
(insn 222 221 224 15 (set (reg:QI 113 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 236))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 236)
        (nil)))
(insn 224 222 225 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 113 [ D.3690 ])
            (const_int 10 [0xa]))) mQuery.c:79 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 113 [ D.3690 ])
        (nil)))
(jump_insn 225 224 226 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 223)
;;  succ:       12
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 238 239
(code_label 226 225 227 16 28 "" [2 uses])
(note 227 226 228 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 16 (set (reg:SI 239)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:80 89 {*movsi_internal}
     (nil))
(insn 229 228 230 16 (set (reg:DI 238)
        (sign_extend:DI (reg:SI 239))) mQuery.c:80 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 239)
        (nil)))
(insn 230 229 231 16 (set (reg:QI 114 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 238))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:80 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 238)
        (nil)))
(insn 231 230 232 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 114 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:80 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 114 [ D.3690 ])
        (nil)))
(jump_insn 232 231 233 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) mQuery.c:80 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 239)
;;  succ:       18
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 240 241
(note 233 232 234 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 17 (set (reg:SI 241)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:80 89 {*movsi_internal}
     (nil))
(insn 235 234 236 17 (set (reg:DI 240)
        (sign_extend:DI (reg:SI 241))) mQuery.c:80 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 241)
        (nil)))
(insn 236 235 237 17 (set (reg:QI 115 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 240))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:80 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 240)
        (nil)))
(insn 237 236 238 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 115 [ D.3690 ])
            (const_int 10 [0xa]))) mQuery.c:80 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 115 [ D.3690 ])
        (nil)))
(jump_insn 238 237 239 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 243)
            (pc))) mQuery.c:80 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 243)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 239 238 240 18 30 "" [1 uses])
(note 240 239 241 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f873475f000 *.LC8>)) mQuery.c:80 87 {*movdi_internal_rex64}
     (nil))
(call_insn 242 241 243 18 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:80 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 116 117 118 119 120 121 122 123 124 125 126 127 242 243 244 245 246 247 248 249
(code_label 243 242 244 19 31 "" [1 uses])
(note 244 243 245 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 19 (set (reg/f:DI 242)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 246 245 247 19 (set (reg/f:DI 116 [ D.3688 ])
        (mem/f:DI (reg/f:DI 242) [0 *flight_16(D)+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 242)
        (nil)))
(insn 247 246 248 19 (set (reg:SI 243)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 248 247 249 19 (set (reg:DI 117 [ D.3685 ])
        (sign_extend:DI (reg:SI 243))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 243)
        (nil)))
(insn 249 248 250 19 (set (reg:DI 244)
        (reg:DI 117 [ D.3685 ])) mQuery.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 250 249 251 19 (parallel [
            (set (reg:DI 244)
                (ashift:DI (reg:DI 244)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 251 250 252 19 (parallel [
            (set (reg:DI 244)
                (plus:DI (reg:DI 244)
                    (reg:DI 117 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 117 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 252 251 253 19 (parallel [
            (set (reg:DI 245)
                (ashift:DI (reg:DI 244)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 244)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 253 252 254 19 (set (reg:DI 244)
        (reg:DI 245)) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 245)
        (nil)))
(insn 254 253 255 19 (set (reg:DI 118 [ D.3685 ])
        (reg:DI 244)) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 244)
        (nil)))
(insn 255 254 256 19 (parallel [
            (set (reg/f:DI 119 [ D.3688 ])
                (plus:DI (reg/f:DI 116 [ D.3688 ])
                    (reg:DI 118 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 116 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 256 255 257 19 (set (reg/f:DI 120 [ D.3691 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 119 [ D.3688 ])
                (const_int 8 [0x8])) [0 _81->nvp+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 119 [ D.3688 ])
        (nil)))
(insn 257 256 258 19 (set (reg:SI 246)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 258 257 259 19 (set (reg:DI 121 [ D.3685 ])
        (sign_extend:DI (reg:SI 246))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 246)
        (nil)))
(insn 259 258 260 19 (parallel [
            (set (reg:DI 122 [ D.3685 ])
                (ashift:DI (reg:DI 121 [ D.3685 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 121 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 260 259 261 19 (parallel [
            (set (reg/f:DI 123 [ D.3691 ])
                (plus:DI (reg/f:DI 120 [ D.3691 ])
                    (reg:DI 122 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ D.3691 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 261 260 262 19 (set (reg/f:DI 124 [ D.3692 ])
        (mem/f:DI (reg/f:DI 123 [ D.3691 ]) [0 *_85+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 123 [ D.3691 ])
        (nil)))
(insn 262 261 263 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 263 262 264 19 (parallel [
            (set (reg:DI 247)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 264 263 265 19 (set (reg:SI 249)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 265 264 266 19 (set (reg:DI 248)
        (sign_extend:DI (reg:SI 249))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 249)
        (nil)))
(insn 266 265 267 19 (parallel [
            (set (reg/f:DI 125 [ D.3687 ])
                (plus:DI (reg:DI 247)
                    (reg:DI 248)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 248)
        (expr_list:REG_DEAD (reg:DI 247)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 267 266 268 19 (set (reg:DI 5 di)
        (reg/f:DI 125 [ D.3687 ])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 125 [ D.3687 ])
        (nil)))
(call_insn/i 268 267 269 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:81 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 269 268 270 19 (set (reg:DF 126 [ D.3693 ])
        (reg:DF 21 xmm0)) mQuery.c:81 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 270 269 271 19 (set (reg:XF 127 [ D.3694 ])
        (float_extend:XF (reg:DF 126 [ D.3693 ]))) mQuery.c:81 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 126 [ D.3693 ])
        (nil)))
(insn 271 270 272 19 (set (mem:XF (reg/f:DI 124 [ D.3692 ]) [0 *_86+0 S16 A128])
        (reg:XF 127 [ D.3694 ])) mQuery.c:81 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 127 [ D.3694 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ D.3692 ])
            (nil))))
(insn 272 271 550 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:83 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 550 272 551 19 (set (pc)
        (label_ref 277)) mQuery.c:83 650 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 551 550 294)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 294 551 275 20 34 "" [1 uses])
(note 275 294 276 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:83 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 250 251
(code_label 277 276 278 21 32 "" [1 uses])
(note 278 277 279 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 21 (set (reg:SI 251)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 280 279 281 21 (set (reg:DI 250)
        (sign_extend:DI (reg:SI 251))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 251)
        (nil)))
(insn 281 280 282 21 (set (reg:QI 128 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 250))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 250)
        (nil)))
(insn 282 281 283 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ D.3690 ])
            (const_int 44 [0x2c]))) mQuery.c:83 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 128 [ D.3690 ])
        (nil)))
(jump_insn 283 282 284 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 297)
;;  succ:       22 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 252 253
(note 284 283 285 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 22 (set (reg:SI 253)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 286 285 287 22 (set (reg:DI 252)
        (sign_extend:DI (reg:SI 253))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 253)
        (nil)))
(insn 287 286 288 22 (set (reg:QI 129 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 252))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 252)
        (nil)))
(insn 288 287 289 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 129 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:83 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 129 [ D.3690 ])
        (nil)))
(jump_insn 289 288 290 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 297)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 254 255
(note 290 289 291 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 23 (set (reg:SI 255)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 292 291 293 23 (set (reg:DI 254)
        (sign_extend:DI (reg:SI 255))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 255)
        (nil)))
(insn 293 292 295 23 (set (reg:QI 130 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 254))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 254)
        (nil)))
(insn 295 293 296 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 130 [ D.3690 ])
            (const_int 10 [0xa]))) mQuery.c:83 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 130 [ D.3690 ])
        (nil)))
(jump_insn 296 295 297 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 294)
;;  succ:       20
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 256 257
(code_label 297 296 298 24 33 "" [2 uses])
(note 298 297 299 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 300 24 (set (reg:SI 257)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:84 89 {*movsi_internal}
     (nil))
(insn 300 299 301 24 (set (reg:DI 256)
        (sign_extend:DI (reg:SI 257))) mQuery.c:84 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 257)
        (nil)))
(insn 301 300 302 24 (set (reg:QI 131 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 256))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:84 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 256)
        (nil)))
(insn 302 301 303 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 131 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:84 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 131 [ D.3690 ])
        (nil)))
(jump_insn 303 302 304 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 307)
            (pc))) mQuery.c:84 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 307)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 304 303 305 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f873475f098 *.LC9>)) mQuery.c:84 87 {*movdi_internal_rex64}
     (nil))
(call_insn 306 305 307 25 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:84 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 132 133 134 135 136 137 138 139 140 141 142 143 144 258 259 260 261 262 263 264 265
(code_label 307 306 308 26 35 "" [1 uses])
(note 308 307 309 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 309 308 310 26 (set (reg/f:DI 258)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (nil))
(insn 310 309 311 26 (set (reg/f:DI 132 [ D.3688 ])
        (mem/f:DI (reg/f:DI 258) [0 *flight_16(D)+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 258)
        (nil)))
(insn 311 310 312 26 (set (reg:SI 259)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 312 311 313 26 (set (reg:DI 133 [ D.3685 ])
        (sign_extend:DI (reg:SI 259))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 259)
        (nil)))
(insn 313 312 314 26 (set (reg:DI 260)
        (reg:DI 133 [ D.3685 ])) mQuery.c:85 87 {*movdi_internal_rex64}
     (nil))
(insn 314 313 315 26 (parallel [
            (set (reg:DI 260)
                (ashift:DI (reg:DI 260)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 315 314 316 26 (parallel [
            (set (reg:DI 260)
                (plus:DI (reg:DI 260)
                    (reg:DI 133 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 133 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 316 315 317 26 (parallel [
            (set (reg:DI 261)
                (ashift:DI (reg:DI 260)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 260)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 317 316 318 26 (set (reg:DI 260)
        (reg:DI 261)) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 261)
        (nil)))
(insn 318 317 319 26 (set (reg:DI 134 [ D.3685 ])
        (reg:DI 260)) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 260)
        (nil)))
(insn 319 318 320 26 (parallel [
            (set (reg/f:DI 135 [ D.3688 ])
                (plus:DI (reg/f:DI 132 [ D.3688 ])
                    (reg:DI 134 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 132 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 320 319 321 26 (set (reg/f:DI 136 [ D.3691 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 135 [ D.3688 ])
                (const_int 8 [0x8])) [0 _100->nvp+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 135 [ D.3688 ])
        (nil)))
(insn 321 320 322 26 (set (reg:SI 262)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 322 321 323 26 (set (reg:DI 137 [ D.3685 ])
        (sign_extend:DI (reg:SI 262))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 262)
        (nil)))
(insn 323 322 324 26 (parallel [
            (set (reg:DI 138 [ D.3685 ])
                (ashift:DI (reg:DI 137 [ D.3685 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 137 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 324 323 325 26 (parallel [
            (set (reg/f:DI 139 [ D.3691 ])
                (plus:DI (reg/f:DI 136 [ D.3691 ])
                    (reg:DI 138 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 136 [ D.3691 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 325 324 326 26 (set (reg/f:DI 140 [ D.3692 ])
        (mem/f:DI (reg/f:DI 139 [ D.3691 ]) [0 *_104+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 139 [ D.3691 ])
        (nil)))
(insn 326 325 327 26 (parallel [
            (set (reg/f:DI 141 [ D.3692 ])
                (plus:DI (reg/f:DI 140 [ D.3692 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 140 [ D.3692 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 327 326 328 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 328 327 329 26 (parallel [
            (set (reg:DI 263)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 329 328 330 26 (set (reg:SI 265)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 330 329 331 26 (set (reg:DI 264)
        (sign_extend:DI (reg:SI 265))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 265)
        (nil)))
(insn 331 330 332 26 (parallel [
            (set (reg/f:DI 142 [ D.3687 ])
                (plus:DI (reg:DI 263)
                    (reg:DI 264)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 264)
        (expr_list:REG_DEAD (reg:DI 263)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 332 331 333 26 (set (reg:DI 5 di)
        (reg/f:DI 142 [ D.3687 ])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 142 [ D.3687 ])
        (nil)))
(call_insn/i 333 332 334 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:85 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 334 333 335 26 (set (reg:DF 143 [ D.3693 ])
        (reg:DF 21 xmm0)) mQuery.c:85 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 335 334 336 26 (set (reg:XF 144 [ D.3694 ])
        (float_extend:XF (reg:DF 143 [ D.3693 ]))) mQuery.c:85 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 143 [ D.3693 ])
        (nil)))
(insn 336 335 337 26 (set (mem:XF (reg/f:DI 141 [ D.3692 ]) [0 *_106+0 S16 A128])
        (reg:XF 144 [ D.3694 ])) mQuery.c:85 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 144 [ D.3694 ])
        (expr_list:REG_DEAD (reg/f:DI 141 [ D.3692 ])
            (nil))))
(insn 337 336 552 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:87 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 552 337 553 26 (set (pc)
        (label_ref 342)) mQuery.c:87 650 {jump}
     (nil)
 -> 342)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 553 552 359)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 359 553 340 27 38 "" [1 uses])
(note 340 359 341 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:87 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       28 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU,DFS_BACK)
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 266 267
(code_label 342 341 343 28 36 "" [1 uses])
(note 343 342 344 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 28 (set (reg:SI 267)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 345 344 346 28 (set (reg:DI 266)
        (sign_extend:DI (reg:SI 267))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 267)
        (nil)))
(insn 346 345 347 28 (set (reg:QI 145 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 266))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 266)
        (nil)))
(insn 347 346 348 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 145 [ D.3690 ])
            (const_int 44 [0x2c]))) mQuery.c:87 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 145 [ D.3690 ])
        (nil)))
(jump_insn 348 347 349 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 362)
;;  succ:       29 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 268 269
(note 349 348 350 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 351 29 (set (reg:SI 269)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 351 350 352 29 (set (reg:DI 268)
        (sign_extend:DI (reg:SI 269))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 269)
        (nil)))
(insn 352 351 353 29 (set (reg:QI 146 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 268))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 268)
        (nil)))
(insn 353 352 354 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 146 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:87 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 146 [ D.3690 ])
        (nil)))
(jump_insn 354 353 355 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 362)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 270 271
(note 355 354 356 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 30 (set (reg:SI 271)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 357 356 358 30 (set (reg:DI 270)
        (sign_extend:DI (reg:SI 271))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 271)
        (nil)))
(insn 358 357 360 30 (set (reg:QI 147 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 270))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 270)
        (nil)))
(insn 360 358 361 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 147 [ D.3690 ])
            (const_int 10 [0xa]))) mQuery.c:87 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 147 [ D.3690 ])
        (nil)))
(jump_insn 361 360 362 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 359)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 359)
;;  succ:       27
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;;              29
;;              30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 272 273
(code_label 362 361 363 31 37 "" [2 uses])
(note 363 362 364 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 364 363 365 31 (set (reg:SI 273)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:88 89 {*movsi_internal}
     (nil))
(insn 365 364 366 31 (set (reg:DI 272)
        (sign_extend:DI (reg:SI 273))) mQuery.c:88 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 273)
        (nil)))
(insn 366 365 367 31 (set (reg:QI 148 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 272))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:88 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 272)
        (nil)))
(insn 367 366 368 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 148 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:88 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 148 [ D.3690 ])
        (nil)))
(jump_insn 368 367 369 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) mQuery.c:88 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 372)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 369 368 370 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 32 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f873475f130 *.LC10>)) mQuery.c:88 87 {*movdi_internal_rex64}
     (nil))
(call_insn 371 370 372 32 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:88 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 149 150 151 152 153 154 155 156 157 158 159 160 161 274 275 276 277 278 279 280 281
(code_label 372 371 373 33 39 "" [1 uses])
(note 373 372 374 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 374 373 375 33 (set (reg/f:DI 274)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 375 374 376 33 (set (reg/f:DI 149 [ D.3688 ])
        (mem/f:DI (reg/f:DI 274) [0 *flight_16(D)+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 274)
        (nil)))
(insn 376 375 377 33 (set (reg:SI 275)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 377 376 378 33 (set (reg:DI 150 [ D.3685 ])
        (sign_extend:DI (reg:SI 275))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 275)
        (nil)))
(insn 378 377 379 33 (set (reg:DI 276)
        (reg:DI 150 [ D.3685 ])) mQuery.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 379 378 380 33 (parallel [
            (set (reg:DI 276)
                (ashift:DI (reg:DI 276)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 380 379 381 33 (parallel [
            (set (reg:DI 276)
                (plus:DI (reg:DI 276)
                    (reg:DI 150 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 150 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 381 380 382 33 (parallel [
            (set (reg:DI 277)
                (ashift:DI (reg:DI 276)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 276)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 382 381 383 33 (set (reg:DI 276)
        (reg:DI 277)) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 277)
        (nil)))
(insn 383 382 384 33 (set (reg:DI 151 [ D.3685 ])
        (reg:DI 276)) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 276)
        (nil)))
(insn 384 383 385 33 (parallel [
            (set (reg/f:DI 152 [ D.3688 ])
                (plus:DI (reg/f:DI 149 [ D.3688 ])
                    (reg:DI 151 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 149 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 385 384 386 33 (set (reg/f:DI 153 [ D.3691 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 152 [ D.3688 ])
                (const_int 8 [0x8])) [0 _120->nvp+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 152 [ D.3688 ])
        (nil)))
(insn 386 385 387 33 (set (reg:SI 278)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 387 386 388 33 (set (reg:DI 154 [ D.3685 ])
        (sign_extend:DI (reg:SI 278))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 278)
        (nil)))
(insn 388 387 389 33 (parallel [
            (set (reg:DI 155 [ D.3685 ])
                (ashift:DI (reg:DI 154 [ D.3685 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 154 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 389 388 390 33 (parallel [
            (set (reg/f:DI 156 [ D.3691 ])
                (plus:DI (reg/f:DI 153 [ D.3691 ])
                    (reg:DI 155 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 153 [ D.3691 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 390 389 391 33 (set (reg/f:DI 157 [ D.3692 ])
        (mem/f:DI (reg/f:DI 156 [ D.3691 ]) [0 *_124+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 156 [ D.3691 ])
        (nil)))
(insn 391 390 392 33 (parallel [
            (set (reg/f:DI 158 [ D.3692 ])
                (plus:DI (reg/f:DI 157 [ D.3692 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 157 [ D.3692 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 392 391 393 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 393 392 394 33 (parallel [
            (set (reg:DI 279)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 394 393 395 33 (set (reg:SI 281)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 395 394 396 33 (set (reg:DI 280)
        (sign_extend:DI (reg:SI 281))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 281)
        (nil)))
(insn 396 395 397 33 (parallel [
            (set (reg/f:DI 159 [ D.3687 ])
                (plus:DI (reg:DI 279)
                    (reg:DI 280)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 280)
        (expr_list:REG_DEAD (reg:DI 279)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 397 396 398 33 (set (reg:DI 5 di)
        (reg/f:DI 159 [ D.3687 ])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 159 [ D.3687 ])
        (nil)))
(call_insn/i 398 397 399 33 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:89 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 399 398 400 33 (set (reg:DF 160 [ D.3693 ])
        (reg:DF 21 xmm0)) mQuery.c:89 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 400 399 401 33 (set (reg:XF 161 [ D.3694 ])
        (float_extend:XF (reg:DF 160 [ D.3693 ]))) mQuery.c:89 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 160 [ D.3693 ])
        (nil)))
(insn 401 400 402 33 (set (mem:XF (reg/f:DI 158 [ D.3692 ]) [0 *_126+0 S16 A128])
        (reg:XF 161 [ D.3694 ])) mQuery.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 161 [ D.3694 ])
        (expr_list:REG_DEAD (reg/f:DI 158 [ D.3692 ])
            (nil))))
(insn 402 401 554 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:92 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 554 402 555 33 (set (pc)
        (label_ref 407)) mQuery.c:92 650 {jump}
     (nil)
 -> 407)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 555 554 418)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 418 555 405 34 42 "" [1 uses])
(note 405 418 406 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:92 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              33 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 282 283
(code_label 407 406 408 35 40 "" [1 uses])
(note 408 407 409 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 35 (set (reg:SI 283)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:92 89 {*movsi_internal}
     (nil))
(insn 410 409 411 35 (set (reg:DI 282)
        (sign_extend:DI (reg:SI 283))) mQuery.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 283)
        (nil)))
(insn 411 410 412 35 (set (reg:QI 162 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 282))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:92 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 282)
        (nil)))
(insn 412 411 413 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 162 [ D.3690 ])
            (const_int 44 [0x2c]))) mQuery.c:92 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 162 [ D.3690 ])
        (nil)))
(jump_insn 413 412 414 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 421)
            (pc))) mQuery.c:92 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 421)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 163 284 285
(note 414 413 415 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 36 (set (reg:SI 285)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:92 89 {*movsi_internal}
     (nil))
(insn 416 415 417 36 (set (reg:DI 284)
        (sign_extend:DI (reg:SI 285))) mQuery.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 285)
        (nil)))
(insn 417 416 419 36 (set (reg:QI 163 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 284))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:92 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 284)
        (nil)))
(insn 419 417 420 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:92 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 163 [ D.3690 ])
        (nil)))
(jump_insn 420 419 421 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 418)
            (pc))) mQuery.c:92 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 418)
;;  succ:       34
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164 286 287
(code_label 421 420 422 37 41 "" [1 uses])
(note 422 421 423 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 37 (set (reg:SI 287)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:93 89 {*movsi_internal}
     (nil))
(insn 424 423 425 37 (set (reg:DI 286)
        (sign_extend:DI (reg:SI 287))) mQuery.c:93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 287)
        (nil)))
(insn 425 424 426 37 (set (reg:QI 164 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 286))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:93 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 286)
        (nil)))
(insn 426 425 427 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 164 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:93 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 164 [ D.3690 ])
        (nil)))
(jump_insn 427 426 428 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 431)
            (pc))) mQuery.c:93 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 431)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 428 427 429 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 429 428 430 38 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f873475f1c8 *.LC11>)) mQuery.c:93 87 {*movdi_internal_rex64}
     (nil))
(call_insn 430 429 431 38 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:93 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 431 430 432 39 43 "" [1 uses])
(note 432 431 433 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 433 432 556 39 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:94 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 556 433 557 39 (set (pc)
        (label_ref 438)) mQuery.c:94 650 {jump}
     (nil)
 -> 438)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 557 556 449)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 449 557 436 40 46 "" [1 uses])
(note 436 449 437 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 437 436 438 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:94 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       41 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU,DFS_BACK)
;;              39 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 288 289
(code_label 438 437 439 41 44 "" [1 uses])
(note 439 438 440 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 41 (set (reg:SI 289)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:94 89 {*movsi_internal}
     (nil))
(insn 441 440 442 41 (set (reg:DI 288)
        (sign_extend:DI (reg:SI 289))) mQuery.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 289)
        (nil)))
(insn 442 441 443 41 (set (reg:QI 165 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 288))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:94 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 288)
        (nil)))
(insn 443 442 444 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 165 [ D.3690 ])
            (const_int 32 [0x20]))) mQuery.c:94 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 165 [ D.3690 ])
        (nil)))
(jump_insn 444 443 445 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 452)
            (pc))) mQuery.c:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 452)
;;  succ:       42 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 290 291
(note 445 444 446 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 42 (set (reg:SI 291)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:94 89 {*movsi_internal}
     (nil))
(insn 447 446 448 42 (set (reg:DI 290)
        (sign_extend:DI (reg:SI 291))) mQuery.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 291)
        (nil)))
(insn 448 447 450 42 (set (reg:QI 166 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 290))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:94 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 290)
        (nil)))
(insn 450 448 451 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 166 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:94 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 166 [ D.3690 ])
        (nil)))
(jump_insn 451 450 452 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 449)
            (pc))) mQuery.c:94 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 449)
;;  succ:       40
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;;              42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 167 292 293
(code_label 452 451 453 43 45 "" [1 uses])
(note 453 452 454 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 454 453 455 43 (set (reg:SI 293)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:95 89 {*movsi_internal}
     (nil))
(insn 455 454 456 43 (set (reg:DI 292)
        (sign_extend:DI (reg:SI 293))) mQuery.c:95 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 293)
        (nil)))
(insn 456 455 457 43 (set (reg:QI 167 [ D.3690 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 292))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:95 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 292)
        (nil)))
(insn 457 456 458 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 167 [ D.3690 ])
            (const_int 0 [0]))) mQuery.c:95 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 167 [ D.3690 ])
        (nil)))
(jump_insn 458 457 459 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 462)
            (pc))) mQuery.c:95 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 462)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 459 458 460 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 44 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f873475f260 *.LC12>)) mQuery.c:95 87 {*movdi_internal_rex64}
     (nil))
(call_insn 461 460 462 44 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:95 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 168 169 170 171 172 173 174 175 176 177 294 295 296 297 298 299 300 301
(code_label 462 461 463 45 47 "" [1 uses])
(note 463 462 464 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 45 (set (reg/f:DI 294)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 465 464 466 45 (set (reg/f:DI 168 [ D.3688 ])
        (mem/f:DI (reg/f:DI 294) [0 *flight_16(D)+0 S8 A64])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 294)
        (nil)))
(insn 466 465 467 45 (set (reg:SI 295)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 467 466 468 45 (set (reg:DI 169 [ D.3685 ])
        (sign_extend:DI (reg:SI 295))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 295)
        (nil)))
(insn 468 467 469 45 (set (reg:DI 296)
        (reg:DI 169 [ D.3685 ])) mQuery.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 469 468 470 45 (parallel [
            (set (reg:DI 296)
                (ashift:DI (reg:DI 296)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 470 469 471 45 (parallel [
            (set (reg:DI 296)
                (plus:DI (reg:DI 296)
                    (reg:DI 169 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 169 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 169 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 471 470 472 45 (parallel [
            (set (reg:DI 297)
                (ashift:DI (reg:DI 296)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 296)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 472 471 473 45 (set (reg:DI 296)
        (reg:DI 297)) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 297)
        (nil)))
(insn 473 472 474 45 (set (reg:DI 170 [ D.3685 ])
        (reg:DI 296)) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(insn 474 473 475 45 (parallel [
            (set (reg/f:DI 171 [ D.3688 ])
                (plus:DI (reg/f:DI 168 [ D.3688 ])
                    (reg:DI 170 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 170 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 168 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 475 474 476 45 (set (reg/f:DI 172 [ D.3692 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 171 [ D.3688 ])
                (const_int 16 [0x10])) [0 _144->time+0 S8 A128])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 171 [ D.3688 ])
        (nil)))
(insn 476 475 477 45 (set (reg:SI 298)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 477 476 478 45 (set (reg:DI 173 [ D.3685 ])
        (sign_extend:DI (reg:SI 298))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 298)
        (nil)))
(insn 478 477 479 45 (parallel [
            (set (reg:DI 174 [ D.3685 ])
                (ashift:DI (reg:DI 173 [ D.3685 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 173 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 479 478 480 45 (parallel [
            (set (reg/f:DI 175 [ D.3692 ])
                (plus:DI (reg/f:DI 172 [ D.3692 ])
                    (reg:DI 174 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 174 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 172 [ D.3692 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 480 479 481 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 481 480 482 45 (parallel [
            (set (reg:DI 299)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 482 481 483 45 (set (reg:SI 301)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 j+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 483 482 484 45 (set (reg:DI 300)
        (sign_extend:DI (reg:SI 301))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 301)
        (nil)))
(insn 484 483 485 45 (parallel [
            (set (reg/f:DI 176 [ D.3687 ])
                (plus:DI (reg:DI 299)
                    (reg:DI 300)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 300)
        (expr_list:REG_DEAD (reg:DI 299)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 485 484 486 45 (set (reg:DI 5 di)
        (reg/f:DI 176 [ D.3687 ])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 176 [ D.3687 ])
        (nil)))
(call_insn 486 485 487 45 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_convert_time") [flags 0x3]  <function_decl 0x7f87346baf00 _convert_time>) [0 _convert_time S1 A8])
            (const_int 0 [0]))) mQuery.c:96 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 487 486 488 45 (set (reg:XF 177 [ D.3694 ])
        (reg:XF 8 st)) mQuery.c:96 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 488 487 489 45 (set (mem:XF (reg/f:DI 175 [ D.3692 ]) [0 *_148+0 S16 A128])
        (reg:XF 177 [ D.3694 ])) mQuery.c:96 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 177 [ D.3694 ])
        (expr_list:REG_DEAD (reg/f:DI 175 [ D.3692 ])
            (nil))))
(insn 489 488 490 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       46 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 302 303 304 305
(code_label 490 489 491 46 26 "" [1 uses])
(note 491 490 492 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 46 (set (reg/f:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 493 492 494 46 (set (reg/f:DI 106 [ D.3688 ])
        (mem/f:DI (reg/f:DI 302) [0 *flight_16(D)+0 S8 A64])) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 302)
        (nil)))
(insn 494 493 495 46 (set (reg:SI 303)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:78 89 {*movsi_internal}
     (nil))
(insn 495 494 496 46 (set (reg:DI 107 [ D.3685 ])
        (sign_extend:DI (reg:SI 303))) mQuery.c:78 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 303)
        (nil)))
(insn 496 495 497 46 (set (reg:DI 304)
        (reg:DI 107 [ D.3685 ])) mQuery.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 497 496 498 46 (parallel [
            (set (reg:DI 304)
                (ashift:DI (reg:DI 304)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 513 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 498 497 499 46 (parallel [
            (set (reg:DI 304)
                (plus:DI (reg:DI 304)
                    (reg:DI 107 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ D.3685 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 107 [ D.3685 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 499 498 500 46 (parallel [
            (set (reg:DI 305)
                (ashift:DI (reg:DI 304)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 304)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 500 499 501 46 (set (reg:DI 304)
        (reg:DI 305)) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 305)
        (nil)))
(insn 501 500 502 46 (set (reg:DI 108 [ D.3685 ])
        (reg:DI 304)) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 304)
        (nil)))
(insn 502 501 503 46 (parallel [
            (set (reg/f:DI 109 [ D.3688 ])
                (plus:DI (reg/f:DI 106 [ D.3688 ])
                    (reg:DI 108 [ D.3685 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ D.3685 ])
        (expr_list:REG_DEAD (reg/f:DI 106 [ D.3688 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 503 502 505 46 (set (reg:SI 110 [ D.3689 ])
        (mem/j:SI (plus:DI (reg/f:DI 109 [ D.3688 ])
                (const_int 4 [0x4])) [0 _69->n_nvp+0 S4 A32])) mQuery.c:78 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.3688 ])
        (nil)))
(insn 505 503 506 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 110 [ D.3689 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50032 [0xffffffffffff3c90])) [0 h+0 S4 A32]))) mQuery.c:78 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 110 [ D.3689 ])
        (nil)))
(jump_insn 506 505 507 46 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 504)
            (pc))) mQuery.c:78 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 504)
;;  succ:       11
;;              47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 507 506 508 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 508 507 509 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:66 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       48 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 306
(code_label 509 508 510 48 22 "" [1 uses])
(note 510 509 512 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 512 510 513 48 (set (reg:SI 306)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 i+0 S4 A32])) mQuery.c:66 89 {*movsi_internal}
     (nil))
(insn 513 512 514 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 306)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50028 [0xffffffffffff3c94])) [0 Nflight+0 S4 A32]))) mQuery.c:66 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 306)
        (nil)))
(jump_insn 514 513 515 48 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 511)
            (pc))) mQuery.c:66 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 511)
;;  succ:       5
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 178 179 180 307 308
(note 515 514 516 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 516 515 517 49 (set (reg/f:DI 307)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 flight+0 S8 A64])) mQuery.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 517 516 518 49 (set (reg/f:DI 178 [ D.3688 ])
        (mem/f:DI (reg/f:DI 307) [0 *flight_16(D)+0 S8 A64])) mQuery.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 307)
        (nil)))
(insn 518 517 519 49 (set (reg:SI 308)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 Nflight+0 S4 A32])) mQuery.c:100 89 {*movsi_internal}
     (nil))
(insn 519 518 520 49 (set (reg:SI 4 si)
        (reg:SI 308)) mQuery.c:100 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 308)
        (nil)))
(insn 520 519 521 49 (set (reg:DI 5 di)
        (reg/f:DI 178 [ D.3688 ])) mQuery.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 178 [ D.3688 ])
        (nil)))
(call_insn 521 520 522 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_calculate_velocity") [flags 0x3]  <function_decl 0x7f87346c5000 _calculate_velocity>) [0 _calculate_velocity S1 A8])
            (const_int 0 [0]))) mQuery.c:100 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 522 521 525 49 (set (reg:SI 179 [ D.3689 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 Nflight+0 S4 A32])) mQuery.c:107 89 {*movsi_internal}
     (nil))
(insn 525 522 529 49 (set (reg:SI 180 [ <retval> ])
        (reg:SI 179 [ D.3689 ])) mQuery.c:107 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 179 [ D.3689 ])
        (nil)))
(insn 529 525 532 49 (set (reg/i:SI 0 ax)
        (reg:SI 180 [ <retval> ])) mQuery.c:108 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 180 [ <retval> ])
        (nil)))
(insn 532 529 533 49 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3695+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mQuery.c:108 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 533 532 540 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 536)
            (pc))) mQuery.c:108 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 536)
;;  succ:       51
;;              50 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 540 533 534 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(call_insn 534 540 535 50 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:108 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 535 534 536)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 536 535 541 51 51 "" [1 uses])
(note 541 536 537 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 537 541 0 51 (use (reg/i:SI 0 ax)) mQuery.c:108 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _find_value_string (_find_value_string, funcdef_no=5, decl_uid=3177, cgraph_uid=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 25 (    1)
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 149.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r95: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r95,l0) best SIREG, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r92,l0) best DREG, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r89,l0) best SIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r76,l0) best AREG, allocno GENERAL_REGS
    r75: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r75,l0) best DIREG, allocno GENERAL_REGS
    r74: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a5 (r74,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r73: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a6 (r73,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r72: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a7 (r72,l0) best NO_REGS, allocno NO_REGS
    r71: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r71,l0) best AREG, allocno GENERAL_REGS
    r70: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r70,l0) best DIREG, allocno GENERAL_REGS
    r69: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r69,l0) best DREG, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r62,l0) best AREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r62,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r92,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r74,l0) costs: AD_REGS:25 Q_REGS:25 NON_Q_REGS:25 INDEX_REGS:25 GENERAL_REGS:25 LEGACY_REGS:25 CLOBBERED_REGS:25 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:62 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:19
  a6(r73,l0) costs: AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:44 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:17
  a7(r72,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a8(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r71,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a11(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a12(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r69,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a19(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a21(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a22(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a26(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a29(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r76,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a36(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 152(l0): point = 0
   Insn 149(l0): point = 3
   Insn 136(l0): point = 6
   Insn 135(l0): point = 8
   Insn 134(l0): point = 10
   Insn 133(l0): point = 12
   Insn 132(l0): point = 14
   Insn 131(l0): point = 16
   Insn 130(l0): point = 18
   Insn 129(l0): point = 20
   Insn 128(l0): point = 22
   Insn 127(l0): point = 24
   Insn 167(l0): point = 27
   Insn 148(l0): point = 30
   Insn 147(l0): point = 32
   Insn 144(l0): point = 34
   Insn 140(l0): point = 36
   Insn 111(l0): point = 38
   Insn 110(l0): point = 40
   Insn 109(l0): point = 42
   Insn 108(l0): point = 44
   Insn 107(l0): point = 46
   Insn 106(l0): point = 48
   Insn 105(l0): point = 50
   Insn 104(l0): point = 52
   Insn 42(l0): point = 55
   Insn 41(l0): point = 57
   Insn 40(l0): point = 59
   Insn 125(l0): point = 62
   Insn 124(l0): point = 64
   Insn 122(l0): point = 66
   Insn 121(l0): point = 68
   Insn 120(l0): point = 70
   Insn 119(l0): point = 72
   Insn 118(l0): point = 74
   Insn 117(l0): point = 76
   Insn 116(l0): point = 78
   Insn 102(l0): point = 81
   Insn 101(l0): point = 83
   Insn 100(l0): point = 85
   Insn 99(l0): point = 87
   Insn 98(l0): point = 89
   Insn 97(l0): point = 91
   Insn 96(l0): point = 93
   Insn 95(l0): point = 95
   Insn 94(l0): point = 97
   Insn 93(l0): point = 99
   Insn 92(l0): point = 101
   Insn 91(l0): point = 103
   Insn 90(l0): point = 105
   Insn 89(l0): point = 107
   Insn 88(l0): point = 109
   Insn 82(l0): point = 112
   Insn 81(l0): point = 114
   Insn 80(l0): point = 116
   Insn 79(l0): point = 118
   Insn 78(l0): point = 120
   Insn 68(l0): point = 123
   Insn 67(l0): point = 125
   Insn 66(l0): point = 127
   Insn 65(l0): point = 129
   Insn 64(l0): point = 131
   Insn 61(l0): point = 134
   Insn 163(l0): point = 137
   Insn 57(l0): point = 139
   Insn 75(l0): point = 142
   Insn 74(l0): point = 144
   Insn 72(l0): point = 146
   Insn 71(l0): point = 148
   Insn 70(l0): point = 150
   Insn 85(l0): point = 153
   Insn 84(l0): point = 155
   Insn 161(l0): point = 158
   Insn 46(l0): point = 161
   Insn 45(l0): point = 163
   Insn 44(l0): point = 165
   Insn 50(l0): point = 168
   Insn 49(l0): point = 170
   Insn 48(l0): point = 172
   Insn 159(l0): point = 175
   Insn 25(l0): point = 178
   Insn 35(l0): point = 181
   Insn 34(l0): point = 183
   Insn 32(l0): point = 185
   Insn 31(l0): point = 187
   Insn 30(l0): point = 189
   Insn 29(l0): point = 191
   Insn 28(l0): point = 193
   Insn 157(l0): point = 196
   Insn 21(l0): point = 198
   Insn 18(l0): point = 201
   Insn 17(l0): point = 203
   Insn 15(l0): point = 206
   Insn 14(l0): point = 208
   Insn 13(l0): point = 210
   Insn 12(l0): point = 212
   Insn 11(l0): point = 214
   Insn 10(l0): point = 216
   Insn 9(l0): point = 218
   Insn 8(l0): point = 220
   Insn 5(l0): point = 222
   Insn 3(l0): point = 224
   Insn 2(l0): point = 226
 a0(r95): [17..18]
 a1(r94): [23..24]
 a2(r62): [65..66]
 a3(r93): [71..76]
 a4(r92): [75..78]
 a5(r74): [35..36]
 a6(r73): [37..38]
 a7(r72): [39..40]
 a8(r91): [45..46]
 a9(r90): [51..52]
 a10(r71): [84..85]
 a11(r70): [90..97]
 a12(r89): [92..95]
 a13(r69): [94..107]
 a14(r87): [98..99]
 a15(r86): [98..103]
 a16(r88): [100..101]
 a17(r85): [108..109]
 a18(r68): [115..116]
 a19(r83): [117..118]
 a20(r84): [119..120]
 a21(r67): [145..146]
 a22(r81): [147..148]
 a23(r82): [149..150]
 a24(r66): [126..127]
 a25(r79): [128..129]
 a26(r80): [130..131]
 a27(r65): [171..172]
 a28(r64): [164..165]
 a29(r63): [58..59]
 a30(r61): [184..185]
 a31(r60): [186..187]
 a32(r78): [188..189]
 a33(r59): [188..191]
 a34(r77): [192..193]
 a35(r76): [211..212]
 a36(r75): [217..220]
Compressing live ranges: from 229 to 64 - 27%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r94): [2..3]
 a2(r62): [16..17]
 a3(r93): [18..19]
 a4(r92): [18..19]
 a5(r74): [4..5]
 a6(r73): [6..7]
 a7(r72): [8..9]
 a8(r91): [10..11]
 a9(r90): [12..13]
 a10(r71): [20..21]
 a11(r70): [22..23]
 a12(r89): [22..23]
 a13(r69): [22..27]
 a14(r87): [24..25]
 a15(r86): [24..27]
 a16(r88): [26..27]
 a17(r85): [28..29]
 a18(r68): [30..31]
 a19(r83): [32..33]
 a20(r84): [34..35]
 a21(r67): [42..43]
 a22(r81): [44..45]
 a23(r82): [46..47]
 a24(r66): [36..37]
 a25(r79): [38..39]
 a26(r80): [40..41]
 a27(r65): [50..51]
 a28(r64): [48..49]
 a29(r63): [14..15]
 a30(r61): [52..53]
 a31(r60): [54..55]
 a32(r78): [56..57]
 a33(r59): [56..57]
 a34(r77): [58..59]
 a35(r76): [60..61]
 a36(r75): [62..63]
  regions=1, blocks=25, points=64
    allocnos=37 (big 0), copies=0, conflicts=0, ranges=37
Disposition:
   33:r59  l0     1   31:r60  l0     0   30:r61  l0     0    2:r62  l0     0
   29:r63  l0     0   28:r64  l0     0   27:r65  l0     0   24:r66  l0     0
   21:r67  l0     0   18:r68  l0     0   13:r69  l0     1   11:r70  l0     2
   10:r71  l0     0    7:r72  l0   mem    6:r73  l0     8    5:r74  l0     8
   36:r75  l0     0   35:r76  l0     0   34:r77  l0     0   32:r78  l0     0
   25:r79  l0     0   26:r80  l0     0   22:r81  l0     0   23:r82  l0     0
   19:r83  l0     0   20:r84  l0     0   17:r85  l0     0   15:r86  l0     2
   14:r87  l0     0   16:r88  l0     0   12:r89  l0     0    9:r90  l0     0
    8:r91  l0     0    4:r92  l0     1    3:r93  l0     0    1:r94  l0     0
    0:r95  l0     0
+++Costs: overall 5, reg -14, mem 19, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_find_value_string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={13d,4u} r1={14d,2u} r2={12d} r4={16d,5u} r5={22d,11u} r6={1d,24u} r7={1d,35u} r8={12d,2u} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r16={1d,23u} r17={31d,11u} r18={11d} r19={11d} r20={1d,60u,1e} r21={12d,1u} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r59={1d,1u,1e} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} 
;;    total ref usage 795{578d,215u,2e} in 103{92 regular + 11 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 76
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 config_file+0 S8 A64])
        (reg:DI 5 di [ config_file ])) mQuery.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])
        (reg:DI 4 si [ label ])) mQuery.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ label ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3713+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:112 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 5 9 2 (set (reg:DI 75)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50040 [0xffffffffffff3c88])) [0 config_file+0 S8 A64])) mQuery.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 75)) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 75)
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:114 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 76)
        (reg:DI 0 ax)) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
        (reg:DI 76)) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 76)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:115 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:115 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8734780000 *.LC13>)) mQuery.c:115 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:115 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 18 20 4 53 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 157 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
        (const_int 0 [0])) mQuery.c:120 89 {*movsi_internal}
     (nil))
(jump_insn 157 21 158 4 (set (pc)
        (label_ref 26)) mQuery.c:120 650 {jump}
     (nil)
 -> 26)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 33 158 24 5 55 "" [1 uses])
(note 24 33 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:120 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 77 78
(code_label 26 25 27 6 54 "" [1 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])) mQuery.c:120 89 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:DI 59 [ D.3706 ])
        (sign_extend:DI (reg:SI 77))) mQuery.c:120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 77)
        (nil)))
(insn 30 29 31 6 (set (reg/f:DI 78)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg/f:DI 60 [ D.3707 ])
                (plus:DI (reg:DI 59 [ D.3706 ])
                    (reg/f:DI 78)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 78)
        (expr_list:REG_DEAD (reg:DI 59 [ D.3706 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])
                        (reg:DI 59 [ D.3706 ]))
                    (nil))))))
(insn 32 31 34 6 (set (reg:QI 61 [ D.3708 ])
        (mem:QI (reg/f:DI 60 [ D.3707 ]) [0 *_8+0 S1 A8])) mQuery.c:120 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 60 [ D.3707 ])
        (nil)))
(insn 34 32 35 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 61 [ D.3708 ])
            (const_int 0 [0]))) mQuery.c:120 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 61 [ D.3708 ])
        (nil)))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mQuery.c:120 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 33)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 36 35 159 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 159 36 160 7 (set (pc)
        (label_ref 114)) mQuery.c:122 650 {jump}
     (nil)
 -> 114)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 160 159 123)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63
(code_label 123 160 39 8 64 "" [1 uses])
(note 39 123 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:QI 63 [ D.3708 ])
        (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 63 [ D.3708 ])
            (const_int 35 [0x23]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 63 [ D.3708 ])
        (nil)))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 51)
;;  succ:       11
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:QI 64 [ D.3708 ])
        (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 45 44 46 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 64 [ D.3708 ])
            (const_int 10 [0xa]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 64 [ D.3708 ])
        (nil)))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 51)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 10 (set (reg:QI 65 [ D.3708 ])
        (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 49 48 50 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 65 [ D.3708 ])
            (const_int 32 [0x20]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 65 [ D.3708 ])
        (nil)))
(jump_insn 50 49 51 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 55)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 51 50 52 11 57 "" [2 uses])
(note 52 51 161 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 161 52 162 11 (set (pc)
        (label_ref 114)) mQuery.c:123 650 {jump}
     (nil)
 -> 114)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 55)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 55 162 56 12 58 "" [1 uses])
(note 56 55 57 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 163 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(jump_insn 163 57 164 12 (set (pc)
        (label_ref 62)) mQuery.c:124 650 {jump}
     (nil)
 -> 62)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 73)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 73 164 60 13 61 "" [1 uses])
(note 60 73 61 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:124 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 79 80
(code_label 62 61 63 14 59 "" [1 uses])
(note 63 62 64 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 14 (set (reg:SI 80)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(insn 65 64 66 14 (set (reg:DI 79)
        (sign_extend:DI (reg:SI 80))) mQuery.c:124 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 80)
        (nil)))
(insn 66 65 67 14 (set (reg:QI 66 [ D.3708 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 79))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:124 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 79)
        (nil)))
(insn 67 66 68 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 66 [ D.3708 ])
            (const_int 35 [0x23]))) mQuery.c:124 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 66 [ D.3708 ])
        (nil)))
(jump_insn 68 67 69 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) mQuery.c:124 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 76)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 81 82
(note 69 68 70 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 15 (set (reg:SI 82)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(insn 71 70 72 15 (set (reg:DI 81)
        (sign_extend:DI (reg:SI 82))) mQuery.c:124 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 72 71 74 15 (set (reg:QI 67 [ D.3708 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 81))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:124 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 81)
        (nil)))
(insn 74 72 75 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 67 [ D.3708 ])
            (const_int 0 [0]))) mQuery.c:124 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 67 [ D.3708 ])
        (nil)))
(jump_insn 75 74 76 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) mQuery.c:124 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 73)
;;  succ:       13
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 83 84
(code_label 76 75 77 16 60 "" [1 uses])
(note 77 76 78 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 16 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:125 89 {*movsi_internal}
     (nil))
(insn 79 78 80 16 (set (reg:DI 83)
        (sign_extend:DI (reg:SI 84))) mQuery.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 84)
        (nil)))
(insn 80 79 81 16 (set (reg:QI 68 [ D.3708 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 83))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:125 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 83)
        (nil)))
(insn 81 80 82 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 68 [ D.3708 ])
            (const_int 0 [0]))) mQuery.c:125 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 68 [ D.3708 ])
        (nil)))
(jump_insn 82 81 83 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) mQuery.c:125 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 86)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f8734780098 *.LC14>)) mQuery.c:125 87 {*movdi_internal_rex64}
     (nil))
(call_insn 85 84 86 17 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:125 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 85 86 87 88 89
(code_label 86 85 87 18 62 "" [1 uses])
(note 87 86 88 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 18 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])) mQuery.c:126 89 {*movsi_internal}
     (nil))
(insn 89 88 90 18 (set (reg:DI 69 [ D.3709 ])
        (sign_extend:DI (reg:SI 85))) mQuery.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 85)
        (nil)))
(insn 90 89 91 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 91 90 92 18 (parallel [
            (set (reg:DI 86)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 92 91 93 18 (set (reg:SI 88)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:126 89 {*movsi_internal}
     (nil))
(insn 93 92 94 18 (set (reg:DI 87)
        (sign_extend:DI (reg:SI 88))) mQuery.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88)
        (nil)))
(insn 94 93 95 18 (parallel [
            (set (reg/f:DI 70 [ D.3707 ])
                (plus:DI (reg:DI 86)
                    (reg:DI 87)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87)
        (expr_list:REG_DEAD (reg:DI 86)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 95 94 96 18 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 18 (set (reg:DI 1 dx)
        (reg:DI 69 [ D.3709 ])) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 69 [ D.3709 ])
        (nil)))
(insn 97 96 98 18 (set (reg:DI 4 si)
        (reg:DI 89)) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 98 97 99 18 (set (reg:DI 5 di)
        (reg/f:DI 70 [ D.3707 ])) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 70 [ D.3707 ])
        (nil)))
(call_insn/i 99 98 100 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcmp") [flags 0x41]  <function_decl 0x7f8734935700 memcmp>) [0 __builtin_memcmp S1 A8])
            (const_int 0 [0]))) mQuery.c:126 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 100 99 101 18 (set (reg:SI 71 [ D.3710 ])
        (reg:SI 0 ax)) mQuery.c:126 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 101 100 102 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 71 [ D.3710 ])
            (const_int 0 [0]))) mQuery.c:126 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 71 [ D.3710 ])
        (nil)))
(jump_insn 102 101 103 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) mQuery.c:126 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 114)
;;  succ:       19 (FALLTHRU)
;;              21 (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 90 91
(note 103 102 104 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 19 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:127 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 19 (set (reg:DI 5 di)
        (reg:DI 90)) mQuery.c:127 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(call_insn 106 105 107 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:127 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 19 (parallel [
            (set (reg:DI 91)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:128 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 108 107 109 19 (set (reg:DI 5 di)
        (reg:DI 91)) mQuery.c:128 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(call_insn/i 109 108 110 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:128 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 110 109 111 19 (set (reg:DF 72 [ D.3711 ])
        (reg:DF 21 xmm0)) mQuery.c:128 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 111 110 140 19 (set (reg:XF 73 [ D.3712 ])
        (float_extend:XF (reg:DF 72 [ D.3711 ]))) mQuery.c:128 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 72 [ D.3711 ])
        (nil)))
(insn 140 111 144 19 (set (reg:XF 74 [ <retval> ])
        (reg:XF 73 [ D.3712 ])) mQuery.c:128 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 73 [ D.3712 ])
        (nil)))
(insn 144 140 147 19 (set (reg/i:XF 8 st)
        (reg:XF 74 [ <retval> ])) mQuery.c:136 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 74 [ <retval> ])
        (nil)))
(insn 147 144 148 19 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3713+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mQuery.c:136 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 148 147 165 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) mQuery.c:136 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 151)
;;  succ:       24
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 165 148 167 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 167 165 168 20 (set (pc)
        (label_ref 166)) 650 {jump}
     (nil)
 -> 166)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 168 167 114)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (DFS_BACK)
;;              7 [100.0%] 
;;              11 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 92 93
(code_label 114 168 115 21 56 "" [3 uses])
(note 115 114 116 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 21 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 117 116 118 21 (parallel [
            (set (reg:DI 93)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:122 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 118 117 119 21 (set (reg:DI 1 dx)
        (reg:DI 92)) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(insn 119 118 120 21 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:122 89 {*movsi_internal}
     (nil))
(insn 120 119 121 21 (set (reg:DI 5 di)
        (reg:DI 93)) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(call_insn 121 120 122 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:122 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 122 121 124 21 (set (reg/f:DI 62 [ D.3707 ])
        (reg:DI 0 ax)) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 124 122 125 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 62 [ D.3707 ])
            (const_int 0 [0]))) mQuery.c:122 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 62 [ D.3707 ])
        (nil)))
(jump_insn 125 124 126 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) mQuery.c:122 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 123)
;;  succ:       8
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95
(note 126 125 127 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 22 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 22 (set (reg:DI 5 di)
        (reg:DI 94)) mQuery.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(call_insn 129 128 130 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:132 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 130 129 131 22 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 131 130 132 22 (set (reg:DI 4 si)
        (reg:DI 95)) mQuery.c:133 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 132 131 133 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f8734780130 *.LC15>)) mQuery.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 133 132 134 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) mQuery.c:133 91 {*movqi_internal}
     (nil))
(call_insn 134 133 135 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f8734941f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mQuery.c:133 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 135 134 136 22 (set (reg:SI 5 di)
        (const_int 0 [0])) mQuery.c:134 89 {*movsi_internal}
     (nil))
(call_insn 136 135 137 22 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f8734955f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mQuery.c:134 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 166)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 166 137 155 23 66 "" [1 uses])
(note 155 166 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 149 155 150 23 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:136 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 150 149 151)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 151 150 156 24 65 "" [1 uses])
(note 156 151 152 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 152 156 0 24 (use (reg/i:XF 8 st)) mQuery.c:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function get_configuration (get_configuration, funcdef_no=6, decl_uid=1766, cgraph_uid=6)

verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 130.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 130.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r118,l0) best DIREG, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r116,l0) best DIREG, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r110,l0) best DIREG, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r108,l0) best DIREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r102,l0) best DIREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r98,l0) best DIREG, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a67 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r85,l0) best AREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a3 (r83,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a7 (r81,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r80: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a11 (r80,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r79: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a14 (r79,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r78: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a17 (r78,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a19 (r76,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a24 (r74,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r73: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a28 (r73,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r72: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a31 (r72,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a35 (r70,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r69: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a39 (r69,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a43 (r67,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a48 (r65,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r64: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a52 (r64,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r63: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a55 (r63,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r62: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a58 (r62,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a62 (r60,l0) best FP_TOP_REG, allocno FLOAT_REGS
    r59: preferred FP_TOP_REG, alternative FLOAT_REGS, allocno FLOAT_REGS
    a66 (r59,l0) best FP_TOP_REG, allocno FLOAT_REGS

  a0(r85,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a3(r83,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a4(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a6(r82,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a7(r81,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a8(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a9(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a11(r80,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a12(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a14(r79,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a17(r78,l0) costs: AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:2 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:44 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:18
  a18(r77,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:30 SSE_REGS:30 MMX_REGS:30 FP_TOP_SSE_REGS:131074 FP_SECOND_SSE_REGS:131074 FLOAT_SSE_REGS:131074 FLOAT_INT_REGS:131074 INT_SSE_REGS:30 FLOAT_INT_SSE_REGS:131074 ALL_REGS:131074 MEM:12
  a19(r76,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a20(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a21(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r75,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a24(r74,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a25(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a26(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r73,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a29(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r72,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a32(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r71,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a35(r70,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a36(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a37(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a39(r69,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a40(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a42(r68,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a43(r67,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a44(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a45(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a47(r66,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a48(r65,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a49(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a50(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a51(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a52(r64,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a53(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a55(r63,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a56(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a58(r62,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a59(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a60(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a61(r61,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:28 SSE_REGS:28 MMX_REGS:28 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:131072 INT_SSE_REGS:28 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:10
  a62(r60,l0) costs: AD_REGS:64 Q_REGS:64 NON_Q_REGS:64 INDEX_REGS:64 GENERAL_REGS:64 LEGACY_REGS:64 CLOBBERED_REGS:64 FP_TOP_REG:1 FP_SECOND_REG:2 FLOAT_REGS:2 FP_TOP_SSE_REGS:131072 FP_SECOND_SSE_REGS:131072 FLOAT_SSE_REGS:131072 FLOAT_INT_REGS:64 INT_SSE_REGS:131072 FLOAT_INT_SSE_REGS:131072 ALL_REGS:131072 MEM:22
  a63(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:262140 INT_SSE_REGS:262140 FLOAT_INT_SSE_REGS:262140 ALL_REGS:262140 MEM:14
  a64(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a66(r59,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:-1 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a67(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 144(l0): point = 0
   Insn 141(l0): point = 2
   Insn 137(l0): point = 4
   Insn 134(l0): point = 6
   Insn 133(l0): point = 8
   Insn 132(l0): point = 10
   Insn 131(l0): point = 12
   Insn 130(l0): point = 14
   Insn 129(l0): point = 16
   Insn 128(l0): point = 18
   Insn 127(l0): point = 20
   Insn 126(l0): point = 22
   Insn 125(l0): point = 24
   Insn 154(l0): point = 26
   Insn 186(l0): point = 28
   Insn 185(l0): point = 30
   Insn 184(l0): point = 32
   Insn 183(l0): point = 34
   Insn 123(l0): point = 36
   Insn 122(l0): point = 38
   Insn 121(l0): point = 40
   Insn 120(l0): point = 42
   Insn 119(l0): point = 44
   Insn 118(l0): point = 46
   Insn 117(l0): point = 48
   Insn 116(l0): point = 50
   Insn 115(l0): point = 52
   Insn 114(l0): point = 54
   Insn 113(l0): point = 56
   Insn 112(l0): point = 58
   Insn 111(l0): point = 60
   Insn 110(l0): point = 62
   Insn 109(l0): point = 64
   Insn 108(l0): point = 66
   Insn 107(l0): point = 68
   Insn 106(l0): point = 70
   Insn 105(l0): point = 72
   Insn 104(l0): point = 74
   Insn 103(l0): point = 76
   Insn 153(l0): point = 78
   Insn 152(l0): point = 80
   Insn 182(l0): point = 82
   Insn 181(l0): point = 84
   Insn 180(l0): point = 86
   Insn 179(l0): point = 88
   Insn 100(l0): point = 90
   Insn 99(l0): point = 92
   Insn 98(l0): point = 94
   Insn 97(l0): point = 96
   Insn 96(l0): point = 98
   Insn 95(l0): point = 100
   Insn 94(l0): point = 102
   Insn 151(l0): point = 104
   Insn 178(l0): point = 106
   Insn 177(l0): point = 108
   Insn 176(l0): point = 110
   Insn 175(l0): point = 112
   Insn 92(l0): point = 114
   Insn 91(l0): point = 116
   Insn 90(l0): point = 118
   Insn 89(l0): point = 120
   Insn 88(l0): point = 122
   Insn 87(l0): point = 124
   Insn 86(l0): point = 126
   Insn 85(l0): point = 128
   Insn 84(l0): point = 130
   Insn 83(l0): point = 132
   Insn 82(l0): point = 134
   Insn 81(l0): point = 136
   Insn 80(l0): point = 138
   Insn 79(l0): point = 140
   Insn 78(l0): point = 142
   Insn 77(l0): point = 144
   Insn 76(l0): point = 146
   Insn 75(l0): point = 148
   Insn 74(l0): point = 150
   Insn 73(l0): point = 152
   Insn 72(l0): point = 154
   Insn 150(l0): point = 156
   Insn 174(l0): point = 158
   Insn 173(l0): point = 160
   Insn 172(l0): point = 162
   Insn 171(l0): point = 164
   Insn 70(l0): point = 166
   Insn 69(l0): point = 168
   Insn 68(l0): point = 170
   Insn 67(l0): point = 172
   Insn 66(l0): point = 174
   Insn 65(l0): point = 176
   Insn 64(l0): point = 178
   Insn 63(l0): point = 180
   Insn 62(l0): point = 182
   Insn 61(l0): point = 184
   Insn 60(l0): point = 186
   Insn 59(l0): point = 188
   Insn 58(l0): point = 190
   Insn 57(l0): point = 192
   Insn 149(l0): point = 194
   Insn 170(l0): point = 196
   Insn 169(l0): point = 198
   Insn 168(l0): point = 200
   Insn 167(l0): point = 202
   Insn 55(l0): point = 204
   Insn 54(l0): point = 206
   Insn 53(l0): point = 208
   Insn 52(l0): point = 210
   Insn 51(l0): point = 212
   Insn 50(l0): point = 214
   Insn 49(l0): point = 216
   Insn 148(l0): point = 218
   Insn 166(l0): point = 220
   Insn 165(l0): point = 222
   Insn 164(l0): point = 224
   Insn 163(l0): point = 226
   Insn 47(l0): point = 228
   Insn 46(l0): point = 230
   Insn 45(l0): point = 232
   Insn 44(l0): point = 234
   Insn 43(l0): point = 236
   Insn 42(l0): point = 238
   Insn 41(l0): point = 240
   Insn 40(l0): point = 242
   Insn 39(l0): point = 244
   Insn 38(l0): point = 246
   Insn 37(l0): point = 248
   Insn 36(l0): point = 250
   Insn 35(l0): point = 252
   Insn 34(l0): point = 254
   Insn 33(l0): point = 256
   Insn 32(l0): point = 258
   Insn 31(l0): point = 260
   Insn 30(l0): point = 262
   Insn 29(l0): point = 264
   Insn 28(l0): point = 266
   Insn 27(l0): point = 268
   Insn 26(l0): point = 270
   Insn 25(l0): point = 272
   Insn 24(l0): point = 274
   Insn 23(l0): point = 276
   Insn 22(l0): point = 278
   Insn 21(l0): point = 280
   Insn 20(l0): point = 282
   Insn 147(l0): point = 284
   Insn 162(l0): point = 286
   Insn 161(l0): point = 288
   Insn 160(l0): point = 290
   Insn 159(l0): point = 292
   Insn 18(l0): point = 294
   Insn 17(l0): point = 296
   Insn 16(l0): point = 298
   Insn 15(l0): point = 300
   Insn 14(l0): point = 302
   Insn 13(l0): point = 304
   Insn 12(l0): point = 306
   Insn 11(l0): point = 308
   Insn 10(l0): point = 310
   Insn 9(l0): point = 312
   Insn 8(l0): point = 314
   Insn 7(l0): point = 316
   Insn 3(l0): point = 318
   Insn 2(l0): point = 320
 a0(r85): [3..4]
 a1(r84): [5..6]
 a2(r119): [9..10]
 a3(r83): [9..12]
 a4(r118): [17..20]
 a5(r117): [23..24]
 a6(r82): [23..26]
 a7(r81): [27..36]
 a8(r127): [29..32]
 a9(r116): [41..44]
 a10(r115): [47..48]
 a11(r80): [47..50]
 a12(r114): [55..58]
 a13(r113): [61..62]
 a14(r79): [61..64]
 a15(r112): [69..72]
 a16(r111): [75..76]
 a17(r78): [75..78]
 a18(r77): [79..80]
 a19(r76): [81..90]
 a20(r126): [83..86]
 a21(r110): [95..98]
 a22(r109): [101..102]
 a23(r75): [101..104]
 a24(r74): [105..114]
 a25(r125): [107..110]
 a26(r108): [119..122]
 a27(r107): [125..126]
 a28(r73): [125..128]
 a29(r106): [133..136]
 a30(r105): [139..140]
 a31(r72): [139..142]
 a32(r104): [147..150]
 a33(r103): [153..154]
 a34(r71): [153..156]
 a35(r70): [157..166]
 a36(r124): [159..162]
 a37(r102): [171..174]
 a38(r101): [177..178]
 a39(r69): [177..180]
 a40(r100): [185..188]
 a41(r99): [191..192]
 a42(r68): [191..194]
 a43(r67): [195..204]
 a44(r123): [197..200]
 a45(r98): [209..212]
 a46(r97): [215..216]
 a47(r66): [215..218]
 a48(r65): [219..228]
 a49(r122): [221..224]
 a50(r96): [233..236]
 a51(r95): [239..240]
 a52(r64): [239..242]
 a53(r94): [247..250]
 a54(r93): [253..254]
 a55(r63): [253..256]
 a56(r92): [261..264]
 a57(r91): [267..268]
 a58(r62): [267..270]
 a59(r90): [275..278]
 a60(r89): [281..282]
 a61(r61): [281..284]
 a62(r60): [285..294]
 a63(r121): [287..290]
 a64(r88): [299..302]
 a65(r87): [305..306]
 a66(r59): [305..308]
 a67(r86): [313..316]
Compressing live ranges: from 323 to 88 - 27%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r84): [2..3]
 a2(r119): [4..5]
 a3(r83): [4..5]
 a4(r118): [6..7]
 a5(r117): [8..9]
 a6(r82): [8..9]
 a7(r81): [10..11]
 a8(r127): [10..11]
 a9(r116): [12..13]
 a10(r115): [14..15]
 a11(r80): [14..15]
 a12(r114): [16..17]
 a13(r113): [18..19]
 a14(r79): [18..19]
 a15(r112): [20..21]
 a16(r111): [22..23]
 a17(r78): [22..23]
 a18(r77): [24..25]
 a19(r76): [26..27]
 a20(r126): [26..27]
 a21(r110): [28..29]
 a22(r109): [30..31]
 a23(r75): [30..31]
 a24(r74): [32..33]
 a25(r125): [32..33]
 a26(r108): [34..35]
 a27(r107): [36..37]
 a28(r73): [36..37]
 a29(r106): [38..39]
 a30(r105): [40..41]
 a31(r72): [40..41]
 a32(r104): [42..43]
 a33(r103): [44..45]
 a34(r71): [44..45]
 a35(r70): [46..47]
 a36(r124): [46..47]
 a37(r102): [48..49]
 a38(r101): [50..51]
 a39(r69): [50..51]
 a40(r100): [52..53]
 a41(r99): [54..55]
 a42(r68): [54..55]
 a43(r67): [56..57]
 a44(r123): [56..57]
 a45(r98): [58..59]
 a46(r97): [60..61]
 a47(r66): [60..61]
 a48(r65): [62..63]
 a49(r122): [62..63]
 a50(r96): [64..65]
 a51(r95): [66..67]
 a52(r64): [66..67]
 a53(r94): [68..69]
 a54(r93): [70..71]
 a55(r63): [70..71]
 a56(r92): [72..73]
 a57(r91): [74..75]
 a58(r62): [74..75]
 a59(r90): [76..77]
 a60(r89): [78..79]
 a61(r61): [78..79]
 a62(r60): [80..81]
 a63(r121): [80..81]
 a64(r88): [82..83]
 a65(r87): [84..85]
 a66(r59): [84..85]
 a67(r86): [86..87]
  regions=1, blocks=3, points=88
    allocnos=68 (big 0), copies=0, conflicts=0, ranges=68
Disposition:
   66:r59  l0     8   62:r60  l0     8   61:r61  l0     1   58:r62  l0     8
   55:r63  l0     8   52:r64  l0     8   48:r65  l0     8   47:r66  l0     1
   43:r67  l0     8   42:r68  l0     1   39:r69  l0     8   35:r70  l0     8
   34:r71  l0     1   31:r72  l0     8   28:r73  l0     8   24:r74  l0     8
   23:r75  l0     1   19:r76  l0     8   18:r77  l0     0   17:r78  l0     8
   14:r79  l0     8   11:r80  l0     8    7:r81  l0     8    6:r82  l0     1
    3:r83  l0     8    1:r84  l0     0    0:r85  l0     0   67:r86  l0     0
   65:r87  l0     0   64:r88  l0     0   60:r89  l0     0   59:r90  l0     0
   57:r91  l0     0   56:r92  l0     0   54:r93  l0     0   53:r94  l0     0
   51:r95  l0     0   50:r96  l0     0   46:r97  l0     0   45:r98  l0     0
   41:r99  l0     0   40:r100 l0     0   38:r101 l0     0   37:r102 l0     0
   33:r103 l0     0   32:r104 l0     0   30:r105 l0     0   29:r106 l0     0
   27:r107 l0     0   26:r108 l0     0   22:r109 l0     0   21:r110 l0     0
   16:r111 l0     0   15:r112 l0     0   13:r113 l0     0   12:r114 l0     0
   10:r115 l0     0    9:r116 l0     0    5:r117 l0     0    4:r118 l0     0
    2:r119 l0     0   63:r121 l0     0   49:r122 l0     0   44:r123 l0     0
   36:r124 l0     0   25:r125 l0     0   20:r126 l0     0    8:r127 l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


get_configuration

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 19[fpcr]
;;  ref usage 	r0={19d,2u} r1={18d} r2={18d} r4={35d,18u} r5={35d,18u} r6={1d,2u} r7={1d,19u} r8={17d,17u} r9={17d} r10={17d} r11={17d} r12={17d} r13={17d} r14={17d} r15={17d} r16={1d,1u} r17={24d} r18={17d} r19={17d,7u} r20={1d,81u} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={18d} r38={18d} r39={17d} r40={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r121={2d,2u} r122={2d,2u} r123={2d,2u} r124={2d,2u} r125={2d,2u} r126={2d,2u} r127={2d,2u} 
;;    total ref usage 1124{884d,240u,0e} in 161{144 regular + 17 call} insns.
(note 1 0 155 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 121 122 123 124 125 126 127
(note 155 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 155 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])
        (reg:DI 5 di [ config_file ])) mQuery.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])
        (reg:DI 4 si [ config ])) mQuery.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ config ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f873478a5f0 *.LC16>)) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 86)) mQuery.c:139 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 86)
        (nil)))
(call_insn 10 9 11 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:139 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 11 10 12 2 (set (reg:XF 59 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:139 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/j:XF (plus:DI (reg/f:DI 87)
                (const_int 16 [0x10])) [0 config_3(D)->max_ang+0 S16 A128])
        (reg:XF 59 [ D.3717 ])) mQuery.c:139 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (expr_list:REG_DEAD (reg:XF 59 [ D.3717 ])
            (nil))))
(insn 14 13 15 2 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f873478a688 *.LC17>)) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 88)) mQuery.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(call_insn 17 16 18 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:140 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 159 2 (set (reg:XF 60 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:140 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 159 18 160 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:140 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 160 159 161 2 (set (reg:HI 121)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:140 90 {*movhi_internal}
     (nil))
(insn 161 160 162 2 (parallel [
            (set (reg:HI 121)
                (ior:HI (reg:HI 121)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:140 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 162 161 147 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 121)) mQuery.c:140 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 121)
        (nil)))
(insn 147 162 20 2 (parallel [
            (set (reg:SI 61 [ D.3718 ])
                (fix:SI (reg:XF 60 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:140 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 60 [ D.3717 ])
        (nil)))
(insn 20 147 21 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (mem/j:SI (plus:DI (reg/f:DI 89)
                (const_int 32 [0x20])) [0 config_3(D)->nsim+0 S4 A128])
        (reg:SI 61 [ D.3718 ])) mQuery.c:140 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_DEAD (reg:SI 61 [ D.3718 ])
            (nil))))
(insn 22 21 23 2 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f873478a720 *.LC18>)) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 90)) mQuery.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(call_insn 25 24 26 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:141 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 26 25 27 2 (set (reg:XF 62 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:141 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/j:XF (plus:DI (reg/f:DI 91)
                (const_int 64 [0x40])) [0 config_3(D)->direct_thr+0 S16 A128])
        (reg:XF 62 [ D.3717 ])) mQuery.c:141 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_DEAD (reg:XF 62 [ D.3717 ])
            (nil))))
(insn 29 28 30 2 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f873478a7b8 *.LC19>)) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg:DI 92)) mQuery.c:142 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(call_insn 32 31 33 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:142 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 33 32 34 2 (set (reg:XF 63 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:142 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (mem/j:XF (plus:DI (reg/f:DI 93)
                (const_int 80 [0x50])) [0 config_3(D)->xdelay+0 S16 A128])
        (reg:XF 63 [ D.3717 ])) mQuery.c:142 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (expr_list:REG_DEAD (reg:XF 63 [ D.3717 ])
            (nil))))
(insn 36 35 37 2 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f873478a850 *.LC20>)) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (reg:DI 5 di)
        (reg:DI 94)) mQuery.c:143 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(call_insn 39 38 40 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:143 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 40 39 41 2 (set (reg:XF 64 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:143 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 41 40 42 2 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/j:XF (plus:DI (reg/f:DI 95)
                (const_int 96 [0x60])) [0 config_3(D)->pdelay+0 S16 A128])
        (reg:XF 64 [ D.3717 ])) mQuery.c:143 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (expr_list:REG_DEAD (reg:XF 64 [ D.3717 ])
            (nil))))
(insn 43 42 44 2 (set (reg:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f873478a8e8 *.LC21>)) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 5 di)
        (reg:DI 96)) mQuery.c:144 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(call_insn 46 45 47 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:144 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 47 46 163 2 (set (reg:XF 65 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:144 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 163 47 164 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:144 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 164 163 165 2 (set (reg:HI 122)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:144 90 {*movhi_internal}
     (nil))
(insn 165 164 166 2 (parallel [
            (set (reg:HI 122)
                (ior:HI (reg:HI 122)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:144 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 166 165 148 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 122)) mQuery.c:144 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 122)
        (nil)))
(insn 148 166 49 2 (parallel [
            (set (reg:SI 66 [ D.3718 ])
                (fix:SI (reg:XF 65 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:144 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 65 [ D.3717 ])
        (nil)))
(insn 49 148 50 2 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (mem/j:SI (plus:DI (reg/f:DI 97)
                (const_int 112 [0x70])) [0 config_3(D)->laplacian_vel+0 S4 A128])
        (reg:SI 66 [ D.3718 ])) mQuery.c:144 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_DEAD (reg:SI 66 [ D.3718 ])
            (nil))))
(insn 51 50 52 2 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f873478a980 *.LC22>)) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg:DI 5 di)
        (reg:DI 98)) mQuery.c:145 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(call_insn 54 53 55 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:145 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 55 54 167 2 (set (reg:XF 67 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:145 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 167 55 168 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:145 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 168 167 169 2 (set (reg:HI 123)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:145 90 {*movhi_internal}
     (nil))
(insn 169 168 170 2 (parallel [
            (set (reg:HI 123)
                (ior:HI (reg:HI 123)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:145 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 170 169 149 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 123)) mQuery.c:145 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 123)
        (nil)))
(insn 149 170 57 2 (parallel [
            (set (reg:SI 68 [ D.3718 ])
                (fix:SI (reg:XF 67 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:145 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 67 [ D.3717 ])
        (nil)))
(insn 57 149 58 2 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (mem/j:SI (plus:DI (reg/f:DI 99)
                (const_int 116 [0x74])) [0 config_3(D)->Nm_shock+0 S4 A32])
        (reg:SI 68 [ D.3718 ])) mQuery.c:145 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (expr_list:REG_DEAD (reg:SI 68 [ D.3718 ])
            (nil))))
(insn 59 58 60 2 (set (reg:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f873478aa18 *.LC23>)) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 2 (set (reg:DI 5 di)
        (reg:DI 100)) mQuery.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(call_insn 62 61 63 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:146 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 63 62 64 2 (set (reg:XF 69 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:146 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 64 63 65 2 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (mem/j:XF (plus:DI (reg/f:DI 101)
                (const_int 144 [0x90])) [0 config_3(D)->radius+0 S16 A128])
        (reg:XF 69 [ D.3717 ])) mQuery.c:146 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_DEAD (reg:XF 69 [ D.3717 ])
            (nil))))
(insn 66 65 67 2 (set (reg:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f873478aab0 *.LC24>)) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 2 (set (reg:DI 5 di)
        (reg:DI 102)) mQuery.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(call_insn 69 68 70 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:147 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 70 69 171 2 (set (reg:XF 70 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:147 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 171 70 172 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:147 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 172 171 173 2 (set (reg:HI 124)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:147 90 {*movhi_internal}
     (nil))
(insn 173 172 174 2 (parallel [
            (set (reg:HI 124)
                (ior:HI (reg:HI 124)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:147 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 174 173 150 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 124)) mQuery.c:147 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 124)
        (nil)))
(insn 150 174 72 2 (parallel [
            (set (reg:SI 71 [ D.3718 ])
                (fix:SI (reg:XF 70 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:147 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 70 [ D.3717 ])
        (nil)))
(insn 72 150 73 2 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (mem/j:SI (plus:DI (reg/f:DI 103)
                (const_int 192 [0xc0])) [0 config_3(D)->t_w+0 S4 A128])
        (reg:SI 71 [ D.3718 ])) mQuery.c:147 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (expr_list:REG_DEAD (reg:SI 71 [ D.3718 ])
            (nil))))
(insn 74 73 75 2 (set (reg:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f873478ab48 *.LC25>)) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 2 (set (reg:DI 5 di)
        (reg:DI 104)) mQuery.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(call_insn 77 76 78 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:148 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 78 77 79 2 (set (reg:XF 72 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 79 78 80 2 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 2 (set (mem/j:XF (plus:DI (reg/f:DI 105)
                (const_int 208 [0xd0])) [0 config_3(D)->t_i+0 S16 A128])
        (reg:XF 72 [ D.3717 ])) mQuery.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (expr_list:REG_DEAD (reg:XF 72 [ D.3717 ])
            (nil))))
(insn 81 80 82 2 (set (reg:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f873478abe0 *.LC26>)) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 2 (set (reg:DI 5 di)
        (reg:DI 106)) mQuery.c:149 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 106)
        (nil)))
(call_insn 84 83 85 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:149 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 85 84 86 2 (set (reg:XF 73 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:149 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 86 85 87 2 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 2 (set (mem/j:XF (plus:DI (reg/f:DI 107)
                (const_int 224 [0xe0])) [0 config_3(D)->t_r+0 S16 A128])
        (reg:XF 73 [ D.3717 ])) mQuery.c:149 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg:XF 73 [ D.3717 ])
            (nil))))
(insn 88 87 89 2 (set (reg:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f873478ac78 *.LC27>)) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 2 (set (reg:DI 5 di)
        (reg:DI 108)) mQuery.c:150 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(call_insn 91 90 92 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:150 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 92 91 175 2 (set (reg:XF 74 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:150 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 175 92 176 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:150 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 176 175 177 2 (set (reg:HI 125)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:150 90 {*movhi_internal}
     (nil))
(insn 177 176 178 2 (parallel [
            (set (reg:HI 125)
                (ior:HI (reg:HI 125)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:150 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 178 177 151 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 125)) mQuery.c:150 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 125)
        (nil)))
(insn 151 178 94 2 (parallel [
            (set (reg:SI 75 [ D.3718 ])
                (fix:SI (reg:XF 74 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:150 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 74 [ D.3717 ])
        (nil)))
(insn 94 151 95 2 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 2 (set (mem/j:SI (plus:DI (reg/f:DI 109)
                (const_int 240 [0xf0])) [0 config_3(D)->shortest_path+0 S4 A128])
        (reg:SI 75 [ D.3718 ])) mQuery.c:150 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109)
        (expr_list:REG_DEAD (reg:SI 75 [ D.3718 ])
            (nil))))
(insn 96 95 97 2 (set (reg:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f873478ad10 *.LC28>)) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 2 (set (reg:DI 5 di)
        (reg:DI 110)) mQuery.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 110)
        (nil)))
(call_insn 99 98 100 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:151 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 100 99 179 2 (set (reg:XF 76 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:151 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 179 100 180 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:151 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 180 179 181 2 (set (reg:HI 126)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:151 90 {*movhi_internal}
     (nil))
(insn 181 180 182 2 (parallel [
            (set (reg:HI 126)
                (ior:HI (reg:HI 126)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:151 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 182 181 152 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 126)) mQuery.c:151 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 126)
        (nil)))
(insn 152 182 153 2 (parallel [
            (set (reg:SI 77 [ D.3718 ])
                (fix:SI (reg:XF 76 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:151 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 76 [ D.3717 ])
        (nil)))
(insn 153 152 103 2 (parallel [
            (set (reg:XF 78 [ D.3717 ])
                (float:XF (reg:SI 77 [ D.3718 ])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:151 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 77 [ D.3718 ])
        (nil)))
(insn 103 153 104 2 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 104 103 105 2 (set (mem/j:XF (plus:DI (reg/f:DI 111)
                (const_int 256 [0x100])) [0 config_3(D)->d_thr+0 S16 A128])
        (reg:XF 78 [ D.3717 ])) mQuery.c:151 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (expr_list:REG_DEAD (reg:XF 78 [ D.3717 ])
            (nil))))
(insn 105 104 106 2 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 106 105 107 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f873478ada8 *.LC29>)) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 2 (set (reg:DI 5 di)
        (reg:DI 112)) mQuery.c:152 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(call_insn 108 107 109 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:152 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 109 108 110 2 (set (reg:XF 79 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:152 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 110 109 111 2 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 2 (set (mem/j:XF (plus:DI (reg/f:DI 113)
                (const_int 160 [0xa0])) [0 config_3(D)->f_lvl+0 S16 A128])
        (reg:XF 79 [ D.3717 ])) mQuery.c:152 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (expr_list:REG_DEAD (reg:XF 79 [ D.3717 ])
            (nil))))
(insn 112 111 113 2 (set (reg:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 113 112 114 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f873478ae40 *.LC30>)) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 114 113 115 2 (set (reg:DI 5 di)
        (reg:DI 114)) mQuery.c:153 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 114)
        (nil)))
(call_insn 115 114 116 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:153 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 116 115 117 2 (set (reg:XF 80 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:153 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 2 (set (mem/j:XF (plus:DI (reg/f:DI 115)
                (const_int 176 [0xb0])) [0 config_3(D)->f_lvl+16 S16 A128])
        (reg:XF 80 [ D.3717 ])) mQuery.c:153 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (expr_list:REG_DEAD (reg:XF 80 [ D.3717 ])
            (nil))))
(insn 119 118 120 2 (set (reg:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f873478aed8 *.LC31>)) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 121 120 122 2 (set (reg:DI 5 di)
        (reg:DI 116)) mQuery.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 116)
        (nil)))
(call_insn 122 121 123 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:154 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 123 122 183 2 (set (reg:XF 81 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 183 123 184 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:154 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 184 183 185 2 (set (reg:HI 127)
        (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:154 90 {*movhi_internal}
     (nil))
(insn 185 184 186 2 (parallel [
            (set (reg:HI 127)
                (ior:HI (reg:HI 127)
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:154 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 186 185 154 2 (set (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 127)) mQuery.c:154 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 127)
        (nil)))
(insn 154 186 125 2 (parallel [
            (set (reg:SI 82 [ D.3718 ])
                (fix:SI (reg:XF 81 [ D.3717 ])))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:154 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 81 [ D.3717 ])
        (nil)))
(insn 125 154 126 2 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 2 (set (mem/j:SI (plus:DI (reg/f:DI 117)
                (const_int 272 [0x110])) [0 config_3(D)->geom+0 S4 A128])
        (reg:SI 82 [ D.3718 ])) mQuery.c:154 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117)
        (expr_list:REG_DEAD (reg:SI 82 [ D.3718 ])
            (nil))))
(insn 127 126 128 2 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f8734794000 *.LC32>)) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 129 128 130 2 (set (reg:DI 5 di)
        (reg:DI 118)) mQuery.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 118)
        (nil)))
(call_insn 130 129 131 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:155 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 131 130 132 2 (set (reg:XF 83 [ D.3717 ])
        (reg:XF 8 st)) mQuery.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 132 131 133 2 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 133 132 134 2 (set (mem/j:XF (plus:DI (reg/f:DI 119)
                (const_int 288 [0x120])) [0 config_3(D)->sig_V+0 S16 A128])
        (reg:XF 83 [ D.3717 ])) mQuery.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (expr_list:REG_DEAD (reg:XF 83 [ D.3717 ])
            (nil))))
(insn 134 133 137 2 (set (reg:SI 84 [ D.3718 ])
        (const_int 1 [0x1])) mQuery.c:156 89 {*movsi_internal}
     (nil))
(insn 137 134 156 2 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ D.3718 ])) mQuery.c:156 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ D.3718 ])
        (nil)))
(note 156 137 141 2 NOTE_INSN_DELETED)
(insn 141 156 144 2 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) mQuery.c:157 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ <retval> ])
        (nil)))
(insn 144 141 0 2 (use (reg/i:SI 0 ax)) mQuery.c:157 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_boundary (get_boundary, funcdef_no=7, decl_uid=1763, cgraph_uid=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 32 count 23 (    1)
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 196.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r132,l0) best DIREG, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r130,l0) best DIREG, allocno GENERAL_REGS
    r129: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r129,l0) best DREG, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a60 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a69 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a70 (r114,l0) best AREG, allocno GENERAL_REGS
    r113: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r113,l0) best DIREG, allocno GENERAL_REGS
    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a72 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a76 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r108,l0) best DREG, allocno GENERAL_REGS
    r107: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r107,l0) best AREG, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a2 (r103,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a3 (r94,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a18 (r90,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a19 (r82,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a38 (r79,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r78: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a39 (r78,l0) best NO_REGS, allocno NO_REGS
    r77: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r77,l0) best DIREG, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a58 (r68,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r67: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a59 (r67,l0) best NO_REGS, allocno NO_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r61,l0) best AREG, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r105,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r103,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a3(r94,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a4(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a8(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a9(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a10(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a13(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a14(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a17(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a18(r90,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a19(r82,l0) costs: AD_REGS:84 Q_REGS:84 NON_Q_REGS:84 INDEX_REGS:84 GENERAL_REGS:84 LEGACY_REGS:84 CLOBBERED_REGS:84 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:103 INT_SSE_REGS:196605 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:32
  a20(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a23(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a25(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a28(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a29(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a30(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a31(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a32(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r61,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a35(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r129,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r79,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a39(r78,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a40(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a41(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a44(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a47(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a48(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a49(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a51(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a53(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a54(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a55(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a56(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a57(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a58(r68,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a59(r67,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a60(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a61(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a62(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a63(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a64(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a65(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a66(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a67(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a68(r60,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a69(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a70(r114,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a71(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a72(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a73(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a74(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a75(r59,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a76(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a77(r108,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a78(r107,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a79(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 199(l0): point = 0
   Insn 196(l0): point = 3
   Insn 195(l0): point = 6
   Insn 194(l0): point = 8
   Insn 191(l0): point = 10
   Insn 187(l0): point = 12
   Insn 184(l0): point = 14
   Insn 181(l0): point = 17
   Insn 180(l0): point = 19
   Insn 174(l0): point = 22
   Insn 173(l0): point = 24
   Insn 172(l0): point = 27
   Insn 171(l0): point = 29
   Insn 170(l0): point = 31
   Insn 169(l0): point = 33
   Insn 168(l0): point = 35
   Insn 167(l0): point = 37
   Insn 166(l0): point = 39
   Insn 165(l0): point = 41
   Insn 164(l0): point = 43
   Insn 163(l0): point = 45
   Insn 162(l0): point = 47
   Insn 161(l0): point = 49
   Insn 160(l0): point = 51
   Insn 159(l0): point = 53
   Insn 158(l0): point = 55
   Insn 157(l0): point = 57
   Insn 156(l0): point = 59
   Insn 155(l0): point = 61
   Insn 153(l0): point = 64
   Insn 152(l0): point = 66
   Insn 151(l0): point = 69
   Insn 150(l0): point = 71
   Insn 149(l0): point = 73
   Insn 148(l0): point = 75
   Insn 147(l0): point = 77
   Insn 146(l0): point = 79
   Insn 145(l0): point = 81
   Insn 144(l0): point = 83
   Insn 143(l0): point = 85
   Insn 142(l0): point = 87
   Insn 141(l0): point = 89
   Insn 140(l0): point = 91
   Insn 139(l0): point = 93
   Insn 138(l0): point = 95
   Insn 137(l0): point = 97
   Insn 136(l0): point = 99
   Insn 135(l0): point = 101
   Insn 134(l0): point = 103
   Insn 133(l0): point = 105
   Insn 212(l0): point = 108
   Insn 75(l0): point = 110
   Insn 74(l0): point = 112
   Insn 73(l0): point = 114
   Insn 72(l0): point = 116
   Insn 71(l0): point = 118
   Insn 70(l0): point = 120
   Insn 69(l0): point = 122
   Insn 68(l0): point = 124
   Insn 67(l0): point = 126
   Insn 66(l0): point = 128
   Insn 65(l0): point = 130
   Insn 64(l0): point = 132
   Insn 63(l0): point = 134
   Insn 62(l0): point = 136
   Insn 130(l0): point = 139
   Insn 129(l0): point = 141
   Insn 128(l0): point = 143
   Insn 125(l0): point = 146
   Insn 124(l0): point = 148
   Insn 123(l0): point = 150
   Insn 122(l0): point = 152
   Insn 121(l0): point = 154
   Insn 120(l0): point = 156
   Insn 119(l0): point = 158
   Insn 118(l0): point = 160
   Insn 117(l0): point = 162
   Insn 114(l0): point = 165
   Insn 113(l0): point = 167
   Insn 112(l0): point = 169
   Insn 111(l0): point = 171
   Insn 110(l0): point = 173
   Insn 109(l0): point = 175
   Insn 108(l0): point = 177
   Insn 107(l0): point = 179
   Insn 106(l0): point = 181
   Insn 105(l0): point = 183
   Insn 104(l0): point = 185
   Insn 103(l0): point = 187
   Insn 102(l0): point = 189
   Insn 101(l0): point = 191
   Insn 100(l0): point = 193
   Insn 99(l0): point = 195
   Insn 98(l0): point = 197
   Insn 97(l0): point = 199
   Insn 96(l0): point = 201
   Insn 86(l0): point = 204
   Insn 85(l0): point = 206
   Insn 84(l0): point = 208
   Insn 83(l0): point = 210
   Insn 82(l0): point = 212
   Insn 79(l0): point = 215
   Insn 93(l0): point = 218
   Insn 92(l0): point = 220
   Insn 90(l0): point = 222
   Insn 89(l0): point = 224
   Insn 88(l0): point = 226
   Insn 210(l0): point = 229
   Insn 58(l0): point = 231
   Insn 57(l0): point = 233
   Insn 56(l0): point = 235
   Insn 55(l0): point = 237
   Insn 54(l0): point = 239
   Insn 53(l0): point = 241
   Insn 52(l0): point = 243
   Insn 51(l0): point = 245
   Insn 50(l0): point = 247
   Insn 49(l0): point = 249
   Insn 48(l0): point = 251
   Insn 47(l0): point = 253
   Insn 46(l0): point = 255
   Insn 45(l0): point = 257
   Insn 44(l0): point = 259
   Insn 43(l0): point = 261
   Insn 42(l0): point = 263
   Insn 41(l0): point = 265
   Insn 40(l0): point = 267
   Insn 39(l0): point = 269
   Insn 25(l0): point = 272
   Insn 37(l0): point = 275
   Insn 36(l0): point = 277
   Insn 34(l0): point = 279
   Insn 33(l0): point = 281
   Insn 32(l0): point = 283
   Insn 31(l0): point = 285
   Insn 30(l0): point = 287
   Insn 29(l0): point = 289
   Insn 28(l0): point = 291
   Insn 208(l0): point = 294
   Insn 21(l0): point = 296
   Insn 18(l0): point = 299
   Insn 17(l0): point = 301
   Insn 15(l0): point = 304
   Insn 14(l0): point = 306
   Insn 13(l0): point = 308
   Insn 12(l0): point = 310
   Insn 11(l0): point = 312
   Insn 10(l0): point = 314
   Insn 9(l0): point = 316
   Insn 8(l0): point = 318
   Insn 5(l0): point = 320
   Insn 3(l0): point = 322
   Insn 2(l0): point = 324
 a0(r105): [11..12]
 a1(r104): [13..14]
 a2(r103): [25..31]
 a3(r94): [25..53]
 a4(r102): [32..33]
 a5(r101): [34..35]
 a6(r100): [36..37]
 a7(r99): [38..39]
 a8(r95): [38..49]
 a9(r98): [40..41]
 a10(r97): [42..43]
 a11(r96): [44..45]
 a12(r138): [46..47]
 a13(r137): [50..51]
 a14(r93): [54..55]
 a15(r92): [56..57]
 a16(r91): [58..59]
 a17(r136): [60..61]
 a18(r90): [67..73]
 a19(r82): [67..93]
 a20(r89): [74..75]
 a21(r88): [76..77]
 a22(r87): [78..79]
 a23(r83): [78..89]
 a24(r86): [80..81]
 a25(r85): [82..83]
 a26(r84): [84..85]
 a27(r135): [86..87]
 a28(r134): [90..91]
 a29(r81): [94..95]
 a30(r80): [96..97]
 a31(r133): [98..99]
 a32(r132): [104..105]
 a33(r131): [142..143]
 a34(r61): [149..150]
 a35(r130): [155..160]
 a36(r129): [159..162]
 a37(r76): [168..187]
 a38(r79): [168..169]
 a39(r78): [170..171]
 a40(r77): [176..177]
 a41(r127): [178..179]
 a42(r126): [178..183]
 a43(r128): [180..181]
 a44(r75): [188..189]
 a45(r74): [190..191]
 a46(r73): [192..193]
 a47(r71): [192..199]
 a48(r72): [194..195]
 a49(r125): [196..197]
 a50(r124): [200..201]
 a51(r70): [221..222]
 a52(r122): [223..224]
 a53(r123): [225..226]
 a54(r69): [207..208]
 a55(r120): [209..210]
 a56(r121): [211..212]
 a57(r66): [113..124]
 a58(r68): [113..114]
 a59(r67): [115..116]
 a60(r119): [121..122]
 a61(r65): [125..126]
 a62(r64): [127..128]
 a63(r62): [127..134]
 a64(r63): [129..130]
 a65(r118): [131..132]
 a66(r117): [135..136]
 a67(r116): [234..235]
 a68(r60): [234..237]
 a69(r115): [242..245]
 a70(r114): [248..249]
 a71(r113): [254..257]
 a72(r112): [262..263]
 a73(r110): [266..269]
 a74(r111): [266..267]
 a75(r59): [278..279]
 a76(r109): [284..289]
 a77(r108): [288..291]
 a78(r107): [309..310]
 a79(r106): [315..318]
Compressing live ranges: from 327 to 134 - 40%
Ranges after the compression:
 a0(r105): [0..1]
 a1(r104): [2..3]
 a2(r103): [4..5]
 a3(r94): [4..23]
 a4(r102): [6..7]
 a5(r101): [8..9]
 a6(r100): [10..11]
 a7(r99): [12..13]
 a8(r95): [12..21]
 a9(r98): [14..15]
 a10(r97): [16..17]
 a11(r96): [18..19]
 a12(r138): [20..21]
 a13(r137): [22..23]
 a14(r93): [24..25]
 a15(r92): [26..27]
 a16(r91): [28..29]
 a17(r136): [30..31]
 a18(r90): [32..33]
 a19(r82): [32..49]
 a20(r89): [34..35]
 a21(r88): [36..37]
 a22(r87): [38..39]
 a23(r83): [38..47]
 a24(r86): [40..41]
 a25(r85): [42..43]
 a26(r84): [44..45]
 a27(r135): [46..47]
 a28(r134): [48..49]
 a29(r81): [50..51]
 a30(r80): [52..53]
 a31(r133): [54..55]
 a32(r132): [56..57]
 a33(r131): [74..75]
 a34(r61): [76..77]
 a35(r130): [78..79]
 a36(r129): [78..79]
 a37(r76): [80..89]
 a38(r79): [80..81]
 a39(r78): [82..83]
 a40(r77): [84..85]
 a41(r127): [86..87]
 a42(r126): [86..89]
 a43(r128): [88..89]
 a44(r75): [90..91]
 a45(r74): [92..93]
 a46(r73): [94..95]
 a47(r71): [94..99]
 a48(r72): [96..97]
 a49(r125): [98..99]
 a50(r124): [100..101]
 a51(r70): [108..109]
 a52(r122): [110..111]
 a53(r123): [112..113]
 a54(r69): [102..103]
 a55(r120): [104..105]
 a56(r121): [106..107]
 a57(r66): [58..63]
 a58(r68): [58..59]
 a59(r67): [60..61]
 a60(r119): [62..63]
 a61(r65): [64..65]
 a62(r64): [66..67]
 a63(r62): [66..71]
 a64(r63): [68..69]
 a65(r118): [70..71]
 a66(r117): [72..73]
 a67(r116): [114..115]
 a68(r60): [114..115]
 a69(r115): [116..117]
 a70(r114): [118..119]
 a71(r113): [120..121]
 a72(r112): [122..123]
 a73(r110): [124..125]
 a74(r111): [124..125]
 a75(r59): [126..127]
 a76(r109): [128..129]
 a77(r108): [128..129]
 a78(r107): [130..131]
 a79(r106): [132..133]
  regions=1, blocks=23, points=134
    allocnos=80 (big 0), copies=0, conflicts=0, ranges=80
Disposition:
   75:r59  l0     0   68:r60  l0     0   34:r61  l0     0   63:r62  l0     0
   64:r63  l0     1   62:r64  l0     1   61:r65  l0     0   57:r66  l0     3
   59:r67  l0   mem   58:r68  l0     8   54:r69  l0     0   51:r70  l0     0
   47:r71  l0     0   48:r72  l0     1   46:r73  l0     1   45:r74  l0     0
   44:r75  l0     0   37:r76  l0     3   40:r77  l0     0   39:r78  l0   mem
   38:r79  l0     8   30:r80  l0     0   29:r81  l0     0   19:r82  l0     9
   23:r83  l0     1   26:r84  l0     0   25:r85  l0     0   24:r86  l0     0
   22:r87  l0     0   21:r88  l0     0   20:r89  l0     0   18:r90  l0     8
   16:r91  l0     0   15:r92  l0     0   14:r93  l0     0    3:r94  l0     9
    8:r95  l0     1   11:r96  l0     0   10:r97  l0     0    9:r98  l0     0
    7:r99  l0     0    6:r100 l0     0    5:r101 l0     0    4:r102 l0     0
    2:r103 l0     8    1:r104 l0     0    0:r105 l0     0   79:r106 l0     0
   78:r107 l0     0   77:r108 l0     1   76:r109 l0     0   73:r110 l0     0
   74:r111 l0     1   72:r112 l0     0   71:r113 l0     0   70:r114 l0     0
   69:r115 l0     0   67:r116 l0     1   66:r117 l0     0   65:r118 l0     1
   60:r119 l0     0   55:r120 l0     0   56:r121 l0     0   52:r122 l0     0
   53:r123 l0     0   50:r124 l0     0   49:r125 l0     1   42:r126 l0     1
   41:r127 l0     0   43:r128 l0     0   36:r129 l0     1   35:r130 l0     0
   33:r131 l0     0   32:r132 l0     0   31:r133 l0     0   28:r134 l0     0
   27:r135 l0     0   17:r136 l0     0   13:r137 l0     0   12:r138 l0     0
+++Costs: overall 21, reg -17, mem 38, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


get_boundary

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={14d,7u} r1={15d,2u} r2={13d} r4={18d,6u} r5={24d,12u} r6={1d,22u} r7={1d,34u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r16={1d,21u} r17={46d,11u} r18={12d} r19={12d} r20={1d,71u} r21={13d,2u} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,2u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,2u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,2u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,2u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} 
;;    total ref usage 952{680d,272u,0e} in 153{141 regular + 12 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 106 107
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 bound_file+0 S8 A64])
        (reg:DI 5 di [ bound_file ])) mQuery.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ bound_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])
        (reg:DI 4 si [ config ])) mQuery.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ config ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3745+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:159 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 5 9 2 (set (reg:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 bound_file+0 S8 A64])) mQuery.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 106)) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 106)
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:160 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 107)
        (reg:DI 0 ax)) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
        (reg:DI 107)) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 107)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:162 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:162 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f8734794980 *.LC33>)) mQuery.c:162 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:162 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 18 20 4 70 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 208 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32])
        (const_int 0 [0])) mQuery.c:165 89 {*movsi_internal}
     (nil))
(jump_insn 208 21 209 4 (set (pc)
        (label_ref 26)) mQuery.c:165 650 {jump}
     (nil)
 -> 26)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 209 208 35)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 35 209 24 5 72 "" [1 uses])
(note 24 35 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:165 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 108 109
(code_label 26 25 27 6 71 "" [1 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:165 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg:DI 109)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:165 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 30 29 31 6 (set (reg:DI 1 dx)
        (reg:DI 108)) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(insn 31 30 32 6 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:165 89 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:DI 5 di)
        (reg:DI 109)) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(call_insn 33 32 34 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:165 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 34 33 36 6 (set (reg/f:DI 59 [ D.3736 ])
        (reg:DI 0 ax)) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 36 34 37 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 59 [ D.3736 ])
            (const_int 0 [0]))) mQuery.c:165 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.3736 ])
        (nil)))
(jump_insn 37 36 38 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) mQuery.c:165 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 110 111 112 113 114 115 116
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:167 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 7 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32])) mQuery.c:167 89 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (set (mem/j:SI (reg/f:DI 110) [0 config_9(D)->Nbound+0 S4 A128])
        (reg:SI 111)) mQuery.c:167 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111)
        (expr_list:REG_DEAD (reg/f:DI 110)
            (nil))))
(insn 42 41 43 7 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 7 (set (reg:DI 5 di)
        (reg:DI 112)) mQuery.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(call_insn 44 43 45 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:168 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 7 (set (reg:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 bound_file+0 S8 A64])) mQuery.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 7 (set (reg:DI 5 di)
        (reg:DI 113)) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(call_insn 48 47 49 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:170 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 49 48 50 7 (set (reg:DI 114)
        (reg:DI 0 ax)) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 50 49 51 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
        (reg:DI 114)) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 114)
        (nil)))
(insn 51 50 52 7 (set (reg:SI 115)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32])) mQuery.c:172 89 {*movsi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mQuery.c:172 89 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:SI 5 di)
        (reg:SI 115)) mQuery.c:172 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(call_insn 54 53 55 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:172 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 55 54 56 7 (set (reg/f:DI 60 [ D.3737 ])
        (reg:DI 0 ax)) mQuery.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 56 55 57 7 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:172 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 116)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])
        (reg/f:DI 60 [ D.3737 ])) mQuery.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.3737 ])
            (nil))))
(insn 58 57 210 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(jump_insn 210 58 211 7 (set (pc)
        (label_ref 115)) mQuery.c:173 650 {jump}
     (nil)
 -> 115)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 211 210 127)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 117 118 119
(code_label 127 211 61 8 78 "" [1 uses])
(note 61 127 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 62 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 117)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 117)
        (nil)))
(insn 64 63 65 8 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:174 89 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 63 [ D.3738 ])
        (sign_extend:DI (reg:SI 118))) mQuery.c:174 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 64 [ D.3738 ])
                (ashift:DI (reg:DI 63 [ D.3738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 63 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 65 [ D.3737 ])
                (plus:DI (reg/f:DI 62 [ D.3737 ])
                    (reg:DI 64 [ D.3738 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.3738 ])
        (expr_list:REG_DEAD (reg/f:DI 62 [ D.3737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 68 67 69 8 (set (reg/f:DI 66 [ D.3739 ])
        (mem/f:DI (reg/f:DI 65 [ D.3737 ]) [0 *_17+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.3737 ])
        (nil)))
(insn 69 68 70 8 (parallel [
            (set (reg:DI 119)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 70 69 71 8 (set (reg:DI 5 di)
        (reg:DI 119)) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 119)
        (nil)))
(call_insn/i 71 70 72 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:174 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 72 71 73 8 (set (reg:DF 67 [ D.3740 ])
        (reg:DF 21 xmm0)) mQuery.c:174 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 73 72 74 8 (set (reg:XF 68 [ D.3741 ])
        (float_extend:XF (reg:DF 67 [ D.3740 ]))) mQuery.c:174 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.3740 ])
        (nil)))
(insn 74 73 75 8 (set (mem:XF (reg/f:DI 66 [ D.3739 ]) [0 *_18+0 S16 A128])
        (reg:XF 68 [ D.3741 ])) mQuery.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.3741 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.3739 ])
            (nil))))
(insn 75 74 212 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(jump_insn 212 75 213 8 (set (pc)
        (label_ref 80)) mQuery.c:175 650 {jump}
     (nil)
 -> 80)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 213 212 91)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 91 213 78 9 76 "" [1 uses])
(note 78 91 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:175 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 120 121
(code_label 80 79 81 10 74 "" [1 uses])
(note 81 80 82 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 10 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:DI 120)
        (sign_extend:DI (reg:SI 121))) mQuery.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 84 83 85 10 (set (reg:QI 69 [ D.3742 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 120))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:175 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 120)
        (nil)))
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 69 [ D.3742 ])
            (const_int 9 [0x9]))) mQuery.c:175 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 69 [ D.3742 ])
        (nil)))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mQuery.c:175 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 94)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 122 123
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg:SI 123)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg:DI 122)
        (sign_extend:DI (reg:SI 123))) mQuery.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(insn 90 89 92 11 (set (reg:QI 70 [ D.3742 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 122))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:175 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 122)
        (nil)))
(insn 92 90 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 70 [ D.3742 ])
            (const_int 32 [0x20]))) mQuery.c:175 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 70 [ D.3742 ])
        (nil)))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) mQuery.c:175 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 91)
;;  succ:       9
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71 72 73 74 75 76 77 78 79 124 125 126 127 128
(code_label 94 93 95 12 75 "" [1 uses])
(note 95 94 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 12 (set (reg/f:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 12 (set (reg/f:DI 71 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 124)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 124)
        (nil)))
(insn 98 97 99 12 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:176 89 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg:DI 72 [ D.3738 ])
        (sign_extend:DI (reg:SI 125))) mQuery.c:176 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 100 99 101 12 (parallel [
            (set (reg:DI 73 [ D.3738 ])
                (ashift:DI (reg:DI 72 [ D.3738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 72 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 101 100 102 12 (parallel [
            (set (reg/f:DI 74 [ D.3737 ])
                (plus:DI (reg/f:DI 71 [ D.3737 ])
                    (reg:DI 73 [ D.3738 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 73 [ D.3738 ])
        (expr_list:REG_DEAD (reg/f:DI 71 [ D.3737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 102 101 103 12 (set (reg/f:DI 75 [ D.3739 ])
        (mem/f:DI (reg/f:DI 74 [ D.3737 ]) [0 *_28+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 74 [ D.3737 ])
        (nil)))
(insn 103 102 104 12 (parallel [
            (set (reg/f:DI 76 [ D.3739 ])
                (plus:DI (reg/f:DI 75 [ D.3739 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.3739 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 105 104 106 12 (parallel [
            (set (reg:DI 126)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 106 105 107 12 (set (reg:SI 128)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50028 [0xffffffffffff3c94])) [0 j+0 S4 A32])) mQuery.c:176 89 {*movsi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:DI 127)
        (sign_extend:DI (reg:SI 128))) mQuery.c:176 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 108 107 109 12 (parallel [
            (set (reg/f:DI 77 [ D.3736 ])
                (plus:DI (reg:DI 126)
                    (reg:DI 127)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127)
        (expr_list:REG_DEAD (reg:DI 126)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 109 108 110 12 (set (reg:DI 5 di)
        (reg/f:DI 77 [ D.3736 ])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 77 [ D.3736 ])
        (nil)))
(call_insn/i 110 109 111 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:176 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 111 110 112 12 (set (reg:DF 78 [ D.3740 ])
        (reg:DF 21 xmm0)) mQuery.c:176 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 112 111 113 12 (set (reg:XF 79 [ D.3741 ])
        (float_extend:XF (reg:DF 78 [ D.3740 ]))) mQuery.c:176 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 78 [ D.3740 ])
        (nil)))
(insn 113 112 114 12 (set (mem:XF (reg/f:DI 76 [ D.3739 ]) [0 *_30+0 S16 A128])
        (reg:XF 79 [ D.3741 ])) mQuery.c:176 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 79 [ D.3741 ])
        (expr_list:REG_DEAD (reg/f:DI 76 [ D.3739 ])
            (nil))))
(insn 114 113 115 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:173 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 129 130
(code_label 115 114 116 13 73 "" [1 uses])
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:173 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 13 (parallel [
            (set (reg:DI 130)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:173 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 119 118 120 13 (set (reg:DI 1 dx)
        (reg:DI 129)) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 129)
        (nil)))
(insn 120 119 121 13 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(insn 121 120 122 13 (set (reg:DI 5 di)
        (reg:DI 130)) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 130)
        (nil)))
(call_insn 122 121 123 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:173 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 123 122 124 13 (set (reg/f:DI 61 [ D.3736 ])
        (reg:DI 0 ax)) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 124 123 125 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 61 [ D.3736 ])
            (const_int 0 [0]))) mQuery.c:173 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.3736 ])
        (nil)))
(jump_insn 125 124 126 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) mQuery.c:173 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 131)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131
(note 126 125 128 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 128 126 129 14 (set (reg:SI 131)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(insn 129 128 130 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 131)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50036 [0xffffffffffff3c8c])) [0 Nbound+0 S4 A32]))) mQuery.c:173 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 131)
        (nil)))
(jump_insn 130 129 131 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) mQuery.c:173 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 127)
;;  succ:       8
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 80 81 82 83 84 85 86 87 88 89 90 132 133 134 135
(code_label 131 130 132 15 77 "" [1 uses])
(note 132 131 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 15 (set (reg:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 134 133 135 15 (set (reg:DI 5 di)
        (reg:DI 132)) mQuery.c:179 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 132)
        (nil)))
(call_insn 135 134 136 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:179 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 136 135 137 15 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 137 136 138 15 (set (reg/f:DI 80 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 133)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))
(insn 138 137 139 15 (set (reg/f:DI 81 [ D.3739 ])
        (mem/f:DI (reg/f:DI 80 [ D.3737 ]) [0 *_36+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 80 [ D.3737 ])
        (nil)))
(insn 139 138 140 15 (set (reg:XF 82 [ D.3741 ])
        (mem:XF (reg/f:DI 81 [ D.3739 ]) [0 *_37+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 81 [ D.3739 ])
        (nil)))
(insn 140 139 141 15 (set (reg/f:DI 134)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 15 (set (reg/f:DI 83 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 134)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 134)
        (nil)))
(insn 142 141 143 15 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 15 (set (reg:SI 84 [ D.3743 ])
        (mem/j:SI (reg/f:DI 135) [0 config_9(D)->Nbound+0 S4 A128])) mQuery.c:181 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 144 143 145 15 (set (reg:DI 85 [ D.3738 ])
        (sign_extend:DI (reg:SI 84 [ D.3743 ]))) mQuery.c:181 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 84 [ D.3743 ])
        (nil)))
(insn 145 144 146 15 (parallel [
            (set (reg:DI 86 [ D.3738 ])
                (ashift:DI (reg:DI 85 [ D.3738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 85 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 146 145 147 15 (parallel [
            (set (reg:DI 87 [ D.3744 ])
                (plus:DI (reg:DI 86 [ D.3738 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 15 (parallel [
            (set (reg/f:DI 88 [ D.3737 ])
                (plus:DI (reg/f:DI 83 [ D.3737 ])
                    (reg:DI 87 [ D.3744 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ D.3744 ])
        (expr_list:REG_DEAD (reg/f:DI 83 [ D.3737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 148 147 149 15 (set (reg/f:DI 89 [ D.3739 ])
        (mem/f:DI (reg/f:DI 88 [ D.3737 ]) [0 *_44+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 88 [ D.3737 ])
        (nil)))
(insn 149 148 150 15 (set (reg:XF 90 [ D.3741 ])
        (mem:XF (reg/f:DI 89 [ D.3739 ]) [0 *_45+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.3739 ])
        (nil)))
(insn 150 149 151 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 82 [ D.3741 ])
            (reg:XF 90 [ D.3741 ]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 151 150 201 15 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 178)
;;  succ:       19
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90
;; lr  def 	 17 [flags]
(note 201 151 152 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 152 201 153 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 82 [ D.3741 ])
            (reg:XF 90 [ D.3741 ]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 90 [ D.3741 ])
        (expr_list:REG_DEAD (reg:XF 82 [ D.3741 ])
            (nil))))
(jump_insn 153 152 154 16 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 178)
;;  succ:       19
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 98 99 100 101 102 103 136 137 138
(note 154 153 155 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 17 (set (reg/f:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 17 (set (reg/f:DI 91 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 136)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))
(insn 157 156 158 17 (set (reg/f:DI 92 [ D.3739 ])
        (mem/f:DI (reg/f:DI 91 [ D.3737 ]) [0 *_47+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.3737 ])
        (nil)))
(insn 158 157 159 17 (parallel [
            (set (reg/f:DI 93 [ D.3739 ])
                (plus:DI (reg/f:DI 92 [ D.3739 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 92 [ D.3739 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 159 158 160 17 (set (reg:XF 94 [ D.3741 ])
        (mem:XF (reg/f:DI 93 [ D.3739 ]) [0 *_49+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 93 [ D.3739 ])
        (nil)))
(insn 160 159 161 17 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 161 160 162 17 (set (reg/f:DI 95 [ D.3737 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 137)
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 137)
        (nil)))
(insn 162 161 163 17 (set (reg/f:DI 138)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 163 162 164 17 (set (reg:SI 96 [ D.3743 ])
        (mem/j:SI (reg/f:DI 138) [0 config_9(D)->Nbound+0 S4 A128])) mQuery.c:181 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))
(insn 164 163 165 17 (set (reg:DI 97 [ D.3738 ])
        (sign_extend:DI (reg:SI 96 [ D.3743 ]))) mQuery.c:181 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 96 [ D.3743 ])
        (nil)))
(insn 165 164 166 17 (parallel [
            (set (reg:DI 98 [ D.3738 ])
                (ashift:DI (reg:DI 97 [ D.3738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 97 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 166 165 167 17 (parallel [
            (set (reg:DI 99 [ D.3744 ])
                (plus:DI (reg:DI 98 [ D.3738 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 98 [ D.3738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 167 166 168 17 (parallel [
            (set (reg/f:DI 100 [ D.3737 ])
                (plus:DI (reg/f:DI 95 [ D.3737 ])
                    (reg:DI 99 [ D.3744 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ D.3744 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.3737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 168 167 169 17 (set (reg/f:DI 101 [ D.3739 ])
        (mem/f:DI (reg/f:DI 100 [ D.3737 ]) [0 *_56+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 100 [ D.3737 ])
        (nil)))
(insn 169 168 170 17 (parallel [
            (set (reg/f:DI 102 [ D.3739 ])
                (plus:DI (reg/f:DI 101 [ D.3739 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 101 [ D.3739 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 170 169 171 17 (set (reg:XF 103 [ D.3741 ])
        (mem:XF (reg/f:DI 102 [ D.3739 ]) [0 *_58+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 102 [ D.3739 ])
        (nil)))
(insn 171 170 172 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 94 [ D.3741 ])
            (reg:XF 103 [ D.3741 ]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 172 171 202 17 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 178)
;;  succ:       19
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103
;; lr  def 	 17 [flags]
(note 202 172 173 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 173 202 174 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 94 [ D.3741 ])
            (reg:XF 103 [ D.3741 ]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 103 [ D.3741 ])
        (expr_list:REG_DEAD (reg:XF 94 [ D.3741 ])
            (nil))))
(jump_insn 174 173 178 18 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 182)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 182)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              18 (FALLTHRU)
;;              15
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 178 174 179 19 79 "" [3 uses])
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f8734794a18 *.LC34>)) mQuery.c:182 87 {*movdi_internal_rex64}
     (nil))
(call_insn 181 180 182 19 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:182 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 104 105
(code_label 182 181 183 20 80 "" [1 uses])
(note 183 182 184 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 187 20 (set (reg:SI 104 [ D.3743 ])
        (const_int 1 [0x1])) mQuery.c:184 89 {*movsi_internal}
     (nil))
(insn 187 184 191 20 (set (reg:SI 105 [ <retval> ])
        (reg:SI 104 [ D.3743 ])) mQuery.c:184 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104 [ D.3743 ])
        (nil)))
(insn 191 187 194 20 (set (reg/i:SI 0 ax)
        (reg:SI 105 [ <retval> ])) mQuery.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [ <retval> ])
        (nil)))
(insn 194 191 195 20 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3745+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mQuery.c:185 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 195 194 206 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) mQuery.c:185 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 198)
;;  succ:       22
;;              21 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 206 195 196 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(call_insn 196 206 197 21 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:185 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 197 196 198)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 198 197 207 22 83 "" [1 uses])
(note 207 198 199 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 199 207 0 22 (use (reg/i:SI 0 ax)) mQuery.c:185 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_temp_shock (get_temp_shock, funcdef_no=8, decl_uid=1768, cgraph_uid=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 28 count 21 (    1)
Building IRA IR
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 161.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r110,l0) best DIREG, allocno GENERAL_REGS
    r109: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r109,l0) best DREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a52 (r85,l0) best DREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r81: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r81,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r80: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a9 (r80,l0) best NO_REGS, allocno NO_REGS
    r79: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r79,l0) best DIREG, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a34 (r68,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r67: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a35 (r67,l0) best NO_REGS, allocno NO_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r61,l0) best AREG, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a4(r61,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a5(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r109,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r81,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a9(r80,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a10(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a11(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a16(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a20(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a22(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a23(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a25(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a26(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a27(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a29(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a32(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a34(r68,l0) costs: AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 INDEX_REGS:21 GENERAL_REGS:21 LEGACY_REGS:21 CLOBBERED_REGS:21 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:42 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:16
  a35(r67,l0) costs: AREG:23 DREG:23 CREG:23 BREG:23 SIREG:23 DIREG:23 AD_REGS:23 Q_REGS:23 NON_Q_REGS:23 INDEX_REGS:23 GENERAL_REGS:23 LEGACY_REGS:23 CLOBBERED_REGS:23 FP_TOP_REG:21 FP_SECOND_REG:21 FLOAT_REGS:21 SSE_FIRST_REG:20 SSE_REGS:21 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:38 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:42 ALL_REGS:131070 MEM:19
  a36(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a39(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a43(r92,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a44(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a45(r60,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a46(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a48(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a49(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a50(r59,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a51(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a52(r85,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a53(r84,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 164(l0): point = 0
   Insn 161(l0): point = 3
   Insn 160(l0): point = 6
   Insn 159(l0): point = 8
   Insn 156(l0): point = 10
   Insn 152(l0): point = 12
   Insn 149(l0): point = 14
   Insn 148(l0): point = 16
   Insn 147(l0): point = 18
   Insn 146(l0): point = 20
   Insn 173(l0): point = 23
   Insn 72(l0): point = 25
   Insn 71(l0): point = 27
   Insn 70(l0): point = 29
   Insn 69(l0): point = 31
   Insn 68(l0): point = 33
   Insn 67(l0): point = 35
   Insn 66(l0): point = 37
   Insn 65(l0): point = 39
   Insn 64(l0): point = 41
   Insn 63(l0): point = 43
   Insn 62(l0): point = 45
   Insn 61(l0): point = 47
   Insn 60(l0): point = 49
   Insn 59(l0): point = 51
   Insn 143(l0): point = 54
   Insn 142(l0): point = 56
   Insn 141(l0): point = 58
   Insn 138(l0): point = 61
   Insn 137(l0): point = 63
   Insn 136(l0): point = 65
   Insn 135(l0): point = 67
   Insn 134(l0): point = 69
   Insn 133(l0): point = 71
   Insn 132(l0): point = 73
   Insn 131(l0): point = 75
   Insn 130(l0): point = 77
   Insn 127(l0): point = 80
   Insn 126(l0): point = 82
   Insn 125(l0): point = 84
   Insn 124(l0): point = 86
   Insn 123(l0): point = 88
   Insn 122(l0): point = 90
   Insn 121(l0): point = 92
   Insn 120(l0): point = 94
   Insn 119(l0): point = 96
   Insn 118(l0): point = 98
   Insn 117(l0): point = 100
   Insn 116(l0): point = 102
   Insn 115(l0): point = 104
   Insn 114(l0): point = 106
   Insn 113(l0): point = 108
   Insn 112(l0): point = 110
   Insn 111(l0): point = 112
   Insn 110(l0): point = 114
   Insn 109(l0): point = 116
   Insn 103(l0): point = 119
   Insn 102(l0): point = 121
   Insn 101(l0): point = 123
   Insn 100(l0): point = 125
   Insn 99(l0): point = 127
   Insn 83(l0): point = 130
   Insn 82(l0): point = 132
   Insn 81(l0): point = 134
   Insn 80(l0): point = 136
   Insn 79(l0): point = 138
   Insn 76(l0): point = 141
   Insn 89(l0): point = 144
   Insn 88(l0): point = 146
   Insn 87(l0): point = 148
   Insn 86(l0): point = 150
   Insn 85(l0): point = 152
   Insn 96(l0): point = 155
   Insn 95(l0): point = 157
   Insn 93(l0): point = 159
   Insn 92(l0): point = 161
   Insn 91(l0): point = 163
   Insn 106(l0): point = 166
   Insn 105(l0): point = 168
   Insn 171(l0): point = 171
   Insn 55(l0): point = 173
   Insn 54(l0): point = 175
   Insn 53(l0): point = 177
   Insn 52(l0): point = 179
   Insn 51(l0): point = 181
   Insn 50(l0): point = 183
   Insn 49(l0): point = 185
   Insn 48(l0): point = 187
   Insn 47(l0): point = 189
   Insn 46(l0): point = 191
   Insn 45(l0): point = 193
   Insn 44(l0): point = 195
   Insn 43(l0): point = 197
   Insn 42(l0): point = 199
   Insn 41(l0): point = 201
   Insn 40(l0): point = 203
   Insn 39(l0): point = 205
   Insn 38(l0): point = 207
   Insn 37(l0): point = 209
   Insn 23(l0): point = 212
   Insn 35(l0): point = 215
   Insn 34(l0): point = 217
   Insn 32(l0): point = 219
   Insn 31(l0): point = 221
   Insn 30(l0): point = 223
   Insn 29(l0): point = 225
   Insn 28(l0): point = 227
   Insn 27(l0): point = 229
   Insn 26(l0): point = 231
   Insn 169(l0): point = 234
   Insn 19(l0): point = 236
   Insn 16(l0): point = 239
   Insn 15(l0): point = 241
   Insn 13(l0): point = 244
   Insn 12(l0): point = 246
   Insn 11(l0): point = 248
   Insn 10(l0): point = 250
   Insn 9(l0): point = 252
   Insn 8(l0): point = 254
   Insn 7(l0): point = 256
   Insn 4(l0): point = 258
   Insn 2(l0): point = 260
 a0(r83): [11..12]
 a1(r82): [13..14]
 a2(r112): [19..20]
 a3(r111): [57..58]
 a4(r61): [64..65]
 a5(r110): [70..75]
 a6(r109): [74..77]
 a7(r78): [83..102]
 a8(r81): [83..84]
 a9(r80): [85..86]
 a10(r79): [91..92]
 a11(r107): [93..94]
 a12(r106): [93..98]
 a13(r108): [95..96]
 a14(r77): [103..104]
 a15(r76): [105..106]
 a16(r75): [107..108]
 a17(r73): [107..114]
 a18(r74): [109..110]
 a19(r105): [111..112]
 a20(r104): [115..116]
 a21(r72): [122..123]
 a22(r102): [124..125]
 a23(r103): [126..127]
 a24(r71): [158..159]
 a25(r100): [160..161]
 a26(r101): [162..163]
 a27(r70): [147..148]
 a28(r98): [149..150]
 a29(r99): [151..152]
 a30(r69): [133..134]
 a31(r96): [135..136]
 a32(r97): [137..138]
 a33(r66): [28..39]
 a34(r68): [28..29]
 a35(r67): [30..31]
 a36(r95): [36..37]
 a37(r65): [40..41]
 a38(r64): [42..43]
 a39(r62): [42..49]
 a40(r63): [44..45]
 a41(r94): [46..47]
 a42(r93): [50..51]
 a43(r92): [176..177]
 a44(r91): [186..187]
 a45(r60): [186..189]
 a46(r90): [194..197]
 a47(r88): [200..203]
 a48(r89): [200..201]
 a49(r87): [208..209]
 a50(r59): [218..219]
 a51(r86): [224..229]
 a52(r85): [228..231]
 a53(r84): [249..250]
Compressing live ranges: from 263 to 90 - 34%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [2..3]
 a2(r112): [4..5]
 a3(r111): [22..23]
 a4(r61): [24..25]
 a5(r110): [26..27]
 a6(r109): [26..27]
 a7(r78): [28..37]
 a8(r81): [28..29]
 a9(r80): [30..31]
 a10(r79): [32..33]
 a11(r107): [34..35]
 a12(r106): [34..37]
 a13(r108): [36..37]
 a14(r77): [38..39]
 a15(r76): [40..41]
 a16(r75): [42..43]
 a17(r73): [42..47]
 a18(r74): [44..45]
 a19(r105): [46..47]
 a20(r104): [48..49]
 a21(r72): [50..51]
 a22(r102): [52..53]
 a23(r103): [54..55]
 a24(r71): [68..69]
 a25(r100): [70..71]
 a26(r101): [72..73]
 a27(r70): [62..63]
 a28(r98): [64..65]
 a29(r99): [66..67]
 a30(r69): [56..57]
 a31(r96): [58..59]
 a32(r97): [60..61]
 a33(r66): [6..11]
 a34(r68): [6..7]
 a35(r67): [8..9]
 a36(r95): [10..11]
 a37(r65): [12..13]
 a38(r64): [14..15]
 a39(r62): [14..19]
 a40(r63): [16..17]
 a41(r94): [18..19]
 a42(r93): [20..21]
 a43(r92): [74..75]
 a44(r91): [76..77]
 a45(r60): [76..77]
 a46(r90): [78..79]
 a47(r88): [80..81]
 a48(r89): [80..81]
 a49(r87): [82..83]
 a50(r59): [84..85]
 a51(r86): [86..87]
 a52(r85): [86..87]
 a53(r84): [88..89]
  regions=1, blocks=21, points=90
    allocnos=54 (big 0), copies=0, conflicts=0, ranges=54
Disposition:
   50:r59  l0     0   45:r60  l0     0    4:r61  l0     0   39:r62  l0     0
   40:r63  l0     1   38:r64  l0     1   37:r65  l0     0   33:r66  l0     3
   35:r67  l0   mem   34:r68  l0     8   30:r69  l0     0   27:r70  l0     0
   24:r71  l0     0   21:r72  l0     0   17:r73  l0     0   18:r74  l0     1
   16:r75  l0     1   15:r76  l0     0   14:r77  l0     0    7:r78  l0     3
   10:r79  l0     0    9:r80  l0   mem    8:r81  l0     8    1:r82  l0     0
    0:r83  l0     0   53:r84  l0     0   52:r85  l0     1   51:r86  l0     0
   49:r87  l0     0   47:r88  l0     0   48:r89  l0     1   46:r90  l0     0
   44:r91  l0     1   43:r92  l0     0   42:r93  l0     0   41:r94  l0     1
   36:r95  l0     0   31:r96  l0     0   32:r97  l0     0   28:r98  l0     0
   29:r99  l0     0   25:r100 l0     0   26:r101 l0     0   22:r102 l0     0
   23:r103 l0     0   20:r104 l0     0   19:r105 l0     1   12:r106 l0     1
   11:r107 l0     0   13:r108 l0     0    6:r109 l0     1    5:r110 l0     0
    3:r111 l0     0    2:r112 l0     0
+++Costs: overall 23, reg -15, mem 38, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


get_temp_shock

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={14d,7u} r1={15d,2u} r2={13d} r4={18d,5u} r5={24d,12u} r6={1d,20u} r7={1d,32u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r16={1d,19u} r17={36d,9u} r18={12d} r19={12d} r20={1d,64u} r21={13d,2u} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} 
;;    total ref usage 870{644d,226u,0e} in 122{110 regular + 12 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [0 conf+0 S8 A64])
        (reg:DI 5 di [ conf ])) mQuery.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ conf ])
        (nil)))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3756+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:187 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 7 4 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f87347b04c0 *.LC35>)) mQuery.c:189 87 {*movdi_internal_rex64}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:189 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 84)
        (reg:DI 0 ax)) mQuery.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])
        (reg:DI 84)) mQuery.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 84)
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:190 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) mQuery.c:190 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f87347b0558 *.LC36>)) mQuery.c:190 87 {*movdi_internal_rex64}
     (nil))
(call_insn 16 15 17 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:190 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 17 16 18 4 87 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 169 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32])
        (const_int 0 [0])) mQuery.c:194 89 {*movsi_internal}
     (nil))
(jump_insn 169 19 170 4 (set (pc)
        (label_ref 24)) mQuery.c:194 650 {jump}
     (nil)
 -> 24)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 170 169 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 33 170 22 5 89 "" [1 uses])
(note 22 33 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:194 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 85 86
(code_label 24 23 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mQuery.c:194 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:DI 86)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:194 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 28 27 29 6 (set (reg:DI 1 dx)
        (reg:DI 85)) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 85)
        (nil)))
(insn 29 28 30 6 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mQuery.c:194 89 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 5 di)
        (reg:DI 86)) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 86)
        (nil)))
(call_insn 31 30 32 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:194 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 32 31 34 6 (set (reg/f:DI 59 [ D.3748 ])
        (reg:DI 0 ax)) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 34 32 35 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 59 [ D.3748 ])
            (const_int 0 [0]))) mQuery.c:194 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.3748 ])
        (nil)))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mQuery.c:194 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 33)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 87 88 89 90 91 92
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mQuery.c:195 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 7 (set (reg:DI 5 di)
        (reg:DI 87)) mQuery.c:195 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(call_insn 39 38 40 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:195 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 40 39 41 7 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [0 conf+0 S8 A64])) mQuery.c:197 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 7 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32])) mQuery.c:197 89 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (mem/j:SI (plus:DI (reg/f:DI 88)
                (const_int 128 [0x80])) [0 conf_8(D)->n_point_shock+0 S4 A128])
        (reg:SI 89)) mQuery.c:197 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (expr_list:REG_DEAD (reg/f:DI 88)
            (nil))))
(insn 43 42 44 7 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32])) mQuery.c:198 89 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mQuery.c:198 89 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 5 di)
        (reg:SI 90)) mQuery.c:198 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(call_insn 46 45 47 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:198 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 47 46 48 7 (set (reg/f:DI 60 [ D.3749 ])
        (reg:DI 0 ax)) mQuery.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 48 47 49 7 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [0 conf+0 S8 A64])) mQuery.c:198 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 91)
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])
        (reg/f:DI 60 [ D.3749 ])) mQuery.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.3749 ])
            (nil))))
(insn 50 49 51 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:200 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f87347b04c0 *.LC35>)) mQuery.c:200 87 {*movdi_internal_rex64}
     (nil))
(call_insn 52 51 53 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:200 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 53 52 54 7 (set (reg:DI 92)
        (reg:DI 0 ax)) mQuery.c:200 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 54 53 55 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])
        (reg:DI 92)) mQuery.c:200 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(insn 55 54 171 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(jump_insn 171 55 172 7 (set (pc)
        (label_ref 128)) mQuery.c:201 650 {jump}
     (nil)
 -> 128)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 172 171 140)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 93 94 95
(code_label 140 172 58 8 96 "" [1 uses])
(note 58 140 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [0 conf+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 8 (set (reg/f:DI 62 [ D.3749 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 93)
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 61 60 62 8 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])) mQuery.c:202 89 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (reg:DI 63 [ D.3750 ])
        (sign_extend:DI (reg:SI 94))) mQuery.c:202 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(insn 63 62 64 8 (parallel [
            (set (reg:DI 64 [ D.3750 ])
                (ashift:DI (reg:DI 63 [ D.3750 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 63 [ D.3750 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 8 (parallel [
            (set (reg/f:DI 65 [ D.3749 ])
                (plus:DI (reg/f:DI 62 [ D.3749 ])
                    (reg:DI 64 [ D.3750 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 64 [ D.3750 ])
        (expr_list:REG_DEAD (reg/f:DI 62 [ D.3749 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 65 64 66 8 (set (reg/f:DI 66 [ D.3751 ])
        (mem/f:DI (reg/f:DI 65 [ D.3749 ]) [0 *_16+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ D.3749 ])
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 67 66 68 8 (set (reg:DI 5 di)
        (reg:DI 95)) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(call_insn/i 68 67 69 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:202 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 8 (set (reg:DF 67 [ D.3752 ])
        (reg:DF 21 xmm0)) mQuery.c:202 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 70 69 71 8 (set (reg:XF 68 [ D.3753 ])
        (float_extend:XF (reg:DF 67 [ D.3752 ]))) mQuery.c:202 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.3752 ])
        (nil)))
(insn 71 70 72 8 (set (mem:XF (reg/f:DI 66 [ D.3751 ]) [0 *_17+0 S16 A128])
        (reg:XF 68 [ D.3753 ])) mQuery.c:202 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 68 [ D.3753 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.3751 ])
            (nil))))
(insn 72 71 173 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(jump_insn 173 72 174 8 (set (pc)
        (label_ref 77)) mQuery.c:203 650 {jump}
     (nil)
 -> 77)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 174 173 94)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 94 174 75 9 93 "" [1 uses])
(note 75 94 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:203 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 96 97
(code_label 77 76 78 10 91 "" [1 uses])
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (set (reg:SI 97)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 80 79 81 10 (set (reg:DI 96)
        (sign_extend:DI (reg:SI 97))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(insn 81 80 82 10 (set (reg:QI 69 [ D.3754 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 96))
                (const_int -512 [0xfffffffffffffe00])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 82 81 83 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 69 [ D.3754 ])
            (const_int 9 [0x9]))) mQuery.c:203 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 69 [ D.3754 ])
        (nil)))
(jump_insn 83 82 84 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 97)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 98 99
(note 84 83 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 11 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 86 85 87 11 (set (reg:DI 98)
        (sign_extend:DI (reg:SI 99))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 87 86 88 11 (set (reg:QI 70 [ D.3754 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 98))
                (const_int -512 [0xfffffffffffffe00])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 70 [ D.3754 ])
            (const_int 32 [0x20]))) mQuery.c:203 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 70 [ D.3754 ])
        (nil)))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 97)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 71 100 101
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 92 91 93 12 (set (reg:DI 100)
        (sign_extend:DI (reg:SI 101))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 101)
        (nil)))
(insn 93 92 95 12 (set (reg:QI 71 [ D.3754 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 100))
                (const_int -512 [0xfffffffffffffe00])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(insn 95 93 96 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 71 [ D.3754 ])
            (const_int 0 [0]))) mQuery.c:203 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 71 [ D.3754 ])
        (nil)))
(jump_insn 96 95 97 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 94)
;;  succ:       9
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72 102 103
(code_label 97 96 98 13 92 "" [2 uses])
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 13 (set (reg:SI 103)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])) mQuery.c:204 89 {*movsi_internal}
     (nil))
(insn 100 99 101 13 (set (reg:DI 102)
        (sign_extend:DI (reg:SI 103))) mQuery.c:204 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 103)
        (nil)))
(insn 101 100 102 13 (set (reg:QI 72 [ D.3754 ])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 20 frame)
                    (reg:DI 102))
                (const_int -512 [0xfffffffffffffe00])) [0 c S1 A8])) mQuery.c:204 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(insn 102 101 103 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 72 [ D.3754 ])
            (const_int 0 [0]))) mQuery.c:204 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 72 [ D.3754 ])
        (nil)))
(jump_insn 103 102 104 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) mQuery.c:204 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 107)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f87347b05f0 *.LC37>)) mQuery.c:204 87 {*movdi_internal_rex64}
     (nil))
(call_insn 106 105 107 14 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:204 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74 75 76 77 78 79 80 81 104 105 106 107 108
(code_label 107 106 108 15 94 "" [1 uses])
(note 108 107 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 15 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [0 conf+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (nil))
(insn 110 109 111 15 (set (reg/f:DI 73 [ D.3749 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 104)
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 104)
        (nil)))
(insn 111 110 112 15 (set (reg:SI 105)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])) mQuery.c:205 89 {*movsi_internal}
     (nil))
(insn 112 111 113 15 (set (reg:DI 74 [ D.3750 ])
        (sign_extend:DI (reg:SI 105))) mQuery.c:205 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 105)
        (nil)))
(insn 113 112 114 15 (parallel [
            (set (reg:DI 75 [ D.3750 ])
                (ashift:DI (reg:DI 74 [ D.3750 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 74 [ D.3750 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 114 113 115 15 (parallel [
            (set (reg/f:DI 76 [ D.3749 ])
                (plus:DI (reg/f:DI 73 [ D.3749 ])
                    (reg:DI 75 [ D.3750 ])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 75 [ D.3750 ])
        (expr_list:REG_DEAD (reg/f:DI 73 [ D.3749 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 115 114 116 15 (set (reg/f:DI 77 [ D.3751 ])
        (mem/f:DI (reg/f:DI 76 [ D.3749 ]) [0 *_29+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 76 [ D.3749 ])
        (nil)))
(insn 116 115 117 15 (parallel [
            (set (reg/f:DI 78 [ D.3751 ])
                (plus:DI (reg/f:DI 77 [ D.3751 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 77 [ D.3751 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 117 116 118 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 118 117 119 15 (parallel [
            (set (reg:DI 106)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 119 118 120 15 (set (reg:SI 108)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -528 [0xfffffffffffffdf0])) [0 j+0 S4 A32])) mQuery.c:205 89 {*movsi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:DI 107)
        (sign_extend:DI (reg:SI 108))) mQuery.c:205 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 108)
        (nil)))
(insn 121 120 122 15 (parallel [
            (set (reg/f:DI 79 [ D.3748 ])
                (plus:DI (reg:DI 106)
                    (reg:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107)
        (expr_list:REG_DEAD (reg:DI 106)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 122 121 123 15 (set (reg:DI 5 di)
        (reg/f:DI 79 [ D.3748 ])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 79 [ D.3748 ])
        (nil)))
(call_insn/i 123 122 124 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:205 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 124 123 125 15 (set (reg:DF 80 [ D.3752 ])
        (reg:DF 21 xmm0)) mQuery.c:205 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 125 124 126 15 (set (reg:XF 81 [ D.3753 ])
        (float_extend:XF (reg:DF 80 [ D.3752 ]))) mQuery.c:205 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 80 [ D.3752 ])
        (nil)))
(insn 126 125 127 15 (set (mem:XF (reg/f:DI 78 [ D.3751 ]) [0 *_31+0 S16 A128])
        (reg:XF 81 [ D.3753 ])) mQuery.c:205 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 81 [ D.3753 ])
        (expr_list:REG_DEAD (reg/f:DI 78 [ D.3751 ])
            (nil))))
(insn 127 126 128 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:201 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 109 110
(code_label 128 127 129 16 90 "" [1 uses])
(note 129 128 130 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 16 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mQuery.c:201 87 {*movdi_internal_rex64}
     (nil))
(insn 131 130 132 16 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:201 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 132 131 133 16 (set (reg:DI 1 dx)
        (reg:DI 109)) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(insn 133 132 134 16 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(insn 134 133 135 16 (set (reg:DI 5 di)
        (reg:DI 110)) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 110)
        (nil)))
(call_insn 135 134 136 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:201 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 136 135 137 16 (set (reg/f:DI 61 [ D.3748 ])
        (reg:DI 0 ax)) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 137 136 138 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 61 [ D.3748 ])
            (const_int 0 [0]))) mQuery.c:201 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.3748 ])
        (nil)))
(jump_insn 138 137 139 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) mQuery.c:201 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 144)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111
(note 139 138 141 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 141 139 142 17 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -532 [0xfffffffffffffdec])) [0 i+0 S4 A32])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(insn 142 141 143 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 111)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -524 [0xfffffffffffffdf4])) [0 N+0 S4 A32]))) mQuery.c:201 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(jump_insn 143 142 144 17 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 140)
            (pc))) mQuery.c:201 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 140)
;;  succ:       8
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83 112
(code_label 144 143 145 18 95 "" [1 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -520 [0xfffffffffffffdf8])) [0 rstream+0 S8 A64])) mQuery.c:207 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 18 (set (reg:DI 5 di)
        (reg:DI 112)) mQuery.c:207 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(call_insn 148 147 149 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:207 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 149 148 152 18 (set (reg:SI 82 [ D.3755 ])
        (const_int 1 [0x1])) mQuery.c:208 89 {*movsi_internal}
     (nil))
(insn 152 149 156 18 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ D.3755 ])) mQuery.c:208 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ D.3755 ])
        (nil)))
(insn 156 152 159 18 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) mQuery.c:210 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ <retval> ])
        (nil)))
(insn 159 156 160 18 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3756+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mQuery.c:210 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 160 159 167 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) mQuery.c:210 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 163)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 167 160 161 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(call_insn 161 167 162 19 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:210 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 163)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 163 162 168 20 98 "" [1 uses])
(note 168 163 164 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 164 168 0 20 (use (reg/i:SI 0 ax)) mQuery.c:210 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function add_nsim_output (add_nsim_output, funcdef_no=9, decl_uid=1772, cgraph_uid=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 16 count 14 (    1)
Building IRA IR
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 112.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r104,l0) best CREG, allocno GENERAL_REGS
    r103: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r103,l0) best DIREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r101,l0) best CREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r99,l0) best DIREG, allocno GENERAL_REGS
    r98: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r98,l0) best SIREG, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r95,l0) best CREG, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r92,l0) best CREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r82,l0) best DREG, allocno GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r81,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r80,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r78,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r77,l0) best AREG, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r70,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r77,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:11
  a3(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a5(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a6(r101,l0) costs: AREG:2 DREG:2 CREG:0 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a7(r103,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:0 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a8(r105,l0) costs: AREG:0 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a9(r104,l0) costs: AREG:2 DREG:2 CREG:0 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a10(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a11(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a13(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a15(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a16(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:6
  a17(r92,l0) costs: AREG:2 DREG:2 CREG:0 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r94,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:0 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 INDEX_REGS:4 GENERAL_REGS:4 LEGACY_REGS:4 CLOBBERED_REGS:4 SSE_FIRST_REG:39 SSE_REGS:39 MMX_REGS:39 FP_TOP_SSE_REGS:196605 FP_SECOND_SSE_REGS:196605 FLOAT_SSE_REGS:196605 FLOAT_INT_REGS:196605 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:196605 ALL_REGS:196605 MEM:12
  a19(r96,l0) costs: AREG:0 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a20(r95,l0) costs: AREG:2 DREG:2 CREG:0 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a21(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a22(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a23(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a24(r70,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a25(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a26(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a27(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a28(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a29(r68,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a30(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a31(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a32(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a33(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a34(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a35(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a36(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a37(r82,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a38(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a39(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a40(r81,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a41(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a42(r80,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a43(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:131070 INT_SSE_REGS:131070 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a44(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a45(r79,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a46(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a47(r78,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 115(l0): point = 0
   Insn 112(l0): point = 3
   Insn 111(l0): point = 6
   Insn 110(l0): point = 8
   Insn 107(l0): point = 10
   Insn 103(l0): point = 12
   Insn 100(l0): point = 14
   Insn 99(l0): point = 16
   Insn 98(l0): point = 18
   Insn 97(l0): point = 20
   Insn 96(l0): point = 22
   Insn 94(l0): point = 24
   Insn 93(l0): point = 26
   Insn 92(l0): point = 28
   Insn 91(l0): point = 30
   Insn 90(l0): point = 32
   Insn 89(l0): point = 34
   Insn 95(l0): point = 36
   Insn 88(l0): point = 38
   Insn 87(l0): point = 40
   Insn 86(l0): point = 42
   Insn 85(l0): point = 44
   Insn 84(l0): point = 46
   Insn 83(l0): point = 48
   Insn 82(l0): point = 50
   Insn 81(l0): point = 52
   Insn 79(l0): point = 54
   Insn 78(l0): point = 56
   Insn 77(l0): point = 58
   Insn 76(l0): point = 60
   Insn 75(l0): point = 62
   Insn 74(l0): point = 64
   Insn 80(l0): point = 66
   Insn 73(l0): point = 68
   Insn 72(l0): point = 70
   Insn 71(l0): point = 72
   Insn 70(l0): point = 74
   Insn 69(l0): point = 76
   Insn 61(l0): point = 79
   Insn 60(l0): point = 81
   Insn 59(l0): point = 83
   Insn 58(l0): point = 85
   Insn 57(l0): point = 87
   Insn 56(l0): point = 89
   Insn 55(l0): point = 91
   Insn 54(l0): point = 93
   Insn 53(l0): point = 95
   Insn 52(l0): point = 97
   Insn 51(l0): point = 99
   Insn 67(l0): point = 102
   Insn 66(l0): point = 104
   Insn 65(l0): point = 106
   Insn 124(l0): point = 109
   Insn 47(l0): point = 111
   Insn 46(l0): point = 113
   Insn 45(l0): point = 115
   Insn 44(l0): point = 117
   Insn 43(l0): point = 119
   Insn 42(l0): point = 121
   Insn 41(l0): point = 123
   Insn 40(l0): point = 125
   Insn 28(l0): point = 128
   Insn 38(l0): point = 131
   Insn 37(l0): point = 133
   Insn 35(l0): point = 135
   Insn 34(l0): point = 137
   Insn 33(l0): point = 139
   Insn 32(l0): point = 141
   Insn 31(l0): point = 143
   Insn 122(l0): point = 146
   Insn 13(l0): point = 149
   Insn 23(l0): point = 152
   Insn 22(l0): point = 154
   Insn 20(l0): point = 156
   Insn 19(l0): point = 158
   Insn 18(l0): point = 160
   Insn 17(l0): point = 162
   Insn 16(l0): point = 164
   Insn 120(l0): point = 167
   Insn 9(l0): point = 169
   Insn 6(l0): point = 171
   Insn 4(l0): point = 173
   Insn 3(l0): point = 175
   Insn 2(l0): point = 177
 a0(r77): [11..12]
 a1(r76): [13..14]
 a2(r75): [17..20]
 a3(r106): [21..22]
 a4(r74): [21..24]
 a5(r102): [25..26]
 a6(r101): [27..28]
 a7(r103): [28..32]
 a8(r105): [29..30]
 a9(r104): [29..34]
 a10(r100): [33..36]
 a11(r99): [41..44]
 a12(r98): [43..46]
 a13(r73): [49..50]
 a14(r97): [51..52]
 a15(r72): [51..54]
 a16(r93): [55..56]
 a17(r92): [57..58]
 a18(r94): [58..62]
 a19(r96): [59..60]
 a20(r95): [59..64]
 a21(r91): [63..66]
 a22(r71): [69..70]
 a23(r90): [71..72]
 a24(r70): [71..74]
 a25(r89): [75..76]
 a26(r88): [105..106]
 a27(r66): [82..93]
 a28(r69): [82..83]
 a29(r68): [84..85]
 a30(r87): [86..87]
 a31(r67): [86..89]
 a32(r86): [90..91]
 a33(r85): [94..95]
 a34(r65): [94..97]
 a35(r84): [98..99]
 a36(r83): [118..123]
 a37(r82): [122..125]
 a38(r64): [134..135]
 a39(r63): [136..137]
 a40(r81): [138..139]
 a41(r62): [138..141]
 a42(r80): [142..143]
 a43(r61): [155..156]
 a44(r60): [157..158]
 a45(r79): [159..160]
 a46(r59): [159..162]
 a47(r78): [163..164]
Compressing live ranges: from 180 to 68 - 37%
Ranges after the compression:
 a0(r77): [0..1]
 a1(r76): [2..3]
 a2(r75): [4..5]
 a3(r106): [6..7]
 a4(r74): [6..7]
 a5(r102): [8..9]
 a6(r101): [10..11]
 a7(r103): [11..13]
 a8(r105): [12..13]
 a9(r104): [12..15]
 a10(r100): [14..15]
 a11(r99): [16..17]
 a12(r98): [16..17]
 a13(r73): [18..19]
 a14(r97): [20..21]
 a15(r72): [20..21]
 a16(r93): [22..23]
 a17(r92): [24..25]
 a18(r94): [25..27]
 a19(r96): [26..27]
 a20(r95): [26..29]
 a21(r91): [28..29]
 a22(r71): [30..31]
 a23(r90): [32..33]
 a24(r70): [32..33]
 a25(r89): [34..35]
 a26(r88): [48..49]
 a27(r66): [36..43]
 a28(r69): [36..37]
 a29(r68): [38..39]
 a30(r87): [40..41]
 a31(r67): [40..41]
 a32(r86): [42..43]
 a33(r85): [44..45]
 a34(r65): [44..45]
 a35(r84): [46..47]
 a36(r83): [50..51]
 a37(r82): [50..51]
 a38(r64): [52..53]
 a39(r63): [54..55]
 a40(r81): [56..57]
 a41(r62): [56..57]
 a42(r80): [58..59]
 a43(r61): [60..61]
 a44(r60): [62..63]
 a45(r79): [64..65]
 a46(r59): [64..65]
 a47(r78): [66..67]
  regions=1, blocks=14, points=68
    allocnos=48 (big 0), copies=0, conflicts=0, ranges=48
Disposition:
   46:r59  l0     1   44:r60  l0     0   43:r61  l0     0   41:r62  l0     1
   39:r63  l0     0   38:r64  l0     0   34:r65  l0     1   27:r66  l0     1
   31:r67  l0     2   29:r68  l0     0   28:r69  l0     0   24:r70  l0     1
   22:r71  l0     0   15:r72  l0     1   13:r73  l0     0    4:r74  l0     1
    2:r75  l0     0    1:r76  l0     0    0:r77  l0     0   47:r78  l0     0
   45:r79  l0     0   42:r80  l0     0   40:r81  l0     0   37:r82  l0     1
   36:r83  l0     0   35:r84  l0     0   33:r85  l0     0   32:r86  l0     0
   30:r87  l0     0   26:r88  l0     0   25:r89  l0     0   23:r90  l0     0
   21:r91  l0     0   17:r92  l0     0   16:r93  l0     0   18:r94  l0     1
   20:r95  l0     2   19:r96  l0     0   14:r97  l0     0   12:r98  l0     1
   11:r99  l0     0   10:r100 l0     0    6:r101 l0     0    5:r102 l0     0
    7:r103 l0     1    9:r104 l0     2    8:r105 l0     0    3:r106 l0     0
+++Costs: overall -5, reg -5, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


add_nsim_output

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,3u} r1={5d,2u} r2={4d} r4={6d,3u} r5={6d,3u} r6={1d,13u} r7={1d,16u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,12u} r17={24d,4u} r18={3d} r19={3d} r20={1d,46u,7e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={1d,1u,1e} r60={1d,1u} r61={1d,1u} r62={1d,1u,1e} r63={1d,1u} r64={1d,1u} r65={1d,1u,1e} r66={1d,1u} r67={1d,1u,1e} r68={1d,1u} r69={1d,1u} r70={1d,1u,1e} r71={1d,1u} r72={1d,1u,1e} r73={1d,1u} r74={1d,1u,1e} r75={1d,2u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={2d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={2d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} 
;;    total ref usage 394{229d,151u,14e} in 84{81 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
        (reg:DI 5 di [ file_out ])) mQuery.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ file_out ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
        (reg:DI 4 si [ file_in ])) mQuery.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ file_in ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -100 [0xffffffffffffff9c])) [0 n+0 S4 A32])
        (reg:SI 1 dx [ n ])) mQuery.c:212 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ n ])
        (nil)))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3765+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:212 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 9 6 120 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:214 89 {*movsi_internal}
     (nil))
(jump_insn 120 9 121 2 (set (pc)
        (label_ref 14)) mQuery.c:214 650 {jump}
     (nil)
 -> 14)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 121 120 21)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 21 121 12 3 101 "" [1 uses])
(note 12 21 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:214 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 78 79
(code_label 14 13 15 4 100 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 78)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])) mQuery.c:214 89 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 59 [ D.3760 ])
        (sign_extend:DI (reg:SI 78))) mQuery.c:214 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 78)
        (nil)))
(insn 18 17 19 4 (set (reg/f:DI 79)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])) mQuery.c:214 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg/f:DI 60 [ D.3761 ])
                (plus:DI (reg:DI 59 [ D.3760 ])
                    (reg/f:DI 79)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:214 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 79)
        (expr_list:REG_DEAD (reg:DI 59 [ D.3760 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                        (reg:DI 59 [ D.3760 ]))
                    (nil))))))
(insn 20 19 22 4 (set (reg:QI 61 [ D.3762 ])
        (mem:QI (reg/f:DI 60 [ D.3761 ]) [0 *_7+0 S1 A8])) mQuery.c:214 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 60 [ D.3761 ])
        (nil)))
(insn 22 20 23 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 61 [ D.3762 ])
            (const_int 0 [0]))) mQuery.c:214 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 61 [ D.3762 ])
        (nil)))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) mQuery.c:214 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 122 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 122 24 123 5 (set (pc)
        (label_ref 29)) mQuery.c:215 650 {jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 123 122 36)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 36 123 27 6 103 "" [1 uses])
(note 27 36 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:215 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64 80 81
(code_label 29 28 30 7 102 "" [1 uses])
(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 7 (set (reg:SI 80)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32])) mQuery.c:215 89 {*movsi_internal}
     (nil))
(insn 32 31 33 7 (set (reg:DI 62 [ D.3760 ])
        (sign_extend:DI (reg:SI 80))) mQuery.c:215 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 80)
        (nil)))
(insn 33 32 34 7 (set (reg/f:DI 81)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])) mQuery.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 7 (parallel [
            (set (reg/f:DI 63 [ D.3761 ])
                (plus:DI (reg:DI 62 [ D.3760 ])
                    (reg/f:DI 81)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 81)
        (expr_list:REG_DEAD (reg:DI 62 [ D.3760 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                        (reg:DI 62 [ D.3760 ]))
                    (nil))))))
(insn 35 34 37 7 (set (reg:QI 64 [ D.3762 ])
        (mem:QI (reg/f:DI 63 [ D.3761 ]) [0 *_11+0 S1 A8])) mQuery.c:215 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.3761 ])
        (nil)))
(insn 37 35 38 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 64 [ D.3762 ])
            (const_int 46 [0x2e]))) mQuery.c:215 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 64 [ D.3762 ])
        (nil)))
(jump_insn 38 37 39 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) mQuery.c:215 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 36)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:SI 82)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -100 [0xffffffffffffff9c])) [0 n+0 S4 A32])) mQuery.c:218 89 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (parallel [
            (set (reg:DI 83)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:218 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 42 41 43 8 (set (reg:SI 1 dx)
        (reg:SI 82)) mQuery.c:218 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 43 42 44 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f87347bcab0 *.LC38>)) mQuery.c:218 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 8 (set (reg:DI 5 di)
        (reg:DI 83)) mQuery.c:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 83)
        (nil)))
(insn 45 44 46 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) mQuery.c:218 91 {*movqi_internal}
     (nil))
(call_insn 46 45 47 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f8734943f00 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) mQuery.c:218 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn 47 46 124 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(jump_insn 124 47 125 8 (set (pc)
        (label_ref 62)) mQuery.c:220 650 {jump}
     (nil)
 -> 62)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 125 124 64)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 69 84 85 86 87
(code_label 64 125 50 9 105 "" [1 uses])
(note 50 64 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 9 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 52 51 53 9 (set (reg:DI 65 [ D.3760 ])
        (sign_extend:DI (reg:SI 84))) mQuery.c:220 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 84)
        (nil)))
(insn 53 52 54 9 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:220 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 9 (parallel [
            (set (reg/f:DI 66 [ D.3761 ])
                (plus:DI (reg:DI 65 [ D.3760 ])
                    (reg/f:DI 85)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (expr_list:REG_DEAD (reg:DI 65 [ D.3760 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                        (reg:DI 65 [ D.3760 ]))
                    (nil))))))
(insn 55 54 56 9 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:DI 67 [ D.3760 ])
        (sign_extend:DI (reg:SI 86))) mQuery.c:220 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 86)
        (nil)))
(insn 57 56 58 9 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])) mQuery.c:220 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg/f:DI 68 [ D.3761 ])
                (plus:DI (reg:DI 67 [ D.3760 ])
                    (reg/f:DI 87)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (expr_list:REG_DEAD (reg:DI 67 [ D.3760 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                        (reg:DI 67 [ D.3760 ]))
                    (nil))))))
(insn 59 58 60 9 (set (reg:QI 69 [ D.3762 ])
        (mem:QI (reg/f:DI 68 [ D.3761 ]) [0 *_20+0 S1 A8])) mQuery.c:220 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 68 [ D.3761 ])
        (nil)))
(insn 60 59 61 9 (set (mem:QI (reg/f:DI 66 [ D.3761 ]) [0 *_18+0 S1 A8])
        (reg:QI 69 [ D.3762 ])) mQuery.c:220 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 69 [ D.3762 ])
        (expr_list:REG_DEAD (reg/f:DI 66 [ D.3761 ])
            (nil))))
(insn 61 60 62 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 62 61 63 10 104 "" [1 uses])
(note 63 62 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 63 66 10 (set (reg:SI 88)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 i+0 S4 A32]))) mQuery.c:220 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88)
        (nil)))
(jump_insn 67 66 68 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) mQuery.c:220 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 64)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
(note 68 67 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) mQuery.c:221 89 {*movsi_internal}
     (nil))
(insn 70 69 71 11 (set (reg:DI 70 [ D.3760 ])
        (sign_extend:DI (reg:SI 89))) mQuery.c:221 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 71 70 72 11 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:221 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 11 (parallel [
            (set (reg/f:DI 71 [ D.3761 ])
                (plus:DI (reg:DI 70 [ D.3760 ])
                    (reg/f:DI 90)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:221 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_DEAD (reg:DI 70 [ D.3760 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                        (reg:DI 70 [ D.3760 ]))
                    (nil))))))
(insn 73 72 80 11 (set (mem:QI (reg/f:DI 71 [ D.3761 ]) [0 *_24+0 S1 A8])
        (const_int 0 [0])) mQuery.c:221 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 71 [ D.3761 ])
        (nil)))
(insn 80 73 74 11 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 74 80 75 11 (set (reg:DI 95)
        (const_int -1 [0xffffffffffffffff])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 11 (set (reg:DI 94)
        (reg:DI 91)) mQuery.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(insn 76 75 77 11 (set (reg:QI 96)
        (const_int 0 [0])) mQuery.c:223 91 {*movqi_internal}
     (nil))
(insn 77 76 78 11 (parallel [
            (set (reg:DI 92)
                (unspec:DI [
                        (mem:BLK (reg:DI 94) [0  A8])
                        (reg:QI 96)
                        (const_int 1 [0x1])
                        (reg:DI 95)
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 94))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 925 {*strlenqi_1}
     (expr_list:REG_DEAD (reg:QI 96)
        (expr_list:REG_DEAD (reg:DI 95)
            (expr_list:REG_DEAD (reg:DI 94)
                (expr_list:REG_UNUSED (reg:DI 94)
                    (expr_list:REG_UNUSED (reg:CC 17 flags)
                        (nil)))))))
(insn 78 77 79 11 (set (reg:DI 93)
        (not:DI (reg:DI 92))) mQuery.c:223 496 {*one_cmpldi2_1}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(insn 79 78 81 11 (parallel [
            (set (reg:DI 72 [ D.3763 ])
                (plus:DI (reg:DI 93)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 81 79 82 11 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 11 (parallel [
            (set (reg/f:DI 73 [ D.3761 ])
                (plus:DI (reg:DI 72 [ D.3763 ])
                    (reg/f:DI 97)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_DEAD (reg:DI 72 [ D.3763 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                        (reg:DI 72 [ D.3763 ]))
                    (nil))))))
(insn 83 82 84 11 (set (mem:HI (reg/f:DI 73 [ D.3761 ]) [0 MEM[(void *)_26]+0 S2 A8])
        (const_int 95 [0x5f])) mQuery.c:223 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 73 [ D.3761 ])
        (nil)))
(insn 84 83 85 11 (parallel [
            (set (reg:DI 98)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:224 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 85 84 86 11 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:224 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 11 (set (reg:DI 4 si)
        (reg:DI 98)) mQuery.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 87 86 88 11 (set (reg:DI 5 di)
        (reg:DI 99)) mQuery.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(call_insn 88 87 95 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f8734939900 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) mQuery.c:224 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 95 88 89 11 (set (reg:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 89 95 90 11 (set (reg:DI 104)
        (const_int -1 [0xffffffffffffffff])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 11 (set (reg:DI 103)
        (reg:DI 100)) mQuery.c:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(insn 91 90 92 11 (set (reg:QI 105)
        (const_int 0 [0])) mQuery.c:225 91 {*movqi_internal}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg:DI 101)
                (unspec:DI [
                        (mem:BLK (reg:DI 103) [0  A8])
                        (reg:QI 105)
                        (const_int 1 [0x1])
                        (reg:DI 104)
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 103))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 925 {*strlenqi_1}
     (expr_list:REG_DEAD (reg:QI 105)
        (expr_list:REG_DEAD (reg:DI 104)
            (expr_list:REG_DEAD (reg:DI 103)
                (expr_list:REG_UNUSED (reg:DI 103)
                    (expr_list:REG_UNUSED (reg:CC 17 flags)
                        (nil)))))))
(insn 93 92 94 11 (set (reg:DI 102)
        (not:DI (reg:DI 101))) mQuery.c:225 496 {*one_cmpldi2_1}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(insn 94 93 96 11 (parallel [
            (set (reg:DI 74 [ D.3763 ])
                (plus:DI (reg:DI 102)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 96 94 97 11 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 11 (parallel [
            (set (reg/f:DI 75 [ D.3761 ])
                (plus:DI (reg:DI 74 [ D.3763 ])
                    (reg/f:DI 106)))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (expr_list:REG_DEAD (reg:DI 74 [ D.3763 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                        (reg:DI 74 [ D.3763 ]))
                    (nil))))))
(insn 98 97 99 11 (set (mem:SI (reg/f:DI 75 [ D.3761 ]) [0 MEM[(void *)_28]+0 S4 A8])
        (const_int 1952539694 [0x7461642e])) mQuery.c:225 89 {*movsi_internal}
     (nil))
(insn 99 98 100 11 (set (mem:QI (plus:DI (reg/f:DI 75 [ D.3761 ])
                (const_int 4 [0x4])) [0 MEM[(void *)_28]+4 S1 A8])
        (const_int 0 [0])) mQuery.c:225 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 75 [ D.3761 ])
        (nil)))
(insn 100 99 103 11 (set (reg:SI 76 [ D.3764 ])
        (const_int 1 [0x1])) mQuery.c:227 89 {*movsi_internal}
     (nil))
(insn 103 100 107 11 (set (reg:SI 77 [ <retval> ])
        (reg:SI 76 [ D.3764 ])) mQuery.c:227 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 76 [ D.3764 ])
        (nil)))
(insn 107 103 110 11 (set (reg/i:SI 0 ax)
        (reg:SI 77 [ <retval> ])) mQuery.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 77 [ <retval> ])
        (nil)))
(insn 110 107 111 11 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3765+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) mQuery.c:229 970 {stack_tls_protect_test_di}
     (nil))
(jump_insn 111 110 118 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) mQuery.c:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 114)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 118 111 112 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 112 118 113 12 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:229 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 114)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 114 113 119 13 107 "" [1 uses])
(note 119 114 115 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 115 119 0 13 (use (reg/i:SI 0 ax)) mQuery.c:229 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

