
;; Function _convert_time (_convert_time, funcdef_no=2, decl_uid=3111, cgraph_uid=2)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 15:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 27:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 51:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 63:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 75:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) x  (1) m {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 85:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) x  (1) m {*floatsidf2_sse_interunit}
          alt=0,overall=614,losers=2,rld_nregs=1
          alt=1,overall=619,losers=2 -- reject
          alt=3,overall=619,losers=2 -- reject
          alt=4,overall=624,losers=2 -- reject
          alt=5,overall=619,losers=2 -- reject
          alt=6,overall=619,losers=2 -- reject
          alt=8,overall=9,losers=1,rld_nregs=1
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 88:  (0) x  (1) m {*movdf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 89:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=7,losers=1,rld_nregs=2
          alt=0,overall=7,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 90:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=108 from oldreg=78, assigning class SSE_REGS to r108
   90: r108:DF=r108:DF+r77:DF
      REG_DEAD r77:DF
      REG_DEAD r75:DF
    Inserting insn reload before:
  118: r108:DF=r75:DF
    Inserting insn reload after:
  119: r78:DF=r108:DF

          alt=0,overall=1221,losers=3,rld_nregs=2
          alt=1,overall=614,losers=2,rld_nregs=1
          alt=3,overall=1225,losers=3 -- reject
          alt=4,overall=619,losers=2 -- reject
          alt=8,overall=8,losers=1,rld_nregs=1
          alt=9,overall=15,losers=2 -- reject
          alt=10,overall=2,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 119:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
	 Choosing alt 0 in insn 93:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =f  (1) m {*floatsixf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=13,losers=2,rld_nregs=1
          alt=1,overall=18,losers=2 -- reject
          alt=3,overall=7,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) ?Yx*r  (1) Yx*roF {*movxf_internal_rex64}
          alt=0,overall=12,losers=2,rld_nregs=1
          alt=1,overall=21,losers=3 -- reject
          alt=3,overall=620,losers=2 -- reject
          alt=4,overall=609,losers=1 -- reject
      Creating newreg=109, assigning class NO_REGS to secondary r109
  102: r109:XF=r84:XF
      REG_DEAD r84:XF
    Inserting the sec. move after:
  120: r85:XF=r109:XF

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =f  (1) fm {*movxf_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 78 because of disjoint classes SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

********** Pseudo live ranges #1: **********

  BB 11
   Insn 109: point = 0
   Insn 106: point = 0
   Insn 120: point = 1
	Hard reg 8 is preferable by r109 with profit 1
   Insn 102: point = 3
	Hard reg 8 is preferable by r109 with profit 1
	Hard reg 0 is preferable by r109 with profit 1
   Insn 99: point = 5
   Insn 98: point = 6
   Insn 97: point = 7
   Insn 96: point = 9
   Insn 95: point = 11
   Insn 94: point = 12
   Insn 93: point = 13
   Insn 92: point = 15
   Insn 91: point = 16
   Insn 119: point = 18
   Insn 90: point = 20
   Insn 118: point = 21
	Hard reg 22 is preferable by r108 with profit 1
   Insn 89: point = 23
   Insn 88: point = 25
   Insn 87: point = 26
   Insn 86: point = 27
   Insn 85: point = 29
   Insn 84: point = 30
   Insn 83: point = 31
   Insn 82: point = 32
   Insn 81: point = 33
   Insn 80: point = 33
   Insn 79: point = 34
   Insn 78: point = 36
   Insn 77: point = 37
   Insn 76: point = 39
   Insn 75: point = 40
  BB 10
   Insn 73: point = 40
   Insn 72: point = 40
   Insn 70: point = 41
   Insn 69: point = 43
   Insn 68: point = 45
   Insn 67: point = 46
   Insn 66: point = 48
  BB 8
   Insn 116: point = 49
   Insn 59: point = 49
   Insn 58: point = 50
   Insn 57: point = 51
   Insn 56: point = 51
   Insn 55: point = 52
   Insn 54: point = 54
   Insn 53: point = 55
   Insn 52: point = 57
   Insn 51: point = 58
  BB 7
   Insn 49: point = 58
   Insn 48: point = 58
   Insn 46: point = 59
   Insn 45: point = 61
   Insn 44: point = 63
   Insn 43: point = 64
   Insn 42: point = 66
  BB 5
   Insn 114: point = 67
   Insn 35: point = 67
   Insn 34: point = 68
   Insn 33: point = 69
   Insn 32: point = 69
   Insn 31: point = 70
   Insn 30: point = 72
   Insn 29: point = 73
   Insn 28: point = 75
   Insn 27: point = 76
  BB 4
   Insn 25: point = 76
   Insn 24: point = 76
   Insn 22: point = 77
   Insn 21: point = 79
   Insn 20: point = 81
   Insn 19: point = 82
   Insn 18: point = 84
  BB 2
   Insn 112: point = 85
   Insn 11: point = 85
   Insn 10: point = 85
   Insn 9: point = 86
   Insn 8: point = 87
   Insn 7: point = 87
   Insn 6: point = 88
   Insn 2: point = 89
  BB 3
   Insn 15: point = 89
  BB 6
   Insn 39: point = 89
  BB 9
   Insn 63: point = 89
 r59: [80..82]
 r60: [78..79]
 r61: [76..77]
 r62: [71..73]
 r63: [69..70]
 r64: [62..64]
 r65: [60..61]
 r66: [58..59]
 r67: [53..55]
 r68: [51..52]
 r69: [44..46]
 r70: [42..43]
 r71: [40..41]
 r72: [35..37]
 r73: [33..34]
 r74: [28..30]
 r75: [22..27]
 r76: [24..26]
 r77: [20..23]
 r78: [17..18]
 r79: [14..16]
 r80: [14..15]
 r81: [8..13]
 r82: [10..12]
 r83: [8..9]
 r84: [4..5]
 r85: [0..1]
 r86: [87..88]
 r87: [85..86]
 r88: [83..84]
 r89: [80..81]
 r90: [74..75]
 r91: [71..72]
 r92: [67..68]
 r93: [65..66]
 r94: [62..63]
 r95: [56..57]
 r96: [53..54]
 r97: [49..50]
 r98: [47..48]
 r99: [44..45]
 r100: [38..39]
 r101: [35..36]
 r102: [31..32]
 r103: [28..29]
 r104: [24..25]
 r105: [10..11]
 r106: [6..7]
 r108: [19..21]
 r109: [2..3]
Compressing live ranges: from 89 to 76 - 85%
Ranges after the compression:
 r59: [68..69]
 r60: [66..67]
 r61: [64..65]
 r62: [60..61]
 r63: [58..59]
 r64: [52..53]
 r65: [50..51]
 r66: [48..49]
 r67: [44..45]
 r68: [42..43]
 r69: [36..37]
 r70: [34..35]
 r71: [32..33]
 r72: [28..29]
 r73: [26..27]
 r74: [22..23]
 r75: [18..21]
 r76: [20..21]
 r77: [16..19]
 r78: [14..15]
 r79: [12..13]
 r80: [12..13]
 r81: [8..11]
 r82: [10..11]
 r83: [8..9]
 r84: [4..5]
 r85: [0..1]
 r86: [74..75]
 r87: [72..73]
 r88: [70..71]
 r89: [68..69]
 r90: [62..63]
 r91: [60..61]
 r92: [56..57]
 r93: [54..55]
 r94: [52..53]
 r95: [46..47]
 r96: [44..45]
 r97: [40..41]
 r98: [38..39]
 r99: [36..37]
 r100: [30..31]
 r101: [28..29]
 r102: [24..25]
 r103: [22..23]
 r104: [20..21]
 r105: [10..11]
 r106: [6..7]
 r108: [16..17]
 r109: [2..3]
	 Assigning to 108 (cl=SSE_REGS, orig=78, freq=3, tfirst=108, tfreq=3)...
	   Assign 22 to reload r108 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 16):	 78	 109
Changing spilled pseudos to memory in insn #119
Changing spilled pseudos to memory in insn #91
Changing spilled pseudos to memory in insn #102
Changing spilled pseudos to memory in insn #120

********** Local #3: **********

Reusing alternative 0 for insn #120
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=21,losers=3,rld_nregs=2
          alt=1,overall=12,losers=2,rld_nregs=1
          alt=3,overall=616,losers=1 -- reject
          alt=4,overall=601,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) !o  (1) Yx*rC {*movxf_internal_rex64}
Reusing alternative 0 for insn #91
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #119
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 119:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 29
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 99
changing reg in insn 102
changing reg in insn 106
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 81.


_convert_time

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={32d,31u} r1={12d,7u,6e} r2={5d} r4={5d} r5={9d,5u} r6={1d,52u} r7={1d,15u} r8={10d,7u} r9={6d,2u} r10={5d,1u} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={19d,3u} r18={4d} r19={4d} r20={1d,1u,6e} r21={8d,3u} r22={9d,4u} r23={6d,1u} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 408{264d,132u,12e} in 83{79 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 86 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
        (reg:DI 5 di [ c ])) mQuery.c:20 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ c ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) mQuery.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [86])
        (nil)))
(call_insn/i 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:24 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 0 ax [87])
        (reg:SI 0 ax)) mQuery.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 H+0 S4 A32])
        (reg:SI 0 ax [87])) mQuery.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [87])
        (nil)))
(insn 11 10 112 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:25 89 {*movsi_internal}
     (nil))
(jump_insn 112 11 113 2 (set (pc)
        (label_ref 16)) mQuery.c:25 650 {jump}
     (nil)
 -> 16)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 23)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 23 113 14 3 3 "" [1 uses])
(note 14 23 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:25 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 88 89
(code_label 16 15 17 4 2 "" [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:25 89 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 1 dx [orig:59 D.3671 ] [59])
        (sign_extend:DI (reg:SI 0 ax [88]))) mQuery.c:25 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:25 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 0 ax [orig:60 D.3672 ] [60])
                (plus:DI (reg/f:DI 0 ax [89])
                    (reg:DI 1 dx [orig:59 D.3671 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:25 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.3671 ] [59])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:59 D.3671 ] [59]))
                (nil)))))
(insn 22 21 24 4 (set (reg:QI 0 ax [orig:61 D.3673 ] [61])
        (mem:QI (reg/f:DI 0 ax [orig:60 D.3672 ] [60]) [0 *_8+0 S1 A8])) mQuery.c:25 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3672 ] [60])
        (nil)))
(insn 24 22 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:61 D.3673 ] [61])
            (const_int 58 [0x3a]))) mQuery.c:25 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:61 D.3673 ] [61])
        (nil)))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) mQuery.c:25 612 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 90 91 92
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:26 273 {*addsi_1}
     (nil))
(insn 28 27 29 5 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:26 89 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 1 dx [orig:62 D.3671 ] [62])
        (sign_extend:DI (reg:SI 0 ax [90]))) mQuery.c:26 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [90])
        (nil)))
(insn 30 29 31 5 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:26 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.3674 ] [63])
                (plus:DI (reg/f:DI 0 ax [91])
                    (reg:DI 1 dx [orig:62 D.3671 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:26 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [91])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.3671 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.3671 ] [62]))
                (nil)))))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:63 D.3674 ] [63])) mQuery.c:26 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.3674 ] [63])
        (nil)))
(call_insn/i 33 32 34 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:26 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 5 (set (reg:SI 0 ax [92])
        (reg:SI 0 ax)) mQuery.c:26 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 35 34 114 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 m+0 S4 A32])
        (reg:SI 0 ax [92])) mQuery.c:26 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [92])
        (nil)))
(jump_insn 114 35 115 5 (set (pc)
        (label_ref 40)) mQuery.c:27 650 {jump}
     (nil)
 -> 40)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 115 114 47)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 47 115 38 6 5 "" [1 uses])
(note 38 47 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:27 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 93 94
(code_label 40 39 41 7 4 "" [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:27 89 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:DI 1 dx [orig:64 D.3671 ] [64])
        (sign_extend:DI (reg:SI 0 ax [93]))) mQuery.c:27 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [93])
        (nil)))
(insn 44 43 45 7 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:27 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.3672 ] [65])
                (plus:DI (reg/f:DI 0 ax [94])
                    (reg:DI 1 dx [orig:64 D.3671 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:27 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.3671 ] [64])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:64 D.3671 ] [64]))
                (nil)))))
(insn 46 45 48 7 (set (reg:QI 0 ax [orig:66 D.3673 ] [66])
        (mem:QI (reg/f:DI 0 ax [orig:65 D.3672 ] [65]) [0 *_16+0 S1 A8])) mQuery.c:27 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.3672 ] [65])
        (nil)))
(insn 48 46 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:66 D.3673 ] [66])
            (const_int 58 [0x3a]))) mQuery.c:27 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:66 D.3673 ] [66])
        (nil)))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) mQuery.c:27 612 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 67 68 95 96 97
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:28 273 {*addsi_1}
     (nil))
(insn 52 51 53 8 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:28 89 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:DI 1 dx [orig:67 D.3671 ] [67])
        (sign_extend:DI (reg:SI 0 ax [95]))) mQuery.c:28 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [95])
        (nil)))
(insn 54 53 55 8 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:28 87 {*movdi_internal_rex64}
     (nil))
(insn 55 54 56 8 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.3674 ] [68])
                (plus:DI (reg/f:DI 0 ax [96])
                    (reg:DI 1 dx [orig:67 D.3671 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:28 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:67 D.3671 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:67 D.3671 ] [67]))
                (nil)))))
(insn 56 55 57 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:68 D.3674 ] [68])) mQuery.c:28 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.3674 ] [68])
        (nil)))
(call_insn/i 57 56 58 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:28 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 58 57 59 8 (set (reg:SI 0 ax [97])
        (reg:SI 0 ax)) mQuery.c:28 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 59 58 116 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 s+0 S4 A32])
        (reg:SI 0 ax [97])) mQuery.c:28 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [97])
        (nil)))
(jump_insn 116 59 117 8 (set (pc)
        (label_ref 64)) mQuery.c:29 650 {jump}
     (nil)
 -> 64)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 117 116 71)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 71 117 62 9 7 "" [1 uses])
(note 62 71 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:29 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 70 71 98 99
(code_label 64 63 65 10 6 "" [1 uses])
(note 65 64 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 10 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:29 89 {*movsi_internal}
     (nil))
(insn 67 66 68 10 (set (reg:DI 1 dx [orig:69 D.3671 ] [69])
        (sign_extend:DI (reg:SI 0 ax [98]))) mQuery.c:29 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [98])
        (nil)))
(insn 68 67 69 10 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:29 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg/f:DI 0 ax [orig:70 D.3672 ] [70])
                (plus:DI (reg/f:DI 0 ax [99])
                    (reg:DI 1 dx [orig:69 D.3671 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:29 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.3671 ] [69])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:69 D.3671 ] [69]))
                (nil)))))
(insn 70 69 72 10 (set (reg:QI 0 ax [orig:71 D.3673 ] [71])
        (mem:QI (reg/f:DI 0 ax [orig:70 D.3672 ] [70]) [0 *_24+0 S1 A8])) mQuery.c:29 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:70 D.3672 ] [70])
        (nil)))
(insn 72 70 73 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:71 D.3673 ] [71])
            (const_int 58 [0x3a]))) mQuery.c:29 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:71 D.3673 ] [71])
        (nil)))
(jump_insn 73 72 74 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) mQuery.c:29 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 75 76 77 78 79 80 81 82 83 84 85 100 101 102 103 104 105 106
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:30 273 {*addsi_1}
     (nil))
(insn 76 75 77 11 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) mQuery.c:30 89 {*movsi_internal}
     (nil))
(insn 77 76 78 11 (set (reg:DI 1 dx [orig:72 D.3671 ] [72])
        (sign_extend:DI (reg:SI 0 ax [100]))) mQuery.c:30 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [100])
        (nil)))
(insn 78 77 79 11 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])) mQuery.c:30 87 {*movdi_internal_rex64}
     (nil))
(insn 79 78 80 11 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.3674 ] [73])
                (plus:DI (reg/f:DI 0 ax [101])
                    (reg:DI 1 dx [orig:72 D.3671 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:30 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.3671 ] [72])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 c+0 S8 A64])
                    (reg:DI 1 dx [orig:72 D.3671 ] [72]))
                (nil)))))
(insn 80 79 81 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:73 D.3674 ] [73])) mQuery.c:30 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.3674 ] [73])
        (nil)))
(call_insn/i 81 80 82 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:30 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 82 81 83 11 (set (reg:SI 0 ax [102])
        (reg:SI 0 ax)) mQuery.c:30 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 83 82 84 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 f+0 S4 A32])
        (reg:SI 0 ax [102])) mQuery.c:30 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [102])
        (nil)))
(insn 84 83 85 11 (set (reg:DF 21 xmm0 [orig:74 D.3675 ] [74])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 H+0 S4 A32]))) mQuery.c:32 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 85 84 86 11 (set (reg:DF 22 xmm1 [103])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 3.6e+3 [0x0.e1p+12])
        (nil)))
(insn 86 85 87 11 (set (reg:DF 22 xmm1 [orig:75 D.3675 ] [75])
        (mult:DF (reg:DF 22 xmm1 [103])
            (reg:DF 21 xmm0 [orig:74 D.3675 ] [74]))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [103])
        (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:74 D.3675 ] [74])
            (nil))))
(insn 87 86 88 11 (set (reg:DF 21 xmm0 [orig:76 D.3675 ] [76])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 m+0 S4 A32]))) mQuery.c:32 242 {*floatsidf2_sse_interunit}
     (nil))
(insn 88 87 89 11 (set (reg:DF 23 xmm2 [104])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 6.0e+1 [0x0.fp+6])
        (nil)))
(insn 89 88 118 11 (set (reg:DF 21 xmm0 [orig:77 D.3675 ] [77])
        (mult:DF (reg:DF 21 xmm0 [orig:76 D.3675 ] [76])
            (reg:DF 23 xmm2 [104]))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 23 xmm2 [104])
        (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:76 D.3675 ] [76])
            (nil))))
(insn 118 89 90 11 (set (reg:DF 22 xmm1 [orig:78 D.3675 ] [78])
        (reg:DF 22 xmm1 [orig:75 D.3675 ] [75])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:75 D.3675 ] [75])
        (nil)))
(insn 90 118 119 11 (set (reg:DF 22 xmm1 [orig:78 D.3675 ] [78])
        (plus:DF (reg:DF 22 xmm1 [orig:78 D.3675 ] [78])
            (reg:DF 21 xmm0 [orig:77 D.3675 ] [77]))) mQuery.c:32 778 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 21 xmm0 [orig:77 D.3675 ] [77])
        (nil)))
(insn 119 90 91 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128])
        (reg:DF 22 xmm1 [orig:78 D.3675 ] [78])) mQuery.c:32 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 22 xmm1 [orig:78 D.3675 ] [78])
        (nil)))
(insn 91 119 92 11 (set (reg:XF 9 st(1) [orig:79 D.3676 ] [79])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A128]))) mQuery.c:32 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 78 [ D.3675 ])
        (nil)))
(insn 92 91 93 11 (set (reg:XF 8 st [orig:80 D.3676 ] [80])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 s+0 S4 A32]))) mQuery.c:32 256 {*floatsixf2_i387}
     (nil))
(insn 93 92 94 11 (set (reg:XF 9 st(1) [orig:81 D.3676 ] [81])
        (plus:XF (reg:XF 9 st(1) [orig:79 D.3676 ] [79])
            (reg:XF 8 st [orig:80 D.3676 ] [80]))) mQuery.c:32 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.3676 ] [80])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:79 D.3676 ] [79])
            (nil))))
(insn 94 93 95 11 (set (reg:XF 10 st(2) [orig:82 D.3676 ] [82])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 f+0 S4 A32]))) mQuery.c:32 256 {*floatsixf2_i387}
     (nil))
(insn 95 94 96 11 (set (reg:XF 8 st [105])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S16 A128])) mQuery.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 96 95 97 11 (set (reg:XF 8 st [orig:83 D.3676 ] [83])
        (div:XF (reg:XF 10 st(2) [orig:82 D.3676 ] [82])
            (reg:XF 8 st [105]))) mQuery.c:32 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [105])
        (expr_list:REG_DEAD (reg:XF 10 st(2) [orig:82 D.3676 ] [82])
            (nil))))
(insn 97 96 98 11 (set (reg:XF 8 st [106])
        (plus:XF (reg:XF 8 st [orig:83 D.3676 ] [83])
            (reg:XF 9 st(1) [orig:81 D.3676 ] [81]))) mQuery.c:32 799 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.3676 ] [83])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:81 D.3676 ] [81])
            (nil))))
(insn 98 97 99 11 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 time+0 S16 A128])
        (reg:XF 8 st [106])) mQuery.c:32 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [106])
        (nil)))
(insn 99 98 102 11 (set (reg:XF 0 ax [orig:84 D.3676 ] [84])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 time+0 S16 A128])) mQuery.c:34 131 {*movxf_internal_rex64}
     (nil))
(insn 102 99 120 11 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])
        (reg:XF 0 ax [orig:84 D.3676 ] [84])) mQuery.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 0 ax [orig:84 D.3676 ] [84])
        (nil)))
(insn 120 102 106 11 (set (reg:XF 8 st [orig:85 <retval> ] [85])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S16 A128])) mQuery.c:34 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 109)
        (nil)))
(insn 106 120 109 11 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:85 <retval> ] [85])) mQuery.c:35 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:85 <retval> ] [85])
        (nil)))
(insn 109 106 0 11 (use (reg/i:XF 8 st)) mQuery.c:35 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function _calculate_velocity (_calculate_velocity, funcdef_no=3, decl_uid=3130, cgraph_uid=3)


********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 172:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 191:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 209: point = 0
   Insn 206: point = 0
   Insn 202: point = 1
   Insn 199: point = 3
  BB 10
   Insn 197: point = 4
   Insn 196: point = 4
   Insn 195: point = 5
  BB 2
   Insn 215: point = 6
   Insn 7: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 9
   Insn 191: point = 6
  BB 8
   Insn 189: point = 6
   Insn 188: point = 6
   Insn 186: point = 7
   Insn 185: point = 9
   Insn 184: point = 11
   Insn 183: point = 13
   Insn 182: point = 14
   Insn 181: point = 16
   Insn 180: point = 18
   Insn 179: point = 20
   Insn 178: point = 21
   Insn 177: point = 21
   Insn 176: point = 22
   Insn 175: point = 24
  BB 3
   Insn 217: point = 25
   Insn 11: point = 25
  BB 7
   Insn 172: point = 25
  BB 5
   Insn 220: point = 25
   Insn 112: point = 25
   Insn 111: point = 26
   Insn 110: point = 28
   Insn 109: point = 29
   Insn 108: point = 30
   Insn 107: point = 30
   Insn 106: point = 31
   Insn 105: point = 32
   Insn 104: point = 34
   Insn 103: point = 36
   Insn 102: point = 38
   Insn 101: point = 40
   Insn 100: point = 41
   Insn 99: point = 43
   Insn 98: point = 45
   Insn 97: point = 46
   Insn 96: point = 48
   Insn 95: point = 50
   Insn 94: point = 52
   Insn 93: point = 53
   Insn 92: point = 53
   Insn 91: point = 54
   Insn 90: point = 56
   Insn 89: point = 57
   Insn 88: point = 59
   Insn 87: point = 61
   Insn 86: point = 63
   Insn 85: point = 65
   Insn 84: point = 67
   Insn 83: point = 68
   Insn 82: point = 70
   Insn 81: point = 72
   Insn 80: point = 73
   Insn 79: point = 75
   Insn 78: point = 77
   Insn 77: point = 79
   Insn 76: point = 80
   Insn 75: point = 80
   Insn 74: point = 81
   Insn 73: point = 83
   Insn 72: point = 84
   Insn 71: point = 86
   Insn 70: point = 88
   Insn 69: point = 90
   Insn 68: point = 91
   Insn 67: point = 93
   Insn 66: point = 95
   Insn 65: point = 96
   Insn 64: point = 98
   Insn 63: point = 100
   Insn 62: point = 102
   Insn 61: point = 103
   Insn 60: point = 103
   Insn 59: point = 104
   Insn 58: point = 106
  BB 6
   Insn 169: point = 107
   Insn 168: point = 108
   Insn 167: point = 109
   Insn 166: point = 109
   Insn 165: point = 110
   Insn 164: point = 111
   Insn 163: point = 113
   Insn 162: point = 115
   Insn 161: point = 117
   Insn 160: point = 119
   Insn 159: point = 120
   Insn 158: point = 122
   Insn 157: point = 124
   Insn 156: point = 125
   Insn 155: point = 127
   Insn 154: point = 129
   Insn 153: point = 131
   Insn 152: point = 132
   Insn 151: point = 132
   Insn 150: point = 133
   Insn 149: point = 135
   Insn 148: point = 136
   Insn 147: point = 138
   Insn 146: point = 140
   Insn 145: point = 142
   Insn 144: point = 144
   Insn 143: point = 146
   Insn 142: point = 147
   Insn 141: point = 149
   Insn 140: point = 151
   Insn 139: point = 152
   Insn 138: point = 154
   Insn 137: point = 156
   Insn 136: point = 158
   Insn 135: point = 159
   Insn 134: point = 159
   Insn 133: point = 160
   Insn 132: point = 162
   Insn 131: point = 163
   Insn 130: point = 165
   Insn 129: point = 167
   Insn 128: point = 169
   Insn 127: point = 170
   Insn 126: point = 172
   Insn 125: point = 174
   Insn 124: point = 175
   Insn 123: point = 177
   Insn 122: point = 179
   Insn 121: point = 181
   Insn 120: point = 182
   Insn 119: point = 182
   Insn 118: point = 183
   Insn 117: point = 185
  BB 4
   Insn 53: point = 186
   Insn 52: point = 186
   Insn 51: point = 187
   Insn 50: point = 188
   Insn 49: point = 189
   Insn 48: point = 190
   Insn 47: point = 192
   Insn 46: point = 194
   Insn 45: point = 196
   Insn 44: point = 198
   Insn 43: point = 200
   Insn 42: point = 201
   Insn 41: point = 203
   Insn 40: point = 205
   Insn 39: point = 206
   Insn 38: point = 208
   Insn 37: point = 210
   Insn 36: point = 212
   Insn 35: point = 213
   Insn 34: point = 213
   Insn 33: point = 214
   Insn 32: point = 216
   Insn 31: point = 217
   Insn 30: point = 219
   Insn 29: point = 221
   Insn 28: point = 223
   Insn 27: point = 225
   Insn 26: point = 227
   Insn 25: point = 228
   Insn 24: point = 230
   Insn 23: point = 232
   Insn 22: point = 233
   Insn 21: point = 235
   Insn 20: point = 237
   Insn 19: point = 239
   Insn 18: point = 240
   Insn 17: point = 240
   Insn 16: point = 241
   Insn 15: point = 243
 r59: [20..22]
 r60: [12..14]
 r61: [10..11]
 r62: [8..9]
 r63: [6..7]
 r64: [239..241]
 r65: [231..233]
 r66: [229..230]
 r67: [220..228]
 r68: [224..225]
 r69: [222..223]
 r70: [220..221]
 r71: [218..219]
 r72: [191..217]
 r73: [212..214]
 r74: [204..206]
 r75: [202..203]
 r76: [195..201]
 r77: [197..198]
 r78: [195..196]
 r79: [193..194]
 r80: [191..192]
 r81: [102..104]
 r82: [94..96]
 r83: [92..93]
 r84: [85..91]
 r85: [87..88]
 r86: [85..86]
 r87: [25..84]
 r88: [79..81]
 r89: [71..73]
 r90: [69..70]
 r91: [60..68]
 r92: [64..65]
 r93: [62..63]
 r94: [60..61]
 r95: [58..59]
 r96: [31..57]
 r97: [52..54]
 r98: [44..46]
 r99: [42..43]
 r100: [35..41]
 r101: [37..38]
 r102: [35..36]
 r103: [33..34]
 r104: [30..32]
 r105: [27..29]
 r106: [25..26]
 r107: [181..183]
 r108: [173..175]
 r109: [171..172]
 r110: [164..170]
 r111: [166..167]
 r112: [164..165]
 r113: [107..163]
 r114: [158..160]
 r115: [150..152]
 r116: [148..149]
 r117: [139..147]
 r118: [143..144]
 r119: [141..142]
 r120: [139..140]
 r121: [137..138]
 r122: [110..136]
 r123: [131..133]
 r124: [123..125]
 r125: [121..122]
 r126: [114..120]
 r127: [116..117]
 r128: [114..115]
 r129: [112..113]
 r130: [109..111]
 r131: [107..108]
 r132: [2..3]
 r133: [0..1]
 r134: [242..243]
 r135: [238..240] [234..235]
 r136: [236..237]
 r137: [231..232]
 r138: [226..227]
 r139: [215..216]
 r140: [211..213] [207..208]
 r141: [209..210]
 r142: [204..205]
 r143: [199..200]
 r144: [189..190]
 r145: [186..188]
 r146: [186..187]
 r147: [105..106]
 r148: [101..103] [97..98]
 r149: [99..100]
 r150: [94..95]
 r151: [89..90]
 r152: [82..83]
 r153: [78..80] [74..75]
 r154: [76..77]
 r155: [71..72]
 r156: [66..67]
 r157: [55..56]
 r158: [51..53] [47..48]
 r159: [49..50]
 r160: [44..45]
 r161: [39..40]
 r162: [27..28]
 r163: [184..185]
 r164: [180..182] [176..177]
 r165: [178..179]
 r166: [173..174]
 r167: [168..169]
 r168: [161..162]
 r169: [157..159] [153..154]
 r170: [155..156]
 r171: [150..151]
 r172: [145..146]
 r173: [134..135]
 r174: [130..132] [126..127]
 r175: [128..129]
 r176: [123..124]
 r177: [118..119]
 r178: [23..24]
 r179: [19..21] [15..16]
 r180: [17..18]
 r181: [12..13]
 r182: [4..5]
Compressing live ranges: from 244 to 200 - 81%
Ranges after the compression:
 r59: [18..19]
 r60: [12..13]
 r61: [10..11]
 r62: [8..9]
 r63: [6..7]
 r64: [196..197]
 r65: [190..191]
 r66: [188..189]
 r67: [180..187]
 r68: [184..185]
 r69: [182..183]
 r70: [180..181]
 r71: [178..179]
 r72: [156..177]
 r73: [174..175]
 r74: [168..169]
 r75: [166..167]
 r76: [160..165]
 r77: [162..163]
 r78: [160..161]
 r79: [158..159]
 r80: [156..157]
 r81: [84..85]
 r82: [78..79]
 r83: [76..77]
 r84: [70..75]
 r85: [72..73]
 r86: [70..71]
 r87: [22..69]
 r88: [66..67]
 r89: [60..61]
 r90: [58..59]
 r91: [50..57]
 r92: [54..55]
 r93: [52..53]
 r94: [50..51]
 r95: [48..49]
 r96: [26..47]
 r97: [44..45]
 r98: [38..39]
 r99: [36..37]
 r100: [30..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [148..149]
 r108: [142..143]
 r109: [140..141]
 r110: [134..139]
 r111: [136..137]
 r112: [134..135]
 r113: [88..133]
 r114: [130..131]
 r115: [124..125]
 r116: [122..123]
 r117: [114..121]
 r118: [118..119]
 r119: [116..117]
 r120: [114..115]
 r121: [112..113]
 r122: [90..111]
 r123: [108..109]
 r124: [102..103]
 r125: [100..101]
 r126: [94..99]
 r127: [96..97]
 r128: [94..95]
 r129: [92..93]
 r130: [90..91]
 r131: [88..89]
 r132: [2..3]
 r133: [0..1]
 r134: [198..199]
 r135: [196..197] [192..193]
 r136: [194..195]
 r137: [190..191]
 r138: [186..187]
 r139: [176..177]
 r140: [174..175] [170..171]
 r141: [172..173]
 r142: [168..169]
 r143: [164..165]
 r144: [154..155]
 r145: [152..153]
 r146: [152..153]
 r147: [86..87]
 r148: [84..85] [80..81]
 r149: [82..83]
 r150: [78..79]
 r151: [74..75]
 r152: [68..69]
 r153: [66..67] [62..63]
 r154: [64..65]
 r155: [60..61]
 r156: [56..57]
 r157: [46..47]
 r158: [44..45] [40..41]
 r159: [42..43]
 r160: [38..39]
 r161: [34..35]
 r162: [24..25]
 r163: [150..151]
 r164: [148..149] [144..145]
 r165: [146..147]
 r166: [142..143]
 r167: [138..139]
 r168: [132..133]
 r169: [130..131] [126..127]
 r170: [128..129]
 r171: [124..125]
 r172: [120..121]
 r173: [110..111]
 r174: [108..109] [104..105]
 r175: [106..107]
 r176: [102..103]
 r177: [98..99]
 r178: [20..21]
 r179: [18..19] [14..15]
 r180: [16..17]
 r181: [12..13]
 r182: [4..5]

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 176
changing reg in insn 179
changing reg in insn 177
changing reg in insn 179
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 30
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 48
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 59
changing reg in insn 62
changing reg in insn 60
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 72
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 112
changing reg in insn 74
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 88
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 106
changing reg in insn 91
changing reg in insn 94
changing reg in insn 92
changing reg in insn 94
changing reg in insn 97
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 118
changing reg in insn 121
changing reg in insn 119
changing reg in insn 121
changing reg in insn 124
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 131
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 169
changing reg in insn 133
changing reg in insn 136
changing reg in insn 134
changing reg in insn 136
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 147
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 165
changing reg in insn 150
changing reg in insn 153
changing reg in insn 151
changing reg in insn 153
changing reg in insn 156
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 199
changing reg in insn 202
changing reg in insn 202
changing reg in insn 206
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 22
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 65
changing reg in insn 63
changing reg in insn 62
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 94
changing reg in insn 93
changing reg in insn 92
changing reg in insn 97
changing reg in insn 95
changing reg in insn 94
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 123
changing reg in insn 121
changing reg in insn 120
changing reg in insn 119
changing reg in insn 124
changing reg in insn 122
changing reg in insn 121
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 133
changing reg in insn 138
changing reg in insn 136
changing reg in insn 135
changing reg in insn 134
changing reg in insn 139
changing reg in insn 137
changing reg in insn 136
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 143
changing reg in insn 144
changing reg in insn 149
changing reg in insn 150
changing reg in insn 155
changing reg in insn 153
changing reg in insn 152
changing reg in insn 151
changing reg in insn 156
changing reg in insn 154
changing reg in insn 153
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 160
changing reg in insn 161
changing reg in insn 175
changing reg in insn 176
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 182
changing reg in insn 180
changing reg in insn 179
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 195
changing reg in insn 196
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 167.


_calculate_velocity

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags]
;;  ref usage 	r0={97d,95u} r1={48d,54u,18e} r2={5d,2u} r3={2d,2u} r4={5d,3u} r5={5d,3u} r6={1d,51u} r7={1d,13u} r8={8d,8u} r9={5d,3u} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={63d,3u} r18={2d} r19={2d} r20={1d,1u,9e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 588{323d,238u,27e} in 177{175 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])
        (reg:DI 5 di [ flight ])) mQuery.c:37 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ flight ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 Nflight+0 S4 A32])
        (reg:SI 4 si [ Nflight ])) mQuery.c:37 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ Nflight ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 215 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:40 89 {*movsi_internal}
     (nil))
(jump_insn 215 7 216 2 (set (pc)
        (label_ref 192)) mQuery.c:40 650 {jump}
     (nil)
 -> 192)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 216 215 194)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 194 216 10 3 16 "" [1 uses])
(note 10 194 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 217 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:41 89 {*movsi_internal}
     (nil))
(jump_insn 217 11 218 3 (set (pc)
        (label_ref 173)) mQuery.c:41 650 {jump}
     (nil)
 -> 173)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 218 217 187)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 134 135 136 137 138 139 140 141 142 143 144 145 146
(code_label 187 218 14 4 15 "" [1 uses])
(note 14 187 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 1 dx [orig:64 D.3678 ] [64])
        (sign_extend:DI (reg:SI 0 ax [134]))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [134])
        (nil)))
(insn 17 16 18 4 (set (reg:DI 0 ax [135])
        (reg:DI 1 dx [orig:64 D.3678 ] [64])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 0 ax [135])
                (ashift:DI (reg:DI 0 ax [135])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 0 ax [135])
                (plus:DI (reg:DI 0 ax [135])
                    (reg:DI 1 dx [orig:64 D.3678 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.3678 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.3678 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 0 ax [136])
                (ashift:DI (reg:DI 0 ax [135])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [135])
        (nil)))
(insn 21 20 22 4 (set (reg:DI 0 ax [135])
        (reg:DI 0 ax [136])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [136])
        (nil)))
(insn 22 21 23 4 (set (reg:DI 1 dx [orig:65 D.3678 ] [65])
        (reg:DI 0 ax [135])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [135])
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 0 ax [orig:66 D.3679 ] [66])
                (plus:DI (reg/f:DI 0 ax [137])
                    (reg:DI 1 dx [orig:65 D.3678 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [137])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.3678 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.3678 ] [65]))
                (nil)))))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [orig:67 D.3681 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:66 D.3679 ] [66])
                (const_int 16 [0x10])) [0 _14->time+0 S8 A128])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.3679 ] [66])
        (nil)))
(insn 26 25 27 4 (set (reg:SI 1 dx [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [orig:68 D.3682 ] [68])
        (sign_extend:DI (reg:SI 1 dx [138]))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [138])
        (nil)))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 1 dx [orig:69 D.3682 ] [69])
                (plus:DI (reg:DI 1 dx [orig:68 D.3682 ] [68])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:68 D.3682 ] [68])
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 1 dx [orig:70 D.3682 ] [70])
                (ashift:DI (reg:DI 1 dx [orig:69 D.3682 ] [69])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.3682 ] [69])
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.3681 ] [71])
                (plus:DI (reg/f:DI 0 ax [orig:67 D.3681 ] [67])
                    (reg:DI 1 dx [orig:70 D.3682 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.3682 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.3681 ] [67])
            (nil))))
(insn 31 30 32 4 (set (reg:XF 9 st(1) [orig:72 D.3683 ] [72])
        (mem:XF (reg/f:DI 0 ax [orig:71 D.3681 ] [71]) [0 *_19+0 S16 A128])) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.3681 ] [71])
        (nil)))
(insn 32 31 33 4 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 1 dx [orig:73 D.3678 ] [73])
        (sign_extend:DI (reg:SI 0 ax [139]))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [139])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 0 ax [140])
        (reg:DI 1 dx [orig:73 D.3678 ] [73])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [140])
                (ashift:DI (reg:DI 0 ax [140])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 0 ax [140])
                (plus:DI (reg:DI 0 ax [140])
                    (reg:DI 1 dx [orig:73 D.3678 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.3678 ] [73])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:73 D.3678 ] [73])
                (const_int 5 [0x5]))
            (nil))))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 0 ax [141])
                (ashift:DI (reg:DI 0 ax [140])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [140])
        (nil)))
(insn 38 37 39 4 (set (reg:DI 0 ax [140])
        (reg:DI 0 ax [141])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [141])
        (nil)))
(insn 39 38 40 4 (set (reg:DI 1 dx [orig:74 D.3678 ] [74])
        (reg:DI 0 ax [140])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [140])
        (nil)))
(insn 40 39 41 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.3679 ] [75])
                (plus:DI (reg/f:DI 0 ax [142])
                    (reg:DI 1 dx [orig:74 D.3678 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [142])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.3678 ] [74])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:74 D.3678 ] [74]))
                (nil)))))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [orig:76 D.3681 ] [76])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:75 D.3679 ] [75])
                (const_int 16 [0x10])) [0 _23->time+0 S8 A128])) mQuery.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.3679 ] [75])
        (nil)))
(insn 43 42 44 4 (set (reg:SI 1 dx [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:42 89 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 1 dx [orig:77 D.3678 ] [77])
        (sign_extend:DI (reg:SI 1 dx [143]))) mQuery.c:42 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [143])
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:78 D.3678 ] [78])
                (ashift:DI (reg:DI 1 dx [orig:77 D.3678 ] [77])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:77 D.3678 ] [77])
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.3681 ] [79])
                (plus:DI (reg/f:DI 0 ax [orig:76 D.3681 ] [76])
                    (reg:DI 1 dx [orig:78 D.3678 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:42 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:78 D.3678 ] [78])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.3681 ] [76])
            (nil))))
(insn 47 46 48 4 (set (reg:XF 8 st [orig:80 D.3683 ] [80])
        (mem:XF (reg/f:DI 0 ax [orig:79 D.3681 ] [79]) [0 *_27+0 S16 A128])) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.3681 ] [79])
        (nil)))
(insn 48 47 49 4 (set (reg:XF 8 st [144])
        (minus:XF (reg:XF 9 st(1) [orig:72 D.3683 ] [72])
            (reg:XF 8 st [orig:80 D.3683 ] [80]))) mQuery.c:42 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.3683 ] [80])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:72 D.3683 ] [72])
            (nil))))
(insn 49 48 50 4 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t+0 S16 A128])
        (reg:XF 8 st [144])) mQuery.c:42 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [144])
        (nil)))
(insn 50 49 51 4 (set (reg:XF 9 st(1) [145])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t+0 S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 51 50 52 4 (set (reg:XF 8 st [146])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:XF 1.0000000000000000208166817117216851329430937767028809e-3 [0x0.83126e978d4fep-9])
        (nil)))
(insn 52 51 53 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [145])
            (reg:XF 8 st [146]))) mQuery.c:43 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [146])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [145])
            (nil))))
(jump_insn 53 52 57 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 219)
            (pc))) mQuery.c:43 612 {*jcc_1}
     (nil)
 -> 219)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
(note 57 53 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:DI 1 dx [orig:81 D.3678 ] [81])
        (sign_extend:DI (reg:SI 0 ax [147]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [147])
        (nil)))
(insn 60 59 61 5 (set (reg:DI 0 ax [148])
        (reg:DI 1 dx [orig:81 D.3678 ] [81])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 5 (parallel [
            (set (reg:DI 0 ax [148])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (nil))
(insn 62 61 63 5 (parallel [
            (set (reg:DI 0 ax [148])
                (plus:DI (reg:DI 0 ax [148])
                    (reg:DI 1 dx [orig:81 D.3678 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:81 D.3678 ] [81])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:81 D.3678 ] [81])
                (const_int 5 [0x5]))
            (nil))))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 0 ax [149])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 64 63 65 5 (set (reg:DI 0 ax [148])
        (reg:DI 0 ax [149])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [149])
        (nil)))
(insn 65 64 66 5 (set (reg:DI 1 dx [orig:82 D.3678 ] [82])
        (reg:DI 0 ax [148])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [148])
        (nil)))
(insn 66 65 67 5 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.3679 ] [83])
                (plus:DI (reg/f:DI 0 ax [150])
                    (reg:DI 1 dx [orig:82 D.3678 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [150])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:82 D.3678 ] [82])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:82 D.3678 ] [82]))
                (nil)))))
(insn 68 67 69 5 (set (reg/f:DI 0 ax [orig:84 D.3681 ] [84])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:83 D.3679 ] [83])
                (const_int 24 [0x18])) [0 _32->vel+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:83 D.3679 ] [83])
        (nil)))
(insn 69 68 70 5 (set (reg:SI 1 dx [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:DI 1 dx [orig:85 D.3678 ] [85])
        (sign_extend:DI (reg:SI 1 dx [151]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [151])
        (nil)))
(insn 71 70 72 5 (parallel [
            (set (reg:DI 1 dx [orig:86 D.3678 ] [86])
                (ashift:DI (reg:DI 1 dx [orig:85 D.3678 ] [85])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:85 D.3678 ] [85])
        (nil)))
(insn 72 71 73 5 (parallel [
            (set (reg/f:DI 3 bx [orig:87 D.3681 ] [87])
                (plus:DI (reg/f:DI 0 ax [orig:84 D.3681 ] [84])
                    (reg:DI 1 dx [orig:86 D.3678 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:86 D.3678 ] [86])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.3681 ] [84])
            (nil))))
(insn 73 72 74 5 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:DI 1 dx [orig:88 D.3678 ] [88])
        (sign_extend:DI (reg:SI 0 ax [152]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [152])
        (nil)))
(insn 75 74 76 5 (set (reg:DI 0 ax [153])
        (reg:DI 1 dx [orig:88 D.3678 ] [88])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 0 ax [153])
                (ashift:DI (reg:DI 0 ax [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 0 ax [153])
                (plus:DI (reg:DI 0 ax [153])
                    (reg:DI 1 dx [orig:88 D.3678 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:88 D.3678 ] [88])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.3678 ] [88])
                (const_int 5 [0x5]))
            (nil))))
(insn 78 77 79 5 (parallel [
            (set (reg:DI 0 ax [154])
                (ashift:DI (reg:DI 0 ax [153])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [153])
        (nil)))
(insn 79 78 80 5 (set (reg:DI 0 ax [153])
        (reg:DI 0 ax [154])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [154])
        (nil)))
(insn 80 79 81 5 (set (reg:DI 1 dx [orig:89 D.3678 ] [89])
        (reg:DI 0 ax [153])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [153])
        (nil)))
(insn 81 80 82 5 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.3679 ] [90])
                (plus:DI (reg/f:DI 0 ax [155])
                    (reg:DI 1 dx [orig:89 D.3678 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [155])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:89 D.3678 ] [89])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:89 D.3678 ] [89]))
                (nil)))))
(insn 83 82 84 5 (set (reg/f:DI 0 ax [orig:91 D.3684 ] [91])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:90 D.3679 ] [90])
                (const_int 8 [0x8])) [0 _39->nvp+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.3679 ] [90])
        (nil)))
(insn 84 83 85 5 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:DI 1 dx [orig:92 D.3682 ] [92])
        (sign_extend:DI (reg:SI 1 dx [156]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [156])
        (nil)))
(insn 86 85 87 5 (parallel [
            (set (reg:DI 1 dx [orig:93 D.3682 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 D.3682 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:92 D.3682 ] [92])
        (nil)))
(insn 87 86 88 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.3682 ] [94])
                (ashift:DI (reg:DI 1 dx [orig:93 D.3682 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:93 D.3682 ] [93])
        (nil)))
(insn 88 87 89 5 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.3684 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:91 D.3684 ] [91])
                    (reg:DI 1 dx [orig:94 D.3682 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:94 D.3682 ] [94])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.3684 ] [91])
            (nil))))
(insn 89 88 90 5 (set (reg/f:DI 2 cx [orig:96 D.3681 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 D.3684 ] [95]) [0 *_44+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:95 D.3684 ] [95])
        (nil)))
(insn 90 89 91 5 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 91 90 92 5 (set (reg:DI 1 dx [orig:97 D.3678 ] [97])
        (sign_extend:DI (reg:SI 0 ax [157]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [157])
        (nil)))
(insn 92 91 93 5 (set (reg:DI 0 ax [158])
        (reg:DI 1 dx [orig:97 D.3678 ] [97])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg:DI 0 ax [158])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg:DI 0 ax [158])
                (plus:DI (reg:DI 0 ax [158])
                    (reg:DI 1 dx [orig:97 D.3678 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:97 D.3678 ] [97])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:97 D.3678 ] [97])
                (const_int 5 [0x5]))
            (nil))))
(insn 95 94 96 5 (parallel [
            (set (reg:DI 0 ax [159])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [158])
        (nil)))
(insn 96 95 97 5 (set (reg:DI 0 ax [158])
        (reg:DI 0 ax [159])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [159])
        (nil)))
(insn 97 96 98 5 (set (reg:DI 1 dx [orig:98 D.3678 ] [98])
        (reg:DI 0 ax [158])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [158])
        (nil)))
(insn 98 97 99 5 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 5 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.3679 ] [99])
                (plus:DI (reg/f:DI 0 ax [160])
                    (reg:DI 1 dx [orig:98 D.3678 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [160])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:98 D.3678 ] [98])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:98 D.3678 ] [98]))
                (nil)))))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [orig:100 D.3684 ] [100])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:99 D.3679 ] [99])
                (const_int 8 [0x8])) [0 _48->nvp+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.3679 ] [99])
        (nil)))
(insn 101 100 102 5 (set (reg:SI 1 dx [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:43 89 {*movsi_internal}
     (nil))
(insn 102 101 103 5 (set (reg:DI 1 dx [orig:101 D.3678 ] [101])
        (sign_extend:DI (reg:SI 1 dx [161]))) mQuery.c:43 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [161])
        (nil)))
(insn 103 102 104 5 (parallel [
            (set (reg:DI 1 dx [orig:102 D.3678 ] [102])
                (ashift:DI (reg:DI 1 dx [orig:101 D.3678 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:101 D.3678 ] [101])
        (nil)))
(insn 104 103 105 5 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.3684 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.3684 ] [100])
                    (reg:DI 1 dx [orig:102 D.3678 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:43 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:102 D.3678 ] [102])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.3684 ] [100])
            (nil))))
(insn 105 104 106 5 (set (reg/f:DI 0 ax [orig:104 D.3681 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.3684 ] [103]) [0 *_52+0 S8 A64])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.3684 ] [103])
        (nil)))
(insn 106 105 107 5 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:96 D.3681 ] [96])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:96 D.3681 ] [96])
        (nil)))
(insn 107 106 108 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 D.3681 ] [104])) mQuery.c:43 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 D.3681 ] [104])
        (nil)))
(call_insn 108 107 109 5 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f87349e8a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mQuery.c:43 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 109 108 110 5 (set (reg:XF 8 st [orig:105 D.3683 ] [105])
        (reg:XF 8 st)) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 110 109 111 5 (set (reg:XF 9 st(1) [162])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 t+0 S16 A128])) mQuery.c:43 131 {*movxf_internal_rex64}
     (nil))
(insn 111 110 112 5 (set (reg:XF 8 st [orig:106 D.3683 ] [106])
        (div:XF (reg:XF 8 st [orig:105 D.3683 ] [105])
            (reg:XF 9 st(1) [162]))) mQuery.c:43 800 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 9 st(1) [162])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:105 D.3683 ] [105])
            (nil))))
(insn 112 111 220 5 (set (mem:XF (reg/f:DI 3 bx [orig:87 D.3681 ] [87]) [0 *_36+0 S16 A128])
        (reg:XF 8 st [orig:106 D.3683 ] [106])) mQuery.c:43 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:106 D.3683 ] [106])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:87 D.3681 ] [87])
            (nil))))
(jump_insn 220 112 221 5 (set (pc)
        (label_ref 170)) 650 {jump}
     (nil)
 -> 170)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 221 220 219)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 219 221 116 6 19 "" [1 uses])
(note 116 219 117 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 6 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 118 117 119 6 (set (reg:DI 1 dx [orig:107 D.3678 ] [107])
        (sign_extend:DI (reg:SI 0 ax [163]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [163])
        (nil)))
(insn 119 118 120 6 (set (reg:DI 0 ax [164])
        (reg:DI 1 dx [orig:107 D.3678 ] [107])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 6 (parallel [
            (set (reg:DI 0 ax [164])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (nil))
(insn 121 120 122 6 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg:DI 0 ax [164])
                    (reg:DI 1 dx [orig:107 D.3678 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.3678 ] [107])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:107 D.3678 ] [107])
                (const_int 5 [0x5]))
            (nil))))
(insn 122 121 123 6 (parallel [
            (set (reg:DI 0 ax [165])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 123 122 124 6 (set (reg:DI 0 ax [164])
        (reg:DI 0 ax [165])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [165])
        (nil)))
(insn 124 123 125 6 (set (reg:DI 1 dx [orig:108 D.3678 ] [108])
        (reg:DI 0 ax [164])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [164])
        (nil)))
(insn 125 124 126 6 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 6 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.3679 ] [109])
                (plus:DI (reg/f:DI 0 ax [166])
                    (reg:DI 1 dx [orig:108 D.3678 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [166])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:108 D.3678 ] [108])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:108 D.3678 ] [108]))
                (nil)))))
(insn 127 126 128 6 (set (reg/f:DI 0 ax [orig:110 D.3681 ] [110])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:109 D.3679 ] [109])
                (const_int 24 [0x18])) [0 _58->vel+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.3679 ] [109])
        (nil)))
(insn 128 127 129 6 (set (reg:SI 1 dx [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 129 128 130 6 (set (reg:DI 1 dx [orig:111 D.3678 ] [111])
        (sign_extend:DI (reg:SI 1 dx [167]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [167])
        (nil)))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 1 dx [orig:112 D.3678 ] [112])
                (ashift:DI (reg:DI 1 dx [orig:111 D.3678 ] [111])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:111 D.3678 ] [111])
        (nil)))
(insn 131 130 132 6 (parallel [
            (set (reg/f:DI 3 bx [orig:113 D.3681 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:110 D.3681 ] [110])
                    (reg:DI 1 dx [orig:112 D.3678 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:112 D.3678 ] [112])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:110 D.3681 ] [110])
            (nil))))
(insn 132 131 133 6 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 133 132 134 6 (set (reg:DI 1 dx [orig:114 D.3678 ] [114])
        (sign_extend:DI (reg:SI 0 ax [168]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [168])
        (nil)))
(insn 134 133 135 6 (set (reg:DI 0 ax [169])
        (reg:DI 1 dx [orig:114 D.3678 ] [114])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 135 134 136 6 (parallel [
            (set (reg:DI 0 ax [169])
                (ashift:DI (reg:DI 0 ax [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (nil))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 0 ax [169])
                (plus:DI (reg:DI 0 ax [169])
                    (reg:DI 1 dx [orig:114 D.3678 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:114 D.3678 ] [114])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:114 D.3678 ] [114])
                (const_int 5 [0x5]))
            (nil))))
(insn 137 136 138 6 (parallel [
            (set (reg:DI 0 ax [170])
                (ashift:DI (reg:DI 0 ax [169])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [169])
        (nil)))
(insn 138 137 139 6 (set (reg:DI 0 ax [169])
        (reg:DI 0 ax [170])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [170])
        (nil)))
(insn 139 138 140 6 (set (reg:DI 1 dx [orig:115 D.3678 ] [115])
        (reg:DI 0 ax [169])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [169])
        (nil)))
(insn 140 139 141 6 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 6 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.3679 ] [116])
                (plus:DI (reg/f:DI 0 ax [171])
                    (reg:DI 1 dx [orig:115 D.3678 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [171])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 D.3678 ] [115])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:115 D.3678 ] [115]))
                (nil)))))
(insn 142 141 143 6 (set (reg/f:DI 0 ax [orig:117 D.3684 ] [117])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:116 D.3679 ] [116])
                (const_int 8 [0x8])) [0 _65->nvp+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:116 D.3679 ] [116])
        (nil)))
(insn 143 142 144 6 (set (reg:SI 1 dx [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 144 143 145 6 (set (reg:DI 1 dx [orig:118 D.3682 ] [118])
        (sign_extend:DI (reg:SI 1 dx [172]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [172])
        (nil)))
(insn 145 144 146 6 (parallel [
            (set (reg:DI 1 dx [orig:119 D.3682 ] [119])
                (plus:DI (reg:DI 1 dx [orig:118 D.3682 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:118 D.3682 ] [118])
        (nil)))
(insn 146 145 147 6 (parallel [
            (set (reg:DI 1 dx [orig:120 D.3682 ] [120])
                (ashift:DI (reg:DI 1 dx [orig:119 D.3682 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:119 D.3682 ] [119])
        (nil)))
(insn 147 146 148 6 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.3684 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:117 D.3684 ] [117])
                    (reg:DI 1 dx [orig:120 D.3682 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:120 D.3682 ] [120])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:117 D.3684 ] [117])
            (nil))))
(insn 148 147 149 6 (set (reg/f:DI 2 cx [orig:122 D.3681 ] [122])
        (mem/f:DI (reg/f:DI 0 ax [orig:121 D.3684 ] [121]) [0 *_70+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:121 D.3684 ] [121])
        (nil)))
(insn 149 148 150 6 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 150 149 151 6 (set (reg:DI 1 dx [orig:123 D.3678 ] [123])
        (sign_extend:DI (reg:SI 0 ax [173]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [173])
        (nil)))
(insn 151 150 152 6 (set (reg:DI 0 ax [174])
        (reg:DI 1 dx [orig:123 D.3678 ] [123])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 152 151 153 6 (parallel [
            (set (reg:DI 0 ax [174])
                (ashift:DI (reg:DI 0 ax [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (nil))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 0 ax [174])
                (plus:DI (reg:DI 0 ax [174])
                    (reg:DI 1 dx [orig:123 D.3678 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:123 D.3678 ] [123])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:123 D.3678 ] [123])
                (const_int 5 [0x5]))
            (nil))))
(insn 154 153 155 6 (parallel [
            (set (reg:DI 0 ax [175])
                (ashift:DI (reg:DI 0 ax [174])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [174])
        (nil)))
(insn 155 154 156 6 (set (reg:DI 0 ax [174])
        (reg:DI 0 ax [175])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [175])
        (nil)))
(insn 156 155 157 6 (set (reg:DI 1 dx [orig:124 D.3678 ] [124])
        (reg:DI 0 ax [174])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [174])
        (nil)))
(insn 157 156 158 6 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 158 157 159 6 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.3679 ] [125])
                (plus:DI (reg/f:DI 0 ax [176])
                    (reg:DI 1 dx [orig:124 D.3678 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [176])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:124 D.3678 ] [124])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:124 D.3678 ] [124]))
                (nil)))))
(insn 159 158 160 6 (set (reg/f:DI 0 ax [orig:126 D.3684 ] [126])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:125 D.3679 ] [125])
                (const_int 8 [0x8])) [0 _74->nvp+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.3679 ] [125])
        (nil)))
(insn 160 159 161 6 (set (reg:SI 1 dx [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) mQuery.c:44 89 {*movsi_internal}
     (nil))
(insn 161 160 162 6 (set (reg:DI 1 dx [orig:127 D.3678 ] [127])
        (sign_extend:DI (reg:SI 1 dx [177]))) mQuery.c:44 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [177])
        (nil)))
(insn 162 161 163 6 (parallel [
            (set (reg:DI 1 dx [orig:128 D.3678 ] [128])
                (ashift:DI (reg:DI 1 dx [orig:127 D.3678 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:127 D.3678 ] [127])
        (nil)))
(insn 163 162 164 6 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.3684 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:126 D.3684 ] [126])
                    (reg:DI 1 dx [orig:128 D.3678 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:44 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:128 D.3678 ] [128])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:126 D.3684 ] [126])
            (nil))))
(insn 164 163 165 6 (set (reg/f:DI 0 ax [orig:130 D.3681 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 D.3684 ] [129]) [0 *_78+0 S8 A64])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:129 D.3684 ] [129])
        (nil)))
(insn 165 164 166 6 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:122 D.3681 ] [122])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:122 D.3681 ] [122])
        (nil)))
(insn 166 165 167 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:130 D.3681 ] [130])) mQuery.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:130 D.3681 ] [130])
        (nil)))
(call_insn 167 166 168 6 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("haversine_distance") [flags 0x41]  <function_decl 0x7f87349e8a00 haversine_distance>) [0 haversine_distance S1 A8])
            (const_int 0 [0]))) mQuery.c:44 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 168 167 169 6 (set (reg:XF 8 st [orig:131 D.3683 ] [131])
        (reg:XF 8 st)) mQuery.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 169 168 170 6 (set (mem:XF (reg/f:DI 3 bx [orig:113 D.3681 ] [113]) [0 *_62+0 S16 A128])
        (reg:XF 8 st [orig:131 D.3683 ] [131])) mQuery.c:44 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:131 D.3683 ] [131])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:113 D.3681 ] [113])
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 170 169 171 7 14 "" [1 uses])
(note 171 170 172 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 273 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 63 178 179 180 181
(code_label 173 172 174 8 11 "" [1 uses])
(note 174 173 175 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 8 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:41 89 {*movsi_internal}
     (nil))
(insn 176 175 177 8 (set (reg:DI 1 dx [orig:59 D.3678 ] [59])
        (sign_extend:DI (reg:SI 0 ax [178]))) mQuery.c:41 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [178])
        (nil)))
(insn 177 176 178 8 (set (reg:DI 0 ax [179])
        (reg:DI 1 dx [orig:59 D.3678 ] [59])) mQuery.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 178 177 179 8 (parallel [
            (set (reg:DI 0 ax [179])
                (ashift:DI (reg:DI 0 ax [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 513 {*ashldi3_1}
     (nil))
(insn 179 178 180 8 (parallel [
            (set (reg:DI 0 ax [179])
                (plus:DI (reg:DI 0 ax [179])
                    (reg:DI 1 dx [orig:59 D.3678 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.3678 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.3678 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 180 179 181 8 (parallel [
            (set (reg:DI 0 ax [180])
                (ashift:DI (reg:DI 0 ax [179])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [179])
        (nil)))
(insn 181 180 182 8 (set (reg:DI 0 ax [179])
        (reg:DI 0 ax [180])) mQuery.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [180])
        (nil)))
(insn 182 181 183 8 (set (reg:DI 1 dx [orig:60 D.3678 ] [60])
        (reg:DI 0 ax [179])) mQuery.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [179])
        (nil)))
(insn 183 182 184 8 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 flight+0 S8 A64])) mQuery.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 184 183 185 8 (parallel [
            (set (reg/f:DI 0 ax [orig:61 D.3679 ] [61])
                (plus:DI (reg/f:DI 0 ax [181])
                    (reg:DI 1 dx [orig:60 D.3678 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [181])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:60 D.3678 ] [60])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 flight+0 S8 A64])
                    (reg:DI 1 dx [orig:60 D.3678 ] [60]))
                (nil)))))
(insn 185 184 186 8 (set (reg:SI 0 ax [orig:62 D.3680 ] [62])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:61 D.3679 ] [61])
                (const_int 4 [0x4])) [0 _9->n_nvp+0 S4 A32])) mQuery.c:41 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.3679 ] [61])
        (nil)))
(insn 186 185 188 8 (parallel [
            (set (reg:SI 0 ax [orig:63 D.3680 ] [63])
                (plus:SI (reg:SI 0 ax [orig:62 D.3680 ] [62])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:41 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.3680 ] [62])
        (nil)))
(insn 188 186 189 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:63 D.3680 ] [63])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32]))) mQuery.c:41 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.3680 ] [63])
        (nil)))
(jump_insn 189 188 190 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) mQuery.c:41 612 {*jcc_1}
     (nil)
 -> 187)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 190 189 191 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:40 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182
(code_label 192 191 193 10 10 "" [1 uses])
(note 193 192 195 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 195 193 196 10 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) mQuery.c:40 89 {*movsi_internal}
     (nil))
(insn 196 195 197 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [182])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 Nflight+0 S4 A32]))) mQuery.c:40 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [182])
        (nil)))
(jump_insn 197 196 198 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) mQuery.c:40 612 {*jcc_1}
     (nil)
 -> 194)
;;  succ:       3
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 132 133
(note 198 197 199 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 202 11 (set (reg:SI 0 ax [orig:132 D.3680 ] [132])
        (const_int 1 [0x1])) mQuery.c:47 89 {*movsi_internal}
     (nil))
(insn 202 199 206 11 (set (reg:SI 0 ax [orig:133 <retval> ] [133])
        (reg:SI 0 ax [orig:132 D.3680 ] [132])) mQuery.c:47 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:132 D.3680 ] [132])
        (nil)))
(insn 206 202 209 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:133 <retval> ] [133])) mQuery.c:48 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:133 <retval> ] [133])
        (nil)))
(insn 209 206 0 11 (use (reg/i:SI 0 ax)) mQuery.c:48 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_M1 (get_M1, funcdef_no=4, decl_uid=1760, cgraph_uid=4)

      Creating newreg=310
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
deleting insn with uid = 5.
      Creating newreg=311
Removing SCRATCH in insn #532 (nop 3)
rescanning insn with uid = 532.
deleting insn with uid = 532.

********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=50096, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=50064, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r310
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 84:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) qm  (1) qn {*cmpqi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 105:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 135
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 201:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 205:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 210:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 216:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 230:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 236:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 245:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 255
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 262:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 263:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 269:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 272:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 276:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 287:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 293:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 301:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 310:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 319
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 320:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 322:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 325:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 326:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 327:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 331
	 Choosing alt 0 in insn 331:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 334:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 337:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 341:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 346:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 352:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 358:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 366:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 374:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 384
	 Choosing alt 0 in insn 384:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 391:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 392:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 393:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 396
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 399:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 401:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 402:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 406:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 411:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 417:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 425:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) rzw {*call}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 433:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 437:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 442:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 448:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 456:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 464:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 465:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 474
	 Choosing alt 0 in insn 474:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=6,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 479:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 480:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 481:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 484
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 489:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 492:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 502
	 Choosing alt 0 in insn 502:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 505:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 508:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 513:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 516:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r311
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 126 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 143 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 160 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51

********** Pseudo live ranges #1: **********

  BB 50
   Insn 534: point = 0
  BB 51
   Insn 537: point = 0
  BB 49
   Insn 533: point = 0
   Insn 532: point = 0
   Insn 529: point = 1
   Insn 525: point = 2
   Insn 522: point = 4
   Insn 521: point = 5
   Insn 520: point = 5
   Insn 519: point = 6
   Insn 518: point = 7
   Insn 517: point = 8
   Insn 516: point = 10
  BB 48
   Insn 514: point = 11
   Insn 513: point = 11
   Insn 512: point = 12
  BB 4
   Insn 542: point = 13
   Insn 46: point = 13
   Insn 45: point = 13
   Insn 44: point = 14
   Insn 43: point = 15
   Insn 42: point = 17
   Insn 41: point = 18
   Insn 40: point = 18
   Insn 39: point = 19
   Insn 38: point = 21
   Insn 37: point = 23
   Insn 36: point = 25
   Insn 35: point = 26
   Insn 34: point = 26
   Insn 33: point = 27
   Insn 32: point = 29
   Insn 31: point = 30
   Insn 30: point = 31
   Insn 29: point = 32
   Insn 28: point = 32
   Insn 27: point = 33
   Insn 26: point = 34
   Insn 25: point = 34
   Insn 24: point = 35
   Insn 23: point = 35
   Insn 22: point = 36
   Insn 21: point = 37
  BB 3
   Insn 18: point = 38
   Insn 17: point = 38
  BB 2
   Insn 15: point = 38
   Insn 14: point = 38
   Insn 13: point = 38
   Insn 12: point = 39
   Insn 11: point = 40
   Insn 10: point = 40
   Insn 9: point = 41
   Insn 8: point = 41
   Insn 5: point = 42
   Insn 3: point = 44
   Insn 2: point = 44
  BB 47
   Insn 508: point = 44
  BB 46
   Insn 506: point = 44
   Insn 505: point = 44
   Insn 503: point = 45
   Insn 502: point = 47
   Insn 501: point = 49
   Insn 500: point = 51
   Insn 499: point = 53
   Insn 498: point = 55
   Insn 497: point = 56
   Insn 496: point = 56
   Insn 495: point = 57
   Insn 494: point = 59
   Insn 493: point = 60
   Insn 492: point = 62
  BB 10
   Insn 546: point = 63
   Insn 197: point = 63
   Insn 196: point = 63
   Insn 195: point = 64
   Insn 194: point = 65
   Insn 193: point = 65
   Insn 192: point = 66
   Insn 191: point = 68
   Insn 190: point = 70
   Insn 189: point = 72
   Insn 188: point = 74
   Insn 187: point = 76
   Insn 186: point = 78
   Insn 185: point = 79
   Insn 184: point = 79
   Insn 183: point = 80
   Insn 182: point = 82
   Insn 181: point = 83
   Insn 180: point = 85
   Insn 179: point = 86
   Insn 178: point = 88
   Insn 177: point = 90
   Insn 176: point = 92
   Insn 175: point = 94
   Insn 174: point = 95
   Insn 173: point = 95
   Insn 172: point = 96
   Insn 171: point = 98
   Insn 170: point = 99
   Insn 169: point = 101
   Insn 168: point = 102
   Insn 167: point = 103
   Insn 166: point = 104
   Insn 165: point = 104
   Insn 164: point = 105
   Insn 163: point = 107
   Insn 162: point = 109
   Insn 161: point = 111
   Insn 160: point = 113
   Insn 159: point = 115
   Insn 158: point = 116
   Insn 157: point = 116
   Insn 156: point = 117
   Insn 155: point = 119
   Insn 154: point = 120
   Insn 153: point = 122
   Insn 152: point = 123
   Insn 151: point = 125
   Insn 150: point = 127
   Insn 149: point = 129
   Insn 148: point = 131
   Insn 147: point = 132
   Insn 146: point = 132
   Insn 145: point = 133
   Insn 144: point = 135
   Insn 143: point = 136
   Insn 142: point = 138
   Insn 141: point = 139
   Insn 140: point = 140
   Insn 139: point = 141
   Insn 138: point = 141
   Insn 137: point = 142
   Insn 136: point = 142
   Insn 135: point = 144
   Insn 134: point = 146
   Insn 133: point = 148
   Insn 132: point = 150
   Insn 131: point = 152
   Insn 130: point = 153
   Insn 129: point = 153
   Insn 128: point = 154
   Insn 127: point = 156
   Insn 126: point = 157
   Insn 125: point = 159
   Insn 124: point = 160
   Insn 123: point = 162
   Insn 122: point = 164
   Insn 121: point = 166
   Insn 120: point = 168
   Insn 119: point = 169
   Insn 118: point = 169
   Insn 117: point = 170
   Insn 116: point = 172
   Insn 115: point = 173
   Insn 114: point = 175
   Insn 113: point = 176
   Insn 112: point = 177
   Insn 111: point = 178
   Insn 110: point = 178
   Insn 109: point = 179
   Insn 108: point = 181
   Insn 107: point = 183
   Insn 106: point = 184
   Insn 105: point = 185
   Insn 104: point = 185
   Insn 103: point = 187
   Insn 102: point = 189
   Insn 101: point = 191
   Insn 100: point = 193
   Insn 99: point = 194
   Insn 98: point = 194
   Insn 97: point = 195
   Insn 96: point = 197
   Insn 95: point = 198
   Insn 94: point = 200
  BB 9
   Insn 92: point = 201
   Insn 91: point = 201
   Insn 89: point = 202
   Insn 88: point = 204
   Insn 87: point = 206
  BB 7
   Insn 544: point = 207
   Insn 80: point = 207
   Insn 79: point = 207
   Insn 78: point = 208
   Insn 77: point = 209
   Insn 76: point = 209
   Insn 75: point = 210
   Insn 74: point = 211
   Insn 73: point = 213
   Insn 72: point = 215
   Insn 71: point = 217
   Insn 70: point = 219
   Insn 69: point = 220
   Insn 68: point = 220
   Insn 67: point = 221
   Insn 66: point = 223
   Insn 65: point = 224
   Insn 64: point = 226
  BB 6
   Insn 61: point = 227
   Insn 60: point = 227
  BB 5
   Insn 58: point = 227
   Insn 57: point = 227
   Insn 56: point = 228
   Insn 55: point = 229
   Insn 54: point = 229
   Insn 53: point = 230
   Insn 52: point = 230
   Insn 51: point = 231
   Insn 50: point = 232
  BB 8
   Insn 84: point = 233
  BB 45
   Insn 489: point = 233
   Insn 488: point = 233
   Insn 487: point = 234
   Insn 486: point = 235
   Insn 485: point = 235
   Insn 484: point = 236
   Insn 483: point = 238
   Insn 482: point = 240
   Insn 481: point = 241
   Insn 480: point = 242
   Insn 479: point = 242
   Insn 478: point = 244
   Insn 477: point = 246
   Insn 476: point = 248
   Insn 475: point = 249
   Insn 474: point = 251
   Insn 473: point = 253
   Insn 472: point = 255
   Insn 471: point = 257
   Insn 470: point = 259
   Insn 469: point = 260
   Insn 468: point = 260
   Insn 467: point = 261
   Insn 466: point = 263
   Insn 465: point = 264
   Insn 464: point = 266
  BB 44
   Insn 461: point = 267
   Insn 460: point = 267
  BB 43
   Insn 458: point = 267
   Insn 457: point = 267
   Insn 456: point = 268
   Insn 455: point = 270
   Insn 454: point = 272
  BB 41
   Insn 444: point = 273
   Insn 443: point = 273
   Insn 442: point = 274
   Insn 441: point = 276
   Insn 440: point = 278
  BB 39
   Insn 556: point = 279
   Insn 433: point = 279
  BB 38
   Insn 430: point = 279
   Insn 429: point = 279
  BB 37
   Insn 427: point = 279
   Insn 426: point = 279
   Insn 425: point = 280
   Insn 424: point = 282
   Insn 423: point = 284
  BB 35
   Insn 413: point = 285
   Insn 412: point = 285
   Insn 411: point = 286
   Insn 410: point = 288
   Insn 409: point = 290
  BB 33
   Insn 554: point = 291
   Insn 402: point = 291
   Insn 401: point = 291
   Insn 400: point = 292
   Insn 399: point = 294
   Insn 398: point = 295
   Insn 397: point = 295
   Insn 396: point = 296
   Insn 395: point = 298
   Insn 394: point = 300
   Insn 393: point = 301
   Insn 392: point = 302
   Insn 391: point = 302
   Insn 390: point = 304
   Insn 389: point = 306
   Insn 388: point = 308
   Insn 387: point = 310
   Insn 386: point = 312
   Insn 385: point = 313
   Insn 384: point = 315
   Insn 383: point = 317
   Insn 382: point = 319
   Insn 381: point = 321
   Insn 380: point = 323
   Insn 379: point = 324
   Insn 378: point = 324
   Insn 377: point = 325
   Insn 376: point = 327
   Insn 375: point = 328
   Insn 374: point = 330
  BB 32
   Insn 371: point = 331
   Insn 370: point = 331
  BB 31
   Insn 368: point = 331
   Insn 367: point = 331
   Insn 366: point = 332
   Insn 365: point = 334
   Insn 364: point = 336
  BB 28
   Insn 348: point = 337
   Insn 347: point = 337
   Insn 346: point = 338
   Insn 345: point = 340
   Insn 344: point = 342
  BB 26
   Insn 552: point = 343
   Insn 337: point = 343
   Insn 336: point = 343
   Insn 335: point = 344
   Insn 334: point = 346
   Insn 333: point = 347
   Insn 332: point = 347
   Insn 331: point = 348
   Insn 330: point = 350
   Insn 329: point = 352
   Insn 328: point = 353
   Insn 327: point = 354
   Insn 326: point = 354
   Insn 325: point = 356
   Insn 324: point = 358
   Insn 323: point = 360
   Insn 322: point = 362
   Insn 321: point = 364
   Insn 320: point = 365
   Insn 319: point = 367
   Insn 318: point = 369
   Insn 317: point = 371
   Insn 316: point = 373
   Insn 315: point = 375
   Insn 314: point = 376
   Insn 313: point = 376
   Insn 312: point = 377
   Insn 311: point = 379
   Insn 310: point = 380
   Insn 309: point = 382
  BB 25
   Insn 306: point = 383
   Insn 305: point = 383
  BB 24
   Insn 303: point = 383
   Insn 302: point = 383
   Insn 301: point = 384
   Insn 300: point = 386
   Insn 299: point = 388
  BB 21
   Insn 283: point = 389
   Insn 282: point = 389
   Insn 281: point = 390
   Insn 280: point = 392
   Insn 279: point = 394
  BB 19
   Insn 550: point = 395
   Insn 272: point = 395
   Insn 271: point = 395
   Insn 270: point = 396
   Insn 269: point = 398
   Insn 268: point = 399
   Insn 267: point = 399
   Insn 266: point = 400
   Insn 265: point = 402
   Insn 264: point = 404
   Insn 263: point = 405
   Insn 262: point = 406
   Insn 261: point = 406
   Insn 260: point = 408
   Insn 259: point = 410
   Insn 258: point = 412
   Insn 257: point = 414
   Insn 256: point = 415
   Insn 255: point = 417
   Insn 254: point = 419
   Insn 253: point = 421
   Insn 252: point = 423
   Insn 251: point = 425
   Insn 250: point = 426
   Insn 249: point = 426
   Insn 248: point = 427
   Insn 247: point = 429
   Insn 246: point = 430
   Insn 245: point = 432
  BB 18
   Insn 242: point = 433
   Insn 241: point = 433
  BB 17
   Insn 238: point = 433
   Insn 237: point = 433
   Insn 236: point = 434
   Insn 235: point = 436
   Insn 234: point = 438
  BB 16
   Insn 232: point = 439
   Insn 231: point = 439
   Insn 230: point = 440
   Insn 229: point = 442
   Insn 228: point = 444
  BB 13
   Insn 212: point = 445
   Insn 211: point = 445
   Insn 210: point = 446
   Insn 209: point = 448
   Insn 208: point = 450
  BB 11
   Insn 548: point = 451
   Insn 201: point = 451
  BB 12
   Insn 205: point = 451
  BB 15
   Insn 225: point = 451
   Insn 224: point = 451
   Insn 222: point = 452
   Insn 221: point = 454
   Insn 220: point = 456
  BB 14
   Insn 218: point = 457
   Insn 217: point = 457
   Insn 216: point = 458
   Insn 215: point = 460
   Insn 214: point = 462
  BB 20
   Insn 276: point = 463
  BB 23
   Insn 296: point = 463
   Insn 295: point = 463
   Insn 293: point = 464
   Insn 292: point = 466
   Insn 291: point = 468
  BB 22
   Insn 289: point = 469
   Insn 288: point = 469
   Insn 287: point = 470
   Insn 286: point = 472
   Insn 285: point = 474
  BB 27
   Insn 341: point = 475
  BB 30
   Insn 361: point = 475
   Insn 360: point = 475
   Insn 358: point = 476
   Insn 357: point = 478
   Insn 356: point = 480
  BB 29
   Insn 354: point = 481
   Insn 353: point = 481
   Insn 352: point = 482
   Insn 351: point = 484
   Insn 350: point = 486
  BB 34
   Insn 406: point = 487
  BB 36
   Insn 420: point = 487
   Insn 419: point = 487
   Insn 417: point = 488
   Insn 416: point = 490
   Insn 415: point = 492
  BB 40
   Insn 437: point = 493
  BB 42
   Insn 451: point = 493
   Insn 450: point = 493
   Insn 448: point = 494
   Insn 447: point = 496
   Insn 446: point = 498
 r59: [25..27]
 r60: [18..19]
 r61: [13..15]
 r62: [227..228]
 r63: [212..224]
 r64: [219..221]
 r65: [212..213]
 r66: [207..211]
 r67: [207..208]
 r68: [201..202]
 r69: [186..198]
 r70: [193..195]
 r71: [186..187]
 r72: [176..185]
 r73: [178..179]
 r74: [176..177]
 r75: [161..173]
 r76: [168..170]
 r77: [161..162]
 r78: [139..160]
 r79: [145..157]
 r80: [152..154]
 r81: [145..146]
 r82: [143..144]
 r83: [141..142]
 r84: [139..140]
 r85: [124..136]
 r86: [131..133]
 r87: [124..125]
 r88: [102..123]
 r89: [108..120]
 r90: [115..117]
 r91: [108..109]
 r92: [106..107]
 r93: [104..105]
 r94: [102..103]
 r95: [87..99]
 r96: [94..96]
 r97: [87..88]
 r98: [63..86]
 r99: [71..83]
 r100: [78..80]
 r101: [71..72]
 r102: [69..70]
 r103: [67..68]
 r104: [65..66]
 r105: [63..64]
 r106: [48..60]
 r107: [55..57]
 r108: [48..49]
 r109: [46..47]
 r110: [44..45]
 r111: [445..446]
 r112: [457..458]
 r113: [451..452]
 r114: [439..440]
 r115: [433..434]
 r116: [418..430]
 r117: [425..427]
 r118: [418..419]
 r119: [416..417]
 r120: [409..415]
 r121: [411..412]
 r122: [409..410]
 r123: [407..408]
 r124: [395..406]
 r125: [399..400]
 r126: [397..398]
 r127: [395..396]
 r128: [389..390]
 r129: [469..470]
 r130: [463..464]
 r131: [383..384]
 r132: [368..380]
 r133: [375..377]
 r134: [368..369]
 r135: [366..367]
 r136: [359..365]
 r137: [361..362]
 r138: [359..360]
 r139: [357..358]
 r140: [355..356]
 r141: [343..354]
 r142: [347..348]
 r143: [345..346]
 r144: [343..344]
 r145: [337..338]
 r146: [481..482]
 r147: [475..476]
 r148: [331..332]
 r149: [316..328]
 r150: [323..325]
 r151: [316..317]
 r152: [314..315]
 r153: [307..313]
 r154: [309..310]
 r155: [307..308]
 r156: [305..306]
 r157: [303..304]
 r158: [291..302]
 r159: [295..296]
 r160: [293..294]
 r161: [291..292]
 r162: [285..286]
 r163: [487..488]
 r164: [279..280]
 r165: [273..274]
 r166: [493..494]
 r167: [267..268]
 r168: [252..264]
 r169: [259..261]
 r170: [252..253]
 r171: [250..251]
 r172: [243..249]
 r173: [245..246]
 r174: [243..244]
 r175: [233..242]
 r176: [235..236]
 r177: [233..234]
 r178: [5..8]
 r179: [3..4]
 r180: [1..2]
 r181: [40..41]
 r182: [38..39]
 r183: [35..37]
 r184: [34..36]
 r185: [32..33]
 r186: [30..31]
 r187: [28..29]
 r188: [24..26] [20..21]
 r189: [22..23]
 r190: [16..17]
 r191: [13..14]
 r192: [230..232]
 r193: [229..231]
 r194: [225..226]
 r195: [222..223]
 r196: [218..220] [214..215]
 r197: [216..217]
 r198: [209..210]
 r199: [203..204]
 r200: [205..206]
 r201: [199..200]
 r202: [196..197]
 r203: [192..194] [188..189]
 r204: [190..191]
 r205: [180..184]
 r206: [180..181]
 r207: [182..183]
 r208: [174..175]
 r209: [171..172]
 r210: [167..169] [163..164]
 r211: [165..166]
 r212: [158..159]
 r213: [155..156]
 r214: [151..153] [147..148]
 r215: [149..150]
 r216: [137..138]
 r217: [134..135]
 r218: [130..132] [126..127]
 r219: [128..129]
 r220: [121..122]
 r221: [118..119]
 r222: [114..116] [110..111]
 r223: [112..113]
 r224: [100..101]
 r225: [97..98]
 r226: [93..95] [89..90]
 r227: [91..92]
 r228: [84..85]
 r229: [81..82]
 r230: [77..79] [73..74]
 r231: [75..76]
 r232: [447..448]
 r233: [449..450]
 r234: [459..460]
 r235: [461..462]
 r236: [453..454]
 r237: [455..456]
 r238: [441..442]
 r239: [443..444]
 r240: [435..436]
 r241: [437..438]
 r242: [431..432]
 r243: [428..429]
 r244: [424..426] [420..421]
 r245: [422..423]
 r246: [413..414]
 r247: [401..405]
 r248: [401..402]
 r249: [403..404]
 r250: [391..392]
 r251: [393..394]
 r252: [471..472]
 r253: [473..474]
 r254: [465..466]
 r255: [467..468]
 r256: [385..386]
 r257: [387..388]
 r258: [381..382]
 r259: [378..379]
 r260: [374..376] [370..371]
 r261: [372..373]
 r262: [363..364]
 r263: [349..353]
 r264: [349..350]
 r265: [351..352]
 r266: [339..340]
 r267: [341..342]
 r268: [483..484]
 r269: [485..486]
 r270: [477..478]
 r271: [479..480]
 r272: [333..334]
 r273: [335..336]
 r274: [329..330]
 r275: [326..327]
 r276: [322..324] [318..319]
 r277: [320..321]
 r278: [311..312]
 r279: [297..301]
 r280: [297..298]
 r281: [299..300]
 r282: [287..288]
 r283: [289..290]
 r284: [489..490]
 r285: [491..492]
 r286: [281..282]
 r287: [283..284]
 r288: [275..276]
 r289: [277..278]
 r290: [495..496]
 r291: [497..498]
 r292: [269..270]
 r293: [271..272]
 r294: [265..266]
 r295: [262..263]
 r296: [258..260] [254..255]
 r297: [256..257]
 r298: [247..248]
 r299: [237..241]
 r300: [237..238]
 r301: [239..240]
 r302: [61..62]
 r303: [58..59]
 r304: [54..56] [50..51]
 r305: [52..53]
 r306: [11..12]
 r307: [9..10]
 r308: [6..7]
 r310: [42..43]
 r311: [0..0]
Compressing live ranges: from 499 to 433 - 86%
Ranges after the compression:
 r59: [21..22]
 r60: [15..16]
 r61: [11..12]
 r62: [187..188]
 r63: [175..184]
 r64: [181..182]
 r65: [175..176]
 r66: [171..174]
 r67: [171..172]
 r68: [165..166]
 r69: [153..162]
 r70: [159..160]
 r71: [153..154]
 r72: [145..152]
 r73: [147..148]
 r74: [145..146]
 r75: [133..142]
 r76: [139..140]
 r77: [133..134]
 r78: [115..132]
 r79: [121..130]
 r80: [127..128]
 r81: [121..122]
 r82: [119..120]
 r83: [117..118]
 r84: [115..116]
 r85: [103..112]
 r86: [109..110]
 r87: [103..104]
 r88: [85..102]
 r89: [91..100]
 r90: [97..98]
 r91: [91..92]
 r92: [89..90]
 r93: [87..88]
 r94: [85..86]
 r95: [73..82]
 r96: [79..80]
 r97: [73..74]
 r98: [53..72]
 r99: [61..70]
 r100: [67..68]
 r101: [61..62]
 r102: [59..60]
 r103: [57..58]
 r104: [55..56]
 r105: [53..54]
 r106: [41..50]
 r107: [47..48]
 r108: [41..42]
 r109: [39..40]
 r110: [37..38]
 r111: [379..380]
 r112: [391..392]
 r113: [385..386]
 r114: [373..374]
 r115: [367..368]
 r116: [355..364]
 r117: [361..362]
 r118: [355..356]
 r119: [353..354]
 r120: [347..352]
 r121: [349..350]
 r122: [347..348]
 r123: [345..346]
 r124: [335..344]
 r125: [339..340]
 r126: [337..338]
 r127: [335..336]
 r128: [329..330]
 r129: [403..404]
 r130: [397..398]
 r131: [323..324]
 r132: [311..320]
 r133: [317..318]
 r134: [311..312]
 r135: [309..310]
 r136: [303..308]
 r137: [305..306]
 r138: [303..304]
 r139: [301..302]
 r140: [299..300]
 r141: [289..298]
 r142: [293..294]
 r143: [291..292]
 r144: [289..290]
 r145: [283..284]
 r146: [415..416]
 r147: [409..410]
 r148: [277..278]
 r149: [265..274]
 r150: [271..272]
 r151: [265..266]
 r152: [263..264]
 r153: [257..262]
 r154: [259..260]
 r155: [257..258]
 r156: [255..256]
 r157: [253..254]
 r158: [243..252]
 r159: [247..248]
 r160: [245..246]
 r161: [243..244]
 r162: [237..238]
 r163: [421..422]
 r164: [231..232]
 r165: [225..226]
 r166: [427..428]
 r167: [219..220]
 r168: [207..216]
 r169: [213..214]
 r170: [207..208]
 r171: [205..206]
 r172: [199..204]
 r173: [201..202]
 r174: [199..200]
 r175: [191..198]
 r176: [193..194]
 r177: [191..192]
 r178: [5..6]
 r179: [3..4]
 r180: [1..2]
 r181: [33..34]
 r182: [31..32]
 r183: [29..30]
 r184: [29..30]
 r185: [27..28]
 r186: [25..26]
 r187: [23..24]
 r188: [21..22] [17..18]
 r189: [19..20]
 r190: [13..14]
 r191: [11..12]
 r192: [189..190]
 r193: [189..190]
 r194: [185..186]
 r195: [183..184]
 r196: [181..182] [177..178]
 r197: [179..180]
 r198: [173..174]
 r199: [167..168]
 r200: [169..170]
 r201: [163..164]
 r202: [161..162]
 r203: [159..160] [155..156]
 r204: [157..158]
 r205: [149..152]
 r206: [149..150]
 r207: [151..152]
 r208: [143..144]
 r209: [141..142]
 r210: [139..140] [135..136]
 r211: [137..138]
 r212: [131..132]
 r213: [129..130]
 r214: [127..128] [123..124]
 r215: [125..126]
 r216: [113..114]
 r217: [111..112]
 r218: [109..110] [105..106]
 r219: [107..108]
 r220: [101..102]
 r221: [99..100]
 r222: [97..98] [93..94]
 r223: [95..96]
 r224: [83..84]
 r225: [81..82]
 r226: [79..80] [75..76]
 r227: [77..78]
 r228: [71..72]
 r229: [69..70]
 r230: [67..68] [63..64]
 r231: [65..66]
 r232: [381..382]
 r233: [383..384]
 r234: [393..394]
 r235: [395..396]
 r236: [387..388]
 r237: [389..390]
 r238: [375..376]
 r239: [377..378]
 r240: [369..370]
 r241: [371..372]
 r242: [365..366]
 r243: [363..364]
 r244: [361..362] [357..358]
 r245: [359..360]
 r246: [351..352]
 r247: [341..344]
 r248: [341..342]
 r249: [343..344]
 r250: [331..332]
 r251: [333..334]
 r252: [405..406]
 r253: [407..408]
 r254: [399..400]
 r255: [401..402]
 r256: [325..326]
 r257: [327..328]
 r258: [321..322]
 r259: [319..320]
 r260: [317..318] [313..314]
 r261: [315..316]
 r262: [307..308]
 r263: [295..298]
 r264: [295..296]
 r265: [297..298]
 r266: [285..286]
 r267: [287..288]
 r268: [417..418]
 r269: [419..420]
 r270: [411..412]
 r271: [413..414]
 r272: [279..280]
 r273: [281..282]
 r274: [275..276]
 r275: [273..274]
 r276: [271..272] [267..268]
 r277: [269..270]
 r278: [261..262]
 r279: [249..252]
 r280: [249..250]
 r281: [251..252]
 r282: [239..240]
 r283: [241..242]
 r284: [423..424]
 r285: [425..426]
 r286: [233..234]
 r287: [235..236]
 r288: [227..228]
 r289: [229..230]
 r290: [429..430]
 r291: [431..432]
 r292: [221..222]
 r293: [223..224]
 r294: [217..218]
 r295: [215..216]
 r296: [213..214] [209..210]
 r297: [211..212]
 r298: [203..204]
 r299: [195..198]
 r300: [195..196]
 r301: [197..198]
 r302: [51..52]
 r303: [49..50]
 r304: [47..48] [43..44]
 r305: [45..46]
 r306: [9..10]
 r307: [7..8]
 r308: [5..6]
 r310: [35..36]
 r311: [0..0]
	 Assigning to 310 (cl=INDEX_REGS, orig=310, freq=1, tfirst=310, tfreq=1)...
	   Assign 0 to reload r310 (freq=1)
	 Assigning to 311 (cl=INDEX_REGS, orig=311, freq=1, tfirst=311, tfreq=1)...
	   Assign 4 to reload r311 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 126	 160	 143
Changing spilled pseudos to memory in insn #269
Changing spilled pseudos to memory in insn #270
Changing spilled pseudos to memory in insn #334
Changing spilled pseudos to memory in insn #335
Changing spilled pseudos to memory in insn #399
Changing spilled pseudos to memory in insn #400

********** Local #3: **********

Reusing alternative 0 for insn #400
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #399
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 399:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #335
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #334
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 334:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #270
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #269
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 269:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=50112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=50080, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 45
changing reg in insn 56
changing reg in insn 57
changing reg in insn 65
changing reg in insn 74
changing reg in insn 67
changing reg in insn 70
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 89
changing reg in insn 91
changing reg in insn 95
changing reg in insn 104
changing reg in insn 97
changing reg in insn 100
changing reg in insn 98
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 113
changing reg in insn 109
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 124
changing reg in insn 117
changing reg in insn 120
changing reg in insn 118
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 141
changing reg in insn 126
changing reg in insn 128
changing reg in insn 131
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 152
changing reg in insn 145
changing reg in insn 148
changing reg in insn 146
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 168
changing reg in insn 154
changing reg in insn 156
changing reg in insn 159
changing reg in insn 157
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 179
changing reg in insn 172
changing reg in insn 175
changing reg in insn 173
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 196
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 184
changing reg in insn 186
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 493
changing reg in insn 495
changing reg in insn 498
changing reg in insn 496
changing reg in insn 498
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 505
changing reg in insn 210
changing reg in insn 211
changing reg in insn 216
changing reg in insn 217
changing reg in insn 222
changing reg in insn 224
changing reg in insn 230
changing reg in insn 231
changing reg in insn 236
changing reg in insn 237
changing reg in insn 246
changing reg in insn 248
changing reg in insn 251
changing reg in insn 249
changing reg in insn 251
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 260
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 271
changing reg in insn 266
changing reg in insn 267
changing reg in insn 270
changing reg in insn 271
changing reg in insn 281
changing reg in insn 282
changing reg in insn 287
changing reg in insn 288
changing reg in insn 293
changing reg in insn 295
changing reg in insn 301
changing reg in insn 302
changing reg in insn 310
changing reg in insn 312
changing reg in insn 315
changing reg in insn 313
changing reg in insn 315
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 324
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 336
changing reg in insn 331
changing reg in insn 332
changing reg in insn 335
changing reg in insn 336
changing reg in insn 346
changing reg in insn 347
changing reg in insn 352
changing reg in insn 353
changing reg in insn 358
changing reg in insn 360
changing reg in insn 366
changing reg in insn 367
changing reg in insn 375
changing reg in insn 377
changing reg in insn 380
changing reg in insn 378
changing reg in insn 380
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 389
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 401
changing reg in insn 396
changing reg in insn 397
changing reg in insn 400
changing reg in insn 401
changing reg in insn 411
changing reg in insn 412
changing reg in insn 417
changing reg in insn 419
changing reg in insn 425
changing reg in insn 426
changing reg in insn 442
changing reg in insn 443
changing reg in insn 448
changing reg in insn 450
changing reg in insn 456
changing reg in insn 457
changing reg in insn 465
changing reg in insn 467
changing reg in insn 470
changing reg in insn 468
changing reg in insn 470
changing reg in insn 473
changing reg in insn 474
changing reg in insn 475
changing reg in insn 475
changing reg in insn 479
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 479
changing reg in insn 479
changing reg in insn 488
changing reg in insn 484
changing reg in insn 485
changing reg in insn 487
changing reg in insn 488
changing reg in insn 517
changing reg in insn 520
changing reg in insn 522
changing reg in insn 525
changing reg in insn 525
changing reg in insn 529
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 23
changing reg in insn 22
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 54
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 70
changing reg in insn 69
changing reg in insn 68
changing reg in insn 73
changing reg in insn 71
changing reg in insn 70
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 88
changing reg in insn 89
changing reg in insn 87
changing reg in insn 88
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 108
changing reg in insn 107
changing reg in insn 108
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 122
changing reg in insn 120
changing reg in insn 119
changing reg in insn 118
changing reg in insn 123
changing reg in insn 121
changing reg in insn 120
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 133
changing reg in insn 131
changing reg in insn 130
changing reg in insn 129
changing reg in insn 134
changing reg in insn 132
changing reg in insn 131
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 150
changing reg in insn 148
changing reg in insn 147
changing reg in insn 146
changing reg in insn 151
changing reg in insn 149
changing reg in insn 148
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 161
changing reg in insn 159
changing reg in insn 158
changing reg in insn 157
changing reg in insn 162
changing reg in insn 160
changing reg in insn 159
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 177
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 178
changing reg in insn 176
changing reg in insn 175
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 188
changing reg in insn 186
changing reg in insn 185
changing reg in insn 184
changing reg in insn 189
changing reg in insn 187
changing reg in insn 186
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 209
changing reg in insn 210
changing reg in insn 208
changing reg in insn 209
changing reg in insn 215
changing reg in insn 216
changing reg in insn 214
changing reg in insn 215
changing reg in insn 221
changing reg in insn 222
changing reg in insn 220
changing reg in insn 221
changing reg in insn 229
changing reg in insn 230
changing reg in insn 228
changing reg in insn 229
changing reg in insn 235
changing reg in insn 236
changing reg in insn 234
changing reg in insn 235
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 253
changing reg in insn 251
changing reg in insn 250
changing reg in insn 249
changing reg in insn 254
changing reg in insn 252
changing reg in insn 251
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 257
changing reg in insn 258
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 280
changing reg in insn 281
changing reg in insn 279
changing reg in insn 280
changing reg in insn 286
changing reg in insn 287
changing reg in insn 285
changing reg in insn 286
changing reg in insn 292
changing reg in insn 293
changing reg in insn 291
changing reg in insn 292
changing reg in insn 300
changing reg in insn 301
changing reg in insn 299
changing reg in insn 300
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 317
changing reg in insn 315
changing reg in insn 314
changing reg in insn 313
changing reg in insn 318
changing reg in insn 316
changing reg in insn 315
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 321
changing reg in insn 322
changing reg in insn 328
changing reg in insn 330
changing reg in insn 329
changing reg in insn 330
changing reg in insn 345
changing reg in insn 346
changing reg in insn 344
changing reg in insn 345
changing reg in insn 351
changing reg in insn 352
changing reg in insn 350
changing reg in insn 351
changing reg in insn 357
changing reg in insn 358
changing reg in insn 356
changing reg in insn 357
changing reg in insn 365
changing reg in insn 366
changing reg in insn 364
changing reg in insn 365
changing reg in insn 374
changing reg in insn 375
changing reg in insn 376
changing reg in insn 377
changing reg in insn 382
changing reg in insn 380
changing reg in insn 379
changing reg in insn 378
changing reg in insn 383
changing reg in insn 381
changing reg in insn 380
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 386
changing reg in insn 387
changing reg in insn 393
changing reg in insn 395
changing reg in insn 394
changing reg in insn 395
changing reg in insn 410
changing reg in insn 411
changing reg in insn 409
changing reg in insn 410
changing reg in insn 416
changing reg in insn 417
changing reg in insn 415
changing reg in insn 416
changing reg in insn 424
changing reg in insn 425
changing reg in insn 423
changing reg in insn 424
changing reg in insn 441
changing reg in insn 442
changing reg in insn 440
changing reg in insn 441
changing reg in insn 447
changing reg in insn 448
changing reg in insn 446
changing reg in insn 447
changing reg in insn 455
changing reg in insn 456
changing reg in insn 454
changing reg in insn 455
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 467
changing reg in insn 472
changing reg in insn 470
changing reg in insn 469
changing reg in insn 468
changing reg in insn 473
changing reg in insn 471
changing reg in insn 470
changing reg in insn 469
changing reg in insn 471
changing reg in insn 472
changing reg in insn 476
changing reg in insn 477
changing reg in insn 481
changing reg in insn 483
changing reg in insn 482
changing reg in insn 483
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 495
changing reg in insn 500
changing reg in insn 498
changing reg in insn 497
changing reg in insn 496
changing reg in insn 501
changing reg in insn 499
changing reg in insn 498
changing reg in insn 497
changing reg in insn 499
changing reg in insn 500
changing reg in insn 512
changing reg in insn 513
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 5
changing reg in insn 532
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 194.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 268.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 333.
verify found no changes in insn with uid = 371.
verify found no changes in insn with uid = 398.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 486.
verify found no changes in insn with uid = 521.
verify found no changes in insn with uid = 534.


get_M1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={254d,239u} r1={61d,51u,14e} r2={37d,13u} r3={9d,9u} r4={30d,6u} r5={46d,23u} r6={1d,198u} r7={1d,74u} r8={27d,5u} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={147d,25u} r18={23d} r19={23d} r20={1d,1u} r21={24d,3u} r22={24d} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={24d} r38={24d} r39={23d} r40={23d} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} 
;;    total ref usage 2136{1475d,647u,14e} in 440{417 regular + 23 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 181 182
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50072 [0xffffffffffff3c68])) [0 m1_file+0 S8 A64])
        (reg:DI 5 di [ m1_file ])) mQuery.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ m1_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])
        (reg:DI 4 si [ flight ])) mQuery.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ flight ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.3695+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [310])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:50 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [310])
        (nil)))
(insn 8 5 9 2 (set (reg:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50072 [0xffffffffffff3c68])) [0 m1_file+0 S8 A64])) mQuery.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [181])
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:54 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 0 ax [182])
        (reg:DI 0 ax)) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [182])) mQuery.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [182])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:55 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:55 612 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8734751e40 *.LC6>)) mQuery.c:55 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:55 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 183 184 185 186 187 188 189 190 191
(code_label 19 18 20 4 21 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 1 dx [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:58 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:58 274 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:DI 1 dx)
        (reg:DI 1 dx [183])) mQuery.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [183])
        (nil)))
(insn 24 23 25 4 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:58 89 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) mQuery.c:58 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [184])
        (nil)))
(call_insn 26 25 27 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:58 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [185])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:60 274 {*adddi_1}
     (nil))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [185])) mQuery.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [185])
        (nil)))
(call_insn/i 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:60 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 30 29 31 4 (set (reg:SI 0 ax [186])
        (reg:SI 0 ax)) mQuery.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 Nflight+0 S4 A32])
        (reg:SI 0 ax [186])) mQuery.c:60 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [186])
        (nil)))
(insn 32 31 33 4 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 Nflight+0 S4 A32])) mQuery.c:64 89 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 1 dx [orig:59 D.3685 ] [59])
        (sign_extend:DI (reg:SI 0 ax [187]))) mQuery.c:64 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [187])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 0 ax [188])
        (reg:DI 1 dx [orig:59 D.3685 ] [59])) mQuery.c:64 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [188])
                (ashift:DI (reg:DI 0 ax [188])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 513 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg:DI 0 ax [188])
                    (reg:DI 1 dx [orig:59 D.3685 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.3685 ] [59])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:59 D.3685 ] [59])
                (const_int 5 [0x5]))
            (nil))))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 0 ax [189])
                (ashift:DI (reg:DI 0 ax [188])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:64 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [188])
        (nil)))
(insn 38 37 39 4 (set (reg:DI 0 ax [188])
        (reg:DI 0 ax [189])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [189])
        (nil)))
(insn 39 38 40 4 (set (reg:DI 0 ax [orig:60 D.3685 ] [60])
        (reg:DI 0 ax [188])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [188])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.3685 ] [60])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.3685 ] [60])
        (nil)))
(call_insn 41 40 42 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f8734961b00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mQuery.c:64 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [190])
        (reg:DI 0 ax)) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [190])
            (nil))))
(insn 43 42 44 4 (set (reg/f:DI 1 dx [orig:61 D.3686 ] [61])
        (reg/f:DI 0 ax [190])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [190])
        (nil)))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:64 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 4 (set (mem/f:DI (reg/f:DI 0 ax [191]) [0 *flight_16(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:61 D.3686 ] [61])) mQuery.c:64 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [191])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:61 D.3686 ] [61])
            (nil))))
(insn 46 45 542 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:66 89 {*movsi_internal}
     (nil))
(jump_insn 542 46 543 4 (set (pc)
        (label_ref 509)) mQuery.c:66 650 {jump}
     (nil)
 -> 509)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 543 542 511)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 192 193
(code_label 511 543 49 5 49 "" [1 uses])
(note 49 511 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (set (reg:DI 1 dx [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:67 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 0 ax [193])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:67 274 {*adddi_1}
     (nil))
(insn 52 51 53 5 (set (reg:DI 1 dx)
        (reg:DI 1 dx [192])) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [192])
        (nil)))
(insn 53 52 54 5 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:67 89 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [193])
        (nil)))
(call_insn 55 54 56 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:67 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 56 55 57 5 (set (reg/f:DI 0 ax [orig:62 D.3687 ] [62])
        (reg:DI 0 ax)) mQuery.c:67 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 57 56 58 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:62 D.3687 ] [62])
            (const_int 0 [0]))) mQuery.c:67 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.3687 ] [62])
        (nil)))
(jump_insn 58 57 59 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) mQuery.c:67 612 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f8734751ed8 *.LC7>)) mQuery.c:67 87 {*movdi_internal_rex64}
     (nil))
(call_insn 61 60 62 6 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:67 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 66 67 194 195 196 197 198
(code_label 62 61 63 7 23 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 7 (set (reg/f:DI 2 cx [orig:63 D.3688 ] [63])
        (mem/f:DI (reg/f:DI 0 ax [194]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [194])
        (nil)))
(insn 66 65 67 7 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:69 89 {*movsi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 1 dx [orig:64 D.3685 ] [64])
        (sign_extend:DI (reg:SI 0 ax [195]))) mQuery.c:69 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [195])
        (nil)))
(insn 68 67 69 7 (set (reg:DI 0 ax [196])
        (reg:DI 1 dx [orig:64 D.3685 ] [64])) mQuery.c:69 87 {*movdi_internal_rex64}
     (nil))
(insn 69 68 70 7 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 513 {*ashldi3_1}
     (nil))
(insn 70 69 71 7 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [orig:64 D.3685 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.3685 ] [64])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:64 D.3685 ] [64])
                (const_int 5 [0x5]))
            (nil))))
(insn 71 70 72 7 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(insn 72 71 73 7 (set (reg:DI 0 ax [196])
        (reg:DI 0 ax [197])) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [197])
        (nil)))
(insn 73 72 74 7 (set (reg:DI 0 ax [orig:65 D.3685 ] [65])
        (reg:DI 0 ax [196])) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [196])
        (nil)))
(insn 74 73 75 7 (parallel [
            (set (reg/f:DI 3 bx [orig:66 D.3688 ] [66])
                (plus:DI (reg/f:DI 2 cx [orig:63 D.3688 ] [63])
                    (reg:DI 0 ax [orig:65 D.3685 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.3685 ] [65])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:63 D.3688 ] [63])
            (nil))))
(insn 75 74 76 7 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:69 274 {*adddi_1}
     (nil))
(insn 76 75 77 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [198])) mQuery.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [198])
        (nil)))
(call_insn/i 77 76 78 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:69 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 78 77 79 7 (set (reg:SI 0 ax [orig:67 D.3689 ] [67])
        (reg:SI 0 ax)) mQuery.c:69 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 79 78 80 7 (set (mem/j:SI (reg/f:DI 3 bx [orig:66 D.3688 ] [66]) [0 _22->ID+0 S4 A128])
        (reg:SI 0 ax [orig:67 D.3689 ] [67])) mQuery.c:69 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.3689 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:66 D.3688 ] [66])
            (nil))))
(insn 80 79 544 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) mQuery.c:70 89 {*movsi_internal}
     (nil))
(jump_insn 544 80 545 7 (set (pc)
        (label_ref 85)) mQuery.c:70 650 {jump}
     (nil)
 -> 85)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 545 544 90)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 90 545 83 8 25 "" [1 uses])
(note 83 90 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:70 273 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 199 200
(code_label 85 84 86 9 24 "" [1 uses])
(note 86 85 87 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 9 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:70 89 {*movsi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:DI 0 ax [199])
        (sign_extend:DI (reg:SI 0 ax [200]))) mQuery.c:70 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [200])
        (nil)))
(insn 89 88 91 9 (set (reg:QI 0 ax [orig:68 D.3690 ] [68])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [199]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:70 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [199])
        (nil)))
(insn 91 89 92 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:68 D.3690 ] [68])
            (const_int 9 [0x9]))) mQuery.c:70 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:68 D.3690 ] [68])
        (nil)))
(jump_insn 92 91 93 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) mQuery.c:70 612 {*jcc_1}
     (nil)
 -> 90)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231
(note 93 92 94 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 10 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 10 (set (reg/f:DI 2 cx [orig:69 D.3688 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [201]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [201])
        (nil)))
(insn 96 95 97 10 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:72 89 {*movsi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:DI 1 dx [orig:70 D.3685 ] [70])
        (sign_extend:DI (reg:SI 0 ax [202]))) mQuery.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [202])
        (nil)))
(insn 98 97 99 10 (set (reg:DI 0 ax [203])
        (reg:DI 1 dx [orig:70 D.3685 ] [70])) mQuery.c:72 87 {*movdi_internal_rex64}
     (nil))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 0 ax [203])
                (ashift:DI (reg:DI 0 ax [203])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 513 {*ashldi3_1}
     (nil))
(insn 100 99 101 10 (parallel [
            (set (reg:DI 0 ax [203])
                (plus:DI (reg:DI 0 ax [203])
                    (reg:DI 1 dx [orig:70 D.3685 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.3685 ] [70])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:70 D.3685 ] [70])
                (const_int 5 [0x5]))
            (nil))))
(insn 101 100 102 10 (parallel [
            (set (reg:DI 0 ax [204])
                (ashift:DI (reg:DI 0 ax [203])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [203])
        (nil)))
(insn 102 101 103 10 (set (reg:DI 0 ax [203])
        (reg:DI 0 ax [204])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [204])
        (nil)))
(insn 103 102 104 10 (set (reg:DI 0 ax [orig:71 D.3685 ] [71])
        (reg:DI 0 ax [203])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [203])
        (nil)))
(insn 104 103 105 10 (parallel [
            (set (reg/f:DI 3 bx [orig:72 D.3688 ] [72])
                (plus:DI (reg/f:DI 2 cx [orig:69 D.3688 ] [69])
                    (reg:DI 0 ax [orig:71 D.3685 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:71 D.3685 ] [71])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:69 D.3688 ] [69])
            (nil))))
(insn 105 104 106 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 273 {*addsi_1}
     (nil))
(insn 106 105 107 10 (parallel [
            (set (reg:DI 1 dx [205])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (nil))
(insn 107 106 108 10 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:72 89 {*movsi_internal}
     (nil))
(insn 108 107 109 10 (set (reg:DI 0 ax [206])
        (sign_extend:DI (reg:SI 0 ax [207]))) mQuery.c:72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [207])
        (nil)))
(insn 109 108 110 10 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.3687 ] [73])
                (plus:DI (reg:DI 0 ax [206])
                    (reg:DI 1 dx [205])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:72 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [206])
        (expr_list:REG_DEAD (reg:DI 1 dx [205])
            (nil))))
(insn 110 109 111 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:73 D.3687 ] [73])) mQuery.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.3687 ] [73])
        (nil)))
(call_insn/i 111 110 112 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f8734a6aa00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) mQuery.c:72 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 112 111 113 10 (set (reg:SI 0 ax [orig:74 D.3689 ] [74])
        (reg:SI 0 ax)) mQuery.c:72 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 113 112 114 10 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:72 D.3688 ] [72])
                (const_int 4 [0x4])) [0 _30->n_nvp+0 S4 A32])
        (reg:SI 0 ax [orig:74 D.3689 ] [74])) mQuery.c:72 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:74 D.3689 ] [74])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:72 D.3688 ] [72])
            (nil))))
(insn 114 113 115 10 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 115 114 116 10 (set (reg/f:DI 2 cx [orig:75 D.3688 ] [75])
        (mem/f:DI (reg/f:DI 0 ax [208]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [208])
        (nil)))
(insn 116 115 117 10 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:DI 1 dx [orig:76 D.3685 ] [76])
        (sign_extend:DI (reg:SI 0 ax [209]))) mQuery.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [209])
        (nil)))
(insn 118 117 119 10 (set (reg:DI 0 ax [210])
        (reg:DI 1 dx [orig:76 D.3685 ] [76])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 119 118 120 10 (parallel [
            (set (reg:DI 0 ax [210])
                (ashift:DI (reg:DI 0 ax [210])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (nil))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 0 ax [210])
                (plus:DI (reg:DI 0 ax [210])
                    (reg:DI 1 dx [orig:76 D.3685 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:76 D.3685 ] [76])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:76 D.3685 ] [76])
                (const_int 5 [0x5]))
            (nil))))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 0 ax [211])
                (ashift:DI (reg:DI 0 ax [210])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [210])
        (nil)))
(insn 122 121 123 10 (set (reg:DI 0 ax [210])
        (reg:DI 0 ax [211])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [211])
        (nil)))
(insn 123 122 124 10 (set (reg:DI 0 ax [orig:77 D.3685 ] [77])
        (reg:DI 0 ax [210])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [210])
        (nil)))
(insn 124 123 125 10 (parallel [
            (set (reg/f:DI 3 bx [orig:78 D.3688 ] [78])
                (plus:DI (reg/f:DI 2 cx [orig:75 D.3688 ] [75])
                    (reg:DI 0 ax [orig:77 D.3685 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:77 D.3685 ] [77])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:75 D.3688 ] [75])
            (nil))))
(insn 125 124 126 10 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 10 (set (reg/f:DI 2 cx [orig:79 D.3688 ] [79])
        (mem/f:DI (reg/f:DI 0 ax [212]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [212])
        (nil)))
(insn 127 126 128 10 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 128 127 129 10 (set (reg:DI 1 dx [orig:80 D.3685 ] [80])
        (sign_extend:DI (reg:SI 0 ax [213]))) mQuery.c:74 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [213])
        (nil)))
(insn 129 128 130 10 (set (reg:DI 0 ax [214])
        (reg:DI 1 dx [orig:80 D.3685 ] [80])) mQuery.c:74 87 {*movdi_internal_rex64}
     (nil))
(insn 130 129 131 10 (parallel [
            (set (reg:DI 0 ax [214])
                (ashift:DI (reg:DI 0 ax [214])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (nil))
(insn 131 130 132 10 (parallel [
            (set (reg:DI 0 ax [214])
                (plus:DI (reg:DI 0 ax [214])
                    (reg:DI 1 dx [orig:80 D.3685 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:80 D.3685 ] [80])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:80 D.3685 ] [80])
                (const_int 5 [0x5]))
            (nil))))
(insn 132 131 133 10 (parallel [
            (set (reg:DI 0 ax [215])
                (ashift:DI (reg:DI 0 ax [214])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [214])
        (nil)))
(insn 133 132 134 10 (set (reg:DI 0 ax [214])
        (reg:DI 0 ax [215])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [215])
        (nil)))
(insn 134 133 135 10 (set (reg:DI 0 ax [orig:81 D.3685 ] [81])
        (reg:DI 0 ax [214])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [214])
        (nil)))
(insn 135 134 136 10 (parallel [
            (set (reg/f:DI 0 ax [orig:82 D.3688 ] [82])
                (plus:DI (reg:DI 0 ax [orig:81 D.3685 ] [81])
                    (reg/f:DI 2 cx [orig:79 D.3688 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:74 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:81 D.3685 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:79 D.3688 ] [79])
            (nil))))
(insn 136 135 137 10 (set (reg:SI 0 ax [orig:83 D.3689 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:82 D.3688 ] [82])
                (const_int 4 [0x4])) [0 _41->n_nvp+0 S4 A32])) mQuery.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:82 D.3688 ] [82])
        (nil)))
(insn 137 136 138 10 (set (reg:SI 4 si)
        (const_int 4 [0x4])) mQuery.c:74 89 {*movsi_internal}
     (nil))
(insn 138 137 139 10 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:83 D.3689 ] [83])) mQuery.c:74 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 D.3689 ] [83])
        (nil)))
(call_insn 139 138 140 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:74 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 140 139 141 10 (set (reg/f:DI 0 ax [orig:84 D.3691 ] [84])
        (reg:DI 0 ax)) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 141 140 142 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:78 D.3688 ] [78])
                (const_int 8 [0x8])) [0 _37->nvp+0 S8 A64])
        (reg/f:DI 0 ax [orig:84 D.3691 ] [84])) mQuery.c:74 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:84 D.3691 ] [84])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:78 D.3688 ] [78])
            (nil))))
(insn 142 141 143 10 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 10 (set (reg/f:DI 2 cx [orig:85 D.3688 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [216]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [216])
        (nil)))
(insn 144 143 145 10 (set (reg:SI 0 ax [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (nil))
(insn 145 144 146 10 (set (reg:DI 1 dx [orig:86 D.3685 ] [86])
        (sign_extend:DI (reg:SI 0 ax [217]))) mQuery.c:75 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [217])
        (nil)))
(insn 146 145 147 10 (set (reg:DI 0 ax [218])
        (reg:DI 1 dx [orig:86 D.3685 ] [86])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 10 (parallel [
            (set (reg:DI 0 ax [218])
                (ashift:DI (reg:DI 0 ax [218])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (nil))
(insn 148 147 149 10 (parallel [
            (set (reg:DI 0 ax [218])
                (plus:DI (reg:DI 0 ax [218])
                    (reg:DI 1 dx [orig:86 D.3685 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:86 D.3685 ] [86])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:86 D.3685 ] [86])
                (const_int 5 [0x5]))
            (nil))))
(insn 149 148 150 10 (parallel [
            (set (reg:DI 0 ax [219])
                (ashift:DI (reg:DI 0 ax [218])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [218])
        (nil)))
(insn 150 149 151 10 (set (reg:DI 0 ax [218])
        (reg:DI 0 ax [219])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [219])
        (nil)))
(insn 151 150 152 10 (set (reg:DI 0 ax [orig:87 D.3685 ] [87])
        (reg:DI 0 ax [218])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [218])
        (nil)))
(insn 152 151 153 10 (parallel [
            (set (reg/f:DI 3 bx [orig:88 D.3688 ] [88])
                (plus:DI (reg/f:DI 2 cx [orig:85 D.3688 ] [85])
                    (reg:DI 0 ax [orig:87 D.3685 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:87 D.3685 ] [87])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:85 D.3688 ] [85])
            (nil))))
(insn 153 152 154 10 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 154 153 155 10 (set (reg/f:DI 2 cx [orig:89 D.3688 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [220]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [220])
        (nil)))
(insn 155 154 156 10 (set (reg:SI 0 ax [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (nil))
(insn 156 155 157 10 (set (reg:DI 1 dx [orig:90 D.3685 ] [90])
        (sign_extend:DI (reg:SI 0 ax [221]))) mQuery.c:75 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [221])
        (nil)))
(insn 157 156 158 10 (set (reg:DI 0 ax [222])
        (reg:DI 1 dx [orig:90 D.3685 ] [90])) mQuery.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 158 157 159 10 (parallel [
            (set (reg:DI 0 ax [222])
                (ashift:DI (reg:DI 0 ax [222])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (nil))
(insn 159 158 160 10 (parallel [
            (set (reg:DI 0 ax [222])
                (plus:DI (reg:DI 0 ax [222])
                    (reg:DI 1 dx [orig:90 D.3685 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:90 D.3685 ] [90])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:90 D.3685 ] [90])
                (const_int 5 [0x5]))
            (nil))))
(insn 160 159 161 10 (parallel [
            (set (reg:DI 0 ax [223])
                (ashift:DI (reg:DI 0 ax [222])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [222])
        (nil)))
(insn 161 160 162 10 (set (reg:DI 0 ax [222])
        (reg:DI 0 ax [223])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [223])
        (nil)))
(insn 162 161 163 10 (set (reg:DI 0 ax [orig:91 D.3685 ] [91])
        (reg:DI 0 ax [222])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [222])
        (nil)))
(insn 163 162 164 10 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.3688 ] [92])
                (plus:DI (reg:DI 0 ax [orig:91 D.3685 ] [91])
                    (reg/f:DI 2 cx [orig:89 D.3688 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:75 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:91 D.3685 ] [91])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:89 D.3688 ] [89])
            (nil))))
(insn 164 163 165 10 (set (reg:SI 0 ax [orig:93 D.3689 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:92 D.3688 ] [92])
                (const_int 4 [0x4])) [0 _51->n_nvp+0 S4 A32])) mQuery.c:75 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.3688 ] [92])
        (nil)))
(insn 165 164 166 10 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:93 D.3689 ] [93])) mQuery.c:75 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:93 D.3689 ] [93])
        (nil)))
(call_insn 166 165 167 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f87349e8700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mQuery.c:75 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 167 166 168 10 (set (reg/f:DI 0 ax [orig:94 D.3692 ] [94])
        (reg:DI 0 ax)) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 168 167 169 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:88 D.3688 ] [88])
                (const_int 16 [0x10])) [0 _47->time+0 S8 A128])
        (reg/f:DI 0 ax [orig:94 D.3692 ] [94])) mQuery.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.3692 ] [94])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:88 D.3688 ] [88])
            (nil))))
(insn 169 168 170 10 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 170 169 171 10 (set (reg/f:DI 2 cx [orig:95 D.3688 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [224]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [224])
        (nil)))
(insn 171 170 172 10 (set (reg:SI 0 ax [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (nil))
(insn 172 171 173 10 (set (reg:DI 1 dx [orig:96 D.3685 ] [96])
        (sign_extend:DI (reg:SI 0 ax [225]))) mQuery.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [225])
        (nil)))
(insn 173 172 174 10 (set (reg:DI 0 ax [226])
        (reg:DI 1 dx [orig:96 D.3685 ] [96])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 174 173 175 10 (parallel [
            (set (reg:DI 0 ax [226])
                (ashift:DI (reg:DI 0 ax [226])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (nil))
(insn 175 174 176 10 (parallel [
            (set (reg:DI 0 ax [226])
                (plus:DI (reg:DI 0 ax [226])
                    (reg:DI 1 dx [orig:96 D.3685 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 D.3685 ] [96])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.3685 ] [96])
                (const_int 5 [0x5]))
            (nil))))
(insn 176 175 177 10 (parallel [
            (set (reg:DI 0 ax [227])
                (ashift:DI (reg:DI 0 ax [226])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [226])
        (nil)))
(insn 177 176 178 10 (set (reg:DI 0 ax [226])
        (reg:DI 0 ax [227])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [227])
        (nil)))
(insn 178 177 179 10 (set (reg:DI 0 ax [orig:97 D.3685 ] [97])
        (reg:DI 0 ax [226])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [226])
        (nil)))
(insn 179 178 180 10 (parallel [
            (set (reg/f:DI 3 bx [orig:98 D.3688 ] [98])
                (plus:DI (reg/f:DI 2 cx [orig:95 D.3688 ] [95])
                    (reg:DI 0 ax [orig:97 D.3685 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.3685 ] [97])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:95 D.3688 ] [95])
            (nil))))
(insn 180 179 181 10 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 181 180 182 10 (set (reg/f:DI 2 cx [orig:99 D.3688 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [228]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [228])
        (nil)))
(insn 182 181 183 10 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (nil))
(insn 183 182 184 10 (set (reg:DI 1 dx [orig:100 D.3685 ] [100])
        (sign_extend:DI (reg:SI 0 ax [229]))) mQuery.c:76 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [229])
        (nil)))
(insn 184 183 185 10 (set (reg:DI 0 ax [230])
        (reg:DI 1 dx [orig:100 D.3685 ] [100])) mQuery.c:76 87 {*movdi_internal_rex64}
     (nil))
(insn 185 184 186 10 (parallel [
            (set (reg:DI 0 ax [230])
                (ashift:DI (reg:DI 0 ax [230])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (nil))
(insn 186 185 187 10 (parallel [
            (set (reg:DI 0 ax [230])
                (plus:DI (reg:DI 0 ax [230])
                    (reg:DI 1 dx [orig:100 D.3685 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.3685 ] [100])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.3685 ] [100])
                (const_int 5 [0x5]))
            (nil))))
(insn 187 186 188 10 (parallel [
            (set (reg:DI 0 ax [231])
                (ashift:DI (reg:DI 0 ax [230])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [230])
        (nil)))
(insn 188 187 189 10 (set (reg:DI 0 ax [230])
        (reg:DI 0 ax [231])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [231])
        (nil)))
(insn 189 188 190 10 (set (reg:DI 0 ax [orig:101 D.3685 ] [101])
        (reg:DI 0 ax [230])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [230])
        (nil)))
(insn 190 189 191 10 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.3688 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.3685 ] [101])
                    (reg/f:DI 2 cx [orig:99 D.3688 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:101 D.3685 ] [101])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:99 D.3688 ] [99])
            (nil))))
(insn 191 190 192 10 (set (reg:SI 0 ax [orig:103 D.3689 ] [103])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:102 D.3688 ] [102])
                (const_int 4 [0x4])) [0 _61->n_nvp+0 S4 A32])) mQuery.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.3688 ] [102])
        (nil)))
(insn 192 191 193 10 (parallel [
            (set (reg:SI 0 ax [orig:104 D.3689 ] [104])
                (plus:SI (reg:SI 0 ax [orig:103 D.3689 ] [103])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:76 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:103 D.3689 ] [103])
        (nil)))
(insn 193 192 194 10 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:104 D.3689 ] [104])) mQuery.c:76 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.3689 ] [104])
        (nil)))
(call_insn 194 193 195 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_vec") [flags 0x41]  <function_decl 0x7f87349e8700 falloc_vec>) [0 falloc_vec S1 A8])
            (const_int 0 [0]))) mQuery.c:76 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (nil))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
(insn 195 194 196 10 (set (reg/f:DI 0 ax [orig:105 D.3692 ] [105])
        (reg:DI 0 ax)) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 196 195 197 10 (set (mem/f/j:DI (plus:DI (reg/f:DI 3 bx [orig:98 D.3688 ] [98])
                (const_int 24 [0x18])) [0 _57->vel+0 S8 A64])
        (reg/f:DI 0 ax [orig:105 D.3692 ] [105])) mQuery.c:76 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:105 D.3692 ] [105])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:98 D.3688 ] [98])
            (nil))))
(insn 197 196 546 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])
        (const_int 0 [0])) mQuery.c:78 89 {*movsi_internal}
     (nil))
(jump_insn 546 197 547 10 (set (pc)
        (label_ref 490)) mQuery.c:78 650 {jump}
     (nil)
 -> 490)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 547 546 504)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 504 547 200 11 48 "" [1 uses])
(note 200 504 201 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 548 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:79 273 {*addsi_1}
     (nil))
(jump_insn 548 201 549 11 (set (pc)
        (label_ref 206)) mQuery.c:79 650 {jump}
     (nil)
 -> 206)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 549 548 223)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 549 204 12 29 "" [1 uses])
(note 204 223 205 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:79 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 232 233
(code_label 206 205 207 13 27 "" [1 uses])
(note 207 206 208 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 13 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 209 208 210 13 (set (reg:DI 0 ax [232])
        (sign_extend:DI (reg:SI 0 ax [233]))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [233])
        (nil)))
(insn 210 209 211 13 (set (reg:QI 0 ax [orig:111 D.3690 ] [111])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [232]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [232])
        (nil)))
(insn 211 210 212 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:111 D.3690 ] [111])
            (const_int 9 [0x9]))) mQuery.c:79 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:111 D.3690 ] [111])
        (nil)))
(jump_insn 212 211 213 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (nil)
 -> 226)
;;  succ:       14 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 234 235
(note 213 212 214 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 14 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 215 214 216 14 (set (reg:DI 0 ax [234])
        (sign_extend:DI (reg:SI 0 ax [235]))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [235])
        (nil)))
(insn 216 215 217 14 (set (reg:QI 0 ax [orig:112 D.3690 ] [112])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [234]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [234])
        (nil)))
(insn 217 216 218 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:112 D.3690 ] [112])
            (const_int 0 [0]))) mQuery.c:79 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:112 D.3690 ] [112])
        (nil)))
(jump_insn 218 217 219 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (nil)
 -> 226)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 236 237
(note 219 218 220 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 15 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:79 89 {*movsi_internal}
     (nil))
(insn 221 220 222 15 (set (reg:DI 0 ax [236])
        (sign_extend:DI (reg:SI 0 ax [237]))) mQuery.c:79 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [237])
        (nil)))
(insn 222 221 224 15 (set (reg:QI 0 ax [orig:113 D.3690 ] [113])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [236]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:79 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [236])
        (nil)))
(insn 224 222 225 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:113 D.3690 ] [113])
            (const_int 10 [0xa]))) mQuery.c:79 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:113 D.3690 ] [113])
        (nil)))
(jump_insn 225 224 226 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) mQuery.c:79 612 {*jcc_1}
     (nil)
 -> 223)
;;  succ:       12
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 238 239
(code_label 226 225 227 16 28 "" [2 uses])
(note 227 226 228 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 16 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:80 89 {*movsi_internal}
     (nil))
(insn 229 228 230 16 (set (reg:DI 0 ax [238])
        (sign_extend:DI (reg:SI 0 ax [239]))) mQuery.c:80 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [239])
        (nil)))
(insn 230 229 231 16 (set (reg:QI 0 ax [orig:114 D.3690 ] [114])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [238]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:80 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [238])
        (nil)))
(insn 231 230 232 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:114 D.3690 ] [114])
            (const_int 0 [0]))) mQuery.c:80 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:114 D.3690 ] [114])
        (nil)))
(jump_insn 232 231 233 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) mQuery.c:80 612 {*jcc_1}
     (nil)
 -> 239)
;;  succ:       18
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 240 241
(note 233 232 234 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 17 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:80 89 {*movsi_internal}
     (nil))
(insn 235 234 236 17 (set (reg:DI 0 ax [240])
        (sign_extend:DI (reg:SI 0 ax [241]))) mQuery.c:80 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [241])
        (nil)))
(insn 236 235 237 17 (set (reg:QI 0 ax [orig:115 D.3690 ] [115])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [240]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:80 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [240])
        (nil)))
(insn 237 236 238 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:115 D.3690 ] [115])
            (const_int 10 [0xa]))) mQuery.c:80 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:115 D.3690 ] [115])
        (nil)))
(jump_insn 238 237 239 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 243)
            (pc))) mQuery.c:80 612 {*jcc_1}
     (nil)
 -> 243)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 239 238 240 18 30 "" [1 uses])
(note 240 239 241 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f873475f000 *.LC8>)) mQuery.c:80 87 {*movdi_internal_rex64}
     (nil))
(call_insn 242 241 243 18 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:80 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 116 117 118 119 120 121 122 123 124 125 126 127 242 243 244 245 246 247 248 249
(code_label 243 242 244 19 31 "" [1 uses])
(note 244 243 245 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 19 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 246 245 247 19 (set (reg/f:DI 2 cx [orig:116 D.3688 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [242]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [242])
        (nil)))
(insn 247 246 248 19 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 248 247 249 19 (set (reg:DI 1 dx [orig:117 D.3685 ] [117])
        (sign_extend:DI (reg:SI 0 ax [243]))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [243])
        (nil)))
(insn 249 248 250 19 (set (reg:DI 0 ax [244])
        (reg:DI 1 dx [orig:117 D.3685 ] [117])) mQuery.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 250 249 251 19 (parallel [
            (set (reg:DI 0 ax [244])
                (ashift:DI (reg:DI 0 ax [244])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (nil))
(insn 251 250 252 19 (parallel [
            (set (reg:DI 0 ax [244])
                (plus:DI (reg:DI 0 ax [244])
                    (reg:DI 1 dx [orig:117 D.3685 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:117 D.3685 ] [117])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:117 D.3685 ] [117])
                (const_int 5 [0x5]))
            (nil))))
(insn 252 251 253 19 (parallel [
            (set (reg:DI 0 ax [245])
                (ashift:DI (reg:DI 0 ax [244])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [244])
        (nil)))
(insn 253 252 254 19 (set (reg:DI 0 ax [244])
        (reg:DI 0 ax [245])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [245])
        (nil)))
(insn 254 253 255 19 (set (reg:DI 0 ax [orig:118 D.3685 ] [118])
        (reg:DI 0 ax [244])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [244])
        (nil)))
(insn 255 254 256 19 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.3688 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.3685 ] [118])
                    (reg/f:DI 2 cx [orig:116 D.3688 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:118 D.3685 ] [118])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:116 D.3688 ] [116])
            (nil))))
(insn 256 255 257 19 (set (reg/f:DI 0 ax [orig:120 D.3691 ] [120])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:119 D.3688 ] [119])
                (const_int 8 [0x8])) [0 _81->nvp+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:119 D.3688 ] [119])
        (nil)))
(insn 257 256 258 19 (set (reg:SI 1 dx [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 258 257 259 19 (set (reg:DI 1 dx [orig:121 D.3685 ] [121])
        (sign_extend:DI (reg:SI 1 dx [246]))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [246])
        (nil)))
(insn 259 258 260 19 (parallel [
            (set (reg:DI 1 dx [orig:122 D.3685 ] [122])
                (ashift:DI (reg:DI 1 dx [orig:121 D.3685 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:121 D.3685 ] [121])
        (nil)))
(insn 260 259 261 19 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.3691 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.3691 ] [120])
                    (reg:DI 1 dx [orig:122 D.3685 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:122 D.3685 ] [122])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:120 D.3691 ] [120])
            (nil))))
(insn 261 260 262 19 (set (reg/f:DI 3 bx [orig:124 D.3692 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [orig:123 D.3691 ] [123]) [0 *_85+0 S8 A64])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:123 D.3691 ] [123])
        (nil)))
(insn 262 261 263 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 273 {*addsi_1}
     (nil))
(insn 263 262 264 19 (parallel [
            (set (reg:DI 1 dx [247])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (nil))
(insn 264 263 265 19 (set (reg:SI 0 ax [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:81 89 {*movsi_internal}
     (nil))
(insn 265 264 266 19 (set (reg:DI 0 ax [248])
        (sign_extend:DI (reg:SI 0 ax [249]))) mQuery.c:81 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [249])
        (nil)))
(insn 266 265 267 19 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.3687 ] [125])
                (plus:DI (reg:DI 0 ax [248])
                    (reg:DI 1 dx [247])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:81 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [248])
        (expr_list:REG_DEAD (reg:DI 1 dx [247])
            (nil))))
(insn 267 266 268 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 D.3687 ] [125])) mQuery.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:125 D.3687 ] [125])
        (nil)))
(call_insn/i 268 267 269 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:81 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 269 268 270 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:81 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 270 269 271 19 (set (reg:XF 8 st [orig:127 D.3694 ] [127])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64]))) mQuery.c:81 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 126 [ D.3693 ])
        (nil)))
(insn 271 270 272 19 (set (mem:XF (reg/f:DI 3 bx [orig:124 D.3692 ] [124]) [0 *_86+0 S16 A128])
        (reg:XF 8 st [orig:127 D.3694 ] [127])) mQuery.c:81 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:127 D.3694 ] [127])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:124 D.3692 ] [124])
            (nil))))
(insn 272 271 550 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:83 273 {*addsi_1}
     (nil))
(jump_insn 550 272 551 19 (set (pc)
        (label_ref 277)) mQuery.c:83 650 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 551 550 294)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 294 551 275 20 34 "" [1 uses])
(note 275 294 276 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:83 273 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 250 251
(code_label 277 276 278 21 32 "" [1 uses])
(note 278 277 279 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 21 (set (reg:SI 0 ax [251])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 280 279 281 21 (set (reg:DI 0 ax [250])
        (sign_extend:DI (reg:SI 0 ax [251]))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [251])
        (nil)))
(insn 281 280 282 21 (set (reg:QI 0 ax [orig:128 D.3690 ] [128])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [250]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [250])
        (nil)))
(insn 282 281 283 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:128 D.3690 ] [128])
            (const_int 44 [0x2c]))) mQuery.c:83 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:128 D.3690 ] [128])
        (nil)))
(jump_insn 283 282 284 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (nil)
 -> 297)
;;  succ:       22 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 252 253
(note 284 283 285 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 22 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 286 285 287 22 (set (reg:DI 0 ax [252])
        (sign_extend:DI (reg:SI 0 ax [253]))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [253])
        (nil)))
(insn 287 286 288 22 (set (reg:QI 0 ax [orig:129 D.3690 ] [129])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [252]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [252])
        (nil)))
(insn 288 287 289 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:129 D.3690 ] [129])
            (const_int 0 [0]))) mQuery.c:83 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:129 D.3690 ] [129])
        (nil)))
(jump_insn 289 288 290 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (nil)
 -> 297)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 254 255
(note 290 289 291 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 23 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:83 89 {*movsi_internal}
     (nil))
(insn 292 291 293 23 (set (reg:DI 0 ax [254])
        (sign_extend:DI (reg:SI 0 ax [255]))) mQuery.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [255])
        (nil)))
(insn 293 292 295 23 (set (reg:QI 0 ax [orig:130 D.3690 ] [130])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [254]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:83 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [254])
        (nil)))
(insn 295 293 296 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:130 D.3690 ] [130])
            (const_int 10 [0xa]))) mQuery.c:83 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:130 D.3690 ] [130])
        (nil)))
(jump_insn 296 295 297 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) mQuery.c:83 612 {*jcc_1}
     (nil)
 -> 294)
;;  succ:       20
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 256 257
(code_label 297 296 298 24 33 "" [2 uses])
(note 298 297 299 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 300 24 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:84 89 {*movsi_internal}
     (nil))
(insn 300 299 301 24 (set (reg:DI 0 ax [256])
        (sign_extend:DI (reg:SI 0 ax [257]))) mQuery.c:84 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [257])
        (nil)))
(insn 301 300 302 24 (set (reg:QI 0 ax [orig:131 D.3690 ] [131])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [256]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:84 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [256])
        (nil)))
(insn 302 301 303 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:131 D.3690 ] [131])
            (const_int 0 [0]))) mQuery.c:84 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:131 D.3690 ] [131])
        (nil)))
(jump_insn 303 302 304 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 307)
            (pc))) mQuery.c:84 612 {*jcc_1}
     (nil)
 -> 307)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 304 303 305 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f873475f098 *.LC9>)) mQuery.c:84 87 {*movdi_internal_rex64}
     (nil))
(call_insn 306 305 307 25 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:84 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 132 133 134 135 136 137 138 139 140 141 142 143 144 258 259 260 261 262 263 264 265
(code_label 307 306 308 26 35 "" [1 uses])
(note 308 307 309 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 309 308 310 26 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (nil))
(insn 310 309 311 26 (set (reg/f:DI 2 cx [orig:132 D.3688 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [258]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [258])
        (nil)))
(insn 311 310 312 26 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 312 311 313 26 (set (reg:DI 1 dx [orig:133 D.3685 ] [133])
        (sign_extend:DI (reg:SI 0 ax [259]))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [259])
        (nil)))
(insn 313 312 314 26 (set (reg:DI 0 ax [260])
        (reg:DI 1 dx [orig:133 D.3685 ] [133])) mQuery.c:85 87 {*movdi_internal_rex64}
     (nil))
(insn 314 313 315 26 (parallel [
            (set (reg:DI 0 ax [260])
                (ashift:DI (reg:DI 0 ax [260])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (nil))
(insn 315 314 316 26 (parallel [
            (set (reg:DI 0 ax [260])
                (plus:DI (reg:DI 0 ax [260])
                    (reg:DI 1 dx [orig:133 D.3685 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:133 D.3685 ] [133])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:133 D.3685 ] [133])
                (const_int 5 [0x5]))
            (nil))))
(insn 316 315 317 26 (parallel [
            (set (reg:DI 0 ax [261])
                (ashift:DI (reg:DI 0 ax [260])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [260])
        (nil)))
(insn 317 316 318 26 (set (reg:DI 0 ax [260])
        (reg:DI 0 ax [261])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [261])
        (nil)))
(insn 318 317 319 26 (set (reg:DI 0 ax [orig:134 D.3685 ] [134])
        (reg:DI 0 ax [260])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [260])
        (nil)))
(insn 319 318 320 26 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.3688 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 D.3685 ] [134])
                    (reg/f:DI 2 cx [orig:132 D.3688 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:134 D.3685 ] [134])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:132 D.3688 ] [132])
            (nil))))
(insn 320 319 321 26 (set (reg/f:DI 0 ax [orig:136 D.3691 ] [136])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:135 D.3688 ] [135])
                (const_int 8 [0x8])) [0 _100->nvp+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:135 D.3688 ] [135])
        (nil)))
(insn 321 320 322 26 (set (reg:SI 1 dx [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 322 321 323 26 (set (reg:DI 1 dx [orig:137 D.3685 ] [137])
        (sign_extend:DI (reg:SI 1 dx [262]))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [262])
        (nil)))
(insn 323 322 324 26 (parallel [
            (set (reg:DI 1 dx [orig:138 D.3685 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.3685 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:137 D.3685 ] [137])
        (nil)))
(insn 324 323 325 26 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.3691 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:136 D.3691 ] [136])
                    (reg:DI 1 dx [orig:138 D.3685 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:138 D.3685 ] [138])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:136 D.3691 ] [136])
            (nil))))
(insn 325 324 326 26 (set (reg/f:DI 0 ax [orig:140 D.3692 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [orig:139 D.3691 ] [139]) [0 *_104+0 S8 A64])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:139 D.3691 ] [139])
        (nil)))
(insn 326 325 327 26 (parallel [
            (set (reg/f:DI 3 bx [orig:141 D.3692 ] [141])
                (plus:DI (reg/f:DI 0 ax [orig:140 D.3692 ] [140])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:140 D.3692 ] [140])
        (nil)))
(insn 327 326 328 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 273 {*addsi_1}
     (nil))
(insn 328 327 329 26 (parallel [
            (set (reg:DI 1 dx [263])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (nil))
(insn 329 328 330 26 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:85 89 {*movsi_internal}
     (nil))
(insn 330 329 331 26 (set (reg:DI 0 ax [264])
        (sign_extend:DI (reg:SI 0 ax [265]))) mQuery.c:85 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [265])
        (nil)))
(insn 331 330 332 26 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.3687 ] [142])
                (plus:DI (reg:DI 0 ax [264])
                    (reg:DI 1 dx [263])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:85 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [264])
        (expr_list:REG_DEAD (reg:DI 1 dx [263])
            (nil))))
(insn 332 331 333 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:142 D.3687 ] [142])) mQuery.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:142 D.3687 ] [142])
        (nil)))
(call_insn/i 333 332 334 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:85 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 334 333 335 26 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:85 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 335 334 336 26 (set (reg:XF 8 st [orig:144 D.3694 ] [144])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64]))) mQuery.c:85 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 143 [ D.3693 ])
        (nil)))
(insn 336 335 337 26 (set (mem:XF (reg/f:DI 3 bx [orig:141 D.3692 ] [141]) [0 *_106+0 S16 A128])
        (reg:XF 8 st [orig:144 D.3694 ] [144])) mQuery.c:85 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:144 D.3694 ] [144])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:141 D.3692 ] [141])
            (nil))))
(insn 337 336 552 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:87 273 {*addsi_1}
     (nil))
(jump_insn 552 337 553 26 (set (pc)
        (label_ref 342)) mQuery.c:87 650 {jump}
     (nil)
 -> 342)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 553 552 359)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 359 553 340 27 38 "" [1 uses])
(note 340 359 341 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:87 273 {*addsi_1}
     (nil))
;;  succ:       28 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU,DFS_BACK)
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 266 267
(code_label 342 341 343 28 36 "" [1 uses])
(note 343 342 344 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 28 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 345 344 346 28 (set (reg:DI 0 ax [266])
        (sign_extend:DI (reg:SI 0 ax [267]))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [267])
        (nil)))
(insn 346 345 347 28 (set (reg:QI 0 ax [orig:145 D.3690 ] [145])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [266]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [266])
        (nil)))
(insn 347 346 348 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:145 D.3690 ] [145])
            (const_int 44 [0x2c]))) mQuery.c:87 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:145 D.3690 ] [145])
        (nil)))
(jump_insn 348 347 349 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (nil)
 -> 362)
;;  succ:       29 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 268 269
(note 349 348 350 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 351 29 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 351 350 352 29 (set (reg:DI 0 ax [268])
        (sign_extend:DI (reg:SI 0 ax [269]))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [269])
        (nil)))
(insn 352 351 353 29 (set (reg:QI 0 ax [orig:146 D.3690 ] [146])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [268]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [268])
        (nil)))
(insn 353 352 354 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:146 D.3690 ] [146])
            (const_int 0 [0]))) mQuery.c:87 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:146 D.3690 ] [146])
        (nil)))
(jump_insn 354 353 355 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (nil)
 -> 362)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 270 271
(note 355 354 356 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 30 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:87 89 {*movsi_internal}
     (nil))
(insn 357 356 358 30 (set (reg:DI 0 ax [270])
        (sign_extend:DI (reg:SI 0 ax [271]))) mQuery.c:87 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [271])
        (nil)))
(insn 358 357 360 30 (set (reg:QI 0 ax [orig:147 D.3690 ] [147])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [270]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [270])
        (nil)))
(insn 360 358 361 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:147 D.3690 ] [147])
            (const_int 10 [0xa]))) mQuery.c:87 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:147 D.3690 ] [147])
        (nil)))
(jump_insn 361 360 362 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 359)
            (pc))) mQuery.c:87 612 {*jcc_1}
     (nil)
 -> 359)
;;  succ:       27
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;;              29
;;              30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 272 273
(code_label 362 361 363 31 37 "" [2 uses])
(note 363 362 364 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 364 363 365 31 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:88 89 {*movsi_internal}
     (nil))
(insn 365 364 366 31 (set (reg:DI 0 ax [272])
        (sign_extend:DI (reg:SI 0 ax [273]))) mQuery.c:88 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [273])
        (nil)))
(insn 366 365 367 31 (set (reg:QI 0 ax [orig:148 D.3690 ] [148])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [272]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:88 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [272])
        (nil)))
(insn 367 366 368 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:148 D.3690 ] [148])
            (const_int 0 [0]))) mQuery.c:88 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:148 D.3690 ] [148])
        (nil)))
(jump_insn 368 367 369 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) mQuery.c:88 612 {*jcc_1}
     (nil)
 -> 372)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 369 368 370 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 32 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f873475f130 *.LC10>)) mQuery.c:88 87 {*movdi_internal_rex64}
     (nil))
(call_insn 371 370 372 32 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:88 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 149 150 151 152 153 154 155 156 157 158 159 160 161 274 275 276 277 278 279 280 281
(code_label 372 371 373 33 39 "" [1 uses])
(note 373 372 374 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 374 373 375 33 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 375 374 376 33 (set (reg/f:DI 2 cx [orig:149 D.3688 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [274]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [274])
        (nil)))
(insn 376 375 377 33 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 377 376 378 33 (set (reg:DI 1 dx [orig:150 D.3685 ] [150])
        (sign_extend:DI (reg:SI 0 ax [275]))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [275])
        (nil)))
(insn 378 377 379 33 (set (reg:DI 0 ax [276])
        (reg:DI 1 dx [orig:150 D.3685 ] [150])) mQuery.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 379 378 380 33 (parallel [
            (set (reg:DI 0 ax [276])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (nil))
(insn 380 379 381 33 (parallel [
            (set (reg:DI 0 ax [276])
                (plus:DI (reg:DI 0 ax [276])
                    (reg:DI 1 dx [orig:150 D.3685 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:150 D.3685 ] [150])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:150 D.3685 ] [150])
                (const_int 5 [0x5]))
            (nil))))
(insn 381 380 382 33 (parallel [
            (set (reg:DI 0 ax [277])
                (ashift:DI (reg:DI 0 ax [276])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 382 381 383 33 (set (reg:DI 0 ax [276])
        (reg:DI 0 ax [277])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [277])
        (nil)))
(insn 383 382 384 33 (set (reg:DI 0 ax [orig:151 D.3685 ] [151])
        (reg:DI 0 ax [276])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [276])
        (nil)))
(insn 384 383 385 33 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.3688 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.3685 ] [151])
                    (reg/f:DI 2 cx [orig:149 D.3688 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:151 D.3685 ] [151])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:149 D.3688 ] [149])
            (nil))))
(insn 385 384 386 33 (set (reg/f:DI 0 ax [orig:153 D.3691 ] [153])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:152 D.3688 ] [152])
                (const_int 8 [0x8])) [0 _120->nvp+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:152 D.3688 ] [152])
        (nil)))
(insn 386 385 387 33 (set (reg:SI 1 dx [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 387 386 388 33 (set (reg:DI 1 dx [orig:154 D.3685 ] [154])
        (sign_extend:DI (reg:SI 1 dx [278]))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [278])
        (nil)))
(insn 388 387 389 33 (parallel [
            (set (reg:DI 1 dx [orig:155 D.3685 ] [155])
                (ashift:DI (reg:DI 1 dx [orig:154 D.3685 ] [154])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:154 D.3685 ] [154])
        (nil)))
(insn 389 388 390 33 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.3691 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:153 D.3691 ] [153])
                    (reg:DI 1 dx [orig:155 D.3685 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:155 D.3685 ] [155])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:153 D.3691 ] [153])
            (nil))))
(insn 390 389 391 33 (set (reg/f:DI 0 ax [orig:157 D.3692 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [orig:156 D.3691 ] [156]) [0 *_124+0 S8 A64])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:156 D.3691 ] [156])
        (nil)))
(insn 391 390 392 33 (parallel [
            (set (reg/f:DI 3 bx [orig:158 D.3692 ] [158])
                (plus:DI (reg/f:DI 0 ax [orig:157 D.3692 ] [157])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:157 D.3692 ] [157])
        (nil)))
(insn 392 391 393 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 273 {*addsi_1}
     (nil))
(insn 393 392 394 33 (parallel [
            (set (reg:DI 1 dx [279])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (nil))
(insn 394 393 395 33 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:89 89 {*movsi_internal}
     (nil))
(insn 395 394 396 33 (set (reg:DI 0 ax [280])
        (sign_extend:DI (reg:SI 0 ax [281]))) mQuery.c:89 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [281])
        (nil)))
(insn 396 395 397 33 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.3687 ] [159])
                (plus:DI (reg:DI 0 ax [280])
                    (reg:DI 1 dx [279])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [280])
        (expr_list:REG_DEAD (reg:DI 1 dx [279])
            (nil))))
(insn 397 396 398 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:159 D.3687 ] [159])) mQuery.c:89 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.3687 ] [159])
        (nil)))
(call_insn/i 398 397 399 33 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:89 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 399 398 400 33 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:89 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 400 399 401 33 (set (reg:XF 8 st [orig:161 D.3694 ] [161])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64]))) mQuery.c:89 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 160 [ D.3693 ])
        (nil)))
(insn 401 400 402 33 (set (mem:XF (reg/f:DI 3 bx [orig:158 D.3692 ] [158]) [0 *_126+0 S16 A128])
        (reg:XF 8 st [orig:161 D.3694 ] [161])) mQuery.c:89 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:161 D.3694 ] [161])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:158 D.3692 ] [158])
            (nil))))
(insn 402 401 554 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:92 273 {*addsi_1}
     (nil))
(jump_insn 554 402 555 33 (set (pc)
        (label_ref 407)) mQuery.c:92 650 {jump}
     (nil)
 -> 407)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 555 554 418)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 418 555 405 34 42 "" [1 uses])
(note 405 418 406 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:92 273 {*addsi_1}
     (nil))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              33 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 282 283
(code_label 407 406 408 35 40 "" [1 uses])
(note 408 407 409 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 35 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:92 89 {*movsi_internal}
     (nil))
(insn 410 409 411 35 (set (reg:DI 0 ax [282])
        (sign_extend:DI (reg:SI 0 ax [283]))) mQuery.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [283])
        (nil)))
(insn 411 410 412 35 (set (reg:QI 0 ax [orig:162 D.3690 ] [162])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [282]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:92 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [282])
        (nil)))
(insn 412 411 413 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:162 D.3690 ] [162])
            (const_int 44 [0x2c]))) mQuery.c:92 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:162 D.3690 ] [162])
        (nil)))
(jump_insn 413 412 414 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 421)
            (pc))) mQuery.c:92 612 {*jcc_1}
     (nil)
 -> 421)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 163 284 285
(note 414 413 415 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 36 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:92 89 {*movsi_internal}
     (nil))
(insn 416 415 417 36 (set (reg:DI 0 ax [284])
        (sign_extend:DI (reg:SI 0 ax [285]))) mQuery.c:92 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [285])
        (nil)))
(insn 417 416 419 36 (set (reg:QI 0 ax [orig:163 D.3690 ] [163])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [284]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:92 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [284])
        (nil)))
(insn 419 417 420 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:163 D.3690 ] [163])
            (const_int 0 [0]))) mQuery.c:92 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:163 D.3690 ] [163])
        (nil)))
(jump_insn 420 419 421 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 418)
            (pc))) mQuery.c:92 612 {*jcc_1}
     (nil)
 -> 418)
;;  succ:       34
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164 286 287
(code_label 421 420 422 37 41 "" [1 uses])
(note 422 421 423 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 37 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:93 89 {*movsi_internal}
     (nil))
(insn 424 423 425 37 (set (reg:DI 0 ax [286])
        (sign_extend:DI (reg:SI 0 ax [287]))) mQuery.c:93 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [287])
        (nil)))
(insn 425 424 426 37 (set (reg:QI 0 ax [orig:164 D.3690 ] [164])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [286]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:93 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [286])
        (nil)))
(insn 426 425 427 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:164 D.3690 ] [164])
            (const_int 0 [0]))) mQuery.c:93 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:164 D.3690 ] [164])
        (nil)))
(jump_insn 427 426 428 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 431)
            (pc))) mQuery.c:93 612 {*jcc_1}
     (nil)
 -> 431)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 428 427 429 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 429 428 430 38 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f873475f1c8 *.LC11>)) mQuery.c:93 87 {*movdi_internal_rex64}
     (nil))
(call_insn 430 429 431 38 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:93 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 431 430 432 39 43 "" [1 uses])
(note 432 431 433 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 433 432 556 39 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:94 273 {*addsi_1}
     (nil))
(jump_insn 556 433 557 39 (set (pc)
        (label_ref 438)) mQuery.c:94 650 {jump}
     (nil)
 -> 438)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 557 556 449)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 449 557 436 40 46 "" [1 uses])
(note 436 449 437 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 437 436 438 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:94 273 {*addsi_1}
     (nil))
;;  succ:       41 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU,DFS_BACK)
;;              39 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 288 289
(code_label 438 437 439 41 44 "" [1 uses])
(note 439 438 440 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 41 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:94 89 {*movsi_internal}
     (nil))
(insn 441 440 442 41 (set (reg:DI 0 ax [288])
        (sign_extend:DI (reg:SI 0 ax [289]))) mQuery.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [289])
        (nil)))
(insn 442 441 443 41 (set (reg:QI 0 ax [orig:165 D.3690 ] [165])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [288]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:94 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [288])
        (nil)))
(insn 443 442 444 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:165 D.3690 ] [165])
            (const_int 32 [0x20]))) mQuery.c:94 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:165 D.3690 ] [165])
        (nil)))
(jump_insn 444 443 445 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 452)
            (pc))) mQuery.c:94 612 {*jcc_1}
     (nil)
 -> 452)
;;  succ:       42 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 290 291
(note 445 444 446 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 42 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:94 89 {*movsi_internal}
     (nil))
(insn 447 446 448 42 (set (reg:DI 0 ax [290])
        (sign_extend:DI (reg:SI 0 ax [291]))) mQuery.c:94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [291])
        (nil)))
(insn 448 447 450 42 (set (reg:QI 0 ax [orig:166 D.3690 ] [166])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [290]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:94 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [290])
        (nil)))
(insn 450 448 451 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:166 D.3690 ] [166])
            (const_int 0 [0]))) mQuery.c:94 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:166 D.3690 ] [166])
        (nil)))
(jump_insn 451 450 452 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 449)
            (pc))) mQuery.c:94 612 {*jcc_1}
     (nil)
 -> 449)
;;  succ:       40
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;;              42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 167 292 293
(code_label 452 451 453 43 45 "" [1 uses])
(note 453 452 454 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 454 453 455 43 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:95 89 {*movsi_internal}
     (nil))
(insn 455 454 456 43 (set (reg:DI 0 ax [292])
        (sign_extend:DI (reg:SI 0 ax [293]))) mQuery.c:95 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [293])
        (nil)))
(insn 456 455 457 43 (set (reg:QI 0 ax [orig:167 D.3690 ] [167])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [292]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:95 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [292])
        (nil)))
(insn 457 456 458 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:167 D.3690 ] [167])
            (const_int 0 [0]))) mQuery.c:95 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:167 D.3690 ] [167])
        (nil)))
(jump_insn 458 457 459 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 462)
            (pc))) mQuery.c:95 612 {*jcc_1}
     (nil)
 -> 462)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 459 458 460 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 44 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f873475f260 *.LC12>)) mQuery.c:95 87 {*movdi_internal_rex64}
     (nil))
(call_insn 461 460 462 44 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:95 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 168 169 170 171 172 173 174 175 176 177 294 295 296 297 298 299 300 301
(code_label 462 461 463 45 47 "" [1 uses])
(note 463 462 464 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 45 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 465 464 466 45 (set (reg/f:DI 2 cx [orig:168 D.3688 ] [168])
        (mem/f:DI (reg/f:DI 0 ax [294]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [294])
        (nil)))
(insn 466 465 467 45 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 467 466 468 45 (set (reg:DI 1 dx [orig:169 D.3685 ] [169])
        (sign_extend:DI (reg:SI 0 ax [295]))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [295])
        (nil)))
(insn 468 467 469 45 (set (reg:DI 0 ax [296])
        (reg:DI 1 dx [orig:169 D.3685 ] [169])) mQuery.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 469 468 470 45 (parallel [
            (set (reg:DI 0 ax [296])
                (ashift:DI (reg:DI 0 ax [296])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (nil))
(insn 470 469 471 45 (parallel [
            (set (reg:DI 0 ax [296])
                (plus:DI (reg:DI 0 ax [296])
                    (reg:DI 1 dx [orig:169 D.3685 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:169 D.3685 ] [169])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:169 D.3685 ] [169])
                (const_int 5 [0x5]))
            (nil))))
(insn 471 470 472 45 (parallel [
            (set (reg:DI 0 ax [297])
                (ashift:DI (reg:DI 0 ax [296])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [296])
        (nil)))
(insn 472 471 473 45 (set (reg:DI 0 ax [296])
        (reg:DI 0 ax [297])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [297])
        (nil)))
(insn 473 472 474 45 (set (reg:DI 0 ax [orig:170 D.3685 ] [170])
        (reg:DI 0 ax [296])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [296])
        (nil)))
(insn 474 473 475 45 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.3688 ] [171])
                (plus:DI (reg:DI 0 ax [orig:170 D.3685 ] [170])
                    (reg/f:DI 2 cx [orig:168 D.3688 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:170 D.3685 ] [170])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:168 D.3688 ] [168])
            (nil))))
(insn 475 474 476 45 (set (reg/f:DI 0 ax [orig:172 D.3692 ] [172])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:171 D.3688 ] [171])
                (const_int 16 [0x10])) [0 _144->time+0 S8 A128])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:171 D.3688 ] [171])
        (nil)))
(insn 476 475 477 45 (set (reg:SI 1 dx [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 477 476 478 45 (set (reg:DI 1 dx [orig:173 D.3685 ] [173])
        (sign_extend:DI (reg:SI 1 dx [298]))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [298])
        (nil)))
(insn 478 477 479 45 (parallel [
            (set (reg:DI 1 dx [orig:174 D.3685 ] [174])
                (ashift:DI (reg:DI 1 dx [orig:173 D.3685 ] [173])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:173 D.3685 ] [173])
        (nil)))
(insn 479 478 480 45 (parallel [
            (set (reg/f:DI 3 bx [orig:175 D.3692 ] [175])
                (plus:DI (reg/f:DI 0 ax [orig:172 D.3692 ] [172])
                    (reg:DI 1 dx [orig:174 D.3685 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:174 D.3685 ] [174])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:172 D.3692 ] [172])
            (nil))))
(insn 480 479 481 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 273 {*addsi_1}
     (nil))
(insn 481 480 482 45 (parallel [
            (set (reg:DI 1 dx [299])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (nil))
(insn 482 481 483 45 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 j+0 S4 A32])) mQuery.c:96 89 {*movsi_internal}
     (nil))
(insn 483 482 484 45 (set (reg:DI 0 ax [300])
        (sign_extend:DI (reg:SI 0 ax [301]))) mQuery.c:96 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [301])
        (nil)))
(insn 484 483 485 45 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.3687 ] [176])
                (plus:DI (reg:DI 0 ax [300])
                    (reg:DI 1 dx [299])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:96 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [300])
        (expr_list:REG_DEAD (reg:DI 1 dx [299])
            (nil))))
(insn 485 484 486 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:176 D.3687 ] [176])) mQuery.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:176 D.3687 ] [176])
        (nil)))
(call_insn 486 485 487 45 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_convert_time") [flags 0x3]  <function_decl 0x7f87346baf00 _convert_time>) [0 _convert_time S1 A8])
            (const_int 0 [0]))) mQuery.c:96 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 487 486 488 45 (set (reg:XF 8 st [orig:177 D.3694 ] [177])
        (reg:XF 8 st)) mQuery.c:96 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 488 487 489 45 (set (mem:XF (reg/f:DI 3 bx [orig:175 D.3692 ] [175]) [0 *_148+0 S16 A128])
        (reg:XF 8 st [orig:177 D.3694 ] [177])) mQuery.c:96 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:177 D.3694 ] [177])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:175 D.3692 ] [175])
            (nil))))
(insn 489 488 490 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 273 {*addsi_1}
     (nil))
;;  succ:       46 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 302 303 304 305
(code_label 490 489 491 46 26 "" [1 uses])
(note 491 490 492 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 46 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 493 492 494 46 (set (reg/f:DI 2 cx [orig:106 D.3688 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [302]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [302])
        (nil)))
(insn 494 493 495 46 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:78 89 {*movsi_internal}
     (nil))
(insn 495 494 496 46 (set (reg:DI 1 dx [orig:107 D.3685 ] [107])
        (sign_extend:DI (reg:SI 0 ax [303]))) mQuery.c:78 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [303])
        (nil)))
(insn 496 495 497 46 (set (reg:DI 0 ax [304])
        (reg:DI 1 dx [orig:107 D.3685 ] [107])) mQuery.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 497 496 498 46 (parallel [
            (set (reg:DI 0 ax [304])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 513 {*ashldi3_1}
     (nil))
(insn 498 497 499 46 (parallel [
            (set (reg:DI 0 ax [304])
                (plus:DI (reg:DI 0 ax [304])
                    (reg:DI 1 dx [orig:107 D.3685 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:107 D.3685 ] [107])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:107 D.3685 ] [107])
                (const_int 5 [0x5]))
            (nil))))
(insn 499 498 500 46 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [304])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 500 499 501 46 (set (reg:DI 0 ax [304])
        (reg:DI 0 ax [305])) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [305])
        (nil)))
(insn 501 500 502 46 (set (reg:DI 0 ax [orig:108 D.3685 ] [108])
        (reg:DI 0 ax [304])) mQuery.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [304])
        (nil)))
(insn 502 501 503 46 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.3688 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 D.3685 ] [108])
                    (reg/f:DI 2 cx [orig:106 D.3688 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:108 D.3685 ] [108])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:106 D.3688 ] [106])
            (nil))))
(insn 503 502 505 46 (set (reg:SI 0 ax [orig:110 D.3689 ] [110])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:109 D.3688 ] [109])
                (const_int 4 [0x4])) [0 _69->n_nvp+0 S4 A32])) mQuery.c:78 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.3688 ] [109])
        (nil)))
(insn 505 503 506 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:110 D.3689 ] [110])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50048 [0xffffffffffff3c80])) [0 h+0 S4 A32]))) mQuery.c:78 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:110 D.3689 ] [110])
        (nil)))
(jump_insn 506 505 507 46 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 504)
            (pc))) mQuery.c:78 612 {*jcc_1}
     (nil)
 -> 504)
;;  succ:       11
;;              47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 507 506 508 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 508 507 509 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:66 273 {*addsi_1}
     (nil))
;;  succ:       48 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 306
(code_label 509 508 510 48 22 "" [1 uses])
(note 510 509 512 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 512 510 513 48 (set (reg:SI 0 ax [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 i+0 S4 A32])) mQuery.c:66 89 {*movsi_internal}
     (nil))
(insn 513 512 514 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [306])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50044 [0xffffffffffff3c84])) [0 Nflight+0 S4 A32]))) mQuery.c:66 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [306])
        (nil)))
(jump_insn 514 513 515 48 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 511)
            (pc))) mQuery.c:66 612 {*jcc_1}
     (nil)
 -> 511)
;;  succ:       5
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 178 179 180 307 308
(note 515 514 516 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 516 515 517 49 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 flight+0 S8 A64])) mQuery.c:100 87 {*movdi_internal_rex64}
     (nil))
(insn 517 516 518 49 (set (reg/f:DI 0 ax [orig:178 D.3688 ] [178])
        (mem/f:DI (reg/f:DI 0 ax [307]) [0 *flight_16(D)+0 S8 A64])) mQuery.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [307])
        (nil)))
(insn 518 517 519 49 (set (reg:SI 1 dx [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 Nflight+0 S4 A32])) mQuery.c:100 89 {*movsi_internal}
     (nil))
(insn 519 518 520 49 (set (reg:SI 4 si)
        (reg:SI 1 dx [308])) mQuery.c:100 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [308])
        (nil)))
(insn 520 519 521 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:178 D.3688 ] [178])) mQuery.c:100 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:178 D.3688 ] [178])
        (nil)))
(call_insn 521 520 522 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_calculate_velocity") [flags 0x3]  <function_decl 0x7f87346c5000 _calculate_velocity>) [0 _calculate_velocity S1 A8])
            (const_int 0 [0]))) mQuery.c:100 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 522 521 525 49 (set (reg:SI 0 ax [orig:179 D.3689 ] [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 Nflight+0 S4 A32])) mQuery.c:107 89 {*movsi_internal}
     (nil))
(insn 525 522 529 49 (set (reg:SI 0 ax [orig:180 <retval> ] [180])
        (reg:SI 0 ax [orig:179 D.3689 ] [179])) mQuery.c:107 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:179 D.3689 ] [179])
        (nil)))
(insn 529 525 532 49 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:180 <retval> ] [180])) mQuery.c:108 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:180 <retval> ] [180])
        (nil)))
(insn 532 529 533 49 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.3695+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 4 si [311]))
        ]) mQuery.c:108 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 4 si [311])
        (nil)))
(jump_insn 533 532 540 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 536)
            (pc))) mQuery.c:108 612 {*jcc_1}
     (nil)
 -> 536)
;;  succ:       51
;;              50 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 540 533 534 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(call_insn 534 540 535 50 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:108 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 535 534 536)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 536 535 541 51 51 "" [1 uses])
(note 541 536 537 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 537 541 0 51 (use (reg/i:SI 0 ax)) mQuery.c:108 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _find_value_string (_find_value_string, funcdef_no=5, decl_uid=3177, cgraph_uid=5)

      Creating newreg=97
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
deleting insn with uid = 5.
      Creating newreg=98
Removing SCRATCH in insn #147 (nop 3)
rescanning insn with uid = 147.
deleting insn with uid = 147.

********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r97
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 48:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 61:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 90:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) r {*cmpsi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 110:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r98
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 72 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24

********** Pseudo live ranges #1: **********

  BB 22
   Insn 136: point = 0
   Insn 135: point = 0
   Insn 134: point = 0
   Insn 133: point = 0
   Insn 132: point = 0
   Insn 131: point = 0
   Insn 130: point = 1
   Insn 129: point = 2
   Insn 128: point = 2
   Insn 127: point = 3
  BB 23
   Insn 149: point = 4
  BB 20
   Insn 167: point = 4
  BB 24
   Insn 152: point = 4
  BB 19
   Insn 148: point = 4
   Insn 147: point = 4
   Insn 144: point = 5
   Insn 140: point = 6
   Insn 111: point = 8
   Insn 110: point = 10
   Insn 109: point = 11
   Insn 108: point = 11
   Insn 107: point = 12
   Insn 106: point = 13
   Insn 105: point = 13
   Insn 104: point = 14
  BB 18
   Insn 102: point = 15
   Insn 101: point = 15
   Insn 100: point = 16
   Insn 99: point = 17
   Insn 98: point = 17
   Insn 97: point = 18
   Insn 96: point = 19
   Insn 95: point = 20
   Insn 94: point = 21
   Insn 93: point = 23
   Insn 92: point = 25
   Insn 91: point = 26
   Insn 90: point = 27
   Insn 89: point = 27
   Insn 88: point = 29
  BB 17
   Insn 85: point = 30
   Insn 84: point = 30
  BB 16
   Insn 82: point = 30
   Insn 81: point = 30
   Insn 80: point = 31
   Insn 79: point = 33
   Insn 78: point = 35
  BB 14
   Insn 68: point = 36
   Insn 67: point = 36
   Insn 66: point = 37
   Insn 65: point = 39
   Insn 64: point = 41
  BB 12
   Insn 163: point = 42
   Insn 57: point = 42
  BB 10
   Insn 50: point = 42
   Insn 49: point = 42
   Insn 48: point = 43
  BB 9
   Insn 46: point = 44
   Insn 45: point = 44
   Insn 44: point = 45
  BB 8
   Insn 42: point = 46
   Insn 41: point = 46
   Insn 40: point = 47
  BB 21
   Insn 125: point = 48
   Insn 124: point = 48
   Insn 122: point = 49
   Insn 121: point = 50
   Insn 120: point = 50
   Insn 119: point = 51
   Insn 118: point = 51
   Insn 117: point = 52
   Insn 116: point = 53
  BB 11
   Insn 161: point = 54
  BB 7
   Insn 159: point = 54
  BB 6
   Insn 35: point = 54
   Insn 34: point = 54
   Insn 32: point = 55
   Insn 31: point = 57
   Insn 30: point = 59
   Insn 29: point = 60
   Insn 28: point = 62
  BB 4
   Insn 157: point = 63
   Insn 21: point = 63
  BB 3
   Insn 18: point = 63
   Insn 17: point = 63
  BB 2
   Insn 15: point = 63
   Insn 14: point = 63
   Insn 13: point = 63
   Insn 12: point = 64
   Insn 11: point = 65
   Insn 10: point = 65
   Insn 9: point = 66
   Insn 8: point = 66
   Insn 5: point = 67
   Insn 3: point = 69
   Insn 2: point = 69
  BB 5
   Insn 25: point = 69
  BB 13
   Insn 61: point = 69
  BB 15
   Insn 75: point = 69
   Insn 74: point = 69
   Insn 72: point = 70
   Insn 71: point = 72
   Insn 70: point = 74
 r59: [58..60]
 r60: [56..57]
 r61: [54..55]
 r62: [48..49]
 r63: [46..47]
 r64: [44..45]
 r65: [42..43]
 r66: [36..37]
 r67: [69..70]
 r68: [30..31]
 r69: [19..27]
 r70: [17..21]
 r71: [15..16]
 r72: [9..10]
 r73: [7..8]
 r74: [5..6]
 r75: [65..66]
 r76: [63..64]
 r77: [61..62]
 r78: [58..59]
 r79: [38..39]
 r80: [40..41]
 r81: [71..72]
 r82: [73..74]
 r83: [32..33]
 r84: [34..35]
 r85: [28..29]
 r86: [22..26]
 r87: [22..23]
 r88: [24..25]
 r89: [18..20]
 r90: [13..14]
 r91: [11..12]
 r92: [51..53]
 r93: [50..52]
 r94: [2..3]
 r95: [0..1]
 r97: [67..68]
 r98: [4..4]
Compressing live ranges: from 75 to 67 - 89%
Ranges after the compression:
 r59: [51..52]
 r60: [49..50]
 r61: [47..48]
 r62: [43..44]
 r63: [41..42]
 r64: [39..40]
 r65: [37..38]
 r66: [31..32]
 r67: [61..62]
 r68: [25..26]
 r69: [17..22]
 r70: [17..18]
 r71: [15..16]
 r72: [9..10]
 r73: [7..8]
 r74: [5..6]
 r75: [57..58]
 r76: [55..56]
 r77: [53..54]
 r78: [51..52]
 r79: [33..34]
 r80: [35..36]
 r81: [63..64]
 r82: [65..66]
 r83: [27..28]
 r84: [29..30]
 r85: [23..24]
 r86: [19..22]
 r87: [19..20]
 r88: [21..22]
 r89: [17..18]
 r90: [13..14]
 r91: [11..12]
 r92: [45..46]
 r93: [45..46]
 r94: [2..3]
 r95: [0..1]
 r97: [59..60]
 r98: [4..4]
	 Assigning to 97 (cl=INDEX_REGS, orig=97, freq=1, tfirst=97, tfreq=1)...
	   Assign 0 to reload r97 (freq=1)
	 Assigning to 98 (cl=INDEX_REGS, orig=98, freq=1, tfirst=98, tfreq=1)...
	   Assign 0 to reload r98 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 72
Changing spilled pseudos to memory in insn #110
Changing spilled pseudos to memory in insn #111

********** Local #3: **********

Reusing alternative 0 for insn #111
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #110
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 110:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=50080, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=50064, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 122
changing reg in insn 124
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 74
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 96
changing reg in insn 94
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 111
changing reg in insn 140
changing reg in insn 140
changing reg in insn 144
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 65
changing reg in insn 66
changing reg in insn 64
changing reg in insn 65
changing reg in insn 71
changing reg in insn 72
changing reg in insn 70
changing reg in insn 71
changing reg in insn 79
changing reg in insn 80
changing reg in insn 78
changing reg in insn 79
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 94
changing reg in insn 93
changing reg in insn 94
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 116
changing reg in insn 118
changing reg in insn 117
changing reg in insn 120
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 5
changing reg in insn 147
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 149.


_find_value_string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 8 [st] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={44d,33u} r1={17d,5u,1e} r2={14d,2u} r4={16d,5u} r5={22d,11u} r6={1d,62u} r7={1d,35u} r8={14d,4u} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={31d,11u} r18={11d} r19={11d} r20={1d,1u,1e} r21={12d,1u} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} 
;;    total ref usage 750{578d,170u,2e} in 103{92 regular + 11 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 75 76
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 config_file+0 S8 A64])
        (reg:DI 5 di [ config_file ])) mQuery.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])
        (reg:DI 4 si [ label ])) mQuery.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ label ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.3713+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [97])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:112 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [97])
        (nil)))
(insn 8 5 9 2 (set (reg:DI 0 ax [75])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 config_file+0 S8 A64])) mQuery.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [75])) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:114 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 0 ax [76])
        (reg:DI 0 ax)) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [76])) mQuery.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [76])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:115 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:115 612 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8734780000 *.LC13>)) mQuery.c:115 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:115 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 18 20 4 53 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 157 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
        (const_int 0 [0])) mQuery.c:120 89 {*movsi_internal}
     (nil))
(jump_insn 157 21 158 4 (set (pc)
        (label_ref 26)) mQuery.c:120 650 {jump}
     (nil)
 -> 26)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 33 158 24 5 55 "" [1 uses])
(note 24 33 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:120 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 77 78
(code_label 26 25 27 6 54 "" [1 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 0 ax [77])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])) mQuery.c:120 89 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:DI 1 dx [orig:59 D.3706 ] [59])
        (sign_extend:DI (reg:SI 0 ax [77]))) mQuery.c:120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [77])
        (nil)))
(insn 30 29 31 6 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:120 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg/f:DI 0 ax [orig:60 D.3707 ] [60])
                (plus:DI (reg/f:DI 0 ax [78])
                    (reg:DI 1 dx [orig:59 D.3706 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:120 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.3706 ] [59])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])
                    (reg:DI 1 dx [orig:59 D.3706 ] [59]))
                (nil)))))
(insn 32 31 34 6 (set (reg:QI 0 ax [orig:61 D.3708 ] [61])
        (mem:QI (reg/f:DI 0 ax [orig:60 D.3707 ] [60]) [0 *_8+0 S1 A8])) mQuery.c:120 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3707 ] [60])
        (nil)))
(insn 34 32 35 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:61 D.3708 ] [61])
            (const_int 0 [0]))) mQuery.c:120 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:61 D.3708 ] [61])
        (nil)))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mQuery.c:120 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 36 35 159 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 159 36 160 7 (set (pc)
        (label_ref 114)) mQuery.c:122 650 {jump}
     (nil)
 -> 114)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 160 159 123)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63
(code_label 123 160 39 8 64 "" [1 uses])
(note 39 123 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:QI 0 ax [orig:63 D.3708 ] [63])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:63 D.3708 ] [63])
            (const_int 35 [0x23]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:63 D.3708 ] [63])
        (nil)))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (nil)
 -> 51)
;;  succ:       11
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:QI 0 ax [orig:64 D.3708 ] [64])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 45 44 46 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:64 D.3708 ] [64])
            (const_int 10 [0xa]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:64 D.3708 ] [64])
        (nil)))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (nil)
 -> 51)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 10 (set (reg:QI 0 ax [orig:65 D.3708 ] [65])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -50016 [0xffffffffffff3ca0])) [0 c+0 S1 A128])) mQuery.c:123 91 {*movqi_internal}
     (nil))
(insn 49 48 50 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:65 D.3708 ] [65])
            (const_int 32 [0x20]))) mQuery.c:123 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:65 D.3708 ] [65])
        (nil)))
(jump_insn 50 49 51 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) mQuery.c:123 612 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 51 50 52 11 57 "" [2 uses])
(note 52 51 161 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 161 52 162 11 (set (pc)
        (label_ref 114)) mQuery.c:123 650 {jump}
     (nil)
 -> 114)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 55)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 55 162 56 12 58 "" [1 uses])
(note 56 55 57 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 163 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(jump_insn 163 57 164 12 (set (pc)
        (label_ref 62)) mQuery.c:124 650 {jump}
     (nil)
 -> 62)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 73)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 73 164 60 13 61 "" [1 uses])
(note 60 73 61 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:124 273 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 79 80
(code_label 62 61 63 14 59 "" [1 uses])
(note 63 62 64 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 14 (set (reg:SI 0 ax [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(insn 65 64 66 14 (set (reg:DI 0 ax [79])
        (sign_extend:DI (reg:SI 0 ax [80]))) mQuery.c:124 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [80])
        (nil)))
(insn 66 65 67 14 (set (reg:QI 0 ax [orig:66 D.3708 ] [66])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [79]))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:124 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [79])
        (nil)))
(insn 67 66 68 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:66 D.3708 ] [66])
            (const_int 35 [0x23]))) mQuery.c:124 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:66 D.3708 ] [66])
        (nil)))
(jump_insn 68 67 69 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) mQuery.c:124 612 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 81 82
(note 69 68 70 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 15 (set (reg:SI 0 ax [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:124 89 {*movsi_internal}
     (nil))
(insn 71 70 72 15 (set (reg:DI 0 ax [81])
        (sign_extend:DI (reg:SI 0 ax [82]))) mQuery.c:124 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [82])
        (nil)))
(insn 72 71 74 15 (set (reg:QI 0 ax [orig:67 D.3708 ] [67])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [81]))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:124 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [81])
        (nil)))
(insn 74 72 75 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:67 D.3708 ] [67])
            (const_int 0 [0]))) mQuery.c:124 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:67 D.3708 ] [67])
        (nil)))
(jump_insn 75 74 76 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) mQuery.c:124 612 {*jcc_1}
     (nil)
 -> 73)
;;  succ:       13
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 83 84
(code_label 76 75 77 16 60 "" [1 uses])
(note 77 76 78 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 16 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:125 89 {*movsi_internal}
     (nil))
(insn 79 78 80 16 (set (reg:DI 0 ax [83])
        (sign_extend:DI (reg:SI 0 ax [84]))) mQuery.c:125 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [84])
        (nil)))
(insn 80 79 81 16 (set (reg:QI 0 ax [orig:68 D.3708 ] [68])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [83]))
                (const_int -50016 [0xffffffffffff3ca0])) [0 c S1 A8])) mQuery.c:125 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 81 80 82 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:68 D.3708 ] [68])
            (const_int 0 [0]))) mQuery.c:125 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:68 D.3708 ] [68])
        (nil)))
(jump_insn 82 81 83 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) mQuery.c:125 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f8734780098 *.LC14>)) mQuery.c:125 87 {*movdi_internal_rex64}
     (nil))
(call_insn 85 84 86 17 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:125 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 85 86 87 88 89
(code_label 86 85 87 18 62 "" [1 uses])
(note 87 86 88 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 18 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50028 [0xffffffffffff3c94])) [0 lsize+0 S4 A32])) mQuery.c:126 89 {*movsi_internal}
     (nil))
(insn 89 88 90 18 (set (reg:DI 1 dx [orig:69 D.3709 ] [69])
        (sign_extend:DI (reg:SI 0 ax [85]))) mQuery.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [85])
        (nil)))
(insn 90 89 91 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 273 {*addsi_1}
     (nil))
(insn 91 90 92 18 (parallel [
            (set (reg:DI 2 cx [86])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 274 {*adddi_1}
     (nil))
(insn 92 91 93 18 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 i+0 S4 A32])) mQuery.c:126 89 {*movsi_internal}
     (nil))
(insn 93 92 94 18 (set (reg:DI 0 ax [87])
        (sign_extend:DI (reg:SI 0 ax [88]))) mQuery.c:126 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(insn 94 93 95 18 (parallel [
            (set (reg/f:DI 2 cx [orig:70 D.3707 ] [70])
                (plus:DI (reg:DI 2 cx [86])
                    (reg:DI 0 ax [87])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:126 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (expr_list:REG_DEAD (reg:DI 2 cx [86])
            (nil))))
(insn 95 94 96 18 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 18 (set (reg:DI 1 dx)
        (reg:DI 1 dx [orig:69 D.3709 ] [69])) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:69 D.3709 ] [69])
        (nil)))
(insn 97 96 98 18 (set (reg:DI 4 si)
        (reg:DI 0 ax [89])) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [89])
        (nil)))
(insn 98 97 99 18 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:70 D.3707 ] [70])) mQuery.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:70 D.3707 ] [70])
        (nil)))
(call_insn/i 99 98 100 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcmp") [flags 0x41]  <function_decl 0x7f8734935700 memcmp>) [0 __builtin_memcmp S1 A8])
            (const_int 0 [0]))) mQuery.c:126 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 100 99 101 18 (set (reg:SI 0 ax [orig:71 D.3710 ] [71])
        (reg:SI 0 ax)) mQuery.c:126 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 101 100 102 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:71 D.3710 ] [71])
            (const_int 0 [0]))) mQuery.c:126 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:71 D.3710 ] [71])
        (nil)))
(jump_insn 102 101 103 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) mQuery.c:126 612 {*jcc_1}
     (nil)
 -> 114)
;;  succ:       19 (FALLTHRU)
;;              21 (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 72 73 74 90 91
(note 103 102 104 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 19 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:127 87 {*movdi_internal_rex64}
     (nil))
(insn 105 104 106 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) mQuery.c:127 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(call_insn 106 105 107 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:127 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 19 (parallel [
            (set (reg:DI 0 ax [91])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:128 274 {*adddi_1}
     (nil))
(insn 108 107 109 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) mQuery.c:128 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [91])
        (nil)))
(call_insn/i 109 108 110 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:128 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 110 109 111 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 %sfp+-50056 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:128 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 111 110 140 19 (set (reg:XF 8 st [orig:73 D.3712 ] [73])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50056 [0xffffffffffff3c78])) [0 %sfp+-50056 S8 A64]))) mQuery.c:128 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 72 [ D.3711 ])
        (nil)))
(insn 140 111 144 19 (set (reg:XF 8 st [orig:74 <retval> ] [74])
        (reg:XF 8 st [orig:73 D.3712 ] [73])) mQuery.c:128 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.3712 ] [73])
        (nil)))
(insn 144 140 147 19 (set (reg/i:XF 8 st)
        (reg:XF 8 st [orig:74 <retval> ] [74])) mQuery.c:136 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 <retval> ] [74])
        (nil)))
(insn 147 144 148 19 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.3713+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [98]))
        ]) mQuery.c:136 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [98])
        (nil)))
(jump_insn 148 147 165 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) mQuery.c:136 612 {*jcc_1}
     (nil)
 -> 151)
;;  succ:       24
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 165 148 167 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 167 165 168 20 (set (pc)
        (label_ref 166)) 650 {jump}
     (nil)
 -> 166)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 168 167 114)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (DFS_BACK)
;;              7 [100.0%] 
;;              11 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 92 93
(code_label 114 168 115 21 56 "" [3 uses])
(note 115 114 116 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 21 (set (reg:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 117 116 118 21 (parallel [
            (set (reg:DI 0 ax [93])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:122 274 {*adddi_1}
     (nil))
(insn 118 117 119 21 (set (reg:DI 1 dx)
        (reg:DI 1 dx [92])) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [92])
        (nil)))
(insn 119 118 120 21 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:122 89 {*movsi_internal}
     (nil))
(insn 120 119 121 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (nil)))
(call_insn 121 120 122 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:122 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 122 121 124 21 (set (reg/f:DI 0 ax [orig:62 D.3707 ] [62])
        (reg:DI 0 ax)) mQuery.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 124 122 125 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:62 D.3707 ] [62])
            (const_int 0 [0]))) mQuery.c:122 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.3707 ] [62])
        (nil)))
(jump_insn 125 124 126 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) mQuery.c:122 612 {*jcc_1}
     (nil)
 -> 123)
;;  succ:       8
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95
(note 126 125 127 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 22 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 rstream+0 S8 A64])) mQuery.c:132 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) mQuery.c:132 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [94])
        (nil)))
(call_insn 129 128 130 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:132 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 130 129 131 22 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 label+0 S8 A64])) mQuery.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 131 130 132 22 (set (reg:DI 4 si)
        (reg:DI 0 ax [95])) mQuery.c:133 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(insn 132 131 133 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f8734780130 *.LC15>)) mQuery.c:133 87 {*movdi_internal_rex64}
     (nil))
(insn 133 132 134 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) mQuery.c:133 91 {*movqi_internal}
     (nil))
(call_insn 134 133 135 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f8734941f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) mQuery.c:133 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 135 134 136 22 (set (reg:SI 5 di)
        (const_int 0 [0])) mQuery.c:134 89 {*movsi_internal}
     (nil))
(call_insn 136 135 137 22 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f8734955f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) mQuery.c:134 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 166)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 166 137 155 23 66 "" [1 uses])
(note 155 166 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 149 155 150 23 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:136 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 150 149 151)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 151 150 156 24 65 "" [1 uses])
(note 156 151 152 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 152 156 0 24 (use (reg/i:XF 8 st)) mQuery.c:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function get_configuration (get_configuration, funcdef_no=6, decl_uid=1766, cgraph_uid=6)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 160:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 164:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 172:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 176:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=0,overall=8,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) f  (1) ?r  (2) m {*floatsixf2_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) f {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =m {x86_fnstcw_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 184:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rmn {*iorhi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=9,losers=1,rld_nregs=0
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) ?r  (1) f  (2) m  (3) m  (4) m {fix_truncsi_i387_with_temp}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 13
changing reg in insn 18
changing reg in insn 147
changing reg in insn 147
changing reg in insn 21
changing reg in insn 26
changing reg in insn 28
changing reg in insn 33
changing reg in insn 35
changing reg in insn 40
changing reg in insn 42
changing reg in insn 47
changing reg in insn 148
changing reg in insn 148
changing reg in insn 50
changing reg in insn 55
changing reg in insn 149
changing reg in insn 149
changing reg in insn 58
changing reg in insn 63
changing reg in insn 65
changing reg in insn 70
changing reg in insn 150
changing reg in insn 150
changing reg in insn 73
changing reg in insn 78
changing reg in insn 80
changing reg in insn 85
changing reg in insn 87
changing reg in insn 92
changing reg in insn 151
changing reg in insn 151
changing reg in insn 95
changing reg in insn 100
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 104
changing reg in insn 109
changing reg in insn 111
changing reg in insn 116
changing reg in insn 118
changing reg in insn 123
changing reg in insn 154
changing reg in insn 154
changing reg in insn 126
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 137
changing reg in insn 141
changing reg in insn 7
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 132
changing reg in insn 133
changing reg in insn 161
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 165
changing reg in insn 164
changing reg in insn 166
changing reg in insn 165
changing reg in insn 169
changing reg in insn 168
changing reg in insn 170
changing reg in insn 169
changing reg in insn 173
changing reg in insn 172
changing reg in insn 174
changing reg in insn 173
changing reg in insn 177
changing reg in insn 176
changing reg in insn 178
changing reg in insn 177
changing reg in insn 181
changing reg in insn 180
changing reg in insn 182
changing reg in insn 181
changing reg in insn 185
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 130.


get_configuration

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 19[fpcr]
;;  ref usage 	r0={70d,53u} r1={24d,6u} r2={18d} r4={35d,18u} r5={35d,18u} r6={1d,81u} r7={1d,19u} r8={35d,35u} r9={17d} r10={17d} r11={17d} r12={17d} r13={17d} r14={17d} r15={17d} r17={24d} r18={17d} r19={17d,7u} r20={1d,1u} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={18d} r38={18d} r39={17d} r40={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} 
;;    total ref usage 1121{883d,238u,0e} in 161{144 regular + 17 call} insns.
(note 1 0 155 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 121 122 123 124 125 126 127
(note 155 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 155 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])
        (reg:DI 5 di [ config_file ])) mQuery.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ config_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])
        (reg:DI 4 si [ config ])) mQuery.c:137 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ config ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f873478a5f0 *.LC16>)) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) mQuery.c:139 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [86])
        (nil)))
(call_insn 10 9 11 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:139 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 11 10 12 2 (set (reg:XF 8 st [orig:59 D.3717 ] [59])
        (reg:XF 8 st)) mQuery.c:139 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:139 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [87])
                (const_int 16 [0x10])) [0 config_3(D)->max_ang+0 S16 A128])
        (reg:XF 8 st [orig:59 D.3717 ] [59])) mQuery.c:139 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:59 D.3717 ] [59])
            (nil))))
(insn 14 13 15 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f873478a688 *.LC17>)) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) mQuery.c:140 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(call_insn 17 16 18 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:140 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 18 17 159 2 (set (reg:XF 8 st [orig:60 D.3717 ] [60])
        (reg:XF 8 st)) mQuery.c:140 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 159 18 160 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:140 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 160 159 161 2 (set (reg:HI 0 ax [121])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:140 90 {*movhi_internal}
     (nil))
(insn 161 160 162 2 (parallel [
            (set (reg:HI 0 ax [121])
                (ior:HI (reg:HI 0 ax [121])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:140 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 162 161 147 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [121])) mQuery.c:140 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [121])
        (nil)))
(insn 147 162 20 2 (parallel [
            (set (reg:SI 1 dx [orig:61 D.3718 ] [61])
                (fix:SI (reg:XF 8 st [orig:60 D.3717 ] [60])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:140 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:60 D.3717 ] [60])
        (nil)))
(insn 20 147 21 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:140 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [0 config_3(D)->nsim+0 S4 A128])
        (reg:SI 1 dx [orig:61 D.3718 ] [61])) mQuery.c:140 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:61 D.3718 ] [61])
            (nil))))
(insn 22 21 23 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f873478a720 *.LC18>)) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) mQuery.c:141 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [90])
        (nil)))
(call_insn 25 24 26 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:141 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 26 25 27 2 (set (reg:XF 8 st [orig:62 D.3717 ] [62])
        (reg:XF 8 st)) mQuery.c:141 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:141 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [91])
                (const_int 64 [0x40])) [0 config_3(D)->direct_thr+0 S16 A128])
        (reg:XF 8 st [orig:62 D.3717 ] [62])) mQuery.c:141 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [91])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:62 D.3717 ] [62])
            (nil))))
(insn 29 28 30 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f873478a7b8 *.LC19>)) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) mQuery.c:142 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(call_insn 32 31 33 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:142 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 33 32 34 2 (set (reg:XF 8 st [orig:63 D.3717 ] [63])
        (reg:XF 8 st)) mQuery.c:142 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:142 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [93])
                (const_int 80 [0x50])) [0 config_3(D)->xdelay+0 S16 A128])
        (reg:XF 8 st [orig:63 D.3717 ] [63])) mQuery.c:142 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:63 D.3717 ] [63])
            (nil))))
(insn 36 35 37 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f873478a850 *.LC20>)) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) mQuery.c:143 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [94])
        (nil)))
(call_insn 39 38 40 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:143 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 40 39 41 2 (set (reg:XF 8 st [orig:64 D.3717 ] [64])
        (reg:XF 8 st)) mQuery.c:143 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:143 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [95])
                (const_int 96 [0x60])) [0 config_3(D)->pdelay+0 S16 A128])
        (reg:XF 8 st [orig:64 D.3717 ] [64])) mQuery.c:143 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [95])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:64 D.3717 ] [64])
            (nil))))
(insn 43 42 44 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f873478a8e8 *.LC21>)) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) mQuery.c:144 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(call_insn 46 45 47 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:144 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 47 46 163 2 (set (reg:XF 8 st [orig:65 D.3717 ] [65])
        (reg:XF 8 st)) mQuery.c:144 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 163 47 164 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:144 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 164 163 165 2 (set (reg:HI 0 ax [122])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:144 90 {*movhi_internal}
     (nil))
(insn 165 164 166 2 (parallel [
            (set (reg:HI 0 ax [122])
                (ior:HI (reg:HI 0 ax [122])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:144 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 166 165 148 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [122])) mQuery.c:144 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [122])
        (nil)))
(insn 148 166 49 2 (parallel [
            (set (reg:SI 1 dx [orig:66 D.3718 ] [66])
                (fix:SI (reg:XF 8 st [orig:65 D.3717 ] [65])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:144 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:65 D.3717 ] [65])
        (nil)))
(insn 49 148 50 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:144 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 112 [0x70])) [0 config_3(D)->laplacian_vel+0 S4 A128])
        (reg:SI 1 dx [orig:66 D.3718 ] [66])) mQuery.c:144 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:66 D.3718 ] [66])
            (nil))))
(insn 51 50 52 2 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f873478a980 *.LC22>)) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) mQuery.c:145 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(call_insn 54 53 55 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:145 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 55 54 167 2 (set (reg:XF 8 st [orig:67 D.3717 ] [67])
        (reg:XF 8 st)) mQuery.c:145 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 167 55 168 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:145 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 168 167 169 2 (set (reg:HI 0 ax [123])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:145 90 {*movhi_internal}
     (nil))
(insn 169 168 170 2 (parallel [
            (set (reg:HI 0 ax [123])
                (ior:HI (reg:HI 0 ax [123])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:145 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 170 169 149 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [123])) mQuery.c:145 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [123])
        (nil)))
(insn 149 170 57 2 (parallel [
            (set (reg:SI 1 dx [orig:68 D.3718 ] [68])
                (fix:SI (reg:XF 8 st [orig:67 D.3717 ] [67])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:145 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:67 D.3717 ] [67])
        (nil)))
(insn 57 149 58 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:145 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 116 [0x74])) [0 config_3(D)->Nm_shock+0 S4 A32])
        (reg:SI 1 dx [orig:68 D.3718 ] [68])) mQuery.c:145 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:68 D.3718 ] [68])
            (nil))))
(insn 59 58 60 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f873478aa18 *.LC23>)) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) mQuery.c:146 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(call_insn 62 61 63 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:146 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 63 62 64 2 (set (reg:XF 8 st [orig:69 D.3717 ] [69])
        (reg:XF 8 st)) mQuery.c:146 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:146 87 {*movdi_internal_rex64}
     (nil))
(insn 65 64 66 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [101])
                (const_int 144 [0x90])) [0 config_3(D)->radius+0 S16 A128])
        (reg:XF 8 st [orig:69 D.3717 ] [69])) mQuery.c:146 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [101])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:69 D.3717 ] [69])
            (nil))))
(insn 66 65 67 2 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 67 66 68 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f873478aab0 *.LC24>)) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 68 67 69 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) mQuery.c:147 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(call_insn 69 68 70 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:147 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 70 69 171 2 (set (reg:XF 8 st [orig:70 D.3717 ] [70])
        (reg:XF 8 st)) mQuery.c:147 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 171 70 172 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:147 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 172 171 173 2 (set (reg:HI 0 ax [124])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:147 90 {*movhi_internal}
     (nil))
(insn 173 172 174 2 (parallel [
            (set (reg:HI 0 ax [124])
                (ior:HI (reg:HI 0 ax [124])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:147 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 174 173 150 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [124])) mQuery.c:147 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [124])
        (nil)))
(insn 150 174 72 2 (parallel [
            (set (reg:SI 1 dx [orig:71 D.3718 ] [71])
                (fix:SI (reg:XF 8 st [orig:70 D.3717 ] [70])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:147 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:70 D.3717 ] [70])
        (nil)))
(insn 72 150 73 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:147 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 192 [0xc0])) [0 config_3(D)->t_w+0 S4 A128])
        (reg:SI 1 dx [orig:71 D.3718 ] [71])) mQuery.c:147 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [103])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:71 D.3718 ] [71])
            (nil))))
(insn 74 73 75 2 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f873478ab48 *.LC25>)) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) mQuery.c:148 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [104])
        (nil)))
(call_insn 77 76 78 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:148 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 78 77 79 2 (set (reg:XF 8 st [orig:72 D.3717 ] [72])
        (reg:XF 8 st)) mQuery.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:148 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [105])
                (const_int 208 [0xd0])) [0 config_3(D)->t_i+0 S16 A128])
        (reg:XF 8 st [orig:72 D.3717 ] [72])) mQuery.c:148 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [105])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:72 D.3717 ] [72])
            (nil))))
(insn 81 80 82 2 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f873478abe0 *.LC26>)) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 83 82 84 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) mQuery.c:149 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(call_insn 84 83 85 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:149 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 85 84 86 2 (set (reg:XF 8 st [orig:73 D.3717 ] [73])
        (reg:XF 8 st)) mQuery.c:149 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 86 85 87 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:149 87 {*movdi_internal_rex64}
     (nil))
(insn 87 86 88 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [107])
                (const_int 224 [0xe0])) [0 config_3(D)->t_r+0 S16 A128])
        (reg:XF 8 st [orig:73 D.3717 ] [73])) mQuery.c:149 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [107])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:73 D.3717 ] [73])
            (nil))))
(insn 88 87 89 2 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 89 88 90 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f873478ac78 *.LC27>)) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) mQuery.c:150 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [108])
        (nil)))
(call_insn 91 90 92 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:150 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 92 91 175 2 (set (reg:XF 8 st [orig:74 D.3717 ] [74])
        (reg:XF 8 st)) mQuery.c:150 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 175 92 176 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:150 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 176 175 177 2 (set (reg:HI 0 ax [125])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:150 90 {*movhi_internal}
     (nil))
(insn 177 176 178 2 (parallel [
            (set (reg:HI 0 ax [125])
                (ior:HI (reg:HI 0 ax [125])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:150 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 178 177 151 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [125])) mQuery.c:150 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [125])
        (nil)))
(insn 151 178 94 2 (parallel [
            (set (reg:SI 1 dx [orig:75 D.3718 ] [75])
                (fix:SI (reg:XF 8 st [orig:74 D.3717 ] [74])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:150 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:74 D.3717 ] [74])
        (nil)))
(insn 94 151 95 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:150 87 {*movdi_internal_rex64}
     (nil))
(insn 95 94 96 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 240 [0xf0])) [0 config_3(D)->shortest_path+0 S4 A128])
        (reg:SI 1 dx [orig:75 D.3718 ] [75])) mQuery.c:150 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [109])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:75 D.3718 ] [75])
            (nil))))
(insn 96 95 97 2 (set (reg:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f873478ad10 *.LC28>)) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) mQuery.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(call_insn 99 98 100 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:151 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 100 99 179 2 (set (reg:XF 8 st [orig:76 D.3717 ] [76])
        (reg:XF 8 st)) mQuery.c:151 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 179 100 180 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:151 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 180 179 181 2 (set (reg:HI 0 ax [126])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:151 90 {*movhi_internal}
     (nil))
(insn 181 180 182 2 (parallel [
            (set (reg:HI 0 ax [126])
                (ior:HI (reg:HI 0 ax [126])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:151 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 182 181 152 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [126])) mQuery.c:151 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [126])
        (nil)))
(insn 152 182 153 2 (parallel [
            (set (reg:SI 0 ax [orig:77 D.3718 ] [77])
                (fix:SI (reg:XF 8 st [orig:76 D.3717 ] [76])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:151 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:76 D.3717 ] [76])
        (nil)))
(insn 153 152 103 2 (parallel [
            (set (reg:XF 8 st [orig:78 D.3717 ] [78])
                (float:XF (reg:SI 0 ax [orig:77 D.3718 ] [77])))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:151 250 {*floatsixf2_i387_with_temp}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 D.3718 ] [77])
        (nil)))
(insn 103 153 104 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 104 103 105 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [111])
                (const_int 256 [0x100])) [0 config_3(D)->d_thr+0 S16 A128])
        (reg:XF 8 st [orig:78 D.3717 ] [78])) mQuery.c:151 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [111])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:78 D.3717 ] [78])
            (nil))))
(insn 105 104 106 2 (set (reg:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 106 105 107 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f873478ada8 *.LC29>)) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 107 106 108 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) mQuery.c:152 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(call_insn 108 107 109 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:152 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 109 108 110 2 (set (reg:XF 8 st [orig:79 D.3717 ] [79])
        (reg:XF 8 st)) mQuery.c:152 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 110 109 111 2 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:152 87 {*movdi_internal_rex64}
     (nil))
(insn 111 110 112 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [113])
                (const_int 160 [0xa0])) [0 config_3(D)->f_lvl+0 S16 A128])
        (reg:XF 8 st [orig:79 D.3717 ] [79])) mQuery.c:152 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [113])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.3717 ] [79])
            (nil))))
(insn 112 111 113 2 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 113 112 114 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f873478ae40 *.LC30>)) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 114 113 115 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) mQuery.c:153 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(call_insn 115 114 116 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:153 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 116 115 117 2 (set (reg:XF 8 st [orig:80 D.3717 ] [80])
        (reg:XF 8 st)) mQuery.c:153 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [115])
                (const_int 176 [0xb0])) [0 config_3(D)->f_lvl+16 S16 A128])
        (reg:XF 8 st [orig:80 D.3717 ] [80])) mQuery.c:153 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [115])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:80 D.3717 ] [80])
            (nil))))
(insn 119 118 120 2 (set (reg:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 120 119 121 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f873478aed8 *.LC31>)) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 121 120 122 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [116])) mQuery.c:154 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [116])
        (nil)))
(call_insn 122 121 123 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:154 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 123 122 183 2 (set (reg:XF 8 st [orig:81 D.3717 ] [81])
        (reg:XF 8 st)) mQuery.c:154 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 183 123 184 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) mQuery.c:154 199 {x86_fnstcw_1}
     (expr_list:REG_DEAD (reg:HI 19 fpcr)
        (nil)))
(insn 184 183 185 2 (set (reg:HI 0 ax [127])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0  S2 A16])) mQuery.c:154 90 {*movhi_internal}
     (nil))
(insn 185 184 186 2 (parallel [
            (set (reg:HI 0 ax [127])
                (ior:HI (reg:HI 0 ax [127])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:154 410 {*iorhi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 186 185 154 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0  S2 A16])
        (reg:HI 0 ax [127])) mQuery.c:154 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 0 ax [127])
        (nil)))
(insn 154 186 125 2 (parallel [
            (set (reg:SI 1 dx [orig:82 D.3718 ] [82])
                (fix:SI (reg:XF 8 st [orig:81 D.3717 ] [81])))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -18 [0xffffffffffffffee])) [0  S2 A16]))
            (use (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0  S2 A16]))
            (clobber (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0  S4 A32]))
        ]) mQuery.c:154 198 {fix_truncsi_i387_with_temp}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.3717 ] [81])
        (nil)))
(insn 125 154 126 2 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:154 87 {*movdi_internal_rex64}
     (nil))
(insn 126 125 127 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 272 [0x110])) [0 config_3(D)->geom+0 S4 A128])
        (reg:SI 1 dx [orig:82 D.3718 ] [82])) mQuery.c:154 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (expr_list:REG_DEAD (reg:SI 1 dx [orig:82 D.3718 ] [82])
            (nil))))
(insn 127 126 128 2 (set (reg:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 config_file+0 S8 A64])) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 128 127 129 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f8734794000 *.LC32>)) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 129 128 130 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) mQuery.c:155 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [118])
        (nil)))
(call_insn 130 129 131 2 (set (reg:XF 8 st)
        (call (mem:QI (symbol_ref:DI ("_find_value_string") [flags 0x3]  <function_decl 0x7f87346c5200 _find_value_string>) [0 _find_value_string S1 A8])
            (const_int 0 [0]))) mQuery.c:155 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 131 130 132 2 (set (reg:XF 8 st [orig:83 D.3717 ] [83])
        (reg:XF 8 st)) mQuery.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st)
        (nil)))
(insn 132 131 133 2 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 config+0 S8 A64])) mQuery.c:155 87 {*movdi_internal_rex64}
     (nil))
(insn 133 132 134 2 (set (mem/j:XF (plus:DI (reg/f:DI 0 ax [119])
                (const_int 288 [0x120])) [0 config_3(D)->sig_V+0 S16 A128])
        (reg:XF 8 st [orig:83 D.3717 ] [83])) mQuery.c:155 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [119])
        (expr_list:REG_DEAD (reg:XF 8 st [orig:83 D.3717 ] [83])
            (nil))))
(insn 134 133 137 2 (set (reg:SI 0 ax [orig:84 D.3718 ] [84])
        (const_int 1 [0x1])) mQuery.c:156 89 {*movsi_internal}
     (nil))
(insn 137 134 156 2 (set (reg:SI 0 ax [orig:85 <retval> ] [85])
        (reg:SI 0 ax [orig:84 D.3718 ] [84])) mQuery.c:156 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.3718 ] [84])
        (nil)))
(note 156 137 141 2 NOTE_INSN_DELETED)
(insn 141 156 144 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:85 <retval> ] [85])) mQuery.c:157 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:85 <retval> ] [85])
        (nil)))
(insn 144 141 0 2 (use (reg/i:SI 0 ax)) mQuery.c:157 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_boundary (get_boundary, funcdef_no=7, decl_uid=1763, cgraph_uid=7)

      Creating newreg=140
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
deleting insn with uid = 5.
      Creating newreg=141
Removing SCRATCH in insn #194 (nop 3)
rescanning insn with uid = 194.
deleting insn with uid = 194.

********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=50096, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=50064, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r140
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 29:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 72:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 79:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 90:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) qm  (1) qn {*cmpqi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 111:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 114:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) f  (1) f {*cmpiuxf_i387}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =f  (1) fm {*movxf_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) f  (1) f {*cmpiuxf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r141
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 67 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 9
EBB 10
EBB 11
EBB 12
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 78 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22

********** Pseudo live ranges #1: **********

  BB 21
   Insn 196: point = 0
  BB 22
   Insn 199: point = 0
  BB 20
   Insn 195: point = 0
   Insn 194: point = 0
   Insn 191: point = 1
   Insn 187: point = 2
   Insn 184: point = 4
  BB 19
   Insn 181: point = 5
   Insn 180: point = 5
  BB 18
   Insn 174: point = 5
   Insn 173: point = 5
  BB 17
   Insn 172: point = 7
   Insn 171: point = 7
   Insn 170: point = 7
   Insn 169: point = 9
   Insn 168: point = 11
   Insn 167: point = 13
   Insn 166: point = 15
   Insn 165: point = 17
   Insn 164: point = 19
   Insn 163: point = 21
   Insn 162: point = 23
   Insn 161: point = 24
   Insn 160: point = 26
   Insn 159: point = 27
   Insn 158: point = 29
   Insn 157: point = 31
   Insn 156: point = 33
   Insn 155: point = 35
  BB 16
   Insn 153: point = 36
   Insn 152: point = 36
  BB 15
   Insn 151: point = 38
   Insn 150: point = 38
   Insn 149: point = 38
   Insn 148: point = 40
   Insn 147: point = 42
   Insn 146: point = 44
   Insn 145: point = 46
   Insn 144: point = 48
   Insn 143: point = 50
   Insn 142: point = 52
   Insn 141: point = 53
   Insn 140: point = 55
   Insn 139: point = 56
   Insn 138: point = 58
   Insn 137: point = 60
   Insn 136: point = 62
   Insn 135: point = 63
   Insn 134: point = 63
   Insn 133: point = 64
  BB 13
   Insn 125: point = 65
   Insn 124: point = 65
   Insn 123: point = 66
   Insn 122: point = 67
   Insn 121: point = 67
   Insn 120: point = 68
   Insn 119: point = 68
   Insn 118: point = 69
   Insn 117: point = 70
  BB 7
   Insn 210: point = 71
   Insn 58: point = 71
   Insn 57: point = 71
   Insn 56: point = 72
   Insn 55: point = 73
   Insn 54: point = 74
   Insn 53: point = 74
   Insn 52: point = 75
   Insn 51: point = 75
   Insn 50: point = 76
   Insn 49: point = 77
   Insn 48: point = 78
   Insn 47: point = 78
   Insn 46: point = 79
   Insn 45: point = 79
   Insn 44: point = 80
   Insn 43: point = 80
   Insn 42: point = 81
   Insn 41: point = 82
   Insn 40: point = 83
   Insn 39: point = 84
  BB 6
   Insn 37: point = 85
   Insn 36: point = 85
   Insn 34: point = 86
   Insn 33: point = 87
   Insn 32: point = 87
   Insn 31: point = 88
   Insn 30: point = 88
   Insn 29: point = 89
   Insn 28: point = 90
  BB 4
   Insn 208: point = 91
   Insn 21: point = 91
  BB 3
   Insn 18: point = 91
   Insn 17: point = 91
  BB 2
   Insn 15: point = 91
   Insn 14: point = 91
   Insn 13: point = 91
   Insn 12: point = 92
   Insn 11: point = 93
   Insn 10: point = 93
   Insn 9: point = 94
   Insn 8: point = 94
   Insn 5: point = 95
   Insn 3: point = 97
   Insn 2: point = 97
  BB 5
   Insn 25: point = 97
  BB 12
   Insn 114: point = 97
   Insn 113: point = 97
   Insn 112: point = 98
   Insn 111: point = 100
   Insn 110: point = 101
   Insn 109: point = 101
   Insn 108: point = 102
   Insn 107: point = 104
   Insn 106: point = 106
   Insn 105: point = 107
   Insn 104: point = 108
   Insn 103: point = 108
   Insn 102: point = 110
   Insn 101: point = 112
   Insn 100: point = 114
   Insn 99: point = 116
   Insn 98: point = 118
   Insn 97: point = 119
   Insn 96: point = 121
  BB 10
   Insn 86: point = 122
   Insn 85: point = 122
   Insn 84: point = 123
   Insn 83: point = 125
   Insn 82: point = 127
  BB 8
   Insn 212: point = 128
   Insn 75: point = 128
   Insn 74: point = 128
   Insn 73: point = 129
   Insn 72: point = 131
   Insn 71: point = 132
   Insn 70: point = 132
   Insn 69: point = 133
   Insn 68: point = 134
   Insn 67: point = 136
   Insn 66: point = 138
   Insn 65: point = 140
   Insn 64: point = 142
   Insn 63: point = 143
   Insn 62: point = 145
  BB 14
   Insn 130: point = 146
   Insn 129: point = 146
   Insn 128: point = 147
  BB 9
   Insn 79: point = 148
  BB 11
   Insn 93: point = 148
   Insn 92: point = 148
   Insn 90: point = 149
   Insn 89: point = 151
   Insn 88: point = 153
 r59: [85..86]
 r60: [71..73]
 r61: [65..66]
 r62: [137..143]
 r63: [139..140]
 r64: [137..138]
 r65: [135..136]
 r66: [128..134]
 r67: [130..131]
 r68: [128..129]
 r69: [122..123]
 r70: [148..149]
 r71: [113..119]
 r72: [115..116]
 r73: [113..114]
 r74: [111..112]
 r75: [109..110]
 r76: [97..108]
 r77: [101..102]
 r78: [99..100]
 r79: [97..98]
 r80: [59..60]
 r81: [57..58]
 r82: [36..56]
 r83: [43..53]
 r84: [49..50]
 r85: [47..48]
 r86: [45..46]
 r87: [43..44]
 r88: [41..42]
 r89: [39..40]
 r90: [36..38]
 r91: [32..33]
 r92: [30..31]
 r93: [28..29]
 r94: [5..27]
 r95: [14..24]
 r96: [20..21]
 r97: [18..19]
 r98: [16..17]
 r99: [14..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [5..7]
 r104: [3..4]
 r105: [1..2]
 r106: [93..94]
 r107: [91..92]
 r108: [88..90]
 r109: [87..89]
 r110: [82..84]
 r111: [82..83]
 r112: [80..81]
 r113: [78..79]
 r114: [76..77]
 r115: [74..75]
 r116: [71..72]
 r117: [144..145]
 r118: [141..142]
 r119: [132..133]
 r120: [124..125]
 r121: [126..127]
 r122: [150..151]
 r123: [152..153]
 r124: [120..121]
 r125: [117..118]
 r126: [103..107]
 r127: [103..104]
 r128: [105..106]
 r129: [68..70]
 r130: [67..69]
 r131: [146..147]
 r132: [63..64]
 r133: [61..62]
 r134: [54..55]
 r135: [51..52]
 r136: [34..35]
 r137: [25..26]
 r138: [22..23]
 r140: [95..96]
 r141: [0..0]
Compressing live ranges: from 154 to 137 - 88%
Ranges after the compression:
 r59: [75..76]
 r60: [63..64]
 r61: [59..60]
 r62: [121..126]
 r63: [123..124]
 r64: [121..122]
 r65: [119..120]
 r66: [113..118]
 r67: [115..116]
 r68: [113..114]
 r69: [107..108]
 r70: [131..132]
 r71: [99..104]
 r72: [101..102]
 r73: [99..100]
 r74: [97..98]
 r75: [95..96]
 r76: [85..94]
 r77: [89..90]
 r78: [87..88]
 r79: [85..86]
 r80: [53..54]
 r81: [51..52]
 r82: [33..50]
 r83: [39..48]
 r84: [45..46]
 r85: [43..44]
 r86: [41..42]
 r87: [39..40]
 r88: [37..38]
 r89: [35..36]
 r90: [33..34]
 r91: [29..30]
 r92: [27..28]
 r93: [25..26]
 r94: [5..24]
 r95: [13..22]
 r96: [19..20]
 r97: [17..18]
 r98: [15..16]
 r99: [13..14]
 r100: [11..12]
 r101: [9..10]
 r102: [7..8]
 r103: [5..6]
 r104: [3..4]
 r105: [1..2]
 r106: [81..82]
 r107: [79..80]
 r108: [77..78]
 r109: [77..78]
 r110: [73..74]
 r111: [73..74]
 r112: [71..72]
 r113: [69..70]
 r114: [67..68]
 r115: [65..66]
 r116: [63..64]
 r117: [127..128]
 r118: [125..126]
 r119: [117..118]
 r120: [109..110]
 r121: [111..112]
 r122: [133..134]
 r123: [135..136]
 r124: [105..106]
 r125: [103..104]
 r126: [91..94]
 r127: [91..92]
 r128: [93..94]
 r129: [61..62]
 r130: [61..62]
 r131: [129..130]
 r132: [57..58]
 r133: [55..56]
 r134: [49..50]
 r135: [47..48]
 r136: [31..32]
 r137: [23..24]
 r138: [21..22]
 r140: [83..84]
 r141: [0..0]
	 Assigning to 140 (cl=INDEX_REGS, orig=140, freq=1, tfirst=140, tfreq=1)...
	   Assign 0 to reload r140 (freq=1)
	 Assigning to 141 (cl=INDEX_REGS, orig=141, freq=1, tfirst=141, tfreq=1)...
	   Assign 2 to reload r141 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 67	 78
Changing spilled pseudos to memory in insn #72
Changing spilled pseudos to memory in insn #73
Changing spilled pseudos to memory in insn #111
Changing spilled pseudos to memory in insn #112

********** Local #3: **********

Reusing alternative 0 for insn #112
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #111
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 111:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #73
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #72
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 72:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=50112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=50080, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 34
changing reg in insn 36
changing reg in insn 55
changing reg in insn 57
changing reg in insn 123
changing reg in insn 124
changing reg in insn 63
changing reg in insn 67
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 113
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 113
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 152
changing reg in insn 150
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 152
changing reg in insn 150
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 173
changing reg in insn 171
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 173
changing reg in insn 171
changing reg in insn 184
changing reg in insn 187
changing reg in insn 187
changing reg in insn 191
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 32
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 83
changing reg in insn 84
changing reg in insn 82
changing reg in insn 83
changing reg in insn 89
changing reg in insn 90
changing reg in insn 88
changing reg in insn 89
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 105
changing reg in insn 107
changing reg in insn 106
changing reg in insn 107
changing reg in insn 117
changing reg in insn 119
changing reg in insn 118
changing reg in insn 121
changing reg in insn 128
changing reg in insn 129
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 155
changing reg in insn 156
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 5
changing reg in insn 194
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 196.


get_boundary

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 9[st(1)] 17[flags] 21[xmm0]
;;  ref usage 	r0={72d,64u} r1={28d,15u} r2={14d} r3={2d,2u} r4={18d,6u} r5={24d,12u} r6={1d,75u} r7={1d,34u} r8={16d,6u} r9={14d,4u} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={46d,11u} r18={12d} r19={12d} r20={1d,1u} r21={13d,2u} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} 
;;    total ref usage 911{679d,232u,0e} in 153{141 regular + 12 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 106 107
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50072 [0xffffffffffff3c68])) [0 bound_file+0 S8 A64])
        (reg:DI 5 di [ bound_file ])) mQuery.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ bound_file ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])
        (reg:DI 4 si [ config ])) mQuery.c:159 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ config ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.3745+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [140])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:159 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [140])
        (nil)))
(insn 8 5 9 2 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50072 [0xffffffffffff3c68])) [0 bound_file+0 S8 A64])) mQuery.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [106])
        (nil)))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:160 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 0 ax [107])
        (reg:DI 0 ax)) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [107])) mQuery.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:162 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) mQuery.c:162 612 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f8734794980 *.LC33>)) mQuery.c:162 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:162 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 19 18 20 4 70 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 208 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32])
        (const_int 0 [0])) mQuery.c:165 89 {*movsi_internal}
     (nil))
(jump_insn 208 21 209 4 (set (pc)
        (label_ref 26)) mQuery.c:165 650 {jump}
     (nil)
 -> 26)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 209 208 35)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 35 209 24 5 72 "" [1 uses])
(note 24 35 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:165 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 108 109
(code_label 26 25 27 6 71 "" [1 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:DI 1 dx [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:165 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg:DI 0 ax [109])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:165 274 {*adddi_1}
     (nil))
(insn 30 29 31 6 (set (reg:DI 1 dx)
        (reg:DI 1 dx [108])) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [108])
        (nil)))
(insn 31 30 32 6 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:165 89 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [109])
        (nil)))
(call_insn 33 32 34 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:165 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 34 33 36 6 (set (reg/f:DI 0 ax [orig:59 D.3736 ] [59])
        (reg:DI 0 ax)) mQuery.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 36 34 37 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:59 D.3736 ] [59])
            (const_int 0 [0]))) mQuery.c:165 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.3736 ] [59])
        (nil)))
(jump_insn 37 36 38 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) mQuery.c:165 612 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 110 111 112 113 114 115 116
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:167 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 7 (set (reg:SI 1 dx [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32])) mQuery.c:167 89 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (set (mem/j:SI (reg/f:DI 0 ax [110]) [0 config_9(D)->Nbound+0 S4 A128])
        (reg:SI 1 dx [111])) mQuery.c:167 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [111])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [110])
            (nil))))
(insn 42 41 43 7 (set (reg:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:168 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) mQuery.c:168 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(call_insn 44 43 45 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:168 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 7 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50072 [0xffffffffffff3c68])) [0 bound_file+0 S8 A64])) mQuery.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:170 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [113])
        (nil)))
(call_insn 48 47 49 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:170 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 49 48 50 7 (set (reg:DI 0 ax [114])
        (reg:DI 0 ax)) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 50 49 51 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [114])) mQuery.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [114])
        (nil)))
(insn 51 50 52 7 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32])) mQuery.c:172 89 {*movsi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mQuery.c:172 89 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [115])) mQuery.c:172 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [115])
        (nil)))
(call_insn 54 53 55 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:172 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 55 54 56 7 (set (reg/f:DI 0 ax [orig:60 D.3737 ] [60])
        (reg:DI 0 ax)) mQuery.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 56 55 57 7 (set (reg/f:DI 1 dx [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:172 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [116])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])
        (reg/f:DI 0 ax [orig:60 D.3737 ] [60])) mQuery.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [116])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3737 ] [60])
            (nil))))
(insn 58 57 210 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(jump_insn 210 58 211 7 (set (pc)
        (label_ref 115)) mQuery.c:173 650 {jump}
     (nil)
 -> 115)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 211 210 127)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 117 118 119
(code_label 127 211 61 8 78 "" [1 uses])
(note 61 127 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 0 ax [orig:62 D.3737 ] [62])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [117])
        (nil)))
(insn 64 63 65 8 (set (reg:SI 1 dx [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])) mQuery.c:174 89 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 1 dx [orig:63 D.3738 ] [63])
        (sign_extend:DI (reg:SI 1 dx [118]))) mQuery.c:174 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [118])
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 1 dx [orig:64 D.3738 ] [64])
                (ashift:DI (reg:DI 1 dx [orig:63 D.3738 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.3738 ] [63])
        (nil)))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.3737 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:62 D.3737 ] [62])
                    (reg:DI 1 dx [orig:64 D.3738 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.3738 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.3737 ] [62])
            (nil))))
(insn 68 67 69 8 (set (reg/f:DI 3 bx [orig:66 D.3739 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.3737 ] [65]) [0 *_17+0 S8 A64])) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.3737 ] [65])
        (nil)))
(insn 69 68 70 8 (parallel [
            (set (reg:DI 0 ax [119])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:174 274 {*adddi_1}
     (nil))
(insn 70 69 71 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [119])) mQuery.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [119])
        (nil)))
(call_insn/i 71 70 72 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:174 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 72 71 73 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:174 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 73 72 74 8 (set (reg:XF 8 st [orig:68 D.3741 ] [68])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64]))) mQuery.c:174 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.3740 ])
        (nil)))
(insn 74 73 75 8 (set (mem:XF (reg/f:DI 3 bx [orig:66 D.3739 ] [66]) [0 *_18+0 S16 A128])
        (reg:XF 8 st [orig:68 D.3741 ] [68])) mQuery.c:174 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.3741 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:66 D.3739 ] [66])
            (nil))))
(insn 75 74 212 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(jump_insn 212 75 213 8 (set (pc)
        (label_ref 80)) mQuery.c:175 650 {jump}
     (nil)
 -> 80)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 213 212 91)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 91 213 78 9 76 "" [1 uses])
(note 78 91 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:175 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 120 121
(code_label 80 79 81 10 74 "" [1 uses])
(note 81 80 82 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 10 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:DI 0 ax [120])
        (sign_extend:DI (reg:SI 0 ax [121]))) mQuery.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [121])
        (nil)))
(insn 84 83 85 10 (set (reg:QI 0 ax [orig:69 D.3742 ] [69])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [120]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:175 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [120])
        (nil)))
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:69 D.3742 ] [69])
            (const_int 9 [0x9]))) mQuery.c:175 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:69 D.3742 ] [69])
        (nil)))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mQuery.c:175 612 {*jcc_1}
     (nil)
 -> 94)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 122 123
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg:SI 0 ax [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])) mQuery.c:175 89 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg:DI 0 ax [122])
        (sign_extend:DI (reg:SI 0 ax [123]))) mQuery.c:175 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [123])
        (nil)))
(insn 90 89 92 11 (set (reg:QI 0 ax [orig:70 D.3742 ] [70])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [122]))
                (const_int -50032 [0xffffffffffff3c90])) [0 c S1 A8])) mQuery.c:175 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [122])
        (nil)))
(insn 92 90 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:70 D.3742 ] [70])
            (const_int 32 [0x20]))) mQuery.c:175 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:70 D.3742 ] [70])
        (nil)))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) mQuery.c:175 612 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       9
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71 72 73 74 75 76 77 78 79 124 125 126 127 128
(code_label 94 93 95 12 75 "" [1 uses])
(note 95 94 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 12 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 12 (set (reg/f:DI 0 ax [orig:71 D.3737 ] [71])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [124])
        (nil)))
(insn 98 97 99 12 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])) mQuery.c:176 89 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg:DI 1 dx [orig:72 D.3738 ] [72])
        (sign_extend:DI (reg:SI 1 dx [125]))) mQuery.c:176 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [125])
        (nil)))
(insn 100 99 101 12 (parallel [
            (set (reg:DI 1 dx [orig:73 D.3738 ] [73])
                (ashift:DI (reg:DI 1 dx [orig:72 D.3738 ] [72])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.3738 ] [72])
        (nil)))
(insn 101 100 102 12 (parallel [
            (set (reg/f:DI 0 ax [orig:74 D.3737 ] [74])
                (plus:DI (reg/f:DI 0 ax [orig:71 D.3737 ] [71])
                    (reg:DI 1 dx [orig:73 D.3738 ] [73])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:73 D.3738 ] [73])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.3737 ] [71])
            (nil))))
(insn 102 101 103 12 (set (reg/f:DI 0 ax [orig:75 D.3739 ] [75])
        (mem/f:DI (reg/f:DI 0 ax [orig:74 D.3737 ] [74]) [0 *_28+0 S8 A64])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:74 D.3737 ] [74])
        (nil)))
(insn 103 102 104 12 (parallel [
            (set (reg/f:DI 3 bx [orig:76 D.3739 ] [76])
                (plus:DI (reg/f:DI 0 ax [orig:75 D.3739 ] [75])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.3739 ] [75])
        (nil)))
(insn 104 103 105 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 273 {*addsi_1}
     (nil))
(insn 105 104 106 12 (parallel [
            (set (reg:DI 1 dx [126])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (nil))
(insn 106 105 107 12 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50044 [0xffffffffffff3c84])) [0 j+0 S4 A32])) mQuery.c:176 89 {*movsi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:DI 0 ax [127])
        (sign_extend:DI (reg:SI 0 ax [128]))) mQuery.c:176 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [128])
        (nil)))
(insn 108 107 109 12 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.3736 ] [77])
                (plus:DI (reg:DI 0 ax [127])
                    (reg:DI 1 dx [126])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:176 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [127])
        (expr_list:REG_DEAD (reg:DI 1 dx [126])
            (nil))))
(insn 109 108 110 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:77 D.3736 ] [77])) mQuery.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.3736 ] [77])
        (nil)))
(call_insn/i 110 109 111 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:176 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 111 110 112 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:176 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 112 111 113 12 (set (reg:XF 8 st [orig:79 D.3741 ] [79])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -50088 [0xffffffffffff3c58])) [0 %sfp+-50088 S8 A64]))) mQuery.c:176 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 78 [ D.3740 ])
        (nil)))
(insn 113 112 114 12 (set (mem:XF (reg/f:DI 3 bx [orig:76 D.3739 ] [76]) [0 *_30+0 S16 A128])
        (reg:XF 8 st [orig:79 D.3741 ] [79])) mQuery.c:176 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:79 D.3741 ] [79])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:76 D.3739 ] [76])
            (nil))))
(insn 114 113 115 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:173 273 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 129 130
(code_label 115 114 116 13 73 "" [1 uses])
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg:DI 1 dx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:173 87 {*movdi_internal_rex64}
     (nil))
(insn 118 117 119 13 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:173 274 {*adddi_1}
     (nil))
(insn 119 118 120 13 (set (reg:DI 1 dx)
        (reg:DI 1 dx [129])) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [129])
        (nil)))
(insn 120 119 121 13 (set (reg:SI 4 si)
        (const_int 50000 [0xc350])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(insn 121 120 122 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [130])
        (nil)))
(call_insn 122 121 123 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:173 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 123 122 124 13 (set (reg/f:DI 0 ax [orig:61 D.3736 ] [61])
        (reg:DI 0 ax)) mQuery.c:173 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 124 123 125 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 D.3736 ] [61])
            (const_int 0 [0]))) mQuery.c:173 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.3736 ] [61])
        (nil)))
(jump_insn 125 124 126 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) mQuery.c:173 612 {*jcc_1}
     (nil)
 -> 131)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131
(note 126 125 128 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 128 126 129 14 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50048 [0xffffffffffff3c80])) [0 i+0 S4 A32])) mQuery.c:173 89 {*movsi_internal}
     (nil))
(insn 129 128 130 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [131])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50052 [0xffffffffffff3c7c])) [0 Nbound+0 S4 A32]))) mQuery.c:173 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [131])
        (nil)))
(jump_insn 130 129 131 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) mQuery.c:173 612 {*jcc_1}
     (nil)
 -> 127)
;;  succ:       8
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 80 81 82 83 84 85 86 87 88 89 90 132 133 134 135
(code_label 131 130 132 15 77 "" [1 uses])
(note 132 131 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 15 (set (reg:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50040 [0xffffffffffff3c88])) [0 rstream+0 S8 A64])) mQuery.c:179 87 {*movdi_internal_rex64}
     (nil))
(insn 134 133 135 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) mQuery.c:179 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [132])
        (nil)))
(call_insn 135 134 136 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:179 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 136 135 137 15 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 137 136 138 15 (set (reg/f:DI 0 ax [orig:80 D.3737 ] [80])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [133])
        (nil)))
(insn 138 137 139 15 (set (reg/f:DI 0 ax [orig:81 D.3739 ] [81])
        (mem/f:DI (reg/f:DI 0 ax [orig:80 D.3737 ] [80]) [0 *_36+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:80 D.3737 ] [80])
        (nil)))
(insn 139 138 140 15 (set (reg:XF 9 st(1) [orig:82 D.3741 ] [82])
        (mem:XF (reg/f:DI 0 ax [orig:81 D.3739 ] [81]) [0 *_37+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:81 D.3739 ] [81])
        (nil)))
(insn 140 139 141 15 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 141 140 142 15 (set (reg/f:DI 1 dx [orig:83 D.3737 ] [83])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [134])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [134])
        (nil)))
(insn 142 141 143 15 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 143 142 144 15 (set (reg:SI 0 ax [orig:84 D.3743 ] [84])
        (mem/j:SI (reg/f:DI 0 ax [135]) [0 config_9(D)->Nbound+0 S4 A128])) mQuery.c:181 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [135])
        (nil)))
(insn 144 143 145 15 (set (reg:DI 0 ax [orig:85 D.3738 ] [85])
        (sign_extend:DI (reg:SI 0 ax [orig:84 D.3743 ] [84]))) mQuery.c:181 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:84 D.3743 ] [84])
        (nil)))
(insn 145 144 146 15 (parallel [
            (set (reg:DI 0 ax [orig:86 D.3738 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.3738 ] [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:85 D.3738 ] [85])
        (nil)))
(insn 146 145 147 15 (parallel [
            (set (reg:DI 0 ax [orig:87 D.3744 ] [87])
                (plus:DI (reg:DI 0 ax [orig:86 D.3738 ] [86])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:86 D.3738 ] [86])
        (nil)))
(insn 147 146 148 15 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.3737 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 D.3744 ] [87])
                    (reg/f:DI 1 dx [orig:83 D.3737 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:87 D.3744 ] [87])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:83 D.3737 ] [83])
            (nil))))
(insn 148 147 149 15 (set (reg/f:DI 0 ax [orig:89 D.3739 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [orig:88 D.3737 ] [88]) [0 *_44+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.3737 ] [88])
        (nil)))
(insn 149 148 150 15 (set (reg:XF 8 st [orig:90 D.3741 ] [90])
        (mem:XF (reg/f:DI 0 ax [orig:89 D.3739 ] [89]) [0 *_45+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.3739 ] [89])
        (nil)))
(insn 150 149 151 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:82 D.3741 ] [82])
            (reg:XF 8 st [orig:90 D.3741 ] [90]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 151 150 201 15 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (nil)
 -> 178)
;;  succ:       19
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 90
;; lr  def 	 17 [flags]
(note 201 151 152 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 152 201 153 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:82 D.3741 ] [82])
            (reg:XF 8 st [orig:90 D.3741 ] [90]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:90 D.3741 ] [90])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:82 D.3741 ] [82])
            (nil))))
(jump_insn 153 152 154 16 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (nil)
 -> 178)
;;  succ:       19
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 98 99 100 101 102 103 136 137 138
(note 154 153 155 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 17 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 156 155 157 17 (set (reg/f:DI 0 ax [orig:91 D.3737 ] [91])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [136])
        (nil)))
(insn 157 156 158 17 (set (reg/f:DI 0 ax [orig:92 D.3739 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.3737 ] [91]) [0 *_47+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.3737 ] [91])
        (nil)))
(insn 158 157 159 17 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.3739 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 D.3739 ] [92])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:92 D.3739 ] [92])
        (nil)))
(insn 159 158 160 17 (set (reg:XF 9 st(1) [orig:94 D.3741 ] [94])
        (mem:XF (reg/f:DI 0 ax [orig:93 D.3739 ] [93]) [0 *_49+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.3739 ] [93])
        (nil)))
(insn 160 159 161 17 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 161 160 162 17 (set (reg/f:DI 1 dx [orig:95 D.3737 ] [95])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [137])
                (const_int 8 [0x8])) [0 config_9(D)->bound+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [137])
        (nil)))
(insn 162 161 163 17 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50080 [0xffffffffffff3c60])) [0 config+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (nil))
(insn 163 162 164 17 (set (reg:SI 0 ax [orig:96 D.3743 ] [96])
        (mem/j:SI (reg/f:DI 0 ax [138]) [0 config_9(D)->Nbound+0 S4 A128])) mQuery.c:181 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [138])
        (nil)))
(insn 164 163 165 17 (set (reg:DI 0 ax [orig:97 D.3738 ] [97])
        (sign_extend:DI (reg:SI 0 ax [orig:96 D.3743 ] [96]))) mQuery.c:181 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:96 D.3743 ] [96])
        (nil)))
(insn 165 164 166 17 (parallel [
            (set (reg:DI 0 ax [orig:98 D.3738 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.3738 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:97 D.3738 ] [97])
        (nil)))
(insn 166 165 167 17 (parallel [
            (set (reg:DI 0 ax [orig:99 D.3744 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.3738 ] [98])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:98 D.3738 ] [98])
        (nil)))
(insn 167 166 168 17 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.3737 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 D.3744 ] [99])
                    (reg/f:DI 1 dx [orig:95 D.3737 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:99 D.3744 ] [99])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:95 D.3737 ] [95])
            (nil))))
(insn 168 167 169 17 (set (reg/f:DI 0 ax [orig:101 D.3739 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 D.3737 ] [100]) [0 *_56+0 S8 A64])) mQuery.c:181 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.3737 ] [100])
        (nil)))
(insn 169 168 170 17 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.3739 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 D.3739 ] [101])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:181 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.3739 ] [101])
        (nil)))
(insn 170 169 171 17 (set (reg:XF 8 st [orig:103 D.3741 ] [103])
        (mem:XF (reg/f:DI 0 ax [orig:102 D.3739 ] [102]) [0 *_58+0 S16 A128])) mQuery.c:181 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:102 D.3739 ] [102])
        (nil)))
(insn 171 170 172 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:94 D.3741 ] [94])
            (reg:XF 8 st [orig:103 D.3741 ] [103]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (nil))
(jump_insn 172 171 202 17 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (nil)
 -> 178)
;;  succ:       19
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 103
;; lr  def 	 17 [flags]
(note 202 172 173 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 173 202 174 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:XF 9 st(1) [orig:94 D.3741 ] [94])
            (reg:XF 8 st [orig:103 D.3741 ] [103]))) mQuery.c:181 64 {*cmpiuxf_i387}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:103 D.3741 ] [103])
        (expr_list:REG_DEAD (reg:XF 9 st(1) [orig:94 D.3741 ] [94])
            (nil))))
(jump_insn 174 173 178 18 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 182)
            (pc))) mQuery.c:181 612 {*jcc_1}
     (nil)
 -> 182)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              18 (FALLTHRU)
;;              15
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(code_label 178 174 179 19 79 "" [3 uses])
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f8734794a18 *.LC34>)) mQuery.c:182 87 {*movdi_internal_rex64}
     (nil))
(call_insn 181 180 182 19 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:182 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 104 105
(code_label 182 181 183 20 80 "" [1 uses])
(note 183 182 184 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 187 20 (set (reg:SI 0 ax [orig:104 D.3743 ] [104])
        (const_int 1 [0x1])) mQuery.c:184 89 {*movsi_internal}
     (nil))
(insn 187 184 191 20 (set (reg:SI 0 ax [orig:105 <retval> ] [105])
        (reg:SI 0 ax [orig:104 D.3743 ] [104])) mQuery.c:184 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:104 D.3743 ] [104])
        (nil)))
(insn 191 187 194 20 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:105 <retval> ] [105])) mQuery.c:185 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:105 <retval> ] [105])
        (nil)))
(insn 194 191 195 20 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.3745+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [141]))
        ]) mQuery.c:185 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 2 cx [141])
        (nil)))
(jump_insn 195 194 206 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) mQuery.c:185 612 {*jcc_1}
     (nil)
 -> 198)
;;  succ:       22
;;              21 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 206 195 196 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(call_insn 196 206 197 21 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:185 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 197 196 198)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 198 197 207 22 83 "" [1 uses])
(note 207 198 199 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 199 207 0 22 (use (reg/i:SI 0 ax)) mQuery.c:185 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function get_temp_shock (get_temp_shock, funcdef_no=8, decl_uid=1768, cgraph_uid=8)

      Creating newreg=114
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
deleting insn with uid = 4.
      Creating newreg=115
Removing SCRATCH in insn #159 (nop 3)
rescanning insn with uid = 159.
deleting insn with uid = 159.

********** Local #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=592, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=560, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r114
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rzw {*call}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 23:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 66:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 69:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 76:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 101:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 117:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 121
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rzw {*call_value}
          alt=0,overall=1223,losers=3,rld_nregs=2
          alt=1,overall=616,losers=2,rld_nregs=1
          alt=3,overall=1227,losers=3 -- reject
          alt=4,overall=621,losers=2 -- reject
          alt=8,overall=7,losers=1,rld_nregs=1
          alt=9,overall=17,losers=2 -- reject
          alt=10,overall=1,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 124:  (0) m  (1) x {*movdf_internal_rex64}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) f {*movxf_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 127:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rm {*cmpsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r115
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 67 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 80 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 19
   Insn 161: point = 0
  BB 20
   Insn 164: point = 0
  BB 18
   Insn 160: point = 0
   Insn 159: point = 0
   Insn 156: point = 1
   Insn 152: point = 2
   Insn 149: point = 4
   Insn 148: point = 5
   Insn 147: point = 5
   Insn 146: point = 6
  BB 16
   Insn 138: point = 7
   Insn 137: point = 7
   Insn 136: point = 8
   Insn 135: point = 9
   Insn 134: point = 9
   Insn 133: point = 10
   Insn 132: point = 10
   Insn 131: point = 11
   Insn 130: point = 12
  BB 7
   Insn 171: point = 13
   Insn 55: point = 13
   Insn 54: point = 13
   Insn 53: point = 14
   Insn 52: point = 15
   Insn 51: point = 15
   Insn 50: point = 15
   Insn 49: point = 15
   Insn 48: point = 16
   Insn 47: point = 17
   Insn 46: point = 18
   Insn 45: point = 18
   Insn 44: point = 19
   Insn 43: point = 19
   Insn 42: point = 20
   Insn 41: point = 21
   Insn 40: point = 22
   Insn 39: point = 23
   Insn 38: point = 23
   Insn 37: point = 24
  BB 6
   Insn 35: point = 25
   Insn 34: point = 25
   Insn 32: point = 26
   Insn 31: point = 27
   Insn 30: point = 27
   Insn 29: point = 28
   Insn 28: point = 28
   Insn 27: point = 29
   Insn 26: point = 30
  BB 4
   Insn 169: point = 31
   Insn 19: point = 31
  BB 3
   Insn 16: point = 31
   Insn 15: point = 31
  BB 2
   Insn 13: point = 31
   Insn 12: point = 31
   Insn 11: point = 31
   Insn 10: point = 32
   Insn 9: point = 33
   Insn 8: point = 33
   Insn 7: point = 33
   Insn 4: point = 33
   Insn 2: point = 35
  BB 5
   Insn 23: point = 35
  BB 15
   Insn 127: point = 35
   Insn 126: point = 35
   Insn 125: point = 36
   Insn 124: point = 38
   Insn 123: point = 39
   Insn 122: point = 39
   Insn 121: point = 40
   Insn 120: point = 42
   Insn 119: point = 44
   Insn 118: point = 45
   Insn 117: point = 46
   Insn 116: point = 46
   Insn 115: point = 48
   Insn 114: point = 50
   Insn 113: point = 52
   Insn 112: point = 54
   Insn 111: point = 56
   Insn 110: point = 57
   Insn 109: point = 59
  BB 14
   Insn 106: point = 60
   Insn 105: point = 60
  BB 13
   Insn 103: point = 60
   Insn 102: point = 60
   Insn 101: point = 61
   Insn 100: point = 63
   Insn 99: point = 65
  BB 10
   Insn 83: point = 66
   Insn 82: point = 66
   Insn 81: point = 67
   Insn 80: point = 69
   Insn 79: point = 71
  BB 8
   Insn 173: point = 72
   Insn 72: point = 72
   Insn 71: point = 72
   Insn 70: point = 73
   Insn 69: point = 75
   Insn 68: point = 76
   Insn 67: point = 76
   Insn 66: point = 77
   Insn 65: point = 78
   Insn 64: point = 80
   Insn 63: point = 82
   Insn 62: point = 84
   Insn 61: point = 86
   Insn 60: point = 87
   Insn 59: point = 89
  BB 17
   Insn 143: point = 90
   Insn 142: point = 90
   Insn 141: point = 91
  BB 9
   Insn 76: point = 92
  BB 12
   Insn 96: point = 92
   Insn 95: point = 92
   Insn 93: point = 93
   Insn 92: point = 95
   Insn 91: point = 97
  BB 11
   Insn 89: point = 98
   Insn 88: point = 98
   Insn 87: point = 99
   Insn 86: point = 101
   Insn 85: point = 103
 r59: [25..26]
 r60: [15..17]
 r61: [7..8]
 r62: [81..87]
 r63: [83..84]
 r64: [81..82]
 r65: [79..80]
 r66: [72..78]
 r67: [74..75]
 r68: [72..73]
 r69: [66..67]
 r70: [98..99]
 r71: [92..93]
 r72: [60..61]
 r73: [51..57]
 r74: [53..54]
 r75: [51..52]
 r76: [49..50]
 r77: [47..48]
 r78: [35..46]
 r79: [39..40]
 r80: [37..38]
 r81: [35..36]
 r82: [3..4]
 r83: [1..2]
 r84: [31..32]
 r85: [28..30]
 r86: [27..29]
 r87: [23..24]
 r88: [20..22]
 r89: [20..21]
 r90: [18..19]
 r91: [15..16]
 r92: [13..14]
 r93: [88..89]
 r94: [85..86]
 r95: [76..77]
 r96: [68..69]
 r97: [70..71]
 r98: [100..101]
 r99: [102..103]
 r100: [94..95]
 r101: [96..97]
 r102: [62..63]
 r103: [64..65]
 r104: [58..59]
 r105: [55..56]
 r106: [41..45]
 r107: [41..42]
 r108: [43..44]
 r109: [10..12]
 r110: [9..11]
 r111: [90..91]
 r112: [5..6]
 r114: [33..34]
 r115: [0..0]
Compressing live ranges: from 104 to 93 - 89%
Ranges after the compression:
 r59: [21..22]
 r60: [13..14]
 r61: [7..8]
 r62: [71..76]
 r63: [73..74]
 r64: [71..72]
 r65: [69..70]
 r66: [63..68]
 r67: [65..66]
 r68: [63..64]
 r69: [57..58]
 r70: [87..88]
 r71: [81..82]
 r72: [51..52]
 r73: [43..48]
 r74: [45..46]
 r75: [43..44]
 r76: [41..42]
 r77: [39..40]
 r78: [29..38]
 r79: [33..34]
 r80: [31..32]
 r81: [29..30]
 r82: [3..4]
 r83: [1..2]
 r84: [25..26]
 r85: [23..24]
 r86: [23..24]
 r87: [19..20]
 r88: [17..18]
 r89: [17..18]
 r90: [15..16]
 r91: [13..14]
 r92: [11..12]
 r93: [77..78]
 r94: [75..76]
 r95: [67..68]
 r96: [59..60]
 r97: [61..62]
 r98: [89..90]
 r99: [91..92]
 r100: [83..84]
 r101: [85..86]
 r102: [53..54]
 r103: [55..56]
 r104: [49..50]
 r105: [47..48]
 r106: [35..38]
 r107: [35..36]
 r108: [37..38]
 r109: [9..10]
 r110: [9..10]
 r111: [79..80]
 r112: [5..6]
 r114: [27..28]
 r115: [0..0]
	 Assigning to 114 (cl=INDEX_REGS, orig=114, freq=1, tfirst=114, tfreq=1)...
	   Assign 0 to reload r114 (freq=1)
	 Assigning to 115 (cl=INDEX_REGS, orig=115, freq=1, tfirst=115, tfreq=1)...
	   Assign 2 to reload r115 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

  Slot 0 regnos (width = 8):	 67	 80
Changing spilled pseudos to memory in insn #69
Changing spilled pseudos to memory in insn #70
Changing spilled pseudos to memory in insn #124
Changing spilled pseudos to memory in insn #125

********** Local #3: **********

Reusing alternative 0 for insn #125
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #124
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 124:  (0) m  (1) x {*movdf_internal_rex64}
Reusing alternative 0 for insn #70
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 10 for insn #69
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 69:  (0) m  (1) x {*movdf_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=592, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=560, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 32
changing reg in insn 34
changing reg in insn 47
changing reg in insn 49
changing reg in insn 136
changing reg in insn 137
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 88
changing reg in insn 93
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 110
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 126
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 126
changing reg in insn 149
changing reg in insn 152
changing reg in insn 152
changing reg in insn 156
changing reg in insn 10
changing reg in insn 11
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 80
changing reg in insn 81
changing reg in insn 79
changing reg in insn 80
changing reg in insn 86
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 92
changing reg in insn 93
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 120
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 134
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 4
changing reg in insn 159
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 161.


get_temp_shock

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 8[st] 17[flags] 21[xmm0]
;;  ref usage 	r0={52d,44u} r1={26d,13u} r2={14d} r3={2d,2u} r4={18d,5u} r5={24d,12u} r6={1d,68u} r7={1d,32u} r8={14d,2u} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={36d,9u} r18={12d} r19={12d} r20={1d,1u} r21={13d,2u} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} 
;;    total ref usage 833{643d,190u,0e} in 122{110 regular + 12 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 conf+0 S8 A64])
        (reg:DI 5 di [ conf ])) mQuery.c:187 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ conf ])
        (nil)))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.3756+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [114])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:187 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [114])
        (nil)))
(insn 7 4 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f87347b04c0 *.LC35>)) mQuery.c:189 87 {*movdi_internal_rex64}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:189 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 0 ax [84])
        (reg:DI 0 ax)) mQuery.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [84])) mQuery.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])
            (const_int 0 [0]))) mQuery.c:190 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) mQuery.c:190 612 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f87347b0558 *.LC36>)) mQuery.c:190 87 {*movdi_internal_rex64}
     (nil))
(call_insn 16 15 17 3 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:190 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 17 16 18 4 87 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 169 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32])
        (const_int 0 [0])) mQuery.c:194 89 {*movsi_internal}
     (nil))
(jump_insn 169 19 170 4 (set (pc)
        (label_ref 24)) mQuery.c:194 650 {jump}
     (nil)
 -> 24)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 170 169 33)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 33 170 22 5 89 "" [1 uses])
(note 22 33 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:194 273 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 85 86
(code_label 24 23 25 6 88 "" [1 uses])
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mQuery.c:194 87 {*movdi_internal_rex64}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:DI 0 ax [86])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:194 274 {*adddi_1}
     (nil))
(insn 28 27 29 6 (set (reg:DI 1 dx)
        (reg:DI 1 dx [85])) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [85])
        (nil)))
(insn 29 28 30 6 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mQuery.c:194 89 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [86])
        (nil)))
(call_insn 31 30 32 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:194 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 32 31 34 6 (set (reg/f:DI 0 ax [orig:59 D.3748 ] [59])
        (reg:DI 0 ax)) mQuery.c:194 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 34 32 35 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:59 D.3748 ] [59])
            (const_int 0 [0]))) mQuery.c:194 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.3748 ] [59])
        (nil)))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) mQuery.c:194 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 87 88 89 90 91 92
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mQuery.c:195 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) mQuery.c:195 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(call_insn 39 38 40 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:195 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 40 39 41 7 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 conf+0 S8 A64])) mQuery.c:197 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 7 (set (reg:SI 1 dx [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32])) mQuery.c:197 89 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 128 [0x80])) [0 conf_8(D)->n_point_shock+0 S4 A128])
        (reg:SI 1 dx [89])) mQuery.c:197 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [89])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
            (nil))))
(insn 43 42 44 7 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32])) mQuery.c:198 89 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:SI 4 si)
        (const_int 2 [0x2])) mQuery.c:198 89 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [90])) mQuery.c:198 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [90])
        (nil)))
(call_insn 46 45 47 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("falloc_matrix") [flags 0x41]  <function_decl 0x7f87349e8600 falloc_matrix>) [0 falloc_matrix S1 A8])
            (const_int 0 [0]))) mQuery.c:198 663 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (nil))))
(insn 47 46 48 7 (set (reg/f:DI 0 ax [orig:60 D.3749 ] [60])
        (reg:DI 0 ax)) mQuery.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 48 47 49 7 (set (reg/f:DI 1 dx [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 conf+0 S8 A64])) mQuery.c:198 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [91])
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])
        (reg/f:DI 0 ax [orig:60 D.3749 ] [60])) mQuery.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [91])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3749 ] [60])
            (nil))))
(insn 50 49 51 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8734751da8 *.LC5>)) mQuery.c:200 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f87347b04c0 *.LC35>)) mQuery.c:200 87 {*movdi_internal_rex64}
     (nil))
(call_insn 52 51 53 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f8734a3fe00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mQuery.c:200 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 53 52 54 7 (set (reg:DI 0 ax [92])
        (reg:DI 0 ax)) mQuery.c:200 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 54 53 55 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])
        (reg:DI 0 ax [92])) mQuery.c:200 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 55 54 171 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(jump_insn 171 55 172 7 (set (pc)
        (label_ref 128)) mQuery.c:201 650 {jump}
     (nil)
 -> 128)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 172 171 140)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 93 94 95
(code_label 140 172 58 8 96 "" [1 uses])
(note 58 140 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 conf+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 8 (set (reg/f:DI 0 ax [orig:62 D.3749 ] [62])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
        (nil)))
(insn 61 60 62 8 (set (reg:SI 1 dx [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])) mQuery.c:202 89 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (reg:DI 1 dx [orig:63 D.3750 ] [63])
        (sign_extend:DI (reg:SI 1 dx [94]))) mQuery.c:202 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [94])
        (nil)))
(insn 63 62 64 8 (parallel [
            (set (reg:DI 1 dx [orig:64 D.3750 ] [64])
                (ashift:DI (reg:DI 1 dx [orig:63 D.3750 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:63 D.3750 ] [63])
        (nil)))
(insn 64 63 65 8 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.3749 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:62 D.3749 ] [62])
                    (reg:DI 1 dx [orig:64 D.3750 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:64 D.3750 ] [64])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:62 D.3749 ] [62])
            (nil))))
(insn 65 64 66 8 (set (reg/f:DI 3 bx [orig:66 D.3751 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.3749 ] [65]) [0 *_16+0 S8 A64])) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.3749 ] [65])
        (nil)))
(insn 66 65 67 8 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:202 274 {*adddi_1}
     (nil))
(insn 67 66 68 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) mQuery.c:202 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(call_insn/i 68 67 69 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:202 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [0 %sfp+-576 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:202 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 70 69 71 8 (set (reg:XF 8 st [orig:68 D.3753 ] [68])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])) [0 %sfp+-576 S8 A64]))) mQuery.c:202 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 67 [ D.3752 ])
        (nil)))
(insn 71 70 72 8 (set (mem:XF (reg/f:DI 3 bx [orig:66 D.3751 ] [66]) [0 *_17+0 S16 A128])
        (reg:XF 8 st [orig:68 D.3753 ] [68])) mQuery.c:202 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:68 D.3753 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:66 D.3751 ] [66])
            (nil))))
(insn 72 71 173 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(jump_insn 173 72 174 8 (set (pc)
        (label_ref 77)) mQuery.c:203 650 {jump}
     (nil)
 -> 77)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 174 173 94)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 94 174 75 9 93 "" [1 uses])
(note 75 94 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:203 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69 96 97
(code_label 77 76 78 10 91 "" [1 uses])
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 80 79 81 10 (set (reg:DI 0 ax [96])
        (sign_extend:DI (reg:SI 0 ax [97]))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [97])
        (nil)))
(insn 81 80 82 10 (set (reg:QI 0 ax [orig:69 D.3754 ] [69])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [96]))
                (const_int -528 [0xfffffffffffffdf0])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [96])
        (nil)))
(insn 82 81 83 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:69 D.3754 ] [69])
            (const_int 9 [0x9]))) mQuery.c:203 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:69 D.3754 ] [69])
        (nil)))
(jump_insn 83 82 84 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 98 99
(note 84 83 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 11 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 86 85 87 11 (set (reg:DI 0 ax [98])
        (sign_extend:DI (reg:SI 0 ax [99]))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [99])
        (nil)))
(insn 87 86 88 11 (set (reg:QI 0 ax [orig:70 D.3754 ] [70])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [98]))
                (const_int -528 [0xfffffffffffffdf0])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [98])
        (nil)))
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:70 D.3754 ] [70])
            (const_int 32 [0x20]))) mQuery.c:203 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:70 D.3754 ] [70])
        (nil)))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 71 100 101
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])) mQuery.c:203 89 {*movsi_internal}
     (nil))
(insn 92 91 93 12 (set (reg:DI 0 ax [100])
        (sign_extend:DI (reg:SI 0 ax [101]))) mQuery.c:203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [101])
        (nil)))
(insn 93 92 95 12 (set (reg:QI 0 ax [orig:71 D.3754 ] [71])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [100]))
                (const_int -528 [0xfffffffffffffdf0])) [0 c S1 A8])) mQuery.c:203 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 95 93 96 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:71 D.3754 ] [71])
            (const_int 0 [0]))) mQuery.c:203 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:71 D.3754 ] [71])
        (nil)))
(jump_insn 96 95 97 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) mQuery.c:203 612 {*jcc_1}
     (nil)
 -> 94)
;;  succ:       9
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72 102 103
(code_label 97 96 98 13 92 "" [2 uses])
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 13 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])) mQuery.c:204 89 {*movsi_internal}
     (nil))
(insn 100 99 101 13 (set (reg:DI 0 ax [102])
        (sign_extend:DI (reg:SI 0 ax [103]))) mQuery.c:204 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [103])
        (nil)))
(insn 101 100 102 13 (set (reg:QI 0 ax [orig:72 D.3754 ] [72])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [102]))
                (const_int -528 [0xfffffffffffffdf0])) [0 c S1 A8])) mQuery.c:204 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 102 101 103 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:72 D.3754 ] [72])
            (const_int 0 [0]))) mQuery.c:204 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:72 D.3754 ] [72])
        (nil)))
(jump_insn 103 102 104 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) mQuery.c:204 612 {*jcc_1}
     (nil)
 -> 107)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f87347b05f0 *.LC37>)) mQuery.c:204 87 {*movdi_internal_rex64}
     (nil))
(call_insn 106 105 107 14 (call (mem:QI (symbol_ref:DI ("BuG") [flags 0x41]  <function_decl 0x7f87349e8900 BuG>) [0 BuG S1 A8])
        (const_int 0 [0])) mQuery.c:204 656 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74 75 76 77 78 79 80 81 104 105 106 107 108
(code_label 107 106 108 15 94 "" [1 uses])
(note 108 107 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 15 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 conf+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (nil))
(insn 110 109 111 15 (set (reg/f:DI 0 ax [orig:73 D.3749 ] [73])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 120 [0x78])) [0 conf_8(D)->point_shock+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [104])
        (nil)))
(insn 111 110 112 15 (set (reg:SI 1 dx [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])) mQuery.c:205 89 {*movsi_internal}
     (nil))
(insn 112 111 113 15 (set (reg:DI 1 dx [orig:74 D.3750 ] [74])
        (sign_extend:DI (reg:SI 1 dx [105]))) mQuery.c:205 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 1 dx [105])
        (nil)))
(insn 113 112 114 15 (parallel [
            (set (reg:DI 1 dx [orig:75 D.3750 ] [75])
                (ashift:DI (reg:DI 1 dx [orig:74 D.3750 ] [74])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 513 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.3750 ] [74])
        (nil)))
(insn 114 113 115 15 (parallel [
            (set (reg/f:DI 0 ax [orig:76 D.3749 ] [76])
                (plus:DI (reg/f:DI 0 ax [orig:73 D.3749 ] [73])
                    (reg:DI 1 dx [orig:75 D.3750 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:75 D.3750 ] [75])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.3749 ] [73])
            (nil))))
(insn 115 114 116 15 (set (reg/f:DI 0 ax [orig:77 D.3751 ] [77])
        (mem/f:DI (reg/f:DI 0 ax [orig:76 D.3749 ] [76]) [0 *_29+0 S8 A64])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:76 D.3749 ] [76])
        (nil)))
(insn 116 115 117 15 (parallel [
            (set (reg/f:DI 3 bx [orig:78 D.3751 ] [78])
                (plus:DI (reg/f:DI 0 ax [orig:77 D.3751 ] [77])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:77 D.3751 ] [77])
        (nil)))
(insn 117 116 118 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 273 {*addsi_1}
     (nil))
(insn 118 117 119 15 (parallel [
            (set (reg:DI 1 dx [106])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (nil))
(insn 119 118 120 15 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [0 j+0 S4 A32])) mQuery.c:205 89 {*movsi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:DI 0 ax [107])
        (sign_extend:DI (reg:SI 0 ax [108]))) mQuery.c:205 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [108])
        (nil)))
(insn 121 120 122 15 (parallel [
            (set (reg/f:DI 0 ax [orig:79 D.3748 ] [79])
                (plus:DI (reg:DI 0 ax [107])
                    (reg:DI 1 dx [106])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:205 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [107])
        (expr_list:REG_DEAD (reg:DI 1 dx [106])
            (nil))))
(insn 122 121 123 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:79 D.3748 ] [79])) mQuery.c:205 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:79 D.3748 ] [79])
        (nil)))
(call_insn/i 123 122 124 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f8734a6a900 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) mQuery.c:205 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 124 123 125 15 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [0 %sfp+-576 S8 A64])
        (reg:DF 21 xmm0)) mQuery.c:205 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 125 124 126 15 (set (reg:XF 8 st [orig:81 D.3753 ] [81])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])) [0 %sfp+-576 S8 A64]))) mQuery.c:205 162 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 80 [ D.3752 ])
        (nil)))
(insn 126 125 127 15 (set (mem:XF (reg/f:DI 3 bx [orig:78 D.3751 ] [78]) [0 *_31+0 S16 A128])
        (reg:XF 8 st [orig:81 D.3753 ] [81])) mQuery.c:205 131 {*movxf_internal_rex64}
     (expr_list:REG_DEAD (reg:XF 8 st [orig:81 D.3753 ] [81])
        (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:78 D.3751 ] [78])
            (nil))))
(insn 127 126 128 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:201 273 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 109 110
(code_label 128 127 129 16 90 "" [1 uses])
(note 129 128 130 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 16 (set (reg:DI 1 dx [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mQuery.c:201 87 {*movdi_internal_rex64}
     (nil))
(insn 131 130 132 16 (parallel [
            (set (reg:DI 0 ax [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:201 274 {*adddi_1}
     (nil))
(insn 132 131 133 16 (set (reg:DI 1 dx)
        (reg:DI 1 dx [109])) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [109])
        (nil)))
(insn 133 132 134 16 (set (reg:SI 4 si)
        (const_int 500 [0x1f4])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(insn 134 133 135 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [110])
        (nil)))
(call_insn 135 134 136 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8734a56f00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) mQuery.c:201 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 136 135 137 16 (set (reg/f:DI 0 ax [orig:61 D.3748 ] [61])
        (reg:DI 0 ax)) mQuery.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 137 136 138 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 D.3748 ] [61])
            (const_int 0 [0]))) mQuery.c:201 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.3748 ] [61])
        (nil)))
(jump_insn 138 137 139 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) mQuery.c:201 612 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111
(note 139 138 141 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 141 139 142 17 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -548 [0xfffffffffffffddc])) [0 i+0 S4 A32])) mQuery.c:201 89 {*movsi_internal}
     (nil))
(insn 142 141 143 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [111])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -540 [0xfffffffffffffde4])) [0 N+0 S4 A32]))) mQuery.c:201 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [111])
        (nil)))
(jump_insn 143 142 144 17 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 140)
            (pc))) mQuery.c:201 612 {*jcc_1}
     (nil)
 -> 140)
;;  succ:       8
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83 112
(code_label 144 143 145 18 95 "" [1 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -536 [0xfffffffffffffde8])) [0 rstream+0 S8 A64])) mQuery.c:207 87 {*movdi_internal_rex64}
     (nil))
(insn 147 146 148 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) mQuery.c:207 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [112])
        (nil)))
(call_insn 148 147 149 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f8734a3fb00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) mQuery.c:207 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 149 148 152 18 (set (reg:SI 0 ax [orig:82 D.3755 ] [82])
        (const_int 1 [0x1])) mQuery.c:208 89 {*movsi_internal}
     (nil))
(insn 152 149 156 18 (set (reg:SI 0 ax [orig:83 <retval> ] [83])
        (reg:SI 0 ax [orig:82 D.3755 ] [82])) mQuery.c:208 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:82 D.3755 ] [82])
        (nil)))
(insn 156 152 159 18 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:83 <retval> ] [83])) mQuery.c:210 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:83 <retval> ] [83])
        (nil)))
(insn 159 156 160 18 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.3756+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [115]))
        ]) mQuery.c:210 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 2 cx [115])
        (nil)))
(jump_insn 160 159 167 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) mQuery.c:210 612 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 167 160 161 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(call_insn 161 167 162 19 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:210 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 163)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 163 162 168 20 98 "" [1 uses])
(note 168 163 164 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 164 168 0 20 (use (reg/i:SI 0 ax)) mQuery.c:210 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function add_nsim_output (add_nsim_output, funcdef_no=9, decl_uid=1772, cgraph_uid=9)

      Creating newreg=108
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
deleting insn with uid = 6.
      Creating newreg=109
Removing SCRATCH in insn #110 (nop 3)
rescanning insn with uid = 110.
deleting insn with uid = 110.

********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=8,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r108
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 13:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 28:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=6,losers=1 -- reject
          alt=1,overall=6,losers=1 -- reject
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 60:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 61:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=18,losers=2 -- reject
          alt=3,overall=18,losers=2 -- reject
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 73:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 77:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=110 from oldreg=92, assigning class CREG to r110
      Creating newreg=111 from oldreg=94, assigning class DIREG to r111
   77: {r110:DI=unspec[[r111:DI],r96:QI,0x1,r110:DI] 23;clobber r111:DI;clobber flags:CC;}
      REG_DEAD r96:QI
      REG_DEAD r95:DI
      REG_DEAD r94:DI
      REG_UNUSED r94:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  126: r110:DI=r95:DI
  128: r111:DI=r94:DI
    Inserting insn reload after:
  127: r92:DI=r110:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=18,losers=2 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 92:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=112 from oldreg=101, assigning class CREG to r112
      Creating newreg=113 from oldreg=103, assigning class DIREG to r113
   92: {r112:DI=unspec[[r113:DI],r105:QI,0x1,r112:DI] 23;clobber r113:DI;clobber flags:CC;}
      REG_DEAD r105:QI
      REG_DEAD r104:DI
      REG_DEAD r103:DI
      REG_UNUSED r103:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  129: r112:DI=r104:DI
  131: r113:DI=r103:DI
    Inserting insn reload after:
  130: r101:DI=r112:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=18,losers=2 -- reject
          alt=3,overall=18,losers=2 -- reject
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 99:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r109
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) rzw {*call}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 12
   Insn 112: point = 0
  BB 13
   Insn 115: point = 0
  BB 11
   Insn 111: point = 0
   Insn 110: point = 0
   Insn 107: point = 1
   Insn 103: point = 2
   Insn 100: point = 4
   Insn 99: point = 5
   Insn 98: point = 6
   Insn 97: point = 6
   Insn 96: point = 8
   Insn 94: point = 9
   Insn 93: point = 11
   Insn 130: point = 13
	Hard reg 0 is preferable by r112 with profit 1
   Insn 92: point = 15
   Insn 131: point = 17
	Hard reg 1 is preferable by r113 with profit 1
   Insn 129: point = 19
	Hard reg 0 is preferable by r112 with profit 1
	Hard reg 2 is preferable by r112 with profit 1
   Insn 91: point = 21
   Insn 90: point = 22
   Insn 89: point = 24
   Insn 95: point = 25
   Insn 88: point = 26
   Insn 87: point = 26
   Insn 86: point = 27
   Insn 85: point = 28
   Insn 84: point = 29
   Insn 83: point = 30
   Insn 82: point = 31
   Insn 81: point = 33
   Insn 79: point = 34
   Insn 78: point = 36
   Insn 127: point = 38
	Hard reg 0 is preferable by r110 with profit 1
   Insn 77: point = 40
   Insn 128: point = 42
	Hard reg 1 is preferable by r111 with profit 1
   Insn 126: point = 44
	Hard reg 0 is preferable by r110 with profit 1
	Hard reg 2 is preferable by r110 with profit 1
   Insn 76: point = 46
   Insn 75: point = 47
   Insn 74: point = 49
   Insn 80: point = 50
   Insn 73: point = 51
   Insn 72: point = 52
   Insn 71: point = 54
   Insn 70: point = 55
   Insn 69: point = 57
  BB 10
   Insn 67: point = 58
   Insn 66: point = 58
   Insn 65: point = 59
  BB 8
   Insn 124: point = 60
   Insn 47: point = 60
   Insn 46: point = 60
   Insn 45: point = 60
   Insn 44: point = 60
   Insn 43: point = 61
   Insn 42: point = 61
   Insn 41: point = 62
   Insn 40: point = 63
  BB 7
   Insn 38: point = 64
   Insn 37: point = 64
   Insn 35: point = 65
   Insn 34: point = 67
   Insn 33: point = 69
   Insn 32: point = 70
   Insn 31: point = 72
  BB 5
   Insn 122: point = 73
  BB 4
   Insn 23: point = 73
   Insn 22: point = 73
   Insn 20: point = 74
   Insn 19: point = 76
   Insn 18: point = 78
   Insn 17: point = 79
   Insn 16: point = 81
  BB 2
   Insn 120: point = 82
   Insn 9: point = 82
   Insn 6: point = 82
   Insn 4: point = 84
   Insn 3: point = 84
   Insn 2: point = 84
  BB 3
   Insn 13: point = 84
  BB 6
   Insn 28: point = 84
  BB 9
   Insn 61: point = 84
   Insn 60: point = 84
   Insn 59: point = 85
   Insn 58: point = 87
   Insn 57: point = 89
   Insn 56: point = 90
   Insn 55: point = 92
   Insn 54: point = 93
   Insn 53: point = 95
   Insn 52: point = 96
   Insn 51: point = 98
 r59: [77..79]
 r60: [75..76]
 r61: [73..74]
 r62: [68..70]
 r63: [66..67]
 r64: [64..65]
 r65: [94..96]
 r66: [84..93]
 r67: [88..90]
 r68: [86..87]
 r69: [84..85]
 r70: [53..55]
 r71: [51..52]
 r72: [32..34]
 r73: [30..31]
 r74: [7..9]
 r75: [5..6]
 r76: [3..4]
 r77: [1..2]
 r78: [80..81]
 r79: [77..78]
 r80: [71..72]
 r81: [68..69]
 r82: [61..63]
 r83: [60..62]
 r84: [97..98]
 r85: [94..95]
 r86: [91..92]
 r87: [88..89]
 r88: [58..59]
 r89: [56..57]
 r90: [53..54]
 r91: [48..50]
 r92: [37..38]
 r93: [35..36]
 r94: [43..47]
 r95: [45..49]
 r96: [41..46]
 r97: [32..33]
 r98: [27..29]
 r99: [26..28]
 r100: [23..25]
 r101: [12..13]
 r102: [10..11]
 r103: [18..22]
 r104: [20..24]
 r105: [16..21]
 r106: [7..8]
 r108: [82..83]
 r109: [0..0]
 r110: [39..44]
 r111: [40..42]
 r112: [14..19]
 r113: [15..17]
Compressing live ranges: from 99 to 79 - 79%
Ranges after the compression:
 r59: [61..62]
 r60: [59..60]
 r61: [57..58]
 r62: [53..54]
 r63: [51..52]
 r64: [49..50]
 r65: [75..76]
 r66: [67..74]
 r67: [71..72]
 r68: [69..70]
 r69: [67..68]
 r70: [41..42]
 r71: [39..40]
 r72: [25..26]
 r73: [23..24]
 r74: [7..8]
 r75: [5..6]
 r76: [3..4]
 r77: [1..2]
 r78: [63..64]
 r79: [61..62]
 r80: [55..56]
 r81: [53..54]
 r82: [47..48]
 r83: [47..48]
 r84: [77..78]
 r85: [75..76]
 r86: [73..74]
 r87: [71..72]
 r88: [45..46]
 r89: [43..44]
 r90: [41..42]
 r91: [37..38]
 r92: [29..30]
 r93: [27..28]
 r94: [33..36]
 r95: [35..38]
 r96: [31..36]
 r97: [25..26]
 r98: [21..22]
 r99: [21..22]
 r100: [19..20]
 r101: [11..12]
 r102: [9..10]
 r103: [15..18]
 r104: [17..20]
 r105: [13..18]
 r106: [7..8]
 r108: [65..66]
 r109: [0..0]
 r110: [31..34]
 r111: [31..32]
 r112: [13..16]
 r113: [13..14]
	 Assigning to 110 (cl=CREG, orig=92, freq=3, tfirst=110, tfreq=3)...
	   Assign 2 to reload r110 (freq=3)
	 Assigning to 112 (cl=CREG, orig=101, freq=3, tfirst=112, tfreq=3)...
	   Assign 2 to reload r112 (freq=3)
	 Assigning to 111 (cl=DIREG, orig=94, freq=2, tfirst=111, tfreq=2)...
	   Assign 5 to reload r111 (freq=2)
	 Assigning to 113 (cl=DIREG, orig=103, freq=2, tfirst=113, tfreq=2)...
	   Assign 5 to reload r113 (freq=2)
	 Assigning to 108 (cl=INDEX_REGS, orig=108, freq=1, tfirst=108, tfreq=1)...
	   Assign 0 to reload r108 (freq=1)
	 Assigning to 109 (cl=INDEX_REGS, orig=109, freq=1, tfirst=109, tfreq=1)...
	   Assign 3 to reload r109 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=6,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 61:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=10,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
          alt=3,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 28:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 13:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=7,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 54
changing reg in insn 60
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 70
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 94
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 100
changing reg in insn 103
changing reg in insn 103
changing reg in insn 107
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 80
changing reg in insn 75
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 75
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 87
changing reg in insn 95
changing reg in insn 90
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 90
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 6
changing reg in insn 110
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 112.


add_nsim_output

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={41d,38u} r1={16d,13u,6e} r2={11d,7u,1e} r3={1d} r4={6d,3u} r5={10d,5u} r6={1d,46u} r7={1d,16u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={24d,4u} r18={3d} r19={3d} r20={1d,1u,7e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 383{236d,133u,14e} in 90{87 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])
        (reg:DI 5 di [ file_out ])) mQuery.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ file_out ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file_in+0 S8 A64])
        (reg:DI 4 si [ file_in ])) mQuery.c:212 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ file_in ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n+0 S4 A32])
        (reg:SI 1 dx [ n ])) mQuery.c:212 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ n ])
        (nil)))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.3765+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [108])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:212 966 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:DI 0 ax [108])
        (nil)))
(insn 9 6 120 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])
        (const_int 0 [0])) mQuery.c:214 89 {*movsi_internal}
     (nil))
(jump_insn 120 9 121 2 (set (pc)
        (label_ref 14)) mQuery.c:214 650 {jump}
     (nil)
 -> 14)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 121 120 21)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 21 121 12 3 101 "" [1 uses])
(note 12 21 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:214 273 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 78 79
(code_label 14 13 15 4 100 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [78])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])) mQuery.c:214 89 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 1 dx [orig:59 D.3760 ] [59])
        (sign_extend:DI (reg:SI 0 ax [78]))) mQuery.c:214 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [78])
        (nil)))
(insn 18 17 19 4 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file_in+0 S8 A64])) mQuery.c:214 87 {*movdi_internal_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg/f:DI 0 ax [orig:60 D.3761 ] [60])
                (plus:DI (reg/f:DI 0 ax [79])
                    (reg:DI 1 dx [orig:59 D.3760 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:214 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:59 D.3760 ] [59])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                    (reg:DI 1 dx [orig:59 D.3760 ] [59]))
                (nil)))))
(insn 20 19 22 4 (set (reg:QI 0 ax [orig:61 D.3762 ] [61])
        (mem:QI (reg/f:DI 0 ax [orig:60 D.3761 ] [60]) [0 *_7+0 S1 A8])) mQuery.c:214 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3761 ] [60])
        (nil)))
(insn 22 20 23 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:61 D.3762 ] [61])
            (const_int 0 [0]))) mQuery.c:214 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:61 D.3762 ] [61])
        (nil)))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) mQuery.c:214 612 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 122 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 122 24 123 5 (set (pc)
        (label_ref 29)) mQuery.c:215 650 {jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 123 122 36)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 36 123 27 6 103 "" [1 uses])
(note 27 36 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:215 273 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64 80 81
(code_label 29 28 30 7 102 "" [1 uses])
(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 7 (set (reg:SI 0 ax [80])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32])) mQuery.c:215 89 {*movsi_internal}
     (nil))
(insn 32 31 33 7 (set (reg:DI 1 dx [orig:62 D.3760 ] [62])
        (sign_extend:DI (reg:SI 0 ax [80]))) mQuery.c:215 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [80])
        (nil)))
(insn 33 32 34 7 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file_in+0 S8 A64])) mQuery.c:215 87 {*movdi_internal_rex64}
     (nil))
(insn 34 33 35 7 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.3761 ] [63])
                (plus:DI (reg/f:DI 0 ax [81])
                    (reg:DI 1 dx [orig:62 D.3760 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:215 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.3760 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.3760 ] [62]))
                (nil)))))
(insn 35 34 37 7 (set (reg:QI 0 ax [orig:64 D.3762 ] [64])
        (mem:QI (reg/f:DI 0 ax [orig:63 D.3761 ] [63]) [0 *_11+0 S1 A8])) mQuery.c:215 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:63 D.3761 ] [63])
        (nil)))
(insn 37 35 38 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:64 D.3762 ] [64])
            (const_int 46 [0x2e]))) mQuery.c:215 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:64 D.3762 ] [64])
        (nil)))
(jump_insn 38 37 39 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) mQuery.c:215 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (reg:SI 1 dx [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 n+0 S4 A32])) mQuery.c:218 89 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (parallel [
            (set (reg:DI 0 ax [83])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:218 274 {*adddi_1}
     (nil))
(insn 42 41 43 8 (set (reg:SI 1 dx)
        (reg:SI 1 dx [82])) mQuery.c:218 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [82])
        (nil)))
(insn 43 42 44 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f87347bcab0 *.LC38>)) mQuery.c:218 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [83])) mQuery.c:218 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 45 44 46 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) mQuery.c:218 91 {*movqi_internal}
     (nil))
(call_insn 46 45 47 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f8734943f00 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) mQuery.c:218 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                    (nil))))))
(insn 47 46 124 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])
        (const_int 0 [0])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(jump_insn 124 47 125 8 (set (pc)
        (label_ref 62)) mQuery.c:220 650 {jump}
     (nil)
 -> 62)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 125 124 64)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 69 84 85 86 87
(code_label 64 125 50 9 105 "" [1 uses])
(note 50 64 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 9 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 52 51 53 9 (set (reg:DI 1 dx [orig:65 D.3760 ] [65])
        (sign_extend:DI (reg:SI 0 ax [84]))) mQuery.c:220 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [84])
        (nil)))
(insn 53 52 54 9 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:220 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 9 (parallel [
            (set (reg/f:DI 1 dx [orig:66 D.3761 ] [66])
                (plus:DI (reg:DI 1 dx [orig:65 D.3760 ] [65])
                    (reg/f:DI 0 ax [85])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:65 D.3760 ] [65])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                    (reg:DI 1 dx [orig:65 D.3760 ] [65]))
                (nil)))))
(insn 55 54 56 9 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:DI 2 cx [orig:67 D.3760 ] [67])
        (sign_extend:DI (reg:SI 0 ax [86]))) mQuery.c:220 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [86])
        (nil)))
(insn 57 56 58 9 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file_in+0 S8 A64])) mQuery.c:220 87 {*movdi_internal_rex64}
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.3761 ] [68])
                (plus:DI (reg/f:DI 0 ax [87])
                    (reg:DI 2 cx [orig:67 D.3760 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (expr_list:REG_DEAD (reg:DI 2 cx [orig:67 D.3760 ] [67])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -96 [0xffffffffffffffa0])) [0 file_in+0 S8 A64])
                    (reg:DI 2 cx [orig:67 D.3760 ] [67]))
                (nil)))))
(insn 59 58 60 9 (set (reg:QI 0 ax [orig:69 D.3762 ] [69])
        (mem:QI (reg/f:DI 0 ax [orig:68 D.3761 ] [68]) [0 *_20+0 S1 A8])) mQuery.c:220 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.3761 ] [68])
        (nil)))
(insn 60 59 61 9 (set (mem:QI (reg/f:DI 1 dx [orig:66 D.3761 ] [66]) [0 *_18+0 S1 A8])
        (reg:QI 0 ax [orig:69 D.3762 ] [69])) mQuery.c:220 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:69 D.3762 ] [69])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:66 D.3761 ] [66])
            (nil))))
(insn 61 60 62 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:220 273 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 62 61 63 10 104 "" [1 uses])
(note 63 62 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 63 66 10 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])) mQuery.c:220 89 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 i+0 S4 A32]))) mQuery.c:220 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [88])
        (nil)))
(jump_insn 67 66 68 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) mQuery.c:220 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
(note 68 67 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 j+0 S4 A32])) mQuery.c:221 89 {*movsi_internal}
     (nil))
(insn 70 69 71 11 (set (reg:DI 1 dx [orig:70 D.3760 ] [70])
        (sign_extend:DI (reg:SI 0 ax [89]))) mQuery.c:221 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [89])
        (nil)))
(insn 71 70 72 11 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:221 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 11 (parallel [
            (set (reg/f:DI 0 ax [orig:71 D.3761 ] [71])
                (plus:DI (reg/f:DI 0 ax [90])
                    (reg:DI 1 dx [orig:70 D.3760 ] [70])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:221 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:70 D.3760 ] [70])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                    (reg:DI 1 dx [orig:70 D.3760 ] [70]))
                (nil)))))
(insn 73 72 80 11 (set (mem:QI (reg/f:DI 0 ax [orig:71 D.3761 ] [71]) [0 *_24+0 S1 A8])
        (const_int 0 [0])) mQuery.c:221 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.3761 ] [71])
        (nil)))
(insn 80 73 74 11 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 74 80 75 11 (set (reg:DI 2 cx [95])
        (const_int -1 [0xffffffffffffffff])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 11 (set (reg:DI 1 dx [94])
        (reg:DI 0 ax [91])) mQuery.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [91])
        (nil)))
(insn 76 75 126 11 (set (reg:QI 0 ax [96])
        (const_int 0 [0])) mQuery.c:223 91 {*movqi_internal}
     (nil))
(insn 126 76 128 11 (set (reg:DI 2 cx [92])
        (reg:DI 2 cx [95])) mQuery.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [95])
        (nil)))
(insn 128 126 77 11 (set (reg:DI 5 di [94])
        (reg:DI 1 dx [94])) mQuery.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [94])
        (nil)))
(insn 77 128 127 11 (parallel [
            (set (reg:DI 2 cx [92])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [94]) [0  A8])
                        (reg:QI 0 ax [96])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [92])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [94]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 925 {*strlenqi_1}
     (expr_list:REG_UNUSED (reg:DI 5 di [94])
        (expr_list:REG_DEAD (reg:QI 0 ax [96])
            (nil))))
(insn 127 77 78 11 (set (reg:DI 0 ax [92])
        (reg:DI 2 cx [92])) mQuery.c:223 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [92])
        (nil)))
(insn 78 127 79 11 (set (reg:DI 0 ax [93])
        (not:DI (reg:DI 0 ax [92]))) mQuery.c:223 496 {*one_cmpldi2_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(insn 79 78 81 11 (parallel [
            (set (reg:DI 1 dx [orig:72 D.3763 ] [72])
                (plus:DI (reg:DI 0 ax [93])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [93])
        (nil)))
(insn 81 79 82 11 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:223 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 11 (parallel [
            (set (reg/f:DI 0 ax [orig:73 D.3761 ] [73])
                (plus:DI (reg/f:DI 0 ax [97])
                    (reg:DI 1 dx [orig:72 D.3763 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:223 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:72 D.3763 ] [72])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                    (reg:DI 1 dx [orig:72 D.3763 ] [72]))
                (nil)))))
(insn 83 82 84 11 (set (mem:HI (reg/f:DI 0 ax [orig:73 D.3761 ] [73]) [0 MEM[(void *)_26]+0 S2 A8])
        (const_int 95 [0x5f])) mQuery.c:223 90 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:73 D.3761 ] [73])
        (nil)))
(insn 84 83 85 11 (parallel [
            (set (reg:DI 1 dx [98])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:224 274 {*adddi_1}
     (nil))
(insn 85 84 86 11 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:224 87 {*movdi_internal_rex64}
     (nil))
(insn 86 85 87 11 (set (reg:DI 4 si)
        (reg:DI 1 dx [98])) mQuery.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [98])
        (nil)))
(insn 87 86 88 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) mQuery.c:224 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [99])
        (nil)))
(call_insn 88 87 95 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f8734939900 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) mQuery.c:224 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 95 88 89 11 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 89 95 90 11 (set (reg:DI 2 cx [104])
        (const_int -1 [0xffffffffffffffff])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 90 89 91 11 (set (reg:DI 1 dx [103])
        (reg:DI 0 ax [100])) mQuery.c:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [100])
        (nil)))
(insn 91 90 129 11 (set (reg:QI 0 ax [105])
        (const_int 0 [0])) mQuery.c:225 91 {*movqi_internal}
     (nil))
(insn 129 91 131 11 (set (reg:DI 2 cx [101])
        (reg:DI 2 cx [104])) mQuery.c:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [104])
        (nil)))
(insn 131 129 92 11 (set (reg:DI 5 di [103])
        (reg:DI 1 dx [103])) mQuery.c:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [103])
        (nil)))
(insn 92 131 130 11 (parallel [
            (set (reg:DI 2 cx [101])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [103]) [0  A8])
                        (reg:QI 0 ax [105])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [101])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [103]))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 925 {*strlenqi_1}
     (expr_list:REG_UNUSED (reg:DI 5 di [103])
        (expr_list:REG_DEAD (reg:QI 0 ax [105])
            (nil))))
(insn 130 92 93 11 (set (reg:DI 0 ax [101])
        (reg:DI 2 cx [101])) mQuery.c:225 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [101])
        (nil)))
(insn 93 130 94 11 (set (reg:DI 0 ax [102])
        (not:DI (reg:DI 0 ax [101]))) mQuery.c:225 496 {*one_cmpldi2_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [101])
        (nil)))
(insn 94 93 96 11 (parallel [
            (set (reg:DI 1 dx [orig:74 D.3763 ] [74])
                (plus:DI (reg:DI 0 ax [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (nil)))
(insn 96 94 97 11 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 file_out+0 S8 A64])) mQuery.c:225 87 {*movdi_internal_rex64}
     (nil))
(insn 97 96 98 11 (parallel [
            (set (reg/f:DI 0 ax [orig:75 D.3761 ] [75])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 1 dx [orig:74 D.3763 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) mQuery.c:225 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [106])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:74 D.3763 ] [74])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -88 [0xffffffffffffffa8])) [0 file_out+0 S8 A64])
                    (reg:DI 1 dx [orig:74 D.3763 ] [74]))
                (nil)))))
(insn 98 97 99 11 (set (mem:SI (reg/f:DI 0 ax [orig:75 D.3761 ] [75]) [0 MEM[(void *)_28]+0 S4 A8])
        (const_int 1952539694 [0x7461642e])) mQuery.c:225 89 {*movsi_internal}
     (nil))
(insn 99 98 100 11 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:75 D.3761 ] [75])
                (const_int 4 [0x4])) [0 MEM[(void *)_28]+4 S1 A8])
        (const_int 0 [0])) mQuery.c:225 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:75 D.3761 ] [75])
        (nil)))
(insn 100 99 103 11 (set (reg:SI 0 ax [orig:76 D.3764 ] [76])
        (const_int 1 [0x1])) mQuery.c:227 89 {*movsi_internal}
     (nil))
(insn 103 100 107 11 (set (reg:SI 0 ax [orig:77 <retval> ] [77])
        (reg:SI 0 ax [orig:76 D.3764 ] [76])) mQuery.c:227 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:76 D.3764 ] [76])
        (nil)))
(insn 107 103 110 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:77 <retval> ] [77])) mQuery.c:229 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:77 <retval> ] [77])
        (nil)))
(insn 110 107 111 11 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.3765+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [109]))
        ]) mQuery.c:229 970 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 3 bx [109])
        (nil)))
(jump_insn 111 110 118 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) mQuery.c:229 612 {*jcc_1}
     (nil)
 -> 114)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 118 111 112 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 112 118 113 12 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8734735500 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) mQuery.c:229 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 114)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 114 113 119 13 107 "" [1 uses])
(note 119 114 115 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 115 119 0 13 (use (reg/i:SI 0 ax)) mQuery.c:229 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

